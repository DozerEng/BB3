
BalanceBot3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000115e8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  080117c8  080117c8  000127c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011d40  08011d40  0001334c  2**0
                  CONTENTS
  4 .ARM          00000008  08011d40  08011d40  00012d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011d48  08011d48  0001334c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011d48  08011d48  00012d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011d4c  08011d4c  00012d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  08011d50  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f3c  2000034c  0801209c  0001334c  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20002288  0801209c  00014288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001334c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025fe4  00000000  00000000  0001337c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005157  00000000  00000000  00039360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002098  00000000  00000000  0003e4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018fd  00000000  00000000  00040550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a7b  00000000  00000000  00041e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027788  00000000  00000000  000688c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f665d  00000000  00000000  00090050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001866ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a038  00000000  00000000  001866f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00190728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000034c 	.word	0x2000034c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080117b0 	.word	0x080117b0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000350 	.word	0x20000350
 800021c:	080117b0 	.word	0x080117b0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9be 	b.w	800106c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	468e      	mov	lr, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4688      	mov	r8, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d962      	bls.n	8000e50 <__udivmoddi4+0xdc>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	b14e      	cbz	r6, 8000da4 <__udivmoddi4+0x30>
 8000d90:	f1c6 0320 	rsb	r3, r6, #32
 8000d94:	fa01 f806 	lsl.w	r8, r1, r6
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	40b7      	lsls	r7, r6
 8000d9e:	ea43 0808 	orr.w	r8, r3, r8
 8000da2:	40b4      	lsls	r4, r6
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	fa1f fc87 	uxth.w	ip, r7
 8000dac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fb01 f20c 	mul.w	r2, r1, ip
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dc8:	f080 80ea 	bcs.w	8000fa0 <__udivmoddi4+0x22c>
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f240 80e7 	bls.w	8000fa0 <__udivmoddi4+0x22c>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	443b      	add	r3, r7
 8000dd6:	1a9a      	subs	r2, r3, r2
 8000dd8:	b2a3      	uxth	r3, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dea:	459c      	cmp	ip, r3
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0x8e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df4:	f080 80d6 	bcs.w	8000fa4 <__udivmoddi4+0x230>
 8000df8:	459c      	cmp	ip, r3
 8000dfa:	f240 80d3 	bls.w	8000fa4 <__udivmoddi4+0x230>
 8000dfe:	443b      	add	r3, r7
 8000e00:	3802      	subs	r0, #2
 8000e02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e06:	eba3 030c 	sub.w	r3, r3, ip
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11d      	cbz	r5, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40f3      	lsrs	r3, r6
 8000e10:	2200      	movs	r2, #0
 8000e12:	e9c5 3200 	strd	r3, r2, [r5]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d905      	bls.n	8000e2a <__udivmoddi4+0xb6>
 8000e1e:	b10d      	cbz	r5, 8000e24 <__udivmoddi4+0xb0>
 8000e20:	e9c5 0100 	strd	r0, r1, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4608      	mov	r0, r1
 8000e28:	e7f5      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e2a:	fab3 f183 	clz	r1, r3
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d146      	bne.n	8000ec0 <__udivmoddi4+0x14c>
 8000e32:	4573      	cmp	r3, lr
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xc8>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 8105 	bhi.w	8001046 <__udivmoddi4+0x2d2>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	4690      	mov	r8, r2
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e5      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e4e:	e7e2      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	f000 8090 	beq.w	8000f76 <__udivmoddi4+0x202>
 8000e56:	fab2 f682 	clz	r6, r2
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	f040 80a4 	bne.w	8000fa8 <__udivmoddi4+0x234>
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x11e>
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x11c>
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	f200 80e0 	bhi.w	8001050 <__udivmoddi4+0x2dc>
 8000e90:	46c4      	mov	ip, r8
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea0:	fb02 f404 	mul.w	r4, r2, r4
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x144>
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x142>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f200 80ca 	bhi.w	800104a <__udivmoddi4+0x2d6>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ebe:	e7a5      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ec0:	f1c1 0620 	rsb	r6, r1, #32
 8000ec4:	408b      	lsls	r3, r1
 8000ec6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eca:	431f      	orrs	r7, r3
 8000ecc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ed0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ed4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000edc:	4323      	orrs	r3, r4
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	fa1f fc87 	uxth.w	ip, r7
 8000ee6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eea:	0c1c      	lsrs	r4, r3, #16
 8000eec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ef0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ef4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x1a0>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f06:	f080 809c 	bcs.w	8001042 <__udivmoddi4+0x2ce>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f240 8099 	bls.w	8001042 <__udivmoddi4+0x2ce>
 8000f10:	3802      	subs	r0, #2
 8000f12:	443c      	add	r4, r7
 8000f14:	eba4 040e 	sub.w	r4, r4, lr
 8000f18:	fa1f fe83 	uxth.w	lr, r3
 8000f1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f20:	fb09 4413 	mls	r4, r9, r3, r4
 8000f24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f2c:	45a4      	cmp	ip, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x1ce>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f36:	f080 8082 	bcs.w	800103e <__udivmoddi4+0x2ca>
 8000f3a:	45a4      	cmp	ip, r4
 8000f3c:	d97f      	bls.n	800103e <__udivmoddi4+0x2ca>
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	443c      	add	r4, r7
 8000f42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f46:	eba4 040c 	sub.w	r4, r4, ip
 8000f4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f4e:	4564      	cmp	r4, ip
 8000f50:	4673      	mov	r3, lr
 8000f52:	46e1      	mov	r9, ip
 8000f54:	d362      	bcc.n	800101c <__udivmoddi4+0x2a8>
 8000f56:	d05f      	beq.n	8001018 <__udivmoddi4+0x2a4>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x1fe>
 8000f5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f62:	fa04 f606 	lsl.w	r6, r4, r6
 8000f66:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f72:	2100      	movs	r1, #0
 8000f74:	e74f      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000f76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7a:	0c01      	lsrs	r1, r0, #16
 8000f7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f80:	b280      	uxth	r0, r0
 8000f82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f86:	463b      	mov	r3, r7
 8000f88:	4638      	mov	r0, r7
 8000f8a:	463c      	mov	r4, r7
 8000f8c:	46b8      	mov	r8, r7
 8000f8e:	46be      	mov	lr, r7
 8000f90:	2620      	movs	r6, #32
 8000f92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f96:	eba2 0208 	sub.w	r2, r2, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e766      	b.n	8000e6e <__udivmoddi4+0xfa>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	e718      	b.n	8000dd6 <__udivmoddi4+0x62>
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	e72c      	b.n	8000e02 <__udivmoddi4+0x8e>
 8000fa8:	f1c6 0220 	rsb	r2, r6, #32
 8000fac:	fa2e f302 	lsr.w	r3, lr, r2
 8000fb0:	40b7      	lsls	r7, r6
 8000fb2:	40b1      	lsls	r1, r6
 8000fb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fc2:	b2bc      	uxth	r4, r7
 8000fc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc8:	0c11      	lsrs	r1, r2, #16
 8000fca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fce:	fb08 f904 	mul.w	r9, r8, r4
 8000fd2:	40b0      	lsls	r0, r6
 8000fd4:	4589      	cmp	r9, r1
 8000fd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fda:	b280      	uxth	r0, r0
 8000fdc:	d93e      	bls.n	800105c <__udivmoddi4+0x2e8>
 8000fde:	1879      	adds	r1, r7, r1
 8000fe0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fe4:	d201      	bcs.n	8000fea <__udivmoddi4+0x276>
 8000fe6:	4589      	cmp	r9, r1
 8000fe8:	d81f      	bhi.n	800102a <__udivmoddi4+0x2b6>
 8000fea:	eba1 0109 	sub.w	r1, r1, r9
 8000fee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff2:	fb09 f804 	mul.w	r8, r9, r4
 8000ff6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	4542      	cmp	r2, r8
 8001002:	d229      	bcs.n	8001058 <__udivmoddi4+0x2e4>
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	f109 31ff 	add.w	r1, r9, #4294967295
 800100a:	d2c4      	bcs.n	8000f96 <__udivmoddi4+0x222>
 800100c:	4542      	cmp	r2, r8
 800100e:	d2c2      	bcs.n	8000f96 <__udivmoddi4+0x222>
 8001010:	f1a9 0102 	sub.w	r1, r9, #2
 8001014:	443a      	add	r2, r7
 8001016:	e7be      	b.n	8000f96 <__udivmoddi4+0x222>
 8001018:	45f0      	cmp	r8, lr
 800101a:	d29d      	bcs.n	8000f58 <__udivmoddi4+0x1e4>
 800101c:	ebbe 0302 	subs.w	r3, lr, r2
 8001020:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001024:	3801      	subs	r0, #1
 8001026:	46e1      	mov	r9, ip
 8001028:	e796      	b.n	8000f58 <__udivmoddi4+0x1e4>
 800102a:	eba7 0909 	sub.w	r9, r7, r9
 800102e:	4449      	add	r1, r9
 8001030:	f1a8 0c02 	sub.w	ip, r8, #2
 8001034:	fbb1 f9fe 	udiv	r9, r1, lr
 8001038:	fb09 f804 	mul.w	r8, r9, r4
 800103c:	e7db      	b.n	8000ff6 <__udivmoddi4+0x282>
 800103e:	4673      	mov	r3, lr
 8001040:	e77f      	b.n	8000f42 <__udivmoddi4+0x1ce>
 8001042:	4650      	mov	r0, sl
 8001044:	e766      	b.n	8000f14 <__udivmoddi4+0x1a0>
 8001046:	4608      	mov	r0, r1
 8001048:	e6fd      	b.n	8000e46 <__udivmoddi4+0xd2>
 800104a:	443b      	add	r3, r7
 800104c:	3a02      	subs	r2, #2
 800104e:	e733      	b.n	8000eb8 <__udivmoddi4+0x144>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	443b      	add	r3, r7
 8001056:	e71c      	b.n	8000e92 <__udivmoddi4+0x11e>
 8001058:	4649      	mov	r1, r9
 800105a:	e79c      	b.n	8000f96 <__udivmoddi4+0x222>
 800105c:	eba1 0109 	sub.w	r1, r1, r9
 8001060:	46c4      	mov	ip, r8
 8001062:	fbb1 f9fe 	udiv	r9, r1, lr
 8001066:	fb09 f804 	mul.w	r8, r9, r4
 800106a:	e7c4      	b.n	8000ff6 <__udivmoddi4+0x282>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <button_new>:

button_t button_new (
	uint16_t pin,
	GPIO_TypeDef *port,
	uint8_t pressedState
	) {
 8001070:	b5b0      	push	{r4, r5, r7, lr}
 8001072:	b08a      	sub	sp, #40	@ 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	461a      	mov	r2, r3
 800107c:	460b      	mov	r3, r1
 800107e:	817b      	strh	r3, [r7, #10]
 8001080:	4613      	mov	r3, r2
 8001082:	727b      	strb	r3, [r7, #9]

	button_t newButton;
	newButton.pin = pin;
 8001084:	897b      	ldrh	r3, [r7, #10]
 8001086:	82bb      	strh	r3, [r7, #20]
	newButton.port = port;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	61bb      	str	r3, [r7, #24]
	newButton.pressedState = pressedState;
 800108c:	7a7b      	ldrb	r3, [r7, #9]
 800108e:	777b      	strb	r3, [r7, #29]
	newButton.releasedState = ~pressedState;
 8001090:	7a7b      	ldrb	r3, [r7, #9]
 8001092:	43db      	mvns	r3, r3
 8001094:	b2db      	uxtb	r3, r3
 8001096:	77bb      	strb	r3, [r7, #30]

	// Get current button state
	button_read(&newButton);
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4618      	mov	r0, r3
 800109e:	f000 f80c 	bl	80010ba <button_read>

	return newButton;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	461d      	mov	r5, r3
 80010a6:	f107 0414 	add.w	r4, r7, #20
 80010aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ae:	6823      	ldr	r3, [r4, #0]
 80010b0:	602b      	str	r3, [r5, #0]

}
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	3728      	adds	r7, #40	@ 0x28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bdb0      	pop	{r4, r5, r7, pc}

080010ba <button_read>:

/*
 * Read button
 */

void button_read(button_t *button) {
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b084      	sub	sp, #16
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
	 uint32_t pinState = HAL_GPIO_ReadPin(button->port, button->pin);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	4619      	mov	r1, r3
 80010cc:	4610      	mov	r0, r2
 80010ce:	f003 fcff 	bl	8004ad0 <HAL_GPIO_ReadPin>
 80010d2:	4603      	mov	r3, r0
 80010d4:	60fb      	str	r3, [r7, #12]
	 if (((button->pressedState == 1) && (pinState == 1 )) ||
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	7a5b      	ldrb	r3, [r3, #9]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d102      	bne.n	80010e4 <button_read+0x2a>
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d006      	beq.n	80010f2 <button_read+0x38>
		 ((button->pressedState == 0) && (pinState == 0 ))) {
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	7a5b      	ldrb	r3, [r3, #9]
	 if (((button->pressedState == 1) && (pinState == 1 )) ||
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d106      	bne.n	80010fa <button_read+0x40>
		 ((button->pressedState == 0) && (pinState == 0 ))) {
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d103      	bne.n	80010fa <button_read+0x40>
		 // Button is being pressed
		 button->currentState = BUTTON_PRESSED;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2201      	movs	r2, #1
 80010f6:	721a      	strb	r2, [r3, #8]
 80010f8:	e003      	b.n	8001102 <button_read+0x48>
	 } else {
		 // Button is not being pressed
		 button->currentState = BUTTON_RELEASED;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	721a      	strb	r2, [r3, #8]
	 }
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <icm20608_new>:
icm20608_t icm20608_new (


	uint16_t interrupt_pin,
	GPIO_TypeDef *interrupt_port
) {
 800110a:	b480      	push	{r7}
 800110c:	b087      	sub	sp, #28
 800110e:	af00      	add	r7, sp, #0
 8001110:	60f8      	str	r0, [r7, #12]
 8001112:	460b      	mov	r3, r1
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	817b      	strh	r3, [r7, #10]
	icm20608_t newIcm;
	newIcm.interrupt_pin = interrupt_pin;
 8001118:	897b      	ldrh	r3, [r7, #10]
 800111a:	823b      	strh	r3, [r7, #16]
	newIcm.interrupt_port = interrupt_port;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	617b      	str	r3, [r7, #20]

	return newIcm;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	461a      	mov	r2, r3
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	e893 0003 	ldmia.w	r3, {r0, r1}
 800112c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	371c      	adds	r7, #28
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <led_new>:
#include "led.h"

led_t  led_new(
	uint16_t pin,
	GPIO_TypeDef *port,
	bool activeState) {
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b089      	sub	sp, #36	@ 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	461a      	mov	r2, r3
 8001148:	460b      	mov	r3, r1
 800114a:	817b      	strh	r3, [r7, #10]
 800114c:	4613      	mov	r3, r2
 800114e:	727b      	strb	r3, [r7, #9]
	led_t newLed;
	newLed.pin = pin;
 8001150:	897b      	ldrh	r3, [r7, #10]
 8001152:	82bb      	strh	r3, [r7, #20]
	newLed.port = port;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	61bb      	str	r3, [r7, #24]
	newLed.activeState = activeState;
 8001158:	7a7b      	ldrb	r3, [r7, #9]
 800115a:	773b      	strb	r3, [r7, #28]
	led_off(&newLed);
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4618      	mov	r0, r3
 8001162:	f000 f80c 	bl	800117e <led_off>
	return newLed;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	461c      	mov	r4, r3
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001172:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	3724      	adds	r7, #36	@ 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd90      	pop	{r4, r7, pc}

0800117e <led_off>:
}

/*
 * Turns LED off
 */
void led_off (led_t *led) {
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(led->port, led->pin, !(led->activeState));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6858      	ldr	r0, [r3, #4]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	8819      	ldrh	r1, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7a1b      	ldrb	r3, [r3, #8]
 8001192:	f083 0301 	eor.w	r3, r3, #1
 8001196:	b2db      	uxtb	r3, r3
 8001198:	461a      	mov	r2, r3
 800119a:	f003 fcb1 	bl	8004b00 <HAL_GPIO_WritePin>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <led_toggle>:

/*
 * Toggles LED
 */

void led_toggle(led_t *led) {
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(led->port, led->pin);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	4619      	mov	r1, r3
 80011b8:	4610      	mov	r0, r2
 80011ba:	f003 fcb9 	bl	8004b30 <HAL_GPIO_TogglePin>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80011ce:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d0:	f001 ffed 	bl	80031ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d4:	f000 f906 	bl	80013e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d8:	f000 fcd8 	bl	8001b8c <MX_GPIO_Init>
  MX_TIM2_Init();
 80011dc:	f000 fb20 	bl	8001820 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80011e0:	f000 fc3c 	bl	8001a5c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80011e4:	f000 fc86 	bl	8001af4 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80011e8:	f000 fa3a 	bl	8001660 <MX_SPI2_Init>
  MX_TIM1_Init();
 80011ec:	f000 fa76 	bl	80016dc <MX_TIM1_Init>
  MX_TIM8_Init();
 80011f0:	f000 fb7c 	bl	80018ec <MX_TIM8_Init>
  MX_FDCAN1_Init();
 80011f4:	f000 f9a8 	bl	8001548 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80011f8:	f000 f9ec 	bl	80015d4 <MX_FDCAN2_Init>
  MX_ADC2_Init();
 80011fc:	f000 f93e 	bl	800147c <MX_ADC2_Init>
  MX_USB_Device_Init();
 8001200:	f00b fa76 	bl	800c6f0 <MX_USB_Device_Init>


  /*
   *  Servo motors
   */
  servo_t servo1 = Servo_newMG90S(&htim1, TIM_CHANNEL_2);
 8001204:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8001208:	2204      	movs	r2, #4
 800120a:	4970      	ldr	r1, [pc, #448]	@ (80013cc <main+0x204>)
 800120c:	4618      	mov	r0, r3
 800120e:	f001 f92b 	bl	8002468 <Servo_newMG90S>
  servo_t servo2 = Servo_newMG90S(&htim1, TIM_CHANNEL_1);
 8001212:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8001216:	2200      	movs	r2, #0
 8001218:	496c      	ldr	r1, [pc, #432]	@ (80013cc <main+0x204>)
 800121a:	4618      	mov	r0, r3
 800121c:	f001 f924 	bl	8002468 <Servo_newMG90S>
  servo_t servo3 = Servo_newMG90S(&htim8, TIM_CHANNEL_4);
 8001220:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001224:	220c      	movs	r2, #12
 8001226:	496a      	ldr	r1, [pc, #424]	@ (80013d0 <main+0x208>)
 8001228:	4618      	mov	r0, r3
 800122a:	f001 f91d 	bl	8002468 <Servo_newMG90S>
  servo_t servo4 = Servo_newMG90S(&htim8, TIM_CHANNEL_3);
 800122e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001232:	2208      	movs	r2, #8
 8001234:	4966      	ldr	r1, [pc, #408]	@ (80013d0 <main+0x208>)
 8001236:	4618      	mov	r0, r3
 8001238:	f001 f916 	bl	8002468 <Servo_newMG90S>
  servo_t servo5 = Servo_newMG90S(&htim8, TIM_CHANNEL_2);
 800123c:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8001240:	2204      	movs	r2, #4
 8001242:	4963      	ldr	r1, [pc, #396]	@ (80013d0 <main+0x208>)
 8001244:	4618      	mov	r0, r3
 8001246:	f001 f90f 	bl	8002468 <Servo_newMG90S>
  servo_t servo6 = Servo_newMG90S(&htim8, TIM_CHANNEL_1);
 800124a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800124e:	2200      	movs	r2, #0
 8001250:	495f      	ldr	r1, [pc, #380]	@ (80013d0 <main+0x208>)
 8001252:	4618      	mov	r0, r3
 8001254:	f001 f908 	bl	8002468 <Servo_newMG90S>

  /*
   * Status LEDs
   */
  led_t topStatusLed = led_new(
 8001258:	f507 70d2 	add.w	r0, r7, #420	@ 0x1a4
 800125c:	2301      	movs	r3, #1
 800125e:	4a5d      	ldr	r2, [pc, #372]	@ (80013d4 <main+0x20c>)
 8001260:	2104      	movs	r1, #4
 8001262:	f7ff ff6b 	bl	800113c <led_new>
	STATUS_LED1_Pin,
	STATUS_LED1_GPIO_Port,
	1);
  led_t botStatusLed = led_new(
 8001266:	f507 70cc 	add.w	r0, r7, #408	@ 0x198
 800126a:	2301      	movs	r3, #1
 800126c:	4a59      	ldr	r2, [pc, #356]	@ (80013d4 <main+0x20c>)
 800126e:	2108      	movs	r1, #8
 8001270:	f7ff ff64 	bl	800113c <led_new>
	1);

  /**
   *  RGB LEDs
   */
  rgb_t rgb1 = rgb_new(
 8001274:	f507 70be 	add.w	r0, r7, #380	@ 0x17c
 8001278:	2301      	movs	r3, #1
 800127a:	9304      	str	r3, [sp, #16]
 800127c:	2300      	movs	r3, #0
 800127e:	9303      	str	r3, [sp, #12]
 8001280:	4b54      	ldr	r3, [pc, #336]	@ (80013d4 <main+0x20c>)
 8001282:	9302      	str	r3, [sp, #8]
 8001284:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	4b52      	ldr	r3, [pc, #328]	@ (80013d4 <main+0x20c>)
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001292:	4a50      	ldr	r2, [pc, #320]	@ (80013d4 <main+0x20c>)
 8001294:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001298:	f000 fee0 	bl	800205c <rgb_new>
	LED1_G_GPIO_Port,
	LED1_B_Pin,
	LED1_B_GPIO_Port,
	RGB_OFF,
	1);
  rgb_t rgb2 = rgb_new(
 800129c:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80012a0:	f5a3 7088 	sub.w	r0, r3, #272	@ 0x110
 80012a4:	2301      	movs	r3, #1
 80012a6:	9304      	str	r3, [sp, #16]
 80012a8:	2300      	movs	r3, #0
 80012aa:	9303      	str	r3, [sp, #12]
 80012ac:	4b49      	ldr	r3, [pc, #292]	@ (80013d4 <main+0x20c>)
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	4b47      	ldr	r3, [pc, #284]	@ (80013d4 <main+0x20c>)
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80012be:	4a45      	ldr	r2, [pc, #276]	@ (80013d4 <main+0x20c>)
 80012c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012c4:	f000 feca 	bl	800205c <rgb_new>
	1);

  /**
   *  Buttons
   */
  button_t topPB = button_new(
 80012c8:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80012cc:	f5a3 7092 	sub.w	r0, r3, #292	@ 0x124
 80012d0:	2300      	movs	r3, #0
 80012d2:	4a41      	ldr	r2, [pc, #260]	@ (80013d8 <main+0x210>)
 80012d4:	2102      	movs	r1, #2
 80012d6:	f7ff fecb 	bl	8001070 <button_new>
	TOP_PB_Pin,
	TOP_PB_GPIO_Port,
	0);
  button_t midPB = button_new(
 80012da:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80012de:	f5a3 709c 	sub.w	r0, r3, #312	@ 0x138
 80012e2:	2300      	movs	r3, #0
 80012e4:	4a3c      	ldr	r2, [pc, #240]	@ (80013d8 <main+0x210>)
 80012e6:	2104      	movs	r1, #4
 80012e8:	f7ff fec2 	bl	8001070 <button_new>
	MID_PB_Pin,
	MID_PB_GPIO_Port,
	0);
  button_t botPB = button_new(
 80012ec:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80012f0:	f5a3 70a6 	sub.w	r0, r3, #332	@ 0x14c
 80012f4:	2300      	movs	r3, #0
 80012f6:	4a38      	ldr	r2, [pc, #224]	@ (80013d8 <main+0x210>)
 80012f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012fc:	f7ff feb8 	bl	8001070 <button_new>
    0);

  /**
   * Stepper motor drivers
   */
  icm20608_t icm = icm20608_new(
 8001300:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001304:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001308:	4a33      	ldr	r2, [pc, #204]	@ (80013d8 <main+0x210>)
 800130a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fefb 	bl	800110a <icm20608_new>
    IMU_INTERRUPT_GPIO_Port);

  /**
   * Stepper motor drivers
   */
  tmc2209_t rightMotor = tmc2209_new(
 8001314:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001318:	f5a3 70f0 	sub.w	r0, r3, #480	@ 0x1e0
 800131c:	2301      	movs	r3, #1
 800131e:	9304      	str	r3, [sp, #16]
 8001320:	4b2e      	ldr	r3, [pc, #184]	@ (80013dc <main+0x214>)
 8001322:	9303      	str	r3, [sp, #12]
 8001324:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001328:	9302      	str	r3, [sp, #8]
 800132a:	2301      	movs	r3, #1
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	2304      	movs	r3, #4
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	4b2b      	ldr	r3, [pc, #172]	@ (80013e0 <main+0x218>)
 8001334:	2200      	movs	r2, #0
 8001336:	2101      	movs	r1, #1
 8001338:	f001 fcf4 	bl	8002d24 <tmc2209_new>
	RIGHT_DIR_Pin,
	RIGHT_DIR_GPIO_Port,
	&huart1,
	TMC2209_ADDR_1);

  tmc2209_t leftMotor = tmc2209_new(
 800133c:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001340:	f5a3 701b 	sub.w	r0, r3, #620	@ 0x26c
 8001344:	2302      	movs	r3, #2
 8001346:	9304      	str	r3, [sp, #16]
 8001348:	4b24      	ldr	r3, [pc, #144]	@ (80013dc <main+0x214>)
 800134a:	9303      	str	r3, [sp, #12]
 800134c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001350:	9302      	str	r3, [sp, #8]
 8001352:	2340      	movs	r3, #64	@ 0x40
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	2300      	movs	r3, #0
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	4b21      	ldr	r3, [pc, #132]	@ (80013e0 <main+0x218>)
 800135c:	2201      	movs	r2, #1
 800135e:	2101      	movs	r1, #1
 8001360:	f001 fce0 	bl	8002d24 <tmc2209_new>
   * Start of infinite loop!
   */


  // Intro tasks
  rgb_intro_task(&rgb1, &rgb2, 50, 40);
 8001364:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8001368:	f507 70be 	add.w	r0, r7, #380	@ 0x17c
 800136c:	2328      	movs	r3, #40	@ 0x28
 800136e:	2232      	movs	r2, #50	@ 0x32
 8001370:	f000 fcbc 	bl	8001cec <rgb_intro_task>
  HAL_Delay(500);
 8001374:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001378:	f001 ff8a 	bl	8003290 <HAL_Delay>
//  rgb_green_blink(&rgb1, &rgb2, 100, 5);
  rgb_white_blink(&rgb1, &rgb2, 100, 5);
 800137c:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8001380:	f507 70be 	add.w	r0, r7, #380	@ 0x17c
 8001384:	2305      	movs	r3, #5
 8001386:	2264      	movs	r2, #100	@ 0x64
 8001388:	f000 fcd9 	bl	8001d3e <rgb_white_blink>

  while (1)
  {

	  // Button tasks
	  tmc2209_3_button_task(
 800138c:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 8001390:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8001394:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	9303      	str	r3, [sp, #12]
 800139c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80013a6:	9301      	str	r3, [sp, #4]
 80013a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	4603      	mov	r3, r0
 80013b0:	2064      	movs	r0, #100	@ 0x64
 80013b2:	f000 fcf7 	bl	8001da4 <tmc2209_3_button_task>
//			  &topPB, &midPB, &botPB,
//			  &icm,
//			  &rightMotor, &leftMotor);

	   // Heartbeat(s)
	  heartbeat_task(
 80013b6:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 80013ba:	f507 70d2 	add.w	r0, r7, #420	@ 0x1a4
 80013be:	23fa      	movs	r3, #250	@ 0xfa
 80013c0:	210a      	movs	r1, #10
 80013c2:	f000 fe0f 	bl	8001fe4 <heartbeat_task>
	  tmc2209_3_button_task(
 80013c6:	bf00      	nop
 80013c8:	e7e0      	b.n	800138c <main+0x1c4>
 80013ca:	bf00      	nop
 80013cc:	20000500 	.word	0x20000500
 80013d0:	20000598 	.word	0x20000598
 80013d4:	48000800 	.word	0x48000800
 80013d8:	48000400 	.word	0x48000400
 80013dc:	200005e4 	.word	0x200005e4
 80013e0:	2000054c 	.word	0x2000054c

080013e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b094      	sub	sp, #80	@ 0x50
 80013e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ea:	f107 0318 	add.w	r3, r7, #24
 80013ee:	2238      	movs	r2, #56	@ 0x38
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f00c fe11 	bl	800e01a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001406:	2000      	movs	r0, #0
 8001408:	f005 f8ae 	bl	8006568 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800140c:	2321      	movs	r3, #33	@ 0x21
 800140e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001410:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001414:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001416:	2301      	movs	r3, #1
 8001418:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800141a:	2302      	movs	r3, #2
 800141c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800141e:	2303      	movs	r3, #3
 8001420:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV12;
 8001422:	230c      	movs	r3, #12
 8001424:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001426:	2355      	movs	r3, #85	@ 0x55
 8001428:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800142a:	2302      	movs	r3, #2
 800142c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800142e:	2302      	movs	r3, #2
 8001430:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001432:	2302      	movs	r3, #2
 8001434:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001436:	f107 0318 	add.w	r3, r7, #24
 800143a:	4618      	mov	r0, r3
 800143c:	f005 f938 	bl	80066b0 <HAL_RCC_OscConfig>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001446:	f000 fe03 	bl	8002050 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800144a:	230f      	movs	r3, #15
 800144c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800144e:	2303      	movs	r3, #3
 8001450:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	2104      	movs	r1, #4
 8001462:	4618      	mov	r0, r3
 8001464:	f005 fc36 	bl	8006cd4 <HAL_RCC_ClockConfig>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800146e:	f000 fdef 	bl	8002050 <Error_Handler>
  }
}
 8001472:	bf00      	nop
 8001474:	3750      	adds	r7, #80	@ 0x50
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001482:	463b      	mov	r3, r7
 8001484:	2220      	movs	r2, #32
 8001486:	2100      	movs	r1, #0
 8001488:	4618      	mov	r0, r3
 800148a:	f00c fdc6 	bl	800e01a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800148e:	4b2b      	ldr	r3, [pc, #172]	@ (800153c <MX_ADC2_Init+0xc0>)
 8001490:	4a2b      	ldr	r2, [pc, #172]	@ (8001540 <MX_ADC2_Init+0xc4>)
 8001492:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001494:	4b29      	ldr	r3, [pc, #164]	@ (800153c <MX_ADC2_Init+0xc0>)
 8001496:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800149a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800149c:	4b27      	ldr	r3, [pc, #156]	@ (800153c <MX_ADC2_Init+0xc0>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014a2:	4b26      	ldr	r3, [pc, #152]	@ (800153c <MX_ADC2_Init+0xc0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80014a8:	4b24      	ldr	r3, [pc, #144]	@ (800153c <MX_ADC2_Init+0xc0>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014ae:	4b23      	ldr	r3, [pc, #140]	@ (800153c <MX_ADC2_Init+0xc0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014b4:	4b21      	ldr	r3, [pc, #132]	@ (800153c <MX_ADC2_Init+0xc0>)
 80014b6:	2204      	movs	r2, #4
 80014b8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80014ba:	4b20      	ldr	r3, [pc, #128]	@ (800153c <MX_ADC2_Init+0xc0>)
 80014bc:	2200      	movs	r2, #0
 80014be:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80014c0:	4b1e      	ldr	r3, [pc, #120]	@ (800153c <MX_ADC2_Init+0xc0>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80014c6:	4b1d      	ldr	r3, [pc, #116]	@ (800153c <MX_ADC2_Init+0xc0>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80014cc:	4b1b      	ldr	r3, [pc, #108]	@ (800153c <MX_ADC2_Init+0xc0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014d4:	4b19      	ldr	r3, [pc, #100]	@ (800153c <MX_ADC2_Init+0xc0>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014da:	4b18      	ldr	r3, [pc, #96]	@ (800153c <MX_ADC2_Init+0xc0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80014e0:	4b16      	ldr	r3, [pc, #88]	@ (800153c <MX_ADC2_Init+0xc0>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014e8:	4b14      	ldr	r3, [pc, #80]	@ (800153c <MX_ADC2_Init+0xc0>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80014ee:	4b13      	ldr	r3, [pc, #76]	@ (800153c <MX_ADC2_Init+0xc0>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014f6:	4811      	ldr	r0, [pc, #68]	@ (800153c <MX_ADC2_Init+0xc0>)
 80014f8:	f002 f8c2 	bl	8003680 <HAL_ADC_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001502:	f000 fda5 	bl	8002050 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001506:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <MX_ADC2_Init+0xc8>)
 8001508:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800150a:	2306      	movs	r3, #6
 800150c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001512:	237f      	movs	r3, #127	@ 0x7f
 8001514:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001516:	2304      	movs	r3, #4
 8001518:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800151e:	463b      	mov	r3, r7
 8001520:	4619      	mov	r1, r3
 8001522:	4806      	ldr	r0, [pc, #24]	@ (800153c <MX_ADC2_Init+0xc0>)
 8001524:	f002 fa5a 	bl	80039dc <HAL_ADC_ConfigChannel>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800152e:	f000 fd8f 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001532:	bf00      	nop
 8001534:	3720      	adds	r7, #32
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000368 	.word	0x20000368
 8001540:	50000100 	.word	0x50000100
 8001544:	10c00010 	.word	0x10c00010

08001548 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800154c:	4b1f      	ldr	r3, [pc, #124]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 800154e:	4a20      	ldr	r2, [pc, #128]	@ (80015d0 <MX_FDCAN1_Init+0x88>)
 8001550:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001552:	4b1e      	ldr	r3, [pc, #120]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 8001554:	2200      	movs	r2, #0
 8001556:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001558:	4b1c      	ldr	r3, [pc, #112]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800155e:	4b1b      	ldr	r3, [pc, #108]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 8001560:	2200      	movs	r2, #0
 8001562:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001564:	4b19      	ldr	r3, [pc, #100]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 8001566:	2200      	movs	r2, #0
 8001568:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800156a:	4b18      	ldr	r3, [pc, #96]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 800156c:	2200      	movs	r2, #0
 800156e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001570:	4b16      	ldr	r3, [pc, #88]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 8001572:	2200      	movs	r2, #0
 8001574:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001576:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 8001578:	2210      	movs	r2, #16
 800157a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800157c:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 800157e:	2201      	movs	r2, #1
 8001580:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 8001582:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 8001584:	2201      	movs	r2, #1
 8001586:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8001588:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 800158a:	2201      	movs	r2, #1
 800158c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800158e:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 8001590:	2201      	movs	r2, #1
 8001592:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001594:	4b0d      	ldr	r3, [pc, #52]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 8001596:	2201      	movs	r2, #1
 8001598:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800159a:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 800159c:	2201      	movs	r2, #1
 800159e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80015a0:	4b0a      	ldr	r3, [pc, #40]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80015a6:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80015ac:	4b07      	ldr	r3, [pc, #28]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80015b2:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80015b8:	4804      	ldr	r0, [pc, #16]	@ (80015cc <MX_FDCAN1_Init+0x84>)
 80015ba:	f002 ff4b 	bl	8004454 <HAL_FDCAN_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80015c4:	f000 fd44 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	200003d4 	.word	0x200003d4
 80015d0:	40006400 	.word	0x40006400

080015d4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80015d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001658 <MX_FDCAN2_Init+0x84>)
 80015da:	4a20      	ldr	r2, [pc, #128]	@ (800165c <MX_FDCAN2_Init+0x88>)
 80015dc:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80015de:	4b1e      	ldr	r3, [pc, #120]	@ (8001658 <MX_FDCAN2_Init+0x84>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80015e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001658 <MX_FDCAN2_Init+0x84>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80015ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001658 <MX_FDCAN2_Init+0x84>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80015f0:	4b19      	ldr	r3, [pc, #100]	@ (8001658 <MX_FDCAN2_Init+0x84>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80015f6:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <MX_FDCAN2_Init+0x84>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80015fc:	4b16      	ldr	r3, [pc, #88]	@ (8001658 <MX_FDCAN2_Init+0x84>)
 80015fe:	2200      	movs	r2, #0
 8001600:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8001602:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <MX_FDCAN2_Init+0x84>)
 8001604:	2210      	movs	r2, #16
 8001606:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001608:	4b13      	ldr	r3, [pc, #76]	@ (8001658 <MX_FDCAN2_Init+0x84>)
 800160a:	2201      	movs	r2, #1
 800160c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 1;
 800160e:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <MX_FDCAN2_Init+0x84>)
 8001610:	2201      	movs	r2, #1
 8001612:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 8001614:	4b10      	ldr	r3, [pc, #64]	@ (8001658 <MX_FDCAN2_Init+0x84>)
 8001616:	2201      	movs	r2, #1
 8001618:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800161a:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <MX_FDCAN2_Init+0x84>)
 800161c:	2201      	movs	r2, #1
 800161e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001620:	4b0d      	ldr	r3, [pc, #52]	@ (8001658 <MX_FDCAN2_Init+0x84>)
 8001622:	2201      	movs	r2, #1
 8001624:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001626:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <MX_FDCAN2_Init+0x84>)
 8001628:	2201      	movs	r2, #1
 800162a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800162c:	4b0a      	ldr	r3, [pc, #40]	@ (8001658 <MX_FDCAN2_Init+0x84>)
 800162e:	2201      	movs	r2, #1
 8001630:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8001632:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <MX_FDCAN2_Init+0x84>)
 8001634:	2200      	movs	r2, #0
 8001636:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001638:	4b07      	ldr	r3, [pc, #28]	@ (8001658 <MX_FDCAN2_Init+0x84>)
 800163a:	2200      	movs	r2, #0
 800163c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800163e:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <MX_FDCAN2_Init+0x84>)
 8001640:	2200      	movs	r2, #0
 8001642:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001644:	4804      	ldr	r0, [pc, #16]	@ (8001658 <MX_FDCAN2_Init+0x84>)
 8001646:	f002 ff05 	bl	8004454 <HAL_FDCAN_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8001650:	f000 fcfe 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000438 	.word	0x20000438
 800165c:	40006800 	.word	0x40006800

08001660 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001664:	4b1b      	ldr	r3, [pc, #108]	@ (80016d4 <MX_SPI2_Init+0x74>)
 8001666:	4a1c      	ldr	r2, [pc, #112]	@ (80016d8 <MX_SPI2_Init+0x78>)
 8001668:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800166a:	4b1a      	ldr	r3, [pc, #104]	@ (80016d4 <MX_SPI2_Init+0x74>)
 800166c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001670:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001672:	4b18      	ldr	r3, [pc, #96]	@ (80016d4 <MX_SPI2_Init+0x74>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001678:	4b16      	ldr	r3, [pc, #88]	@ (80016d4 <MX_SPI2_Init+0x74>)
 800167a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800167e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001680:	4b14      	ldr	r3, [pc, #80]	@ (80016d4 <MX_SPI2_Init+0x74>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001686:	4b13      	ldr	r3, [pc, #76]	@ (80016d4 <MX_SPI2_Init+0x74>)
 8001688:	2200      	movs	r2, #0
 800168a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800168c:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <MX_SPI2_Init+0x74>)
 800168e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001692:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001694:	4b0f      	ldr	r3, [pc, #60]	@ (80016d4 <MX_SPI2_Init+0x74>)
 8001696:	2208      	movs	r2, #8
 8001698:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800169a:	4b0e      	ldr	r3, [pc, #56]	@ (80016d4 <MX_SPI2_Init+0x74>)
 800169c:	2200      	movs	r2, #0
 800169e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016a0:	4b0c      	ldr	r3, [pc, #48]	@ (80016d4 <MX_SPI2_Init+0x74>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a6:	4b0b      	ldr	r3, [pc, #44]	@ (80016d4 <MX_SPI2_Init+0x74>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80016ac:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <MX_SPI2_Init+0x74>)
 80016ae:	2207      	movs	r2, #7
 80016b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016b2:	4b08      	ldr	r3, [pc, #32]	@ (80016d4 <MX_SPI2_Init+0x74>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016b8:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <MX_SPI2_Init+0x74>)
 80016ba:	2208      	movs	r2, #8
 80016bc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016be:	4805      	ldr	r0, [pc, #20]	@ (80016d4 <MX_SPI2_Init+0x74>)
 80016c0:	f005 ff60 	bl	8007584 <HAL_SPI_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80016ca:	f000 fcc1 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	2000049c 	.word	0x2000049c
 80016d8:	40003800 	.word	0x40003800

080016dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b098      	sub	sp, #96	@ 0x60
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
 80016fc:	611a      	str	r2, [r3, #16]
 80016fe:	615a      	str	r2, [r3, #20]
 8001700:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	2234      	movs	r2, #52	@ 0x34
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f00c fc86 	bl	800e01a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800170e:	4b42      	ldr	r3, [pc, #264]	@ (8001818 <MX_TIM1_Init+0x13c>)
 8001710:	4a42      	ldr	r2, [pc, #264]	@ (800181c <MX_TIM1_Init+0x140>)
 8001712:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8001714:	4b40      	ldr	r3, [pc, #256]	@ (8001818 <MX_TIM1_Init+0x13c>)
 8001716:	2254      	movs	r2, #84	@ 0x54
 8001718:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171a:	4b3f      	ldr	r3, [pc, #252]	@ (8001818 <MX_TIM1_Init+0x13c>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39999;
 8001720:	4b3d      	ldr	r3, [pc, #244]	@ (8001818 <MX_TIM1_Init+0x13c>)
 8001722:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8001726:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001728:	4b3b      	ldr	r3, [pc, #236]	@ (8001818 <MX_TIM1_Init+0x13c>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800172e:	4b3a      	ldr	r3, [pc, #232]	@ (8001818 <MX_TIM1_Init+0x13c>)
 8001730:	2200      	movs	r2, #0
 8001732:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001734:	4b38      	ldr	r3, [pc, #224]	@ (8001818 <MX_TIM1_Init+0x13c>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800173a:	4837      	ldr	r0, [pc, #220]	@ (8001818 <MX_TIM1_Init+0x13c>)
 800173c:	f005 ffcd 	bl	80076da <HAL_TIM_PWM_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001746:	f000 fc83 	bl	8002050 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800174a:	2300      	movs	r3, #0
 800174c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800174e:	2300      	movs	r3, #0
 8001750:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001756:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800175a:	4619      	mov	r1, r3
 800175c:	482e      	ldr	r0, [pc, #184]	@ (8001818 <MX_TIM1_Init+0x13c>)
 800175e:	f006 fcfb 	bl	8008158 <HAL_TIMEx_MasterConfigSynchronization>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001768:	f000 fc72 	bl	8002050 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800176c:	2360      	movs	r3, #96	@ 0x60
 800176e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 200;
 8001770:	23c8      	movs	r3, #200	@ 0xc8
 8001772:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001774:	2300      	movs	r3, #0
 8001776:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001778:	2300      	movs	r3, #0
 800177a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001780:	2300      	movs	r3, #0
 8001782:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001784:	2300      	movs	r3, #0
 8001786:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001788:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800178c:	2200      	movs	r2, #0
 800178e:	4619      	mov	r1, r3
 8001790:	4821      	ldr	r0, [pc, #132]	@ (8001818 <MX_TIM1_Init+0x13c>)
 8001792:	f005 fff9 	bl	8007788 <HAL_TIM_PWM_ConfigChannel>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800179c:	f000 fc58 	bl	8002050 <Error_Handler>
  }
  sConfigOC.Pulse = 150;
 80017a0:	2396      	movs	r3, #150	@ 0x96
 80017a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80017a8:	2204      	movs	r2, #4
 80017aa:	4619      	mov	r1, r3
 80017ac:	481a      	ldr	r0, [pc, #104]	@ (8001818 <MX_TIM1_Init+0x13c>)
 80017ae:	f005 ffeb 	bl	8007788 <HAL_TIM_PWM_ConfigChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 80017b8:	f000 fc4a 	bl	8002050 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017de:	2300      	movs	r3, #0
 80017e0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80017ec:	2300      	movs	r3, #0
 80017ee:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	4619      	mov	r1, r3
 80017f8:	4807      	ldr	r0, [pc, #28]	@ (8001818 <MX_TIM1_Init+0x13c>)
 80017fa:	f006 fd3b 	bl	8008274 <HAL_TIMEx_ConfigBreakDeadTime>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001804:	f000 fc24 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001808:	4803      	ldr	r0, [pc, #12]	@ (8001818 <MX_TIM1_Init+0x13c>)
 800180a:	f001 f85f 	bl	80028cc <HAL_TIM_MspPostInit>

}
 800180e:	bf00      	nop
 8001810:	3760      	adds	r7, #96	@ 0x60
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000500 	.word	0x20000500
 800181c:	40012c00 	.word	0x40012c00

08001820 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	@ 0x28
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001826:	f107 031c 	add.w	r3, r7, #28
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001832:	463b      	mov	r3, r7
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
 8001840:	615a      	str	r2, [r3, #20]
 8001842:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001844:	4b28      	ldr	r3, [pc, #160]	@ (80018e8 <MX_TIM2_Init+0xc8>)
 8001846:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800184a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 339;
 800184c:	4b26      	ldr	r3, [pc, #152]	@ (80018e8 <MX_TIM2_Init+0xc8>)
 800184e:	f240 1253 	movw	r2, #339	@ 0x153
 8001852:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001854:	4b24      	ldr	r3, [pc, #144]	@ (80018e8 <MX_TIM2_Init+0xc8>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800185a:	4b23      	ldr	r3, [pc, #140]	@ (80018e8 <MX_TIM2_Init+0xc8>)
 800185c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001860:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001862:	4b21      	ldr	r3, [pc, #132]	@ (80018e8 <MX_TIM2_Init+0xc8>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001868:	4b1f      	ldr	r3, [pc, #124]	@ (80018e8 <MX_TIM2_Init+0xc8>)
 800186a:	2200      	movs	r2, #0
 800186c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800186e:	481e      	ldr	r0, [pc, #120]	@ (80018e8 <MX_TIM2_Init+0xc8>)
 8001870:	f005 ff33 	bl	80076da <HAL_TIM_PWM_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 800187a:	f000 fbe9 	bl	8002050 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001886:	f107 031c 	add.w	r3, r7, #28
 800188a:	4619      	mov	r1, r3
 800188c:	4816      	ldr	r0, [pc, #88]	@ (80018e8 <MX_TIM2_Init+0xc8>)
 800188e:	f006 fc63 	bl	8008158 <HAL_TIMEx_MasterConfigSynchronization>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001898:	f000 fbda 	bl	8002050 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800189c:	2360      	movs	r3, #96	@ 0x60
 800189e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 4999;
 80018a0:	f241 3387 	movw	r3, #4999	@ 0x1387
 80018a4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ae:	463b      	mov	r3, r7
 80018b0:	2200      	movs	r2, #0
 80018b2:	4619      	mov	r1, r3
 80018b4:	480c      	ldr	r0, [pc, #48]	@ (80018e8 <MX_TIM2_Init+0xc8>)
 80018b6:	f005 ff67 	bl	8007788 <HAL_TIM_PWM_ConfigChannel>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80018c0:	f000 fbc6 	bl	8002050 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018c4:	463b      	mov	r3, r7
 80018c6:	2204      	movs	r2, #4
 80018c8:	4619      	mov	r1, r3
 80018ca:	4807      	ldr	r0, [pc, #28]	@ (80018e8 <MX_TIM2_Init+0xc8>)
 80018cc:	f005 ff5c 	bl	8007788 <HAL_TIM_PWM_ConfigChannel>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80018d6:	f000 fbbb 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018da:	4803      	ldr	r0, [pc, #12]	@ (80018e8 <MX_TIM2_Init+0xc8>)
 80018dc:	f000 fff6 	bl	80028cc <HAL_TIM_MspPostInit>

}
 80018e0:	bf00      	nop
 80018e2:	3728      	adds	r7, #40	@ 0x28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	2000054c 	.word	0x2000054c

080018ec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b098      	sub	sp, #96	@ 0x60
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018fe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	611a      	str	r2, [r3, #16]
 800190e:	615a      	str	r2, [r3, #20]
 8001910:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	2234      	movs	r2, #52	@ 0x34
 8001916:	2100      	movs	r1, #0
 8001918:	4618      	mov	r0, r3
 800191a:	f00c fb7e 	bl	800e01a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800191e:	4b4d      	ldr	r3, [pc, #308]	@ (8001a54 <MX_TIM8_Init+0x168>)
 8001920:	4a4d      	ldr	r2, [pc, #308]	@ (8001a58 <MX_TIM8_Init+0x16c>)
 8001922:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 84;
 8001924:	4b4b      	ldr	r3, [pc, #300]	@ (8001a54 <MX_TIM8_Init+0x168>)
 8001926:	2254      	movs	r2, #84	@ 0x54
 8001928:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a54 <MX_TIM8_Init+0x168>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 39999;
 8001930:	4b48      	ldr	r3, [pc, #288]	@ (8001a54 <MX_TIM8_Init+0x168>)
 8001932:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8001936:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001938:	4b46      	ldr	r3, [pc, #280]	@ (8001a54 <MX_TIM8_Init+0x168>)
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800193e:	4b45      	ldr	r3, [pc, #276]	@ (8001a54 <MX_TIM8_Init+0x168>)
 8001940:	2200      	movs	r2, #0
 8001942:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001944:	4b43      	ldr	r3, [pc, #268]	@ (8001a54 <MX_TIM8_Init+0x168>)
 8001946:	2200      	movs	r2, #0
 8001948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800194a:	4842      	ldr	r0, [pc, #264]	@ (8001a54 <MX_TIM8_Init+0x168>)
 800194c:	f005 fec5 	bl	80076da <HAL_TIM_PWM_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001956:	f000 fb7b 	bl	8002050 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195a:	2300      	movs	r3, #0
 800195c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001966:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800196a:	4619      	mov	r1, r3
 800196c:	4839      	ldr	r0, [pc, #228]	@ (8001a54 <MX_TIM8_Init+0x168>)
 800196e:	f006 fbf3 	bl	8008158 <HAL_TIMEx_MasterConfigSynchronization>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001978:	f000 fb6a 	bl	8002050 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800197c:	2360      	movs	r3, #96	@ 0x60
 800197e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 150;
 8001980:	2396      	movs	r3, #150	@ 0x96
 8001982:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001984:	2300      	movs	r3, #0
 8001986:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001988:	2300      	movs	r3, #0
 800198a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001990:	2300      	movs	r3, #0
 8001992:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001994:	2300      	movs	r3, #0
 8001996:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001998:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800199c:	2200      	movs	r2, #0
 800199e:	4619      	mov	r1, r3
 80019a0:	482c      	ldr	r0, [pc, #176]	@ (8001a54 <MX_TIM8_Init+0x168>)
 80019a2:	f005 fef1 	bl	8007788 <HAL_TIM_PWM_ConfigChannel>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80019ac:	f000 fb50 	bl	8002050 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019b4:	2204      	movs	r2, #4
 80019b6:	4619      	mov	r1, r3
 80019b8:	4826      	ldr	r0, [pc, #152]	@ (8001a54 <MX_TIM8_Init+0x168>)
 80019ba:	f005 fee5 	bl	8007788 <HAL_TIM_PWM_ConfigChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 80019c4:	f000 fb44 	bl	8002050 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019c8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019cc:	2208      	movs	r2, #8
 80019ce:	4619      	mov	r1, r3
 80019d0:	4820      	ldr	r0, [pc, #128]	@ (8001a54 <MX_TIM8_Init+0x168>)
 80019d2:	f005 fed9 	bl	8007788 <HAL_TIM_PWM_ConfigChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 80019dc:	f000 fb38 	bl	8002050 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019e4:	220c      	movs	r2, #12
 80019e6:	4619      	mov	r1, r3
 80019e8:	481a      	ldr	r0, [pc, #104]	@ (8001a54 <MX_TIM8_Init+0x168>)
 80019ea:	f005 fecd 	bl	8007788 <HAL_TIM_PWM_ConfigChannel>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 80019f4:	f000 fb2c 	bl	8002050 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a10:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a16:	2300      	movs	r3, #0
 8001a18:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	4619      	mov	r1, r3
 8001a34:	4807      	ldr	r0, [pc, #28]	@ (8001a54 <MX_TIM8_Init+0x168>)
 8001a36:	f006 fc1d 	bl	8008274 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM8_Init+0x158>
  {
    Error_Handler();
 8001a40:	f000 fb06 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001a44:	4803      	ldr	r0, [pc, #12]	@ (8001a54 <MX_TIM8_Init+0x168>)
 8001a46:	f000 ff41 	bl	80028cc <HAL_TIM_MspPostInit>

}
 8001a4a:	bf00      	nop
 8001a4c:	3760      	adds	r7, #96	@ 0x60
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000598 	.word	0x20000598
 8001a58:	40013400 	.word	0x40013400

08001a5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a60:	4b22      	ldr	r3, [pc, #136]	@ (8001aec <MX_USART1_UART_Init+0x90>)
 8001a62:	4a23      	ldr	r2, [pc, #140]	@ (8001af0 <MX_USART1_UART_Init+0x94>)
 8001a64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a66:	4b21      	ldr	r3, [pc, #132]	@ (8001aec <MX_USART1_UART_Init+0x90>)
 8001a68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001aec <MX_USART1_UART_Init+0x90>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a74:	4b1d      	ldr	r3, [pc, #116]	@ (8001aec <MX_USART1_UART_Init+0x90>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001aec <MX_USART1_UART_Init+0x90>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a80:	4b1a      	ldr	r3, [pc, #104]	@ (8001aec <MX_USART1_UART_Init+0x90>)
 8001a82:	220c      	movs	r2, #12
 8001a84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a86:	4b19      	ldr	r3, [pc, #100]	@ (8001aec <MX_USART1_UART_Init+0x90>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a8c:	4b17      	ldr	r3, [pc, #92]	@ (8001aec <MX_USART1_UART_Init+0x90>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a92:	4b16      	ldr	r3, [pc, #88]	@ (8001aec <MX_USART1_UART_Init+0x90>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a98:	4b14      	ldr	r3, [pc, #80]	@ (8001aec <MX_USART1_UART_Init+0x90>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a9e:	4b13      	ldr	r3, [pc, #76]	@ (8001aec <MX_USART1_UART_Init+0x90>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aa4:	4811      	ldr	r0, [pc, #68]	@ (8001aec <MX_USART1_UART_Init+0x90>)
 8001aa6:	f006 fc79 	bl	800839c <HAL_UART_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ab0:	f000 face 	bl	8002050 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	480d      	ldr	r0, [pc, #52]	@ (8001aec <MX_USART1_UART_Init+0x90>)
 8001ab8:	f007 faa2 	bl	8009000 <HAL_UARTEx_SetTxFifoThreshold>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001ac2:	f000 fac5 	bl	8002050 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4808      	ldr	r0, [pc, #32]	@ (8001aec <MX_USART1_UART_Init+0x90>)
 8001aca:	f007 fad7 	bl	800907c <HAL_UARTEx_SetRxFifoThreshold>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001ad4:	f000 fabc 	bl	8002050 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ad8:	4804      	ldr	r0, [pc, #16]	@ (8001aec <MX_USART1_UART_Init+0x90>)
 8001ada:	f007 fa58 	bl	8008f8e <HAL_UARTEx_DisableFifoMode>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ae4:	f000 fab4 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	200005e4 	.word	0x200005e4
 8001af0:	40013800 	.word	0x40013800

08001af4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001af8:	4b22      	ldr	r3, [pc, #136]	@ (8001b84 <MX_USART2_UART_Init+0x90>)
 8001afa:	4a23      	ldr	r2, [pc, #140]	@ (8001b88 <MX_USART2_UART_Init+0x94>)
 8001afc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001afe:	4b21      	ldr	r3, [pc, #132]	@ (8001b84 <MX_USART2_UART_Init+0x90>)
 8001b00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b06:	4b1f      	ldr	r3, [pc, #124]	@ (8001b84 <MX_USART2_UART_Init+0x90>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b84 <MX_USART2_UART_Init+0x90>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b12:	4b1c      	ldr	r3, [pc, #112]	@ (8001b84 <MX_USART2_UART_Init+0x90>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b18:	4b1a      	ldr	r3, [pc, #104]	@ (8001b84 <MX_USART2_UART_Init+0x90>)
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1e:	4b19      	ldr	r3, [pc, #100]	@ (8001b84 <MX_USART2_UART_Init+0x90>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b24:	4b17      	ldr	r3, [pc, #92]	@ (8001b84 <MX_USART2_UART_Init+0x90>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b2a:	4b16      	ldr	r3, [pc, #88]	@ (8001b84 <MX_USART2_UART_Init+0x90>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b30:	4b14      	ldr	r3, [pc, #80]	@ (8001b84 <MX_USART2_UART_Init+0x90>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b36:	4b13      	ldr	r3, [pc, #76]	@ (8001b84 <MX_USART2_UART_Init+0x90>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b3c:	4811      	ldr	r0, [pc, #68]	@ (8001b84 <MX_USART2_UART_Init+0x90>)
 8001b3e:	f006 fc2d 	bl	800839c <HAL_UART_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001b48:	f000 fa82 	bl	8002050 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	480d      	ldr	r0, [pc, #52]	@ (8001b84 <MX_USART2_UART_Init+0x90>)
 8001b50:	f007 fa56 	bl	8009000 <HAL_UARTEx_SetTxFifoThreshold>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001b5a:	f000 fa79 	bl	8002050 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4808      	ldr	r0, [pc, #32]	@ (8001b84 <MX_USART2_UART_Init+0x90>)
 8001b62:	f007 fa8b 	bl	800907c <HAL_UARTEx_SetRxFifoThreshold>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001b6c:	f000 fa70 	bl	8002050 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001b70:	4804      	ldr	r0, [pc, #16]	@ (8001b84 <MX_USART2_UART_Init+0x90>)
 8001b72:	f007 fa0c 	bl	8008f8e <HAL_UARTEx_DisableFifoMode>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001b7c:	f000 fa68 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000678 	.word	0x20000678
 8001b88:	40004400 	.word	0x40004400

08001b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	@ 0x28
 8001b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	60da      	str	r2, [r3, #12]
 8001ba0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba2:	4b4e      	ldr	r3, [pc, #312]	@ (8001cdc <MX_GPIO_Init+0x150>)
 8001ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba6:	4a4d      	ldr	r2, [pc, #308]	@ (8001cdc <MX_GPIO_Init+0x150>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bae:	4b4b      	ldr	r3, [pc, #300]	@ (8001cdc <MX_GPIO_Init+0x150>)
 8001bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bba:	4b48      	ldr	r3, [pc, #288]	@ (8001cdc <MX_GPIO_Init+0x150>)
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bbe:	4a47      	ldr	r2, [pc, #284]	@ (8001cdc <MX_GPIO_Init+0x150>)
 8001bc0:	f043 0320 	orr.w	r3, r3, #32
 8001bc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bc6:	4b45      	ldr	r3, [pc, #276]	@ (8001cdc <MX_GPIO_Init+0x150>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bca:	f003 0320 	and.w	r3, r3, #32
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bd2:	4b42      	ldr	r3, [pc, #264]	@ (8001cdc <MX_GPIO_Init+0x150>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd6:	4a41      	ldr	r2, [pc, #260]	@ (8001cdc <MX_GPIO_Init+0x150>)
 8001bd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bde:	4b3f      	ldr	r3, [pc, #252]	@ (8001cdc <MX_GPIO_Init+0x150>)
 8001be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bea:	4b3c      	ldr	r3, [pc, #240]	@ (8001cdc <MX_GPIO_Init+0x150>)
 8001bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bee:	4a3b      	ldr	r2, [pc, #236]	@ (8001cdc <MX_GPIO_Init+0x150>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bf6:	4b39      	ldr	r3, [pc, #228]	@ (8001cdc <MX_GPIO_Init+0x150>)
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c02:	4b36      	ldr	r3, [pc, #216]	@ (8001cdc <MX_GPIO_Init+0x150>)
 8001c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c06:	4a35      	ldr	r2, [pc, #212]	@ (8001cdc <MX_GPIO_Init+0x150>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c0e:	4b33      	ldr	r3, [pc, #204]	@ (8001cdc <MX_GPIO_Init+0x150>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_B_Pin|LED2_G_Pin|LED2_R_Pin|STATUS_LED1_Pin
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f64f 410c 	movw	r1, #64524	@ 0xfc0c
 8001c20:	482f      	ldr	r0, [pc, #188]	@ (8001ce0 <MX_GPIO_Init+0x154>)
 8001c22:	f002 ff6d 	bl	8004b00 <HAL_GPIO_WritePin>
                          |STATUS_LED2_Pin|LED1_R_Pin|LED1_G_Pin|LED1_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RIGHT_DIR_GPIO_Port, RIGHT_DIR_Pin, GPIO_PIN_RESET);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2101      	movs	r1, #1
 8001c2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c2e:	f002 ff67 	bl	8004b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_B_Pin LED2_G_Pin LED2_R_Pin STATUS_LED1_Pin
                           STATUS_LED2_Pin LED1_R_Pin LED1_G_Pin LED1_B_Pin */
  GPIO_InitStruct.Pin = LED2_B_Pin|LED2_G_Pin|LED2_R_Pin|STATUS_LED1_Pin
 8001c32:	f64f 430c 	movw	r3, #64524	@ 0xfc0c
 8001c36:	617b      	str	r3, [r7, #20]
                          |STATUS_LED2_Pin|LED1_R_Pin|LED1_G_Pin|LED1_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2300      	movs	r3, #0
 8001c42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4825      	ldr	r0, [pc, #148]	@ (8001ce0 <MX_GPIO_Init+0x154>)
 8001c4c:	f002 fdbe 	bl	80047cc <HAL_GPIO_Init>

  /*Configure GPIO pin : nRST_Pin */
  GPIO_InitStruct.Pin = nRST_Pin;
 8001c50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nRST_GPIO_Port, &GPIO_InitStruct);
 8001c5e:	f107 0314 	add.w	r3, r7, #20
 8001c62:	4619      	mov	r1, r3
 8001c64:	481f      	ldr	r0, [pc, #124]	@ (8001ce4 <MX_GPIO_Init+0x158>)
 8001c66:	f002 fdb1 	bl	80047cc <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN1_FAULT_Pin FDCAN1_S_Pin */
  GPIO_InitStruct.Pin = FDCAN1_FAULT_Pin|FDCAN1_S_Pin;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c76:	f107 0314 	add.w	r3, r7, #20
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4818      	ldr	r0, [pc, #96]	@ (8001ce0 <MX_GPIO_Init+0x154>)
 8001c7e:	f002 fda5 	bl	80047cc <HAL_GPIO_Init>

  /*Configure GPIO pin : RIGHT_DIR_Pin */
  GPIO_InitStruct.Pin = RIGHT_DIR_Pin;
 8001c82:	2301      	movs	r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c86:	2301      	movs	r3, #1
 8001c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RIGHT_DIR_GPIO_Port, &GPIO_InitStruct);
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	4619      	mov	r1, r3
 8001c98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c9c:	f002 fd96 	bl	80047cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LEFT_DIR_Pin */
  GPIO_InitStruct.Pin = LEFT_DIR_Pin;
 8001ca0:	2340      	movs	r3, #64	@ 0x40
 8001ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEFT_DIR_GPIO_Port, &GPIO_InitStruct);
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cb6:	f002 fd89 	bl	80047cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_SW_Pin TOP_PB_Pin MID_PB_Pin BOT_PB_Pin
                           IMU_INTERRUPT_Pin FDCAN2_FAULT_Pin FDCAN2_S_Pin */
  GPIO_InitStruct.Pin = LIMIT_SW_Pin|TOP_PB_Pin|MID_PB_Pin|BOT_PB_Pin
 8001cba:	f640 4397 	movw	r3, #3223	@ 0xc97
 8001cbe:	617b      	str	r3, [r7, #20]
                          |IMU_INTERRUPT_Pin|FDCAN2_FAULT_Pin|FDCAN2_S_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4806      	ldr	r0, [pc, #24]	@ (8001ce8 <MX_GPIO_Init+0x15c>)
 8001cd0:	f002 fd7c 	bl	80047cc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001cd4:	bf00      	nop
 8001cd6:	3728      	adds	r7, #40	@ 0x28
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	48000800 	.word	0x48000800
 8001ce4:	48001800 	.word	0x48001800
 8001ce8:	48000400 	.word	0x48000400

08001cec <rgb_intro_task>:
/* USER CODE BEGIN 4 */

/*
 * Intro tasks
 */
void rgb_intro_task(rgb_t *rgb1, rgb_t *rgb2, uint16_t dwellTime, uint8_t numberOfSteps) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	80fb      	strh	r3, [r7, #6]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	717b      	strb	r3, [r7, #5]
	for (uint8_t i = 0; i < numberOfSteps; i++) {
 8001d02:	2300      	movs	r3, #0
 8001d04:	75fb      	strb	r3, [r7, #23]
 8001d06:	e00c      	b.n	8001d22 <rgb_intro_task+0x36>
		rgb_cycle(rgb1);
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f000 fb7b 	bl	8002404 <rgb_cycle>
		rgb_reverse_cycle(rgb2);
 8001d0e:	68b8      	ldr	r0, [r7, #8]
 8001d10:	f000 fb91 	bl	8002436 <rgb_reverse_cycle>
		HAL_Delay(dwellTime);
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f001 faba 	bl	8003290 <HAL_Delay>
	for (uint8_t i = 0; i < numberOfSteps; i++) {
 8001d1c:	7dfb      	ldrb	r3, [r7, #23]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	75fb      	strb	r3, [r7, #23]
 8001d22:	7dfa      	ldrb	r2, [r7, #23]
 8001d24:	797b      	ldrb	r3, [r7, #5]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d3ee      	bcc.n	8001d08 <rgb_intro_task+0x1c>
	}
	// Turn off between movements
	rgb_set_off(rgb1);
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 faed 	bl	800230a <rgb_set_off>
	rgb_set_off(rgb2);
 8001d30:	68b8      	ldr	r0, [r7, #8]
 8001d32:	f000 faea 	bl	800230a <rgb_set_off>
}
 8001d36:	bf00      	nop
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <rgb_white_blink>:
	rgb_set_off(rgb1);
	rgb_set_off(rgb2);
}


void rgb_white_blink(rgb_t *rgb1, rgb_t *rgb2, uint16_t dwellTime, uint8_t numberOfFlashes) {
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b086      	sub	sp, #24
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	4611      	mov	r1, r2
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	80fb      	strh	r3, [r7, #6]
 8001d50:	4613      	mov	r3, r2
 8001d52:	717b      	strb	r3, [r7, #5]
	for (uint8_t i = 0; i < numberOfFlashes; i++) {
 8001d54:	2300      	movs	r3, #0
 8001d56:	75fb      	strb	r3, [r7, #23]
 8001d58:	e016      	b.n	8001d88 <rgb_white_blink+0x4a>
		rgb_set_white(rgb1);
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 faaf 	bl	80022be <rgb_set_white>
		rgb_set_white(rgb2);
 8001d60:	68b8      	ldr	r0, [r7, #8]
 8001d62:	f000 faac 	bl	80022be <rgb_set_white>

		HAL_Delay(dwellTime);
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f001 fa91 	bl	8003290 <HAL_Delay>
		rgb_set_off(rgb1);
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 facb 	bl	800230a <rgb_set_off>
		rgb_set_off(rgb2);
 8001d74:	68b8      	ldr	r0, [r7, #8]
 8001d76:	f000 fac8 	bl	800230a <rgb_set_off>
		HAL_Delay(dwellTime);
 8001d7a:	88fb      	ldrh	r3, [r7, #6]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f001 fa87 	bl	8003290 <HAL_Delay>
	for (uint8_t i = 0; i < numberOfFlashes; i++) {
 8001d82:	7dfb      	ldrb	r3, [r7, #23]
 8001d84:	3301      	adds	r3, #1
 8001d86:	75fb      	strb	r3, [r7, #23]
 8001d88:	7dfa      	ldrb	r2, [r7, #23]
 8001d8a:	797b      	ldrb	r3, [r7, #5]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d3e4      	bcc.n	8001d5a <rgb_white_blink+0x1c>
	}
	// Turn off to finish
	rgb_set_off(rgb1);
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 faba 	bl	800230a <rgb_set_off>
	rgb_set_off(rgb2);
 8001d96:	68b8      	ldr	r0, [r7, #8]
 8001d98:	f000 fab7 	bl	800230a <rgb_set_off>
}
 8001d9c:	bf00      	nop
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <tmc2209_3_button_task>:
	rgb_t *rgb2,
	button_t *topPB,
	button_t *midPB,
	button_t *botPB,
	tmc2209_t *tmc1,
	tmc2209_t *tmc2) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	603b      	str	r3, [r7, #0]

	static uint32_t previousTick = 0;
	static uint32_t previousEventTick = 0;
	static uint32_t previousButtonPressTick = 0;

	uint32_t currentTick = HAL_GetTick();
 8001db2:	f001 fa61 	bl	8003278 <HAL_GetTick>
 8001db6:	6178      	str	r0, [r7, #20]
	if(previousTick == 0){
 8001db8:	4b87      	ldr	r3, [pc, #540]	@ (8001fd8 <tmc2209_3_button_task+0x234>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d102      	bne.n	8001dc6 <tmc2209_3_button_task+0x22>
		// If zero, it is the first time through
		previousTick = currentTick;
 8001dc0:	4a85      	ldr	r2, [pc, #532]	@ (8001fd8 <tmc2209_3_button_task+0x234>)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	6013      	str	r3, [r2, #0]
	}

	/*
	 * Top PB
	 */
	if(currentTick > (previousEventTick + period)) {
 8001dc6:	4b85      	ldr	r3, [pc, #532]	@ (8001fdc <tmc2209_3_button_task+0x238>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4413      	add	r3, r2
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	f240 80f0 	bls.w	8001fb6 <tmc2209_3_button_task+0x212>
		previousEventTick = currentTick;
 8001dd6:	4a81      	ldr	r2, [pc, #516]	@ (8001fdc <tmc2209_3_button_task+0x238>)
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	6013      	str	r3, [r2, #0]
		button_read(topPB);
 8001ddc:	6838      	ldr	r0, [r7, #0]
 8001dde:	f7ff f96c 	bl	80010ba <button_read>
		if (topPB->currentState == BUTTON_PRESSED) {
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	7a1b      	ldrb	r3, [r3, #8]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d127      	bne.n	8001e3a <tmc2209_3_button_task+0x96>
			previousButtonPressTick = currentTick;
 8001dea:	4a7d      	ldr	r2, [pc, #500]	@ (8001fe0 <tmc2209_3_button_task+0x23c>)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	6013      	str	r3, [r2, #0]
			// Velocity Control
			tmc1->vactual += tmc1->acceleration ;
 8001df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001df2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	441a      	add	r2, r3
 8001dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dfc:	65da      	str	r2, [r3, #92]	@ 0x5c
			tmc2209_set_VACTUAL(tmc1);
 8001dfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001e00:	f001 f8c6 	bl	8002f90 <tmc2209_set_VACTUAL>
			tmc2->vactual += tmc1->acceleration ;
 8001e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e06:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	441a      	add	r2, r3
 8001e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e10:	65da      	str	r2, [r3, #92]	@ 0x5c
			tmc2209_set_VACTUAL(tmc2);
 8001e12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001e14:	f001 f8bc 	bl	8002f90 <tmc2209_set_VACTUAL>

			// Toggle LEDs to signal change
			if(rgb1->currentColor == RGB_YELLOW) {
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	7e1b      	ldrb	r3, [r3, #24]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d106      	bne.n	8001e2e <tmc2209_3_button_task+0x8a>
				rgb_set_red(rgb1);
 8001e20:	68b8      	ldr	r0, [r7, #8]
 8001e22:	f000 f94d 	bl	80020c0 <rgb_set_red>
				rgb_set_yellow(rgb2);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f9f7 	bl	800221a <rgb_set_yellow>
 8001e2c:	e005      	b.n	8001e3a <tmc2209_3_button_task+0x96>
			} else {
				rgb_set_yellow(rgb1);
 8001e2e:	68b8      	ldr	r0, [r7, #8]
 8001e30:	f000 f9f3 	bl	800221a <rgb_set_yellow>
				rgb_set_red(rgb2);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f943 	bl	80020c0 <rgb_set_red>
		}

		/*
		 * Mid PB
		 */
		button_read(midPB);
 8001e3a:	6a38      	ldr	r0, [r7, #32]
 8001e3c:	f7ff f93d 	bl	80010ba <button_read>
		if (midPB->currentState == BUTTON_PRESSED) {
 8001e40:	6a3b      	ldr	r3, [r7, #32]
 8001e42:	7a1b      	ldrb	r3, [r3, #8]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d12f      	bne.n	8001ea8 <tmc2209_3_button_task+0x104>
			previousButtonPressTick = currentTick;
 8001e48:	4a65      	ldr	r2, [pc, #404]	@ (8001fe0 <tmc2209_3_button_task+0x23c>)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	6013      	str	r3, [r2, #0]
			// Velocity Control
			if (tmc1->mode == TMC2209_VELOCITY_CONTROL) {
 8001e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d109      	bne.n	8001e6a <tmc2209_3_button_task+0xc6>
				tmc1->vactual -= tmc1->acceleration ;
 8001e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	1ad2      	subs	r2, r2, r3
 8001e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e62:	65da      	str	r2, [r3, #92]	@ 0x5c
				tmc2209_set_VACTUAL(tmc1);
 8001e64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001e66:	f001 f893 	bl	8002f90 <tmc2209_set_VACTUAL>
			}
			if(tmc2->mode == TMC2209_VELOCITY_CONTROL) {
 8001e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d109      	bne.n	8001e86 <tmc2209_3_button_task+0xe2>
				tmc2->vactual -= tmc2->acceleration ;
 8001e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e74:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	1ad2      	subs	r2, r2, r3
 8001e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e7e:	65da      	str	r2, [r3, #92]	@ 0x5c
				tmc2209_set_VACTUAL(tmc2);
 8001e80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001e82:	f001 f885 	bl	8002f90 <tmc2209_set_VACTUAL>
			}

			// Toggle LEDs to signal change
			if(rgb1->currentColor == RGB_BLUE) {
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	7e1b      	ldrb	r3, [r3, #24]
 8001e8a:	2b05      	cmp	r3, #5
 8001e8c:	d106      	bne.n	8001e9c <tmc2209_3_button_task+0xf8>
				rgb_set_green(rgb1);
 8001e8e:	68b8      	ldr	r0, [r7, #8]
 8001e90:	f000 f942 	bl	8002118 <rgb_set_green>
				rgb_set_blue(rgb2);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f96b 	bl	8002170 <rgb_set_blue>
 8001e9a:	e005      	b.n	8001ea8 <tmc2209_3_button_task+0x104>
			} else {
				rgb_set_blue(rgb1);
 8001e9c:	68b8      	ldr	r0, [r7, #8]
 8001e9e:	f000 f967 	bl	8002170 <rgb_set_blue>
				rgb_set_green(rgb2);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f938 	bl	8002118 <rgb_set_green>

		/*
		 * Bot PB - Braking
		 */

		button_read(botPB);
 8001ea8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001eaa:	f7ff f906 	bl	80010ba <button_read>
		if (botPB->currentState == BUTTON_PRESSED) {
 8001eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb0:	7a1b      	ldrb	r3, [r3, #8]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d17f      	bne.n	8001fb6 <tmc2209_3_button_task+0x212>
			previousButtonPressTick = currentTick;
 8001eb6:	4a4a      	ldr	r2, [pc, #296]	@ (8001fe0 <tmc2209_3_button_task+0x23c>)
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	6013      	str	r3, [r2, #0]
			// VACTUAL control
			if((tmc1->vactual < (5* tmc1->acceleration)) && tmc1->vactual > (-5 * tmc1->acceleration)) {
 8001ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ebe:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8001ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	4299      	cmp	r1, r3
 8001ecc:	da0e      	bge.n	8001eec <tmc2209_3_button_task+0x148>
 8001ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ed0:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8001ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	079b      	lsls	r3, r3, #30
 8001eda:	1a9b      	subs	r3, r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	1a9b      	subs	r3, r3, r2
 8001ee0:	4299      	cmp	r1, r3
 8001ee2:	dd03      	ble.n	8001eec <tmc2209_3_button_task+0x148>
				tmc1->vactual = 0x000000;
 8001ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001eea:	e01a      	b.n	8001f22 <tmc2209_3_button_task+0x17e>
			} else {
				if (tmc1->vactual > 0) {
 8001eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	dd0c      	ble.n	8001f0e <tmc2209_3_button_task+0x16a>
					tmc1->vactual -= 5*tmc1->acceleration;
 8001ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ef6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8001ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	079b      	lsls	r3, r3, #30
 8001f00:	1a9b      	subs	r3, r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	1a9b      	subs	r3, r3, r2
 8001f06:	18ca      	adds	r2, r1, r3
 8001f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f0a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f0c:	e009      	b.n	8001f22 <tmc2209_3_button_task+0x17e>
				} else {
					tmc1->vactual += 5*tmc1->acceleration;
 8001f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f10:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8001f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	18ca      	adds	r2, r1, r3
 8001f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f20:	65da      	str	r2, [r3, #92]	@ 0x5c
				}
			}
			tmc2209_set_VACTUAL(tmc1);
 8001f22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001f24:	f001 f834 	bl	8002f90 <tmc2209_set_VACTUAL>


			// VACTUAL control
			if((tmc2->vactual < (5*tmc2->acceleration)) && (tmc2->vactual > (-5 * tmc2->acceleration ))) {
 8001f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f2a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8001f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	4299      	cmp	r1, r3
 8001f38:	da0e      	bge.n	8001f58 <tmc2209_3_button_task+0x1b4>
 8001f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f3c:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8001f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	079b      	lsls	r3, r3, #30
 8001f46:	1a9b      	subs	r3, r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	1a9b      	subs	r3, r3, r2
 8001f4c:	4299      	cmp	r1, r3
 8001f4e:	dd03      	ble.n	8001f58 <tmc2209_3_button_task+0x1b4>
				tmc2->vactual = 0x000000;
 8001f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f52:	2200      	movs	r2, #0
 8001f54:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f56:	e01a      	b.n	8001f8e <tmc2209_3_button_task+0x1ea>
			} else {
				if (tmc2->vactual > 0) {
 8001f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	dd0c      	ble.n	8001f7a <tmc2209_3_button_task+0x1d6>
					tmc2->vactual -= 5*tmc2->acceleration;
 8001f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f62:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8001f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	079b      	lsls	r3, r3, #30
 8001f6c:	1a9b      	subs	r3, r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	1a9b      	subs	r3, r3, r2
 8001f72:	18ca      	adds	r2, r1, r3
 8001f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f76:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f78:	e009      	b.n	8001f8e <tmc2209_3_button_task+0x1ea>
				} else {
					tmc2->vactual += 5*tmc2->acceleration;
 8001f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f7c:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8001f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	18ca      	adds	r2, r1, r3
 8001f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f8c:	65da      	str	r2, [r3, #92]	@ 0x5c
				}
			}
			tmc2209_set_VACTUAL(tmc2);
 8001f8e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001f90:	f000 fffe 	bl	8002f90 <tmc2209_set_VACTUAL>

			// Toggle LEDs to signal change
			if(rgb1->currentColor == RGB_VIOLET) {
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	7e1b      	ldrb	r3, [r3, #24]
 8001f98:	2b06      	cmp	r3, #6
 8001f9a:	d106      	bne.n	8001faa <tmc2209_3_button_task+0x206>
				rgb_set_turquoise(rgb1);
 8001f9c:	68b8      	ldr	r0, [r7, #8]
 8001f9e:	f000 f965 	bl	800226c <rgb_set_turquoise>
				rgb_set_violet(rgb2);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f910 	bl	80021c8 <rgb_set_violet>
 8001fa8:	e005      	b.n	8001fb6 <tmc2209_3_button_task+0x212>
			} else {
				rgb_set_violet(rgb1);
 8001faa:	68b8      	ldr	r0, [r7, #8]
 8001fac:	f000 f90c 	bl	80021c8 <rgb_set_violet>
				rgb_set_turquoise(rgb2);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f95b 	bl	800226c <rgb_set_turquoise>

		}

	}
	// If there is not button activity, turn off LEDs
	if(currentTick > (previousButtonPressTick + TASK_RGB_TIMEOUT)) {
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe0 <tmc2209_3_button_task+0x23c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d905      	bls.n	8001fd0 <tmc2209_3_button_task+0x22c>
		rgb_set_off(rgb1);
 8001fc4:	68b8      	ldr	r0, [r7, #8]
 8001fc6:	f000 f9a0 	bl	800230a <rgb_set_off>
		rgb_set_off(rgb2);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f99d 	bl	800230a <rgb_set_off>
	}


}
 8001fd0:	bf00      	nop
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	2000070c 	.word	0x2000070c
 8001fdc:	20000710 	.word	0x20000710
 8001fe0:	20000714 	.word	0x20000714

08001fe4 <heartbeat_task>:
 */
void heartbeat_task(
	led_t *led1,
	uint32_t led1Period,
	led_t *led2,
	uint32_t led2Period) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	603b      	str	r3, [r7, #0]
	static uint32_t led1PreviousEvent = 0;
	static uint32_t led2PreviousEvent = 0;

	uint32_t currentTick = HAL_GetTick();
 8001ff2:	f001 f941 	bl	8003278 <HAL_GetTick>
 8001ff6:	6178      	str	r0, [r7, #20]

	// If it's the first run, set PreviousEvent variable to current tick
	if(led1PreviousEvent == 0) {
 8001ff8:	4b13      	ldr	r3, [pc, #76]	@ (8002048 <heartbeat_task+0x64>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d105      	bne.n	800200c <heartbeat_task+0x28>
		led1PreviousEvent = currentTick;
 8002000:	4a11      	ldr	r2, [pc, #68]	@ (8002048 <heartbeat_task+0x64>)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	6013      	str	r3, [r2, #0]
		led2PreviousEvent = currentTick;
 8002006:	4a11      	ldr	r2, [pc, #68]	@ (800204c <heartbeat_task+0x68>)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	6013      	str	r3, [r2, #0]
	}

	// Toggle system LEDs every period
	if (currentTick > (led1PreviousEvent + led1Period)) {
 800200c:	4b0e      	ldr	r3, [pc, #56]	@ (8002048 <heartbeat_task+0x64>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	4413      	add	r3, r2
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	429a      	cmp	r2, r3
 8002018:	d905      	bls.n	8002026 <heartbeat_task+0x42>
		led1PreviousEvent = currentTick;
 800201a:	4a0b      	ldr	r2, [pc, #44]	@ (8002048 <heartbeat_task+0x64>)
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	6013      	str	r3, [r2, #0]
		led_toggle(led1);
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f7ff f8c0 	bl	80011a6 <led_toggle>
	}
	if (currentTick > (led2PreviousEvent + led2Period)) {
 8002026:	4b09      	ldr	r3, [pc, #36]	@ (800204c <heartbeat_task+0x68>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	4413      	add	r3, r2
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	429a      	cmp	r2, r3
 8002032:	d905      	bls.n	8002040 <heartbeat_task+0x5c>
		led2PreviousEvent = currentTick;
 8002034:	4a05      	ldr	r2, [pc, #20]	@ (800204c <heartbeat_task+0x68>)
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	6013      	str	r3, [r2, #0]
		led_toggle(led2);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff f8b3 	bl	80011a6 <led_toggle>
	}

}
 8002040:	bf00      	nop
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20000718 	.word	0x20000718
 800204c:	2000071c 	.word	0x2000071c

08002050 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002054:	b672      	cpsid	i
}
 8002056:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002058:	bf00      	nop
 800205a:	e7fd      	b.n	8002058 <Error_Handler+0x8>

0800205c <rgb_new>:
	GPIO_TypeDef *g_port,
	uint16_t b_pin,
	GPIO_TypeDef *b_port,
	rgb_color_t currentColor,
	bool activeState
	) {
 800205c:	b5b0      	push	{r4, r5, r7, lr}
 800205e:	b08c      	sub	sp, #48	@ 0x30
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	607a      	str	r2, [r7, #4]
 8002066:	461a      	mov	r2, r3
 8002068:	460b      	mov	r3, r1
 800206a:	817b      	strh	r3, [r7, #10]
 800206c:	4613      	mov	r3, r2
 800206e:	813b      	strh	r3, [r7, #8]
	rgb_t newRgb;
	newRgb.r_pin = r_pin;
 8002070:	897b      	ldrh	r3, [r7, #10]
 8002072:	82bb      	strh	r3, [r7, #20]
	newRgb.r_port = r_port;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	61bb      	str	r3, [r7, #24]
	newRgb.g_pin = g_pin;
 8002078:	893b      	ldrh	r3, [r7, #8]
 800207a:	83bb      	strh	r3, [r7, #28]
	newRgb.g_port = g_port;
 800207c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800207e:	623b      	str	r3, [r7, #32]
	newRgb.b_pin = b_pin;
 8002080:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8002084:	84bb      	strh	r3, [r7, #36]	@ 0x24
	newRgb.b_port = b_port;
 8002086:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002088:	62bb      	str	r3, [r7, #40]	@ 0x28
	newRgb.currentColor = currentColor;
 800208a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800208e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	newRgb.activeState = activeState;
 8002092:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8002096:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

	rgb_set_color(&newRgb);
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 f962 	bl	8002368 <rgb_set_color>

	return newRgb;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	461d      	mov	r5, r3
 80020a8:	f107 0414 	add.w	r4, r7, #20
 80020ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80020b4:	e885 0007 	stmia.w	r5, {r0, r1, r2}

}
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	3730      	adds	r7, #48	@ 0x30
 80020bc:	46bd      	mov	sp, r7
 80020be:	bdb0      	pop	{r4, r5, r7, pc}

080020c0 <rgb_set_red>:

void rgb_set_red(rgb_t *rgb) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(rgb->r_port, rgb->r_pin, rgb->activeState);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6858      	ldr	r0, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	8819      	ldrh	r1, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	7e5b      	ldrb	r3, [r3, #25]
 80020d4:	461a      	mov	r2, r3
 80020d6:	f002 fd13 	bl	8004b00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rgb->g_port, rgb->g_pin, !(rgb->activeState));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68d8      	ldr	r0, [r3, #12]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	8919      	ldrh	r1, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	7e5b      	ldrb	r3, [r3, #25]
 80020e6:	f083 0301 	eor.w	r3, r3, #1
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	461a      	mov	r2, r3
 80020ee:	f002 fd07 	bl	8004b00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rgb->b_port, rgb->b_pin, !(rgb->activeState));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6958      	ldr	r0, [r3, #20]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	8a19      	ldrh	r1, [r3, #16]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	7e5b      	ldrb	r3, [r3, #25]
 80020fe:	f083 0301 	eor.w	r3, r3, #1
 8002102:	b2db      	uxtb	r3, r3
 8002104:	461a      	mov	r2, r3
 8002106:	f002 fcfb 	bl	8004b00 <HAL_GPIO_WritePin>
	rgb->currentColor = RGB_RED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	761a      	strb	r2, [r3, #24]
}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <rgb_set_green>:

void rgb_set_green(rgb_t *rgb) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(rgb->r_port, rgb->r_pin, !(rgb->activeState));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6858      	ldr	r0, [r3, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	8819      	ldrh	r1, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	7e5b      	ldrb	r3, [r3, #25]
 800212c:	f083 0301 	eor.w	r3, r3, #1
 8002130:	b2db      	uxtb	r3, r3
 8002132:	461a      	mov	r2, r3
 8002134:	f002 fce4 	bl	8004b00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rgb->g_port, rgb->g_pin, rgb->activeState);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68d8      	ldr	r0, [r3, #12]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	8919      	ldrh	r1, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	7e5b      	ldrb	r3, [r3, #25]
 8002144:	461a      	mov	r2, r3
 8002146:	f002 fcdb 	bl	8004b00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rgb->b_port, rgb->b_pin, !(rgb->activeState));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6958      	ldr	r0, [r3, #20]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	8a19      	ldrh	r1, [r3, #16]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	7e5b      	ldrb	r3, [r3, #25]
 8002156:	f083 0301 	eor.w	r3, r3, #1
 800215a:	b2db      	uxtb	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	f002 fccf 	bl	8004b00 <HAL_GPIO_WritePin>
	rgb->currentColor = RGB_GREEN;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2203      	movs	r2, #3
 8002166:	761a      	strb	r2, [r3, #24]
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <rgb_set_blue>:

void rgb_set_blue(rgb_t *rgb) {
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(rgb->r_port, rgb->r_pin, !(rgb->activeState));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6858      	ldr	r0, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	8819      	ldrh	r1, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	7e5b      	ldrb	r3, [r3, #25]
 8002184:	f083 0301 	eor.w	r3, r3, #1
 8002188:	b2db      	uxtb	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	f002 fcb8 	bl	8004b00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rgb->g_port, rgb->g_pin, !(rgb->activeState));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68d8      	ldr	r0, [r3, #12]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	8919      	ldrh	r1, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	7e5b      	ldrb	r3, [r3, #25]
 800219c:	f083 0301 	eor.w	r3, r3, #1
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	f002 fcac 	bl	8004b00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rgb->b_port, rgb->b_pin, rgb->activeState);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6958      	ldr	r0, [r3, #20]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	8a19      	ldrh	r1, [r3, #16]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	7e5b      	ldrb	r3, [r3, #25]
 80021b4:	461a      	mov	r2, r3
 80021b6:	f002 fca3 	bl	8004b00 <HAL_GPIO_WritePin>
	rgb->currentColor = RGB_BLUE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2205      	movs	r2, #5
 80021be:	761a      	strb	r2, [r3, #24]
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <rgb_set_violet>:

void rgb_set_violet(rgb_t *rgb) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(rgb->r_port, rgb->r_pin, rgb->activeState);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6858      	ldr	r0, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	8819      	ldrh	r1, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	7e5b      	ldrb	r3, [r3, #25]
 80021dc:	461a      	mov	r2, r3
 80021de:	f002 fc8f 	bl	8004b00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rgb->g_port, rgb->g_pin, !(rgb->activeState));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68d8      	ldr	r0, [r3, #12]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	8919      	ldrh	r1, [r3, #8]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	7e5b      	ldrb	r3, [r3, #25]
 80021ee:	f083 0301 	eor.w	r3, r3, #1
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	f002 fc83 	bl	8004b00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rgb->b_port, rgb->b_pin, rgb->activeState);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6958      	ldr	r0, [r3, #20]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	8a19      	ldrh	r1, [r3, #16]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	7e5b      	ldrb	r3, [r3, #25]
 8002206:	461a      	mov	r2, r3
 8002208:	f002 fc7a 	bl	8004b00 <HAL_GPIO_WritePin>
	rgb->currentColor = RGB_VIOLET;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2206      	movs	r2, #6
 8002210:	761a      	strb	r2, [r3, #24]
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <rgb_set_yellow>:

void rgb_set_yellow(rgb_t *rgb) {
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(rgb->r_port, rgb->r_pin, rgb->activeState);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6858      	ldr	r0, [r3, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	8819      	ldrh	r1, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	7e5b      	ldrb	r3, [r3, #25]
 800222e:	461a      	mov	r2, r3
 8002230:	f002 fc66 	bl	8004b00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rgb->g_port, rgb->g_pin, rgb->activeState);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68d8      	ldr	r0, [r3, #12]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	8919      	ldrh	r1, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	7e5b      	ldrb	r3, [r3, #25]
 8002240:	461a      	mov	r2, r3
 8002242:	f002 fc5d 	bl	8004b00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rgb->b_port, rgb->b_pin, !(rgb->activeState));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6958      	ldr	r0, [r3, #20]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	8a19      	ldrh	r1, [r3, #16]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	7e5b      	ldrb	r3, [r3, #25]
 8002252:	f083 0301 	eor.w	r3, r3, #1
 8002256:	b2db      	uxtb	r3, r3
 8002258:	461a      	mov	r2, r3
 800225a:	f002 fc51 	bl	8004b00 <HAL_GPIO_WritePin>
	rgb->currentColor = RGB_YELLOW;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2202      	movs	r2, #2
 8002262:	761a      	strb	r2, [r3, #24]
}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <rgb_set_turquoise>:

void rgb_set_turquoise(rgb_t *rgb) {
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(rgb->r_port, rgb->r_pin, !(rgb->activeState));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6858      	ldr	r0, [r3, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	8819      	ldrh	r1, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	7e5b      	ldrb	r3, [r3, #25]
 8002280:	f083 0301 	eor.w	r3, r3, #1
 8002284:	b2db      	uxtb	r3, r3
 8002286:	461a      	mov	r2, r3
 8002288:	f002 fc3a 	bl	8004b00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rgb->g_port, rgb->g_pin, rgb->activeState);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68d8      	ldr	r0, [r3, #12]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	8919      	ldrh	r1, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	7e5b      	ldrb	r3, [r3, #25]
 8002298:	461a      	mov	r2, r3
 800229a:	f002 fc31 	bl	8004b00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rgb->b_port, rgb->b_pin, rgb->activeState);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6958      	ldr	r0, [r3, #20]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	8a19      	ldrh	r1, [r3, #16]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	7e5b      	ldrb	r3, [r3, #25]
 80022aa:	461a      	mov	r2, r3
 80022ac:	f002 fc28 	bl	8004b00 <HAL_GPIO_WritePin>
	rgb->currentColor = RGB_TURQUOISE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2204      	movs	r2, #4
 80022b4:	761a      	strb	r2, [r3, #24]
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <rgb_set_white>:

void rgb_set_white(rgb_t *rgb) {
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(rgb->r_port, rgb->r_pin, rgb->activeState);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6858      	ldr	r0, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	8819      	ldrh	r1, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	7e5b      	ldrb	r3, [r3, #25]
 80022d2:	461a      	mov	r2, r3
 80022d4:	f002 fc14 	bl	8004b00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rgb->g_port, rgb->g_pin, rgb->activeState);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68d8      	ldr	r0, [r3, #12]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	8919      	ldrh	r1, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	7e5b      	ldrb	r3, [r3, #25]
 80022e4:	461a      	mov	r2, r3
 80022e6:	f002 fc0b 	bl	8004b00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rgb->b_port, rgb->b_pin, rgb->activeState);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6958      	ldr	r0, [r3, #20]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	8a19      	ldrh	r1, [r3, #16]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7e5b      	ldrb	r3, [r3, #25]
 80022f6:	461a      	mov	r2, r3
 80022f8:	f002 fc02 	bl	8004b00 <HAL_GPIO_WritePin>
	rgb->currentColor = RGB_WHITE;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2207      	movs	r2, #7
 8002300:	761a      	strb	r2, [r3, #24]
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <rgb_set_off>:

void rgb_set_off(rgb_t *rgb) {
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(rgb->r_port, rgb->r_pin, !(rgb->activeState));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6858      	ldr	r0, [r3, #4]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	8819      	ldrh	r1, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	7e5b      	ldrb	r3, [r3, #25]
 800231e:	f083 0301 	eor.w	r3, r3, #1
 8002322:	b2db      	uxtb	r3, r3
 8002324:	461a      	mov	r2, r3
 8002326:	f002 fbeb 	bl	8004b00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rgb->g_port, rgb->g_pin, !(rgb->activeState));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68d8      	ldr	r0, [r3, #12]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	8919      	ldrh	r1, [r3, #8]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	7e5b      	ldrb	r3, [r3, #25]
 8002336:	f083 0301 	eor.w	r3, r3, #1
 800233a:	b2db      	uxtb	r3, r3
 800233c:	461a      	mov	r2, r3
 800233e:	f002 fbdf 	bl	8004b00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rgb->b_port, rgb->b_pin, !(rgb->activeState));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6958      	ldr	r0, [r3, #20]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	8a19      	ldrh	r1, [r3, #16]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	7e5b      	ldrb	r3, [r3, #25]
 800234e:	f083 0301 	eor.w	r3, r3, #1
 8002352:	b2db      	uxtb	r3, r3
 8002354:	461a      	mov	r2, r3
 8002356:	f002 fbd3 	bl	8004b00 <HAL_GPIO_WritePin>
	rgb->currentColor = RGB_OFF;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	761a      	strb	r2, [r3, #24]
}
 8002360:	bf00      	nop
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <rgb_set_color>:

void rgb_set_color(rgb_t *rgb) {
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	switch ( rgb->currentColor ) {
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	7e1b      	ldrb	r3, [r3, #24]
 8002374:	2b07      	cmp	r3, #7
 8002376:	d833      	bhi.n	80023e0 <rgb_set_color+0x78>
 8002378:	a201      	add	r2, pc, #4	@ (adr r2, 8002380 <rgb_set_color+0x18>)
 800237a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237e:	bf00      	nop
 8002380:	080023d9 	.word	0x080023d9
 8002384:	080023a1 	.word	0x080023a1
 8002388:	080023c1 	.word	0x080023c1
 800238c:	080023a9 	.word	0x080023a9
 8002390:	080023c9 	.word	0x080023c9
 8002394:	080023b1 	.word	0x080023b1
 8002398:	080023b9 	.word	0x080023b9
 800239c:	080023d1 	.word	0x080023d1
		case RGB_RED:
			rgb_set_red(rgb);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff fe8d 	bl	80020c0 <rgb_set_red>
			break;
 80023a6:	e025      	b.n	80023f4 <rgb_set_color+0x8c>
		case RGB_GREEN:
			rgb_set_green(rgb);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff feb5 	bl	8002118 <rgb_set_green>
			break;
 80023ae:	e021      	b.n	80023f4 <rgb_set_color+0x8c>
		case RGB_BLUE:
			rgb_set_blue(rgb);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff fedd 	bl	8002170 <rgb_set_blue>
			break;
 80023b6:	e01d      	b.n	80023f4 <rgb_set_color+0x8c>
		case RGB_VIOLET:
			rgb_set_violet(rgb);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff ff05 	bl	80021c8 <rgb_set_violet>
			break;
 80023be:	e019      	b.n	80023f4 <rgb_set_color+0x8c>
		case RGB_YELLOW:
			rgb_set_yellow(rgb);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff ff2a 	bl	800221a <rgb_set_yellow>
			break;
 80023c6:	e015      	b.n	80023f4 <rgb_set_color+0x8c>
		case RGB_TURQUOISE:
			rgb_set_turquoise(rgb);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ff4f 	bl	800226c <rgb_set_turquoise>
			break;
 80023ce:	e011      	b.n	80023f4 <rgb_set_color+0x8c>
		case RGB_WHITE:
			rgb_set_white(rgb);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7ff ff74 	bl	80022be <rgb_set_white>
			break;
 80023d6:	e00d      	b.n	80023f4 <rgb_set_color+0x8c>
		case RGB_OFF:
			rgb_set_off(rgb);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff ff96 	bl	800230a <rgb_set_off>
			break;
 80023de:	e009      	b.n	80023f4 <rgb_set_color+0x8c>
		default:
			fprintf(stderr, "Invalid state RGB_setState: %i\n\r", rgb->currentColor);
 80023e0:	4b06      	ldr	r3, [pc, #24]	@ (80023fc <rgb_set_color+0x94>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68d8      	ldr	r0, [r3, #12]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	7e1b      	ldrb	r3, [r3, #24]
 80023ea:	461a      	mov	r2, r3
 80023ec:	4904      	ldr	r1, [pc, #16]	@ (8002400 <rgb_set_color+0x98>)
 80023ee:	f00b fd7f 	bl	800def0 <fiprintf>
		}
}
 80023f2:	bf00      	nop
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20000190 	.word	0x20000190
 8002400:	080117c8 	.word	0x080117c8

08002404 <rgb_cycle>:

/**
 * @breif Cycle to next color combo, white exclusive
 * @param RGB
 */
void rgb_cycle(rgb_t *rgb) {
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
	if( rgb->currentColor >= (RGB_WHITE - 1) ) {
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	7e1b      	ldrb	r3, [r3, #24]
 8002410:	2b05      	cmp	r3, #5
 8002412:	d903      	bls.n	800241c <rgb_cycle+0x18>
		rgb->currentColor = RGB_RED;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	761a      	strb	r2, [r3, #24]
 800241a:	e005      	b.n	8002428 <rgb_cycle+0x24>
	} else {
		rgb->currentColor ++;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	7e1b      	ldrb	r3, [r3, #24]
 8002420:	3301      	adds	r3, #1
 8002422:	b2da      	uxtb	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	761a      	strb	r2, [r3, #24]
	}
	rgb_set_color(rgb);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff ff9d 	bl	8002368 <rgb_set_color>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <rgb_reverse_cycle>:
void rgb_reverse_cycle(rgb_t *rgb) {
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
	if( rgb->currentColor<= RGB_RED ) {
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	7e1b      	ldrb	r3, [r3, #24]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d803      	bhi.n	800244e <rgb_reverse_cycle+0x18>
		rgb->currentColor = (RGB_WHITE - 1);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2206      	movs	r2, #6
 800244a:	761a      	strb	r2, [r3, #24]
 800244c:	e005      	b.n	800245a <rgb_reverse_cycle+0x24>
	} else {
		rgb->currentColor --;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	7e1b      	ldrb	r3, [r3, #24]
 8002452:	3b01      	subs	r3, #1
 8002454:	b2da      	uxtb	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	761a      	strb	r2, [r3, #24]
	}
	rgb_set_color(rgb);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff ff84 	bl	8002368 <rgb_set_color>
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <Servo_newMG90S>:

/**
 * Create and initialize a new MG90S servo
 */

servo_t Servo_newMG90S(TIM_HandleTypeDef *htim, uint32_t channel) {
 8002468:	b5b0      	push	{r4, r5, r7, lr}
 800246a:	b08c      	sub	sp, #48	@ 0x30
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
	// TODO: Check for valid values
	servo_t  newServo = {
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	4b37      	ldr	r3, [pc, #220]	@ (8002560 <Servo_newMG90S+0xf8>)
 8002482:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002486:	f04f 0200 	mov.w	r2, #0
 800248a:	4b35      	ldr	r3, [pc, #212]	@ (8002560 <Servo_newMG90S+0xf8>)
 800248c:	e9c7 2308 	strd	r2, r3, [r7, #32]
			.tim = htim,
			.channel = channel,
			.setPoint = 0.5,
			.home = 0.5,
			// Period x Duty cycle
			.maxPulseWidth = (uint16_t)(htim->Instance->ARR * MG90S_MAX_LIMIT),
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe f85c 	bl	8000554 <__aeabi_ui2d>
 800249c:	a32c      	add	r3, pc, #176	@ (adr r3, 8002550 <Servo_newMG90S+0xe8>)
 800249e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a2:	f7fe f8d1 	bl	8000648 <__aeabi_dmul>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4610      	mov	r0, r2
 80024ac:	4619      	mov	r1, r3
 80024ae:	f7fe fba3 	bl	8000bf8 <__aeabi_d2uiz>
 80024b2:	4603      	mov	r3, r0
 80024b4:	b29b      	uxth	r3, r3
	servo_t  newServo = {
 80024b6:	853b      	strh	r3, [r7, #40]	@ 0x28
			.minPulseWidth = (uint16_t)(htim->Instance->ARR * MG90S_MIN_LIMIT),
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe f848 	bl	8000554 <__aeabi_ui2d>
 80024c4:	a324      	add	r3, pc, #144	@ (adr r3, 8002558 <Servo_newMG90S+0xf0>)
 80024c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ca:	f7fe f8bd 	bl	8000648 <__aeabi_dmul>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4610      	mov	r0, r2
 80024d4:	4619      	mov	r1, r3
 80024d6:	f7fe fb8f 	bl	8000bf8 <__aeabi_d2uiz>
 80024da:	4603      	mov	r3, r0
 80024dc:	b29b      	uxth	r3, r3
	servo_t  newServo = {
 80024de:	857b      	strh	r3, [r7, #42]	@ 0x2a
			.absMaxPulseWidth = (uint16_t)(htim->Instance->ARR * MG90S_MAX_LIMIT),
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe f834 	bl	8000554 <__aeabi_ui2d>
 80024ec:	a318      	add	r3, pc, #96	@ (adr r3, 8002550 <Servo_newMG90S+0xe8>)
 80024ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f2:	f7fe f8a9 	bl	8000648 <__aeabi_dmul>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	4610      	mov	r0, r2
 80024fc:	4619      	mov	r1, r3
 80024fe:	f7fe fb7b 	bl	8000bf8 <__aeabi_d2uiz>
 8002502:	4603      	mov	r3, r0
 8002504:	b29b      	uxth	r3, r3
	servo_t  newServo = {
 8002506:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			.absMinPulseWidth = (uint16_t)(htim->Instance->ARR * MG90S_MIN_LIMIT)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe f820 	bl	8000554 <__aeabi_ui2d>
 8002514:	a310      	add	r3, pc, #64	@ (adr r3, 8002558 <Servo_newMG90S+0xf0>)
 8002516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251a:	f7fe f895 	bl	8000648 <__aeabi_dmul>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	4610      	mov	r0, r2
 8002524:	4619      	mov	r1, r3
 8002526:	f7fe fb67 	bl	8000bf8 <__aeabi_d2uiz>
 800252a:	4603      	mov	r3, r0
 800252c:	b29b      	uxth	r3, r3
	servo_t  newServo = {
 800252e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	};
	//Servo_start(&newServo);
	return newServo;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	461d      	mov	r5, r3
 8002534:	f107 0410 	add.w	r4, r7, #16
 8002538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800253a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800253c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002540:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	3730      	adds	r7, #48	@ 0x30
 8002548:	46bd      	mov	sp, r7
 800254a:	bdb0      	pop	{r4, r5, r7, pc}
 800254c:	f3af 8000 	nop.w
 8002550:	7ced9168 	.word	0x7ced9168
 8002554:	3fbe353f 	.word	0x3fbe353f
 8002558:	76c8b439 	.word	0x76c8b439
 800255c:	3f9a9fbe 	.word	0x3f9a9fbe
 8002560:	3fe00000 	.word	0x3fe00000

08002564 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256a:	4b0f      	ldr	r3, [pc, #60]	@ (80025a8 <HAL_MspInit+0x44>)
 800256c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800256e:	4a0e      	ldr	r2, [pc, #56]	@ (80025a8 <HAL_MspInit+0x44>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	6613      	str	r3, [r2, #96]	@ 0x60
 8002576:	4b0c      	ldr	r3, [pc, #48]	@ (80025a8 <HAL_MspInit+0x44>)
 8002578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	607b      	str	r3, [r7, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002582:	4b09      	ldr	r3, [pc, #36]	@ (80025a8 <HAL_MspInit+0x44>)
 8002584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002586:	4a08      	ldr	r2, [pc, #32]	@ (80025a8 <HAL_MspInit+0x44>)
 8002588:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800258c:	6593      	str	r3, [r2, #88]	@ 0x58
 800258e:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <HAL_MspInit+0x44>)
 8002590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002596:	603b      	str	r3, [r7, #0]
 8002598:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40021000 	.word	0x40021000

080025ac <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b09e      	sub	sp, #120	@ 0x78
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025c4:	f107 0314 	add.w	r3, r7, #20
 80025c8:	2250      	movs	r2, #80	@ 0x50
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f00b fd24 	bl	800e01a <memset>
  if(hadc->Instance==ADC2)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002650 <HAL_ADC_MspInit+0xa4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d134      	bne.n	8002646 <HAL_ADC_MspInit+0x9a>

    /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80025dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025e0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80025e2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80025e6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	4618      	mov	r0, r3
 80025ee:	f004 fd8d 	bl	800710c <HAL_RCCEx_PeriphCLKConfig>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80025f8:	f7ff fd2a 	bl	8002050 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80025fc:	4b15      	ldr	r3, [pc, #84]	@ (8002654 <HAL_ADC_MspInit+0xa8>)
 80025fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002600:	4a14      	ldr	r2, [pc, #80]	@ (8002654 <HAL_ADC_MspInit+0xa8>)
 8002602:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002606:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002608:	4b12      	ldr	r3, [pc, #72]	@ (8002654 <HAL_ADC_MspInit+0xa8>)
 800260a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002614:	4b0f      	ldr	r3, [pc, #60]	@ (8002654 <HAL_ADC_MspInit+0xa8>)
 8002616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002618:	4a0e      	ldr	r2, [pc, #56]	@ (8002654 <HAL_ADC_MspInit+0xa8>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002620:	4b0c      	ldr	r3, [pc, #48]	@ (8002654 <HAL_ADC_MspInit+0xa8>)
 8002622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = BAT_MON_Pin;
 800262c:	2380      	movs	r3, #128	@ 0x80
 800262e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002630:	2303      	movs	r3, #3
 8002632:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002634:	2300      	movs	r3, #0
 8002636:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BAT_MON_GPIO_Port, &GPIO_InitStruct);
 8002638:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800263c:	4619      	mov	r1, r3
 800263e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002642:	f002 f8c3 	bl	80047cc <HAL_GPIO_Init>

    /* USER CODE END ADC2_MspInit 1 */

  }

}
 8002646:	bf00      	nop
 8002648:	3778      	adds	r7, #120	@ 0x78
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	50000100 	.word	0x50000100
 8002654:	40021000 	.word	0x40021000

08002658 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b0a0      	sub	sp, #128	@ 0x80
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002670:	f107 031c 	add.w	r3, r7, #28
 8002674:	2250      	movs	r2, #80	@ 0x50
 8002676:	2100      	movs	r1, #0
 8002678:	4618      	mov	r0, r3
 800267a:	f00b fcce 	bl	800e01a <memset>
  if(hfdcan->Instance==FDCAN1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a48      	ldr	r2, [pc, #288]	@ (80027a4 <HAL_FDCAN_MspInit+0x14c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d142      	bne.n	800270e <HAL_FDCAN_MspInit+0xb6>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002688:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800268c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800268e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002692:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002694:	f107 031c 	add.w	r3, r7, #28
 8002698:	4618      	mov	r0, r3
 800269a:	f004 fd37 	bl	800710c <HAL_RCCEx_PeriphCLKConfig>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80026a4:	f7ff fcd4 	bl	8002050 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80026a8:	4b3f      	ldr	r3, [pc, #252]	@ (80027a8 <HAL_FDCAN_MspInit+0x150>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	3301      	adds	r3, #1
 80026ae:	4a3e      	ldr	r2, [pc, #248]	@ (80027a8 <HAL_FDCAN_MspInit+0x150>)
 80026b0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80026b2:	4b3d      	ldr	r3, [pc, #244]	@ (80027a8 <HAL_FDCAN_MspInit+0x150>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d10b      	bne.n	80026d2 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80026ba:	4b3c      	ldr	r3, [pc, #240]	@ (80027ac <HAL_FDCAN_MspInit+0x154>)
 80026bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026be:	4a3b      	ldr	r2, [pc, #236]	@ (80027ac <HAL_FDCAN_MspInit+0x154>)
 80026c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80026c6:	4b39      	ldr	r3, [pc, #228]	@ (80027ac <HAL_FDCAN_MspInit+0x154>)
 80026c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ce:	61bb      	str	r3, [r7, #24]
 80026d0:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d2:	4b36      	ldr	r3, [pc, #216]	@ (80027ac <HAL_FDCAN_MspInit+0x154>)
 80026d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d6:	4a35      	ldr	r2, [pc, #212]	@ (80027ac <HAL_FDCAN_MspInit+0x154>)
 80026d8:	f043 0302 	orr.w	r3, r3, #2
 80026dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026de:	4b33      	ldr	r3, [pc, #204]	@ (80027ac <HAL_FDCAN_MspInit+0x154>)
 80026e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80026ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f0:	2302      	movs	r3, #2
 80026f2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f8:	2300      	movs	r3, #0
 80026fa:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80026fc:	2309      	movs	r3, #9
 80026fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002700:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002704:	4619      	mov	r1, r3
 8002706:	482a      	ldr	r0, [pc, #168]	@ (80027b0 <HAL_FDCAN_MspInit+0x158>)
 8002708:	f002 f860 	bl	80047cc <HAL_GPIO_Init>
    /* USER CODE BEGIN FDCAN2_MspInit 1 */

    /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800270c:	e045      	b.n	800279a <HAL_FDCAN_MspInit+0x142>
  else if(hfdcan->Instance==FDCAN2)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a28      	ldr	r2, [pc, #160]	@ (80027b4 <HAL_FDCAN_MspInit+0x15c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d140      	bne.n	800279a <HAL_FDCAN_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002718:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800271c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800271e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002722:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002724:	f107 031c 	add.w	r3, r7, #28
 8002728:	4618      	mov	r0, r3
 800272a:	f004 fcef 	bl	800710c <HAL_RCCEx_PeriphCLKConfig>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_FDCAN_MspInit+0xe0>
      Error_Handler();
 8002734:	f7ff fc8c 	bl	8002050 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002738:	4b1b      	ldr	r3, [pc, #108]	@ (80027a8 <HAL_FDCAN_MspInit+0x150>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	3301      	adds	r3, #1
 800273e:	4a1a      	ldr	r2, [pc, #104]	@ (80027a8 <HAL_FDCAN_MspInit+0x150>)
 8002740:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002742:	4b19      	ldr	r3, [pc, #100]	@ (80027a8 <HAL_FDCAN_MspInit+0x150>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d10b      	bne.n	8002762 <HAL_FDCAN_MspInit+0x10a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800274a:	4b18      	ldr	r3, [pc, #96]	@ (80027ac <HAL_FDCAN_MspInit+0x154>)
 800274c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800274e:	4a17      	ldr	r2, [pc, #92]	@ (80027ac <HAL_FDCAN_MspInit+0x154>)
 8002750:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002754:	6593      	str	r3, [r2, #88]	@ 0x58
 8002756:	4b15      	ldr	r3, [pc, #84]	@ (80027ac <HAL_FDCAN_MspInit+0x154>)
 8002758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002762:	4b12      	ldr	r3, [pc, #72]	@ (80027ac <HAL_FDCAN_MspInit+0x154>)
 8002764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002766:	4a11      	ldr	r2, [pc, #68]	@ (80027ac <HAL_FDCAN_MspInit+0x154>)
 8002768:	f043 0302 	orr.w	r3, r3, #2
 800276c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800276e:	4b0f      	ldr	r3, [pc, #60]	@ (80027ac <HAL_FDCAN_MspInit+0x154>)
 8002770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800277a:	2360      	movs	r3, #96	@ 0x60
 800277c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277e:	2302      	movs	r3, #2
 8002780:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002786:	2300      	movs	r3, #0
 8002788:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800278a:	2309      	movs	r3, #9
 800278c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002792:	4619      	mov	r1, r3
 8002794:	4806      	ldr	r0, [pc, #24]	@ (80027b0 <HAL_FDCAN_MspInit+0x158>)
 8002796:	f002 f819 	bl	80047cc <HAL_GPIO_Init>
}
 800279a:	bf00      	nop
 800279c:	3780      	adds	r7, #128	@ 0x80
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40006400 	.word	0x40006400
 80027a8:	20000720 	.word	0x20000720
 80027ac:	40021000 	.word	0x40021000
 80027b0:	48000400 	.word	0x48000400
 80027b4:	40006800 	.word	0x40006800

080027b8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08a      	sub	sp, #40	@ 0x28
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c0:	f107 0314 	add.w	r3, r7, #20
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]
 80027ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a17      	ldr	r2, [pc, #92]	@ (8002834 <HAL_SPI_MspInit+0x7c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d128      	bne.n	800282c <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027da:	4b17      	ldr	r3, [pc, #92]	@ (8002838 <HAL_SPI_MspInit+0x80>)
 80027dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027de:	4a16      	ldr	r2, [pc, #88]	@ (8002838 <HAL_SPI_MspInit+0x80>)
 80027e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80027e6:	4b14      	ldr	r3, [pc, #80]	@ (8002838 <HAL_SPI_MspInit+0x80>)
 80027e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f2:	4b11      	ldr	r3, [pc, #68]	@ (8002838 <HAL_SPI_MspInit+0x80>)
 80027f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027f6:	4a10      	ldr	r2, [pc, #64]	@ (8002838 <HAL_SPI_MspInit+0x80>)
 80027f8:	f043 0302 	orr.w	r3, r3, #2
 80027fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002838 <HAL_SPI_MspInit+0x80>)
 8002800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800280a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800280e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002810:	2302      	movs	r3, #2
 8002812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002814:	2300      	movs	r3, #0
 8002816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002818:	2300      	movs	r3, #0
 800281a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800281c:	2305      	movs	r3, #5
 800281e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	4619      	mov	r1, r3
 8002826:	4805      	ldr	r0, [pc, #20]	@ (800283c <HAL_SPI_MspInit+0x84>)
 8002828:	f001 ffd0 	bl	80047cc <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 800282c:	bf00      	nop
 800282e:	3728      	adds	r7, #40	@ 0x28
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40003800 	.word	0x40003800
 8002838:	40021000 	.word	0x40021000
 800283c:	48000400 	.word	0x48000400

08002840 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a1c      	ldr	r2, [pc, #112]	@ (80028c0 <HAL_TIM_PWM_MspInit+0x80>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d10c      	bne.n	800286c <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002852:	4b1c      	ldr	r3, [pc, #112]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x84>)
 8002854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002856:	4a1b      	ldr	r2, [pc, #108]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x84>)
 8002858:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800285c:	6613      	str	r3, [r2, #96]	@ 0x60
 800285e:	4b19      	ldr	r3, [pc, #100]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x84>)
 8002860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002862:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 800286a:	e022      	b.n	80028b2 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM2)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002874:	d10c      	bne.n	8002890 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002876:	4b13      	ldr	r3, [pc, #76]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x84>)
 8002878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287a:	4a12      	ldr	r2, [pc, #72]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x84>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6593      	str	r3, [r2, #88]	@ 0x58
 8002882:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x84>)
 8002884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	693b      	ldr	r3, [r7, #16]
}
 800288e:	e010      	b.n	80028b2 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a0c      	ldr	r2, [pc, #48]	@ (80028c8 <HAL_TIM_PWM_MspInit+0x88>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d10b      	bne.n	80028b2 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800289a:	4b0a      	ldr	r3, [pc, #40]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x84>)
 800289c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800289e:	4a09      	ldr	r2, [pc, #36]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x84>)
 80028a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80028a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80028a6:	4b07      	ldr	r3, [pc, #28]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x84>)
 80028a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
}
 80028b2:	bf00      	nop
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40012c00 	.word	0x40012c00
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40013400 	.word	0x40013400

080028cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08a      	sub	sp, #40	@ 0x28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d4:	f107 0314 	add.w	r3, r7, #20
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a35      	ldr	r2, [pc, #212]	@ (80029c0 <HAL_TIM_MspPostInit+0xf4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d11e      	bne.n	800292c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ee:	4b35      	ldr	r3, [pc, #212]	@ (80029c4 <HAL_TIM_MspPostInit+0xf8>)
 80028f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f2:	4a34      	ldr	r2, [pc, #208]	@ (80029c4 <HAL_TIM_MspPostInit+0xf8>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028fa:	4b32      	ldr	r3, [pc, #200]	@ (80029c4 <HAL_TIM_MspPostInit+0xf8>)
 80028fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM2_Pin|PWM1_Pin;
 8002906:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800290a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290c:	2302      	movs	r3, #2
 800290e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002914:	2300      	movs	r3, #0
 8002916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002918:	2306      	movs	r3, #6
 800291a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	4619      	mov	r1, r3
 8002922:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002926:	f001 ff51 	bl	80047cc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800292a:	e044      	b.n	80029b6 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002934:	d11d      	bne.n	8002972 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002936:	4b23      	ldr	r3, [pc, #140]	@ (80029c4 <HAL_TIM_MspPostInit+0xf8>)
 8002938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293a:	4a22      	ldr	r2, [pc, #136]	@ (80029c4 <HAL_TIM_MspPostInit+0xf8>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002942:	4b20      	ldr	r3, [pc, #128]	@ (80029c4 <HAL_TIM_MspPostInit+0xf8>)
 8002944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RIGHT_STEP_Pin|LEFT_STEP_Pin;
 800294e:	2322      	movs	r3, #34	@ 0x22
 8002950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002952:	2302      	movs	r3, #2
 8002954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002956:	2300      	movs	r3, #0
 8002958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295a:	2300      	movs	r3, #0
 800295c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800295e:	2301      	movs	r3, #1
 8002960:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002962:	f107 0314 	add.w	r3, r7, #20
 8002966:	4619      	mov	r1, r3
 8002968:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800296c:	f001 ff2e 	bl	80047cc <HAL_GPIO_Init>
}
 8002970:	e021      	b.n	80029b6 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM8)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a14      	ldr	r2, [pc, #80]	@ (80029c8 <HAL_TIM_MspPostInit+0xfc>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d11c      	bne.n	80029b6 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800297c:	4b11      	ldr	r3, [pc, #68]	@ (80029c4 <HAL_TIM_MspPostInit+0xf8>)
 800297e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002980:	4a10      	ldr	r2, [pc, #64]	@ (80029c4 <HAL_TIM_MspPostInit+0xf8>)
 8002982:	f043 0304 	orr.w	r3, r3, #4
 8002986:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002988:	4b0e      	ldr	r3, [pc, #56]	@ (80029c4 <HAL_TIM_MspPostInit+0xf8>)
 800298a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM6_Pin|PWM5_Pin|PWM4_Pin|PWM3_Pin;
 8002994:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299a:	2302      	movs	r3, #2
 800299c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a2:	2300      	movs	r3, #0
 80029a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80029a6:	2304      	movs	r3, #4
 80029a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029aa:	f107 0314 	add.w	r3, r7, #20
 80029ae:	4619      	mov	r1, r3
 80029b0:	4806      	ldr	r0, [pc, #24]	@ (80029cc <HAL_TIM_MspPostInit+0x100>)
 80029b2:	f001 ff0b 	bl	80047cc <HAL_GPIO_Init>
}
 80029b6:	bf00      	nop
 80029b8:	3728      	adds	r7, #40	@ 0x28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40012c00 	.word	0x40012c00
 80029c4:	40021000 	.word	0x40021000
 80029c8:	40013400 	.word	0x40013400
 80029cc:	48000800 	.word	0x48000800

080029d0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b0a0      	sub	sp, #128	@ 0x80
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029e8:	f107 031c 	add.w	r3, r7, #28
 80029ec:	2250      	movs	r2, #80	@ 0x50
 80029ee:	2100      	movs	r1, #0
 80029f0:	4618      	mov	r0, r3
 80029f2:	f00b fb12 	bl	800e01a <memset>
  if(huart->Instance==USART1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a3d      	ldr	r2, [pc, #244]	@ (8002af0 <HAL_UART_MspInit+0x120>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d136      	bne.n	8002a6e <HAL_UART_MspInit+0x9e>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a00:	2301      	movs	r3, #1
 8002a02:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a04:	2300      	movs	r3, #0
 8002a06:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a08:	f107 031c 	add.w	r3, r7, #28
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f004 fb7d 	bl	800710c <HAL_RCCEx_PeriphCLKConfig>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a18:	f7ff fb1a 	bl	8002050 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a1c:	4b35      	ldr	r3, [pc, #212]	@ (8002af4 <HAL_UART_MspInit+0x124>)
 8002a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a20:	4a34      	ldr	r2, [pc, #208]	@ (8002af4 <HAL_UART_MspInit+0x124>)
 8002a22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a26:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a28:	4b32      	ldr	r3, [pc, #200]	@ (8002af4 <HAL_UART_MspInit+0x124>)
 8002a2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a30:	61bb      	str	r3, [r7, #24]
 8002a32:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a34:	4b2f      	ldr	r3, [pc, #188]	@ (8002af4 <HAL_UART_MspInit+0x124>)
 8002a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a38:	4a2e      	ldr	r2, [pc, #184]	@ (8002af4 <HAL_UART_MspInit+0x124>)
 8002a3a:	f043 0304 	orr.w	r3, r3, #4
 8002a3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a40:	4b2c      	ldr	r3, [pc, #176]	@ (8002af4 <HAL_UART_MspInit+0x124>)
 8002a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STEPPER_TX_Pin|STEPPER_RX_Pin;
 8002a4c:	2330      	movs	r3, #48	@ 0x30
 8002a4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a50:	2302      	movs	r3, #2
 8002a52:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a5c:	2307      	movs	r3, #7
 8002a5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a60:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002a64:	4619      	mov	r1, r3
 8002a66:	4824      	ldr	r0, [pc, #144]	@ (8002af8 <HAL_UART_MspInit+0x128>)
 8002a68:	f001 feb0 	bl	80047cc <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a6c:	e03b      	b.n	8002ae6 <HAL_UART_MspInit+0x116>
  else if(huart->Instance==USART2)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a22      	ldr	r2, [pc, #136]	@ (8002afc <HAL_UART_MspInit+0x12c>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d136      	bne.n	8002ae6 <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a80:	f107 031c 	add.w	r3, r7, #28
 8002a84:	4618      	mov	r0, r3
 8002a86:	f004 fb41 	bl	800710c <HAL_RCCEx_PeriphCLKConfig>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8002a90:	f7ff fade 	bl	8002050 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a94:	4b17      	ldr	r3, [pc, #92]	@ (8002af4 <HAL_UART_MspInit+0x124>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a98:	4a16      	ldr	r2, [pc, #88]	@ (8002af4 <HAL_UART_MspInit+0x124>)
 8002a9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002aa0:	4b14      	ldr	r3, [pc, #80]	@ (8002af4 <HAL_UART_MspInit+0x124>)
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aac:	4b11      	ldr	r3, [pc, #68]	@ (8002af4 <HAL_UART_MspInit+0x124>)
 8002aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ab0:	4a10      	ldr	r2, [pc, #64]	@ (8002af4 <HAL_UART_MspInit+0x124>)
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8002af4 <HAL_UART_MspInit+0x124>)
 8002aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 8002ac4:	230c      	movs	r3, #12
 8002ac6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ad4:	2307      	movs	r3, #7
 8002ad6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002adc:	4619      	mov	r1, r3
 8002ade:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ae2:	f001 fe73 	bl	80047cc <HAL_GPIO_Init>
}
 8002ae6:	bf00      	nop
 8002ae8:	3780      	adds	r7, #128	@ 0x80
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40013800 	.word	0x40013800
 8002af4:	40021000 	.word	0x40021000
 8002af8:	48000800 	.word	0x48000800
 8002afc:	40004400 	.word	0x40004400

08002b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b04:	bf00      	nop
 8002b06:	e7fd      	b.n	8002b04 <NMI_Handler+0x4>

08002b08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b0c:	bf00      	nop
 8002b0e:	e7fd      	b.n	8002b0c <HardFault_Handler+0x4>

08002b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b14:	bf00      	nop
 8002b16:	e7fd      	b.n	8002b14 <MemManage_Handler+0x4>

08002b18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b1c:	bf00      	nop
 8002b1e:	e7fd      	b.n	8002b1c <BusFault_Handler+0x4>

08002b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b24:	bf00      	nop
 8002b26:	e7fd      	b.n	8002b24 <UsageFault_Handler+0x4>

08002b28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b36:	b480      	push	{r7}
 8002b38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b56:	f000 fb7d 	bl	8003254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002b64:	4802      	ldr	r0, [pc, #8]	@ (8002b70 <USB_LP_IRQHandler+0x10>)
 8002b66:	f002 f8ed 	bl	8004d44 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20001c40 	.word	0x20001c40

08002b74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return 1;
 8002b78:	2301      	movs	r3, #1
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <_kill>:

int _kill(int pid, int sig)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b8e:	f00b fa97 	bl	800e0c0 <__errno>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2216      	movs	r2, #22
 8002b96:	601a      	str	r2, [r3, #0]
  return -1;
 8002b98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <_exit>:

void _exit (int status)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bac:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff ffe7 	bl	8002b84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bb6:	bf00      	nop
 8002bb8:	e7fd      	b.n	8002bb6 <_exit+0x12>

08002bba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b086      	sub	sp, #24
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	e00a      	b.n	8002be2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bcc:	f3af 8000 	nop.w
 8002bd0:	4601      	mov	r1, r0
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	60ba      	str	r2, [r7, #8]
 8002bd8:	b2ca      	uxtb	r2, r1
 8002bda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	3301      	adds	r3, #1
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	dbf0      	blt.n	8002bcc <_read+0x12>
  }

  return len;
 8002bea:	687b      	ldr	r3, [r7, #4]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	e009      	b.n	8002c1a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	60ba      	str	r2, [r7, #8]
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	3301      	adds	r3, #1
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	dbf1      	blt.n	8002c06 <_write+0x12>
  }
  return len;
 8002c22:	687b      	ldr	r3, [r7, #4]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <_close>:

int _close(int file)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c54:	605a      	str	r2, [r3, #4]
  return 0;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <_isatty>:

int _isatty(int file)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c6c:	2301      	movs	r3, #1
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b085      	sub	sp, #20
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c9c:	4a14      	ldr	r2, [pc, #80]	@ (8002cf0 <_sbrk+0x5c>)
 8002c9e:	4b15      	ldr	r3, [pc, #84]	@ (8002cf4 <_sbrk+0x60>)
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ca8:	4b13      	ldr	r3, [pc, #76]	@ (8002cf8 <_sbrk+0x64>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d102      	bne.n	8002cb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cb0:	4b11      	ldr	r3, [pc, #68]	@ (8002cf8 <_sbrk+0x64>)
 8002cb2:	4a12      	ldr	r2, [pc, #72]	@ (8002cfc <_sbrk+0x68>)
 8002cb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cb6:	4b10      	ldr	r3, [pc, #64]	@ (8002cf8 <_sbrk+0x64>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d207      	bcs.n	8002cd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cc4:	f00b f9fc 	bl	800e0c0 <__errno>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	220c      	movs	r2, #12
 8002ccc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cce:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd2:	e009      	b.n	8002ce8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cd4:	4b08      	ldr	r3, [pc, #32]	@ (8002cf8 <_sbrk+0x64>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cda:	4b07      	ldr	r3, [pc, #28]	@ (8002cf8 <_sbrk+0x64>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	4a05      	ldr	r2, [pc, #20]	@ (8002cf8 <_sbrk+0x64>)
 8002ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	2001c000 	.word	0x2001c000
 8002cf4:	00000400 	.word	0x00000400
 8002cf8:	20000724 	.word	0x20000724
 8002cfc:	20002288 	.word	0x20002288

08002d00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d04:	4b06      	ldr	r3, [pc, #24]	@ (8002d20 <SystemInit+0x20>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d0a:	4a05      	ldr	r2, [pc, #20]	@ (8002d20 <SystemInit+0x20>)
 8002d0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	e000ed00 	.word	0xe000ed00

08002d24 <tmc2209_new>:
		uint32_t stepTimerChannel,
		uint16_t dirPin,
		GPIO_TypeDef *dirPort,
		UART_HandleTypeDef *uart,
		uint8_t uartAddr
		) {
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b0aa      	sub	sp, #168	@ 0xa8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	607b      	str	r3, [r7, #4]
 8002d2e:	460b      	mov	r3, r1
 8002d30:	72fb      	strb	r3, [r7, #11]
 8002d32:	4613      	mov	r3, r2
 8002d34:	72bb      	strb	r3, [r7, #10]
	tmc2209_t newMotor = {
 8002d36:	f107 0310 	add.w	r3, r7, #16
 8002d3a:	228c      	movs	r2, #140	@ 0x8c
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f00b f96b 	bl	800e01a <memset>
 8002d44:	7afb      	ldrb	r3, [r7, #11]
 8002d46:	743b      	strb	r3, [r7, #16]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d52:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 8002d56:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8002d58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d62:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d64:	f897 30c0 	ldrb.w	r3, [r7, #192]	@ 0xc0
 8002d68:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	/*
	 * Set initial register states
	 */

	//HAL_GPIO_WritePin(stepPort, stepPin, 0);
	HAL_GPIO_WritePin(dirPort, dirPin, 0);
 8002d6c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 8002d70:	2200      	movs	r2, #0
 8002d72:	4619      	mov	r1, r3
 8002d74:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8002d78:	f001 fec2 	bl	8004b00 <HAL_GPIO_WritePin>

	/*
	 * Configure driver using UART
	 */
	// General registers
	newMotor.gconf =	TMC2209_internal_rsense |
 8002d7c:	2323      	movs	r3, #35	@ 0x23
 8002d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
//						TMC2209_multistep_filt |		// Filtering > 750Hz
//						TMC2209_en_SpreadCycle | 	// 0: StealthChop 1: SpreadCycle
						TMC2209_index_step; 		// INDEX output shows pulse each step

	// Turn on shaft bit to invert motor direction
	if(shaft == TMC2209_INVERSE_MOTOR_DIR) {
 8002d80:	7abb      	ldrb	r3, [r7, #10]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d103      	bne.n	8002d8e <tmc2209_new+0x6a>
		newMotor.gconf |= TMC2209_shaft;
 8002d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d88:	f043 0308 	orr.w	r3, r3, #8
 8002d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	}

	tmc2209_set_GCONF(&newMotor);
 8002d8e:	f107 0310 	add.w	r3, r7, #16
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 f885 	bl	8002ea2 <tmc2209_set_GCONF>

	// CHOPCONF
	newMotor.chopconf = 	TMC2209_CHOPCONF_MRES_32 |	// Micro-step resolution
 8002d98:	4b26      	ldr	r3, [pc, #152]	@ (8002e34 <tmc2209_new+0x110>)
 8002d9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
							TMC2209_CHOPCONF_vsense |	// 0: lowsense resistor voltage 1: high sense resistor voltage
							TMC2209_CHOPCONF_HEND_n1 |	// Hysteresis end
							TMC2209_CHOPCONF_HSTRT_2 |	// Hysteresis_start
							TMC2209_CHOPCONF_TOFF_10;	// Off time

	tmc2209_set_CHOPCONF(&newMotor);
 8002d9e:	f107 0310 	add.w	r3, r7, #16
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 f918 	bl	8002fd8 <tmc2209_set_CHOPCONF>


	//	st.rms_current(mA, hold_multiplier);

	// Currents
	uint32_t newHoldCurrent = 0; // 0: Free wheel/passive breaking
 8002da8:	2300      	movs	r3, #0
 8002daa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	uint32_t newRunCurrent = 16; // 0=1/32 … 31=32/32 ratio of max current
 8002dae:	2310      	movs	r3, #16
 8002db0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	uint32_t newHoldDelay = 0; // 0: instant power down
 8002db4:	2300      	movs	r3, #0
 8002db6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	newMotor.ihold_irun =	newHoldCurrent |
							(newRunCurrent << 8) |
 8002dba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002dbe:	021a      	lsls	r2, r3, #8
	newMotor.ihold_irun =	newHoldCurrent |
 8002dc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002dc4:	431a      	orrs	r2, r3
							(newHoldDelay << 16);
 8002dc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002dca:	041b      	lsls	r3, r3, #16
							(newRunCurrent << 8) |
 8002dcc:	4313      	orrs	r3, r2
	newMotor.ihold_irun =	newHoldCurrent |
 8002dce:	65fb      	str	r3, [r7, #92]	@ 0x5c
	tmc2209_set_IHOLD_IRUN(&newMotor);
 8002dd0:	f107 0310 	add.w	r3, r7, #16
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 f893 	bl	8002f00 <tmc2209_set_IHOLD_IRUN>

	// TPOWERDOWN
	newMotor.tpowerdown = 128;	// ~2s until driver lowers to hold current
 8002dda:	2380      	movs	r3, #128	@ 0x80
 8002ddc:	663b      	str	r3, [r7, #96]	@ 0x60
	tmc2209_set_TPOWERDOWN(&newMotor);
 8002dde:	f107 0310 	add.w	r3, r7, #16
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 f8a4 	bl	8002f30 <tmc2209_set_TPOWERDOWN>

	// Values mostly taken from the Marlin default
	newMotor.pwmconf = 	(((uint32_t) 12 << TMC2209_PWMCONF_PWM_LIM_shift) & TMC2209_PWMCONF_PWM_LIM) |
 8002de8:	4b13      	ldr	r3, [pc, #76]	@ (8002e38 <tmc2209_new+0x114>)
 8002dea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
						TMC2209_PWMCONF_pwm_autoscale |
						TMC2209_PWMCONF_freewheel_freewheeling |
						TMC2209_PWMCONF_pwm_freq_2_1024 |
						(((uint32_t) 14 << TMC2209_PWMCONF_PWM_GRAD_shift) & TMC2209_PWMCONF_PWM_GRAD) |
						(((uint32_t) 36 << TMC2209_PWMCONF_PWM_OFS_shift) & TMC2209_PWMCONF_PWM_OFS)  ;
	tmc2209_set_PWMCONF(&newMotor);
 8002dee:	f107 0310 	add.w	r3, r7, #16
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 f908 	bl	8003008 <tmc2209_set_PWMCONF>


	newMotor.tpwmthrs = 0x00000000;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	66bb      	str	r3, [r7, #104]	@ 0x68
	tmc2209_set_TPWMTHRS(&newMotor);
 8002dfc:	f107 0310 	add.w	r3, r7, #16
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 f8ad 	bl	8002f60 <tmc2209_set_TPWMTHRS>

	tmc2209_set_mode(&newMotor);
 8002e06:	f107 0310 	add.w	r3, r7, #16
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 f962 	bl	80030d4 <tmc2209_set_mode>

	// Reset statistics
	tmc2209_reset_GSTAT(&newMotor);
 8002e10:	f107 0310 	add.w	r3, r7, #16
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 f85c 	bl	8002ed2 <tmc2209_reset_GSTAT>


//	HAL_Delay(100);
//	tmc2209_on(&newMotor);

	return newMotor;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f107 0310 	add.w	r3, r7, #16
 8002e22:	228c      	movs	r2, #140	@ 0x8c
 8002e24:	4619      	mov	r1, r3
 8002e26:	f00b f978 	bl	800e11a <memcpy>
}
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	37a8      	adds	r7, #168	@ 0xa8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	1303811a 	.word	0x1303811a
 8002e38:	c81c0e24 	.word	0xc81c0e24

08002e3c <tmc2209_write>:


/**
 *
 */
void tmc2209_write(tmc2209_t *tmc, tmc2209_write_t writeDatagram) {
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	1d3b      	adds	r3, r7, #4
 8002e46:	e883 0006 	stmia.w	r3, {r1, r2}

	uint8_t msg[TMC2209_WRITE_DATAGRAM_LENGTH];

	msg[0] = TMC2209_SYNC_BYTE;
 8002e4a:	2305      	movs	r3, #5
 8002e4c:	743b      	strb	r3, [r7, #16]
	msg[1] = writeDatagram.slaveAddress;
 8002e4e:	793b      	ldrb	r3, [r7, #4]
 8002e50:	747b      	strb	r3, [r7, #17]
	msg[2] = writeDatagram.registerAddress | TMC2209_RW_WRITE;
 8002e52:	797b      	ldrb	r3, [r7, #5]
 8002e54:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	74bb      	strb	r3, [r7, #18]
	msg[3] = (uint8_t)((writeDatagram.data >> 24) & 0x000000ff);
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	0e1b      	lsrs	r3, r3, #24
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	74fb      	strb	r3, [r7, #19]
	msg[4] = (uint8_t)((writeDatagram.data >> 16) & 0x000000ff);
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	0c1b      	lsrs	r3, r3, #16
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	753b      	strb	r3, [r7, #20]
	msg[5] = (uint8_t)((writeDatagram.data >> 8) & 0x000000ff);
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	0a1b      	lsrs	r3, r3, #8
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	757b      	strb	r3, [r7, #21]
	msg[6] = (uint8_t)(writeDatagram.data & 0x000000ff);
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	75bb      	strb	r3, [r7, #22]
	msg[7] = 0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	75fb      	strb	r3, [r7, #23]
	tmc2209_calculate_CRC(msg, TMC2209_WRITE_DATAGRAM_LENGTH);
 8002e7e:	f107 0310 	add.w	r3, r7, #16
 8002e82:	2108      	movs	r1, #8
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 f8d8 	bl	800303a <tmc2209_calculate_CRC>

	HAL_UART_Transmit(tmc->uart, msg, TMC2209_WRITE_DATAGRAM_LENGTH, TMC2209_UART_TIMEOUT);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002e8e:	f107 0110 	add.w	r1, r7, #16
 8002e92:	2364      	movs	r3, #100	@ 0x64
 8002e94:	2208      	movs	r2, #8
 8002e96:	f005 fad1 	bl	800843c <HAL_UART_Transmit>
}
 8002e9a:	bf00      	nop
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <tmc2209_set_GCONF>:

/**
 *	@function tmc2209_setGCONF
 *	@brief programs CGONF register
 */
void tmc2209_set_GCONF(tmc2209_t *tmc) {
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b084      	sub	sp, #16
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
	tmc2209_write_t msg = {
		.slaveAddress = tmc->uartAddr,
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	tmc2209_write_t msg = {
 8002eb0:	723b      	strb	r3, [r7, #8]
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	727b      	strb	r3, [r7, #9]
		.registerAddress = TMC2209_GCONF_ADDR,
		.data = tmc->gconf
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
	tmc2209_write_t msg = {
 8002eba:	60fb      	str	r3, [r7, #12]
  	};
	tmc2209_write(tmc, msg);
 8002ebc:	f107 0308 	add.w	r3, r7, #8
 8002ec0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff ffb9 	bl	8002e3c <tmc2209_write>
}
 8002eca:	bf00      	nop
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <tmc2209_reset_GSTAT>:

/**
 *	@function tmc2209_reset GSTAT
 *	@brief Reset the status registers
 */
void tmc2209_reset_GSTAT(tmc2209_t *tmc){
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
	tmc2209_write_t msg = {
			.slaveAddress = tmc->uartAddr,
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	tmc2209_write_t msg = {
 8002ee0:	723b      	strb	r3, [r7, #8]
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	727b      	strb	r3, [r7, #9]
 8002ee6:	2307      	movs	r3, #7
 8002ee8:	60fb      	str	r3, [r7, #12]
			.registerAddress = TMC2209_GSTAT_ADDR,
			.data = TMC2209_GSTAT_RESET
	  	};
		tmc2209_write(tmc, msg);
 8002eea:	f107 0308 	add.w	r3, r7, #8
 8002eee:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff ffa2 	bl	8002e3c <tmc2209_write>
}
 8002ef8:	bf00      	nop
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <tmc2209_set_IHOLD_IRUN>:

/**
 *	@function tmc2209_setIHOLD_IRUN
 *	@brief Programs holding current, run current, and hold delay time
 */
void tmc2209_set_IHOLD_IRUN(tmc2209_t *tmc) {
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
	tmc2209_write_t msg = {
		.slaveAddress = tmc->uartAddr,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	tmc2209_write_t msg = {
 8002f0e:	723b      	strb	r3, [r7, #8]
 8002f10:	2310      	movs	r3, #16
 8002f12:	727b      	strb	r3, [r7, #9]
		.registerAddress = TMC2209_IHOLD_IRUN_ADDR,
		.data = tmc->ihold_irun
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
	tmc2209_write_t msg = {
 8002f18:	60fb      	str	r3, [r7, #12]
  	};
	tmc2209_write(tmc, msg);
 8002f1a:	f107 0308 	add.w	r3, r7, #8
 8002f1e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7ff ff8a 	bl	8002e3c <tmc2209_write>
}
 8002f28:	bf00      	nop
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <tmc2209_set_TPOWERDOWN>:

/**
 *	@function tmc2209_
 *	@brief
 */
void tmc2209_set_TPOWERDOWN(tmc2209_t *tmc){
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
	tmc2209_write_t msg = {
		.slaveAddress = tmc->uartAddr,
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	tmc2209_write_t msg = {
 8002f3e:	723b      	strb	r3, [r7, #8]
 8002f40:	2311      	movs	r3, #17
 8002f42:	727b      	strb	r3, [r7, #9]
		.registerAddress = TMC2209_TPOWERDOWN_ADDR,
		.data = tmc->tpowerdown
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
	tmc2209_write_t msg = {
 8002f48:	60fb      	str	r3, [r7, #12]
  	};
	tmc2209_write(tmc, msg);
 8002f4a:	f107 0308 	add.w	r3, r7, #8
 8002f4e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff ff72 	bl	8002e3c <tmc2209_write>
}
 8002f58:	bf00      	nop
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <tmc2209_set_TPWMTHRS>:

/**
 *	@function tmc2209_
 *	@brief
 */
void tmc2209_set_TPWMTHRS(tmc2209_t *tmc){
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
	tmc2209_write_t msg = {
		.slaveAddress = tmc->uartAddr,
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	tmc2209_write_t msg = {
 8002f6e:	723b      	strb	r3, [r7, #8]
 8002f70:	2313      	movs	r3, #19
 8002f72:	727b      	strb	r3, [r7, #9]
		.registerAddress = TMC2209_TPWMTHRS_ADDR,
		.data = tmc->tpwmthrs
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
	tmc2209_write_t msg = {
 8002f78:	60fb      	str	r3, [r7, #12]
  	};
	tmc2209_write(tmc, msg);
 8002f7a:	f107 0308 	add.w	r3, r7, #8
 8002f7e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7ff ff5a 	bl	8002e3c <tmc2209_write>
}
 8002f88:	bf00      	nop
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <tmc2209_set_VACTUAL>:

/**
 *	@function tmc2209_
 *	@brief
 */
void tmc2209_set_VACTUAL(tmc2209_t *tmc){
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
	// Max sure speed isn't above the maximum allowable
	if(tmc->vactual >= TMC2209_VACTUAL_MAX_P) {
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f9c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	db03      	blt.n	8002fac <tmc2209_set_VACTUAL+0x1c>
		tmc->vactual = TMC2209_VACTUAL_MAX_P;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8002faa:	65da      	str	r2, [r3, #92]	@ 0x5c
	}
	tmc2209_write_t msg = {
		.slaveAddress = tmc->uartAddr,
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	tmc2209_write_t msg = {
 8002fb2:	723b      	strb	r3, [r7, #8]
 8002fb4:	2322      	movs	r3, #34	@ 0x22
 8002fb6:	727b      	strb	r3, [r7, #9]
		.registerAddress = TMC2209_VACTUAL_ADDR,
		.data = (tmc->vactual & TMC2209_VACTUAL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fbc:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
	tmc2209_write_t msg = {
 8002fc0:	60fb      	str	r3, [r7, #12]
  	};
	tmc2209_write(tmc, msg);
 8002fc2:	f107 0308 	add.w	r3, r7, #8
 8002fc6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7ff ff36 	bl	8002e3c <tmc2209_write>
}
 8002fd0:	bf00      	nop
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <tmc2209_set_CHOPCONF>:

/**
 *	@function tmc2209_
 *	@brief
 */
void tmc2209_set_CHOPCONF(tmc2209_t *tmc){
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
	tmc2209_write_t msg = {
		.slaveAddress = tmc->uartAddr,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	tmc2209_write_t msg = {
 8002fe6:	723b      	strb	r3, [r7, #8]
 8002fe8:	236c      	movs	r3, #108	@ 0x6c
 8002fea:	727b      	strb	r3, [r7, #9]
		.registerAddress = TMC2209_CHOPCONF_ADDR,
		.data = tmc->chopconf
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
	tmc2209_write_t msg = {
 8002ff0:	60fb      	str	r3, [r7, #12]
  	};
	tmc2209_write(tmc, msg);
 8002ff2:	f107 0308 	add.w	r3, r7, #8
 8002ff6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff ff1e 	bl	8002e3c <tmc2209_write>
}
 8003000:	bf00      	nop
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <tmc2209_set_PWMCONF>:

/**
 *	@function tmc2209_
 *	@brief
 */
void tmc2209_set_PWMCONF(tmc2209_t *tmc){
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
	tmc2209_write_t msg = {
		.slaveAddress = tmc->uartAddr,
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	tmc2209_write_t msg = {
 8003016:	723b      	strb	r3, [r7, #8]
 8003018:	2370      	movs	r3, #112	@ 0x70
 800301a:	727b      	strb	r3, [r7, #9]
		.registerAddress = TMC2209_PWMCONF_ADDR,
		.data = tmc->pwmconf
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
	tmc2209_write_t msg = {
 8003022:	60fb      	str	r3, [r7, #12]
  	};
	tmc2209_write(tmc, msg);
 8003024:	f107 0308 	add.w	r3, r7, #8
 8003028:	e893 0006 	ldmia.w	r3, {r1, r2}
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7ff ff05 	bl	8002e3c <tmc2209_write>
}
 8003032:	bf00      	nop
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <tmc2209_calculate_CRC>:


/**
 *	Calculate CRC
 */
void tmc2209_calculate_CRC(uint8_t* datagram, uint8_t datagramLength){
 800303a:	b480      	push	{r7}
 800303c:	b087      	sub	sp, #28
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	460b      	mov	r3, r1
 8003044:	70fb      	strb	r3, [r7, #3]
	// Taken from TMC2209 datasheet
	int i,j;
	uint8_t* crc = datagram + (datagramLength-1); // CRC located in last byte of message
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	3b01      	subs	r3, #1
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	60bb      	str	r3, [r7, #8]
	uint8_t currentByte;
	*crc = 0;
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]
	for (i=0; i<(datagramLength-1); i++) { // Execute for all bytes of a message
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	e02f      	b.n	80030bc <tmc2209_calculate_CRC+0x82>
		currentByte = datagram[i]; // Retrieve a byte to be sent from Array
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	4413      	add	r3, r2
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	73fb      	strb	r3, [r7, #15]
		for (j=0; j<8; j++) {
 8003066:	2300      	movs	r3, #0
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	e021      	b.n	80030b0 <tmc2209_calculate_CRC+0x76>
			if ((*crc >> 7) ^ (currentByte&0x01)) // update CRC based result of XOR operation
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	09db      	lsrs	r3, r3, #7
 8003072:	b2db      	uxtb	r3, r3
 8003074:	461a      	mov	r2, r3
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	429a      	cmp	r2, r3
 800307e:	d00b      	beq.n	8003098 <tmc2209_calculate_CRC+0x5e>
			{
				*crc = (*crc << 1) ^ 0x07;
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	b25b      	sxtb	r3, r3
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	b25b      	sxtb	r3, r3
 800308a:	f083 0307 	eor.w	r3, r3, #7
 800308e:	b25b      	sxtb	r3, r3
 8003090:	b2da      	uxtb	r2, r3
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	701a      	strb	r2, [r3, #0]
 8003096:	e005      	b.n	80030a4 <tmc2209_calculate_CRC+0x6a>
			}
			else
			{
				*crc = (*crc << 1);
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	701a      	strb	r2, [r3, #0]
			}
			currentByte = currentByte >> 1;
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	085b      	lsrs	r3, r3, #1
 80030a8:	73fb      	strb	r3, [r7, #15]
		for (j=0; j<8; j++) {
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	3301      	adds	r3, #1
 80030ae:	613b      	str	r3, [r7, #16]
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	2b07      	cmp	r3, #7
 80030b4:	ddda      	ble.n	800306c <tmc2209_calculate_CRC+0x32>
	for (i=0; i<(datagramLength-1); i++) { // Execute for all bytes of a message
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	3301      	adds	r3, #1
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	78fb      	ldrb	r3, [r7, #3]
 80030be:	3b01      	subs	r3, #1
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	dbca      	blt.n	800305c <tmc2209_calculate_CRC+0x22>
		} // for CRC bit
	} // for message byte
}
 80030c6:	bf00      	nop
 80030c8:	bf00      	nop
 80030ca:	371c      	adds	r7, #28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <tmc2209_set_mode>:
}

/**
 *
 */
void tmc2209_set_mode(tmc2209_t *tmc) {
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
	// Do whatever is necessary to set the mode of the device
	if(tmc->mode == TMC2209_FULL_GPIO_CONTROL) {
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d036      	beq.n	8003152 <tmc2209_set_mode+0x7e>

		//ToDo: Is anything else required here?



	} else if (tmc->mode == TMC2209_VELOCITY_CONTROL) {
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d117      	bne.n	800311c <tmc2209_set_mode+0x48>
		// Ensure UART is set up correctly
		tmc->gconf |= (TMC2209_pdn_disable | TMC2209_mstep_reg_select);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f0:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	62da      	str	r2, [r3, #44]	@ 0x2c
		tmc2209_set_GCONF(tmc);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff fed2 	bl	8002ea2 <tmc2209_set_GCONF>

		// Set vsense control related variables
		tmc->vactual_MAX = TMC2209_VACTUAL_MAX_P;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8003104:	60da      	str	r2, [r3, #12]
		tmc->acceleration = 1000;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800310c:	605a      	str	r2, [r3, #4]
		tmc->vactual = 0x00000000;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	65da      	str	r2, [r3, #92]	@ 0x5c
		tmc2209_set_VACTUAL(tmc);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7ff ff3b 	bl	8002f90 <tmc2209_set_VACTUAL>

	} else {
		// Invalid mode
	}

}
 800311a:	e01a      	b.n	8003152 <tmc2209_set_mode+0x7e>
	} else if (tmc->mode == TMC2209_UART_STEP_DIR_CONTROL) {
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b02      	cmp	r3, #2
 8003122:	d109      	bne.n	8003138 <tmc2209_set_mode+0x64>
		tmc->gconf |= TMC2209_pdn_disable | TMC2209_mstep_reg_select;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003128:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	62da      	str	r2, [r3, #44]	@ 0x2c
		tmc2209_set_GCONF(tmc);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff feb6 	bl	8002ea2 <tmc2209_set_GCONF>
}
 8003136:	e00c      	b.n	8003152 <tmc2209_set_mode+0x7e>
	} else if (tmc->mode == TMC2209_FULL_UART_STEPPING_CONTROL) {
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b03      	cmp	r3, #3
 800313e:	d108      	bne.n	8003152 <tmc2209_set_mode+0x7e>
		tmc->gconf |= TMC2209_pdn_disable | TMC2209_mstep_reg_select;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003144:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	62da      	str	r2, [r3, #44]	@ 0x2c
		tmc2209_set_GCONF(tmc);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff fea8 	bl	8002ea2 <tmc2209_set_GCONF>
}
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800315c:	480d      	ldr	r0, [pc, #52]	@ (8003194 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800315e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003160:	480d      	ldr	r0, [pc, #52]	@ (8003198 <LoopForever+0x6>)
  ldr r1, =_edata
 8003162:	490e      	ldr	r1, [pc, #56]	@ (800319c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003164:	4a0e      	ldr	r2, [pc, #56]	@ (80031a0 <LoopForever+0xe>)
  movs r3, #0
 8003166:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003168:	e002      	b.n	8003170 <LoopCopyDataInit>

0800316a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800316a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800316c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800316e:	3304      	adds	r3, #4

08003170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003174:	d3f9      	bcc.n	800316a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003176:	4a0b      	ldr	r2, [pc, #44]	@ (80031a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003178:	4c0b      	ldr	r4, [pc, #44]	@ (80031a8 <LoopForever+0x16>)
  movs r3, #0
 800317a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800317c:	e001      	b.n	8003182 <LoopFillZerobss>

0800317e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800317e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003180:	3204      	adds	r2, #4

08003182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003184:	d3fb      	bcc.n	800317e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003186:	f7ff fdbb 	bl	8002d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800318a:	f00a ff9f 	bl	800e0cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800318e:	f7fe f81b 	bl	80011c8 <main>

08003192 <LoopForever>:

LoopForever:
    b LoopForever
 8003192:	e7fe      	b.n	8003192 <LoopForever>
  ldr   r0, =_estack
 8003194:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8003198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800319c:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 80031a0:	08011d50 	.word	0x08011d50
  ldr r2, =_sbss
 80031a4:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 80031a8:	20002288 	.word	0x20002288

080031ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80031ac:	e7fe      	b.n	80031ac <ADC1_2_IRQHandler>

080031ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031b8:	2003      	movs	r0, #3
 80031ba:	f001 f90b 	bl	80043d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031be:	2000      	movs	r0, #0
 80031c0:	f000 f80e 	bl	80031e0 <HAL_InitTick>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	71fb      	strb	r3, [r7, #7]
 80031ce:	e001      	b.n	80031d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80031d0:	f7ff f9c8 	bl	8002564 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031d4:	79fb      	ldrb	r3, [r7, #7]

}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80031ec:	4b16      	ldr	r3, [pc, #88]	@ (8003248 <HAL_InitTick+0x68>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d022      	beq.n	800323a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80031f4:	4b15      	ldr	r3, [pc, #84]	@ (800324c <HAL_InitTick+0x6c>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4b13      	ldr	r3, [pc, #76]	@ (8003248 <HAL_InitTick+0x68>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003200:	fbb1 f3f3 	udiv	r3, r1, r3
 8003204:	fbb2 f3f3 	udiv	r3, r2, r3
 8003208:	4618      	mov	r0, r3
 800320a:	f001 f916 	bl	800443a <HAL_SYSTICK_Config>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10f      	bne.n	8003234 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	d809      	bhi.n	800322e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800321a:	2200      	movs	r2, #0
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	f04f 30ff 	mov.w	r0, #4294967295
 8003222:	f001 f8e2 	bl	80043ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003226:	4a0a      	ldr	r2, [pc, #40]	@ (8003250 <HAL_InitTick+0x70>)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	e007      	b.n	800323e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	73fb      	strb	r3, [r7, #15]
 8003232:	e004      	b.n	800323e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	73fb      	strb	r3, [r7, #15]
 8003238:	e001      	b.n	800323e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800323e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20000008 	.word	0x20000008
 800324c:	20000000 	.word	0x20000000
 8003250:	20000004 	.word	0x20000004

08003254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003258:	4b05      	ldr	r3, [pc, #20]	@ (8003270 <HAL_IncTick+0x1c>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	4b05      	ldr	r3, [pc, #20]	@ (8003274 <HAL_IncTick+0x20>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4413      	add	r3, r2
 8003262:	4a03      	ldr	r2, [pc, #12]	@ (8003270 <HAL_IncTick+0x1c>)
 8003264:	6013      	str	r3, [r2, #0]
}
 8003266:	bf00      	nop
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	20000728 	.word	0x20000728
 8003274:	20000008 	.word	0x20000008

08003278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  return uwTick;
 800327c:	4b03      	ldr	r3, [pc, #12]	@ (800328c <HAL_GetTick+0x14>)
 800327e:	681b      	ldr	r3, [r3, #0]
}
 8003280:	4618      	mov	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	20000728 	.word	0x20000728

08003290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003298:	f7ff ffee 	bl	8003278 <HAL_GetTick>
 800329c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a8:	d004      	beq.n	80032b4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80032aa:	4b09      	ldr	r3, [pc, #36]	@ (80032d0 <HAL_Delay+0x40>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4413      	add	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032b4:	bf00      	nop
 80032b6:	f7ff ffdf 	bl	8003278 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d8f7      	bhi.n	80032b6 <HAL_Delay+0x26>
  {
  }
}
 80032c6:	bf00      	nop
 80032c8:	bf00      	nop
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	20000008 	.word	0x20000008

080032d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	431a      	orrs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	609a      	str	r2, [r3, #8]
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	609a      	str	r2, [r3, #8]
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	3360      	adds	r3, #96	@ 0x60
 800334e:	461a      	mov	r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	4b08      	ldr	r3, [pc, #32]	@ (8003380 <LL_ADC_SetOffset+0x44>)
 800335e:	4013      	ands	r3, r2
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	4313      	orrs	r3, r2
 800336c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003374:	bf00      	nop
 8003376:	371c      	adds	r7, #28
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	03fff000 	.word	0x03fff000

08003384 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3360      	adds	r3, #96	@ 0x60
 8003392:	461a      	mov	r2, r3
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	3360      	adds	r3, #96	@ 0x60
 80033c0:	461a      	mov	r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	431a      	orrs	r2, r3
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80033da:	bf00      	nop
 80033dc:	371c      	adds	r7, #28
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b087      	sub	sp, #28
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	60f8      	str	r0, [r7, #12]
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	3360      	adds	r3, #96	@ 0x60
 80033f6:	461a      	mov	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	431a      	orrs	r2, r3
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003410:	bf00      	nop
 8003412:	371c      	adds	r7, #28
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	3360      	adds	r3, #96	@ 0x60
 800342c:	461a      	mov	r2, r3
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	431a      	orrs	r2, r3
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003446:	bf00      	nop
 8003448:	371c      	adds	r7, #28
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	431a      	orrs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	615a      	str	r2, [r3, #20]
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003478:	b480      	push	{r7}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	3330      	adds	r3, #48	@ 0x30
 8003488:	461a      	mov	r2, r3
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	0a1b      	lsrs	r3, r3, #8
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	f003 030c 	and.w	r3, r3, #12
 8003494:	4413      	add	r3, r2
 8003496:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f003 031f 	and.w	r3, r3, #31
 80034a2:	211f      	movs	r1, #31
 80034a4:	fa01 f303 	lsl.w	r3, r1, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	401a      	ands	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	0e9b      	lsrs	r3, r3, #26
 80034b0:	f003 011f 	and.w	r1, r3, #31
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f003 031f 	and.w	r3, r3, #31
 80034ba:	fa01 f303 	lsl.w	r3, r1, r3
 80034be:	431a      	orrs	r2, r3
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80034c4:	bf00      	nop
 80034c6:	371c      	adds	r7, #28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b087      	sub	sp, #28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	3314      	adds	r3, #20
 80034e0:	461a      	mov	r2, r3
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	0e5b      	lsrs	r3, r3, #25
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	4413      	add	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	0d1b      	lsrs	r3, r3, #20
 80034f8:	f003 031f 	and.w	r3, r3, #31
 80034fc:	2107      	movs	r1, #7
 80034fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003502:	43db      	mvns	r3, r3
 8003504:	401a      	ands	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	0d1b      	lsrs	r3, r3, #20
 800350a:	f003 031f 	and.w	r3, r3, #31
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	fa01 f303 	lsl.w	r3, r1, r3
 8003514:	431a      	orrs	r2, r3
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800351a:	bf00      	nop
 800351c:	371c      	adds	r7, #28
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
	...

08003528 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003540:	43db      	mvns	r3, r3
 8003542:	401a      	ands	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f003 0318 	and.w	r3, r3, #24
 800354a:	4908      	ldr	r1, [pc, #32]	@ (800356c <LL_ADC_SetChannelSingleDiff+0x44>)
 800354c:	40d9      	lsrs	r1, r3
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	400b      	ands	r3, r1
 8003552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003556:	431a      	orrs	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800355e:	bf00      	nop
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	0007ffff 	.word	0x0007ffff

08003570 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003580:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	6093      	str	r3, [r2, #8]
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035a8:	d101      	bne.n	80035ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80035aa:	2301      	movs	r3, #1
 80035ac:	e000      	b.n	80035b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80035cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035f8:	d101      	bne.n	80035fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <LL_ADC_IsEnabled+0x18>
 8003620:	2301      	movs	r3, #1
 8003622:	e000      	b.n	8003626 <LL_ADC_IsEnabled+0x1a>
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	2b04      	cmp	r3, #4
 8003644:	d101      	bne.n	800364a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 0308 	and.w	r3, r3, #8
 8003668:	2b08      	cmp	r3, #8
 800366a:	d101      	bne.n	8003670 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800366c:	2301      	movs	r3, #1
 800366e:	e000      	b.n	8003672 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003680:	b590      	push	{r4, r7, lr}
 8003682:	b089      	sub	sp, #36	@ 0x24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800368c:	2300      	movs	r3, #0
 800368e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e19b      	b.n	80039d2 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d109      	bne.n	80036bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f7fe ff7f 	bl	80025ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff ff67 	bl	8003594 <LL_ADC_IsDeepPowerDownEnabled>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d004      	beq.n	80036d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff ff4d 	bl	8003570 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff ff82 	bl	80035e4 <LL_ADC_IsInternalRegulatorEnabled>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d115      	bne.n	8003712 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff ff66 	bl	80035bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036f0:	4b97      	ldr	r3, [pc, #604]	@ (8003950 <HAL_ADC_Init+0x2d0>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	099b      	lsrs	r3, r3, #6
 80036f6:	4a97      	ldr	r2, [pc, #604]	@ (8003954 <HAL_ADC_Init+0x2d4>)
 80036f8:	fba2 2303 	umull	r2, r3, r2, r3
 80036fc:	099b      	lsrs	r3, r3, #6
 80036fe:	3301      	adds	r3, #1
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003704:	e002      	b.n	800370c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	3b01      	subs	r3, #1
 800370a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f9      	bne.n	8003706 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff ff64 	bl	80035e4 <LL_ADC_IsInternalRegulatorEnabled>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10d      	bne.n	800373e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003726:	f043 0210 	orr.w	r2, r3, #16
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003732:	f043 0201 	orr.w	r2, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff ff75 	bl	8003632 <LL_ADC_REG_IsConversionOngoing>
 8003748:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800374e:	f003 0310 	and.w	r3, r3, #16
 8003752:	2b00      	cmp	r3, #0
 8003754:	f040 8134 	bne.w	80039c0 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f040 8130 	bne.w	80039c0 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003764:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003768:	f043 0202 	orr.w	r2, r3, #2
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff ff49 	bl	800360c <LL_ADC_IsEnabled>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d137      	bne.n	80037f0 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003788:	d004      	beq.n	8003794 <HAL_ADC_Init+0x114>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a72      	ldr	r2, [pc, #456]	@ (8003958 <HAL_ADC_Init+0x2d8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d10f      	bne.n	80037b4 <HAL_ADC_Init+0x134>
 8003794:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003798:	f7ff ff38 	bl	800360c <LL_ADC_IsEnabled>
 800379c:	4604      	mov	r4, r0
 800379e:	486e      	ldr	r0, [pc, #440]	@ (8003958 <HAL_ADC_Init+0x2d8>)
 80037a0:	f7ff ff34 	bl	800360c <LL_ADC_IsEnabled>
 80037a4:	4603      	mov	r3, r0
 80037a6:	4323      	orrs	r3, r4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	bf0c      	ite	eq
 80037ac:	2301      	moveq	r3, #1
 80037ae:	2300      	movne	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	e008      	b.n	80037c6 <HAL_ADC_Init+0x146>
 80037b4:	4869      	ldr	r0, [pc, #420]	@ (800395c <HAL_ADC_Init+0x2dc>)
 80037b6:	f7ff ff29 	bl	800360c <LL_ADC_IsEnabled>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	bf0c      	ite	eq
 80037c0:	2301      	moveq	r3, #1
 80037c2:	2300      	movne	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d012      	beq.n	80037f0 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037d2:	d004      	beq.n	80037de <HAL_ADC_Init+0x15e>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a5f      	ldr	r2, [pc, #380]	@ (8003958 <HAL_ADC_Init+0x2d8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d101      	bne.n	80037e2 <HAL_ADC_Init+0x162>
 80037de:	4a60      	ldr	r2, [pc, #384]	@ (8003960 <HAL_ADC_Init+0x2e0>)
 80037e0:	e000      	b.n	80037e4 <HAL_ADC_Init+0x164>
 80037e2:	4a60      	ldr	r2, [pc, #384]	@ (8003964 <HAL_ADC_Init+0x2e4>)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	4619      	mov	r1, r3
 80037ea:	4610      	mov	r0, r2
 80037ec:	f7ff fd72 	bl	80032d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	7f5b      	ldrb	r3, [r3, #29]
 80037f4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037fa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003800:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003806:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800380e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003810:	4313      	orrs	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800381a:	2b01      	cmp	r3, #1
 800381c:	d106      	bne.n	800382c <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003822:	3b01      	subs	r3, #1
 8003824:	045b      	lsls	r3, r3, #17
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4313      	orrs	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003830:	2b00      	cmp	r3, #0
 8003832:	d009      	beq.n	8003848 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003838:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003840:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4313      	orrs	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	4b46      	ldr	r3, [pc, #280]	@ (8003968 <HAL_ADC_Init+0x2e8>)
 8003850:	4013      	ands	r3, r2
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6812      	ldr	r2, [r2, #0]
 8003856:	69b9      	ldr	r1, [r7, #24]
 8003858:	430b      	orrs	r3, r1
 800385a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff feee 	bl	8003658 <LL_ADC_INJ_IsConversionOngoing>
 800387c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d17b      	bne.n	800397c <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d178      	bne.n	800397c <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800388e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003896:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003898:	4313      	orrs	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038a6:	f023 0302 	bic.w	r3, r3, #2
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6812      	ldr	r2, [r2, #0]
 80038ae:	69b9      	ldr	r1, [r7, #24]
 80038b0:	430b      	orrs	r3, r1
 80038b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d017      	beq.n	80038ec <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691a      	ldr	r2, [r3, #16]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80038ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80038d4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80038d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6911      	ldr	r1, [r2, #16]
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6812      	ldr	r2, [r2, #0]
 80038e4:	430b      	orrs	r3, r1
 80038e6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80038ea:	e013      	b.n	8003914 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691a      	ldr	r2, [r3, #16]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80038fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800390c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003910:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800391a:	2b01      	cmp	r3, #1
 800391c:	d126      	bne.n	800396c <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003928:	f023 0304 	bic.w	r3, r3, #4
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003934:	4311      	orrs	r1, r2
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800393a:	4311      	orrs	r1, r2
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003940:	430a      	orrs	r2, r1
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f042 0201 	orr.w	r2, r2, #1
 800394c:	611a      	str	r2, [r3, #16]
 800394e:	e015      	b.n	800397c <HAL_ADC_Init+0x2fc>
 8003950:	20000000 	.word	0x20000000
 8003954:	053e2d63 	.word	0x053e2d63
 8003958:	50000100 	.word	0x50000100
 800395c:	50000400 	.word	0x50000400
 8003960:	50000300 	.word	0x50000300
 8003964:	50000700 	.word	0x50000700
 8003968:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0201 	bic.w	r2, r2, #1
 800397a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d10c      	bne.n	800399e <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398a:	f023 010f 	bic.w	r1, r3, #15
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	1e5a      	subs	r2, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	631a      	str	r2, [r3, #48]	@ 0x30
 800399c:	e007      	b.n	80039ae <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 020f 	bic.w	r2, r2, #15
 80039ac:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b2:	f023 0303 	bic.w	r3, r3, #3
 80039b6:	f043 0201 	orr.w	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80039be:	e007      	b.n	80039d0 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c4:	f043 0210 	orr.w	r2, r3, #16
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80039d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3724      	adds	r7, #36	@ 0x24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd90      	pop	{r4, r7, pc}
 80039da:	bf00      	nop

080039dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b0b6      	sub	sp, #216	@ 0xd8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d102      	bne.n	8003a00 <HAL_ADC_ConfigChannel+0x24>
 80039fa:	2302      	movs	r3, #2
 80039fc:	f000 bc04 	b.w	8004208 <HAL_ADC_ConfigChannel+0x82c>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff fe10 	bl	8003632 <LL_ADC_REG_IsConversionOngoing>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f040 83e8 	bne.w	80041ea <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	6859      	ldr	r1, [r3, #4]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	f7ff fd26 	bl	8003478 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff fdfe 	bl	8003632 <LL_ADC_REG_IsConversionOngoing>
 8003a36:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff fe0a 	bl	8003658 <LL_ADC_INJ_IsConversionOngoing>
 8003a44:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a48:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f040 81d9 	bne.w	8003e04 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f040 81d4 	bne.w	8003e04 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a64:	d10f      	bne.n	8003a86 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6818      	ldr	r0, [r3, #0]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	4619      	mov	r1, r3
 8003a72:	f7ff fd2d 	bl	80034d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff fce7 	bl	8003452 <LL_ADC_SetSamplingTimeCommonConfig>
 8003a84:	e00e      	b.n	8003aa4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	6819      	ldr	r1, [r3, #0]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	461a      	mov	r2, r3
 8003a94:	f7ff fd1c 	bl	80034d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff fcd7 	bl	8003452 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	695a      	ldr	r2, [r3, #20]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	08db      	lsrs	r3, r3, #3
 8003ab0:	f003 0303 	and.w	r3, r3, #3
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d022      	beq.n	8003b0c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6818      	ldr	r0, [r3, #0]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	6919      	ldr	r1, [r3, #16]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003ad6:	f7ff fc31 	bl	800333c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6818      	ldr	r0, [r3, #0]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	6919      	ldr	r1, [r3, #16]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f7ff fc7d 	bl	80033e6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d102      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x126>
 8003afc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b00:	e000      	b.n	8003b04 <HAL_ADC_ConfigChannel+0x128>
 8003b02:	2300      	movs	r3, #0
 8003b04:	461a      	mov	r2, r3
 8003b06:	f7ff fc89 	bl	800341c <LL_ADC_SetOffsetSaturation>
 8003b0a:	e17b      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2100      	movs	r1, #0
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff fc36 	bl	8003384 <LL_ADC_GetOffsetChannel>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10a      	bne.n	8003b38 <HAL_ADC_ConfigChannel+0x15c>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2100      	movs	r1, #0
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff fc2b 	bl	8003384 <LL_ADC_GetOffsetChannel>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	0e9b      	lsrs	r3, r3, #26
 8003b32:	f003 021f 	and.w	r2, r3, #31
 8003b36:	e01e      	b.n	8003b76 <HAL_ADC_ConfigChannel+0x19a>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff fc20 	bl	8003384 <LL_ADC_GetOffsetChannel>
 8003b44:	4603      	mov	r3, r0
 8003b46:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003b4e:	fa93 f3a3 	rbit	r3, r3
 8003b52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003b66:	2320      	movs	r3, #32
 8003b68:	e004      	b.n	8003b74 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003b6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003b6e:	fab3 f383 	clz	r3, r3
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d105      	bne.n	8003b8e <HAL_ADC_ConfigChannel+0x1b2>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	0e9b      	lsrs	r3, r3, #26
 8003b88:	f003 031f 	and.w	r3, r3, #31
 8003b8c:	e018      	b.n	8003bc0 <HAL_ADC_ConfigChannel+0x1e4>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003b9a:	fa93 f3a3 	rbit	r3, r3
 8003b9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003ba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ba6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003baa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003bb2:	2320      	movs	r3, #32
 8003bb4:	e004      	b.n	8003bc0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003bb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003bba:	fab3 f383 	clz	r3, r3
 8003bbe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d106      	bne.n	8003bd2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	2100      	movs	r1, #0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff fbef 	bl	80033b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff fbd3 	bl	8003384 <LL_ADC_GetOffsetChannel>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10a      	bne.n	8003bfe <HAL_ADC_ConfigChannel+0x222>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2101      	movs	r1, #1
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff fbc8 	bl	8003384 <LL_ADC_GetOffsetChannel>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	0e9b      	lsrs	r3, r3, #26
 8003bf8:	f003 021f 	and.w	r2, r3, #31
 8003bfc:	e01e      	b.n	8003c3c <HAL_ADC_ConfigChannel+0x260>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2101      	movs	r1, #1
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff fbbd 	bl	8003384 <LL_ADC_GetOffsetChannel>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c14:	fa93 f3a3 	rbit	r3, r3
 8003c18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003c1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003c24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003c2c:	2320      	movs	r3, #32
 8003c2e:	e004      	b.n	8003c3a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003c30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c34:	fab3 f383 	clz	r3, r3
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d105      	bne.n	8003c54 <HAL_ADC_ConfigChannel+0x278>
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	0e9b      	lsrs	r3, r3, #26
 8003c4e:	f003 031f 	and.w	r3, r3, #31
 8003c52:	e018      	b.n	8003c86 <HAL_ADC_ConfigChannel+0x2aa>
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c60:	fa93 f3a3 	rbit	r3, r3
 8003c64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003c68:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003c70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003c78:	2320      	movs	r3, #32
 8003c7a:	e004      	b.n	8003c86 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003c7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c80:	fab3 f383 	clz	r3, r3
 8003c84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d106      	bne.n	8003c98 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2101      	movs	r1, #1
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff fb8c 	bl	80033b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2102      	movs	r1, #2
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff fb70 	bl	8003384 <LL_ADC_GetOffsetChannel>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10a      	bne.n	8003cc4 <HAL_ADC_ConfigChannel+0x2e8>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2102      	movs	r1, #2
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff fb65 	bl	8003384 <LL_ADC_GetOffsetChannel>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	0e9b      	lsrs	r3, r3, #26
 8003cbe:	f003 021f 	and.w	r2, r3, #31
 8003cc2:	e01e      	b.n	8003d02 <HAL_ADC_ConfigChannel+0x326>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2102      	movs	r1, #2
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff fb5a 	bl	8003384 <LL_ADC_GetOffsetChannel>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cda:	fa93 f3a3 	rbit	r3, r3
 8003cde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003ce2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ce6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003cea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003cf2:	2320      	movs	r3, #32
 8003cf4:	e004      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003cf6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003cfa:	fab3 f383 	clz	r3, r3
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d105      	bne.n	8003d1a <HAL_ADC_ConfigChannel+0x33e>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	0e9b      	lsrs	r3, r3, #26
 8003d14:	f003 031f 	and.w	r3, r3, #31
 8003d18:	e016      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x36c>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d22:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d26:	fa93 f3a3 	rbit	r3, r3
 8003d2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003d2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003d32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003d3a:	2320      	movs	r3, #32
 8003d3c:	e004      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003d3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d42:	fab3 f383 	clz	r3, r3
 8003d46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d106      	bne.n	8003d5a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2200      	movs	r2, #0
 8003d52:	2102      	movs	r1, #2
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff fb2b 	bl	80033b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2103      	movs	r1, #3
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff fb0f 	bl	8003384 <LL_ADC_GetOffsetChannel>
 8003d66:	4603      	mov	r3, r0
 8003d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10a      	bne.n	8003d86 <HAL_ADC_ConfigChannel+0x3aa>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2103      	movs	r1, #3
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff fb04 	bl	8003384 <LL_ADC_GetOffsetChannel>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	0e9b      	lsrs	r3, r3, #26
 8003d80:	f003 021f 	and.w	r2, r3, #31
 8003d84:	e017      	b.n	8003db6 <HAL_ADC_ConfigChannel+0x3da>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2103      	movs	r1, #3
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff faf9 	bl	8003384 <LL_ADC_GetOffsetChannel>
 8003d92:	4603      	mov	r3, r0
 8003d94:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d98:	fa93 f3a3 	rbit	r3, r3
 8003d9c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003d9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003da0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003da2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003da8:	2320      	movs	r3, #32
 8003daa:	e003      	b.n	8003db4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003dac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dae:	fab3 f383 	clz	r3, r3
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d105      	bne.n	8003dce <HAL_ADC_ConfigChannel+0x3f2>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	0e9b      	lsrs	r3, r3, #26
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	e011      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x416>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003dd6:	fa93 f3a3 	rbit	r3, r3
 8003dda:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003ddc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003dde:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003de0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003de6:	2320      	movs	r3, #32
 8003de8:	e003      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003dea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dec:	fab3 f383 	clz	r3, r3
 8003df0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d106      	bne.n	8003e04 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	2103      	movs	r1, #3
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff fad6 	bl	80033b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff fbff 	bl	800360c <LL_ADC_IsEnabled>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f040 813d 	bne.w	8004090 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	6819      	ldr	r1, [r3, #0]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	461a      	mov	r2, r3
 8003e24:	f7ff fb80 	bl	8003528 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	4aa2      	ldr	r2, [pc, #648]	@ (80040b8 <HAL_ADC_ConfigChannel+0x6dc>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	f040 812e 	bne.w	8004090 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10b      	bne.n	8003e5c <HAL_ADC_ConfigChannel+0x480>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	0e9b      	lsrs	r3, r3, #26
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	f003 031f 	and.w	r3, r3, #31
 8003e50:	2b09      	cmp	r3, #9
 8003e52:	bf94      	ite	ls
 8003e54:	2301      	movls	r3, #1
 8003e56:	2300      	movhi	r3, #0
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	e019      	b.n	8003e90 <HAL_ADC_ConfigChannel+0x4b4>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e64:	fa93 f3a3 	rbit	r3, r3
 8003e68:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003e6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e6c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003e6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003e74:	2320      	movs	r3, #32
 8003e76:	e003      	b.n	8003e80 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003e78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e7a:	fab3 f383 	clz	r3, r3
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	3301      	adds	r3, #1
 8003e82:	f003 031f 	and.w	r3, r3, #31
 8003e86:	2b09      	cmp	r3, #9
 8003e88:	bf94      	ite	ls
 8003e8a:	2301      	movls	r3, #1
 8003e8c:	2300      	movhi	r3, #0
 8003e8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d079      	beq.n	8003f88 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d107      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x4d4>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	0e9b      	lsrs	r3, r3, #26
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	069b      	lsls	r3, r3, #26
 8003eaa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003eae:	e015      	b.n	8003edc <HAL_ADC_ConfigChannel+0x500>
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003eb8:	fa93 f3a3 	rbit	r3, r3
 8003ebc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003ebe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ec0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003ec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003ec8:	2320      	movs	r3, #32
 8003eca:	e003      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003ecc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ece:	fab3 f383 	clz	r3, r3
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	069b      	lsls	r3, r3, #26
 8003ed8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d109      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x520>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	0e9b      	lsrs	r3, r3, #26
 8003eee:	3301      	adds	r3, #1
 8003ef0:	f003 031f 	and.w	r3, r3, #31
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8003efa:	e017      	b.n	8003f2c <HAL_ADC_ConfigChannel+0x550>
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f04:	fa93 f3a3 	rbit	r3, r3
 8003f08:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003f0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003f0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003f14:	2320      	movs	r3, #32
 8003f16:	e003      	b.n	8003f20 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003f18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f1a:	fab3 f383 	clz	r3, r3
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	3301      	adds	r3, #1
 8003f22:	f003 031f 	and.w	r3, r3, #31
 8003f26:	2101      	movs	r1, #1
 8003f28:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2c:	ea42 0103 	orr.w	r1, r2, r3
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10a      	bne.n	8003f52 <HAL_ADC_ConfigChannel+0x576>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	0e9b      	lsrs	r3, r3, #26
 8003f42:	3301      	adds	r3, #1
 8003f44:	f003 021f 	and.w	r2, r3, #31
 8003f48:	4613      	mov	r3, r2
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	4413      	add	r3, r2
 8003f4e:	051b      	lsls	r3, r3, #20
 8003f50:	e018      	b.n	8003f84 <HAL_ADC_ConfigChannel+0x5a8>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f5a:	fa93 f3a3 	rbit	r3, r3
 8003f5e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003f64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003f6a:	2320      	movs	r3, #32
 8003f6c:	e003      	b.n	8003f76 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f70:	fab3 f383 	clz	r3, r3
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	3301      	adds	r3, #1
 8003f78:	f003 021f 	and.w	r2, r3, #31
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	4413      	add	r3, r2
 8003f82:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f84:	430b      	orrs	r3, r1
 8003f86:	e07e      	b.n	8004086 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d107      	bne.n	8003fa4 <HAL_ADC_ConfigChannel+0x5c8>
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	0e9b      	lsrs	r3, r3, #26
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	069b      	lsls	r3, r3, #26
 8003f9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fa2:	e015      	b.n	8003fd0 <HAL_ADC_ConfigChannel+0x5f4>
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fac:	fa93 f3a3 	rbit	r3, r3
 8003fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003fbc:	2320      	movs	r3, #32
 8003fbe:	e003      	b.n	8003fc8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc2:	fab3 f383 	clz	r3, r3
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	3301      	adds	r3, #1
 8003fca:	069b      	lsls	r3, r3, #26
 8003fcc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d109      	bne.n	8003ff0 <HAL_ADC_ConfigChannel+0x614>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	0e9b      	lsrs	r3, r3, #26
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	f003 031f 	and.w	r3, r3, #31
 8003fe8:	2101      	movs	r1, #1
 8003fea:	fa01 f303 	lsl.w	r3, r1, r3
 8003fee:	e017      	b.n	8004020 <HAL_ADC_ConfigChannel+0x644>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	fa93 f3a3 	rbit	r3, r3
 8003ffc:	61fb      	str	r3, [r7, #28]
  return result;
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004008:	2320      	movs	r3, #32
 800400a:	e003      	b.n	8004014 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800400c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400e:	fab3 f383 	clz	r3, r3
 8004012:	b2db      	uxtb	r3, r3
 8004014:	3301      	adds	r3, #1
 8004016:	f003 031f 	and.w	r3, r3, #31
 800401a:	2101      	movs	r1, #1
 800401c:	fa01 f303 	lsl.w	r3, r1, r3
 8004020:	ea42 0103 	orr.w	r1, r2, r3
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10d      	bne.n	800404c <HAL_ADC_ConfigChannel+0x670>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	0e9b      	lsrs	r3, r3, #26
 8004036:	3301      	adds	r3, #1
 8004038:	f003 021f 	and.w	r2, r3, #31
 800403c:	4613      	mov	r3, r2
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	4413      	add	r3, r2
 8004042:	3b1e      	subs	r3, #30
 8004044:	051b      	lsls	r3, r3, #20
 8004046:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800404a:	e01b      	b.n	8004084 <HAL_ADC_ConfigChannel+0x6a8>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	fa93 f3a3 	rbit	r3, r3
 8004058:	613b      	str	r3, [r7, #16]
  return result;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004064:	2320      	movs	r3, #32
 8004066:	e003      	b.n	8004070 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	fab3 f383 	clz	r3, r3
 800406e:	b2db      	uxtb	r3, r3
 8004070:	3301      	adds	r3, #1
 8004072:	f003 021f 	and.w	r2, r3, #31
 8004076:	4613      	mov	r3, r2
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	4413      	add	r3, r2
 800407c:	3b1e      	subs	r3, #30
 800407e:	051b      	lsls	r3, r3, #20
 8004080:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004084:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800408a:	4619      	mov	r1, r3
 800408c:	f7ff fa20 	bl	80034d0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	4b09      	ldr	r3, [pc, #36]	@ (80040bc <HAL_ADC_ConfigChannel+0x6e0>)
 8004096:	4013      	ands	r3, r2
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 80af 	beq.w	80041fc <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040a6:	d004      	beq.n	80040b2 <HAL_ADC_ConfigChannel+0x6d6>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a04      	ldr	r2, [pc, #16]	@ (80040c0 <HAL_ADC_ConfigChannel+0x6e4>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d10a      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0x6ec>
 80040b2:	4b04      	ldr	r3, [pc, #16]	@ (80040c4 <HAL_ADC_ConfigChannel+0x6e8>)
 80040b4:	e009      	b.n	80040ca <HAL_ADC_ConfigChannel+0x6ee>
 80040b6:	bf00      	nop
 80040b8:	407f0000 	.word	0x407f0000
 80040bc:	80080000 	.word	0x80080000
 80040c0:	50000100 	.word	0x50000100
 80040c4:	50000300 	.word	0x50000300
 80040c8:	4b51      	ldr	r3, [pc, #324]	@ (8004210 <HAL_ADC_ConfigChannel+0x834>)
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7ff f928 	bl	8003320 <LL_ADC_GetCommonPathInternalCh>
 80040d0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a4e      	ldr	r2, [pc, #312]	@ (8004214 <HAL_ADC_ConfigChannel+0x838>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d004      	beq.n	80040e8 <HAL_ADC_ConfigChannel+0x70c>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a4d      	ldr	r2, [pc, #308]	@ (8004218 <HAL_ADC_ConfigChannel+0x83c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d134      	bne.n	8004152 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80040e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d12e      	bne.n	8004152 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040fc:	d17e      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004106:	d004      	beq.n	8004112 <HAL_ADC_ConfigChannel+0x736>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a43      	ldr	r2, [pc, #268]	@ (800421c <HAL_ADC_ConfigChannel+0x840>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d101      	bne.n	8004116 <HAL_ADC_ConfigChannel+0x73a>
 8004112:	4a43      	ldr	r2, [pc, #268]	@ (8004220 <HAL_ADC_ConfigChannel+0x844>)
 8004114:	e000      	b.n	8004118 <HAL_ADC_ConfigChannel+0x73c>
 8004116:	4a3e      	ldr	r2, [pc, #248]	@ (8004210 <HAL_ADC_ConfigChannel+0x834>)
 8004118:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800411c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004120:	4619      	mov	r1, r3
 8004122:	4610      	mov	r0, r2
 8004124:	f7ff f8e9 	bl	80032fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004128:	4b3e      	ldr	r3, [pc, #248]	@ (8004224 <HAL_ADC_ConfigChannel+0x848>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	099b      	lsrs	r3, r3, #6
 800412e:	4a3e      	ldr	r2, [pc, #248]	@ (8004228 <HAL_ADC_ConfigChannel+0x84c>)
 8004130:	fba2 2303 	umull	r2, r3, r2, r3
 8004134:	099b      	lsrs	r3, r3, #6
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	4613      	mov	r3, r2
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	4413      	add	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004142:	e002      	b.n	800414a <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3b01      	subs	r3, #1
 8004148:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1f9      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004150:	e054      	b.n	80041fc <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a35      	ldr	r2, [pc, #212]	@ (800422c <HAL_ADC_ConfigChannel+0x850>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d120      	bne.n	800419e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800415c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004160:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d11a      	bne.n	800419e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004170:	d144      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800417a:	d004      	beq.n	8004186 <HAL_ADC_ConfigChannel+0x7aa>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a26      	ldr	r2, [pc, #152]	@ (800421c <HAL_ADC_ConfigChannel+0x840>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d101      	bne.n	800418a <HAL_ADC_ConfigChannel+0x7ae>
 8004186:	4a26      	ldr	r2, [pc, #152]	@ (8004220 <HAL_ADC_ConfigChannel+0x844>)
 8004188:	e000      	b.n	800418c <HAL_ADC_ConfigChannel+0x7b0>
 800418a:	4a21      	ldr	r2, [pc, #132]	@ (8004210 <HAL_ADC_ConfigChannel+0x834>)
 800418c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004190:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004194:	4619      	mov	r1, r3
 8004196:	4610      	mov	r0, r2
 8004198:	f7ff f8af 	bl	80032fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800419c:	e02e      	b.n	80041fc <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a23      	ldr	r2, [pc, #140]	@ (8004230 <HAL_ADC_ConfigChannel+0x854>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d129      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80041a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d123      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a18      	ldr	r2, [pc, #96]	@ (800421c <HAL_ADC_ConfigChannel+0x840>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d01e      	beq.n	80041fc <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041c6:	d004      	beq.n	80041d2 <HAL_ADC_ConfigChannel+0x7f6>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a13      	ldr	r2, [pc, #76]	@ (800421c <HAL_ADC_ConfigChannel+0x840>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d101      	bne.n	80041d6 <HAL_ADC_ConfigChannel+0x7fa>
 80041d2:	4a13      	ldr	r2, [pc, #76]	@ (8004220 <HAL_ADC_ConfigChannel+0x844>)
 80041d4:	e000      	b.n	80041d8 <HAL_ADC_ConfigChannel+0x7fc>
 80041d6:	4a0e      	ldr	r2, [pc, #56]	@ (8004210 <HAL_ADC_ConfigChannel+0x834>)
 80041d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80041e0:	4619      	mov	r1, r3
 80041e2:	4610      	mov	r0, r2
 80041e4:	f7ff f889 	bl	80032fa <LL_ADC_SetCommonPathInternalCh>
 80041e8:	e008      	b.n	80041fc <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ee:	f043 0220 	orr.w	r2, r3, #32
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004204:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004208:	4618      	mov	r0, r3
 800420a:	37d8      	adds	r7, #216	@ 0xd8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	50000700 	.word	0x50000700
 8004214:	c3210000 	.word	0xc3210000
 8004218:	90c00010 	.word	0x90c00010
 800421c:	50000100 	.word	0x50000100
 8004220:	50000300 	.word	0x50000300
 8004224:	20000000 	.word	0x20000000
 8004228:	053e2d63 	.word	0x053e2d63
 800422c:	c7520000 	.word	0xc7520000
 8004230:	cb840000 	.word	0xcb840000

08004234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004244:	4b0c      	ldr	r3, [pc, #48]	@ (8004278 <__NVIC_SetPriorityGrouping+0x44>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004250:	4013      	ands	r3, r2
 8004252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800425c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004260:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004266:	4a04      	ldr	r2, [pc, #16]	@ (8004278 <__NVIC_SetPriorityGrouping+0x44>)
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	60d3      	str	r3, [r2, #12]
}
 800426c:	bf00      	nop
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	e000ed00 	.word	0xe000ed00

0800427c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004280:	4b04      	ldr	r3, [pc, #16]	@ (8004294 <__NVIC_GetPriorityGrouping+0x18>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	0a1b      	lsrs	r3, r3, #8
 8004286:	f003 0307 	and.w	r3, r3, #7
}
 800428a:	4618      	mov	r0, r3
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	e000ed00 	.word	0xe000ed00

08004298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	db0b      	blt.n	80042c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	f003 021f 	and.w	r2, r3, #31
 80042b0:	4907      	ldr	r1, [pc, #28]	@ (80042d0 <__NVIC_EnableIRQ+0x38>)
 80042b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b6:	095b      	lsrs	r3, r3, #5
 80042b8:	2001      	movs	r0, #1
 80042ba:	fa00 f202 	lsl.w	r2, r0, r2
 80042be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	e000e100 	.word	0xe000e100

080042d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	4603      	mov	r3, r0
 80042dc:	6039      	str	r1, [r7, #0]
 80042de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	db0a      	blt.n	80042fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	490c      	ldr	r1, [pc, #48]	@ (8004320 <__NVIC_SetPriority+0x4c>)
 80042ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f2:	0112      	lsls	r2, r2, #4
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	440b      	add	r3, r1
 80042f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042fc:	e00a      	b.n	8004314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	b2da      	uxtb	r2, r3
 8004302:	4908      	ldr	r1, [pc, #32]	@ (8004324 <__NVIC_SetPriority+0x50>)
 8004304:	79fb      	ldrb	r3, [r7, #7]
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	3b04      	subs	r3, #4
 800430c:	0112      	lsls	r2, r2, #4
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	440b      	add	r3, r1
 8004312:	761a      	strb	r2, [r3, #24]
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	e000e100 	.word	0xe000e100
 8004324:	e000ed00 	.word	0xe000ed00

08004328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004328:	b480      	push	{r7}
 800432a:	b089      	sub	sp, #36	@ 0x24
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f1c3 0307 	rsb	r3, r3, #7
 8004342:	2b04      	cmp	r3, #4
 8004344:	bf28      	it	cs
 8004346:	2304      	movcs	r3, #4
 8004348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	3304      	adds	r3, #4
 800434e:	2b06      	cmp	r3, #6
 8004350:	d902      	bls.n	8004358 <NVIC_EncodePriority+0x30>
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	3b03      	subs	r3, #3
 8004356:	e000      	b.n	800435a <NVIC_EncodePriority+0x32>
 8004358:	2300      	movs	r3, #0
 800435a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800435c:	f04f 32ff 	mov.w	r2, #4294967295
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43da      	mvns	r2, r3
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	401a      	ands	r2, r3
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004370:	f04f 31ff 	mov.w	r1, #4294967295
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	fa01 f303 	lsl.w	r3, r1, r3
 800437a:	43d9      	mvns	r1, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004380:	4313      	orrs	r3, r2
         );
}
 8004382:	4618      	mov	r0, r3
 8004384:	3724      	adds	r7, #36	@ 0x24
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
	...

08004390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3b01      	subs	r3, #1
 800439c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043a0:	d301      	bcc.n	80043a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043a2:	2301      	movs	r3, #1
 80043a4:	e00f      	b.n	80043c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043a6:	4a0a      	ldr	r2, [pc, #40]	@ (80043d0 <SysTick_Config+0x40>)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043ae:	210f      	movs	r1, #15
 80043b0:	f04f 30ff 	mov.w	r0, #4294967295
 80043b4:	f7ff ff8e 	bl	80042d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043b8:	4b05      	ldr	r3, [pc, #20]	@ (80043d0 <SysTick_Config+0x40>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043be:	4b04      	ldr	r3, [pc, #16]	@ (80043d0 <SysTick_Config+0x40>)
 80043c0:	2207      	movs	r2, #7
 80043c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	e000e010 	.word	0xe000e010

080043d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7ff ff29 	bl	8004234 <__NVIC_SetPriorityGrouping>
}
 80043e2:	bf00      	nop
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b086      	sub	sp, #24
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	4603      	mov	r3, r0
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	607a      	str	r2, [r7, #4]
 80043f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043f8:	f7ff ff40 	bl	800427c <__NVIC_GetPriorityGrouping>
 80043fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	68b9      	ldr	r1, [r7, #8]
 8004402:	6978      	ldr	r0, [r7, #20]
 8004404:	f7ff ff90 	bl	8004328 <NVIC_EncodePriority>
 8004408:	4602      	mov	r2, r0
 800440a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800440e:	4611      	mov	r1, r2
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff ff5f 	bl	80042d4 <__NVIC_SetPriority>
}
 8004416:	bf00      	nop
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b082      	sub	sp, #8
 8004422:	af00      	add	r7, sp, #0
 8004424:	4603      	mov	r3, r0
 8004426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff ff33 	bl	8004298 <__NVIC_EnableIRQ>
}
 8004432:	bf00      	nop
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b082      	sub	sp, #8
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7ff ffa4 	bl	8004390 <SysTick_Config>
 8004448:	4603      	mov	r3, r0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e147      	b.n	80046f6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fe f8ec 	bl	8002658 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699a      	ldr	r2, [r3, #24]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0210 	bic.w	r2, r2, #16
 800448e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004490:	f7fe fef2 	bl	8003278 <HAL_GetTick>
 8004494:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004496:	e012      	b.n	80044be <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004498:	f7fe feee 	bl	8003278 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b0a      	cmp	r3, #10
 80044a4:	d90b      	bls.n	80044be <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044aa:	f043 0201 	orr.w	r2, r3, #1
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2203      	movs	r2, #3
 80044b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e11b      	b.n	80046f6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	f003 0308 	and.w	r3, r3, #8
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d0e5      	beq.n	8004498 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699a      	ldr	r2, [r3, #24]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0201 	orr.w	r2, r2, #1
 80044da:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044dc:	f7fe fecc 	bl	8003278 <HAL_GetTick>
 80044e0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80044e2:	e012      	b.n	800450a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80044e4:	f7fe fec8 	bl	8003278 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b0a      	cmp	r3, #10
 80044f0:	d90b      	bls.n	800450a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044f6:	f043 0201 	orr.w	r2, r3, #1
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2203      	movs	r2, #3
 8004502:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e0f5      	b.n	80046f6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0e5      	beq.n	80044e4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699a      	ldr	r2, [r3, #24]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0202 	orr.w	r2, r2, #2
 8004526:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a74      	ldr	r2, [pc, #464]	@ (8004700 <HAL_FDCAN_Init+0x2ac>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d103      	bne.n	800453a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004532:	4a74      	ldr	r2, [pc, #464]	@ (8004704 <HAL_FDCAN_Init+0x2b0>)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	7c1b      	ldrb	r3, [r3, #16]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d108      	bne.n	8004554 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	699a      	ldr	r2, [r3, #24]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004550:	619a      	str	r2, [r3, #24]
 8004552:	e007      	b.n	8004564 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699a      	ldr	r2, [r3, #24]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004562:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	7c5b      	ldrb	r3, [r3, #17]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d108      	bne.n	800457e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699a      	ldr	r2, [r3, #24]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800457a:	619a      	str	r2, [r3, #24]
 800457c:	e007      	b.n	800458e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	699a      	ldr	r2, [r3, #24]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800458c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	7c9b      	ldrb	r3, [r3, #18]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d108      	bne.n	80045a8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	699a      	ldr	r2, [r3, #24]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80045a4:	619a      	str	r2, [r3, #24]
 80045a6:	e007      	b.n	80045b8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699a      	ldr	r2, [r3, #24]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80045b6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	699a      	ldr	r2, [r3, #24]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80045dc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	691a      	ldr	r2, [r3, #16]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0210 	bic.w	r2, r2, #16
 80045ec:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d108      	bne.n	8004608 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	699a      	ldr	r2, [r3, #24]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f042 0204 	orr.w	r2, r2, #4
 8004604:	619a      	str	r2, [r3, #24]
 8004606:	e02c      	b.n	8004662 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d028      	beq.n	8004662 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	2b02      	cmp	r3, #2
 8004616:	d01c      	beq.n	8004652 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699a      	ldr	r2, [r3, #24]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004626:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691a      	ldr	r2, [r3, #16]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0210 	orr.w	r2, r2, #16
 8004636:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	2b03      	cmp	r3, #3
 800463e:	d110      	bne.n	8004662 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699a      	ldr	r2, [r3, #24]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0220 	orr.w	r2, r2, #32
 800464e:	619a      	str	r2, [r3, #24]
 8004650:	e007      	b.n	8004662 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	699a      	ldr	r2, [r3, #24]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 0220 	orr.w	r2, r2, #32
 8004660:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	3b01      	subs	r3, #1
 8004668:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	3b01      	subs	r3, #1
 8004670:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004672:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800467a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	3b01      	subs	r3, #1
 8004684:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800468a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800468c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004696:	d115      	bne.n	80046c4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a2:	3b01      	subs	r3, #1
 80046a4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80046a6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ac:	3b01      	subs	r3, #1
 80046ae:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80046b0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b8:	3b01      	subs	r3, #1
 80046ba:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80046c0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80046c2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f814 	bl	8004708 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40006400 	.word	0x40006400
 8004704:	40006500 	.word	0x40006500

08004708 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004710:	4b2c      	ldr	r3, [pc, #176]	@ (80047c4 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8004712:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a2b      	ldr	r2, [pc, #172]	@ (80047c8 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d103      	bne.n	8004726 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004724:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004734:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800473c:	041a      	lsls	r2, r3, #16
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800475a:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004762:	061a      	lsls	r2, r3, #24
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	e005      	b.n	80047a8 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3304      	adds	r3, #4
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d3f3      	bcc.n	800479c <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 80047b4:	bf00      	nop
 80047b6:	bf00      	nop
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	4000a400 	.word	0x4000a400
 80047c8:	40006800 	.word	0x40006800

080047cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047da:	e15a      	b.n	8004a92 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	2101      	movs	r1, #1
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	fa01 f303 	lsl.w	r3, r1, r3
 80047e8:	4013      	ands	r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 814c 	beq.w	8004a8c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d005      	beq.n	800480c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004808:	2b02      	cmp	r3, #2
 800480a:	d130      	bne.n	800486e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	2203      	movs	r2, #3
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	43db      	mvns	r3, r3
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4013      	ands	r3, r2
 8004822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	4313      	orrs	r3, r2
 8004834:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004842:	2201      	movs	r2, #1
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	43db      	mvns	r3, r3
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4013      	ands	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	091b      	lsrs	r3, r3, #4
 8004858:	f003 0201 	and.w	r2, r3, #1
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4313      	orrs	r3, r2
 8004866:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	2b03      	cmp	r3, #3
 8004878:	d017      	beq.n	80048aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	2203      	movs	r2, #3
 8004886:	fa02 f303 	lsl.w	r3, r2, r3
 800488a:	43db      	mvns	r3, r3
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4013      	ands	r3, r2
 8004890:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	689a      	ldr	r2, [r3, #8]
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f003 0303 	and.w	r3, r3, #3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d123      	bne.n	80048fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	08da      	lsrs	r2, r3, #3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3208      	adds	r2, #8
 80048be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	220f      	movs	r2, #15
 80048ce:	fa02 f303 	lsl.w	r3, r2, r3
 80048d2:	43db      	mvns	r3, r3
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4013      	ands	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	08da      	lsrs	r2, r3, #3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3208      	adds	r2, #8
 80048f8:	6939      	ldr	r1, [r7, #16]
 80048fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	2203      	movs	r2, #3
 800490a:	fa02 f303 	lsl.w	r3, r2, r3
 800490e:	43db      	mvns	r3, r3
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4013      	ands	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f003 0203 	and.w	r2, r3, #3
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 80a6 	beq.w	8004a8c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004940:	4b5b      	ldr	r3, [pc, #364]	@ (8004ab0 <HAL_GPIO_Init+0x2e4>)
 8004942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004944:	4a5a      	ldr	r2, [pc, #360]	@ (8004ab0 <HAL_GPIO_Init+0x2e4>)
 8004946:	f043 0301 	orr.w	r3, r3, #1
 800494a:	6613      	str	r3, [r2, #96]	@ 0x60
 800494c:	4b58      	ldr	r3, [pc, #352]	@ (8004ab0 <HAL_GPIO_Init+0x2e4>)
 800494e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	60bb      	str	r3, [r7, #8]
 8004956:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004958:	4a56      	ldr	r2, [pc, #344]	@ (8004ab4 <HAL_GPIO_Init+0x2e8>)
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	089b      	lsrs	r3, r3, #2
 800495e:	3302      	adds	r3, #2
 8004960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004964:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f003 0303 	and.w	r3, r3, #3
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	220f      	movs	r2, #15
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	43db      	mvns	r3, r3
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	4013      	ands	r3, r2
 800497a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004982:	d01f      	beq.n	80049c4 <HAL_GPIO_Init+0x1f8>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a4c      	ldr	r2, [pc, #304]	@ (8004ab8 <HAL_GPIO_Init+0x2ec>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d019      	beq.n	80049c0 <HAL_GPIO_Init+0x1f4>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a4b      	ldr	r2, [pc, #300]	@ (8004abc <HAL_GPIO_Init+0x2f0>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d013      	beq.n	80049bc <HAL_GPIO_Init+0x1f0>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a4a      	ldr	r2, [pc, #296]	@ (8004ac0 <HAL_GPIO_Init+0x2f4>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00d      	beq.n	80049b8 <HAL_GPIO_Init+0x1ec>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a49      	ldr	r2, [pc, #292]	@ (8004ac4 <HAL_GPIO_Init+0x2f8>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d007      	beq.n	80049b4 <HAL_GPIO_Init+0x1e8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a48      	ldr	r2, [pc, #288]	@ (8004ac8 <HAL_GPIO_Init+0x2fc>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d101      	bne.n	80049b0 <HAL_GPIO_Init+0x1e4>
 80049ac:	2305      	movs	r3, #5
 80049ae:	e00a      	b.n	80049c6 <HAL_GPIO_Init+0x1fa>
 80049b0:	2306      	movs	r3, #6
 80049b2:	e008      	b.n	80049c6 <HAL_GPIO_Init+0x1fa>
 80049b4:	2304      	movs	r3, #4
 80049b6:	e006      	b.n	80049c6 <HAL_GPIO_Init+0x1fa>
 80049b8:	2303      	movs	r3, #3
 80049ba:	e004      	b.n	80049c6 <HAL_GPIO_Init+0x1fa>
 80049bc:	2302      	movs	r3, #2
 80049be:	e002      	b.n	80049c6 <HAL_GPIO_Init+0x1fa>
 80049c0:	2301      	movs	r3, #1
 80049c2:	e000      	b.n	80049c6 <HAL_GPIO_Init+0x1fa>
 80049c4:	2300      	movs	r3, #0
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	f002 0203 	and.w	r2, r2, #3
 80049cc:	0092      	lsls	r2, r2, #2
 80049ce:	4093      	lsls	r3, r2
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049d6:	4937      	ldr	r1, [pc, #220]	@ (8004ab4 <HAL_GPIO_Init+0x2e8>)
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	089b      	lsrs	r3, r3, #2
 80049dc:	3302      	adds	r3, #2
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049e4:	4b39      	ldr	r3, [pc, #228]	@ (8004acc <HAL_GPIO_Init+0x300>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	43db      	mvns	r3, r3
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	4013      	ands	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a08:	4a30      	ldr	r2, [pc, #192]	@ (8004acc <HAL_GPIO_Init+0x300>)
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a0e:	4b2f      	ldr	r3, [pc, #188]	@ (8004acc <HAL_GPIO_Init+0x300>)
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	43db      	mvns	r3, r3
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a32:	4a26      	ldr	r2, [pc, #152]	@ (8004acc <HAL_GPIO_Init+0x300>)
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004a38:	4b24      	ldr	r3, [pc, #144]	@ (8004acc <HAL_GPIO_Init+0x300>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	43db      	mvns	r3, r3
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	4013      	ands	r3, r2
 8004a46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d003      	beq.n	8004a5c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8004acc <HAL_GPIO_Init+0x300>)
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a62:	4b1a      	ldr	r3, [pc, #104]	@ (8004acc <HAL_GPIO_Init+0x300>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	43db      	mvns	r3, r3
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a86:	4a11      	ldr	r2, [pc, #68]	@ (8004acc <HAL_GPIO_Init+0x300>)
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	fa22 f303 	lsr.w	r3, r2, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f47f ae9d 	bne.w	80047dc <HAL_GPIO_Init+0x10>
  }
}
 8004aa2:	bf00      	nop
 8004aa4:	bf00      	nop
 8004aa6:	371c      	adds	r7, #28
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	40010000 	.word	0x40010000
 8004ab8:	48000400 	.word	0x48000400
 8004abc:	48000800 	.word	0x48000800
 8004ac0:	48000c00 	.word	0x48000c00
 8004ac4:	48001000 	.word	0x48001000
 8004ac8:	48001400 	.word	0x48001400
 8004acc:	40010400 	.word	0x40010400

08004ad0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691a      	ldr	r2, [r3, #16]
 8004ae0:	887b      	ldrh	r3, [r7, #2]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	73fb      	strb	r3, [r7, #15]
 8004aec:	e001      	b.n	8004af2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004aee:	2300      	movs	r3, #0
 8004af0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	807b      	strh	r3, [r7, #2]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b10:	787b      	ldrb	r3, [r7, #1]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b16:	887a      	ldrh	r2, [r7, #2]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b1c:	e002      	b.n	8004b24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b1e:	887a      	ldrh	r2, [r7, #2]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	460b      	mov	r3, r1
 8004b3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b42:	887a      	ldrh	r2, [r7, #2]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4013      	ands	r3, r2
 8004b48:	041a      	lsls	r2, r3, #16
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	43d9      	mvns	r1, r3
 8004b4e:	887b      	ldrh	r3, [r7, #2]
 8004b50:	400b      	ands	r3, r1
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	619a      	str	r2, [r3, #24]
}
 8004b58:	bf00      	nop
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e0c0      	b.n	8004cf8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d106      	bne.n	8004b90 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f007 ffa4 	bl	800cad8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2203      	movs	r2, #3
 8004b94:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f004 fb10 	bl	80091c2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	73fb      	strb	r3, [r7, #15]
 8004ba6:	e03e      	b.n	8004c26 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004ba8:	7bfa      	ldrb	r2, [r7, #15]
 8004baa:	6879      	ldr	r1, [r7, #4]
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	440b      	add	r3, r1
 8004bb6:	3311      	adds	r3, #17
 8004bb8:	2201      	movs	r2, #1
 8004bba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004bbc:	7bfa      	ldrb	r2, [r7, #15]
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	440b      	add	r3, r1
 8004bca:	3310      	adds	r3, #16
 8004bcc:	7bfa      	ldrb	r2, [r7, #15]
 8004bce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004bd0:	7bfa      	ldrb	r2, [r7, #15]
 8004bd2:	6879      	ldr	r1, [r7, #4]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	440b      	add	r3, r1
 8004bde:	3313      	adds	r3, #19
 8004be0:	2200      	movs	r2, #0
 8004be2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004be4:	7bfa      	ldrb	r2, [r7, #15]
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	4613      	mov	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	440b      	add	r3, r1
 8004bf2:	3320      	adds	r3, #32
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004bf8:	7bfa      	ldrb	r2, [r7, #15]
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	440b      	add	r3, r1
 8004c06:	3324      	adds	r3, #36	@ 0x24
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	1c5a      	adds	r2, r3, #1
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	440b      	add	r3, r1
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
 8004c22:	3301      	adds	r3, #1
 8004c24:	73fb      	strb	r3, [r7, #15]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	791b      	ldrb	r3, [r3, #4]
 8004c2a:	7bfa      	ldrb	r2, [r7, #15]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d3bb      	bcc.n	8004ba8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c30:	2300      	movs	r3, #0
 8004c32:	73fb      	strb	r3, [r7, #15]
 8004c34:	e044      	b.n	8004cc0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c36:	7bfa      	ldrb	r2, [r7, #15]
 8004c38:	6879      	ldr	r1, [r7, #4]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	00db      	lsls	r3, r3, #3
 8004c42:	440b      	add	r3, r1
 8004c44:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004c48:	2200      	movs	r2, #0
 8004c4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c4c:	7bfa      	ldrb	r2, [r7, #15]
 8004c4e:	6879      	ldr	r1, [r7, #4]
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	440b      	add	r3, r1
 8004c5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004c5e:	7bfa      	ldrb	r2, [r7, #15]
 8004c60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004c62:	7bfa      	ldrb	r2, [r7, #15]
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	440b      	add	r3, r1
 8004c70:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004c74:	2200      	movs	r2, #0
 8004c76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004c78:	7bfa      	ldrb	r2, [r7, #15]
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	440b      	add	r3, r1
 8004c86:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004c8e:	7bfa      	ldrb	r2, [r7, #15]
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	4613      	mov	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	00db      	lsls	r3, r3, #3
 8004c9a:	440b      	add	r3, r1
 8004c9c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ca4:	7bfa      	ldrb	r2, [r7, #15]
 8004ca6:	6879      	ldr	r1, [r7, #4]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	440b      	add	r3, r1
 8004cb2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cba:	7bfb      	ldrb	r3, [r7, #15]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	73fb      	strb	r3, [r7, #15]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	791b      	ldrb	r3, [r3, #4]
 8004cc4:	7bfa      	ldrb	r2, [r7, #15]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d3b5      	bcc.n	8004c36 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6818      	ldr	r0, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004cd6:	f004 fa8f 	bl	80091f8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	7a9b      	ldrb	r3, [r3, #10]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d102      	bne.n	8004cf6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f001 fc0e 	bl	8006512 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d101      	bne.n	8004d16 <HAL_PCD_Start+0x16>
 8004d12:	2302      	movs	r3, #2
 8004d14:	e012      	b.n	8004d3c <HAL_PCD_Start+0x3c>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f004 fa36 	bl	8009194 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f006 f813 	bl	800ad58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f006 f818 	bl	800ad86 <USB_ReadInterrupts>
 8004d56:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fb06 	bl	8005374 <PCD_EP_ISR_Handler>

    return;
 8004d68:	e110      	b.n	8004f8c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d013      	beq.n	8004d9c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d86:	b292      	uxth	r2, r2
 8004d88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f007 ff34 	bl	800cbfa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004d92:	2100      	movs	r1, #0
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f8fc 	bl	8004f92 <HAL_PCD_SetAddress>

    return;
 8004d9a:	e0f7      	b.n	8004f8c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00c      	beq.n	8004dc0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004db8:	b292      	uxth	r2, r2
 8004dba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004dbe:	e0e5      	b.n	8004f8c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00c      	beq.n	8004de4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ddc:	b292      	uxth	r2, r2
 8004dde:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004de2:	e0d3      	b.n	8004f8c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d034      	beq.n	8004e58 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0204 	bic.w	r2, r2, #4
 8004e00:	b292      	uxth	r2, r2
 8004e02:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0208 	bic.w	r2, r2, #8
 8004e18:	b292      	uxth	r2, r2
 8004e1a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d107      	bne.n	8004e38 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004e30:	2100      	movs	r1, #0
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f008 f8d4 	bl	800cfe0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f007 ff17 	bl	800cc6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004e50:	b292      	uxth	r2, r2
 8004e52:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004e56:	e099      	b.n	8004f8c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d027      	beq.n	8004eb2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f042 0208 	orr.w	r2, r2, #8
 8004e74:	b292      	uxth	r2, r2
 8004e76:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e8c:	b292      	uxth	r2, r2
 8004e8e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f042 0204 	orr.w	r2, r2, #4
 8004ea4:	b292      	uxth	r2, r2
 8004ea6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f007 fec4 	bl	800cc38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004eb0:	e06c      	b.n	8004f8c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d040      	beq.n	8004f3e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ece:	b292      	uxth	r2, r2
 8004ed0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d12b      	bne.n	8004f36 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f042 0204 	orr.w	r2, r2, #4
 8004ef0:	b292      	uxth	r2, r2
 8004ef2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f042 0208 	orr.w	r2, r2, #8
 8004f08:	b292      	uxth	r2, r2
 8004f0a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	089b      	lsrs	r3, r3, #2
 8004f22:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f008 f856 	bl	800cfe0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004f34:	e02a      	b.n	8004f8c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f007 fe7e 	bl	800cc38 <HAL_PCD_SuspendCallback>
    return;
 8004f3c:	e026      	b.n	8004f8c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00f      	beq.n	8004f68 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004f5a:	b292      	uxth	r2, r2
 8004f5c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f007 fe3c 	bl	800cbde <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004f66:	e011      	b.n	8004f8c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00c      	beq.n	8004f8c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f84:	b292      	uxth	r2, r2
 8004f86:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004f8a:	bf00      	nop
  }
}
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b082      	sub	sp, #8
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d101      	bne.n	8004fac <HAL_PCD_SetAddress+0x1a>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	e012      	b.n	8004fd2 <HAL_PCD_SetAddress+0x40>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	78fa      	ldrb	r2, [r7, #3]
 8004fb8:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	78fa      	ldrb	r2, [r7, #3]
 8004fc0:	4611      	mov	r1, r2
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f005 feb4 	bl	800ad30 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b084      	sub	sp, #16
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	4608      	mov	r0, r1
 8004fe4:	4611      	mov	r1, r2
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	4603      	mov	r3, r0
 8004fea:	70fb      	strb	r3, [r7, #3]
 8004fec:	460b      	mov	r3, r1
 8004fee:	803b      	strh	r3, [r7, #0]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ff8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	da0e      	bge.n	800501e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005000:	78fb      	ldrb	r3, [r7, #3]
 8005002:	f003 0207 	and.w	r2, r3, #7
 8005006:	4613      	mov	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	3310      	adds	r3, #16
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	4413      	add	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2201      	movs	r2, #1
 800501a:	705a      	strb	r2, [r3, #1]
 800501c:	e00e      	b.n	800503c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800501e:	78fb      	ldrb	r3, [r7, #3]
 8005020:	f003 0207 	and.w	r2, r3, #7
 8005024:	4613      	mov	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	4413      	add	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	b2da      	uxtb	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005048:	883b      	ldrh	r3, [r7, #0]
 800504a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	78ba      	ldrb	r2, [r7, #2]
 8005056:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005058:	78bb      	ldrb	r3, [r7, #2]
 800505a:	2b02      	cmp	r3, #2
 800505c:	d102      	bne.n	8005064 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800506a:	2b01      	cmp	r3, #1
 800506c:	d101      	bne.n	8005072 <HAL_PCD_EP_Open+0x98>
 800506e:	2302      	movs	r3, #2
 8005070:	e00e      	b.n	8005090 <HAL_PCD_EP_Open+0xb6>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68f9      	ldr	r1, [r7, #12]
 8005080:	4618      	mov	r0, r3
 8005082:	f004 f8d7 	bl	8009234 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800508e:	7afb      	ldrb	r3, [r7, #11]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	460b      	mov	r3, r1
 80050a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80050a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	da0e      	bge.n	80050ca <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050ac:	78fb      	ldrb	r3, [r7, #3]
 80050ae:	f003 0207 	and.w	r2, r3, #7
 80050b2:	4613      	mov	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	3310      	adds	r3, #16
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	4413      	add	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2201      	movs	r2, #1
 80050c6:	705a      	strb	r2, [r3, #1]
 80050c8:	e00e      	b.n	80050e8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050ca:	78fb      	ldrb	r3, [r7, #3]
 80050cc:	f003 0207 	and.w	r2, r3, #7
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	4413      	add	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80050e8:	78fb      	ldrb	r3, [r7, #3]
 80050ea:	f003 0307 	and.w	r3, r3, #7
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d101      	bne.n	8005102 <HAL_PCD_EP_Close+0x6a>
 80050fe:	2302      	movs	r3, #2
 8005100:	e00e      	b.n	8005120 <HAL_PCD_EP_Close+0x88>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68f9      	ldr	r1, [r7, #12]
 8005110:	4618      	mov	r0, r3
 8005112:	f004 fd77 	bl	8009c04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	607a      	str	r2, [r7, #4]
 8005132:	603b      	str	r3, [r7, #0]
 8005134:	460b      	mov	r3, r1
 8005136:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005138:	7afb      	ldrb	r3, [r7, #11]
 800513a:	f003 0207 	and.w	r2, r3, #7
 800513e:	4613      	mov	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	4413      	add	r3, r2
 800514e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2200      	movs	r2, #0
 8005160:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2200      	movs	r2, #0
 8005166:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005168:	7afb      	ldrb	r3, [r7, #11]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	b2da      	uxtb	r2, r3
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6979      	ldr	r1, [r7, #20]
 800517a:	4618      	mov	r0, r3
 800517c:	f004 ff2f 	bl	8009fde <USB_EPStartXfer>

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3718      	adds	r7, #24
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
 8005192:	460b      	mov	r3, r1
 8005194:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005196:	78fb      	ldrb	r3, [r7, #3]
 8005198:	f003 0207 	and.w	r2, r3, #7
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	4613      	mov	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	00db      	lsls	r3, r3, #3
 80051a6:	440b      	add	r3, r1
 80051a8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80051ac:	681b      	ldr	r3, [r3, #0]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b086      	sub	sp, #24
 80051be:	af00      	add	r7, sp, #0
 80051c0:	60f8      	str	r0, [r7, #12]
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	603b      	str	r3, [r7, #0]
 80051c6:	460b      	mov	r3, r1
 80051c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051ca:	7afb      	ldrb	r3, [r7, #11]
 80051cc:	f003 0207 	and.w	r2, r3, #7
 80051d0:	4613      	mov	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	3310      	adds	r3, #16
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4413      	add	r3, r2
 80051de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2200      	movs	r2, #0
 80051fe:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	2201      	movs	r2, #1
 8005204:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005206:	7afb      	ldrb	r3, [r7, #11]
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	b2da      	uxtb	r2, r3
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6979      	ldr	r1, [r7, #20]
 8005218:	4618      	mov	r0, r3
 800521a:	f004 fee0 	bl	8009fde <USB_EPStartXfer>

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3718      	adds	r7, #24
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	460b      	mov	r3, r1
 8005232:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005234:	78fb      	ldrb	r3, [r7, #3]
 8005236:	f003 0307 	and.w	r3, r3, #7
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	7912      	ldrb	r2, [r2, #4]
 800523e:	4293      	cmp	r3, r2
 8005240:	d901      	bls.n	8005246 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e03e      	b.n	80052c4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005246:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800524a:	2b00      	cmp	r3, #0
 800524c:	da0e      	bge.n	800526c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800524e:	78fb      	ldrb	r3, [r7, #3]
 8005250:	f003 0207 	and.w	r2, r3, #7
 8005254:	4613      	mov	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	3310      	adds	r3, #16
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	4413      	add	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2201      	movs	r2, #1
 8005268:	705a      	strb	r2, [r3, #1]
 800526a:	e00c      	b.n	8005286 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800526c:	78fa      	ldrb	r2, [r7, #3]
 800526e:	4613      	mov	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	00db      	lsls	r3, r3, #3
 8005276:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	4413      	add	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2201      	movs	r2, #1
 800528a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800528c:	78fb      	ldrb	r3, [r7, #3]
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	b2da      	uxtb	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d101      	bne.n	80052a6 <HAL_PCD_EP_SetStall+0x7e>
 80052a2:	2302      	movs	r3, #2
 80052a4:	e00e      	b.n	80052c4 <HAL_PCD_EP_SetStall+0x9c>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68f9      	ldr	r1, [r7, #12]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f005 fc41 	bl	800ab3c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80052d8:	78fb      	ldrb	r3, [r7, #3]
 80052da:	f003 030f 	and.w	r3, r3, #15
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	7912      	ldrb	r2, [r2, #4]
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d901      	bls.n	80052ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e040      	b.n	800536c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80052ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	da0e      	bge.n	8005310 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052f2:	78fb      	ldrb	r3, [r7, #3]
 80052f4:	f003 0207 	and.w	r2, r3, #7
 80052f8:	4613      	mov	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	3310      	adds	r3, #16
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	4413      	add	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2201      	movs	r2, #1
 800530c:	705a      	strb	r2, [r3, #1]
 800530e:	e00e      	b.n	800532e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005310:	78fb      	ldrb	r3, [r7, #3]
 8005312:	f003 0207 	and.w	r2, r3, #7
 8005316:	4613      	mov	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	00db      	lsls	r3, r3, #3
 800531e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	4413      	add	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	b2da      	uxtb	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005346:	2b01      	cmp	r3, #1
 8005348:	d101      	bne.n	800534e <HAL_PCD_EP_ClrStall+0x82>
 800534a:	2302      	movs	r3, #2
 800534c:	e00e      	b.n	800536c <HAL_PCD_EP_ClrStall+0xa0>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68f9      	ldr	r1, [r7, #12]
 800535c:	4618      	mov	r0, r3
 800535e:	f005 fc3e 	bl	800abde <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b092      	sub	sp, #72	@ 0x48
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800537c:	e333      	b.n	80059e6 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005386:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005388:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800538a:	b2db      	uxtb	r3, r3
 800538c:	f003 030f 	and.w	r3, r3, #15
 8005390:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8005394:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005398:	2b00      	cmp	r3, #0
 800539a:	f040 8108 	bne.w	80055ae <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800539e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80053a0:	f003 0310 	and.w	r3, r3, #16
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d14c      	bne.n	8005442 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80053b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053b8:	813b      	strh	r3, [r7, #8]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	893b      	ldrh	r3, [r7, #8]
 80053c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3310      	adds	r3, #16
 80053d0:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053da:	b29b      	uxth	r3, r3
 80053dc:	461a      	mov	r2, r3
 80053de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	4413      	add	r3, r2
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6812      	ldr	r2, [r2, #0]
 80053ea:	4413      	add	r3, r2
 80053ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80053f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80053fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053fc:	695a      	ldr	r2, [r3, #20]
 80053fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	441a      	add	r2, r3
 8005404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005406:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005408:	2100      	movs	r1, #0
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f007 fbcd 	bl	800cbaa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	7b1b      	ldrb	r3, [r3, #12]
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 82e5 	beq.w	80059e6 <PCD_EP_ISR_Handler+0x672>
 800541c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	2b00      	cmp	r3, #0
 8005422:	f040 82e0 	bne.w	80059e6 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	7b1b      	ldrb	r3, [r3, #12]
 800542a:	b2db      	uxtb	r3, r3
 800542c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005430:	b2da      	uxtb	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	731a      	strb	r2, [r3, #12]
 8005440:	e2d1      	b.n	80059e6 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005448:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005452:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005454:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005458:	2b00      	cmp	r3, #0
 800545a:	d032      	beq.n	80054c2 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005464:	b29b      	uxth	r3, r3
 8005466:	461a      	mov	r2, r3
 8005468:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	4413      	add	r3, r2
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	6812      	ldr	r2, [r2, #0]
 8005474:	4413      	add	r3, r2
 8005476:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800547a:	881b      	ldrh	r3, [r3, #0]
 800547c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005480:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005482:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6818      	ldr	r0, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800548e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005490:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005492:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005494:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005496:	b29b      	uxth	r3, r3
 8005498:	f005 fcc8 	bl	800ae2c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80054a8:	4013      	ands	r3, r2
 80054aa:	817b      	strh	r3, [r7, #10]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	897a      	ldrh	r2, [r7, #10]
 80054b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80054b6:	b292      	uxth	r2, r2
 80054b8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f007 fb48 	bl	800cb50 <HAL_PCD_SetupStageCallback>
 80054c0:	e291      	b.n	80059e6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80054c2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f280 828d 	bge.w	80059e6 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80054d8:	4013      	ands	r3, r2
 80054da:	81fb      	strh	r3, [r7, #14]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	89fa      	ldrh	r2, [r7, #14]
 80054e2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80054e6:	b292      	uxth	r2, r2
 80054e8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	461a      	mov	r2, r3
 80054f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	4413      	add	r3, r2
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	6812      	ldr	r2, [r2, #0]
 8005502:	4413      	add	r3, r2
 8005504:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800550e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005510:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d019      	beq.n	800554e <PCD_EP_ISR_Handler+0x1da>
 800551a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d015      	beq.n	800554e <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6818      	ldr	r0, [r3, #0]
 8005526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005528:	6959      	ldr	r1, [r3, #20]
 800552a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800552c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800552e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005530:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005532:	b29b      	uxth	r3, r3
 8005534:	f005 fc7a 	bl	800ae2c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005538:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800553a:	695a      	ldr	r2, [r3, #20]
 800553c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800553e:	69db      	ldr	r3, [r3, #28]
 8005540:	441a      	add	r2, r3
 8005542:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005544:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005546:	2100      	movs	r1, #0
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f007 fb13 	bl	800cb74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	881b      	ldrh	r3, [r3, #0]
 8005554:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005556:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005558:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800555c:	2b00      	cmp	r3, #0
 800555e:	f040 8242 	bne.w	80059e6 <PCD_EP_ISR_Handler+0x672>
 8005562:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005564:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005568:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800556c:	f000 823b 	beq.w	80059e6 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	b29b      	uxth	r3, r3
 8005578:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800557c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005580:	81bb      	strh	r3, [r7, #12]
 8005582:	89bb      	ldrh	r3, [r7, #12]
 8005584:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005588:	81bb      	strh	r3, [r7, #12]
 800558a:	89bb      	ldrh	r3, [r7, #12]
 800558c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005590:	81bb      	strh	r3, [r7, #12]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	89bb      	ldrh	r3, [r7, #12]
 8005598:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800559c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	8013      	strh	r3, [r2, #0]
 80055ac:	e21b      	b.n	80059e6 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	461a      	mov	r2, r3
 80055b4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80055c0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f280 80f1 	bge.w	80057ac <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	461a      	mov	r2, r3
 80055d0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	b29a      	uxth	r2, r3
 80055dc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80055e0:	4013      	ands	r3, r2
 80055e2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	461a      	mov	r2, r3
 80055ea:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4413      	add	r3, r2
 80055f2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80055f4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80055f8:	b292      	uxth	r2, r2
 80055fa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80055fc:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8005600:	4613      	mov	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	4413      	add	r3, r2
 8005610:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005614:	7b1b      	ldrb	r3, [r3, #12]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d123      	bne.n	8005662 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005622:	b29b      	uxth	r3, r3
 8005624:	461a      	mov	r2, r3
 8005626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	4413      	add	r3, r2
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6812      	ldr	r2, [r2, #0]
 8005632:	4413      	add	r3, r2
 8005634:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800563e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8005642:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 808b 	beq.w	8005762 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6818      	ldr	r0, [r3, #0]
 8005650:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005652:	6959      	ldr	r1, [r3, #20]
 8005654:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005656:	88da      	ldrh	r2, [r3, #6]
 8005658:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800565c:	f005 fbe6 	bl	800ae2c <USB_ReadPMA>
 8005660:	e07f      	b.n	8005762 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005662:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005664:	78db      	ldrb	r3, [r3, #3]
 8005666:	2b02      	cmp	r3, #2
 8005668:	d109      	bne.n	800567e <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800566a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800566c:	461a      	mov	r2, r3
 800566e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f9c6 	bl	8005a02 <HAL_PCD_EP_DB_Receive>
 8005676:	4603      	mov	r3, r0
 8005678:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800567c:	e071      	b.n	8005762 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	b29b      	uxth	r3, r3
 8005690:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005694:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005698:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	461a      	mov	r2, r3
 80056a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	441a      	add	r2, r3
 80056a8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80056aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d022      	beq.n	800571e <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	461a      	mov	r2, r3
 80056e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	00db      	lsls	r3, r3, #3
 80056ea:	4413      	add	r3, r2
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	6812      	ldr	r2, [r2, #0]
 80056f0:	4413      	add	r3, r2
 80056f2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056fc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8005700:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005704:	2b00      	cmp	r3, #0
 8005706:	d02c      	beq.n	8005762 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6818      	ldr	r0, [r3, #0]
 800570c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800570e:	6959      	ldr	r1, [r3, #20]
 8005710:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005712:	891a      	ldrh	r2, [r3, #8]
 8005714:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005718:	f005 fb88 	bl	800ae2c <USB_ReadPMA>
 800571c:	e021      	b.n	8005762 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005726:	b29b      	uxth	r3, r3
 8005728:	461a      	mov	r2, r3
 800572a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	4413      	add	r3, r2
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6812      	ldr	r2, [r2, #0]
 8005736:	4413      	add	r3, r2
 8005738:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005742:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8005746:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800574a:	2b00      	cmp	r3, #0
 800574c:	d009      	beq.n	8005762 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6818      	ldr	r0, [r3, #0]
 8005752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005754:	6959      	ldr	r1, [r3, #20]
 8005756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005758:	895a      	ldrh	r2, [r3, #10]
 800575a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800575e:	f005 fb65 	bl	800ae2c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005762:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005764:	69da      	ldr	r2, [r3, #28]
 8005766:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800576a:	441a      	add	r2, r3
 800576c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800576e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005770:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005772:	695a      	ldr	r2, [r3, #20]
 8005774:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005778:	441a      	add	r2, r3
 800577a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800577c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800577e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d005      	beq.n	8005792 <PCD_EP_ISR_Handler+0x41e>
 8005786:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800578a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	429a      	cmp	r2, r3
 8005790:	d206      	bcs.n	80057a0 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005792:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	4619      	mov	r1, r3
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f007 f9eb 	bl	800cb74 <HAL_PCD_DataOutStageCallback>
 800579e:	e005      	b.n	80057ac <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057a6:	4618      	mov	r0, r3
 80057a8:	f004 fc19 	bl	8009fde <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80057ac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80057ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f000 8117 	beq.w	80059e6 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 80057b8:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80057bc:	4613      	mov	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	3310      	adds	r3, #16
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	4413      	add	r3, r2
 80057ca:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	461a      	mov	r2, r3
 80057d2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80057e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057e6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	461a      	mov	r2, r3
 80057ee:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	441a      	add	r2, r3
 80057f6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80057f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005800:	b29b      	uxth	r3, r3
 8005802:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005804:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005806:	78db      	ldrb	r3, [r3, #3]
 8005808:	2b01      	cmp	r3, #1
 800580a:	f040 80a1 	bne.w	8005950 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800580e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005810:	2200      	movs	r2, #0
 8005812:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005814:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005816:	7b1b      	ldrb	r3, [r3, #12]
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 8092 	beq.w	8005942 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800581e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005824:	2b00      	cmp	r3, #0
 8005826:	d046      	beq.n	80058b6 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005828:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800582a:	785b      	ldrb	r3, [r3, #1]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d126      	bne.n	800587e <PCD_EP_ISR_Handler+0x50a>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	617b      	str	r3, [r7, #20]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800583e:	b29b      	uxth	r3, r3
 8005840:	461a      	mov	r2, r3
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	4413      	add	r3, r2
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	00da      	lsls	r2, r3, #3
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	4413      	add	r3, r2
 8005852:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005856:	613b      	str	r3, [r7, #16]
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	881b      	ldrh	r3, [r3, #0]
 800585c:	b29b      	uxth	r3, r3
 800585e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005862:	b29a      	uxth	r2, r3
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	801a      	strh	r2, [r3, #0]
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	b29b      	uxth	r3, r3
 800586e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005872:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005876:	b29a      	uxth	r2, r3
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	801a      	strh	r2, [r3, #0]
 800587c:	e061      	b.n	8005942 <PCD_EP_ISR_Handler+0x5ce>
 800587e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005880:	785b      	ldrb	r3, [r3, #1]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d15d      	bne.n	8005942 <PCD_EP_ISR_Handler+0x5ce>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	61fb      	str	r3, [r7, #28]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005894:	b29b      	uxth	r3, r3
 8005896:	461a      	mov	r2, r3
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	4413      	add	r3, r2
 800589c:	61fb      	str	r3, [r7, #28]
 800589e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	00da      	lsls	r2, r3, #3
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	4413      	add	r3, r2
 80058a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80058ac:	61bb      	str	r3, [r7, #24]
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	2200      	movs	r2, #0
 80058b2:	801a      	strh	r2, [r3, #0]
 80058b4:	e045      	b.n	8005942 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058be:	785b      	ldrb	r3, [r3, #1]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d126      	bne.n	8005912 <PCD_EP_ISR_Handler+0x59e>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	461a      	mov	r2, r3
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d8:	4413      	add	r3, r2
 80058da:	627b      	str	r3, [r7, #36]	@ 0x24
 80058dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	00da      	lsls	r2, r3, #3
 80058e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e4:	4413      	add	r3, r2
 80058e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80058ea:	623b      	str	r3, [r7, #32]
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	881b      	ldrh	r3, [r3, #0]
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	6a3b      	ldr	r3, [r7, #32]
 80058fa:	801a      	strh	r2, [r3, #0]
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	881b      	ldrh	r3, [r3, #0]
 8005900:	b29b      	uxth	r3, r3
 8005902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800590a:	b29a      	uxth	r2, r3
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	801a      	strh	r2, [r3, #0]
 8005910:	e017      	b.n	8005942 <PCD_EP_ISR_Handler+0x5ce>
 8005912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005914:	785b      	ldrb	r3, [r3, #1]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d113      	bne.n	8005942 <PCD_EP_ISR_Handler+0x5ce>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005922:	b29b      	uxth	r3, r3
 8005924:	461a      	mov	r2, r3
 8005926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005928:	4413      	add	r3, r2
 800592a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800592c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	00da      	lsls	r2, r3, #3
 8005932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005934:	4413      	add	r3, r2
 8005936:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800593a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800593c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593e:	2200      	movs	r2, #0
 8005940:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	4619      	mov	r1, r3
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f007 f92e 	bl	800cbaa <HAL_PCD_DataInStageCallback>
 800594e:	e04a      	b.n	80059e6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005950:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005956:	2b00      	cmp	r3, #0
 8005958:	d13f      	bne.n	80059da <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005962:	b29b      	uxth	r3, r3
 8005964:	461a      	mov	r2, r3
 8005966:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	4413      	add	r3, r2
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	6812      	ldr	r2, [r2, #0]
 8005972:	4413      	add	r3, r2
 8005974:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005978:	881b      	ldrh	r3, [r3, #0]
 800597a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800597e:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8005980:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005982:	699a      	ldr	r2, [r3, #24]
 8005984:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005986:	429a      	cmp	r2, r3
 8005988:	d906      	bls.n	8005998 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800598a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800598c:	699a      	ldr	r2, [r3, #24]
 800598e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005990:	1ad2      	subs	r2, r2, r3
 8005992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005994:	619a      	str	r2, [r3, #24]
 8005996:	e002      	b.n	800599e <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8005998:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800599a:	2200      	movs	r2, #0
 800599c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800599e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d106      	bne.n	80059b4 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80059a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	4619      	mov	r1, r3
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f007 f8fc 	bl	800cbaa <HAL_PCD_DataInStageCallback>
 80059b2:	e018      	b.n	80059e6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80059b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059b6:	695a      	ldr	r2, [r3, #20]
 80059b8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80059ba:	441a      	add	r2, r3
 80059bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059be:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80059c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059c2:	69da      	ldr	r2, [r3, #28]
 80059c4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80059c6:	441a      	add	r2, r3
 80059c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059ca:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059d2:	4618      	mov	r0, r3
 80059d4:	f004 fb03 	bl	8009fde <USB_EPStartXfer>
 80059d8:	e005      	b.n	80059e6 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80059da:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80059dc:	461a      	mov	r2, r3
 80059de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f917 	bl	8005c14 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	b21b      	sxth	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f6ff acc3 	blt.w	800537e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3748      	adds	r7, #72	@ 0x48
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b088      	sub	sp, #32
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	60f8      	str	r0, [r7, #12]
 8005a0a:	60b9      	str	r1, [r7, #8]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005a10:	88fb      	ldrh	r3, [r7, #6]
 8005a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d07c      	beq.n	8005b14 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	461a      	mov	r2, r3
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	4413      	add	r3, r2
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	6812      	ldr	r2, [r2, #0]
 8005a32:	4413      	add	r3, r2
 8005a34:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a3e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	699a      	ldr	r2, [r3, #24]
 8005a44:	8b7b      	ldrh	r3, [r7, #26]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d306      	bcc.n	8005a58 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	699a      	ldr	r2, [r3, #24]
 8005a4e:	8b7b      	ldrh	r3, [r7, #26]
 8005a50:	1ad2      	subs	r2, r2, r3
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	619a      	str	r2, [r3, #24]
 8005a56:	e002      	b.n	8005a5e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d123      	bne.n	8005aae <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	881b      	ldrh	r3, [r3, #0]
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a80:	833b      	strh	r3, [r7, #24]
 8005a82:	8b3b      	ldrh	r3, [r7, #24]
 8005a84:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005a88:	833b      	strh	r3, [r7, #24]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	441a      	add	r2, r3
 8005a98:	8b3b      	ldrh	r3, [r7, #24]
 8005a9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005aa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005aa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005aae:	88fb      	ldrh	r3, [r7, #6]
 8005ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d01f      	beq.n	8005af8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	461a      	mov	r2, r3
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ad2:	82fb      	strh	r3, [r7, #22]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	441a      	add	r2, r3
 8005ae2:	8afb      	ldrh	r3, [r7, #22]
 8005ae4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ae8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005aec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005af0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005af8:	8b7b      	ldrh	r3, [r7, #26]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 8085 	beq.w	8005c0a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6818      	ldr	r0, [r3, #0]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	6959      	ldr	r1, [r3, #20]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	891a      	ldrh	r2, [r3, #8]
 8005b0c:	8b7b      	ldrh	r3, [r7, #26]
 8005b0e:	f005 f98d 	bl	800ae2c <USB_ReadPMA>
 8005b12:	e07a      	b.n	8005c0a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	461a      	mov	r2, r3
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	4413      	add	r3, r2
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	6812      	ldr	r2, [r2, #0]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b38:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	699a      	ldr	r2, [r3, #24]
 8005b3e:	8b7b      	ldrh	r3, [r7, #26]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d306      	bcc.n	8005b52 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	699a      	ldr	r2, [r3, #24]
 8005b48:	8b7b      	ldrh	r3, [r7, #26]
 8005b4a:	1ad2      	subs	r2, r2, r3
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	619a      	str	r2, [r3, #24]
 8005b50:	e002      	b.n	8005b58 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	2200      	movs	r2, #0
 8005b56:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d123      	bne.n	8005ba8 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	461a      	mov	r2, r3
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4413      	add	r3, r2
 8005b6e:	881b      	ldrh	r3, [r3, #0]
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b7a:	83fb      	strh	r3, [r7, #30]
 8005b7c:	8bfb      	ldrh	r3, [r7, #30]
 8005b7e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005b82:	83fb      	strh	r3, [r7, #30]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	461a      	mov	r2, r3
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	441a      	add	r2, r3
 8005b92:	8bfb      	ldrh	r3, [r7, #30]
 8005b94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ba0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005ba8:	88fb      	ldrh	r3, [r7, #6]
 8005baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d11f      	bne.n	8005bf2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bcc:	83bb      	strh	r3, [r7, #28]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	441a      	add	r2, r3
 8005bdc:	8bbb      	ldrh	r3, [r7, #28]
 8005bde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005be2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005be6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005bf2:	8b7b      	ldrh	r3, [r7, #26]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d008      	beq.n	8005c0a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6818      	ldr	r0, [r3, #0]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	6959      	ldr	r1, [r3, #20]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	895a      	ldrh	r2, [r3, #10]
 8005c04:	8b7b      	ldrh	r3, [r7, #26]
 8005c06:	f005 f911 	bl	800ae2c <USB_ReadPMA>
    }
  }

  return count;
 8005c0a:	8b7b      	ldrh	r3, [r7, #26]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3720      	adds	r7, #32
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b0a6      	sub	sp, #152	@ 0x98
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005c22:	88fb      	ldrh	r3, [r7, #6]
 8005c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 81f7 	beq.w	800601c <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	461a      	mov	r2, r3
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	00db      	lsls	r3, r3, #3
 8005c40:	4413      	add	r3, r2
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	6812      	ldr	r2, [r2, #0]
 8005c46:	4413      	add	r3, r2
 8005c48:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c52:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	699a      	ldr	r2, [r3, #24]
 8005c5a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d907      	bls.n	8005c72 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	699a      	ldr	r2, [r3, #24]
 8005c66:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005c6a:	1ad2      	subs	r2, r2, r3
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	619a      	str	r2, [r3, #24]
 8005c70:	e002      	b.n	8005c78 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	2200      	movs	r2, #0
 8005c76:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f040 80e1 	bne.w	8005e44 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	785b      	ldrb	r3, [r3, #1]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d126      	bne.n	8005cd8 <HAL_PCD_EP_DB_Transmit+0xc4>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9e:	4413      	add	r3, r2
 8005ca0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	00da      	lsls	r2, r3, #3
 8005ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005caa:	4413      	add	r3, r2
 8005cac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cb4:	881b      	ldrh	r3, [r3, #0]
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc0:	801a      	strh	r2, [r3, #0]
 8005cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ccc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd4:	801a      	strh	r2, [r3, #0]
 8005cd6:	e01a      	b.n	8005d0e <HAL_PCD_EP_DB_Transmit+0xfa>
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	785b      	ldrb	r3, [r3, #1]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d116      	bne.n	8005d0e <HAL_PCD_EP_DB_Transmit+0xfa>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf4:	4413      	add	r3, r2
 8005cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	00da      	lsls	r2, r3, #3
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d00:	4413      	add	r3, r2
 8005d02:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005d06:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	785b      	ldrb	r3, [r3, #1]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d126      	bne.n	8005d6a <HAL_PCD_EP_DB_Transmit+0x156>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	623b      	str	r3, [r7, #32]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	4413      	add	r3, r2
 8005d32:	623b      	str	r3, [r7, #32]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	00da      	lsls	r2, r3, #3
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005d42:	61fb      	str	r3, [r7, #28]
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	801a      	strh	r2, [r3, #0]
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	801a      	strh	r2, [r3, #0]
 8005d68:	e017      	b.n	8005d9a <HAL_PCD_EP_DB_Transmit+0x186>
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	785b      	ldrb	r3, [r3, #1]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d113      	bne.n	8005d9a <HAL_PCD_EP_DB_Transmit+0x186>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d80:	4413      	add	r3, r2
 8005d82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	00da      	lsls	r2, r3, #3
 8005d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d96:	2200      	movs	r2, #0
 8005d98:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	78db      	ldrb	r3, [r3, #3]
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d123      	bne.n	8005dea <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	881b      	ldrh	r3, [r3, #0]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005db8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dbc:	837b      	strh	r3, [r7, #26]
 8005dbe:	8b7b      	ldrh	r3, [r7, #26]
 8005dc0:	f083 0320 	eor.w	r3, r3, #32
 8005dc4:	837b      	strh	r3, [r7, #26]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	441a      	add	r2, r3
 8005dd4:	8b7b      	ldrh	r3, [r7, #26]
 8005dd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	4619      	mov	r1, r3
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f006 feda 	bl	800cbaa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005df6:	88fb      	ldrh	r3, [r7, #6]
 8005df8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d01f      	beq.n	8005e40 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	461a      	mov	r2, r3
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	881b      	ldrh	r3, [r3, #0]
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e1a:	833b      	strh	r3, [r7, #24]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	461a      	mov	r2, r3
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	441a      	add	r2, r3
 8005e2a:	8b3b      	ldrh	r3, [r7, #24]
 8005e2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8005e40:	2300      	movs	r3, #0
 8005e42:	e31f      	b.n	8006484 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005e44:	88fb      	ldrh	r3, [r7, #6]
 8005e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d021      	beq.n	8005e92 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	461a      	mov	r2, r3
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e68:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	461a      	mov	r2, r3
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	441a      	add	r2, r3
 8005e7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005e7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	f040 82ca 	bne.w	8006432 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	695a      	ldr	r2, [r3, #20]
 8005ea2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005ea6:	441a      	add	r2, r3
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	69da      	ldr	r2, [r3, #28]
 8005eb0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005eb4:	441a      	add	r2, r3
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	6a1a      	ldr	r2, [r3, #32]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d309      	bcc.n	8005eda <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	6a1a      	ldr	r2, [r3, #32]
 8005ed0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ed2:	1ad2      	subs	r2, r2, r3
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	621a      	str	r2, [r3, #32]
 8005ed8:	e015      	b.n	8005f06 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d107      	bne.n	8005ef2 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8005ee2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005ee6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005ef0:	e009      	b.n	8005f06 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2200      	movs	r2, #0
 8005f04:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	785b      	ldrb	r3, [r3, #1]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d15f      	bne.n	8005fce <HAL_PCD_EP_DB_Transmit+0x3ba>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	461a      	mov	r2, r3
 8005f20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f22:	4413      	add	r3, r2
 8005f24:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	00da      	lsls	r2, r3, #3
 8005f2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f2e:	4413      	add	r3, r2
 8005f30:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f44:	801a      	strh	r2, [r3, #0]
 8005f46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10a      	bne.n	8005f62 <HAL_PCD_EP_DB_Transmit+0x34e>
 8005f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f4e:	881b      	ldrh	r3, [r3, #0]
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f5e:	801a      	strh	r2, [r3, #0]
 8005f60:	e051      	b.n	8006006 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005f62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f64:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f66:	d816      	bhi.n	8005f96 <HAL_PCD_EP_DB_Transmit+0x382>
 8005f68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f6a:	085b      	lsrs	r3, r3, #1
 8005f6c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d002      	beq.n	8005f7e <HAL_PCD_EP_DB_Transmit+0x36a>
 8005f78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	029b      	lsls	r3, r3, #10
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f92:	801a      	strh	r2, [r3, #0]
 8005f94:	e037      	b.n	8006006 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005f96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f98:	095b      	lsrs	r3, r3, #5
 8005f9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f9e:	f003 031f 	and.w	r3, r3, #31
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d102      	bne.n	8005fac <HAL_PCD_EP_DB_Transmit+0x398>
 8005fa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	029b      	lsls	r3, r3, #10
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fca:	801a      	strh	r2, [r3, #0]
 8005fcc:	e01b      	b.n	8006006 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	785b      	ldrb	r3, [r3, #1]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d117      	bne.n	8006006 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fea:	4413      	add	r3, r2
 8005fec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	00da      	lsls	r2, r3, #3
 8005ff4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005ffc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ffe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006000:	b29a      	uxth	r2, r3
 8006002:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006004:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6818      	ldr	r0, [r3, #0]
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	6959      	ldr	r1, [r3, #20]
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	891a      	ldrh	r2, [r3, #8]
 8006012:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006014:	b29b      	uxth	r3, r3
 8006016:	f004 fec6 	bl	800ada6 <USB_WritePMA>
 800601a:	e20a      	b.n	8006432 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006024:	b29b      	uxth	r3, r3
 8006026:	461a      	mov	r2, r3
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	4413      	add	r3, r2
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	6812      	ldr	r2, [r2, #0]
 8006034:	4413      	add	r3, r2
 8006036:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006040:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	699a      	ldr	r2, [r3, #24]
 8006048:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800604c:	429a      	cmp	r2, r3
 800604e:	d307      	bcc.n	8006060 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	699a      	ldr	r2, [r3, #24]
 8006054:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006058:	1ad2      	subs	r2, r2, r3
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	619a      	str	r2, [r3, #24]
 800605e:	e002      	b.n	8006066 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2200      	movs	r2, #0
 8006064:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	2b00      	cmp	r3, #0
 800606c:	f040 80f6 	bne.w	800625c <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	785b      	ldrb	r3, [r3, #1]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d126      	bne.n	80060c6 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	677b      	str	r3, [r7, #116]	@ 0x74
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006086:	b29b      	uxth	r3, r3
 8006088:	461a      	mov	r2, r3
 800608a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800608c:	4413      	add	r3, r2
 800608e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	00da      	lsls	r2, r3, #3
 8006096:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006098:	4413      	add	r3, r2
 800609a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800609e:	673b      	str	r3, [r7, #112]	@ 0x70
 80060a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060ae:	801a      	strh	r2, [r3, #0]
 80060b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060b2:	881b      	ldrh	r3, [r3, #0]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060be:	b29a      	uxth	r2, r3
 80060c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060c2:	801a      	strh	r2, [r3, #0]
 80060c4:	e01a      	b.n	80060fc <HAL_PCD_EP_DB_Transmit+0x4e8>
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	785b      	ldrb	r3, [r3, #1]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d116      	bne.n	80060fc <HAL_PCD_EP_DB_Transmit+0x4e8>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060dc:	b29b      	uxth	r3, r3
 80060de:	461a      	mov	r2, r3
 80060e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80060e2:	4413      	add	r3, r2
 80060e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	00da      	lsls	r2, r3, #3
 80060ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80060ee:	4413      	add	r3, r2
 80060f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80060f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80060f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80060f8:	2200      	movs	r2, #0
 80060fa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	785b      	ldrb	r3, [r3, #1]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d12f      	bne.n	800616c <HAL_PCD_EP_DB_Transmit+0x558>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800611c:	b29b      	uxth	r3, r3
 800611e:	461a      	mov	r2, r3
 8006120:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006124:	4413      	add	r3, r2
 8006126:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	00da      	lsls	r2, r3, #3
 8006130:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006134:	4413      	add	r3, r2
 8006136:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800613a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800613e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	b29b      	uxth	r3, r3
 8006146:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800614a:	b29a      	uxth	r2, r3
 800614c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006150:	801a      	strh	r2, [r3, #0]
 8006152:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	b29b      	uxth	r3, r3
 800615a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800615e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006162:	b29a      	uxth	r2, r3
 8006164:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006168:	801a      	strh	r2, [r3, #0]
 800616a:	e01c      	b.n	80061a6 <HAL_PCD_EP_DB_Transmit+0x592>
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	785b      	ldrb	r3, [r3, #1]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d118      	bne.n	80061a6 <HAL_PCD_EP_DB_Transmit+0x592>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800617c:	b29b      	uxth	r3, r3
 800617e:	461a      	mov	r2, r3
 8006180:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006184:	4413      	add	r3, r2
 8006186:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	00da      	lsls	r2, r3, #3
 8006190:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006194:	4413      	add	r3, r2
 8006196:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800619a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800619e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80061a2:	2200      	movs	r2, #0
 80061a4:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	78db      	ldrb	r3, [r3, #3]
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d127      	bne.n	80061fe <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061c8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80061cc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80061d0:	f083 0320 	eor.w	r3, r3, #32
 80061d4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	461a      	mov	r2, r3
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	441a      	add	r2, r3
 80061e6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80061ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	4619      	mov	r1, r3
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f006 fcd0 	bl	800cbaa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800620a:	88fb      	ldrh	r3, [r7, #6]
 800620c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d121      	bne.n	8006258 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	461a      	mov	r2, r3
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	881b      	ldrh	r3, [r3, #0]
 8006224:	b29b      	uxth	r3, r3
 8006226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800622a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800622e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	461a      	mov	r2, r3
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	441a      	add	r2, r3
 8006240:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006244:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006248:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800624c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006250:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006254:	b29b      	uxth	r3, r3
 8006256:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8006258:	2300      	movs	r3, #0
 800625a:	e113      	b.n	8006484 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800625c:	88fb      	ldrh	r3, [r7, #6]
 800625e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d121      	bne.n	80062aa <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	461a      	mov	r2, r3
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	b29b      	uxth	r3, r3
 8006278:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800627c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006280:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	461a      	mov	r2, r3
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	441a      	add	r2, r3
 8006292:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006296:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800629a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800629e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80062a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	f040 80be 	bne.w	8006432 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	695a      	ldr	r2, [r3, #20]
 80062ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80062be:	441a      	add	r2, r3
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	69da      	ldr	r2, [r3, #28]
 80062c8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80062cc:	441a      	add	r2, r3
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	6a1a      	ldr	r2, [r3, #32]
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d309      	bcc.n	80062f2 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	6a1a      	ldr	r2, [r3, #32]
 80062e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80062ea:	1ad2      	subs	r2, r2, r3
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	621a      	str	r2, [r3, #32]
 80062f0:	e015      	b.n	800631e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d107      	bne.n	800630a <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80062fa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80062fe:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006308:	e009      	b.n	800631e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	2200      	movs	r2, #0
 8006314:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	785b      	ldrb	r3, [r3, #1]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d15f      	bne.n	80063ec <HAL_PCD_EP_DB_Transmit+0x7d8>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800633a:	b29b      	uxth	r3, r3
 800633c:	461a      	mov	r2, r3
 800633e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006340:	4413      	add	r3, r2
 8006342:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	00da      	lsls	r2, r3, #3
 800634a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800634c:	4413      	add	r3, r2
 800634e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006352:	667b      	str	r3, [r7, #100]	@ 0x64
 8006354:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	b29b      	uxth	r3, r3
 800635a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800635e:	b29a      	uxth	r2, r3
 8006360:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006362:	801a      	strh	r2, [r3, #0]
 8006364:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10a      	bne.n	8006380 <HAL_PCD_EP_DB_Transmit+0x76c>
 800636a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800636c:	881b      	ldrh	r3, [r3, #0]
 800636e:	b29b      	uxth	r3, r3
 8006370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006378:	b29a      	uxth	r2, r3
 800637a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800637c:	801a      	strh	r2, [r3, #0]
 800637e:	e04e      	b.n	800641e <HAL_PCD_EP_DB_Transmit+0x80a>
 8006380:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006382:	2b3e      	cmp	r3, #62	@ 0x3e
 8006384:	d816      	bhi.n	80063b4 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8006386:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006388:	085b      	lsrs	r3, r3, #1
 800638a:	663b      	str	r3, [r7, #96]	@ 0x60
 800638c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d002      	beq.n	800639c <HAL_PCD_EP_DB_Transmit+0x788>
 8006396:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006398:	3301      	adds	r3, #1
 800639a:	663b      	str	r3, [r7, #96]	@ 0x60
 800639c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800639e:	881b      	ldrh	r3, [r3, #0]
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	029b      	lsls	r3, r3, #10
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	4313      	orrs	r3, r2
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063b0:	801a      	strh	r2, [r3, #0]
 80063b2:	e034      	b.n	800641e <HAL_PCD_EP_DB_Transmit+0x80a>
 80063b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80063b6:	095b      	lsrs	r3, r3, #5
 80063b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80063ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80063bc:	f003 031f 	and.w	r3, r3, #31
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d102      	bne.n	80063ca <HAL_PCD_EP_DB_Transmit+0x7b6>
 80063c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063c6:	3b01      	subs	r3, #1
 80063c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80063ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	029b      	lsls	r3, r3, #10
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	4313      	orrs	r3, r2
 80063da:	b29b      	uxth	r3, r3
 80063dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063e8:	801a      	strh	r2, [r3, #0]
 80063ea:	e018      	b.n	800641e <HAL_PCD_EP_DB_Transmit+0x80a>
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	785b      	ldrb	r3, [r3, #1]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d114      	bne.n	800641e <HAL_PCD_EP_DB_Transmit+0x80a>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	461a      	mov	r2, r3
 8006400:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006402:	4413      	add	r3, r2
 8006404:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	00da      	lsls	r2, r3, #3
 800640c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800640e:	4413      	add	r3, r2
 8006410:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006414:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006416:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006418:	b29a      	uxth	r2, r3
 800641a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800641c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6818      	ldr	r0, [r3, #0]
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	6959      	ldr	r1, [r3, #20]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	895a      	ldrh	r2, [r3, #10]
 800642a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800642c:	b29b      	uxth	r3, r3
 800642e:	f004 fcba 	bl	800ada6 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	461a      	mov	r2, r3
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	881b      	ldrh	r3, [r3, #0]
 8006442:	b29b      	uxth	r3, r3
 8006444:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006448:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800644c:	82fb      	strh	r3, [r7, #22]
 800644e:	8afb      	ldrh	r3, [r7, #22]
 8006450:	f083 0310 	eor.w	r3, r3, #16
 8006454:	82fb      	strh	r3, [r7, #22]
 8006456:	8afb      	ldrh	r3, [r7, #22]
 8006458:	f083 0320 	eor.w	r3, r3, #32
 800645c:	82fb      	strh	r3, [r7, #22]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	461a      	mov	r2, r3
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	441a      	add	r2, r3
 800646c:	8afb      	ldrh	r3, [r7, #22]
 800646e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006472:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006476:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800647a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800647e:	b29b      	uxth	r3, r3
 8006480:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3798      	adds	r7, #152	@ 0x98
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	607b      	str	r3, [r7, #4]
 8006496:	460b      	mov	r3, r1
 8006498:	817b      	strh	r3, [r7, #10]
 800649a:	4613      	mov	r3, r2
 800649c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800649e:	897b      	ldrh	r3, [r7, #10]
 80064a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00b      	beq.n	80064c2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064aa:	897b      	ldrh	r3, [r7, #10]
 80064ac:	f003 0207 	and.w	r2, r3, #7
 80064b0:	4613      	mov	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	3310      	adds	r3, #16
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	4413      	add	r3, r2
 80064be:	617b      	str	r3, [r7, #20]
 80064c0:	e009      	b.n	80064d6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80064c2:	897a      	ldrh	r2, [r7, #10]
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	00db      	lsls	r3, r3, #3
 80064cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	4413      	add	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80064d6:	893b      	ldrh	r3, [r7, #8]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d107      	bne.n	80064ec <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2200      	movs	r2, #0
 80064e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	80da      	strh	r2, [r3, #6]
 80064ea:	e00b      	b.n	8006504 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	2201      	movs	r2, #1
 80064f0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	0c1b      	lsrs	r3, r3, #16
 80064fe:	b29a      	uxth	r2, r3
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	371c      	adds	r7, #28
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006512:	b480      	push	{r7}
 8006514:	b085      	sub	sp, #20
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006536:	b29b      	uxth	r3, r3
 8006538:	f043 0301 	orr.w	r3, r3, #1
 800653c:	b29a      	uxth	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800654a:	b29b      	uxth	r3, r3
 800654c:	f043 0302 	orr.w	r3, r3, #2
 8006550:	b29a      	uxth	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
	...

08006568 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d141      	bne.n	80065fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006576:	4b4b      	ldr	r3, [pc, #300]	@ (80066a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800657e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006582:	d131      	bne.n	80065e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006584:	4b47      	ldr	r3, [pc, #284]	@ (80066a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800658a:	4a46      	ldr	r2, [pc, #280]	@ (80066a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800658c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006590:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006594:	4b43      	ldr	r3, [pc, #268]	@ (80066a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800659c:	4a41      	ldr	r2, [pc, #260]	@ (80066a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800659e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80065a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80065a4:	4b40      	ldr	r3, [pc, #256]	@ (80066a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2232      	movs	r2, #50	@ 0x32
 80065aa:	fb02 f303 	mul.w	r3, r2, r3
 80065ae:	4a3f      	ldr	r2, [pc, #252]	@ (80066ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80065b0:	fba2 2303 	umull	r2, r3, r2, r3
 80065b4:	0c9b      	lsrs	r3, r3, #18
 80065b6:	3301      	adds	r3, #1
 80065b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065ba:	e002      	b.n	80065c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	3b01      	subs	r3, #1
 80065c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065c2:	4b38      	ldr	r3, [pc, #224]	@ (80066a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065ce:	d102      	bne.n	80065d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1f2      	bne.n	80065bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80065d6:	4b33      	ldr	r3, [pc, #204]	@ (80066a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065e2:	d158      	bne.n	8006696 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e057      	b.n	8006698 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80065e8:	4b2e      	ldr	r3, [pc, #184]	@ (80066a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065ee:	4a2d      	ldr	r2, [pc, #180]	@ (80066a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80065f8:	e04d      	b.n	8006696 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006600:	d141      	bne.n	8006686 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006602:	4b28      	ldr	r3, [pc, #160]	@ (80066a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800660a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800660e:	d131      	bne.n	8006674 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006610:	4b24      	ldr	r3, [pc, #144]	@ (80066a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006612:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006616:	4a23      	ldr	r2, [pc, #140]	@ (80066a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800661c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006620:	4b20      	ldr	r3, [pc, #128]	@ (80066a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006628:	4a1e      	ldr	r2, [pc, #120]	@ (80066a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800662a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800662e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006630:	4b1d      	ldr	r3, [pc, #116]	@ (80066a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2232      	movs	r2, #50	@ 0x32
 8006636:	fb02 f303 	mul.w	r3, r2, r3
 800663a:	4a1c      	ldr	r2, [pc, #112]	@ (80066ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800663c:	fba2 2303 	umull	r2, r3, r2, r3
 8006640:	0c9b      	lsrs	r3, r3, #18
 8006642:	3301      	adds	r3, #1
 8006644:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006646:	e002      	b.n	800664e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	3b01      	subs	r3, #1
 800664c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800664e:	4b15      	ldr	r3, [pc, #84]	@ (80066a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800665a:	d102      	bne.n	8006662 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1f2      	bne.n	8006648 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006662:	4b10      	ldr	r3, [pc, #64]	@ (80066a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800666a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800666e:	d112      	bne.n	8006696 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e011      	b.n	8006698 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006674:	4b0b      	ldr	r3, [pc, #44]	@ (80066a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006676:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800667a:	4a0a      	ldr	r2, [pc, #40]	@ (80066a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800667c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006680:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006684:	e007      	b.n	8006696 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006686:	4b07      	ldr	r3, [pc, #28]	@ (80066a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800668e:	4a05      	ldr	r2, [pc, #20]	@ (80066a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006690:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006694:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr
 80066a4:	40007000 	.word	0x40007000
 80066a8:	20000000 	.word	0x20000000
 80066ac:	431bde83 	.word	0x431bde83

080066b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b088      	sub	sp, #32
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e2fe      	b.n	8006cc0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d075      	beq.n	80067ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066ce:	4b97      	ldr	r3, [pc, #604]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f003 030c 	and.w	r3, r3, #12
 80066d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066d8:	4b94      	ldr	r3, [pc, #592]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	f003 0303 	and.w	r3, r3, #3
 80066e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	2b0c      	cmp	r3, #12
 80066e6:	d102      	bne.n	80066ee <HAL_RCC_OscConfig+0x3e>
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	2b03      	cmp	r3, #3
 80066ec:	d002      	beq.n	80066f4 <HAL_RCC_OscConfig+0x44>
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	2b08      	cmp	r3, #8
 80066f2:	d10b      	bne.n	800670c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066f4:	4b8d      	ldr	r3, [pc, #564]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d05b      	beq.n	80067b8 <HAL_RCC_OscConfig+0x108>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d157      	bne.n	80067b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e2d9      	b.n	8006cc0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006714:	d106      	bne.n	8006724 <HAL_RCC_OscConfig+0x74>
 8006716:	4b85      	ldr	r3, [pc, #532]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a84      	ldr	r2, [pc, #528]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 800671c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006720:	6013      	str	r3, [r2, #0]
 8006722:	e01d      	b.n	8006760 <HAL_RCC_OscConfig+0xb0>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800672c:	d10c      	bne.n	8006748 <HAL_RCC_OscConfig+0x98>
 800672e:	4b7f      	ldr	r3, [pc, #508]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a7e      	ldr	r2, [pc, #504]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 8006734:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006738:	6013      	str	r3, [r2, #0]
 800673a:	4b7c      	ldr	r3, [pc, #496]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a7b      	ldr	r2, [pc, #492]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 8006740:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006744:	6013      	str	r3, [r2, #0]
 8006746:	e00b      	b.n	8006760 <HAL_RCC_OscConfig+0xb0>
 8006748:	4b78      	ldr	r3, [pc, #480]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a77      	ldr	r2, [pc, #476]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 800674e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006752:	6013      	str	r3, [r2, #0]
 8006754:	4b75      	ldr	r3, [pc, #468]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a74      	ldr	r2, [pc, #464]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 800675a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800675e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d013      	beq.n	8006790 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006768:	f7fc fd86 	bl	8003278 <HAL_GetTick>
 800676c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800676e:	e008      	b.n	8006782 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006770:	f7fc fd82 	bl	8003278 <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	2b64      	cmp	r3, #100	@ 0x64
 800677c:	d901      	bls.n	8006782 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e29e      	b.n	8006cc0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006782:	4b6a      	ldr	r3, [pc, #424]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d0f0      	beq.n	8006770 <HAL_RCC_OscConfig+0xc0>
 800678e:	e014      	b.n	80067ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006790:	f7fc fd72 	bl	8003278 <HAL_GetTick>
 8006794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006796:	e008      	b.n	80067aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006798:	f7fc fd6e 	bl	8003278 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	2b64      	cmp	r3, #100	@ 0x64
 80067a4:	d901      	bls.n	80067aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e28a      	b.n	8006cc0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067aa:	4b60      	ldr	r3, [pc, #384]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1f0      	bne.n	8006798 <HAL_RCC_OscConfig+0xe8>
 80067b6:	e000      	b.n	80067ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d075      	beq.n	80068b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067c6:	4b59      	ldr	r3, [pc, #356]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f003 030c 	and.w	r3, r3, #12
 80067ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067d0:	4b56      	ldr	r3, [pc, #344]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f003 0303 	and.w	r3, r3, #3
 80067d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	2b0c      	cmp	r3, #12
 80067de:	d102      	bne.n	80067e6 <HAL_RCC_OscConfig+0x136>
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d002      	beq.n	80067ec <HAL_RCC_OscConfig+0x13c>
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	2b04      	cmp	r3, #4
 80067ea:	d11f      	bne.n	800682c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067ec:	4b4f      	ldr	r3, [pc, #316]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d005      	beq.n	8006804 <HAL_RCC_OscConfig+0x154>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e25d      	b.n	8006cc0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006804:	4b49      	ldr	r3, [pc, #292]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	061b      	lsls	r3, r3, #24
 8006812:	4946      	ldr	r1, [pc, #280]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 8006814:	4313      	orrs	r3, r2
 8006816:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006818:	4b45      	ldr	r3, [pc, #276]	@ (8006930 <HAL_RCC_OscConfig+0x280>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4618      	mov	r0, r3
 800681e:	f7fc fcdf 	bl	80031e0 <HAL_InitTick>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d043      	beq.n	80068b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e249      	b.n	8006cc0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d023      	beq.n	800687c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006834:	4b3d      	ldr	r3, [pc, #244]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a3c      	ldr	r2, [pc, #240]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 800683a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800683e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006840:	f7fc fd1a 	bl	8003278 <HAL_GetTick>
 8006844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006846:	e008      	b.n	800685a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006848:	f7fc fd16 	bl	8003278 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	2b02      	cmp	r3, #2
 8006854:	d901      	bls.n	800685a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e232      	b.n	8006cc0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800685a:	4b34      	ldr	r3, [pc, #208]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0f0      	beq.n	8006848 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006866:	4b31      	ldr	r3, [pc, #196]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	061b      	lsls	r3, r3, #24
 8006874:	492d      	ldr	r1, [pc, #180]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 8006876:	4313      	orrs	r3, r2
 8006878:	604b      	str	r3, [r1, #4]
 800687a:	e01a      	b.n	80068b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800687c:	4b2b      	ldr	r3, [pc, #172]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a2a      	ldr	r2, [pc, #168]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 8006882:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006888:	f7fc fcf6 	bl	8003278 <HAL_GetTick>
 800688c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800688e:	e008      	b.n	80068a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006890:	f7fc fcf2 	bl	8003278 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b02      	cmp	r3, #2
 800689c:	d901      	bls.n	80068a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e20e      	b.n	8006cc0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068a2:	4b22      	ldr	r3, [pc, #136]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1f0      	bne.n	8006890 <HAL_RCC_OscConfig+0x1e0>
 80068ae:	e000      	b.n	80068b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0308 	and.w	r3, r3, #8
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d041      	beq.n	8006942 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d01c      	beq.n	8006900 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068c6:	4b19      	ldr	r3, [pc, #100]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 80068c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068cc:	4a17      	ldr	r2, [pc, #92]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 80068ce:	f043 0301 	orr.w	r3, r3, #1
 80068d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068d6:	f7fc fccf 	bl	8003278 <HAL_GetTick>
 80068da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80068dc:	e008      	b.n	80068f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068de:	f7fc fccb 	bl	8003278 <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d901      	bls.n	80068f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e1e7      	b.n	8006cc0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80068f0:	4b0e      	ldr	r3, [pc, #56]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 80068f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d0ef      	beq.n	80068de <HAL_RCC_OscConfig+0x22e>
 80068fe:	e020      	b.n	8006942 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006900:	4b0a      	ldr	r3, [pc, #40]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 8006902:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006906:	4a09      	ldr	r2, [pc, #36]	@ (800692c <HAL_RCC_OscConfig+0x27c>)
 8006908:	f023 0301 	bic.w	r3, r3, #1
 800690c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006910:	f7fc fcb2 	bl	8003278 <HAL_GetTick>
 8006914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006916:	e00d      	b.n	8006934 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006918:	f7fc fcae 	bl	8003278 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	2b02      	cmp	r3, #2
 8006924:	d906      	bls.n	8006934 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e1ca      	b.n	8006cc0 <HAL_RCC_OscConfig+0x610>
 800692a:	bf00      	nop
 800692c:	40021000 	.word	0x40021000
 8006930:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006934:	4b8c      	ldr	r3, [pc, #560]	@ (8006b68 <HAL_RCC_OscConfig+0x4b8>)
 8006936:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800693a:	f003 0302 	and.w	r3, r3, #2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1ea      	bne.n	8006918 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0304 	and.w	r3, r3, #4
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 80a6 	beq.w	8006a9c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006950:	2300      	movs	r3, #0
 8006952:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006954:	4b84      	ldr	r3, [pc, #528]	@ (8006b68 <HAL_RCC_OscConfig+0x4b8>)
 8006956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006958:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <HAL_RCC_OscConfig+0x2b4>
 8006960:	2301      	movs	r3, #1
 8006962:	e000      	b.n	8006966 <HAL_RCC_OscConfig+0x2b6>
 8006964:	2300      	movs	r3, #0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00d      	beq.n	8006986 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800696a:	4b7f      	ldr	r3, [pc, #508]	@ (8006b68 <HAL_RCC_OscConfig+0x4b8>)
 800696c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800696e:	4a7e      	ldr	r2, [pc, #504]	@ (8006b68 <HAL_RCC_OscConfig+0x4b8>)
 8006970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006974:	6593      	str	r3, [r2, #88]	@ 0x58
 8006976:	4b7c      	ldr	r3, [pc, #496]	@ (8006b68 <HAL_RCC_OscConfig+0x4b8>)
 8006978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800697a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006982:	2301      	movs	r3, #1
 8006984:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006986:	4b79      	ldr	r3, [pc, #484]	@ (8006b6c <HAL_RCC_OscConfig+0x4bc>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800698e:	2b00      	cmp	r3, #0
 8006990:	d118      	bne.n	80069c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006992:	4b76      	ldr	r3, [pc, #472]	@ (8006b6c <HAL_RCC_OscConfig+0x4bc>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a75      	ldr	r2, [pc, #468]	@ (8006b6c <HAL_RCC_OscConfig+0x4bc>)
 8006998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800699c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800699e:	f7fc fc6b 	bl	8003278 <HAL_GetTick>
 80069a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069a4:	e008      	b.n	80069b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069a6:	f7fc fc67 	bl	8003278 <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d901      	bls.n	80069b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e183      	b.n	8006cc0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069b8:	4b6c      	ldr	r3, [pc, #432]	@ (8006b6c <HAL_RCC_OscConfig+0x4bc>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d0f0      	beq.n	80069a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d108      	bne.n	80069de <HAL_RCC_OscConfig+0x32e>
 80069cc:	4b66      	ldr	r3, [pc, #408]	@ (8006b68 <HAL_RCC_OscConfig+0x4b8>)
 80069ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069d2:	4a65      	ldr	r2, [pc, #404]	@ (8006b68 <HAL_RCC_OscConfig+0x4b8>)
 80069d4:	f043 0301 	orr.w	r3, r3, #1
 80069d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80069dc:	e024      	b.n	8006a28 <HAL_RCC_OscConfig+0x378>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	2b05      	cmp	r3, #5
 80069e4:	d110      	bne.n	8006a08 <HAL_RCC_OscConfig+0x358>
 80069e6:	4b60      	ldr	r3, [pc, #384]	@ (8006b68 <HAL_RCC_OscConfig+0x4b8>)
 80069e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069ec:	4a5e      	ldr	r2, [pc, #376]	@ (8006b68 <HAL_RCC_OscConfig+0x4b8>)
 80069ee:	f043 0304 	orr.w	r3, r3, #4
 80069f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80069f6:	4b5c      	ldr	r3, [pc, #368]	@ (8006b68 <HAL_RCC_OscConfig+0x4b8>)
 80069f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069fc:	4a5a      	ldr	r2, [pc, #360]	@ (8006b68 <HAL_RCC_OscConfig+0x4b8>)
 80069fe:	f043 0301 	orr.w	r3, r3, #1
 8006a02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a06:	e00f      	b.n	8006a28 <HAL_RCC_OscConfig+0x378>
 8006a08:	4b57      	ldr	r3, [pc, #348]	@ (8006b68 <HAL_RCC_OscConfig+0x4b8>)
 8006a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a0e:	4a56      	ldr	r2, [pc, #344]	@ (8006b68 <HAL_RCC_OscConfig+0x4b8>)
 8006a10:	f023 0301 	bic.w	r3, r3, #1
 8006a14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a18:	4b53      	ldr	r3, [pc, #332]	@ (8006b68 <HAL_RCC_OscConfig+0x4b8>)
 8006a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a1e:	4a52      	ldr	r2, [pc, #328]	@ (8006b68 <HAL_RCC_OscConfig+0x4b8>)
 8006a20:	f023 0304 	bic.w	r3, r3, #4
 8006a24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d016      	beq.n	8006a5e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a30:	f7fc fc22 	bl	8003278 <HAL_GetTick>
 8006a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a36:	e00a      	b.n	8006a4e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a38:	f7fc fc1e 	bl	8003278 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d901      	bls.n	8006a4e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e138      	b.n	8006cc0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a4e:	4b46      	ldr	r3, [pc, #280]	@ (8006b68 <HAL_RCC_OscConfig+0x4b8>)
 8006a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a54:	f003 0302 	and.w	r3, r3, #2
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d0ed      	beq.n	8006a38 <HAL_RCC_OscConfig+0x388>
 8006a5c:	e015      	b.n	8006a8a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a5e:	f7fc fc0b 	bl	8003278 <HAL_GetTick>
 8006a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a64:	e00a      	b.n	8006a7c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a66:	f7fc fc07 	bl	8003278 <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d901      	bls.n	8006a7c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e121      	b.n	8006cc0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a7c:	4b3a      	ldr	r3, [pc, #232]	@ (8006b68 <HAL_RCC_OscConfig+0x4b8>)
 8006a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a82:	f003 0302 	and.w	r3, r3, #2
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1ed      	bne.n	8006a66 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a8a:	7ffb      	ldrb	r3, [r7, #31]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d105      	bne.n	8006a9c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a90:	4b35      	ldr	r3, [pc, #212]	@ (8006b68 <HAL_RCC_OscConfig+0x4b8>)
 8006a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a94:	4a34      	ldr	r2, [pc, #208]	@ (8006b68 <HAL_RCC_OscConfig+0x4b8>)
 8006a96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a9a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0320 	and.w	r3, r3, #32
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d03c      	beq.n	8006b22 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d01c      	beq.n	8006aea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8006b68 <HAL_RCC_OscConfig+0x4b8>)
 8006ab2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ab6:	4a2c      	ldr	r2, [pc, #176]	@ (8006b68 <HAL_RCC_OscConfig+0x4b8>)
 8006ab8:	f043 0301 	orr.w	r3, r3, #1
 8006abc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ac0:	f7fc fbda 	bl	8003278 <HAL_GetTick>
 8006ac4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006ac6:	e008      	b.n	8006ada <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ac8:	f7fc fbd6 	bl	8003278 <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d901      	bls.n	8006ada <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e0f2      	b.n	8006cc0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006ada:	4b23      	ldr	r3, [pc, #140]	@ (8006b68 <HAL_RCC_OscConfig+0x4b8>)
 8006adc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d0ef      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x418>
 8006ae8:	e01b      	b.n	8006b22 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006aea:	4b1f      	ldr	r3, [pc, #124]	@ (8006b68 <HAL_RCC_OscConfig+0x4b8>)
 8006aec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006af0:	4a1d      	ldr	r2, [pc, #116]	@ (8006b68 <HAL_RCC_OscConfig+0x4b8>)
 8006af2:	f023 0301 	bic.w	r3, r3, #1
 8006af6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006afa:	f7fc fbbd 	bl	8003278 <HAL_GetTick>
 8006afe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b00:	e008      	b.n	8006b14 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b02:	f7fc fbb9 	bl	8003278 <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d901      	bls.n	8006b14 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e0d5      	b.n	8006cc0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b14:	4b14      	ldr	r3, [pc, #80]	@ (8006b68 <HAL_RCC_OscConfig+0x4b8>)
 8006b16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1ef      	bne.n	8006b02 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 80c9 	beq.w	8006cbe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8006b68 <HAL_RCC_OscConfig+0x4b8>)
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f003 030c 	and.w	r3, r3, #12
 8006b34:	2b0c      	cmp	r3, #12
 8006b36:	f000 8083 	beq.w	8006c40 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d15e      	bne.n	8006c00 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b42:	4b09      	ldr	r3, [pc, #36]	@ (8006b68 <HAL_RCC_OscConfig+0x4b8>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a08      	ldr	r2, [pc, #32]	@ (8006b68 <HAL_RCC_OscConfig+0x4b8>)
 8006b48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b4e:	f7fc fb93 	bl	8003278 <HAL_GetTick>
 8006b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b54:	e00c      	b.n	8006b70 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b56:	f7fc fb8f 	bl	8003278 <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d905      	bls.n	8006b70 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e0ab      	b.n	8006cc0 <HAL_RCC_OscConfig+0x610>
 8006b68:	40021000 	.word	0x40021000
 8006b6c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b70:	4b55      	ldr	r3, [pc, #340]	@ (8006cc8 <HAL_RCC_OscConfig+0x618>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1ec      	bne.n	8006b56 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b7c:	4b52      	ldr	r3, [pc, #328]	@ (8006cc8 <HAL_RCC_OscConfig+0x618>)
 8006b7e:	68da      	ldr	r2, [r3, #12]
 8006b80:	4b52      	ldr	r3, [pc, #328]	@ (8006ccc <HAL_RCC_OscConfig+0x61c>)
 8006b82:	4013      	ands	r3, r2
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	6a11      	ldr	r1, [r2, #32]
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006b8c:	3a01      	subs	r2, #1
 8006b8e:	0112      	lsls	r2, r2, #4
 8006b90:	4311      	orrs	r1, r2
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006b96:	0212      	lsls	r2, r2, #8
 8006b98:	4311      	orrs	r1, r2
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006b9e:	0852      	lsrs	r2, r2, #1
 8006ba0:	3a01      	subs	r2, #1
 8006ba2:	0552      	lsls	r2, r2, #21
 8006ba4:	4311      	orrs	r1, r2
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006baa:	0852      	lsrs	r2, r2, #1
 8006bac:	3a01      	subs	r2, #1
 8006bae:	0652      	lsls	r2, r2, #25
 8006bb0:	4311      	orrs	r1, r2
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006bb6:	06d2      	lsls	r2, r2, #27
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	4943      	ldr	r1, [pc, #268]	@ (8006cc8 <HAL_RCC_OscConfig+0x618>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bc0:	4b41      	ldr	r3, [pc, #260]	@ (8006cc8 <HAL_RCC_OscConfig+0x618>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a40      	ldr	r2, [pc, #256]	@ (8006cc8 <HAL_RCC_OscConfig+0x618>)
 8006bc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006bca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006bcc:	4b3e      	ldr	r3, [pc, #248]	@ (8006cc8 <HAL_RCC_OscConfig+0x618>)
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	4a3d      	ldr	r2, [pc, #244]	@ (8006cc8 <HAL_RCC_OscConfig+0x618>)
 8006bd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006bd6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bd8:	f7fc fb4e 	bl	8003278 <HAL_GetTick>
 8006bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bde:	e008      	b.n	8006bf2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006be0:	f7fc fb4a 	bl	8003278 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d901      	bls.n	8006bf2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e066      	b.n	8006cc0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bf2:	4b35      	ldr	r3, [pc, #212]	@ (8006cc8 <HAL_RCC_OscConfig+0x618>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d0f0      	beq.n	8006be0 <HAL_RCC_OscConfig+0x530>
 8006bfe:	e05e      	b.n	8006cbe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c00:	4b31      	ldr	r3, [pc, #196]	@ (8006cc8 <HAL_RCC_OscConfig+0x618>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a30      	ldr	r2, [pc, #192]	@ (8006cc8 <HAL_RCC_OscConfig+0x618>)
 8006c06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c0c:	f7fc fb34 	bl	8003278 <HAL_GetTick>
 8006c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c12:	e008      	b.n	8006c26 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c14:	f7fc fb30 	bl	8003278 <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d901      	bls.n	8006c26 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e04c      	b.n	8006cc0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c26:	4b28      	ldr	r3, [pc, #160]	@ (8006cc8 <HAL_RCC_OscConfig+0x618>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1f0      	bne.n	8006c14 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006c32:	4b25      	ldr	r3, [pc, #148]	@ (8006cc8 <HAL_RCC_OscConfig+0x618>)
 8006c34:	68da      	ldr	r2, [r3, #12]
 8006c36:	4924      	ldr	r1, [pc, #144]	@ (8006cc8 <HAL_RCC_OscConfig+0x618>)
 8006c38:	4b25      	ldr	r3, [pc, #148]	@ (8006cd0 <HAL_RCC_OscConfig+0x620>)
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	60cb      	str	r3, [r1, #12]
 8006c3e:	e03e      	b.n	8006cbe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	69db      	ldr	r3, [r3, #28]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d101      	bne.n	8006c4c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e039      	b.n	8006cc0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8006cc8 <HAL_RCC_OscConfig+0x618>)
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f003 0203 	and.w	r2, r3, #3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d12c      	bne.n	8006cba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d123      	bne.n	8006cba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d11b      	bne.n	8006cba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c8c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d113      	bne.n	8006cba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c9c:	085b      	lsrs	r3, r3, #1
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d109      	bne.n	8006cba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cb0:	085b      	lsrs	r3, r3, #1
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d001      	beq.n	8006cbe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e000      	b.n	8006cc0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3720      	adds	r7, #32
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	40021000 	.word	0x40021000
 8006ccc:	019f800c 	.word	0x019f800c
 8006cd0:	feeefffc 	.word	0xfeeefffc

08006cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d101      	bne.n	8006cec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e11e      	b.n	8006f2a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006cec:	4b91      	ldr	r3, [pc, #580]	@ (8006f34 <HAL_RCC_ClockConfig+0x260>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 030f 	and.w	r3, r3, #15
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d910      	bls.n	8006d1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cfa:	4b8e      	ldr	r3, [pc, #568]	@ (8006f34 <HAL_RCC_ClockConfig+0x260>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f023 020f 	bic.w	r2, r3, #15
 8006d02:	498c      	ldr	r1, [pc, #560]	@ (8006f34 <HAL_RCC_ClockConfig+0x260>)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d0a:	4b8a      	ldr	r3, [pc, #552]	@ (8006f34 <HAL_RCC_ClockConfig+0x260>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 030f 	and.w	r3, r3, #15
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d001      	beq.n	8006d1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e106      	b.n	8006f2a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0301 	and.w	r3, r3, #1
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d073      	beq.n	8006e10 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	2b03      	cmp	r3, #3
 8006d2e:	d129      	bne.n	8006d84 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d30:	4b81      	ldr	r3, [pc, #516]	@ (8006f38 <HAL_RCC_ClockConfig+0x264>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d101      	bne.n	8006d40 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e0f4      	b.n	8006f2a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006d40:	f000 f99e 	bl	8007080 <RCC_GetSysClockFreqFromPLLSource>
 8006d44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	4a7c      	ldr	r2, [pc, #496]	@ (8006f3c <HAL_RCC_ClockConfig+0x268>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d93f      	bls.n	8006dce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006d4e:	4b7a      	ldr	r3, [pc, #488]	@ (8006f38 <HAL_RCC_ClockConfig+0x264>)
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d009      	beq.n	8006d6e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d033      	beq.n	8006dce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d12f      	bne.n	8006dce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006d6e:	4b72      	ldr	r3, [pc, #456]	@ (8006f38 <HAL_RCC_ClockConfig+0x264>)
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d76:	4a70      	ldr	r2, [pc, #448]	@ (8006f38 <HAL_RCC_ClockConfig+0x264>)
 8006d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d7c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006d7e:	2380      	movs	r3, #128	@ 0x80
 8006d80:	617b      	str	r3, [r7, #20]
 8006d82:	e024      	b.n	8006dce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d107      	bne.n	8006d9c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d8c:	4b6a      	ldr	r3, [pc, #424]	@ (8006f38 <HAL_RCC_ClockConfig+0x264>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d109      	bne.n	8006dac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e0c6      	b.n	8006f2a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d9c:	4b66      	ldr	r3, [pc, #408]	@ (8006f38 <HAL_RCC_ClockConfig+0x264>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d101      	bne.n	8006dac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e0be      	b.n	8006f2a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006dac:	f000 f8ce 	bl	8006f4c <HAL_RCC_GetSysClockFreq>
 8006db0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	4a61      	ldr	r2, [pc, #388]	@ (8006f3c <HAL_RCC_ClockConfig+0x268>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d909      	bls.n	8006dce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006dba:	4b5f      	ldr	r3, [pc, #380]	@ (8006f38 <HAL_RCC_ClockConfig+0x264>)
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006dc2:	4a5d      	ldr	r2, [pc, #372]	@ (8006f38 <HAL_RCC_ClockConfig+0x264>)
 8006dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dc8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006dca:	2380      	movs	r3, #128	@ 0x80
 8006dcc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006dce:	4b5a      	ldr	r3, [pc, #360]	@ (8006f38 <HAL_RCC_ClockConfig+0x264>)
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f023 0203 	bic.w	r2, r3, #3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	4957      	ldr	r1, [pc, #348]	@ (8006f38 <HAL_RCC_ClockConfig+0x264>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006de0:	f7fc fa4a 	bl	8003278 <HAL_GetTick>
 8006de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006de6:	e00a      	b.n	8006dfe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006de8:	f7fc fa46 	bl	8003278 <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d901      	bls.n	8006dfe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e095      	b.n	8006f2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dfe:	4b4e      	ldr	r3, [pc, #312]	@ (8006f38 <HAL_RCC_ClockConfig+0x264>)
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f003 020c 	and.w	r2, r3, #12
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d1eb      	bne.n	8006de8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0302 	and.w	r3, r3, #2
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d023      	beq.n	8006e64 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0304 	and.w	r3, r3, #4
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e28:	4b43      	ldr	r3, [pc, #268]	@ (8006f38 <HAL_RCC_ClockConfig+0x264>)
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	4a42      	ldr	r2, [pc, #264]	@ (8006f38 <HAL_RCC_ClockConfig+0x264>)
 8006e2e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006e32:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0308 	and.w	r3, r3, #8
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d007      	beq.n	8006e50 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006e40:	4b3d      	ldr	r3, [pc, #244]	@ (8006f38 <HAL_RCC_ClockConfig+0x264>)
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006e48:	4a3b      	ldr	r2, [pc, #236]	@ (8006f38 <HAL_RCC_ClockConfig+0x264>)
 8006e4a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006e4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e50:	4b39      	ldr	r3, [pc, #228]	@ (8006f38 <HAL_RCC_ClockConfig+0x264>)
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	4936      	ldr	r1, [pc, #216]	@ (8006f38 <HAL_RCC_ClockConfig+0x264>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	608b      	str	r3, [r1, #8]
 8006e62:	e008      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	2b80      	cmp	r3, #128	@ 0x80
 8006e68:	d105      	bne.n	8006e76 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006e6a:	4b33      	ldr	r3, [pc, #204]	@ (8006f38 <HAL_RCC_ClockConfig+0x264>)
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	4a32      	ldr	r2, [pc, #200]	@ (8006f38 <HAL_RCC_ClockConfig+0x264>)
 8006e70:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e74:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e76:	4b2f      	ldr	r3, [pc, #188]	@ (8006f34 <HAL_RCC_ClockConfig+0x260>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 030f 	and.w	r3, r3, #15
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d21d      	bcs.n	8006ec0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e84:	4b2b      	ldr	r3, [pc, #172]	@ (8006f34 <HAL_RCC_ClockConfig+0x260>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f023 020f 	bic.w	r2, r3, #15
 8006e8c:	4929      	ldr	r1, [pc, #164]	@ (8006f34 <HAL_RCC_ClockConfig+0x260>)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006e94:	f7fc f9f0 	bl	8003278 <HAL_GetTick>
 8006e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e9a:	e00a      	b.n	8006eb2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e9c:	f7fc f9ec 	bl	8003278 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e03b      	b.n	8006f2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eb2:	4b20      	ldr	r3, [pc, #128]	@ (8006f34 <HAL_RCC_ClockConfig+0x260>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 030f 	and.w	r3, r3, #15
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d1ed      	bne.n	8006e9c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d008      	beq.n	8006ede <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8006f38 <HAL_RCC_ClockConfig+0x264>)
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	4917      	ldr	r1, [pc, #92]	@ (8006f38 <HAL_RCC_ClockConfig+0x264>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0308 	and.w	r3, r3, #8
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d009      	beq.n	8006efe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006eea:	4b13      	ldr	r3, [pc, #76]	@ (8006f38 <HAL_RCC_ClockConfig+0x264>)
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	00db      	lsls	r3, r3, #3
 8006ef8:	490f      	ldr	r1, [pc, #60]	@ (8006f38 <HAL_RCC_ClockConfig+0x264>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006efe:	f000 f825 	bl	8006f4c <HAL_RCC_GetSysClockFreq>
 8006f02:	4602      	mov	r2, r0
 8006f04:	4b0c      	ldr	r3, [pc, #48]	@ (8006f38 <HAL_RCC_ClockConfig+0x264>)
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	091b      	lsrs	r3, r3, #4
 8006f0a:	f003 030f 	and.w	r3, r3, #15
 8006f0e:	490c      	ldr	r1, [pc, #48]	@ (8006f40 <HAL_RCC_ClockConfig+0x26c>)
 8006f10:	5ccb      	ldrb	r3, [r1, r3]
 8006f12:	f003 031f 	and.w	r3, r3, #31
 8006f16:	fa22 f303 	lsr.w	r3, r2, r3
 8006f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8006f44 <HAL_RCC_ClockConfig+0x270>)
 8006f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f48 <HAL_RCC_ClockConfig+0x274>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7fc f95c 	bl	80031e0 <HAL_InitTick>
 8006f28:	4603      	mov	r3, r0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3718      	adds	r7, #24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	40022000 	.word	0x40022000
 8006f38:	40021000 	.word	0x40021000
 8006f3c:	04c4b400 	.word	0x04c4b400
 8006f40:	080118dc 	.word	0x080118dc
 8006f44:	20000000 	.word	0x20000000
 8006f48:	20000004 	.word	0x20000004

08006f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b087      	sub	sp, #28
 8006f50:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006f52:	4b2c      	ldr	r3, [pc, #176]	@ (8007004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f003 030c 	and.w	r3, r3, #12
 8006f5a:	2b04      	cmp	r3, #4
 8006f5c:	d102      	bne.n	8006f64 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006f5e:	4b2a      	ldr	r3, [pc, #168]	@ (8007008 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006f60:	613b      	str	r3, [r7, #16]
 8006f62:	e047      	b.n	8006ff4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006f64:	4b27      	ldr	r3, [pc, #156]	@ (8007004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f003 030c 	and.w	r3, r3, #12
 8006f6c:	2b08      	cmp	r3, #8
 8006f6e:	d102      	bne.n	8006f76 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006f70:	4b26      	ldr	r3, [pc, #152]	@ (800700c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006f72:	613b      	str	r3, [r7, #16]
 8006f74:	e03e      	b.n	8006ff4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006f76:	4b23      	ldr	r3, [pc, #140]	@ (8007004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f003 030c 	and.w	r3, r3, #12
 8006f7e:	2b0c      	cmp	r3, #12
 8006f80:	d136      	bne.n	8006ff0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006f82:	4b20      	ldr	r3, [pc, #128]	@ (8007004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f003 0303 	and.w	r3, r3, #3
 8006f8a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8007004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	091b      	lsrs	r3, r3, #4
 8006f92:	f003 030f 	and.w	r3, r3, #15
 8006f96:	3301      	adds	r3, #1
 8006f98:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2b03      	cmp	r3, #3
 8006f9e:	d10c      	bne.n	8006fba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006fa0:	4a1a      	ldr	r2, [pc, #104]	@ (800700c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa8:	4a16      	ldr	r2, [pc, #88]	@ (8007004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006faa:	68d2      	ldr	r2, [r2, #12]
 8006fac:	0a12      	lsrs	r2, r2, #8
 8006fae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006fb2:	fb02 f303 	mul.w	r3, r2, r3
 8006fb6:	617b      	str	r3, [r7, #20]
      break;
 8006fb8:	e00c      	b.n	8006fd4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006fba:	4a13      	ldr	r2, [pc, #76]	@ (8007008 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc2:	4a10      	ldr	r2, [pc, #64]	@ (8007004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fc4:	68d2      	ldr	r2, [r2, #12]
 8006fc6:	0a12      	lsrs	r2, r2, #8
 8006fc8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006fcc:	fb02 f303 	mul.w	r3, r2, r3
 8006fd0:	617b      	str	r3, [r7, #20]
      break;
 8006fd2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8007004 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	0e5b      	lsrs	r3, r3, #25
 8006fda:	f003 0303 	and.w	r3, r3, #3
 8006fde:	3301      	adds	r3, #1
 8006fe0:	005b      	lsls	r3, r3, #1
 8006fe2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fec:	613b      	str	r3, [r7, #16]
 8006fee:	e001      	b.n	8006ff4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006ff4:	693b      	ldr	r3, [r7, #16]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	371c      	adds	r7, #28
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	40021000 	.word	0x40021000
 8007008:	00f42400 	.word	0x00f42400
 800700c:	02dc6c00 	.word	0x02dc6c00

08007010 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007010:	b480      	push	{r7}
 8007012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007014:	4b03      	ldr	r3, [pc, #12]	@ (8007024 <HAL_RCC_GetHCLKFreq+0x14>)
 8007016:	681b      	ldr	r3, [r3, #0]
}
 8007018:	4618      	mov	r0, r3
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	20000000 	.word	0x20000000

08007028 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800702c:	f7ff fff0 	bl	8007010 <HAL_RCC_GetHCLKFreq>
 8007030:	4602      	mov	r2, r0
 8007032:	4b06      	ldr	r3, [pc, #24]	@ (800704c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	0a1b      	lsrs	r3, r3, #8
 8007038:	f003 0307 	and.w	r3, r3, #7
 800703c:	4904      	ldr	r1, [pc, #16]	@ (8007050 <HAL_RCC_GetPCLK1Freq+0x28>)
 800703e:	5ccb      	ldrb	r3, [r1, r3]
 8007040:	f003 031f 	and.w	r3, r3, #31
 8007044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007048:	4618      	mov	r0, r3
 800704a:	bd80      	pop	{r7, pc}
 800704c:	40021000 	.word	0x40021000
 8007050:	080118ec 	.word	0x080118ec

08007054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007058:	f7ff ffda 	bl	8007010 <HAL_RCC_GetHCLKFreq>
 800705c:	4602      	mov	r2, r0
 800705e:	4b06      	ldr	r3, [pc, #24]	@ (8007078 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	0adb      	lsrs	r3, r3, #11
 8007064:	f003 0307 	and.w	r3, r3, #7
 8007068:	4904      	ldr	r1, [pc, #16]	@ (800707c <HAL_RCC_GetPCLK2Freq+0x28>)
 800706a:	5ccb      	ldrb	r3, [r1, r3]
 800706c:	f003 031f 	and.w	r3, r3, #31
 8007070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007074:	4618      	mov	r0, r3
 8007076:	bd80      	pop	{r7, pc}
 8007078:	40021000 	.word	0x40021000
 800707c:	080118ec 	.word	0x080118ec

08007080 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007080:	b480      	push	{r7}
 8007082:	b087      	sub	sp, #28
 8007084:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007086:	4b1e      	ldr	r3, [pc, #120]	@ (8007100 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	f003 0303 	and.w	r3, r3, #3
 800708e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007090:	4b1b      	ldr	r3, [pc, #108]	@ (8007100 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	091b      	lsrs	r3, r3, #4
 8007096:	f003 030f 	and.w	r3, r3, #15
 800709a:	3301      	adds	r3, #1
 800709c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	2b03      	cmp	r3, #3
 80070a2:	d10c      	bne.n	80070be <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80070a4:	4a17      	ldr	r2, [pc, #92]	@ (8007104 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ac:	4a14      	ldr	r2, [pc, #80]	@ (8007100 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80070ae:	68d2      	ldr	r2, [r2, #12]
 80070b0:	0a12      	lsrs	r2, r2, #8
 80070b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80070b6:	fb02 f303 	mul.w	r3, r2, r3
 80070ba:	617b      	str	r3, [r7, #20]
    break;
 80070bc:	e00c      	b.n	80070d8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80070be:	4a12      	ldr	r2, [pc, #72]	@ (8007108 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c6:	4a0e      	ldr	r2, [pc, #56]	@ (8007100 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80070c8:	68d2      	ldr	r2, [r2, #12]
 80070ca:	0a12      	lsrs	r2, r2, #8
 80070cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80070d0:	fb02 f303 	mul.w	r3, r2, r3
 80070d4:	617b      	str	r3, [r7, #20]
    break;
 80070d6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80070d8:	4b09      	ldr	r3, [pc, #36]	@ (8007100 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	0e5b      	lsrs	r3, r3, #25
 80070de:	f003 0303 	and.w	r3, r3, #3
 80070e2:	3301      	adds	r3, #1
 80070e4:	005b      	lsls	r3, r3, #1
 80070e6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80070f2:	687b      	ldr	r3, [r7, #4]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	371c      	adds	r7, #28
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	40021000 	.word	0x40021000
 8007104:	02dc6c00 	.word	0x02dc6c00
 8007108:	00f42400 	.word	0x00f42400

0800710c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007114:	2300      	movs	r3, #0
 8007116:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007118:	2300      	movs	r3, #0
 800711a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007124:	2b00      	cmp	r3, #0
 8007126:	f000 8098 	beq.w	800725a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800712a:	2300      	movs	r3, #0
 800712c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800712e:	4b43      	ldr	r3, [pc, #268]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10d      	bne.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800713a:	4b40      	ldr	r3, [pc, #256]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800713c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800713e:	4a3f      	ldr	r2, [pc, #252]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007144:	6593      	str	r3, [r2, #88]	@ 0x58
 8007146:	4b3d      	ldr	r3, [pc, #244]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800714a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800714e:	60bb      	str	r3, [r7, #8]
 8007150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007152:	2301      	movs	r3, #1
 8007154:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007156:	4b3a      	ldr	r3, [pc, #232]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a39      	ldr	r2, [pc, #228]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800715c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007160:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007162:	f7fc f889 	bl	8003278 <HAL_GetTick>
 8007166:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007168:	e009      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800716a:	f7fc f885 	bl	8003278 <HAL_GetTick>
 800716e:	4602      	mov	r2, r0
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	2b02      	cmp	r3, #2
 8007176:	d902      	bls.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	74fb      	strb	r3, [r7, #19]
        break;
 800717c:	e005      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800717e:	4b30      	ldr	r3, [pc, #192]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007186:	2b00      	cmp	r3, #0
 8007188:	d0ef      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800718a:	7cfb      	ldrb	r3, [r7, #19]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d159      	bne.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007190:	4b2a      	ldr	r3, [pc, #168]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007196:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800719a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d01e      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d019      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80071ac:	4b23      	ldr	r3, [pc, #140]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80071b8:	4b20      	ldr	r3, [pc, #128]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071be:	4a1f      	ldr	r2, [pc, #124]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80071c8:	4b1c      	ldr	r3, [pc, #112]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071ce:	4a1b      	ldr	r2, [pc, #108]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80071d8:	4a18      	ldr	r2, [pc, #96]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d016      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ea:	f7fc f845 	bl	8003278 <HAL_GetTick>
 80071ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071f0:	e00b      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071f2:	f7fc f841 	bl	8003278 <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007200:	4293      	cmp	r3, r2
 8007202:	d902      	bls.n	800720a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	74fb      	strb	r3, [r7, #19]
            break;
 8007208:	e006      	b.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800720a:	4b0c      	ldr	r3, [pc, #48]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800720c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007210:	f003 0302 	and.w	r3, r3, #2
 8007214:	2b00      	cmp	r3, #0
 8007216:	d0ec      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007218:	7cfb      	ldrb	r3, [r7, #19]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10b      	bne.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800721e:	4b07      	ldr	r3, [pc, #28]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007224:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800722c:	4903      	ldr	r1, [pc, #12]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800722e:	4313      	orrs	r3, r2
 8007230:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007234:	e008      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007236:	7cfb      	ldrb	r3, [r7, #19]
 8007238:	74bb      	strb	r3, [r7, #18]
 800723a:	e005      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800723c:	40021000 	.word	0x40021000
 8007240:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007244:	7cfb      	ldrb	r3, [r7, #19]
 8007246:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007248:	7c7b      	ldrb	r3, [r7, #17]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d105      	bne.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800724e:	4ba7      	ldr	r3, [pc, #668]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007252:	4aa6      	ldr	r2, [pc, #664]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007254:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007258:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0301 	and.w	r3, r3, #1
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00a      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007266:	4ba1      	ldr	r3, [pc, #644]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800726c:	f023 0203 	bic.w	r2, r3, #3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	499d      	ldr	r1, [pc, #628]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007276:	4313      	orrs	r3, r2
 8007278:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0302 	and.w	r3, r3, #2
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00a      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007288:	4b98      	ldr	r3, [pc, #608]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800728a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800728e:	f023 020c 	bic.w	r2, r3, #12
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	4995      	ldr	r1, [pc, #596]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007298:	4313      	orrs	r3, r2
 800729a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0304 	and.w	r3, r3, #4
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00a      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80072aa:	4b90      	ldr	r3, [pc, #576]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	498c      	ldr	r1, [pc, #560]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0308 	and.w	r3, r3, #8
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00a      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80072cc:	4b87      	ldr	r3, [pc, #540]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	4984      	ldr	r1, [pc, #528]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0310 	and.w	r3, r3, #16
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00a      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80072ee:	4b7f      	ldr	r3, [pc, #508]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	695b      	ldr	r3, [r3, #20]
 80072fc:	497b      	ldr	r1, [pc, #492]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072fe:	4313      	orrs	r3, r2
 8007300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0320 	and.w	r3, r3, #32
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00a      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007310:	4b76      	ldr	r3, [pc, #472]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007316:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	4973      	ldr	r1, [pc, #460]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007320:	4313      	orrs	r3, r2
 8007322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00a      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007332:	4b6e      	ldr	r3, [pc, #440]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007338:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	69db      	ldr	r3, [r3, #28]
 8007340:	496a      	ldr	r1, [pc, #424]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007342:	4313      	orrs	r3, r2
 8007344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00a      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007354:	4b65      	ldr	r3, [pc, #404]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800735a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a1b      	ldr	r3, [r3, #32]
 8007362:	4962      	ldr	r1, [pc, #392]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007364:	4313      	orrs	r3, r2
 8007366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00a      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007376:	4b5d      	ldr	r3, [pc, #372]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800737c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007384:	4959      	ldr	r1, [pc, #356]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007386:	4313      	orrs	r3, r2
 8007388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00a      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007398:	4b54      	ldr	r3, [pc, #336]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800739a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800739e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a6:	4951      	ldr	r1, [pc, #324]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073a8:	4313      	orrs	r3, r2
 80073aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d015      	beq.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80073ba:	4b4c      	ldr	r3, [pc, #304]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073c0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c8:	4948      	ldr	r1, [pc, #288]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073d8:	d105      	bne.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073da:	4b44      	ldr	r3, [pc, #272]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	4a43      	ldr	r2, [pc, #268]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073e4:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d015      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80073f2:	4b3e      	ldr	r3, [pc, #248]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073f8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007400:	493a      	ldr	r1, [pc, #232]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007402:	4313      	orrs	r3, r2
 8007404:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800740c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007410:	d105      	bne.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007412:	4b36      	ldr	r3, [pc, #216]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	4a35      	ldr	r2, [pc, #212]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007418:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800741c:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d015      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800742a:	4b30      	ldr	r3, [pc, #192]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800742c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007430:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007438:	492c      	ldr	r1, [pc, #176]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800743a:	4313      	orrs	r3, r2
 800743c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007444:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007448:	d105      	bne.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800744a:	4b28      	ldr	r3, [pc, #160]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	4a27      	ldr	r2, [pc, #156]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007450:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007454:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d015      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007462:	4b22      	ldr	r3, [pc, #136]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007468:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007470:	491e      	ldr	r1, [pc, #120]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007472:	4313      	orrs	r3, r2
 8007474:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800747c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007480:	d105      	bne.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007482:	4b1a      	ldr	r3, [pc, #104]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	4a19      	ldr	r2, [pc, #100]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007488:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800748c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d015      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800749a:	4b14      	ldr	r3, [pc, #80]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800749c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074a0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074a8:	4910      	ldr	r1, [pc, #64]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074aa:	4313      	orrs	r3, r2
 80074ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074b8:	d105      	bne.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074ba:	4b0c      	ldr	r3, [pc, #48]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	4a0b      	ldr	r2, [pc, #44]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074c4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d018      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80074d2:	4b06      	ldr	r3, [pc, #24]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074d8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e0:	4902      	ldr	r1, [pc, #8]	@ (80074ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074e2:	4313      	orrs	r3, r2
 80074e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	e001      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80074ec:	40021000 	.word	0x40021000
 80074f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074f6:	d105      	bne.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80074f8:	4b21      	ldr	r3, [pc, #132]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	4a20      	ldr	r2, [pc, #128]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80074fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007502:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d015      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007510:	4b1b      	ldr	r3, [pc, #108]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007516:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800751e:	4918      	ldr	r1, [pc, #96]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007520:	4313      	orrs	r3, r2
 8007522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800752a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800752e:	d105      	bne.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007530:	4b13      	ldr	r3, [pc, #76]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	4a12      	ldr	r2, [pc, #72]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007536:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800753a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d015      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007548:	4b0d      	ldr	r3, [pc, #52]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800754a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800754e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007556:	490a      	ldr	r1, [pc, #40]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007558:	4313      	orrs	r3, r2
 800755a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007562:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007566:	d105      	bne.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007568:	4b05      	ldr	r3, [pc, #20]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	4a04      	ldr	r2, [pc, #16]	@ (8007580 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800756e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007572:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007574:	7cbb      	ldrb	r3, [r7, #18]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3718      	adds	r7, #24
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	40021000 	.word	0x40021000

08007584 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e09d      	b.n	80076d2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800759a:	2b00      	cmp	r3, #0
 800759c:	d108      	bne.n	80075b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075a6:	d009      	beq.n	80075bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	61da      	str	r2, [r3, #28]
 80075ae:	e005      	b.n	80075bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d106      	bne.n	80075dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7fb f8ee 	bl	80027b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2202      	movs	r2, #2
 80075e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80075fc:	d902      	bls.n	8007604 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80075fe:	2300      	movs	r3, #0
 8007600:	60fb      	str	r3, [r7, #12]
 8007602:	e002      	b.n	800760a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007604:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007608:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007612:	d007      	beq.n	8007624 <HAL_SPI_Init+0xa0>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800761c:	d002      	beq.n	8007624 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007634:	431a      	orrs	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	431a      	orrs	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	695b      	ldr	r3, [r3, #20]
 8007644:	f003 0301 	and.w	r3, r3, #1
 8007648:	431a      	orrs	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007652:	431a      	orrs	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	69db      	ldr	r3, [r3, #28]
 8007658:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800765c:	431a      	orrs	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007666:	ea42 0103 	orr.w	r1, r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800766e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	430a      	orrs	r2, r1
 8007678:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	0c1b      	lsrs	r3, r3, #16
 8007680:	f003 0204 	and.w	r2, r3, #4
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007688:	f003 0310 	and.w	r3, r3, #16
 800768c:	431a      	orrs	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007692:	f003 0308 	and.w	r3, r3, #8
 8007696:	431a      	orrs	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80076a0:	ea42 0103 	orr.w	r1, r2, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	430a      	orrs	r2, r1
 80076b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	69da      	ldr	r2, [r3, #28]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80076c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b082      	sub	sp, #8
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d101      	bne.n	80076ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e049      	b.n	8007780 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d106      	bne.n	8007706 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f7fb f89d 	bl	8002840 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2202      	movs	r2, #2
 800770a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	3304      	adds	r3, #4
 8007716:	4619      	mov	r1, r3
 8007718:	4610      	mov	r0, r2
 800771a:	f000 f949 	bl	80079b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2201      	movs	r2, #1
 800773a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007794:	2300      	movs	r3, #0
 8007796:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d101      	bne.n	80077a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80077a2:	2302      	movs	r3, #2
 80077a4:	e0ff      	b.n	80079a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2b14      	cmp	r3, #20
 80077b2:	f200 80f0 	bhi.w	8007996 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80077b6:	a201      	add	r2, pc, #4	@ (adr r2, 80077bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80077b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077bc:	08007811 	.word	0x08007811
 80077c0:	08007997 	.word	0x08007997
 80077c4:	08007997 	.word	0x08007997
 80077c8:	08007997 	.word	0x08007997
 80077cc:	08007851 	.word	0x08007851
 80077d0:	08007997 	.word	0x08007997
 80077d4:	08007997 	.word	0x08007997
 80077d8:	08007997 	.word	0x08007997
 80077dc:	08007893 	.word	0x08007893
 80077e0:	08007997 	.word	0x08007997
 80077e4:	08007997 	.word	0x08007997
 80077e8:	08007997 	.word	0x08007997
 80077ec:	080078d3 	.word	0x080078d3
 80077f0:	08007997 	.word	0x08007997
 80077f4:	08007997 	.word	0x08007997
 80077f8:	08007997 	.word	0x08007997
 80077fc:	08007915 	.word	0x08007915
 8007800:	08007997 	.word	0x08007997
 8007804:	08007997 	.word	0x08007997
 8007808:	08007997 	.word	0x08007997
 800780c:	08007955 	.word	0x08007955
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68b9      	ldr	r1, [r7, #8]
 8007816:	4618      	mov	r0, r3
 8007818:	f000 f974 	bl	8007b04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	699a      	ldr	r2, [r3, #24]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f042 0208 	orr.w	r2, r2, #8
 800782a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699a      	ldr	r2, [r3, #24]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f022 0204 	bic.w	r2, r2, #4
 800783a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6999      	ldr	r1, [r3, #24]
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	691a      	ldr	r2, [r3, #16]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	430a      	orrs	r2, r1
 800784c:	619a      	str	r2, [r3, #24]
      break;
 800784e:	e0a5      	b.n	800799c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68b9      	ldr	r1, [r7, #8]
 8007856:	4618      	mov	r0, r3
 8007858:	f000 f9ee 	bl	8007c38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	699a      	ldr	r2, [r3, #24]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800786a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	699a      	ldr	r2, [r3, #24]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800787a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6999      	ldr	r1, [r3, #24]
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	021a      	lsls	r2, r3, #8
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	430a      	orrs	r2, r1
 800788e:	619a      	str	r2, [r3, #24]
      break;
 8007890:	e084      	b.n	800799c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68b9      	ldr	r1, [r7, #8]
 8007898:	4618      	mov	r0, r3
 800789a:	f000 fa61 	bl	8007d60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	69da      	ldr	r2, [r3, #28]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f042 0208 	orr.w	r2, r2, #8
 80078ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	69da      	ldr	r2, [r3, #28]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f022 0204 	bic.w	r2, r2, #4
 80078bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	69d9      	ldr	r1, [r3, #28]
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	691a      	ldr	r2, [r3, #16]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	430a      	orrs	r2, r1
 80078ce:	61da      	str	r2, [r3, #28]
      break;
 80078d0:	e064      	b.n	800799c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68b9      	ldr	r1, [r7, #8]
 80078d8:	4618      	mov	r0, r3
 80078da:	f000 fad3 	bl	8007e84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	69da      	ldr	r2, [r3, #28]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	69da      	ldr	r2, [r3, #28]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	69d9      	ldr	r1, [r3, #28]
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	021a      	lsls	r2, r3, #8
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	430a      	orrs	r2, r1
 8007910:	61da      	str	r2, [r3, #28]
      break;
 8007912:	e043      	b.n	800799c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68b9      	ldr	r1, [r7, #8]
 800791a:	4618      	mov	r0, r3
 800791c:	f000 fb46 	bl	8007fac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f042 0208 	orr.w	r2, r2, #8
 800792e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f022 0204 	bic.w	r2, r2, #4
 800793e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	691a      	ldr	r2, [r3, #16]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	430a      	orrs	r2, r1
 8007950:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007952:	e023      	b.n	800799c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68b9      	ldr	r1, [r7, #8]
 800795a:	4618      	mov	r0, r3
 800795c:	f000 fb90 	bl	8008080 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800796e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800797e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	021a      	lsls	r2, r3, #8
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	430a      	orrs	r2, r1
 8007992:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007994:	e002      	b.n	800799c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	75fb      	strb	r3, [r7, #23]
      break;
 800799a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80079a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3718      	adds	r7, #24
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop

080079b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a48      	ldr	r2, [pc, #288]	@ (8007ae4 <TIM_Base_SetConfig+0x134>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d013      	beq.n	80079f0 <TIM_Base_SetConfig+0x40>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079ce:	d00f      	beq.n	80079f0 <TIM_Base_SetConfig+0x40>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a45      	ldr	r2, [pc, #276]	@ (8007ae8 <TIM_Base_SetConfig+0x138>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d00b      	beq.n	80079f0 <TIM_Base_SetConfig+0x40>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a44      	ldr	r2, [pc, #272]	@ (8007aec <TIM_Base_SetConfig+0x13c>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d007      	beq.n	80079f0 <TIM_Base_SetConfig+0x40>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a43      	ldr	r2, [pc, #268]	@ (8007af0 <TIM_Base_SetConfig+0x140>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d003      	beq.n	80079f0 <TIM_Base_SetConfig+0x40>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a42      	ldr	r2, [pc, #264]	@ (8007af4 <TIM_Base_SetConfig+0x144>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d108      	bne.n	8007a02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a37      	ldr	r2, [pc, #220]	@ (8007ae4 <TIM_Base_SetConfig+0x134>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d01f      	beq.n	8007a4a <TIM_Base_SetConfig+0x9a>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a10:	d01b      	beq.n	8007a4a <TIM_Base_SetConfig+0x9a>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a34      	ldr	r2, [pc, #208]	@ (8007ae8 <TIM_Base_SetConfig+0x138>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d017      	beq.n	8007a4a <TIM_Base_SetConfig+0x9a>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a33      	ldr	r2, [pc, #204]	@ (8007aec <TIM_Base_SetConfig+0x13c>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d013      	beq.n	8007a4a <TIM_Base_SetConfig+0x9a>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a32      	ldr	r2, [pc, #200]	@ (8007af0 <TIM_Base_SetConfig+0x140>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d00f      	beq.n	8007a4a <TIM_Base_SetConfig+0x9a>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a32      	ldr	r2, [pc, #200]	@ (8007af8 <TIM_Base_SetConfig+0x148>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d00b      	beq.n	8007a4a <TIM_Base_SetConfig+0x9a>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a31      	ldr	r2, [pc, #196]	@ (8007afc <TIM_Base_SetConfig+0x14c>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d007      	beq.n	8007a4a <TIM_Base_SetConfig+0x9a>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a30      	ldr	r2, [pc, #192]	@ (8007b00 <TIM_Base_SetConfig+0x150>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d003      	beq.n	8007a4a <TIM_Base_SetConfig+0x9a>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a2b      	ldr	r2, [pc, #172]	@ (8007af4 <TIM_Base_SetConfig+0x144>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d108      	bne.n	8007a5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	689a      	ldr	r2, [r3, #8]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a18      	ldr	r2, [pc, #96]	@ (8007ae4 <TIM_Base_SetConfig+0x134>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d013      	beq.n	8007ab0 <TIM_Base_SetConfig+0x100>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a19      	ldr	r2, [pc, #100]	@ (8007af0 <TIM_Base_SetConfig+0x140>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d00f      	beq.n	8007ab0 <TIM_Base_SetConfig+0x100>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a19      	ldr	r2, [pc, #100]	@ (8007af8 <TIM_Base_SetConfig+0x148>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d00b      	beq.n	8007ab0 <TIM_Base_SetConfig+0x100>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a18      	ldr	r2, [pc, #96]	@ (8007afc <TIM_Base_SetConfig+0x14c>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d007      	beq.n	8007ab0 <TIM_Base_SetConfig+0x100>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a17      	ldr	r2, [pc, #92]	@ (8007b00 <TIM_Base_SetConfig+0x150>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d003      	beq.n	8007ab0 <TIM_Base_SetConfig+0x100>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a12      	ldr	r2, [pc, #72]	@ (8007af4 <TIM_Base_SetConfig+0x144>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d103      	bne.n	8007ab8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	691a      	ldr	r2, [r3, #16]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d105      	bne.n	8007ad6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	f023 0201 	bic.w	r2, r3, #1
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	611a      	str	r2, [r3, #16]
  }
}
 8007ad6:	bf00      	nop
 8007ad8:	3714      	adds	r7, #20
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	40012c00 	.word	0x40012c00
 8007ae8:	40000400 	.word	0x40000400
 8007aec:	40000800 	.word	0x40000800
 8007af0:	40013400 	.word	0x40013400
 8007af4:	40015000 	.word	0x40015000
 8007af8:	40014000 	.word	0x40014000
 8007afc:	40014400 	.word	0x40014400
 8007b00:	40014800 	.word	0x40014800

08007b04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b087      	sub	sp, #28
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a1b      	ldr	r3, [r3, #32]
 8007b18:	f023 0201 	bic.w	r2, r3, #1
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f023 0303 	bic.w	r3, r3, #3
 8007b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	f023 0302 	bic.w	r3, r3, #2
 8007b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a30      	ldr	r2, [pc, #192]	@ (8007c20 <TIM_OC1_SetConfig+0x11c>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d013      	beq.n	8007b8c <TIM_OC1_SetConfig+0x88>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a2f      	ldr	r2, [pc, #188]	@ (8007c24 <TIM_OC1_SetConfig+0x120>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d00f      	beq.n	8007b8c <TIM_OC1_SetConfig+0x88>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a2e      	ldr	r2, [pc, #184]	@ (8007c28 <TIM_OC1_SetConfig+0x124>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d00b      	beq.n	8007b8c <TIM_OC1_SetConfig+0x88>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a2d      	ldr	r2, [pc, #180]	@ (8007c2c <TIM_OC1_SetConfig+0x128>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d007      	beq.n	8007b8c <TIM_OC1_SetConfig+0x88>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a2c      	ldr	r2, [pc, #176]	@ (8007c30 <TIM_OC1_SetConfig+0x12c>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d003      	beq.n	8007b8c <TIM_OC1_SetConfig+0x88>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a2b      	ldr	r2, [pc, #172]	@ (8007c34 <TIM_OC1_SetConfig+0x130>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d10c      	bne.n	8007ba6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	f023 0308 	bic.w	r3, r3, #8
 8007b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	f023 0304 	bic.w	r3, r3, #4
 8007ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8007c20 <TIM_OC1_SetConfig+0x11c>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d013      	beq.n	8007bd6 <TIM_OC1_SetConfig+0xd2>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8007c24 <TIM_OC1_SetConfig+0x120>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d00f      	beq.n	8007bd6 <TIM_OC1_SetConfig+0xd2>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8007c28 <TIM_OC1_SetConfig+0x124>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d00b      	beq.n	8007bd6 <TIM_OC1_SetConfig+0xd2>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8007c2c <TIM_OC1_SetConfig+0x128>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d007      	beq.n	8007bd6 <TIM_OC1_SetConfig+0xd2>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a19      	ldr	r2, [pc, #100]	@ (8007c30 <TIM_OC1_SetConfig+0x12c>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d003      	beq.n	8007bd6 <TIM_OC1_SetConfig+0xd2>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a18      	ldr	r2, [pc, #96]	@ (8007c34 <TIM_OC1_SetConfig+0x130>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d111      	bne.n	8007bfa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007be4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	693a      	ldr	r2, [r7, #16]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	685a      	ldr	r2, [r3, #4]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	621a      	str	r2, [r3, #32]
}
 8007c14:	bf00      	nop
 8007c16:	371c      	adds	r7, #28
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	40012c00 	.word	0x40012c00
 8007c24:	40013400 	.word	0x40013400
 8007c28:	40014000 	.word	0x40014000
 8007c2c:	40014400 	.word	0x40014400
 8007c30:	40014800 	.word	0x40014800
 8007c34:	40015000 	.word	0x40015000

08007c38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b087      	sub	sp, #28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a1b      	ldr	r3, [r3, #32]
 8007c4c:	f023 0210 	bic.w	r2, r3, #16
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	021b      	lsls	r3, r3, #8
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	f023 0320 	bic.w	r3, r3, #32
 8007c86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	011b      	lsls	r3, r3, #4
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a2c      	ldr	r2, [pc, #176]	@ (8007d48 <TIM_OC2_SetConfig+0x110>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d007      	beq.n	8007cac <TIM_OC2_SetConfig+0x74>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a2b      	ldr	r2, [pc, #172]	@ (8007d4c <TIM_OC2_SetConfig+0x114>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d003      	beq.n	8007cac <TIM_OC2_SetConfig+0x74>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a2a      	ldr	r2, [pc, #168]	@ (8007d50 <TIM_OC2_SetConfig+0x118>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d10d      	bne.n	8007cc8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	011b      	lsls	r3, r3, #4
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a1f      	ldr	r2, [pc, #124]	@ (8007d48 <TIM_OC2_SetConfig+0x110>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d013      	beq.n	8007cf8 <TIM_OC2_SetConfig+0xc0>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8007d4c <TIM_OC2_SetConfig+0x114>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d00f      	beq.n	8007cf8 <TIM_OC2_SetConfig+0xc0>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a1e      	ldr	r2, [pc, #120]	@ (8007d54 <TIM_OC2_SetConfig+0x11c>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d00b      	beq.n	8007cf8 <TIM_OC2_SetConfig+0xc0>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a1d      	ldr	r2, [pc, #116]	@ (8007d58 <TIM_OC2_SetConfig+0x120>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d007      	beq.n	8007cf8 <TIM_OC2_SetConfig+0xc0>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a1c      	ldr	r2, [pc, #112]	@ (8007d5c <TIM_OC2_SetConfig+0x124>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d003      	beq.n	8007cf8 <TIM_OC2_SetConfig+0xc0>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a17      	ldr	r2, [pc, #92]	@ (8007d50 <TIM_OC2_SetConfig+0x118>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d113      	bne.n	8007d20 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007cfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	693a      	ldr	r2, [r7, #16]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	621a      	str	r2, [r3, #32]
}
 8007d3a:	bf00      	nop
 8007d3c:	371c      	adds	r7, #28
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	40012c00 	.word	0x40012c00
 8007d4c:	40013400 	.word	0x40013400
 8007d50:	40015000 	.word	0x40015000
 8007d54:	40014000 	.word	0x40014000
 8007d58:	40014400 	.word	0x40014400
 8007d5c:	40014800 	.word	0x40014800

08007d60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b087      	sub	sp, #28
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a1b      	ldr	r3, [r3, #32]
 8007d6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a1b      	ldr	r3, [r3, #32]
 8007d74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	69db      	ldr	r3, [r3, #28]
 8007d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f023 0303 	bic.w	r3, r3, #3
 8007d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007dac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	021b      	lsls	r3, r3, #8
 8007db4:	697a      	ldr	r2, [r7, #20]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a2b      	ldr	r2, [pc, #172]	@ (8007e6c <TIM_OC3_SetConfig+0x10c>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d007      	beq.n	8007dd2 <TIM_OC3_SetConfig+0x72>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a2a      	ldr	r2, [pc, #168]	@ (8007e70 <TIM_OC3_SetConfig+0x110>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d003      	beq.n	8007dd2 <TIM_OC3_SetConfig+0x72>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a29      	ldr	r2, [pc, #164]	@ (8007e74 <TIM_OC3_SetConfig+0x114>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d10d      	bne.n	8007dee <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007dd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	021b      	lsls	r3, r3, #8
 8007de0:	697a      	ldr	r2, [r7, #20]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a1e      	ldr	r2, [pc, #120]	@ (8007e6c <TIM_OC3_SetConfig+0x10c>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d013      	beq.n	8007e1e <TIM_OC3_SetConfig+0xbe>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a1d      	ldr	r2, [pc, #116]	@ (8007e70 <TIM_OC3_SetConfig+0x110>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d00f      	beq.n	8007e1e <TIM_OC3_SetConfig+0xbe>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a1d      	ldr	r2, [pc, #116]	@ (8007e78 <TIM_OC3_SetConfig+0x118>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d00b      	beq.n	8007e1e <TIM_OC3_SetConfig+0xbe>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a1c      	ldr	r2, [pc, #112]	@ (8007e7c <TIM_OC3_SetConfig+0x11c>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d007      	beq.n	8007e1e <TIM_OC3_SetConfig+0xbe>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a1b      	ldr	r2, [pc, #108]	@ (8007e80 <TIM_OC3_SetConfig+0x120>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d003      	beq.n	8007e1e <TIM_OC3_SetConfig+0xbe>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a16      	ldr	r2, [pc, #88]	@ (8007e74 <TIM_OC3_SetConfig+0x114>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d113      	bne.n	8007e46 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	011b      	lsls	r3, r3, #4
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	011b      	lsls	r3, r3, #4
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	693a      	ldr	r2, [r7, #16]
 8007e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	685a      	ldr	r2, [r3, #4]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	621a      	str	r2, [r3, #32]
}
 8007e60:	bf00      	nop
 8007e62:	371c      	adds	r7, #28
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr
 8007e6c:	40012c00 	.word	0x40012c00
 8007e70:	40013400 	.word	0x40013400
 8007e74:	40015000 	.word	0x40015000
 8007e78:	40014000 	.word	0x40014000
 8007e7c:	40014400 	.word	0x40014400
 8007e80:	40014800 	.word	0x40014800

08007e84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b087      	sub	sp, #28
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a1b      	ldr	r3, [r3, #32]
 8007e98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	69db      	ldr	r3, [r3, #28]
 8007eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007eb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	021b      	lsls	r3, r3, #8
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ed2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	031b      	lsls	r3, r3, #12
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a2c      	ldr	r2, [pc, #176]	@ (8007f94 <TIM_OC4_SetConfig+0x110>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d007      	beq.n	8007ef8 <TIM_OC4_SetConfig+0x74>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a2b      	ldr	r2, [pc, #172]	@ (8007f98 <TIM_OC4_SetConfig+0x114>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d003      	beq.n	8007ef8 <TIM_OC4_SetConfig+0x74>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a2a      	ldr	r2, [pc, #168]	@ (8007f9c <TIM_OC4_SetConfig+0x118>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d10d      	bne.n	8007f14 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	031b      	lsls	r3, r3, #12
 8007f06:	697a      	ldr	r2, [r7, #20]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a1f      	ldr	r2, [pc, #124]	@ (8007f94 <TIM_OC4_SetConfig+0x110>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d013      	beq.n	8007f44 <TIM_OC4_SetConfig+0xc0>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8007f98 <TIM_OC4_SetConfig+0x114>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d00f      	beq.n	8007f44 <TIM_OC4_SetConfig+0xc0>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a1e      	ldr	r2, [pc, #120]	@ (8007fa0 <TIM_OC4_SetConfig+0x11c>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d00b      	beq.n	8007f44 <TIM_OC4_SetConfig+0xc0>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8007fa4 <TIM_OC4_SetConfig+0x120>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d007      	beq.n	8007f44 <TIM_OC4_SetConfig+0xc0>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a1c      	ldr	r2, [pc, #112]	@ (8007fa8 <TIM_OC4_SetConfig+0x124>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d003      	beq.n	8007f44 <TIM_OC4_SetConfig+0xc0>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a17      	ldr	r2, [pc, #92]	@ (8007f9c <TIM_OC4_SetConfig+0x118>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d113      	bne.n	8007f6c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f4a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007f52:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	695b      	ldr	r3, [r3, #20]
 8007f58:	019b      	lsls	r3, r3, #6
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	019b      	lsls	r3, r3, #6
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	693a      	ldr	r2, [r7, #16]
 8007f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	685a      	ldr	r2, [r3, #4]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	697a      	ldr	r2, [r7, #20]
 8007f84:	621a      	str	r2, [r3, #32]
}
 8007f86:	bf00      	nop
 8007f88:	371c      	adds	r7, #28
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	40012c00 	.word	0x40012c00
 8007f98:	40013400 	.word	0x40013400
 8007f9c:	40015000 	.word	0x40015000
 8007fa0:	40014000 	.word	0x40014000
 8007fa4:	40014400 	.word	0x40014400
 8007fa8:	40014800 	.word	0x40014800

08007fac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b087      	sub	sp, #28
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a1b      	ldr	r3, [r3, #32]
 8007fc0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007ff0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	041b      	lsls	r3, r3, #16
 8007ff8:	693a      	ldr	r2, [r7, #16]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a19      	ldr	r2, [pc, #100]	@ (8008068 <TIM_OC5_SetConfig+0xbc>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d013      	beq.n	800802e <TIM_OC5_SetConfig+0x82>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a18      	ldr	r2, [pc, #96]	@ (800806c <TIM_OC5_SetConfig+0xc0>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d00f      	beq.n	800802e <TIM_OC5_SetConfig+0x82>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a17      	ldr	r2, [pc, #92]	@ (8008070 <TIM_OC5_SetConfig+0xc4>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d00b      	beq.n	800802e <TIM_OC5_SetConfig+0x82>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a16      	ldr	r2, [pc, #88]	@ (8008074 <TIM_OC5_SetConfig+0xc8>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d007      	beq.n	800802e <TIM_OC5_SetConfig+0x82>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a15      	ldr	r2, [pc, #84]	@ (8008078 <TIM_OC5_SetConfig+0xcc>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d003      	beq.n	800802e <TIM_OC5_SetConfig+0x82>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a14      	ldr	r2, [pc, #80]	@ (800807c <TIM_OC5_SetConfig+0xd0>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d109      	bne.n	8008042 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008034:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	695b      	ldr	r3, [r3, #20]
 800803a:	021b      	lsls	r3, r3, #8
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	4313      	orrs	r3, r2
 8008040:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	697a      	ldr	r2, [r7, #20]
 8008046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	685a      	ldr	r2, [r3, #4]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	693a      	ldr	r2, [r7, #16]
 800805a:	621a      	str	r2, [r3, #32]
}
 800805c:	bf00      	nop
 800805e:	371c      	adds	r7, #28
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	40012c00 	.word	0x40012c00
 800806c:	40013400 	.word	0x40013400
 8008070:	40014000 	.word	0x40014000
 8008074:	40014400 	.word	0x40014400
 8008078:	40014800 	.word	0x40014800
 800807c:	40015000 	.word	0x40015000

08008080 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008080:	b480      	push	{r7}
 8008082:	b087      	sub	sp, #28
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a1b      	ldr	r3, [r3, #32]
 800808e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a1b      	ldr	r3, [r3, #32]
 8008094:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80080ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	021b      	lsls	r3, r3, #8
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	4313      	orrs	r3, r2
 80080be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80080c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	051b      	lsls	r3, r3, #20
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a1a      	ldr	r2, [pc, #104]	@ (8008140 <TIM_OC6_SetConfig+0xc0>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d013      	beq.n	8008104 <TIM_OC6_SetConfig+0x84>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a19      	ldr	r2, [pc, #100]	@ (8008144 <TIM_OC6_SetConfig+0xc4>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d00f      	beq.n	8008104 <TIM_OC6_SetConfig+0x84>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a18      	ldr	r2, [pc, #96]	@ (8008148 <TIM_OC6_SetConfig+0xc8>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d00b      	beq.n	8008104 <TIM_OC6_SetConfig+0x84>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a17      	ldr	r2, [pc, #92]	@ (800814c <TIM_OC6_SetConfig+0xcc>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d007      	beq.n	8008104 <TIM_OC6_SetConfig+0x84>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a16      	ldr	r2, [pc, #88]	@ (8008150 <TIM_OC6_SetConfig+0xd0>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d003      	beq.n	8008104 <TIM_OC6_SetConfig+0x84>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a15      	ldr	r2, [pc, #84]	@ (8008154 <TIM_OC6_SetConfig+0xd4>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d109      	bne.n	8008118 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800810a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	695b      	ldr	r3, [r3, #20]
 8008110:	029b      	lsls	r3, r3, #10
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	4313      	orrs	r3, r2
 8008116:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	685a      	ldr	r2, [r3, #4]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	693a      	ldr	r2, [r7, #16]
 8008130:	621a      	str	r2, [r3, #32]
}
 8008132:	bf00      	nop
 8008134:	371c      	adds	r7, #28
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	40012c00 	.word	0x40012c00
 8008144:	40013400 	.word	0x40013400
 8008148:	40014000 	.word	0x40014000
 800814c:	40014400 	.word	0x40014400
 8008150:	40014800 	.word	0x40014800
 8008154:	40015000 	.word	0x40015000

08008158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008168:	2b01      	cmp	r3, #1
 800816a:	d101      	bne.n	8008170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800816c:	2302      	movs	r3, #2
 800816e:	e06f      	b.n	8008250 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2202      	movs	r2, #2
 800817c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a31      	ldr	r2, [pc, #196]	@ (800825c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d009      	beq.n	80081ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a30      	ldr	r2, [pc, #192]	@ (8008260 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d004      	beq.n	80081ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a2e      	ldr	r2, [pc, #184]	@ (8008264 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d108      	bne.n	80081c0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80081b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	4313      	orrs	r3, r2
 80081be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80081c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a1e      	ldr	r2, [pc, #120]	@ (800825c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d01d      	beq.n	8008224 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081f0:	d018      	beq.n	8008224 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a1c      	ldr	r2, [pc, #112]	@ (8008268 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d013      	beq.n	8008224 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a1a      	ldr	r2, [pc, #104]	@ (800826c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d00e      	beq.n	8008224 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a15      	ldr	r2, [pc, #84]	@ (8008260 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d009      	beq.n	8008224 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a16      	ldr	r2, [pc, #88]	@ (8008270 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d004      	beq.n	8008224 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a11      	ldr	r2, [pc, #68]	@ (8008264 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d10c      	bne.n	800823e <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800822a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	68ba      	ldr	r2, [r7, #8]
 8008232:	4313      	orrs	r3, r2
 8008234:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2201      	movs	r2, #1
 8008242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3714      	adds	r7, #20
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	40012c00 	.word	0x40012c00
 8008260:	40013400 	.word	0x40013400
 8008264:	40015000 	.word	0x40015000
 8008268:	40000400 	.word	0x40000400
 800826c:	40000800 	.word	0x40000800
 8008270:	40014000 	.word	0x40014000

08008274 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800827e:	2300      	movs	r3, #0
 8008280:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008288:	2b01      	cmp	r3, #1
 800828a:	d101      	bne.n	8008290 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800828c:	2302      	movs	r3, #2
 800828e:	e078      	b.n	8008382 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	4313      	orrs	r3, r2
 80082c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	4313      	orrs	r3, r2
 80082dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082f6:	4313      	orrs	r3, r2
 80082f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	699b      	ldr	r3, [r3, #24]
 8008304:	041b      	lsls	r3, r3, #16
 8008306:	4313      	orrs	r3, r2
 8008308:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	69db      	ldr	r3, [r3, #28]
 8008314:	4313      	orrs	r3, r2
 8008316:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a1c      	ldr	r2, [pc, #112]	@ (8008390 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d009      	beq.n	8008336 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a1b      	ldr	r2, [pc, #108]	@ (8008394 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d004      	beq.n	8008336 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a19      	ldr	r2, [pc, #100]	@ (8008398 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d11c      	bne.n	8008370 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008340:	051b      	lsls	r3, r3, #20
 8008342:	4313      	orrs	r3, r2
 8008344:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	6a1b      	ldr	r3, [r3, #32]
 8008350:	4313      	orrs	r3, r2
 8008352:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800835e:	4313      	orrs	r3, r2
 8008360:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800836c:	4313      	orrs	r3, r2
 800836e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3714      	adds	r7, #20
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	40012c00 	.word	0x40012c00
 8008394:	40013400 	.word	0x40013400
 8008398:	40015000 	.word	0x40015000

0800839c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d101      	bne.n	80083ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e042      	b.n	8008434 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d106      	bne.n	80083c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f7fa fb05 	bl	80029d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2224      	movs	r2, #36	@ 0x24
 80083ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f022 0201 	bic.w	r2, r2, #1
 80083dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d002      	beq.n	80083ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fbb2 	bl	8008b50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f8b3 	bl	8008558 <UART_SetConfig>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d101      	bne.n	80083fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e01b      	b.n	8008434 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800840a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	689a      	ldr	r2, [r3, #8]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800841a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f042 0201 	orr.w	r2, r2, #1
 800842a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fc31 	bl	8008c94 <UART_CheckIdleState>
 8008432:	4603      	mov	r3, r0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b08a      	sub	sp, #40	@ 0x28
 8008440:	af02      	add	r7, sp, #8
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	603b      	str	r3, [r7, #0]
 8008448:	4613      	mov	r3, r2
 800844a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008452:	2b20      	cmp	r3, #32
 8008454:	d17b      	bne.n	800854e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d002      	beq.n	8008462 <HAL_UART_Transmit+0x26>
 800845c:	88fb      	ldrh	r3, [r7, #6]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d101      	bne.n	8008466 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e074      	b.n	8008550 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2200      	movs	r2, #0
 800846a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2221      	movs	r2, #33	@ 0x21
 8008472:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008476:	f7fa feff 	bl	8003278 <HAL_GetTick>
 800847a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	88fa      	ldrh	r2, [r7, #6]
 8008480:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	88fa      	ldrh	r2, [r7, #6]
 8008488:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008494:	d108      	bne.n	80084a8 <HAL_UART_Transmit+0x6c>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d104      	bne.n	80084a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800849e:	2300      	movs	r3, #0
 80084a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	61bb      	str	r3, [r7, #24]
 80084a6:	e003      	b.n	80084b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084ac:	2300      	movs	r3, #0
 80084ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80084b0:	e030      	b.n	8008514 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	9300      	str	r3, [sp, #0]
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	2200      	movs	r2, #0
 80084ba:	2180      	movs	r1, #128	@ 0x80
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f000 fc93 	bl	8008de8 <UART_WaitOnFlagUntilTimeout>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d005      	beq.n	80084d4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2220      	movs	r2, #32
 80084cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80084d0:	2303      	movs	r3, #3
 80084d2:	e03d      	b.n	8008550 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10b      	bne.n	80084f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	881b      	ldrh	r3, [r3, #0]
 80084de:	461a      	mov	r2, r3
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	3302      	adds	r3, #2
 80084ee:	61bb      	str	r3, [r7, #24]
 80084f0:	e007      	b.n	8008502 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	781a      	ldrb	r2, [r3, #0]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	3301      	adds	r3, #1
 8008500:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008508:	b29b      	uxth	r3, r3
 800850a:	3b01      	subs	r3, #1
 800850c:	b29a      	uxth	r2, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800851a:	b29b      	uxth	r3, r3
 800851c:	2b00      	cmp	r3, #0
 800851e:	d1c8      	bne.n	80084b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	2200      	movs	r2, #0
 8008528:	2140      	movs	r1, #64	@ 0x40
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f000 fc5c 	bl	8008de8 <UART_WaitOnFlagUntilTimeout>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d005      	beq.n	8008542 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2220      	movs	r2, #32
 800853a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800853e:	2303      	movs	r3, #3
 8008540:	e006      	b.n	8008550 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2220      	movs	r2, #32
 8008546:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	e000      	b.n	8008550 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800854e:	2302      	movs	r3, #2
  }
}
 8008550:	4618      	mov	r0, r3
 8008552:	3720      	adds	r7, #32
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800855c:	b08c      	sub	sp, #48	@ 0x30
 800855e:	af00      	add	r7, sp, #0
 8008560:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	689a      	ldr	r2, [r3, #8]
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	431a      	orrs	r2, r3
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	695b      	ldr	r3, [r3, #20]
 8008576:	431a      	orrs	r2, r3
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	69db      	ldr	r3, [r3, #28]
 800857c:	4313      	orrs	r3, r2
 800857e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	4baa      	ldr	r3, [pc, #680]	@ (8008830 <UART_SetConfig+0x2d8>)
 8008588:	4013      	ands	r3, r2
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	6812      	ldr	r2, [r2, #0]
 800858e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008590:	430b      	orrs	r3, r1
 8008592:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	68da      	ldr	r2, [r3, #12]
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	430a      	orrs	r2, r1
 80085a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a9f      	ldr	r2, [pc, #636]	@ (8008834 <UART_SetConfig+0x2dc>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d004      	beq.n	80085c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	6a1b      	ldr	r3, [r3, #32]
 80085be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085c0:	4313      	orrs	r3, r2
 80085c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80085ce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	6812      	ldr	r2, [r2, #0]
 80085d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085d8:	430b      	orrs	r3, r1
 80085da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e2:	f023 010f 	bic.w	r1, r3, #15
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	430a      	orrs	r2, r1
 80085f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a90      	ldr	r2, [pc, #576]	@ (8008838 <UART_SetConfig+0x2e0>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d125      	bne.n	8008648 <UART_SetConfig+0xf0>
 80085fc:	4b8f      	ldr	r3, [pc, #572]	@ (800883c <UART_SetConfig+0x2e4>)
 80085fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008602:	f003 0303 	and.w	r3, r3, #3
 8008606:	2b03      	cmp	r3, #3
 8008608:	d81a      	bhi.n	8008640 <UART_SetConfig+0xe8>
 800860a:	a201      	add	r2, pc, #4	@ (adr r2, 8008610 <UART_SetConfig+0xb8>)
 800860c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008610:	08008621 	.word	0x08008621
 8008614:	08008631 	.word	0x08008631
 8008618:	08008629 	.word	0x08008629
 800861c:	08008639 	.word	0x08008639
 8008620:	2301      	movs	r3, #1
 8008622:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008626:	e116      	b.n	8008856 <UART_SetConfig+0x2fe>
 8008628:	2302      	movs	r3, #2
 800862a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800862e:	e112      	b.n	8008856 <UART_SetConfig+0x2fe>
 8008630:	2304      	movs	r3, #4
 8008632:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008636:	e10e      	b.n	8008856 <UART_SetConfig+0x2fe>
 8008638:	2308      	movs	r3, #8
 800863a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800863e:	e10a      	b.n	8008856 <UART_SetConfig+0x2fe>
 8008640:	2310      	movs	r3, #16
 8008642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008646:	e106      	b.n	8008856 <UART_SetConfig+0x2fe>
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a7c      	ldr	r2, [pc, #496]	@ (8008840 <UART_SetConfig+0x2e8>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d138      	bne.n	80086c4 <UART_SetConfig+0x16c>
 8008652:	4b7a      	ldr	r3, [pc, #488]	@ (800883c <UART_SetConfig+0x2e4>)
 8008654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008658:	f003 030c 	and.w	r3, r3, #12
 800865c:	2b0c      	cmp	r3, #12
 800865e:	d82d      	bhi.n	80086bc <UART_SetConfig+0x164>
 8008660:	a201      	add	r2, pc, #4	@ (adr r2, 8008668 <UART_SetConfig+0x110>)
 8008662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008666:	bf00      	nop
 8008668:	0800869d 	.word	0x0800869d
 800866c:	080086bd 	.word	0x080086bd
 8008670:	080086bd 	.word	0x080086bd
 8008674:	080086bd 	.word	0x080086bd
 8008678:	080086ad 	.word	0x080086ad
 800867c:	080086bd 	.word	0x080086bd
 8008680:	080086bd 	.word	0x080086bd
 8008684:	080086bd 	.word	0x080086bd
 8008688:	080086a5 	.word	0x080086a5
 800868c:	080086bd 	.word	0x080086bd
 8008690:	080086bd 	.word	0x080086bd
 8008694:	080086bd 	.word	0x080086bd
 8008698:	080086b5 	.word	0x080086b5
 800869c:	2300      	movs	r3, #0
 800869e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086a2:	e0d8      	b.n	8008856 <UART_SetConfig+0x2fe>
 80086a4:	2302      	movs	r3, #2
 80086a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086aa:	e0d4      	b.n	8008856 <UART_SetConfig+0x2fe>
 80086ac:	2304      	movs	r3, #4
 80086ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086b2:	e0d0      	b.n	8008856 <UART_SetConfig+0x2fe>
 80086b4:	2308      	movs	r3, #8
 80086b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086ba:	e0cc      	b.n	8008856 <UART_SetConfig+0x2fe>
 80086bc:	2310      	movs	r3, #16
 80086be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086c2:	e0c8      	b.n	8008856 <UART_SetConfig+0x2fe>
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a5e      	ldr	r2, [pc, #376]	@ (8008844 <UART_SetConfig+0x2ec>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d125      	bne.n	800871a <UART_SetConfig+0x1c2>
 80086ce:	4b5b      	ldr	r3, [pc, #364]	@ (800883c <UART_SetConfig+0x2e4>)
 80086d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80086d8:	2b30      	cmp	r3, #48	@ 0x30
 80086da:	d016      	beq.n	800870a <UART_SetConfig+0x1b2>
 80086dc:	2b30      	cmp	r3, #48	@ 0x30
 80086de:	d818      	bhi.n	8008712 <UART_SetConfig+0x1ba>
 80086e0:	2b20      	cmp	r3, #32
 80086e2:	d00a      	beq.n	80086fa <UART_SetConfig+0x1a2>
 80086e4:	2b20      	cmp	r3, #32
 80086e6:	d814      	bhi.n	8008712 <UART_SetConfig+0x1ba>
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d002      	beq.n	80086f2 <UART_SetConfig+0x19a>
 80086ec:	2b10      	cmp	r3, #16
 80086ee:	d008      	beq.n	8008702 <UART_SetConfig+0x1aa>
 80086f0:	e00f      	b.n	8008712 <UART_SetConfig+0x1ba>
 80086f2:	2300      	movs	r3, #0
 80086f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086f8:	e0ad      	b.n	8008856 <UART_SetConfig+0x2fe>
 80086fa:	2302      	movs	r3, #2
 80086fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008700:	e0a9      	b.n	8008856 <UART_SetConfig+0x2fe>
 8008702:	2304      	movs	r3, #4
 8008704:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008708:	e0a5      	b.n	8008856 <UART_SetConfig+0x2fe>
 800870a:	2308      	movs	r3, #8
 800870c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008710:	e0a1      	b.n	8008856 <UART_SetConfig+0x2fe>
 8008712:	2310      	movs	r3, #16
 8008714:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008718:	e09d      	b.n	8008856 <UART_SetConfig+0x2fe>
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a4a      	ldr	r2, [pc, #296]	@ (8008848 <UART_SetConfig+0x2f0>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d125      	bne.n	8008770 <UART_SetConfig+0x218>
 8008724:	4b45      	ldr	r3, [pc, #276]	@ (800883c <UART_SetConfig+0x2e4>)
 8008726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800872a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800872e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008730:	d016      	beq.n	8008760 <UART_SetConfig+0x208>
 8008732:	2bc0      	cmp	r3, #192	@ 0xc0
 8008734:	d818      	bhi.n	8008768 <UART_SetConfig+0x210>
 8008736:	2b80      	cmp	r3, #128	@ 0x80
 8008738:	d00a      	beq.n	8008750 <UART_SetConfig+0x1f8>
 800873a:	2b80      	cmp	r3, #128	@ 0x80
 800873c:	d814      	bhi.n	8008768 <UART_SetConfig+0x210>
 800873e:	2b00      	cmp	r3, #0
 8008740:	d002      	beq.n	8008748 <UART_SetConfig+0x1f0>
 8008742:	2b40      	cmp	r3, #64	@ 0x40
 8008744:	d008      	beq.n	8008758 <UART_SetConfig+0x200>
 8008746:	e00f      	b.n	8008768 <UART_SetConfig+0x210>
 8008748:	2300      	movs	r3, #0
 800874a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800874e:	e082      	b.n	8008856 <UART_SetConfig+0x2fe>
 8008750:	2302      	movs	r3, #2
 8008752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008756:	e07e      	b.n	8008856 <UART_SetConfig+0x2fe>
 8008758:	2304      	movs	r3, #4
 800875a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800875e:	e07a      	b.n	8008856 <UART_SetConfig+0x2fe>
 8008760:	2308      	movs	r3, #8
 8008762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008766:	e076      	b.n	8008856 <UART_SetConfig+0x2fe>
 8008768:	2310      	movs	r3, #16
 800876a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800876e:	e072      	b.n	8008856 <UART_SetConfig+0x2fe>
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a35      	ldr	r2, [pc, #212]	@ (800884c <UART_SetConfig+0x2f4>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d12a      	bne.n	80087d0 <UART_SetConfig+0x278>
 800877a:	4b30      	ldr	r3, [pc, #192]	@ (800883c <UART_SetConfig+0x2e4>)
 800877c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008780:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008784:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008788:	d01a      	beq.n	80087c0 <UART_SetConfig+0x268>
 800878a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800878e:	d81b      	bhi.n	80087c8 <UART_SetConfig+0x270>
 8008790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008794:	d00c      	beq.n	80087b0 <UART_SetConfig+0x258>
 8008796:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800879a:	d815      	bhi.n	80087c8 <UART_SetConfig+0x270>
 800879c:	2b00      	cmp	r3, #0
 800879e:	d003      	beq.n	80087a8 <UART_SetConfig+0x250>
 80087a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087a4:	d008      	beq.n	80087b8 <UART_SetConfig+0x260>
 80087a6:	e00f      	b.n	80087c8 <UART_SetConfig+0x270>
 80087a8:	2300      	movs	r3, #0
 80087aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087ae:	e052      	b.n	8008856 <UART_SetConfig+0x2fe>
 80087b0:	2302      	movs	r3, #2
 80087b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087b6:	e04e      	b.n	8008856 <UART_SetConfig+0x2fe>
 80087b8:	2304      	movs	r3, #4
 80087ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087be:	e04a      	b.n	8008856 <UART_SetConfig+0x2fe>
 80087c0:	2308      	movs	r3, #8
 80087c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087c6:	e046      	b.n	8008856 <UART_SetConfig+0x2fe>
 80087c8:	2310      	movs	r3, #16
 80087ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087ce:	e042      	b.n	8008856 <UART_SetConfig+0x2fe>
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a17      	ldr	r2, [pc, #92]	@ (8008834 <UART_SetConfig+0x2dc>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d13a      	bne.n	8008850 <UART_SetConfig+0x2f8>
 80087da:	4b18      	ldr	r3, [pc, #96]	@ (800883c <UART_SetConfig+0x2e4>)
 80087dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80087e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087e8:	d01a      	beq.n	8008820 <UART_SetConfig+0x2c8>
 80087ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087ee:	d81b      	bhi.n	8008828 <UART_SetConfig+0x2d0>
 80087f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087f4:	d00c      	beq.n	8008810 <UART_SetConfig+0x2b8>
 80087f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087fa:	d815      	bhi.n	8008828 <UART_SetConfig+0x2d0>
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d003      	beq.n	8008808 <UART_SetConfig+0x2b0>
 8008800:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008804:	d008      	beq.n	8008818 <UART_SetConfig+0x2c0>
 8008806:	e00f      	b.n	8008828 <UART_SetConfig+0x2d0>
 8008808:	2300      	movs	r3, #0
 800880a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800880e:	e022      	b.n	8008856 <UART_SetConfig+0x2fe>
 8008810:	2302      	movs	r3, #2
 8008812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008816:	e01e      	b.n	8008856 <UART_SetConfig+0x2fe>
 8008818:	2304      	movs	r3, #4
 800881a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800881e:	e01a      	b.n	8008856 <UART_SetConfig+0x2fe>
 8008820:	2308      	movs	r3, #8
 8008822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008826:	e016      	b.n	8008856 <UART_SetConfig+0x2fe>
 8008828:	2310      	movs	r3, #16
 800882a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800882e:	e012      	b.n	8008856 <UART_SetConfig+0x2fe>
 8008830:	cfff69f3 	.word	0xcfff69f3
 8008834:	40008000 	.word	0x40008000
 8008838:	40013800 	.word	0x40013800
 800883c:	40021000 	.word	0x40021000
 8008840:	40004400 	.word	0x40004400
 8008844:	40004800 	.word	0x40004800
 8008848:	40004c00 	.word	0x40004c00
 800884c:	40005000 	.word	0x40005000
 8008850:	2310      	movs	r3, #16
 8008852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4aae      	ldr	r2, [pc, #696]	@ (8008b14 <UART_SetConfig+0x5bc>)
 800885c:	4293      	cmp	r3, r2
 800885e:	f040 8097 	bne.w	8008990 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008862:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008866:	2b08      	cmp	r3, #8
 8008868:	d823      	bhi.n	80088b2 <UART_SetConfig+0x35a>
 800886a:	a201      	add	r2, pc, #4	@ (adr r2, 8008870 <UART_SetConfig+0x318>)
 800886c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008870:	08008895 	.word	0x08008895
 8008874:	080088b3 	.word	0x080088b3
 8008878:	0800889d 	.word	0x0800889d
 800887c:	080088b3 	.word	0x080088b3
 8008880:	080088a3 	.word	0x080088a3
 8008884:	080088b3 	.word	0x080088b3
 8008888:	080088b3 	.word	0x080088b3
 800888c:	080088b3 	.word	0x080088b3
 8008890:	080088ab 	.word	0x080088ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008894:	f7fe fbc8 	bl	8007028 <HAL_RCC_GetPCLK1Freq>
 8008898:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800889a:	e010      	b.n	80088be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800889c:	4b9e      	ldr	r3, [pc, #632]	@ (8008b18 <UART_SetConfig+0x5c0>)
 800889e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80088a0:	e00d      	b.n	80088be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088a2:	f7fe fb53 	bl	8006f4c <HAL_RCC_GetSysClockFreq>
 80088a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80088a8:	e009      	b.n	80088be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80088b0:	e005      	b.n	80088be <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80088b2:	2300      	movs	r3, #0
 80088b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80088bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80088be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f000 8130 	beq.w	8008b26 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ca:	4a94      	ldr	r2, [pc, #592]	@ (8008b1c <UART_SetConfig+0x5c4>)
 80088cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088d0:	461a      	mov	r2, r3
 80088d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80088d8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	685a      	ldr	r2, [r3, #4]
 80088de:	4613      	mov	r3, r2
 80088e0:	005b      	lsls	r3, r3, #1
 80088e2:	4413      	add	r3, r2
 80088e4:	69ba      	ldr	r2, [r7, #24]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d305      	bcc.n	80088f6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088f0:	69ba      	ldr	r2, [r7, #24]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d903      	bls.n	80088fe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80088fc:	e113      	b.n	8008b26 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008900:	2200      	movs	r2, #0
 8008902:	60bb      	str	r3, [r7, #8]
 8008904:	60fa      	str	r2, [r7, #12]
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800890a:	4a84      	ldr	r2, [pc, #528]	@ (8008b1c <UART_SetConfig+0x5c4>)
 800890c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008910:	b29b      	uxth	r3, r3
 8008912:	2200      	movs	r2, #0
 8008914:	603b      	str	r3, [r7, #0]
 8008916:	607a      	str	r2, [r7, #4]
 8008918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800891c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008920:	f7f8 f9da 	bl	8000cd8 <__aeabi_uldivmod>
 8008924:	4602      	mov	r2, r0
 8008926:	460b      	mov	r3, r1
 8008928:	4610      	mov	r0, r2
 800892a:	4619      	mov	r1, r3
 800892c:	f04f 0200 	mov.w	r2, #0
 8008930:	f04f 0300 	mov.w	r3, #0
 8008934:	020b      	lsls	r3, r1, #8
 8008936:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800893a:	0202      	lsls	r2, r0, #8
 800893c:	6979      	ldr	r1, [r7, #20]
 800893e:	6849      	ldr	r1, [r1, #4]
 8008940:	0849      	lsrs	r1, r1, #1
 8008942:	2000      	movs	r0, #0
 8008944:	460c      	mov	r4, r1
 8008946:	4605      	mov	r5, r0
 8008948:	eb12 0804 	adds.w	r8, r2, r4
 800894c:	eb43 0905 	adc.w	r9, r3, r5
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	469a      	mov	sl, r3
 8008958:	4693      	mov	fp, r2
 800895a:	4652      	mov	r2, sl
 800895c:	465b      	mov	r3, fp
 800895e:	4640      	mov	r0, r8
 8008960:	4649      	mov	r1, r9
 8008962:	f7f8 f9b9 	bl	8000cd8 <__aeabi_uldivmod>
 8008966:	4602      	mov	r2, r0
 8008968:	460b      	mov	r3, r1
 800896a:	4613      	mov	r3, r2
 800896c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800896e:	6a3b      	ldr	r3, [r7, #32]
 8008970:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008974:	d308      	bcc.n	8008988 <UART_SetConfig+0x430>
 8008976:	6a3b      	ldr	r3, [r7, #32]
 8008978:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800897c:	d204      	bcs.n	8008988 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	6a3a      	ldr	r2, [r7, #32]
 8008984:	60da      	str	r2, [r3, #12]
 8008986:	e0ce      	b.n	8008b26 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800898e:	e0ca      	b.n	8008b26 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	69db      	ldr	r3, [r3, #28]
 8008994:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008998:	d166      	bne.n	8008a68 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800899a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800899e:	2b08      	cmp	r3, #8
 80089a0:	d827      	bhi.n	80089f2 <UART_SetConfig+0x49a>
 80089a2:	a201      	add	r2, pc, #4	@ (adr r2, 80089a8 <UART_SetConfig+0x450>)
 80089a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a8:	080089cd 	.word	0x080089cd
 80089ac:	080089d5 	.word	0x080089d5
 80089b0:	080089dd 	.word	0x080089dd
 80089b4:	080089f3 	.word	0x080089f3
 80089b8:	080089e3 	.word	0x080089e3
 80089bc:	080089f3 	.word	0x080089f3
 80089c0:	080089f3 	.word	0x080089f3
 80089c4:	080089f3 	.word	0x080089f3
 80089c8:	080089eb 	.word	0x080089eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089cc:	f7fe fb2c 	bl	8007028 <HAL_RCC_GetPCLK1Freq>
 80089d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089d2:	e014      	b.n	80089fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089d4:	f7fe fb3e 	bl	8007054 <HAL_RCC_GetPCLK2Freq>
 80089d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089da:	e010      	b.n	80089fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089dc:	4b4e      	ldr	r3, [pc, #312]	@ (8008b18 <UART_SetConfig+0x5c0>)
 80089de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80089e0:	e00d      	b.n	80089fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089e2:	f7fe fab3 	bl	8006f4c <HAL_RCC_GetSysClockFreq>
 80089e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089e8:	e009      	b.n	80089fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80089f0:	e005      	b.n	80089fe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80089f2:	2300      	movs	r3, #0
 80089f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80089fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f000 8090 	beq.w	8008b26 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a0a:	4a44      	ldr	r2, [pc, #272]	@ (8008b1c <UART_SetConfig+0x5c4>)
 8008a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a10:	461a      	mov	r2, r3
 8008a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a14:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a18:	005a      	lsls	r2, r3, #1
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	085b      	lsrs	r3, r3, #1
 8008a20:	441a      	add	r2, r3
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a2a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a2c:	6a3b      	ldr	r3, [r7, #32]
 8008a2e:	2b0f      	cmp	r3, #15
 8008a30:	d916      	bls.n	8008a60 <UART_SetConfig+0x508>
 8008a32:	6a3b      	ldr	r3, [r7, #32]
 8008a34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a38:	d212      	bcs.n	8008a60 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a3a:	6a3b      	ldr	r3, [r7, #32]
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	f023 030f 	bic.w	r3, r3, #15
 8008a42:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a44:	6a3b      	ldr	r3, [r7, #32]
 8008a46:	085b      	lsrs	r3, r3, #1
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	f003 0307 	and.w	r3, r3, #7
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	8bfb      	ldrh	r3, [r7, #30]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	8bfa      	ldrh	r2, [r7, #30]
 8008a5c:	60da      	str	r2, [r3, #12]
 8008a5e:	e062      	b.n	8008b26 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a66:	e05e      	b.n	8008b26 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a68:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a6c:	2b08      	cmp	r3, #8
 8008a6e:	d828      	bhi.n	8008ac2 <UART_SetConfig+0x56a>
 8008a70:	a201      	add	r2, pc, #4	@ (adr r2, 8008a78 <UART_SetConfig+0x520>)
 8008a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a76:	bf00      	nop
 8008a78:	08008a9d 	.word	0x08008a9d
 8008a7c:	08008aa5 	.word	0x08008aa5
 8008a80:	08008aad 	.word	0x08008aad
 8008a84:	08008ac3 	.word	0x08008ac3
 8008a88:	08008ab3 	.word	0x08008ab3
 8008a8c:	08008ac3 	.word	0x08008ac3
 8008a90:	08008ac3 	.word	0x08008ac3
 8008a94:	08008ac3 	.word	0x08008ac3
 8008a98:	08008abb 	.word	0x08008abb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a9c:	f7fe fac4 	bl	8007028 <HAL_RCC_GetPCLK1Freq>
 8008aa0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008aa2:	e014      	b.n	8008ace <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008aa4:	f7fe fad6 	bl	8007054 <HAL_RCC_GetPCLK2Freq>
 8008aa8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008aaa:	e010      	b.n	8008ace <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008aac:	4b1a      	ldr	r3, [pc, #104]	@ (8008b18 <UART_SetConfig+0x5c0>)
 8008aae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ab0:	e00d      	b.n	8008ace <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ab2:	f7fe fa4b 	bl	8006f4c <HAL_RCC_GetSysClockFreq>
 8008ab6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ab8:	e009      	b.n	8008ace <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008aba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008abe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ac0:	e005      	b.n	8008ace <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008acc:	bf00      	nop
    }

    if (pclk != 0U)
 8008ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d028      	beq.n	8008b26 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ad8:	4a10      	ldr	r2, [pc, #64]	@ (8008b1c <UART_SetConfig+0x5c4>)
 8008ada:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	085b      	lsrs	r3, r3, #1
 8008aec:	441a      	add	r2, r3
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008af6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008af8:	6a3b      	ldr	r3, [r7, #32]
 8008afa:	2b0f      	cmp	r3, #15
 8008afc:	d910      	bls.n	8008b20 <UART_SetConfig+0x5c8>
 8008afe:	6a3b      	ldr	r3, [r7, #32]
 8008b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b04:	d20c      	bcs.n	8008b20 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b06:	6a3b      	ldr	r3, [r7, #32]
 8008b08:	b29a      	uxth	r2, r3
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	60da      	str	r2, [r3, #12]
 8008b10:	e009      	b.n	8008b26 <UART_SetConfig+0x5ce>
 8008b12:	bf00      	nop
 8008b14:	40008000 	.word	0x40008000
 8008b18:	00f42400 	.word	0x00f42400
 8008b1c:	080118f4 	.word	0x080118f4
      }
      else
      {
        ret = HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	2201      	movs	r2, #1
 8008b32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008b42:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3730      	adds	r7, #48	@ 0x30
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008b50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b5c:	f003 0308 	and.w	r3, r3, #8
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00a      	beq.n	8008b7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	430a      	orrs	r2, r1
 8008b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b7e:	f003 0301 	and.w	r3, r3, #1
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d00a      	beq.n	8008b9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	430a      	orrs	r2, r1
 8008b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ba0:	f003 0302 	and.w	r3, r3, #2
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00a      	beq.n	8008bbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	430a      	orrs	r2, r1
 8008bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc2:	f003 0304 	and.w	r3, r3, #4
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00a      	beq.n	8008be0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	430a      	orrs	r2, r1
 8008bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008be4:	f003 0310 	and.w	r3, r3, #16
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d00a      	beq.n	8008c02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	430a      	orrs	r2, r1
 8008c00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c06:	f003 0320 	and.w	r3, r3, #32
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00a      	beq.n	8008c24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	430a      	orrs	r2, r1
 8008c22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d01a      	beq.n	8008c66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	430a      	orrs	r2, r1
 8008c44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c4e:	d10a      	bne.n	8008c66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	430a      	orrs	r2, r1
 8008c64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00a      	beq.n	8008c88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	430a      	orrs	r2, r1
 8008c86:	605a      	str	r2, [r3, #4]
  }
}
 8008c88:	bf00      	nop
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b098      	sub	sp, #96	@ 0x60
 8008c98:	af02      	add	r7, sp, #8
 8008c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ca4:	f7fa fae8 	bl	8003278 <HAL_GetTick>
 8008ca8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 0308 	and.w	r3, r3, #8
 8008cb4:	2b08      	cmp	r3, #8
 8008cb6:	d12f      	bne.n	8008d18 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cb8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008cbc:	9300      	str	r3, [sp, #0]
 8008cbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f88e 	bl	8008de8 <UART_WaitOnFlagUntilTimeout>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d022      	beq.n	8008d18 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cda:	e853 3f00 	ldrex	r3, [r3]
 8008cde:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ce2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ce6:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	461a      	mov	r2, r3
 8008cee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cf2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008cf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cf8:	e841 2300 	strex	r3, r2, [r1]
 8008cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1e6      	bne.n	8008cd2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2220      	movs	r2, #32
 8008d08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d14:	2303      	movs	r3, #3
 8008d16:	e063      	b.n	8008de0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0304 	and.w	r3, r3, #4
 8008d22:	2b04      	cmp	r3, #4
 8008d24:	d149      	bne.n	8008dba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d26:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f857 	bl	8008de8 <UART_WaitOnFlagUntilTimeout>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d03c      	beq.n	8008dba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d48:	e853 3f00 	ldrex	r3, [r3]
 8008d4c:	623b      	str	r3, [r7, #32]
   return(result);
 8008d4e:	6a3b      	ldr	r3, [r7, #32]
 8008d50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d60:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d66:	e841 2300 	strex	r3, r2, [r1]
 8008d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d1e6      	bne.n	8008d40 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	3308      	adds	r3, #8
 8008d78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	e853 3f00 	ldrex	r3, [r3]
 8008d80:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f023 0301 	bic.w	r3, r3, #1
 8008d88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	3308      	adds	r3, #8
 8008d90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d92:	61fa      	str	r2, [r7, #28]
 8008d94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d96:	69b9      	ldr	r1, [r7, #24]
 8008d98:	69fa      	ldr	r2, [r7, #28]
 8008d9a:	e841 2300 	strex	r3, r2, [r1]
 8008d9e:	617b      	str	r3, [r7, #20]
   return(result);
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1e5      	bne.n	8008d72 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2220      	movs	r2, #32
 8008daa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008db6:	2303      	movs	r3, #3
 8008db8:	e012      	b.n	8008de0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2220      	movs	r2, #32
 8008dbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2220      	movs	r2, #32
 8008dc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3758      	adds	r7, #88	@ 0x58
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	603b      	str	r3, [r7, #0]
 8008df4:	4613      	mov	r3, r2
 8008df6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008df8:	e04f      	b.n	8008e9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e00:	d04b      	beq.n	8008e9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e02:	f7fa fa39 	bl	8003278 <HAL_GetTick>
 8008e06:	4602      	mov	r2, r0
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	1ad3      	subs	r3, r2, r3
 8008e0c:	69ba      	ldr	r2, [r7, #24]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d302      	bcc.n	8008e18 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d101      	bne.n	8008e1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e18:	2303      	movs	r3, #3
 8008e1a:	e04e      	b.n	8008eba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 0304 	and.w	r3, r3, #4
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d037      	beq.n	8008e9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	2b80      	cmp	r3, #128	@ 0x80
 8008e2e:	d034      	beq.n	8008e9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	2b40      	cmp	r3, #64	@ 0x40
 8008e34:	d031      	beq.n	8008e9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	69db      	ldr	r3, [r3, #28]
 8008e3c:	f003 0308 	and.w	r3, r3, #8
 8008e40:	2b08      	cmp	r3, #8
 8008e42:	d110      	bne.n	8008e66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2208      	movs	r2, #8
 8008e4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f000 f838 	bl	8008ec2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2208      	movs	r2, #8
 8008e56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e029      	b.n	8008eba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	69db      	ldr	r3, [r3, #28]
 8008e6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e74:	d111      	bne.n	8008e9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f000 f81e 	bl	8008ec2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2220      	movs	r2, #32
 8008e8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2200      	movs	r2, #0
 8008e92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008e96:	2303      	movs	r3, #3
 8008e98:	e00f      	b.n	8008eba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	69da      	ldr	r2, [r3, #28]
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	4013      	ands	r3, r2
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	bf0c      	ite	eq
 8008eaa:	2301      	moveq	r3, #1
 8008eac:	2300      	movne	r3, #0
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	79fb      	ldrb	r3, [r7, #7]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d0a0      	beq.n	8008dfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ec2:	b480      	push	{r7}
 8008ec4:	b095      	sub	sp, #84	@ 0x54
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ed2:	e853 3f00 	ldrex	r3, [r3]
 8008ed6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ee8:	643b      	str	r3, [r7, #64]	@ 0x40
 8008eea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008eee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ef0:	e841 2300 	strex	r3, r2, [r1]
 8008ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1e6      	bne.n	8008eca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3308      	adds	r3, #8
 8008f02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f04:	6a3b      	ldr	r3, [r7, #32]
 8008f06:	e853 3f00 	ldrex	r3, [r3]
 8008f0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f12:	f023 0301 	bic.w	r3, r3, #1
 8008f16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	3308      	adds	r3, #8
 8008f1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f28:	e841 2300 	strex	r3, r2, [r1]
 8008f2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d1e3      	bne.n	8008efc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d118      	bne.n	8008f6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	e853 3f00 	ldrex	r3, [r3]
 8008f48:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	f023 0310 	bic.w	r3, r3, #16
 8008f50:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	461a      	mov	r2, r3
 8008f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f5a:	61bb      	str	r3, [r7, #24]
 8008f5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5e:	6979      	ldr	r1, [r7, #20]
 8008f60:	69ba      	ldr	r2, [r7, #24]
 8008f62:	e841 2300 	strex	r3, r2, [r1]
 8008f66:	613b      	str	r3, [r7, #16]
   return(result);
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1e6      	bne.n	8008f3c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2220      	movs	r2, #32
 8008f72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008f82:	bf00      	nop
 8008f84:	3754      	adds	r7, #84	@ 0x54
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr

08008f8e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008f8e:	b480      	push	{r7}
 8008f90:	b085      	sub	sp, #20
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d101      	bne.n	8008fa4 <HAL_UARTEx_DisableFifoMode+0x16>
 8008fa0:	2302      	movs	r3, #2
 8008fa2:	e027      	b.n	8008ff4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2224      	movs	r2, #36	@ 0x24
 8008fb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f022 0201 	bic.w	r2, r2, #1
 8008fca:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008fd2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68fa      	ldr	r2, [r7, #12]
 8008fe0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2220      	movs	r2, #32
 8008fe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3714      	adds	r7, #20
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009010:	2b01      	cmp	r3, #1
 8009012:	d101      	bne.n	8009018 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009014:	2302      	movs	r3, #2
 8009016:	e02d      	b.n	8009074 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2224      	movs	r2, #36	@ 0x24
 8009024:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f022 0201 	bic.w	r2, r2, #1
 800903e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	683a      	ldr	r2, [r7, #0]
 8009050:	430a      	orrs	r2, r1
 8009052:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f84f 	bl	80090f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2220      	movs	r2, #32
 8009066:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800908c:	2b01      	cmp	r3, #1
 800908e:	d101      	bne.n	8009094 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009090:	2302      	movs	r3, #2
 8009092:	e02d      	b.n	80090f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2224      	movs	r2, #36	@ 0x24
 80090a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f022 0201 	bic.w	r2, r2, #1
 80090ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	683a      	ldr	r2, [r7, #0]
 80090cc:	430a      	orrs	r2, r1
 80090ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 f811 	bl	80090f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2220      	movs	r2, #32
 80090e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80090ee:	2300      	movs	r3, #0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b085      	sub	sp, #20
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009104:	2b00      	cmp	r3, #0
 8009106:	d108      	bne.n	800911a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2201      	movs	r2, #1
 8009114:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009118:	e031      	b.n	800917e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800911a:	2308      	movs	r3, #8
 800911c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800911e:	2308      	movs	r3, #8
 8009120:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	0e5b      	lsrs	r3, r3, #25
 800912a:	b2db      	uxtb	r3, r3
 800912c:	f003 0307 	and.w	r3, r3, #7
 8009130:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	0f5b      	lsrs	r3, r3, #29
 800913a:	b2db      	uxtb	r3, r3
 800913c:	f003 0307 	and.w	r3, r3, #7
 8009140:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009142:	7bbb      	ldrb	r3, [r7, #14]
 8009144:	7b3a      	ldrb	r2, [r7, #12]
 8009146:	4911      	ldr	r1, [pc, #68]	@ (800918c <UARTEx_SetNbDataToProcess+0x94>)
 8009148:	5c8a      	ldrb	r2, [r1, r2]
 800914a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800914e:	7b3a      	ldrb	r2, [r7, #12]
 8009150:	490f      	ldr	r1, [pc, #60]	@ (8009190 <UARTEx_SetNbDataToProcess+0x98>)
 8009152:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009154:	fb93 f3f2 	sdiv	r3, r3, r2
 8009158:	b29a      	uxth	r2, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009160:	7bfb      	ldrb	r3, [r7, #15]
 8009162:	7b7a      	ldrb	r2, [r7, #13]
 8009164:	4909      	ldr	r1, [pc, #36]	@ (800918c <UARTEx_SetNbDataToProcess+0x94>)
 8009166:	5c8a      	ldrb	r2, [r1, r2]
 8009168:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800916c:	7b7a      	ldrb	r2, [r7, #13]
 800916e:	4908      	ldr	r1, [pc, #32]	@ (8009190 <UARTEx_SetNbDataToProcess+0x98>)
 8009170:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009172:	fb93 f3f2 	sdiv	r3, r3, r2
 8009176:	b29a      	uxth	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800917e:	bf00      	nop
 8009180:	3714      	adds	r7, #20
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	0801190c 	.word	0x0801190c
 8009190:	08011914 	.word	0x08011914

08009194 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80091a4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80091a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	b29a      	uxth	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3714      	adds	r7, #20
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr

080091c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80091c2:	b480      	push	{r7}
 80091c4:	b085      	sub	sp, #20
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80091ca:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80091ce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80091d6:	b29a      	uxth	r2, r3
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	b29b      	uxth	r3, r3
 80091dc:	43db      	mvns	r3, r3
 80091de:	b29b      	uxth	r3, r3
 80091e0:	4013      	ands	r3, r2
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3714      	adds	r7, #20
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	1d3b      	adds	r3, r7, #4
 8009202:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2201      	movs	r2, #1
 800920a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2200      	movs	r2, #0
 8009212:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3714      	adds	r7, #20
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009234:	b480      	push	{r7}
 8009236:	b0a7      	sub	sp, #156	@ 0x9c
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800923e:	2300      	movs	r3, #0
 8009240:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	4413      	add	r3, r2
 800924e:	881b      	ldrh	r3, [r3, #0]
 8009250:	b29b      	uxth	r3, r3
 8009252:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8009256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800925a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	78db      	ldrb	r3, [r3, #3]
 8009262:	2b03      	cmp	r3, #3
 8009264:	d81f      	bhi.n	80092a6 <USB_ActivateEndpoint+0x72>
 8009266:	a201      	add	r2, pc, #4	@ (adr r2, 800926c <USB_ActivateEndpoint+0x38>)
 8009268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800926c:	0800927d 	.word	0x0800927d
 8009270:	08009299 	.word	0x08009299
 8009274:	080092af 	.word	0x080092af
 8009278:	0800928b 	.word	0x0800928b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800927c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009280:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009284:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8009288:	e012      	b.n	80092b0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800928a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800928e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8009292:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8009296:	e00b      	b.n	80092b0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009298:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800929c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80092a0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80092a4:	e004      	b.n	80092b0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80092ac:	e000      	b.n	80092b0 <USB_ActivateEndpoint+0x7c>
      break;
 80092ae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	441a      	add	r2, r3
 80092ba:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80092be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	4413      	add	r3, r2
 80092dc:	881b      	ldrh	r3, [r3, #0]
 80092de:	b29b      	uxth	r3, r3
 80092e0:	b21b      	sxth	r3, r3
 80092e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092ea:	b21a      	sxth	r2, r3
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	b21b      	sxth	r3, r3
 80092f2:	4313      	orrs	r3, r2
 80092f4:	b21b      	sxth	r3, r3
 80092f6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	441a      	add	r2, r3
 8009304:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009308:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800930c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009310:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009314:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009318:	b29b      	uxth	r3, r3
 800931a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	7b1b      	ldrb	r3, [r3, #12]
 8009320:	2b00      	cmp	r3, #0
 8009322:	f040 8180 	bne.w	8009626 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	785b      	ldrb	r3, [r3, #1]
 800932a:	2b00      	cmp	r3, #0
 800932c:	f000 8084 	beq.w	8009438 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	61bb      	str	r3, [r7, #24]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800933a:	b29b      	uxth	r3, r3
 800933c:	461a      	mov	r2, r3
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	4413      	add	r3, r2
 8009342:	61bb      	str	r3, [r7, #24]
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	00da      	lsls	r2, r3, #3
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	4413      	add	r3, r2
 800934e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009352:	617b      	str	r3, [r7, #20]
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	88db      	ldrh	r3, [r3, #6]
 8009358:	085b      	lsrs	r3, r3, #1
 800935a:	b29b      	uxth	r3, r3
 800935c:	005b      	lsls	r3, r3, #1
 800935e:	b29a      	uxth	r2, r3
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	4413      	add	r3, r2
 800936e:	881b      	ldrh	r3, [r3, #0]
 8009370:	827b      	strh	r3, [r7, #18]
 8009372:	8a7b      	ldrh	r3, [r7, #18]
 8009374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009378:	2b00      	cmp	r3, #0
 800937a:	d01b      	beq.n	80093b4 <USB_ActivateEndpoint+0x180>
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	4413      	add	r3, r2
 8009386:	881b      	ldrh	r3, [r3, #0]
 8009388:	b29b      	uxth	r3, r3
 800938a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800938e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009392:	823b      	strh	r3, [r7, #16]
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	441a      	add	r2, r3
 800939e:	8a3b      	ldrh	r3, [r7, #16]
 80093a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	78db      	ldrb	r3, [r3, #3]
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d020      	beq.n	80093fe <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	4413      	add	r3, r2
 80093c6:	881b      	ldrh	r3, [r3, #0]
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093d2:	81bb      	strh	r3, [r7, #12]
 80093d4:	89bb      	ldrh	r3, [r7, #12]
 80093d6:	f083 0320 	eor.w	r3, r3, #32
 80093da:	81bb      	strh	r3, [r7, #12]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	441a      	add	r2, r3
 80093e6:	89bb      	ldrh	r3, [r7, #12]
 80093e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	8013      	strh	r3, [r2, #0]
 80093fc:	e3f9      	b.n	8009bf2 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4413      	add	r3, r2
 8009408:	881b      	ldrh	r3, [r3, #0]
 800940a:	b29b      	uxth	r3, r3
 800940c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009410:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009414:	81fb      	strh	r3, [r7, #14]
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	441a      	add	r2, r3
 8009420:	89fb      	ldrh	r3, [r7, #14]
 8009422:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009426:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800942a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800942e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009432:	b29b      	uxth	r3, r3
 8009434:	8013      	strh	r3, [r2, #0]
 8009436:	e3dc      	b.n	8009bf2 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	633b      	str	r3, [r7, #48]	@ 0x30
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009442:	b29b      	uxth	r3, r3
 8009444:	461a      	mov	r2, r3
 8009446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009448:	4413      	add	r3, r2
 800944a:	633b      	str	r3, [r7, #48]	@ 0x30
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	00da      	lsls	r2, r3, #3
 8009452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009454:	4413      	add	r3, r2
 8009456:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800945a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	88db      	ldrh	r3, [r3, #6]
 8009460:	085b      	lsrs	r3, r3, #1
 8009462:	b29b      	uxth	r3, r3
 8009464:	005b      	lsls	r3, r3, #1
 8009466:	b29a      	uxth	r2, r3
 8009468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800946a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009476:	b29b      	uxth	r3, r3
 8009478:	461a      	mov	r2, r3
 800947a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800947c:	4413      	add	r3, r2
 800947e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	00da      	lsls	r2, r3, #3
 8009486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009488:	4413      	add	r3, r2
 800948a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800948e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009492:	881b      	ldrh	r3, [r3, #0]
 8009494:	b29b      	uxth	r3, r3
 8009496:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800949a:	b29a      	uxth	r2, r3
 800949c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800949e:	801a      	strh	r2, [r3, #0]
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d10a      	bne.n	80094be <USB_ActivateEndpoint+0x28a>
 80094a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094aa:	881b      	ldrh	r3, [r3, #0]
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ba:	801a      	strh	r2, [r3, #0]
 80094bc:	e041      	b.n	8009542 <USB_ActivateEndpoint+0x30e>
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80094c4:	d81c      	bhi.n	8009500 <USB_ActivateEndpoint+0x2cc>
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	085b      	lsrs	r3, r3, #1
 80094cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	f003 0301 	and.w	r3, r3, #1
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d004      	beq.n	80094e6 <USB_ActivateEndpoint+0x2b2>
 80094dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80094e0:	3301      	adds	r3, #1
 80094e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80094e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e8:	881b      	ldrh	r3, [r3, #0]
 80094ea:	b29a      	uxth	r2, r3
 80094ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	029b      	lsls	r3, r3, #10
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	4313      	orrs	r3, r2
 80094f8:	b29a      	uxth	r2, r3
 80094fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094fc:	801a      	strh	r2, [r3, #0]
 80094fe:	e020      	b.n	8009542 <USB_ActivateEndpoint+0x30e>
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	691b      	ldr	r3, [r3, #16]
 8009504:	095b      	lsrs	r3, r3, #5
 8009506:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	691b      	ldr	r3, [r3, #16]
 800950e:	f003 031f 	and.w	r3, r3, #31
 8009512:	2b00      	cmp	r3, #0
 8009514:	d104      	bne.n	8009520 <USB_ActivateEndpoint+0x2ec>
 8009516:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800951a:	3b01      	subs	r3, #1
 800951c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009522:	881b      	ldrh	r3, [r3, #0]
 8009524:	b29a      	uxth	r2, r3
 8009526:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800952a:	b29b      	uxth	r3, r3
 800952c:	029b      	lsls	r3, r3, #10
 800952e:	b29b      	uxth	r3, r3
 8009530:	4313      	orrs	r3, r2
 8009532:	b29b      	uxth	r3, r3
 8009534:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009538:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800953c:	b29a      	uxth	r2, r3
 800953e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009540:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	4413      	add	r3, r2
 800954c:	881b      	ldrh	r3, [r3, #0]
 800954e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009550:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009552:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009556:	2b00      	cmp	r3, #0
 8009558:	d01b      	beq.n	8009592 <USB_ActivateEndpoint+0x35e>
 800955a:	687a      	ldr	r2, [r7, #4]
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	4413      	add	r3, r2
 8009564:	881b      	ldrh	r3, [r3, #0]
 8009566:	b29b      	uxth	r3, r3
 8009568:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800956c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009570:	843b      	strh	r3, [r7, #32]
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	441a      	add	r2, r3
 800957c:	8c3b      	ldrh	r3, [r7, #32]
 800957e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009582:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009586:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800958a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800958e:	b29b      	uxth	r3, r3
 8009590:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d124      	bne.n	80095e4 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	4413      	add	r3, r2
 80095a4:	881b      	ldrh	r3, [r3, #0]
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80095ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095b0:	83bb      	strh	r3, [r7, #28]
 80095b2:	8bbb      	ldrh	r3, [r7, #28]
 80095b4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80095b8:	83bb      	strh	r3, [r7, #28]
 80095ba:	8bbb      	ldrh	r3, [r7, #28]
 80095bc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80095c0:	83bb      	strh	r3, [r7, #28]
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	441a      	add	r2, r3
 80095cc:	8bbb      	ldrh	r3, [r7, #28]
 80095ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095de:	b29b      	uxth	r3, r3
 80095e0:	8013      	strh	r3, [r2, #0]
 80095e2:	e306      	b.n	8009bf2 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	4413      	add	r3, r2
 80095ee:	881b      	ldrh	r3, [r3, #0]
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80095f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095fa:	83fb      	strh	r3, [r7, #30]
 80095fc:	8bfb      	ldrh	r3, [r7, #30]
 80095fe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009602:	83fb      	strh	r3, [r7, #30]
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	441a      	add	r2, r3
 800960e:	8bfb      	ldrh	r3, [r7, #30]
 8009610:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009614:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009618:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800961c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009620:	b29b      	uxth	r3, r3
 8009622:	8013      	strh	r3, [r2, #0]
 8009624:	e2e5      	b.n	8009bf2 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	78db      	ldrb	r3, [r3, #3]
 800962a:	2b02      	cmp	r3, #2
 800962c:	d11e      	bne.n	800966c <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	4413      	add	r3, r2
 8009638:	881b      	ldrh	r3, [r3, #0]
 800963a:	b29b      	uxth	r3, r3
 800963c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009644:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	441a      	add	r2, r3
 8009652:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8009656:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800965a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800965e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009666:	b29b      	uxth	r3, r3
 8009668:	8013      	strh	r3, [r2, #0]
 800966a:	e01d      	b.n	80096a8 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	4413      	add	r3, r2
 8009676:	881b      	ldrh	r3, [r3, #0]
 8009678:	b29b      	uxth	r3, r3
 800967a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800967e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009682:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	441a      	add	r2, r3
 8009690:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8009694:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009698:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800969c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	461a      	mov	r2, r3
 80096b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80096b8:	4413      	add	r3, r2
 80096ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	00da      	lsls	r2, r3, #3
 80096c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80096c4:	4413      	add	r3, r2
 80096c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	891b      	ldrh	r3, [r3, #8]
 80096d0:	085b      	lsrs	r3, r3, #1
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	005b      	lsls	r3, r3, #1
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80096da:	801a      	strh	r2, [r3, #0]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	677b      	str	r3, [r7, #116]	@ 0x74
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	461a      	mov	r2, r3
 80096ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80096ec:	4413      	add	r3, r2
 80096ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	00da      	lsls	r2, r3, #3
 80096f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80096f8:	4413      	add	r3, r2
 80096fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80096fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	895b      	ldrh	r3, [r3, #10]
 8009704:	085b      	lsrs	r3, r3, #1
 8009706:	b29b      	uxth	r3, r3
 8009708:	005b      	lsls	r3, r3, #1
 800970a:	b29a      	uxth	r2, r3
 800970c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800970e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	785b      	ldrb	r3, [r3, #1]
 8009714:	2b00      	cmp	r3, #0
 8009716:	f040 81af 	bne.w	8009a78 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	881b      	ldrh	r3, [r3, #0]
 8009726:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800972a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800972e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009732:	2b00      	cmp	r3, #0
 8009734:	d01d      	beq.n	8009772 <USB_ActivateEndpoint+0x53e>
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	4413      	add	r3, r2
 8009740:	881b      	ldrh	r3, [r3, #0]
 8009742:	b29b      	uxth	r3, r3
 8009744:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009748:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800974c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	441a      	add	r2, r3
 800975a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800975e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009762:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009766:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800976a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800976e:	b29b      	uxth	r3, r3
 8009770:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4413      	add	r3, r2
 800977c:	881b      	ldrh	r3, [r3, #0]
 800977e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8009782:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8009786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800978a:	2b00      	cmp	r3, #0
 800978c:	d01d      	beq.n	80097ca <USB_ActivateEndpoint+0x596>
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	4413      	add	r3, r2
 8009798:	881b      	ldrh	r3, [r3, #0]
 800979a:	b29b      	uxth	r3, r3
 800979c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097a4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	441a      	add	r2, r3
 80097b2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80097b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	785b      	ldrb	r3, [r3, #1]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d16b      	bne.n	80098aa <USB_ActivateEndpoint+0x676>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097dc:	b29b      	uxth	r3, r3
 80097de:	461a      	mov	r2, r3
 80097e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097e2:	4413      	add	r3, r2
 80097e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	00da      	lsls	r2, r3, #3
 80097ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097ee:	4413      	add	r3, r2
 80097f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80097f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097f8:	881b      	ldrh	r3, [r3, #0]
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009800:	b29a      	uxth	r2, r3
 8009802:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009804:	801a      	strh	r2, [r3, #0]
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d10a      	bne.n	8009824 <USB_ActivateEndpoint+0x5f0>
 800980e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009810:	881b      	ldrh	r3, [r3, #0]
 8009812:	b29b      	uxth	r3, r3
 8009814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800981c:	b29a      	uxth	r2, r3
 800981e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009820:	801a      	strh	r2, [r3, #0]
 8009822:	e05d      	b.n	80098e0 <USB_ActivateEndpoint+0x6ac>
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	2b3e      	cmp	r3, #62	@ 0x3e
 800982a:	d81c      	bhi.n	8009866 <USB_ActivateEndpoint+0x632>
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	691b      	ldr	r3, [r3, #16]
 8009830:	085b      	lsrs	r3, r3, #1
 8009832:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	f003 0301 	and.w	r3, r3, #1
 800983e:	2b00      	cmp	r3, #0
 8009840:	d004      	beq.n	800984c <USB_ActivateEndpoint+0x618>
 8009842:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009846:	3301      	adds	r3, #1
 8009848:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800984c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800984e:	881b      	ldrh	r3, [r3, #0]
 8009850:	b29a      	uxth	r2, r3
 8009852:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009856:	b29b      	uxth	r3, r3
 8009858:	029b      	lsls	r3, r3, #10
 800985a:	b29b      	uxth	r3, r3
 800985c:	4313      	orrs	r3, r2
 800985e:	b29a      	uxth	r2, r3
 8009860:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009862:	801a      	strh	r2, [r3, #0]
 8009864:	e03c      	b.n	80098e0 <USB_ActivateEndpoint+0x6ac>
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	691b      	ldr	r3, [r3, #16]
 800986a:	095b      	lsrs	r3, r3, #5
 800986c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	f003 031f 	and.w	r3, r3, #31
 8009878:	2b00      	cmp	r3, #0
 800987a:	d104      	bne.n	8009886 <USB_ActivateEndpoint+0x652>
 800987c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009880:	3b01      	subs	r3, #1
 8009882:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009886:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009888:	881b      	ldrh	r3, [r3, #0]
 800988a:	b29a      	uxth	r2, r3
 800988c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009890:	b29b      	uxth	r3, r3
 8009892:	029b      	lsls	r3, r3, #10
 8009894:	b29b      	uxth	r3, r3
 8009896:	4313      	orrs	r3, r2
 8009898:	b29b      	uxth	r3, r3
 800989a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800989e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098a6:	801a      	strh	r2, [r3, #0]
 80098a8:	e01a      	b.n	80098e0 <USB_ActivateEndpoint+0x6ac>
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	785b      	ldrb	r3, [r3, #1]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d116      	bne.n	80098e0 <USB_ActivateEndpoint+0x6ac>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098bc:	b29b      	uxth	r3, r3
 80098be:	461a      	mov	r2, r3
 80098c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098c2:	4413      	add	r3, r2
 80098c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	00da      	lsls	r2, r3, #3
 80098cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098ce:	4413      	add	r3, r2
 80098d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80098d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	691b      	ldr	r3, [r3, #16]
 80098da:	b29a      	uxth	r2, r3
 80098dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098de:	801a      	strh	r2, [r3, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	785b      	ldrb	r3, [r3, #1]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d16b      	bne.n	80099c4 <USB_ActivateEndpoint+0x790>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	461a      	mov	r2, r3
 80098fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098fc:	4413      	add	r3, r2
 80098fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	00da      	lsls	r2, r3, #3
 8009906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009908:	4413      	add	r3, r2
 800990a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800990e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009912:	881b      	ldrh	r3, [r3, #0]
 8009914:	b29b      	uxth	r3, r3
 8009916:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800991a:	b29a      	uxth	r2, r3
 800991c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800991e:	801a      	strh	r2, [r3, #0]
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d10a      	bne.n	800993e <USB_ActivateEndpoint+0x70a>
 8009928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800992a:	881b      	ldrh	r3, [r3, #0]
 800992c:	b29b      	uxth	r3, r3
 800992e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009936:	b29a      	uxth	r2, r3
 8009938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800993a:	801a      	strh	r2, [r3, #0]
 800993c:	e05b      	b.n	80099f6 <USB_ActivateEndpoint+0x7c2>
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	691b      	ldr	r3, [r3, #16]
 8009942:	2b3e      	cmp	r3, #62	@ 0x3e
 8009944:	d81c      	bhi.n	8009980 <USB_ActivateEndpoint+0x74c>
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	085b      	lsrs	r3, r3, #1
 800994c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	691b      	ldr	r3, [r3, #16]
 8009954:	f003 0301 	and.w	r3, r3, #1
 8009958:	2b00      	cmp	r3, #0
 800995a:	d004      	beq.n	8009966 <USB_ActivateEndpoint+0x732>
 800995c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009960:	3301      	adds	r3, #1
 8009962:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009968:	881b      	ldrh	r3, [r3, #0]
 800996a:	b29a      	uxth	r2, r3
 800996c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009970:	b29b      	uxth	r3, r3
 8009972:	029b      	lsls	r3, r3, #10
 8009974:	b29b      	uxth	r3, r3
 8009976:	4313      	orrs	r3, r2
 8009978:	b29a      	uxth	r2, r3
 800997a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800997c:	801a      	strh	r2, [r3, #0]
 800997e:	e03a      	b.n	80099f6 <USB_ActivateEndpoint+0x7c2>
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	095b      	lsrs	r3, r3, #5
 8009986:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	f003 031f 	and.w	r3, r3, #31
 8009992:	2b00      	cmp	r3, #0
 8009994:	d104      	bne.n	80099a0 <USB_ActivateEndpoint+0x76c>
 8009996:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800999a:	3b01      	subs	r3, #1
 800999c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80099a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a2:	881b      	ldrh	r3, [r3, #0]
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	029b      	lsls	r3, r3, #10
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	4313      	orrs	r3, r2
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099bc:	b29a      	uxth	r2, r3
 80099be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c0:	801a      	strh	r2, [r3, #0]
 80099c2:	e018      	b.n	80099f6 <USB_ActivateEndpoint+0x7c2>
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	785b      	ldrb	r3, [r3, #1]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d114      	bne.n	80099f6 <USB_ActivateEndpoint+0x7c2>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	461a      	mov	r2, r3
 80099d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099d8:	4413      	add	r3, r2
 80099da:	647b      	str	r3, [r7, #68]	@ 0x44
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	00da      	lsls	r2, r3, #3
 80099e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099e4:	4413      	add	r3, r2
 80099e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80099ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	b29a      	uxth	r2, r3
 80099f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099f4:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	881b      	ldrh	r3, [r3, #0]
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009a08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a0c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009a0e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009a10:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009a14:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009a16:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009a18:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009a1c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	441a      	add	r2, r3
 8009a28:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009a2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	4413      	add	r3, r2
 8009a48:	881b      	ldrh	r3, [r3, #0]
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a54:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	441a      	add	r2, r3
 8009a60:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009a62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	8013      	strh	r3, [r2, #0]
 8009a76:	e0bc      	b.n	8009bf2 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	4413      	add	r3, r2
 8009a82:	881b      	ldrh	r3, [r3, #0]
 8009a84:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8009a88:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009a8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d01d      	beq.n	8009ad0 <USB_ActivateEndpoint+0x89c>
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	4413      	add	r3, r2
 8009a9e:	881b      	ldrh	r3, [r3, #0]
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009aaa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	441a      	add	r2, r3
 8009ab8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009abc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ac0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ac4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009ac8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	4413      	add	r3, r2
 8009ada:	881b      	ldrh	r3, [r3, #0]
 8009adc:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8009ae0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8009ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d01d      	beq.n	8009b28 <USB_ActivateEndpoint+0x8f4>
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	4413      	add	r3, r2
 8009af6:	881b      	ldrh	r3, [r3, #0]
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b02:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	441a      	add	r2, r3
 8009b10:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8009b14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b20:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	78db      	ldrb	r3, [r3, #3]
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d024      	beq.n	8009b7a <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	4413      	add	r3, r2
 8009b3a:	881b      	ldrh	r3, [r3, #0]
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b46:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8009b4a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009b4e:	f083 0320 	eor.w	r3, r3, #32
 8009b52:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	441a      	add	r2, r3
 8009b60:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009b64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	8013      	strh	r3, [r2, #0]
 8009b78:	e01d      	b.n	8009bb6 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	4413      	add	r3, r2
 8009b84:	881b      	ldrh	r3, [r3, #0]
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b90:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	441a      	add	r2, r3
 8009b9e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009ba2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ba6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009baa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	4413      	add	r3, r2
 8009bc0:	881b      	ldrh	r3, [r3, #0]
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009bc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bcc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	441a      	add	r2, r3
 8009bda:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009bde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009be2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009be6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009bf2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	379c      	adds	r7, #156	@ 0x9c
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop

08009c04 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b08d      	sub	sp, #52	@ 0x34
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	7b1b      	ldrb	r3, [r3, #12]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f040 808e 	bne.w	8009d34 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	785b      	ldrb	r3, [r3, #1]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d044      	beq.n	8009caa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	4413      	add	r3, r2
 8009c2a:	881b      	ldrh	r3, [r3, #0]
 8009c2c:	81bb      	strh	r3, [r7, #12]
 8009c2e:	89bb      	ldrh	r3, [r7, #12]
 8009c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d01b      	beq.n	8009c70 <USB_DeactivateEndpoint+0x6c>
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	4413      	add	r3, r2
 8009c42:	881b      	ldrh	r3, [r3, #0]
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c4e:	817b      	strh	r3, [r7, #10]
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	441a      	add	r2, r3
 8009c5a:	897b      	ldrh	r3, [r7, #10]
 8009c5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c68:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	4413      	add	r3, r2
 8009c7a:	881b      	ldrh	r3, [r3, #0]
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c86:	813b      	strh	r3, [r7, #8]
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	441a      	add	r2, r3
 8009c92:	893b      	ldrh	r3, [r7, #8]
 8009c94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ca0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	8013      	strh	r3, [r2, #0]
 8009ca8:	e192      	b.n	8009fd0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	4413      	add	r3, r2
 8009cb4:	881b      	ldrh	r3, [r3, #0]
 8009cb6:	827b      	strh	r3, [r7, #18]
 8009cb8:	8a7b      	ldrh	r3, [r7, #18]
 8009cba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d01b      	beq.n	8009cfa <USB_DeactivateEndpoint+0xf6>
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	4413      	add	r3, r2
 8009ccc:	881b      	ldrh	r3, [r3, #0]
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cd8:	823b      	strh	r3, [r7, #16]
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	441a      	add	r2, r3
 8009ce4:	8a3b      	ldrh	r3, [r7, #16]
 8009ce6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009cea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009cee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	4413      	add	r3, r2
 8009d04:	881b      	ldrh	r3, [r3, #0]
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d10:	81fb      	strh	r3, [r7, #14]
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	009b      	lsls	r3, r3, #2
 8009d1a:	441a      	add	r2, r3
 8009d1c:	89fb      	ldrh	r3, [r7, #14]
 8009d1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	8013      	strh	r3, [r2, #0]
 8009d32:	e14d      	b.n	8009fd0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	785b      	ldrb	r3, [r3, #1]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	f040 80a5 	bne.w	8009e88 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	4413      	add	r3, r2
 8009d48:	881b      	ldrh	r3, [r3, #0]
 8009d4a:	843b      	strh	r3, [r7, #32]
 8009d4c:	8c3b      	ldrh	r3, [r7, #32]
 8009d4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d01b      	beq.n	8009d8e <USB_DeactivateEndpoint+0x18a>
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	4413      	add	r3, r2
 8009d60:	881b      	ldrh	r3, [r3, #0]
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d6c:	83fb      	strh	r3, [r7, #30]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	441a      	add	r2, r3
 8009d78:	8bfb      	ldrh	r3, [r7, #30]
 8009d7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009d86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	4413      	add	r3, r2
 8009d98:	881b      	ldrh	r3, [r3, #0]
 8009d9a:	83bb      	strh	r3, [r7, #28]
 8009d9c:	8bbb      	ldrh	r3, [r7, #28]
 8009d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d01b      	beq.n	8009dde <USB_DeactivateEndpoint+0x1da>
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	4413      	add	r3, r2
 8009db0:	881b      	ldrh	r3, [r3, #0]
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009db8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dbc:	837b      	strh	r3, [r7, #26]
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	441a      	add	r2, r3
 8009dc8:	8b7b      	ldrh	r3, [r7, #26]
 8009dca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009dce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009dd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009dd6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	4413      	add	r3, r2
 8009de8:	881b      	ldrh	r3, [r3, #0]
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009df0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009df4:	833b      	strh	r3, [r7, #24]
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	441a      	add	r2, r3
 8009e00:	8b3b      	ldrh	r3, [r7, #24]
 8009e02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e0e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4413      	add	r3, r2
 8009e20:	881b      	ldrh	r3, [r3, #0]
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009e28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e2c:	82fb      	strh	r3, [r7, #22]
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	441a      	add	r2, r3
 8009e38:	8afb      	ldrh	r3, [r7, #22]
 8009e3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	4413      	add	r3, r2
 8009e58:	881b      	ldrh	r3, [r3, #0]
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e64:	82bb      	strh	r3, [r7, #20]
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	441a      	add	r2, r3
 8009e70:	8abb      	ldrh	r3, [r7, #20]
 8009e72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	8013      	strh	r3, [r2, #0]
 8009e86:	e0a3      	b.n	8009fd0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	4413      	add	r3, r2
 8009e92:	881b      	ldrh	r3, [r3, #0]
 8009e94:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8009e96:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009e98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d01b      	beq.n	8009ed8 <USB_DeactivateEndpoint+0x2d4>
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	4413      	add	r3, r2
 8009eaa:	881b      	ldrh	r3, [r3, #0]
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009eb6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	441a      	add	r2, r3
 8009ec2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009ec4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ec8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ecc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009ed0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	4413      	add	r3, r2
 8009ee2:	881b      	ldrh	r3, [r3, #0]
 8009ee4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009ee6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d01b      	beq.n	8009f28 <USB_DeactivateEndpoint+0x324>
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	4413      	add	r3, r2
 8009efa:	881b      	ldrh	r3, [r3, #0]
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f06:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	441a      	add	r2, r3
 8009f12:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009f14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f20:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	4413      	add	r3, r2
 8009f32:	881b      	ldrh	r3, [r3, #0]
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f3e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	441a      	add	r2, r3
 8009f4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009f4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009f58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	4413      	add	r3, r2
 8009f6a:	881b      	ldrh	r3, [r3, #0]
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f76:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	441a      	add	r2, r3
 8009f82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009f84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	4413      	add	r3, r2
 8009fa2:	881b      	ldrh	r3, [r3, #0]
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fae:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	441a      	add	r2, r3
 8009fba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009fbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009fc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009fd0:	2300      	movs	r3, #0
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3734      	adds	r7, #52	@ 0x34
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr

08009fde <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b0ac      	sub	sp, #176	@ 0xb0
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
 8009fe6:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	785b      	ldrb	r3, [r3, #1]
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	f040 84ca 	bne.w	800a986 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	699a      	ldr	r2, [r3, #24]
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	691b      	ldr	r3, [r3, #16]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d904      	bls.n	800a008 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a006:	e003      	b.n	800a010 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	699b      	ldr	r3, [r3, #24]
 800a00c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	7b1b      	ldrb	r3, [r3, #12]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d122      	bne.n	800a05e <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	6959      	ldr	r1, [r3, #20]
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	88da      	ldrh	r2, [r3, #6]
 800a020:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a024:	b29b      	uxth	r3, r3
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 febd 	bl	800ada6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	613b      	str	r3, [r7, #16]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a036:	b29b      	uxth	r3, r3
 800a038:	461a      	mov	r2, r3
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	4413      	add	r3, r2
 800a03e:	613b      	str	r3, [r7, #16]
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	00da      	lsls	r2, r3, #3
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	4413      	add	r3, r2
 800a04a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a04e:	60fb      	str	r3, [r7, #12]
 800a050:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a054:	b29a      	uxth	r2, r3
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	801a      	strh	r2, [r3, #0]
 800a05a:	f000 bc6f 	b.w	800a93c <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	78db      	ldrb	r3, [r3, #3]
 800a062:	2b02      	cmp	r3, #2
 800a064:	f040 831e 	bne.w	800a6a4 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	6a1a      	ldr	r2, [r3, #32]
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	691b      	ldr	r3, [r3, #16]
 800a070:	429a      	cmp	r2, r3
 800a072:	f240 82cf 	bls.w	800a614 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	4413      	add	r3, r2
 800a080:	881b      	ldrh	r3, [r3, #0]
 800a082:	b29b      	uxth	r3, r3
 800a084:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a088:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a08c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	441a      	add	r2, r3
 800a09a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a09e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0a6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a0aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	6a1a      	ldr	r2, [r3, #32]
 800a0b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0ba:	1ad2      	subs	r2, r2, r3
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	4413      	add	r3, r2
 800a0ca:	881b      	ldrh	r3, [r3, #0]
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	f000 814f 	beq.w	800a376 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	785b      	ldrb	r3, [r3, #1]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d16b      	bne.n	800a1bc <USB_EPStartXfer+0x1de>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f4:	4413      	add	r3, r2
 800a0f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	00da      	lsls	r2, r3, #3
 800a0fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a100:	4413      	add	r3, r2
 800a102:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a106:	627b      	str	r3, [r7, #36]	@ 0x24
 800a108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a10a:	881b      	ldrh	r3, [r3, #0]
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a112:	b29a      	uxth	r2, r3
 800a114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a116:	801a      	strh	r2, [r3, #0]
 800a118:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d10a      	bne.n	800a136 <USB_EPStartXfer+0x158>
 800a120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a122:	881b      	ldrh	r3, [r3, #0]
 800a124:	b29b      	uxth	r3, r3
 800a126:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a12a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a12e:	b29a      	uxth	r2, r3
 800a130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a132:	801a      	strh	r2, [r3, #0]
 800a134:	e05b      	b.n	800a1ee <USB_EPStartXfer+0x210>
 800a136:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a13a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a13c:	d81c      	bhi.n	800a178 <USB_EPStartXfer+0x19a>
 800a13e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a142:	085b      	lsrs	r3, r3, #1
 800a144:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a148:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a14c:	f003 0301 	and.w	r3, r3, #1
 800a150:	2b00      	cmp	r3, #0
 800a152:	d004      	beq.n	800a15e <USB_EPStartXfer+0x180>
 800a154:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a158:	3301      	adds	r3, #1
 800a15a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a15e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a160:	881b      	ldrh	r3, [r3, #0]
 800a162:	b29a      	uxth	r2, r3
 800a164:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a168:	b29b      	uxth	r3, r3
 800a16a:	029b      	lsls	r3, r3, #10
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	4313      	orrs	r3, r2
 800a170:	b29a      	uxth	r2, r3
 800a172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a174:	801a      	strh	r2, [r3, #0]
 800a176:	e03a      	b.n	800a1ee <USB_EPStartXfer+0x210>
 800a178:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a17c:	095b      	lsrs	r3, r3, #5
 800a17e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a182:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a186:	f003 031f 	and.w	r3, r3, #31
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d104      	bne.n	800a198 <USB_EPStartXfer+0x1ba>
 800a18e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a192:	3b01      	subs	r3, #1
 800a194:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a19a:	881b      	ldrh	r3, [r3, #0]
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	029b      	lsls	r3, r3, #10
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1b4:	b29a      	uxth	r2, r3
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b8:	801a      	strh	r2, [r3, #0]
 800a1ba:	e018      	b.n	800a1ee <USB_EPStartXfer+0x210>
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	785b      	ldrb	r3, [r3, #1]
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d114      	bne.n	800a1ee <USB_EPStartXfer+0x210>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d0:	4413      	add	r3, r2
 800a1d2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	00da      	lsls	r2, r3, #3
 800a1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1dc:	4413      	add	r3, r2
 800a1de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a1e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	895b      	ldrh	r3, [r3, #10]
 800a1f2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	6959      	ldr	r1, [r3, #20]
 800a1fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 fdce 	bl	800ada6 <USB_WritePMA>
            ep->xfer_buff += len;
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	695a      	ldr	r2, [r3, #20]
 800a20e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a212:	441a      	add	r2, r3
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	6a1a      	ldr	r2, [r3, #32]
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	429a      	cmp	r2, r3
 800a222:	d907      	bls.n	800a234 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	6a1a      	ldr	r2, [r3, #32]
 800a228:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a22c:	1ad2      	subs	r2, r2, r3
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	621a      	str	r2, [r3, #32]
 800a232:	e006      	b.n	800a242 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	6a1b      	ldr	r3, [r3, #32]
 800a238:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	2200      	movs	r2, #0
 800a240:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	785b      	ldrb	r3, [r3, #1]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d16b      	bne.n	800a322 <USB_EPStartXfer+0x344>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	61bb      	str	r3, [r7, #24]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a254:	b29b      	uxth	r3, r3
 800a256:	461a      	mov	r2, r3
 800a258:	69bb      	ldr	r3, [r7, #24]
 800a25a:	4413      	add	r3, r2
 800a25c:	61bb      	str	r3, [r7, #24]
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	00da      	lsls	r2, r3, #3
 800a264:	69bb      	ldr	r3, [r7, #24]
 800a266:	4413      	add	r3, r2
 800a268:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a26c:	617b      	str	r3, [r7, #20]
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	881b      	ldrh	r3, [r3, #0]
 800a272:	b29b      	uxth	r3, r3
 800a274:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a278:	b29a      	uxth	r2, r3
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	801a      	strh	r2, [r3, #0]
 800a27e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a282:	2b00      	cmp	r3, #0
 800a284:	d10a      	bne.n	800a29c <USB_EPStartXfer+0x2be>
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	881b      	ldrh	r3, [r3, #0]
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a294:	b29a      	uxth	r2, r3
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	801a      	strh	r2, [r3, #0]
 800a29a:	e05d      	b.n	800a358 <USB_EPStartXfer+0x37a>
 800a29c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2a0:	2b3e      	cmp	r3, #62	@ 0x3e
 800a2a2:	d81c      	bhi.n	800a2de <USB_EPStartXfer+0x300>
 800a2a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2a8:	085b      	lsrs	r3, r3, #1
 800a2aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a2ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2b2:	f003 0301 	and.w	r3, r3, #1
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d004      	beq.n	800a2c4 <USB_EPStartXfer+0x2e6>
 800a2ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a2be:	3301      	adds	r3, #1
 800a2c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	881b      	ldrh	r3, [r3, #0]
 800a2c8:	b29a      	uxth	r2, r3
 800a2ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	029b      	lsls	r3, r3, #10
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	b29a      	uxth	r2, r3
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	801a      	strh	r2, [r3, #0]
 800a2dc:	e03c      	b.n	800a358 <USB_EPStartXfer+0x37a>
 800a2de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2e2:	095b      	lsrs	r3, r3, #5
 800a2e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a2e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2ec:	f003 031f 	and.w	r3, r3, #31
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d104      	bne.n	800a2fe <USB_EPStartXfer+0x320>
 800a2f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a2f8:	3b01      	subs	r3, #1
 800a2fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	881b      	ldrh	r3, [r3, #0]
 800a302:	b29a      	uxth	r2, r3
 800a304:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a308:	b29b      	uxth	r3, r3
 800a30a:	029b      	lsls	r3, r3, #10
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	4313      	orrs	r3, r2
 800a310:	b29b      	uxth	r3, r3
 800a312:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a316:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a31a:	b29a      	uxth	r2, r3
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	801a      	strh	r2, [r3, #0]
 800a320:	e01a      	b.n	800a358 <USB_EPStartXfer+0x37a>
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	785b      	ldrb	r3, [r3, #1]
 800a326:	2b01      	cmp	r3, #1
 800a328:	d116      	bne.n	800a358 <USB_EPStartXfer+0x37a>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	623b      	str	r3, [r7, #32]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a334:	b29b      	uxth	r3, r3
 800a336:	461a      	mov	r2, r3
 800a338:	6a3b      	ldr	r3, [r7, #32]
 800a33a:	4413      	add	r3, r2
 800a33c:	623b      	str	r3, [r7, #32]
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	00da      	lsls	r2, r3, #3
 800a344:	6a3b      	ldr	r3, [r7, #32]
 800a346:	4413      	add	r3, r2
 800a348:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a34c:	61fb      	str	r3, [r7, #28]
 800a34e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a352:	b29a      	uxth	r2, r3
 800a354:	69fb      	ldr	r3, [r7, #28]
 800a356:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	891b      	ldrh	r3, [r3, #8]
 800a35c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	6959      	ldr	r1, [r3, #20]
 800a364:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a368:	b29b      	uxth	r3, r3
 800a36a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 fd19 	bl	800ada6 <USB_WritePMA>
 800a374:	e2e2      	b.n	800a93c <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	785b      	ldrb	r3, [r3, #1]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d16b      	bne.n	800a456 <USB_EPStartXfer+0x478>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a388:	b29b      	uxth	r3, r3
 800a38a:	461a      	mov	r2, r3
 800a38c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a38e:	4413      	add	r3, r2
 800a390:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	00da      	lsls	r2, r3, #3
 800a398:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a39a:	4413      	add	r3, r2
 800a39c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a3a0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3a4:	881b      	ldrh	r3, [r3, #0]
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3ac:	b29a      	uxth	r2, r3
 800a3ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3b0:	801a      	strh	r2, [r3, #0]
 800a3b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d10a      	bne.n	800a3d0 <USB_EPStartXfer+0x3f2>
 800a3ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3bc:	881b      	ldrh	r3, [r3, #0]
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3cc:	801a      	strh	r2, [r3, #0]
 800a3ce:	e05d      	b.n	800a48c <USB_EPStartXfer+0x4ae>
 800a3d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3d4:	2b3e      	cmp	r3, #62	@ 0x3e
 800a3d6:	d81c      	bhi.n	800a412 <USB_EPStartXfer+0x434>
 800a3d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3dc:	085b      	lsrs	r3, r3, #1
 800a3de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a3e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3e6:	f003 0301 	and.w	r3, r3, #1
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d004      	beq.n	800a3f8 <USB_EPStartXfer+0x41a>
 800a3ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a3f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3fa:	881b      	ldrh	r3, [r3, #0]
 800a3fc:	b29a      	uxth	r2, r3
 800a3fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a402:	b29b      	uxth	r3, r3
 800a404:	029b      	lsls	r3, r3, #10
 800a406:	b29b      	uxth	r3, r3
 800a408:	4313      	orrs	r3, r2
 800a40a:	b29a      	uxth	r2, r3
 800a40c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a40e:	801a      	strh	r2, [r3, #0]
 800a410:	e03c      	b.n	800a48c <USB_EPStartXfer+0x4ae>
 800a412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a416:	095b      	lsrs	r3, r3, #5
 800a418:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a41c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a420:	f003 031f 	and.w	r3, r3, #31
 800a424:	2b00      	cmp	r3, #0
 800a426:	d104      	bne.n	800a432 <USB_EPStartXfer+0x454>
 800a428:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a42c:	3b01      	subs	r3, #1
 800a42e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a432:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a434:	881b      	ldrh	r3, [r3, #0]
 800a436:	b29a      	uxth	r2, r3
 800a438:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	029b      	lsls	r3, r3, #10
 800a440:	b29b      	uxth	r3, r3
 800a442:	4313      	orrs	r3, r2
 800a444:	b29b      	uxth	r3, r3
 800a446:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a44a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a44e:	b29a      	uxth	r2, r3
 800a450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a452:	801a      	strh	r2, [r3, #0]
 800a454:	e01a      	b.n	800a48c <USB_EPStartXfer+0x4ae>
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	785b      	ldrb	r3, [r3, #1]
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d116      	bne.n	800a48c <USB_EPStartXfer+0x4ae>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	653b      	str	r3, [r7, #80]	@ 0x50
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a468:	b29b      	uxth	r3, r3
 800a46a:	461a      	mov	r2, r3
 800a46c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a46e:	4413      	add	r3, r2
 800a470:	653b      	str	r3, [r7, #80]	@ 0x50
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	00da      	lsls	r2, r3, #3
 800a478:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a47a:	4413      	add	r3, r2
 800a47c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a480:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a482:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a486:	b29a      	uxth	r2, r3
 800a488:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a48a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	891b      	ldrh	r3, [r3, #8]
 800a490:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	6959      	ldr	r1, [r3, #20]
 800a498:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 fc7f 	bl	800ada6 <USB_WritePMA>
            ep->xfer_buff += len;
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	695a      	ldr	r2, [r3, #20]
 800a4ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4b0:	441a      	add	r2, r3
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	6a1a      	ldr	r2, [r3, #32]
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d907      	bls.n	800a4d2 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	6a1a      	ldr	r2, [r3, #32]
 800a4c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4ca:	1ad2      	subs	r2, r2, r3
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	621a      	str	r2, [r3, #32]
 800a4d0:	e006      	b.n	800a4e0 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	6a1b      	ldr	r3, [r3, #32]
 800a4d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	785b      	ldrb	r3, [r3, #1]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d16b      	bne.n	800a5c4 <USB_EPStartXfer+0x5e6>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4fc:	4413      	add	r3, r2
 800a4fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	00da      	lsls	r2, r3, #3
 800a506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a508:	4413      	add	r3, r2
 800a50a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a50e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a512:	881b      	ldrh	r3, [r3, #0]
 800a514:	b29b      	uxth	r3, r3
 800a516:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a51a:	b29a      	uxth	r2, r3
 800a51c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a51e:	801a      	strh	r2, [r3, #0]
 800a520:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a524:	2b00      	cmp	r3, #0
 800a526:	d10a      	bne.n	800a53e <USB_EPStartXfer+0x560>
 800a528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a52a:	881b      	ldrh	r3, [r3, #0]
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a536:	b29a      	uxth	r2, r3
 800a538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a53a:	801a      	strh	r2, [r3, #0]
 800a53c:	e05b      	b.n	800a5f6 <USB_EPStartXfer+0x618>
 800a53e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a542:	2b3e      	cmp	r3, #62	@ 0x3e
 800a544:	d81c      	bhi.n	800a580 <USB_EPStartXfer+0x5a2>
 800a546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a54a:	085b      	lsrs	r3, r3, #1
 800a54c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a550:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a554:	f003 0301 	and.w	r3, r3, #1
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d004      	beq.n	800a566 <USB_EPStartXfer+0x588>
 800a55c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a560:	3301      	adds	r3, #1
 800a562:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a568:	881b      	ldrh	r3, [r3, #0]
 800a56a:	b29a      	uxth	r2, r3
 800a56c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a570:	b29b      	uxth	r3, r3
 800a572:	029b      	lsls	r3, r3, #10
 800a574:	b29b      	uxth	r3, r3
 800a576:	4313      	orrs	r3, r2
 800a578:	b29a      	uxth	r2, r3
 800a57a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a57c:	801a      	strh	r2, [r3, #0]
 800a57e:	e03a      	b.n	800a5f6 <USB_EPStartXfer+0x618>
 800a580:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a584:	095b      	lsrs	r3, r3, #5
 800a586:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a58a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a58e:	f003 031f 	and.w	r3, r3, #31
 800a592:	2b00      	cmp	r3, #0
 800a594:	d104      	bne.n	800a5a0 <USB_EPStartXfer+0x5c2>
 800a596:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a59a:	3b01      	subs	r3, #1
 800a59c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a5a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5a2:	881b      	ldrh	r3, [r3, #0]
 800a5a4:	b29a      	uxth	r2, r3
 800a5a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	029b      	lsls	r3, r3, #10
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5bc:	b29a      	uxth	r2, r3
 800a5be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5c0:	801a      	strh	r2, [r3, #0]
 800a5c2:	e018      	b.n	800a5f6 <USB_EPStartXfer+0x618>
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	785b      	ldrb	r3, [r3, #1]
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d114      	bne.n	800a5f6 <USB_EPStartXfer+0x618>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5d8:	4413      	add	r3, r2
 800a5da:	643b      	str	r3, [r7, #64]	@ 0x40
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	00da      	lsls	r2, r3, #3
 800a5e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5e4:	4413      	add	r3, r2
 800a5e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a5ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5f0:	b29a      	uxth	r2, r3
 800a5f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	895b      	ldrh	r3, [r3, #10]
 800a5fa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	6959      	ldr	r1, [r3, #20]
 800a602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a606:	b29b      	uxth	r3, r3
 800a608:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fbca 	bl	800ada6 <USB_WritePMA>
 800a612:	e193      	b.n	800a93c <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	6a1b      	ldr	r3, [r3, #32]
 800a618:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	4413      	add	r3, r2
 800a626:	881b      	ldrh	r3, [r3, #0]
 800a628:	b29b      	uxth	r3, r3
 800a62a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a62e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a632:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	441a      	add	r2, r3
 800a640:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a644:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a648:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a64c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a654:	b29b      	uxth	r3, r3
 800a656:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a662:	b29b      	uxth	r3, r3
 800a664:	461a      	mov	r2, r3
 800a666:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a668:	4413      	add	r3, r2
 800a66a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	00da      	lsls	r2, r3, #3
 800a672:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a674:	4413      	add	r3, r2
 800a676:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a67a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a67c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a680:	b29a      	uxth	r2, r3
 800a682:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a684:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	891b      	ldrh	r3, [r3, #8]
 800a68a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	6959      	ldr	r1, [r3, #20]
 800a692:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a696:	b29b      	uxth	r3, r3
 800a698:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 fb82 	bl	800ada6 <USB_WritePMA>
 800a6a2:	e14b      	b.n	800a93c <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	6a1a      	ldr	r2, [r3, #32]
 800a6a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6ac:	1ad2      	subs	r2, r2, r3
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	4413      	add	r3, r2
 800a6bc:	881b      	ldrh	r3, [r3, #0]
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f000 809a 	beq.w	800a7fe <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	673b      	str	r3, [r7, #112]	@ 0x70
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	785b      	ldrb	r3, [r3, #1]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d16b      	bne.n	800a7ae <USB_EPStartXfer+0x7d0>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6e0:	b29b      	uxth	r3, r3
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a6e6:	4413      	add	r3, r2
 800a6e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	00da      	lsls	r2, r3, #3
 800a6f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a6f2:	4413      	add	r3, r2
 800a6f4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a6f8:	667b      	str	r3, [r7, #100]	@ 0x64
 800a6fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a6fc:	881b      	ldrh	r3, [r3, #0]
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a704:	b29a      	uxth	r2, r3
 800a706:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a708:	801a      	strh	r2, [r3, #0]
 800a70a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d10a      	bne.n	800a728 <USB_EPStartXfer+0x74a>
 800a712:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a714:	881b      	ldrh	r3, [r3, #0]
 800a716:	b29b      	uxth	r3, r3
 800a718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a71c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a720:	b29a      	uxth	r2, r3
 800a722:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a724:	801a      	strh	r2, [r3, #0]
 800a726:	e05b      	b.n	800a7e0 <USB_EPStartXfer+0x802>
 800a728:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a72c:	2b3e      	cmp	r3, #62	@ 0x3e
 800a72e:	d81c      	bhi.n	800a76a <USB_EPStartXfer+0x78c>
 800a730:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a734:	085b      	lsrs	r3, r3, #1
 800a736:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a73a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a73e:	f003 0301 	and.w	r3, r3, #1
 800a742:	2b00      	cmp	r3, #0
 800a744:	d004      	beq.n	800a750 <USB_EPStartXfer+0x772>
 800a746:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a74a:	3301      	adds	r3, #1
 800a74c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a750:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a752:	881b      	ldrh	r3, [r3, #0]
 800a754:	b29a      	uxth	r2, r3
 800a756:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	029b      	lsls	r3, r3, #10
 800a75e:	b29b      	uxth	r3, r3
 800a760:	4313      	orrs	r3, r2
 800a762:	b29a      	uxth	r2, r3
 800a764:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a766:	801a      	strh	r2, [r3, #0]
 800a768:	e03a      	b.n	800a7e0 <USB_EPStartXfer+0x802>
 800a76a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a76e:	095b      	lsrs	r3, r3, #5
 800a770:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a774:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a778:	f003 031f 	and.w	r3, r3, #31
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d104      	bne.n	800a78a <USB_EPStartXfer+0x7ac>
 800a780:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a784:	3b01      	subs	r3, #1
 800a786:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a78a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a78c:	881b      	ldrh	r3, [r3, #0]
 800a78e:	b29a      	uxth	r2, r3
 800a790:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a794:	b29b      	uxth	r3, r3
 800a796:	029b      	lsls	r3, r3, #10
 800a798:	b29b      	uxth	r3, r3
 800a79a:	4313      	orrs	r3, r2
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a7aa:	801a      	strh	r2, [r3, #0]
 800a7ac:	e018      	b.n	800a7e0 <USB_EPStartXfer+0x802>
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	785b      	ldrb	r3, [r3, #1]
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d114      	bne.n	800a7e0 <USB_EPStartXfer+0x802>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	461a      	mov	r2, r3
 800a7c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a7c2:	4413      	add	r3, r2
 800a7c4:	673b      	str	r3, [r7, #112]	@ 0x70
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	00da      	lsls	r2, r3, #3
 800a7cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a7ce:	4413      	add	r3, r2
 800a7d0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a7d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a7d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a7da:	b29a      	uxth	r2, r3
 800a7dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	895b      	ldrh	r3, [r3, #10]
 800a7e4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	6959      	ldr	r1, [r3, #20]
 800a7ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 fad5 	bl	800ada6 <USB_WritePMA>
 800a7fc:	e09e      	b.n	800a93c <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	785b      	ldrb	r3, [r3, #1]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d16b      	bne.n	800a8de <USB_EPStartXfer+0x900>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a810:	b29b      	uxth	r3, r3
 800a812:	461a      	mov	r2, r3
 800a814:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a816:	4413      	add	r3, r2
 800a818:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	00da      	lsls	r2, r3, #3
 800a820:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a822:	4413      	add	r3, r2
 800a824:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a828:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a82a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a82c:	881b      	ldrh	r3, [r3, #0]
 800a82e:	b29b      	uxth	r3, r3
 800a830:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a834:	b29a      	uxth	r2, r3
 800a836:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a838:	801a      	strh	r2, [r3, #0]
 800a83a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d10a      	bne.n	800a858 <USB_EPStartXfer+0x87a>
 800a842:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a844:	881b      	ldrh	r3, [r3, #0]
 800a846:	b29b      	uxth	r3, r3
 800a848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a84c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a850:	b29a      	uxth	r2, r3
 800a852:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a854:	801a      	strh	r2, [r3, #0]
 800a856:	e063      	b.n	800a920 <USB_EPStartXfer+0x942>
 800a858:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a85c:	2b3e      	cmp	r3, #62	@ 0x3e
 800a85e:	d81c      	bhi.n	800a89a <USB_EPStartXfer+0x8bc>
 800a860:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a864:	085b      	lsrs	r3, r3, #1
 800a866:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a86a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a86e:	f003 0301 	and.w	r3, r3, #1
 800a872:	2b00      	cmp	r3, #0
 800a874:	d004      	beq.n	800a880 <USB_EPStartXfer+0x8a2>
 800a876:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a87a:	3301      	adds	r3, #1
 800a87c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a880:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a882:	881b      	ldrh	r3, [r3, #0]
 800a884:	b29a      	uxth	r2, r3
 800a886:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	029b      	lsls	r3, r3, #10
 800a88e:	b29b      	uxth	r3, r3
 800a890:	4313      	orrs	r3, r2
 800a892:	b29a      	uxth	r2, r3
 800a894:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a896:	801a      	strh	r2, [r3, #0]
 800a898:	e042      	b.n	800a920 <USB_EPStartXfer+0x942>
 800a89a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a89e:	095b      	lsrs	r3, r3, #5
 800a8a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a8a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8a8:	f003 031f 	and.w	r3, r3, #31
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d104      	bne.n	800a8ba <USB_EPStartXfer+0x8dc>
 800a8b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a8b4:	3b01      	subs	r3, #1
 800a8b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a8ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a8bc:	881b      	ldrh	r3, [r3, #0]
 800a8be:	b29a      	uxth	r2, r3
 800a8c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	029b      	lsls	r3, r3, #10
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8d6:	b29a      	uxth	r2, r3
 800a8d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a8da:	801a      	strh	r2, [r3, #0]
 800a8dc:	e020      	b.n	800a920 <USB_EPStartXfer+0x942>
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	785b      	ldrb	r3, [r3, #1]
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d11c      	bne.n	800a920 <USB_EPStartXfer+0x942>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a8fa:	4413      	add	r3, r2
 800a8fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	00da      	lsls	r2, r3, #3
 800a906:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a90a:	4413      	add	r3, r2
 800a90c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a910:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a914:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a918:	b29a      	uxth	r2, r3
 800a91a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a91e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	891b      	ldrh	r3, [r3, #8]
 800a924:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	6959      	ldr	r1, [r3, #20]
 800a92c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a930:	b29b      	uxth	r3, r3
 800a932:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 fa35 	bl	800ada6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	4413      	add	r3, r2
 800a946:	881b      	ldrh	r3, [r3, #0]
 800a948:	b29b      	uxth	r3, r3
 800a94a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a94e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a952:	817b      	strh	r3, [r7, #10]
 800a954:	897b      	ldrh	r3, [r7, #10]
 800a956:	f083 0310 	eor.w	r3, r3, #16
 800a95a:	817b      	strh	r3, [r7, #10]
 800a95c:	897b      	ldrh	r3, [r7, #10]
 800a95e:	f083 0320 	eor.w	r3, r3, #32
 800a962:	817b      	strh	r3, [r7, #10]
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	441a      	add	r2, r3
 800a96e:	897b      	ldrh	r3, [r7, #10]
 800a970:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a974:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a978:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a97c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a980:	b29b      	uxth	r3, r3
 800a982:	8013      	strh	r3, [r2, #0]
 800a984:	e0d5      	b.n	800ab32 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	7b1b      	ldrb	r3, [r3, #12]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d156      	bne.n	800aa3c <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	699b      	ldr	r3, [r3, #24]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d122      	bne.n	800a9dc <USB_EPStartXfer+0x9fe>
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	78db      	ldrb	r3, [r3, #3]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d11e      	bne.n	800a9dc <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	009b      	lsls	r3, r3, #2
 800a9a6:	4413      	add	r3, r2
 800a9a8:	881b      	ldrh	r3, [r3, #0]
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9b4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	441a      	add	r2, r3
 800a9c2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a9c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9ce:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a9d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	8013      	strh	r3, [r2, #0]
 800a9da:	e01d      	b.n	800aa18 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	4413      	add	r3, r2
 800a9e6:	881b      	ldrh	r3, [r3, #0]
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a9ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9f2:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	441a      	add	r2, r3
 800aa00:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800aa04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	699a      	ldr	r2, [r3, #24]
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	691b      	ldr	r3, [r3, #16]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d907      	bls.n	800aa34 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	699a      	ldr	r2, [r3, #24]
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	691b      	ldr	r3, [r3, #16]
 800aa2c:	1ad2      	subs	r2, r2, r3
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	619a      	str	r2, [r3, #24]
 800aa32:	e054      	b.n	800aade <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	2200      	movs	r2, #0
 800aa38:	619a      	str	r2, [r3, #24]
 800aa3a:	e050      	b.n	800aade <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	78db      	ldrb	r3, [r3, #3]
 800aa40:	2b02      	cmp	r3, #2
 800aa42:	d142      	bne.n	800aaca <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	69db      	ldr	r3, [r3, #28]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d048      	beq.n	800aade <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800aa4c:	687a      	ldr	r2, [r7, #4]
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	009b      	lsls	r3, r3, #2
 800aa54:	4413      	add	r3, r2
 800aa56:	881b      	ldrh	r3, [r3, #0]
 800aa58:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800aa5c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800aa60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d005      	beq.n	800aa74 <USB_EPStartXfer+0xa96>
 800aa68:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800aa6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d10b      	bne.n	800aa8c <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800aa74:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800aa78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d12e      	bne.n	800aade <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800aa80:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800aa84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d128      	bne.n	800aade <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	4413      	add	r3, r2
 800aa96:	881b      	ldrh	r3, [r3, #0]
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aaa2:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	441a      	add	r2, r3
 800aab0:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800aab4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aab8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aabc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aac0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	8013      	strh	r3, [r2, #0]
 800aac8:	e009      	b.n	800aade <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	78db      	ldrb	r3, [r3, #3]
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d103      	bne.n	800aada <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	2200      	movs	r2, #0
 800aad6:	619a      	str	r2, [r3, #24]
 800aad8:	e001      	b.n	800aade <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800aada:	2301      	movs	r3, #1
 800aadc:	e02a      	b.n	800ab34 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	4413      	add	r3, r2
 800aae8:	881b      	ldrh	r3, [r3, #0]
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aaf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aaf4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800aaf8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800aafc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ab00:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ab04:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ab08:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ab0c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	441a      	add	r2, r3
 800ab1a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ab1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	37b0      	adds	r7, #176	@ 0xb0
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b085      	sub	sp, #20
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	785b      	ldrb	r3, [r3, #1]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d020      	beq.n	800ab90 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	4413      	add	r3, r2
 800ab58:	881b      	ldrh	r3, [r3, #0]
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab64:	81bb      	strh	r3, [r7, #12]
 800ab66:	89bb      	ldrh	r3, [r7, #12]
 800ab68:	f083 0310 	eor.w	r3, r3, #16
 800ab6c:	81bb      	strh	r3, [r7, #12]
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	009b      	lsls	r3, r3, #2
 800ab76:	441a      	add	r2, r3
 800ab78:	89bb      	ldrh	r3, [r7, #12]
 800ab7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	8013      	strh	r3, [r2, #0]
 800ab8e:	e01f      	b.n	800abd0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	4413      	add	r3, r2
 800ab9a:	881b      	ldrh	r3, [r3, #0]
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aba6:	81fb      	strh	r3, [r7, #14]
 800aba8:	89fb      	ldrh	r3, [r7, #14]
 800abaa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800abae:	81fb      	strh	r3, [r7, #14]
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	441a      	add	r2, r3
 800abba:	89fb      	ldrh	r3, [r7, #14]
 800abbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abcc:	b29b      	uxth	r3, r3
 800abce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800abd0:	2300      	movs	r3, #0
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3714      	adds	r7, #20
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr

0800abde <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800abde:	b480      	push	{r7}
 800abe0:	b087      	sub	sp, #28
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
 800abe6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	785b      	ldrb	r3, [r3, #1]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d04c      	beq.n	800ac8a <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	4413      	add	r3, r2
 800abfa:	881b      	ldrh	r3, [r3, #0]
 800abfc:	823b      	strh	r3, [r7, #16]
 800abfe:	8a3b      	ldrh	r3, [r7, #16]
 800ac00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d01b      	beq.n	800ac40 <USB_EPClearStall+0x62>
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	4413      	add	r3, r2
 800ac12:	881b      	ldrh	r3, [r3, #0]
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac1e:	81fb      	strh	r3, [r7, #14]
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	441a      	add	r2, r3
 800ac2a:	89fb      	ldrh	r3, [r7, #14]
 800ac2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac38:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	78db      	ldrb	r3, [r3, #3]
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d06c      	beq.n	800ad22 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	4413      	add	r3, r2
 800ac52:	881b      	ldrh	r3, [r3, #0]
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac5e:	81bb      	strh	r3, [r7, #12]
 800ac60:	89bb      	ldrh	r3, [r7, #12]
 800ac62:	f083 0320 	eor.w	r3, r3, #32
 800ac66:	81bb      	strh	r3, [r7, #12]
 800ac68:	687a      	ldr	r2, [r7, #4]
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	441a      	add	r2, r3
 800ac72:	89bb      	ldrh	r3, [r7, #12]
 800ac74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	8013      	strh	r3, [r2, #0]
 800ac88:	e04b      	b.n	800ad22 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	4413      	add	r3, r2
 800ac94:	881b      	ldrh	r3, [r3, #0]
 800ac96:	82fb      	strh	r3, [r7, #22]
 800ac98:	8afb      	ldrh	r3, [r7, #22]
 800ac9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d01b      	beq.n	800acda <USB_EPClearStall+0xfc>
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	4413      	add	r3, r2
 800acac:	881b      	ldrh	r3, [r3, #0]
 800acae:	b29b      	uxth	r3, r3
 800acb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acb8:	82bb      	strh	r3, [r7, #20]
 800acba:	687a      	ldr	r2, [r7, #4]
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	441a      	add	r2, r3
 800acc4:	8abb      	ldrh	r3, [r7, #20]
 800acc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800acca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800acce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800acd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	4413      	add	r3, r2
 800ace4:	881b      	ldrh	r3, [r3, #0]
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800acec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acf0:	827b      	strh	r3, [r7, #18]
 800acf2:	8a7b      	ldrh	r3, [r7, #18]
 800acf4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800acf8:	827b      	strh	r3, [r7, #18]
 800acfa:	8a7b      	ldrh	r3, [r7, #18]
 800acfc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ad00:	827b      	strh	r3, [r7, #18]
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	441a      	add	r2, r3
 800ad0c:	8a7b      	ldrh	r3, [r7, #18]
 800ad0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ad22:	2300      	movs	r3, #0
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	371c      	adds	r7, #28
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr

0800ad30 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	460b      	mov	r3, r1
 800ad3a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ad3c:	78fb      	ldrb	r3, [r7, #3]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d103      	bne.n	800ad4a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2280      	movs	r2, #128	@ 0x80
 800ad46:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800ad4a:	2300      	movs	r3, #0
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	370c      	adds	r7, #12
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b083      	sub	sp, #12
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad70:	b29a      	uxth	r2, r3
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800ad78:	2300      	movs	r3, #0
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	370c      	adds	r7, #12
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr

0800ad86 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ad86:	b480      	push	{r7}
 800ad88:	b085      	sub	sp, #20
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ad98:	68fb      	ldr	r3, [r7, #12]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3714      	adds	r7, #20
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr

0800ada6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ada6:	b480      	push	{r7}
 800ada8:	b08b      	sub	sp, #44	@ 0x2c
 800adaa:	af00      	add	r7, sp, #0
 800adac:	60f8      	str	r0, [r7, #12]
 800adae:	60b9      	str	r1, [r7, #8]
 800adb0:	4611      	mov	r1, r2
 800adb2:	461a      	mov	r2, r3
 800adb4:	460b      	mov	r3, r1
 800adb6:	80fb      	strh	r3, [r7, #6]
 800adb8:	4613      	mov	r3, r2
 800adba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800adbc:	88bb      	ldrh	r3, [r7, #4]
 800adbe:	3301      	adds	r3, #1
 800adc0:	085b      	lsrs	r3, r3, #1
 800adc2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800adcc:	88fa      	ldrh	r2, [r7, #6]
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	4413      	add	r3, r2
 800add2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800add6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800add8:	69bb      	ldr	r3, [r7, #24]
 800adda:	627b      	str	r3, [r7, #36]	@ 0x24
 800addc:	e01c      	b.n	800ae18 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800adde:	69fb      	ldr	r3, [r7, #28]
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	3301      	adds	r3, #1
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	b21b      	sxth	r3, r3
 800adec:	021b      	lsls	r3, r3, #8
 800adee:	b21a      	sxth	r2, r3
 800adf0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800adf4:	4313      	orrs	r3, r2
 800adf6:	b21b      	sxth	r3, r3
 800adf8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800adfa:	6a3b      	ldr	r3, [r7, #32]
 800adfc:	8a7a      	ldrh	r2, [r7, #18]
 800adfe:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ae00:	6a3b      	ldr	r3, [r7, #32]
 800ae02:	3302      	adds	r3, #2
 800ae04:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ae12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae14:	3b01      	subs	r3, #1
 800ae16:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d1df      	bne.n	800adde <USB_WritePMA+0x38>
  }
}
 800ae1e:	bf00      	nop
 800ae20:	bf00      	nop
 800ae22:	372c      	adds	r7, #44	@ 0x2c
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b08b      	sub	sp, #44	@ 0x2c
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	4611      	mov	r1, r2
 800ae38:	461a      	mov	r2, r3
 800ae3a:	460b      	mov	r3, r1
 800ae3c:	80fb      	strh	r3, [r7, #6]
 800ae3e:	4613      	mov	r3, r2
 800ae40:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ae42:	88bb      	ldrh	r3, [r7, #4]
 800ae44:	085b      	lsrs	r3, r3, #1
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ae52:	88fa      	ldrh	r2, [r7, #6]
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	4413      	add	r3, r2
 800ae58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ae5c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ae5e:	69bb      	ldr	r3, [r7, #24]
 800ae60:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae62:	e018      	b.n	800ae96 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ae64:	6a3b      	ldr	r3, [r7, #32]
 800ae66:	881b      	ldrh	r3, [r3, #0]
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ae6c:	6a3b      	ldr	r3, [r7, #32]
 800ae6e:	3302      	adds	r3, #2
 800ae70:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	b2da      	uxtb	r2, r3
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ae7a:	69fb      	ldr	r3, [r7, #28]
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	0a1b      	lsrs	r3, r3, #8
 800ae84:	b2da      	uxtb	r2, r3
 800ae86:	69fb      	ldr	r3, [r7, #28]
 800ae88:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ae8a:	69fb      	ldr	r3, [r7, #28]
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ae90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae92:	3b01      	subs	r3, #1
 800ae94:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d1e3      	bne.n	800ae64 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ae9c:	88bb      	ldrh	r3, [r7, #4]
 800ae9e:	f003 0301 	and.w	r3, r3, #1
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d007      	beq.n	800aeb8 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800aea8:	6a3b      	ldr	r3, [r7, #32]
 800aeaa:	881b      	ldrh	r3, [r3, #0]
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	b2da      	uxtb	r2, r3
 800aeb4:	69fb      	ldr	r3, [r7, #28]
 800aeb6:	701a      	strb	r2, [r3, #0]
  }
}
 800aeb8:	bf00      	nop
 800aeba:	372c      	adds	r7, #44	@ 0x2c
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	460b      	mov	r3, r1
 800aece:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aed0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800aed4:	f002 f8ba 	bl	800d04c <USBD_static_malloc>
 800aed8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d105      	bne.n	800aeec <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800aee8:	2302      	movs	r3, #2
 800aeea:	e066      	b.n	800afba <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	68fa      	ldr	r2, [r7, #12]
 800aef0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	7c1b      	ldrb	r3, [r3, #16]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d119      	bne.n	800af30 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aefc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af00:	2202      	movs	r2, #2
 800af02:	2181      	movs	r1, #129	@ 0x81
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f001 ff48 	bl	800cd9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2201      	movs	r2, #1
 800af0e:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800af10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af14:	2202      	movs	r2, #2
 800af16:	2101      	movs	r1, #1
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f001 ff3e 	bl	800cd9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2201      	movs	r2, #1
 800af22:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2210      	movs	r2, #16
 800af2a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800af2e:	e016      	b.n	800af5e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800af30:	2340      	movs	r3, #64	@ 0x40
 800af32:	2202      	movs	r2, #2
 800af34:	2181      	movs	r1, #129	@ 0x81
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f001 ff2f 	bl	800cd9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2201      	movs	r2, #1
 800af40:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800af42:	2340      	movs	r3, #64	@ 0x40
 800af44:	2202      	movs	r2, #2
 800af46:	2101      	movs	r1, #1
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f001 ff26 	bl	800cd9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2201      	movs	r2, #1
 800af52:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2210      	movs	r2, #16
 800af5a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800af5e:	2308      	movs	r3, #8
 800af60:	2203      	movs	r2, #3
 800af62:	2182      	movs	r1, #130	@ 0x82
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f001 ff18 	bl	800cd9a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2201      	movs	r2, #1
 800af6e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2200      	movs	r2, #0
 800af80:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2200      	movs	r2, #0
 800af88:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	7c1b      	ldrb	r3, [r3, #16]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d109      	bne.n	800afa8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af9e:	2101      	movs	r1, #1
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f001 ffe9 	bl	800cf78 <USBD_LL_PrepareReceive>
 800afa6:	e007      	b.n	800afb8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800afae:	2340      	movs	r3, #64	@ 0x40
 800afb0:	2101      	movs	r1, #1
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f001 ffe0 	bl	800cf78 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800afb8:	2300      	movs	r3, #0
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3710      	adds	r7, #16
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}

0800afc2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800afc2:	b580      	push	{r7, lr}
 800afc4:	b082      	sub	sp, #8
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
 800afca:	460b      	mov	r3, r1
 800afcc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800afce:	2181      	movs	r1, #129	@ 0x81
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f001 ff08 	bl	800cde6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2200      	movs	r2, #0
 800afda:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800afdc:	2101      	movs	r1, #1
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f001 ff01 	bl	800cde6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2200      	movs	r2, #0
 800afe8:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800afec:	2182      	movs	r1, #130	@ 0x82
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f001 fef9 	bl	800cde6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2200      	movs	r2, #0
 800b000:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d00e      	beq.n	800b02c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b01e:	4618      	mov	r0, r3
 800b020:	f002 f822 	bl	800d068 <USBD_static_free>
    pdev->pClassData = NULL;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2200      	movs	r2, #0
 800b028:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3708      	adds	r7, #8
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
	...

0800b038 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b086      	sub	sp, #24
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b048:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b04a:	2300      	movs	r3, #0
 800b04c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b04e:	2300      	movs	r3, #0
 800b050:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b052:	2300      	movs	r3, #0
 800b054:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d101      	bne.n	800b060 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b05c:	2303      	movs	r3, #3
 800b05e:	e0af      	b.n	800b1c0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	781b      	ldrb	r3, [r3, #0]
 800b064:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d03f      	beq.n	800b0ec <USBD_CDC_Setup+0xb4>
 800b06c:	2b20      	cmp	r3, #32
 800b06e:	f040 809f 	bne.w	800b1b0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	88db      	ldrh	r3, [r3, #6]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d02e      	beq.n	800b0d8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	b25b      	sxtb	r3, r3
 800b080:	2b00      	cmp	r3, #0
 800b082:	da16      	bge.n	800b0b2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	683a      	ldr	r2, [r7, #0]
 800b08e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b090:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b092:	683a      	ldr	r2, [r7, #0]
 800b094:	88d2      	ldrh	r2, [r2, #6]
 800b096:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	88db      	ldrh	r3, [r3, #6]
 800b09c:	2b07      	cmp	r3, #7
 800b09e:	bf28      	it	cs
 800b0a0:	2307      	movcs	r3, #7
 800b0a2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	89fa      	ldrh	r2, [r7, #14]
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f001 fa9f 	bl	800c5ee <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b0b0:	e085      	b.n	800b1be <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	785a      	ldrb	r2, [r3, #1]
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	88db      	ldrh	r3, [r3, #6]
 800b0c0:	b2da      	uxtb	r2, r3
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b0c8:	6939      	ldr	r1, [r7, #16]
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	88db      	ldrh	r3, [r3, #6]
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f001 fab8 	bl	800c646 <USBD_CtlPrepareRx>
      break;
 800b0d6:	e072      	b.n	800b1be <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b0de:	689b      	ldr	r3, [r3, #8]
 800b0e0:	683a      	ldr	r2, [r7, #0]
 800b0e2:	7850      	ldrb	r0, [r2, #1]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	6839      	ldr	r1, [r7, #0]
 800b0e8:	4798      	blx	r3
      break;
 800b0ea:	e068      	b.n	800b1be <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	785b      	ldrb	r3, [r3, #1]
 800b0f0:	2b0b      	cmp	r3, #11
 800b0f2:	d852      	bhi.n	800b19a <USBD_CDC_Setup+0x162>
 800b0f4:	a201      	add	r2, pc, #4	@ (adr r2, 800b0fc <USBD_CDC_Setup+0xc4>)
 800b0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0fa:	bf00      	nop
 800b0fc:	0800b12d 	.word	0x0800b12d
 800b100:	0800b1a9 	.word	0x0800b1a9
 800b104:	0800b19b 	.word	0x0800b19b
 800b108:	0800b19b 	.word	0x0800b19b
 800b10c:	0800b19b 	.word	0x0800b19b
 800b110:	0800b19b 	.word	0x0800b19b
 800b114:	0800b19b 	.word	0x0800b19b
 800b118:	0800b19b 	.word	0x0800b19b
 800b11c:	0800b19b 	.word	0x0800b19b
 800b120:	0800b19b 	.word	0x0800b19b
 800b124:	0800b157 	.word	0x0800b157
 800b128:	0800b181 	.word	0x0800b181
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b132:	b2db      	uxtb	r3, r3
 800b134:	2b03      	cmp	r3, #3
 800b136:	d107      	bne.n	800b148 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b138:	f107 030a 	add.w	r3, r7, #10
 800b13c:	2202      	movs	r2, #2
 800b13e:	4619      	mov	r1, r3
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f001 fa54 	bl	800c5ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b146:	e032      	b.n	800b1ae <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b148:	6839      	ldr	r1, [r7, #0]
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f001 f9de 	bl	800c50c <USBD_CtlError>
            ret = USBD_FAIL;
 800b150:	2303      	movs	r3, #3
 800b152:	75fb      	strb	r3, [r7, #23]
          break;
 800b154:	e02b      	b.n	800b1ae <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b15c:	b2db      	uxtb	r3, r3
 800b15e:	2b03      	cmp	r3, #3
 800b160:	d107      	bne.n	800b172 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b162:	f107 030d 	add.w	r3, r7, #13
 800b166:	2201      	movs	r2, #1
 800b168:	4619      	mov	r1, r3
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f001 fa3f 	bl	800c5ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b170:	e01d      	b.n	800b1ae <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b172:	6839      	ldr	r1, [r7, #0]
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f001 f9c9 	bl	800c50c <USBD_CtlError>
            ret = USBD_FAIL;
 800b17a:	2303      	movs	r3, #3
 800b17c:	75fb      	strb	r3, [r7, #23]
          break;
 800b17e:	e016      	b.n	800b1ae <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b186:	b2db      	uxtb	r3, r3
 800b188:	2b03      	cmp	r3, #3
 800b18a:	d00f      	beq.n	800b1ac <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b18c:	6839      	ldr	r1, [r7, #0]
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f001 f9bc 	bl	800c50c <USBD_CtlError>
            ret = USBD_FAIL;
 800b194:	2303      	movs	r3, #3
 800b196:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b198:	e008      	b.n	800b1ac <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b19a:	6839      	ldr	r1, [r7, #0]
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f001 f9b5 	bl	800c50c <USBD_CtlError>
          ret = USBD_FAIL;
 800b1a2:	2303      	movs	r3, #3
 800b1a4:	75fb      	strb	r3, [r7, #23]
          break;
 800b1a6:	e002      	b.n	800b1ae <USBD_CDC_Setup+0x176>
          break;
 800b1a8:	bf00      	nop
 800b1aa:	e008      	b.n	800b1be <USBD_CDC_Setup+0x186>
          break;
 800b1ac:	bf00      	nop
      }
      break;
 800b1ae:	e006      	b.n	800b1be <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b1b0:	6839      	ldr	r1, [r7, #0]
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f001 f9aa 	bl	800c50c <USBD_CtlError>
      ret = USBD_FAIL;
 800b1b8:	2303      	movs	r3, #3
 800b1ba:	75fb      	strb	r3, [r7, #23]
      break;
 800b1bc:	bf00      	nop
  }

  return (uint8_t)ret;
 800b1be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3718      	adds	r7, #24
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b1da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d101      	bne.n	800b1ea <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b1e6:	2303      	movs	r3, #3
 800b1e8:	e04f      	b.n	800b28a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b1f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b1f2:	78fa      	ldrb	r2, [r7, #3]
 800b1f4:	6879      	ldr	r1, [r7, #4]
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	4413      	add	r3, r2
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	440b      	add	r3, r1
 800b200:	3318      	adds	r3, #24
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d029      	beq.n	800b25c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b208:	78fa      	ldrb	r2, [r7, #3]
 800b20a:	6879      	ldr	r1, [r7, #4]
 800b20c:	4613      	mov	r3, r2
 800b20e:	009b      	lsls	r3, r3, #2
 800b210:	4413      	add	r3, r2
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	440b      	add	r3, r1
 800b216:	3318      	adds	r3, #24
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	78f9      	ldrb	r1, [r7, #3]
 800b21c:	68f8      	ldr	r0, [r7, #12]
 800b21e:	460b      	mov	r3, r1
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	440b      	add	r3, r1
 800b224:	00db      	lsls	r3, r3, #3
 800b226:	4403      	add	r3, r0
 800b228:	3320      	adds	r3, #32
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	fbb2 f1f3 	udiv	r1, r2, r3
 800b230:	fb01 f303 	mul.w	r3, r1, r3
 800b234:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b236:	2b00      	cmp	r3, #0
 800b238:	d110      	bne.n	800b25c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b23a:	78fa      	ldrb	r2, [r7, #3]
 800b23c:	6879      	ldr	r1, [r7, #4]
 800b23e:	4613      	mov	r3, r2
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	4413      	add	r3, r2
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	440b      	add	r3, r1
 800b248:	3318      	adds	r3, #24
 800b24a:	2200      	movs	r2, #0
 800b24c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b24e:	78f9      	ldrb	r1, [r7, #3]
 800b250:	2300      	movs	r3, #0
 800b252:	2200      	movs	r2, #0
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f001 fe6e 	bl	800cf36 <USBD_LL_Transmit>
 800b25a:	e015      	b.n	800b288 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	2200      	movs	r2, #0
 800b260:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b26a:	691b      	ldr	r3, [r3, #16]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d00b      	beq.n	800b288 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b276:	691b      	ldr	r3, [r3, #16]
 800b278:	68ba      	ldr	r2, [r7, #8]
 800b27a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b27e:	68ba      	ldr	r2, [r7, #8]
 800b280:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b284:	78fa      	ldrb	r2, [r7, #3]
 800b286:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b288:	2300      	movs	r3, #0
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3710      	adds	r7, #16
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}

0800b292 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b292:	b580      	push	{r7, lr}
 800b294:	b084      	sub	sp, #16
 800b296:	af00      	add	r7, sp, #0
 800b298:	6078      	str	r0, [r7, #4]
 800b29a:	460b      	mov	r3, r1
 800b29c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b2a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d101      	bne.n	800b2b4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b2b0:	2303      	movs	r3, #3
 800b2b2:	e015      	b.n	800b2e0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b2b4:	78fb      	ldrb	r3, [r7, #3]
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f001 fe7e 	bl	800cfba <USBD_LL_GetRxDataSize>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b2d4:	68fa      	ldr	r2, [r7, #12]
 800b2d6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b2da:	4611      	mov	r1, r2
 800b2dc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b2de:	2300      	movs	r3, #0
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3710      	adds	r7, #16
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b084      	sub	sp, #16
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b2f6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d101      	bne.n	800b302 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b2fe:	2303      	movs	r3, #3
 800b300:	e01a      	b.n	800b338 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d014      	beq.n	800b336 <USBD_CDC_EP0_RxReady+0x4e>
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b312:	2bff      	cmp	r3, #255	@ 0xff
 800b314:	d00f      	beq.n	800b336 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b31c:	689b      	ldr	r3, [r3, #8]
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800b324:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b326:	68fa      	ldr	r2, [r7, #12]
 800b328:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b32c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	22ff      	movs	r2, #255	@ 0xff
 800b332:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b336:	2300      	movs	r3, #0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3710      	adds	r7, #16
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2243      	movs	r2, #67	@ 0x43
 800b34c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b34e:	4b03      	ldr	r3, [pc, #12]	@ (800b35c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b350:	4618      	mov	r0, r3
 800b352:	370c      	adds	r7, #12
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr
 800b35c:	20000094 	.word	0x20000094

0800b360 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2243      	movs	r2, #67	@ 0x43
 800b36c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b36e:	4b03      	ldr	r3, [pc, #12]	@ (800b37c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b370:	4618      	mov	r0, r3
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr
 800b37c:	20000050 	.word	0x20000050

0800b380 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b380:	b480      	push	{r7}
 800b382:	b083      	sub	sp, #12
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2243      	movs	r2, #67	@ 0x43
 800b38c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b38e:	4b03      	ldr	r3, [pc, #12]	@ (800b39c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b390:	4618      	mov	r0, r3
 800b392:	370c      	adds	r7, #12
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr
 800b39c:	200000d8 	.word	0x200000d8

0800b3a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	220a      	movs	r2, #10
 800b3ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b3ae:	4b03      	ldr	r3, [pc, #12]	@ (800b3bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr
 800b3bc:	2000000c 	.word	0x2000000c

0800b3c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d101      	bne.n	800b3d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b3d0:	2303      	movs	r3, #3
 800b3d2:	e004      	b.n	800b3de <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	370c      	adds	r7, #12
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr

0800b3ea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b3ea:	b480      	push	{r7}
 800b3ec:	b087      	sub	sp, #28
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	60f8      	str	r0, [r7, #12]
 800b3f2:	60b9      	str	r1, [r7, #8]
 800b3f4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b3fc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d101      	bne.n	800b408 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b404:	2303      	movs	r3, #3
 800b406:	e008      	b.n	800b41a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	68ba      	ldr	r2, [r7, #8]
 800b40c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b418:	2300      	movs	r3, #0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	371c      	adds	r7, #28
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr

0800b426 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b426:	b480      	push	{r7}
 800b428:	b085      	sub	sp, #20
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
 800b42e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b436:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d101      	bne.n	800b442 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b43e:	2303      	movs	r3, #3
 800b440:	e004      	b.n	800b44c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	683a      	ldr	r2, [r7, #0]
 800b446:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b44a:	2300      	movs	r3, #0
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3714      	adds	r7, #20
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b466:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d101      	bne.n	800b476 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b472:	2303      	movs	r3, #3
 800b474:	e016      	b.n	800b4a4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	7c1b      	ldrb	r3, [r3, #16]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d109      	bne.n	800b492 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b484:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b488:	2101      	movs	r1, #1
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f001 fd74 	bl	800cf78 <USBD_LL_PrepareReceive>
 800b490:	e007      	b.n	800b4a2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b498:	2340      	movs	r3, #64	@ 0x40
 800b49a:	2101      	movs	r1, #1
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f001 fd6b 	bl	800cf78 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b4a2:	2300      	movs	r3, #0
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3710      	adds	r7, #16
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b086      	sub	sp, #24
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	60b9      	str	r1, [r7, #8]
 800b4b6:	4613      	mov	r3, r2
 800b4b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d101      	bne.n	800b4c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b4c0:	2303      	movs	r3, #3
 800b4c2:	e01f      	b.n	800b504 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d003      	beq.n	800b4ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	68ba      	ldr	r2, [r7, #8]
 800b4e6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	79fa      	ldrb	r2, [r7, #7]
 800b4f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	f001 fbd3 	bl	800cca4 <USBD_LL_Init>
 800b4fe:	4603      	mov	r3, r0
 800b500:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b502:	7dfb      	ldrb	r3, [r7, #23]
}
 800b504:	4618      	mov	r0, r3
 800b506:	3718      	adds	r7, #24
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b516:	2300      	movs	r3, #0
 800b518:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d101      	bne.n	800b524 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b520:	2303      	movs	r3, #3
 800b522:	e016      	b.n	800b552 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	683a      	ldr	r2, [r7, #0]
 800b528:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00b      	beq.n	800b550 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b53e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b540:	f107 020e 	add.w	r2, r7, #14
 800b544:	4610      	mov	r0, r2
 800b546:	4798      	blx	r3
 800b548:	4602      	mov	r2, r0
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b550:	2300      	movs	r3, #0
}
 800b552:	4618      	mov	r0, r3
 800b554:	3710      	adds	r7, #16
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}

0800b55a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b55a:	b580      	push	{r7, lr}
 800b55c:	b082      	sub	sp, #8
 800b55e:	af00      	add	r7, sp, #0
 800b560:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f001 fbfe 	bl	800cd64 <USBD_LL_Start>
 800b568:	4603      	mov	r3, r0
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3708      	adds	r7, #8
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}

0800b572 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b572:	b480      	push	{r7}
 800b574:	b083      	sub	sp, #12
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b57a:	2300      	movs	r3, #0
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	460b      	mov	r3, r1
 800b592:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b594:	2303      	movs	r3, #3
 800b596:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d009      	beq.n	800b5b6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	78fa      	ldrb	r2, [r7, #3]
 800b5ac:	4611      	mov	r1, r2
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	4798      	blx	r3
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b5b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3710      	adds	r7, #16
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b082      	sub	sp, #8
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d007      	beq.n	800b5e6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	78fa      	ldrb	r2, [r7, #3]
 800b5e0:	4611      	mov	r1, r2
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	4798      	blx	r3
  }

  return USBD_OK;
 800b5e6:	2300      	movs	r3, #0
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3708      	adds	r7, #8
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b600:	6839      	ldr	r1, [r7, #0]
 800b602:	4618      	mov	r0, r3
 800b604:	f000 ff48 	bl	800c498 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2201      	movs	r2, #1
 800b60c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b616:	461a      	mov	r2, r3
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b624:	f003 031f 	and.w	r3, r3, #31
 800b628:	2b02      	cmp	r3, #2
 800b62a:	d01a      	beq.n	800b662 <USBD_LL_SetupStage+0x72>
 800b62c:	2b02      	cmp	r3, #2
 800b62e:	d822      	bhi.n	800b676 <USBD_LL_SetupStage+0x86>
 800b630:	2b00      	cmp	r3, #0
 800b632:	d002      	beq.n	800b63a <USBD_LL_SetupStage+0x4a>
 800b634:	2b01      	cmp	r3, #1
 800b636:	d00a      	beq.n	800b64e <USBD_LL_SetupStage+0x5e>
 800b638:	e01d      	b.n	800b676 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b640:	4619      	mov	r1, r3
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 f9f0 	bl	800ba28 <USBD_StdDevReq>
 800b648:	4603      	mov	r3, r0
 800b64a:	73fb      	strb	r3, [r7, #15]
      break;
 800b64c:	e020      	b.n	800b690 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b654:	4619      	mov	r1, r3
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f000 fa54 	bl	800bb04 <USBD_StdItfReq>
 800b65c:	4603      	mov	r3, r0
 800b65e:	73fb      	strb	r3, [r7, #15]
      break;
 800b660:	e016      	b.n	800b690 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b668:	4619      	mov	r1, r3
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 fa93 	bl	800bb96 <USBD_StdEPReq>
 800b670:	4603      	mov	r3, r0
 800b672:	73fb      	strb	r3, [r7, #15]
      break;
 800b674:	e00c      	b.n	800b690 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b67c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b680:	b2db      	uxtb	r3, r3
 800b682:	4619      	mov	r1, r3
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f001 fbcd 	bl	800ce24 <USBD_LL_StallEP>
 800b68a:	4603      	mov	r3, r0
 800b68c:	73fb      	strb	r3, [r7, #15]
      break;
 800b68e:	bf00      	nop
  }

  return ret;
 800b690:	7bfb      	ldrb	r3, [r7, #15]
}
 800b692:	4618      	mov	r0, r3
 800b694:	3710      	adds	r7, #16
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}

0800b69a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b69a:	b580      	push	{r7, lr}
 800b69c:	b086      	sub	sp, #24
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	60f8      	str	r0, [r7, #12]
 800b6a2:	460b      	mov	r3, r1
 800b6a4:	607a      	str	r2, [r7, #4]
 800b6a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b6a8:	7afb      	ldrb	r3, [r7, #11]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d138      	bne.n	800b720 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b6b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b6bc:	2b03      	cmp	r3, #3
 800b6be:	d14a      	bne.n	800b756 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	689a      	ldr	r2, [r3, #8]
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d913      	bls.n	800b6f4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	689a      	ldr	r2, [r3, #8]
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	68db      	ldr	r3, [r3, #12]
 800b6d4:	1ad2      	subs	r2, r2, r3
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	68da      	ldr	r2, [r3, #12]
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	689b      	ldr	r3, [r3, #8]
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	bf28      	it	cs
 800b6e6:	4613      	movcs	r3, r2
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	6879      	ldr	r1, [r7, #4]
 800b6ec:	68f8      	ldr	r0, [r7, #12]
 800b6ee:	f000 ffc7 	bl	800c680 <USBD_CtlContinueRx>
 800b6f2:	e030      	b.n	800b756 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	2b03      	cmp	r3, #3
 800b6fe:	d10b      	bne.n	800b718 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b706:	691b      	ldr	r3, [r3, #16]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d005      	beq.n	800b718 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b712:	691b      	ldr	r3, [r3, #16]
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b718:	68f8      	ldr	r0, [r7, #12]
 800b71a:	f000 ffc2 	bl	800c6a2 <USBD_CtlSendStatus>
 800b71e:	e01a      	b.n	800b756 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b726:	b2db      	uxtb	r3, r3
 800b728:	2b03      	cmp	r3, #3
 800b72a:	d114      	bne.n	800b756 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b732:	699b      	ldr	r3, [r3, #24]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d00e      	beq.n	800b756 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b73e:	699b      	ldr	r3, [r3, #24]
 800b740:	7afa      	ldrb	r2, [r7, #11]
 800b742:	4611      	mov	r1, r2
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	4798      	blx	r3
 800b748:	4603      	mov	r3, r0
 800b74a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b74c:	7dfb      	ldrb	r3, [r7, #23]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d001      	beq.n	800b756 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b752:	7dfb      	ldrb	r3, [r7, #23]
 800b754:	e000      	b.n	800b758 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b756:	2300      	movs	r3, #0
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3718      	adds	r7, #24
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b086      	sub	sp, #24
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	460b      	mov	r3, r1
 800b76a:	607a      	str	r2, [r7, #4]
 800b76c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b76e:	7afb      	ldrb	r3, [r7, #11]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d16b      	bne.n	800b84c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	3314      	adds	r3, #20
 800b778:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b780:	2b02      	cmp	r3, #2
 800b782:	d156      	bne.n	800b832 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	689a      	ldr	r2, [r3, #8]
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	68db      	ldr	r3, [r3, #12]
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d914      	bls.n	800b7ba <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	689a      	ldr	r2, [r3, #8]
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	1ad2      	subs	r2, r2, r3
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	689b      	ldr	r3, [r3, #8]
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	6879      	ldr	r1, [r7, #4]
 800b7a6:	68f8      	ldr	r0, [r7, #12]
 800b7a8:	f000 ff3c 	bl	800c624 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f001 fbe0 	bl	800cf78 <USBD_LL_PrepareReceive>
 800b7b8:	e03b      	b.n	800b832 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	68da      	ldr	r2, [r3, #12]
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	689b      	ldr	r3, [r3, #8]
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d11c      	bne.n	800b800 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	685a      	ldr	r2, [r3, #4]
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d316      	bcc.n	800b800 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	685a      	ldr	r2, [r3, #4]
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d20f      	bcs.n	800b800 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	2100      	movs	r1, #0
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	f000 ff1d 	bl	800c624 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	2100      	movs	r1, #0
 800b7f8:	68f8      	ldr	r0, [r7, #12]
 800b7fa:	f001 fbbd 	bl	800cf78 <USBD_LL_PrepareReceive>
 800b7fe:	e018      	b.n	800b832 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b806:	b2db      	uxtb	r3, r3
 800b808:	2b03      	cmp	r3, #3
 800b80a:	d10b      	bne.n	800b824 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d005      	beq.n	800b824 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b81e:	68db      	ldr	r3, [r3, #12]
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b824:	2180      	movs	r1, #128	@ 0x80
 800b826:	68f8      	ldr	r0, [r7, #12]
 800b828:	f001 fafc 	bl	800ce24 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b82c:	68f8      	ldr	r0, [r7, #12]
 800b82e:	f000 ff4b 	bl	800c6c8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d122      	bne.n	800b882 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b83c:	68f8      	ldr	r0, [r7, #12]
 800b83e:	f7ff fe98 	bl	800b572 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2200      	movs	r2, #0
 800b846:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b84a:	e01a      	b.n	800b882 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b852:	b2db      	uxtb	r3, r3
 800b854:	2b03      	cmp	r3, #3
 800b856:	d114      	bne.n	800b882 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b85e:	695b      	ldr	r3, [r3, #20]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d00e      	beq.n	800b882 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b86a:	695b      	ldr	r3, [r3, #20]
 800b86c:	7afa      	ldrb	r2, [r7, #11]
 800b86e:	4611      	mov	r1, r2
 800b870:	68f8      	ldr	r0, [r7, #12]
 800b872:	4798      	blx	r3
 800b874:	4603      	mov	r3, r0
 800b876:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b878:	7dfb      	ldrb	r3, [r7, #23]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d001      	beq.n	800b882 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b87e:	7dfb      	ldrb	r3, [r7, #23]
 800b880:	e000      	b.n	800b884 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b882:	2300      	movs	r3, #0
}
 800b884:	4618      	mov	r0, r3
 800b886:	3718      	adds	r7, #24
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b082      	sub	sp, #8
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2201      	movs	r2, #1
 800b898:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d101      	bne.n	800b8c0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b8bc:	2303      	movs	r3, #3
 800b8be:	e02f      	b.n	800b920 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d00f      	beq.n	800b8ea <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d009      	beq.n	800b8ea <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	6852      	ldr	r2, [r2, #4]
 800b8e2:	b2d2      	uxtb	r2, r2
 800b8e4:	4611      	mov	r1, r2
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b8ea:	2340      	movs	r3, #64	@ 0x40
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	2100      	movs	r1, #0
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f001 fa52 	bl	800cd9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2240      	movs	r2, #64	@ 0x40
 800b902:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b906:	2340      	movs	r3, #64	@ 0x40
 800b908:	2200      	movs	r2, #0
 800b90a:	2180      	movs	r1, #128	@ 0x80
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f001 fa44 	bl	800cd9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2201      	movs	r2, #1
 800b916:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2240      	movs	r2, #64	@ 0x40
 800b91c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b91e:	2300      	movs	r3, #0
}
 800b920:	4618      	mov	r0, r3
 800b922:	3708      	adds	r7, #8
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	460b      	mov	r3, r1
 800b932:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	78fa      	ldrb	r2, [r7, #3]
 800b938:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b93a:	2300      	movs	r3, #0
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	370c      	adds	r7, #12
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr

0800b948 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b956:	b2da      	uxtb	r2, r3
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2204      	movs	r2, #4
 800b962:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b966:	2300      	movs	r3, #0
}
 800b968:	4618      	mov	r0, r3
 800b96a:	370c      	adds	r7, #12
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr

0800b974 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b974:	b480      	push	{r7}
 800b976:	b083      	sub	sp, #12
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b982:	b2db      	uxtb	r3, r3
 800b984:	2b04      	cmp	r3, #4
 800b986:	d106      	bne.n	800b996 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b98e:	b2da      	uxtb	r2, r3
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b996:	2300      	movs	r3, #0
}
 800b998:	4618      	mov	r0, r3
 800b99a:	370c      	adds	r7, #12
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr

0800b9a4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d101      	bne.n	800b9ba <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b9b6:	2303      	movs	r3, #3
 800b9b8:	e012      	b.n	800b9e0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	2b03      	cmp	r3, #3
 800b9c4:	d10b      	bne.n	800b9de <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9cc:	69db      	ldr	r3, [r3, #28]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d005      	beq.n	800b9de <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9d8:	69db      	ldr	r3, [r3, #28]
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b9de:	2300      	movs	r3, #0
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3708      	adds	r7, #8
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b087      	sub	sp, #28
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ba06:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ba0a:	021b      	lsls	r3, r3, #8
 800ba0c:	b21a      	sxth	r2, r3
 800ba0e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ba12:	4313      	orrs	r3, r2
 800ba14:	b21b      	sxth	r3, r3
 800ba16:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ba18:	89fb      	ldrh	r3, [r7, #14]
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	371c      	adds	r7, #28
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr
	...

0800ba28 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba32:	2300      	movs	r3, #0
 800ba34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba3e:	2b40      	cmp	r3, #64	@ 0x40
 800ba40:	d005      	beq.n	800ba4e <USBD_StdDevReq+0x26>
 800ba42:	2b40      	cmp	r3, #64	@ 0x40
 800ba44:	d853      	bhi.n	800baee <USBD_StdDevReq+0xc6>
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d00b      	beq.n	800ba62 <USBD_StdDevReq+0x3a>
 800ba4a:	2b20      	cmp	r3, #32
 800ba4c:	d14f      	bne.n	800baee <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	6839      	ldr	r1, [r7, #0]
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	4798      	blx	r3
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	73fb      	strb	r3, [r7, #15]
      break;
 800ba60:	e04a      	b.n	800baf8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	785b      	ldrb	r3, [r3, #1]
 800ba66:	2b09      	cmp	r3, #9
 800ba68:	d83b      	bhi.n	800bae2 <USBD_StdDevReq+0xba>
 800ba6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ba70 <USBD_StdDevReq+0x48>)
 800ba6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba70:	0800bac5 	.word	0x0800bac5
 800ba74:	0800bad9 	.word	0x0800bad9
 800ba78:	0800bae3 	.word	0x0800bae3
 800ba7c:	0800bacf 	.word	0x0800bacf
 800ba80:	0800bae3 	.word	0x0800bae3
 800ba84:	0800baa3 	.word	0x0800baa3
 800ba88:	0800ba99 	.word	0x0800ba99
 800ba8c:	0800bae3 	.word	0x0800bae3
 800ba90:	0800babb 	.word	0x0800babb
 800ba94:	0800baad 	.word	0x0800baad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ba98:	6839      	ldr	r1, [r7, #0]
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 f9de 	bl	800be5c <USBD_GetDescriptor>
          break;
 800baa0:	e024      	b.n	800baec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800baa2:	6839      	ldr	r1, [r7, #0]
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 fb6d 	bl	800c184 <USBD_SetAddress>
          break;
 800baaa:	e01f      	b.n	800baec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800baac:	6839      	ldr	r1, [r7, #0]
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 fbac 	bl	800c20c <USBD_SetConfig>
 800bab4:	4603      	mov	r3, r0
 800bab6:	73fb      	strb	r3, [r7, #15]
          break;
 800bab8:	e018      	b.n	800baec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800baba:	6839      	ldr	r1, [r7, #0]
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 fc4b 	bl	800c358 <USBD_GetConfig>
          break;
 800bac2:	e013      	b.n	800baec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bac4:	6839      	ldr	r1, [r7, #0]
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f000 fc7c 	bl	800c3c4 <USBD_GetStatus>
          break;
 800bacc:	e00e      	b.n	800baec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bace:	6839      	ldr	r1, [r7, #0]
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 fcab 	bl	800c42c <USBD_SetFeature>
          break;
 800bad6:	e009      	b.n	800baec <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bad8:	6839      	ldr	r1, [r7, #0]
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f000 fcba 	bl	800c454 <USBD_ClrFeature>
          break;
 800bae0:	e004      	b.n	800baec <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800bae2:	6839      	ldr	r1, [r7, #0]
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f000 fd11 	bl	800c50c <USBD_CtlError>
          break;
 800baea:	bf00      	nop
      }
      break;
 800baec:	e004      	b.n	800baf8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800baee:	6839      	ldr	r1, [r7, #0]
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f000 fd0b 	bl	800c50c <USBD_CtlError>
      break;
 800baf6:	bf00      	nop
  }

  return ret;
 800baf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3710      	adds	r7, #16
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop

0800bb04 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bb1a:	2b40      	cmp	r3, #64	@ 0x40
 800bb1c:	d005      	beq.n	800bb2a <USBD_StdItfReq+0x26>
 800bb1e:	2b40      	cmp	r3, #64	@ 0x40
 800bb20:	d82f      	bhi.n	800bb82 <USBD_StdItfReq+0x7e>
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d001      	beq.n	800bb2a <USBD_StdItfReq+0x26>
 800bb26:	2b20      	cmp	r3, #32
 800bb28:	d12b      	bne.n	800bb82 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	3b01      	subs	r3, #1
 800bb34:	2b02      	cmp	r3, #2
 800bb36:	d81d      	bhi.n	800bb74 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	889b      	ldrh	r3, [r3, #4]
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d813      	bhi.n	800bb6a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	6839      	ldr	r1, [r7, #0]
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	4798      	blx	r3
 800bb50:	4603      	mov	r3, r0
 800bb52:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	88db      	ldrh	r3, [r3, #6]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d110      	bne.n	800bb7e <USBD_StdItfReq+0x7a>
 800bb5c:	7bfb      	ldrb	r3, [r7, #15]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d10d      	bne.n	800bb7e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 fd9d 	bl	800c6a2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bb68:	e009      	b.n	800bb7e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800bb6a:	6839      	ldr	r1, [r7, #0]
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 fccd 	bl	800c50c <USBD_CtlError>
          break;
 800bb72:	e004      	b.n	800bb7e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800bb74:	6839      	ldr	r1, [r7, #0]
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f000 fcc8 	bl	800c50c <USBD_CtlError>
          break;
 800bb7c:	e000      	b.n	800bb80 <USBD_StdItfReq+0x7c>
          break;
 800bb7e:	bf00      	nop
      }
      break;
 800bb80:	e004      	b.n	800bb8c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bb82:	6839      	ldr	r1, [r7, #0]
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 fcc1 	bl	800c50c <USBD_CtlError>
      break;
 800bb8a:	bf00      	nop
  }

  return ret;
 800bb8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3710      	adds	r7, #16
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}

0800bb96 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb96:	b580      	push	{r7, lr}
 800bb98:	b084      	sub	sp, #16
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
 800bb9e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bba0:	2300      	movs	r3, #0
 800bba2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	889b      	ldrh	r3, [r3, #4]
 800bba8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bbb2:	2b40      	cmp	r3, #64	@ 0x40
 800bbb4:	d007      	beq.n	800bbc6 <USBD_StdEPReq+0x30>
 800bbb6:	2b40      	cmp	r3, #64	@ 0x40
 800bbb8:	f200 8145 	bhi.w	800be46 <USBD_StdEPReq+0x2b0>
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d00c      	beq.n	800bbda <USBD_StdEPReq+0x44>
 800bbc0:	2b20      	cmp	r3, #32
 800bbc2:	f040 8140 	bne.w	800be46 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbcc:	689b      	ldr	r3, [r3, #8]
 800bbce:	6839      	ldr	r1, [r7, #0]
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	4798      	blx	r3
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	73fb      	strb	r3, [r7, #15]
      break;
 800bbd8:	e13a      	b.n	800be50 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	785b      	ldrb	r3, [r3, #1]
 800bbde:	2b03      	cmp	r3, #3
 800bbe0:	d007      	beq.n	800bbf2 <USBD_StdEPReq+0x5c>
 800bbe2:	2b03      	cmp	r3, #3
 800bbe4:	f300 8129 	bgt.w	800be3a <USBD_StdEPReq+0x2a4>
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d07f      	beq.n	800bcec <USBD_StdEPReq+0x156>
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d03c      	beq.n	800bc6a <USBD_StdEPReq+0xd4>
 800bbf0:	e123      	b.n	800be3a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	2b02      	cmp	r3, #2
 800bbfc:	d002      	beq.n	800bc04 <USBD_StdEPReq+0x6e>
 800bbfe:	2b03      	cmp	r3, #3
 800bc00:	d016      	beq.n	800bc30 <USBD_StdEPReq+0x9a>
 800bc02:	e02c      	b.n	800bc5e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc04:	7bbb      	ldrb	r3, [r7, #14]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d00d      	beq.n	800bc26 <USBD_StdEPReq+0x90>
 800bc0a:	7bbb      	ldrb	r3, [r7, #14]
 800bc0c:	2b80      	cmp	r3, #128	@ 0x80
 800bc0e:	d00a      	beq.n	800bc26 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc10:	7bbb      	ldrb	r3, [r7, #14]
 800bc12:	4619      	mov	r1, r3
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f001 f905 	bl	800ce24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc1a:	2180      	movs	r1, #128	@ 0x80
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f001 f901 	bl	800ce24 <USBD_LL_StallEP>
 800bc22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bc24:	e020      	b.n	800bc68 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bc26:	6839      	ldr	r1, [r7, #0]
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f000 fc6f 	bl	800c50c <USBD_CtlError>
              break;
 800bc2e:	e01b      	b.n	800bc68 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	885b      	ldrh	r3, [r3, #2]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d10e      	bne.n	800bc56 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bc38:	7bbb      	ldrb	r3, [r7, #14]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d00b      	beq.n	800bc56 <USBD_StdEPReq+0xc0>
 800bc3e:	7bbb      	ldrb	r3, [r7, #14]
 800bc40:	2b80      	cmp	r3, #128	@ 0x80
 800bc42:	d008      	beq.n	800bc56 <USBD_StdEPReq+0xc0>
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	88db      	ldrh	r3, [r3, #6]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d104      	bne.n	800bc56 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc4c:	7bbb      	ldrb	r3, [r7, #14]
 800bc4e:	4619      	mov	r1, r3
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f001 f8e7 	bl	800ce24 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 fd23 	bl	800c6a2 <USBD_CtlSendStatus>

              break;
 800bc5c:	e004      	b.n	800bc68 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bc5e:	6839      	ldr	r1, [r7, #0]
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f000 fc53 	bl	800c50c <USBD_CtlError>
              break;
 800bc66:	bf00      	nop
          }
          break;
 800bc68:	e0ec      	b.n	800be44 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc70:	b2db      	uxtb	r3, r3
 800bc72:	2b02      	cmp	r3, #2
 800bc74:	d002      	beq.n	800bc7c <USBD_StdEPReq+0xe6>
 800bc76:	2b03      	cmp	r3, #3
 800bc78:	d016      	beq.n	800bca8 <USBD_StdEPReq+0x112>
 800bc7a:	e030      	b.n	800bcde <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc7c:	7bbb      	ldrb	r3, [r7, #14]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d00d      	beq.n	800bc9e <USBD_StdEPReq+0x108>
 800bc82:	7bbb      	ldrb	r3, [r7, #14]
 800bc84:	2b80      	cmp	r3, #128	@ 0x80
 800bc86:	d00a      	beq.n	800bc9e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc88:	7bbb      	ldrb	r3, [r7, #14]
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f001 f8c9 	bl	800ce24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc92:	2180      	movs	r1, #128	@ 0x80
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f001 f8c5 	bl	800ce24 <USBD_LL_StallEP>
 800bc9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bc9c:	e025      	b.n	800bcea <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800bc9e:	6839      	ldr	r1, [r7, #0]
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f000 fc33 	bl	800c50c <USBD_CtlError>
              break;
 800bca6:	e020      	b.n	800bcea <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	885b      	ldrh	r3, [r3, #2]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d11b      	bne.n	800bce8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bcb0:	7bbb      	ldrb	r3, [r7, #14]
 800bcb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d004      	beq.n	800bcc4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bcba:	7bbb      	ldrb	r3, [r7, #14]
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f001 f8cf 	bl	800ce62 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f000 fcec 	bl	800c6a2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcd0:	689b      	ldr	r3, [r3, #8]
 800bcd2:	6839      	ldr	r1, [r7, #0]
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	4798      	blx	r3
 800bcd8:	4603      	mov	r3, r0
 800bcda:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800bcdc:	e004      	b.n	800bce8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800bcde:	6839      	ldr	r1, [r7, #0]
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f000 fc13 	bl	800c50c <USBD_CtlError>
              break;
 800bce6:	e000      	b.n	800bcea <USBD_StdEPReq+0x154>
              break;
 800bce8:	bf00      	nop
          }
          break;
 800bcea:	e0ab      	b.n	800be44 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	2b02      	cmp	r3, #2
 800bcf6:	d002      	beq.n	800bcfe <USBD_StdEPReq+0x168>
 800bcf8:	2b03      	cmp	r3, #3
 800bcfa:	d032      	beq.n	800bd62 <USBD_StdEPReq+0x1cc>
 800bcfc:	e097      	b.n	800be2e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bcfe:	7bbb      	ldrb	r3, [r7, #14]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d007      	beq.n	800bd14 <USBD_StdEPReq+0x17e>
 800bd04:	7bbb      	ldrb	r3, [r7, #14]
 800bd06:	2b80      	cmp	r3, #128	@ 0x80
 800bd08:	d004      	beq.n	800bd14 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800bd0a:	6839      	ldr	r1, [r7, #0]
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f000 fbfd 	bl	800c50c <USBD_CtlError>
                break;
 800bd12:	e091      	b.n	800be38 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	da0b      	bge.n	800bd34 <USBD_StdEPReq+0x19e>
 800bd1c:	7bbb      	ldrb	r3, [r7, #14]
 800bd1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd22:	4613      	mov	r3, r2
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	4413      	add	r3, r2
 800bd28:	009b      	lsls	r3, r3, #2
 800bd2a:	3310      	adds	r3, #16
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	4413      	add	r3, r2
 800bd30:	3304      	adds	r3, #4
 800bd32:	e00b      	b.n	800bd4c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bd34:	7bbb      	ldrb	r3, [r7, #14]
 800bd36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd3a:	4613      	mov	r3, r2
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	4413      	add	r3, r2
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bd46:	687a      	ldr	r2, [r7, #4]
 800bd48:	4413      	add	r3, r2
 800bd4a:	3304      	adds	r3, #4
 800bd4c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	2200      	movs	r2, #0
 800bd52:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	2202      	movs	r2, #2
 800bd58:	4619      	mov	r1, r3
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 fc47 	bl	800c5ee <USBD_CtlSendData>
              break;
 800bd60:	e06a      	b.n	800be38 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bd62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	da11      	bge.n	800bd8e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bd6a:	7bbb      	ldrb	r3, [r7, #14]
 800bd6c:	f003 020f 	and.w	r2, r3, #15
 800bd70:	6879      	ldr	r1, [r7, #4]
 800bd72:	4613      	mov	r3, r2
 800bd74:	009b      	lsls	r3, r3, #2
 800bd76:	4413      	add	r3, r2
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	440b      	add	r3, r1
 800bd7c:	3324      	adds	r3, #36	@ 0x24
 800bd7e:	881b      	ldrh	r3, [r3, #0]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d117      	bne.n	800bdb4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bd84:	6839      	ldr	r1, [r7, #0]
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 fbc0 	bl	800c50c <USBD_CtlError>
                  break;
 800bd8c:	e054      	b.n	800be38 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bd8e:	7bbb      	ldrb	r3, [r7, #14]
 800bd90:	f003 020f 	and.w	r2, r3, #15
 800bd94:	6879      	ldr	r1, [r7, #4]
 800bd96:	4613      	mov	r3, r2
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	4413      	add	r3, r2
 800bd9c:	009b      	lsls	r3, r3, #2
 800bd9e:	440b      	add	r3, r1
 800bda0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bda4:	881b      	ldrh	r3, [r3, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d104      	bne.n	800bdb4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bdaa:	6839      	ldr	r1, [r7, #0]
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f000 fbad 	bl	800c50c <USBD_CtlError>
                  break;
 800bdb2:	e041      	b.n	800be38 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	da0b      	bge.n	800bdd4 <USBD_StdEPReq+0x23e>
 800bdbc:	7bbb      	ldrb	r3, [r7, #14]
 800bdbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bdc2:	4613      	mov	r3, r2
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	4413      	add	r3, r2
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	3310      	adds	r3, #16
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	4413      	add	r3, r2
 800bdd0:	3304      	adds	r3, #4
 800bdd2:	e00b      	b.n	800bdec <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bdd4:	7bbb      	ldrb	r3, [r7, #14]
 800bdd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdda:	4613      	mov	r3, r2
 800bddc:	009b      	lsls	r3, r3, #2
 800bdde:	4413      	add	r3, r2
 800bde0:	009b      	lsls	r3, r3, #2
 800bde2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	4413      	add	r3, r2
 800bdea:	3304      	adds	r3, #4
 800bdec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bdee:	7bbb      	ldrb	r3, [r7, #14]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d002      	beq.n	800bdfa <USBD_StdEPReq+0x264>
 800bdf4:	7bbb      	ldrb	r3, [r7, #14]
 800bdf6:	2b80      	cmp	r3, #128	@ 0x80
 800bdf8:	d103      	bne.n	800be02 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	601a      	str	r2, [r3, #0]
 800be00:	e00e      	b.n	800be20 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800be02:	7bbb      	ldrb	r3, [r7, #14]
 800be04:	4619      	mov	r1, r3
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f001 f84a 	bl	800cea0 <USBD_LL_IsStallEP>
 800be0c:	4603      	mov	r3, r0
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d003      	beq.n	800be1a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	2201      	movs	r2, #1
 800be16:	601a      	str	r2, [r3, #0]
 800be18:	e002      	b.n	800be20 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	2200      	movs	r2, #0
 800be1e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	2202      	movs	r2, #2
 800be24:	4619      	mov	r1, r3
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 fbe1 	bl	800c5ee <USBD_CtlSendData>
              break;
 800be2c:	e004      	b.n	800be38 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800be2e:	6839      	ldr	r1, [r7, #0]
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 fb6b 	bl	800c50c <USBD_CtlError>
              break;
 800be36:	bf00      	nop
          }
          break;
 800be38:	e004      	b.n	800be44 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800be3a:	6839      	ldr	r1, [r7, #0]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 fb65 	bl	800c50c <USBD_CtlError>
          break;
 800be42:	bf00      	nop
      }
      break;
 800be44:	e004      	b.n	800be50 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800be46:	6839      	ldr	r1, [r7, #0]
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f000 fb5f 	bl	800c50c <USBD_CtlError>
      break;
 800be4e:	bf00      	nop
  }

  return ret;
 800be50:	7bfb      	ldrb	r3, [r7, #15]
}
 800be52:	4618      	mov	r0, r3
 800be54:	3710      	adds	r7, #16
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
	...

0800be5c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800be66:	2300      	movs	r3, #0
 800be68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800be6a:	2300      	movs	r3, #0
 800be6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800be6e:	2300      	movs	r3, #0
 800be70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	885b      	ldrh	r3, [r3, #2]
 800be76:	0a1b      	lsrs	r3, r3, #8
 800be78:	b29b      	uxth	r3, r3
 800be7a:	3b01      	subs	r3, #1
 800be7c:	2b0e      	cmp	r3, #14
 800be7e:	f200 8152 	bhi.w	800c126 <USBD_GetDescriptor+0x2ca>
 800be82:	a201      	add	r2, pc, #4	@ (adr r2, 800be88 <USBD_GetDescriptor+0x2c>)
 800be84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be88:	0800bef9 	.word	0x0800bef9
 800be8c:	0800bf11 	.word	0x0800bf11
 800be90:	0800bf51 	.word	0x0800bf51
 800be94:	0800c127 	.word	0x0800c127
 800be98:	0800c127 	.word	0x0800c127
 800be9c:	0800c0c7 	.word	0x0800c0c7
 800bea0:	0800c0f3 	.word	0x0800c0f3
 800bea4:	0800c127 	.word	0x0800c127
 800bea8:	0800c127 	.word	0x0800c127
 800beac:	0800c127 	.word	0x0800c127
 800beb0:	0800c127 	.word	0x0800c127
 800beb4:	0800c127 	.word	0x0800c127
 800beb8:	0800c127 	.word	0x0800c127
 800bebc:	0800c127 	.word	0x0800c127
 800bec0:	0800bec5 	.word	0x0800bec5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beca:	69db      	ldr	r3, [r3, #28]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d00b      	beq.n	800bee8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bed6:	69db      	ldr	r3, [r3, #28]
 800bed8:	687a      	ldr	r2, [r7, #4]
 800beda:	7c12      	ldrb	r2, [r2, #16]
 800bedc:	f107 0108 	add.w	r1, r7, #8
 800bee0:	4610      	mov	r0, r2
 800bee2:	4798      	blx	r3
 800bee4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bee6:	e126      	b.n	800c136 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bee8:	6839      	ldr	r1, [r7, #0]
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 fb0e 	bl	800c50c <USBD_CtlError>
        err++;
 800bef0:	7afb      	ldrb	r3, [r7, #11]
 800bef2:	3301      	adds	r3, #1
 800bef4:	72fb      	strb	r3, [r7, #11]
      break;
 800bef6:	e11e      	b.n	800c136 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	7c12      	ldrb	r2, [r2, #16]
 800bf04:	f107 0108 	add.w	r1, r7, #8
 800bf08:	4610      	mov	r0, r2
 800bf0a:	4798      	blx	r3
 800bf0c:	60f8      	str	r0, [r7, #12]
      break;
 800bf0e:	e112      	b.n	800c136 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	7c1b      	ldrb	r3, [r3, #16]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d10d      	bne.n	800bf34 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf20:	f107 0208 	add.w	r2, r7, #8
 800bf24:	4610      	mov	r0, r2
 800bf26:	4798      	blx	r3
 800bf28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	2202      	movs	r2, #2
 800bf30:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bf32:	e100      	b.n	800c136 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf3c:	f107 0208 	add.w	r2, r7, #8
 800bf40:	4610      	mov	r0, r2
 800bf42:	4798      	blx	r3
 800bf44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	3301      	adds	r3, #1
 800bf4a:	2202      	movs	r2, #2
 800bf4c:	701a      	strb	r2, [r3, #0]
      break;
 800bf4e:	e0f2      	b.n	800c136 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	885b      	ldrh	r3, [r3, #2]
 800bf54:	b2db      	uxtb	r3, r3
 800bf56:	2b05      	cmp	r3, #5
 800bf58:	f200 80ac 	bhi.w	800c0b4 <USBD_GetDescriptor+0x258>
 800bf5c:	a201      	add	r2, pc, #4	@ (adr r2, 800bf64 <USBD_GetDescriptor+0x108>)
 800bf5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf62:	bf00      	nop
 800bf64:	0800bf7d 	.word	0x0800bf7d
 800bf68:	0800bfb1 	.word	0x0800bfb1
 800bf6c:	0800bfe5 	.word	0x0800bfe5
 800bf70:	0800c019 	.word	0x0800c019
 800bf74:	0800c04d 	.word	0x0800c04d
 800bf78:	0800c081 	.word	0x0800c081
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d00b      	beq.n	800bfa0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	687a      	ldr	r2, [r7, #4]
 800bf92:	7c12      	ldrb	r2, [r2, #16]
 800bf94:	f107 0108 	add.w	r1, r7, #8
 800bf98:	4610      	mov	r0, r2
 800bf9a:	4798      	blx	r3
 800bf9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf9e:	e091      	b.n	800c0c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bfa0:	6839      	ldr	r1, [r7, #0]
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 fab2 	bl	800c50c <USBD_CtlError>
            err++;
 800bfa8:	7afb      	ldrb	r3, [r7, #11]
 800bfaa:	3301      	adds	r3, #1
 800bfac:	72fb      	strb	r3, [r7, #11]
          break;
 800bfae:	e089      	b.n	800c0c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfb6:	689b      	ldr	r3, [r3, #8]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d00b      	beq.n	800bfd4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfc2:	689b      	ldr	r3, [r3, #8]
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	7c12      	ldrb	r2, [r2, #16]
 800bfc8:	f107 0108 	add.w	r1, r7, #8
 800bfcc:	4610      	mov	r0, r2
 800bfce:	4798      	blx	r3
 800bfd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfd2:	e077      	b.n	800c0c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bfd4:	6839      	ldr	r1, [r7, #0]
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 fa98 	bl	800c50c <USBD_CtlError>
            err++;
 800bfdc:	7afb      	ldrb	r3, [r7, #11]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	72fb      	strb	r3, [r7, #11]
          break;
 800bfe2:	e06f      	b.n	800c0c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d00b      	beq.n	800c008 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	7c12      	ldrb	r2, [r2, #16]
 800bffc:	f107 0108 	add.w	r1, r7, #8
 800c000:	4610      	mov	r0, r2
 800c002:	4798      	blx	r3
 800c004:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c006:	e05d      	b.n	800c0c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c008:	6839      	ldr	r1, [r7, #0]
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f000 fa7e 	bl	800c50c <USBD_CtlError>
            err++;
 800c010:	7afb      	ldrb	r3, [r7, #11]
 800c012:	3301      	adds	r3, #1
 800c014:	72fb      	strb	r3, [r7, #11]
          break;
 800c016:	e055      	b.n	800c0c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c01e:	691b      	ldr	r3, [r3, #16]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d00b      	beq.n	800c03c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c02a:	691b      	ldr	r3, [r3, #16]
 800c02c:	687a      	ldr	r2, [r7, #4]
 800c02e:	7c12      	ldrb	r2, [r2, #16]
 800c030:	f107 0108 	add.w	r1, r7, #8
 800c034:	4610      	mov	r0, r2
 800c036:	4798      	blx	r3
 800c038:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c03a:	e043      	b.n	800c0c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c03c:	6839      	ldr	r1, [r7, #0]
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 fa64 	bl	800c50c <USBD_CtlError>
            err++;
 800c044:	7afb      	ldrb	r3, [r7, #11]
 800c046:	3301      	adds	r3, #1
 800c048:	72fb      	strb	r3, [r7, #11]
          break;
 800c04a:	e03b      	b.n	800c0c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c052:	695b      	ldr	r3, [r3, #20]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d00b      	beq.n	800c070 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c05e:	695b      	ldr	r3, [r3, #20]
 800c060:	687a      	ldr	r2, [r7, #4]
 800c062:	7c12      	ldrb	r2, [r2, #16]
 800c064:	f107 0108 	add.w	r1, r7, #8
 800c068:	4610      	mov	r0, r2
 800c06a:	4798      	blx	r3
 800c06c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c06e:	e029      	b.n	800c0c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c070:	6839      	ldr	r1, [r7, #0]
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 fa4a 	bl	800c50c <USBD_CtlError>
            err++;
 800c078:	7afb      	ldrb	r3, [r7, #11]
 800c07a:	3301      	adds	r3, #1
 800c07c:	72fb      	strb	r3, [r7, #11]
          break;
 800c07e:	e021      	b.n	800c0c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c086:	699b      	ldr	r3, [r3, #24]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d00b      	beq.n	800c0a4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c092:	699b      	ldr	r3, [r3, #24]
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	7c12      	ldrb	r2, [r2, #16]
 800c098:	f107 0108 	add.w	r1, r7, #8
 800c09c:	4610      	mov	r0, r2
 800c09e:	4798      	blx	r3
 800c0a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0a2:	e00f      	b.n	800c0c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c0a4:	6839      	ldr	r1, [r7, #0]
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f000 fa30 	bl	800c50c <USBD_CtlError>
            err++;
 800c0ac:	7afb      	ldrb	r3, [r7, #11]
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	72fb      	strb	r3, [r7, #11]
          break;
 800c0b2:	e007      	b.n	800c0c4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c0b4:	6839      	ldr	r1, [r7, #0]
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 fa28 	bl	800c50c <USBD_CtlError>
          err++;
 800c0bc:	7afb      	ldrb	r3, [r7, #11]
 800c0be:	3301      	adds	r3, #1
 800c0c0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c0c2:	bf00      	nop
      }
      break;
 800c0c4:	e037      	b.n	800c136 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	7c1b      	ldrb	r3, [r3, #16]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d109      	bne.n	800c0e2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0d6:	f107 0208 	add.w	r2, r7, #8
 800c0da:	4610      	mov	r0, r2
 800c0dc:	4798      	blx	r3
 800c0de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c0e0:	e029      	b.n	800c136 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c0e2:	6839      	ldr	r1, [r7, #0]
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f000 fa11 	bl	800c50c <USBD_CtlError>
        err++;
 800c0ea:	7afb      	ldrb	r3, [r7, #11]
 800c0ec:	3301      	adds	r3, #1
 800c0ee:	72fb      	strb	r3, [r7, #11]
      break;
 800c0f0:	e021      	b.n	800c136 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	7c1b      	ldrb	r3, [r3, #16]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d10d      	bne.n	800c116 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c102:	f107 0208 	add.w	r2, r7, #8
 800c106:	4610      	mov	r0, r2
 800c108:	4798      	blx	r3
 800c10a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	3301      	adds	r3, #1
 800c110:	2207      	movs	r2, #7
 800c112:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c114:	e00f      	b.n	800c136 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c116:	6839      	ldr	r1, [r7, #0]
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f000 f9f7 	bl	800c50c <USBD_CtlError>
        err++;
 800c11e:	7afb      	ldrb	r3, [r7, #11]
 800c120:	3301      	adds	r3, #1
 800c122:	72fb      	strb	r3, [r7, #11]
      break;
 800c124:	e007      	b.n	800c136 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c126:	6839      	ldr	r1, [r7, #0]
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 f9ef 	bl	800c50c <USBD_CtlError>
      err++;
 800c12e:	7afb      	ldrb	r3, [r7, #11]
 800c130:	3301      	adds	r3, #1
 800c132:	72fb      	strb	r3, [r7, #11]
      break;
 800c134:	bf00      	nop
  }

  if (err != 0U)
 800c136:	7afb      	ldrb	r3, [r7, #11]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d11e      	bne.n	800c17a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	88db      	ldrh	r3, [r3, #6]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d016      	beq.n	800c172 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c144:	893b      	ldrh	r3, [r7, #8]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d00e      	beq.n	800c168 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	88da      	ldrh	r2, [r3, #6]
 800c14e:	893b      	ldrh	r3, [r7, #8]
 800c150:	4293      	cmp	r3, r2
 800c152:	bf28      	it	cs
 800c154:	4613      	movcs	r3, r2
 800c156:	b29b      	uxth	r3, r3
 800c158:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c15a:	893b      	ldrh	r3, [r7, #8]
 800c15c:	461a      	mov	r2, r3
 800c15e:	68f9      	ldr	r1, [r7, #12]
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f000 fa44 	bl	800c5ee <USBD_CtlSendData>
 800c166:	e009      	b.n	800c17c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c168:	6839      	ldr	r1, [r7, #0]
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 f9ce 	bl	800c50c <USBD_CtlError>
 800c170:	e004      	b.n	800c17c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 fa95 	bl	800c6a2 <USBD_CtlSendStatus>
 800c178:	e000      	b.n	800c17c <USBD_GetDescriptor+0x320>
    return;
 800c17a:	bf00      	nop
  }
}
 800c17c:	3710      	adds	r7, #16
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop

0800c184 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b084      	sub	sp, #16
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	889b      	ldrh	r3, [r3, #4]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d131      	bne.n	800c1fa <USBD_SetAddress+0x76>
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	88db      	ldrh	r3, [r3, #6]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d12d      	bne.n	800c1fa <USBD_SetAddress+0x76>
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	885b      	ldrh	r3, [r3, #2]
 800c1a2:	2b7f      	cmp	r3, #127	@ 0x7f
 800c1a4:	d829      	bhi.n	800c1fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	885b      	ldrh	r3, [r3, #2]
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	2b03      	cmp	r3, #3
 800c1bc:	d104      	bne.n	800c1c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c1be:	6839      	ldr	r1, [r7, #0]
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 f9a3 	bl	800c50c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1c6:	e01d      	b.n	800c204 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	7bfa      	ldrb	r2, [r7, #15]
 800c1cc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c1d0:	7bfb      	ldrb	r3, [r7, #15]
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f000 fe8f 	bl	800cef8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 fa61 	bl	800c6a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c1e0:	7bfb      	ldrb	r3, [r7, #15]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d004      	beq.n	800c1f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2202      	movs	r2, #2
 800c1ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1ee:	e009      	b.n	800c204 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1f8:	e004      	b.n	800c204 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c1fa:	6839      	ldr	r1, [r7, #0]
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f000 f985 	bl	800c50c <USBD_CtlError>
  }
}
 800c202:	bf00      	nop
 800c204:	bf00      	nop
 800c206:	3710      	adds	r7, #16
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c216:	2300      	movs	r3, #0
 800c218:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	885b      	ldrh	r3, [r3, #2]
 800c21e:	b2da      	uxtb	r2, r3
 800c220:	4b4c      	ldr	r3, [pc, #304]	@ (800c354 <USBD_SetConfig+0x148>)
 800c222:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c224:	4b4b      	ldr	r3, [pc, #300]	@ (800c354 <USBD_SetConfig+0x148>)
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d905      	bls.n	800c238 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c22c:	6839      	ldr	r1, [r7, #0]
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 f96c 	bl	800c50c <USBD_CtlError>
    return USBD_FAIL;
 800c234:	2303      	movs	r3, #3
 800c236:	e088      	b.n	800c34a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c23e:	b2db      	uxtb	r3, r3
 800c240:	2b02      	cmp	r3, #2
 800c242:	d002      	beq.n	800c24a <USBD_SetConfig+0x3e>
 800c244:	2b03      	cmp	r3, #3
 800c246:	d025      	beq.n	800c294 <USBD_SetConfig+0x88>
 800c248:	e071      	b.n	800c32e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c24a:	4b42      	ldr	r3, [pc, #264]	@ (800c354 <USBD_SetConfig+0x148>)
 800c24c:	781b      	ldrb	r3, [r3, #0]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d01c      	beq.n	800c28c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c252:	4b40      	ldr	r3, [pc, #256]	@ (800c354 <USBD_SetConfig+0x148>)
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	461a      	mov	r2, r3
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c25c:	4b3d      	ldr	r3, [pc, #244]	@ (800c354 <USBD_SetConfig+0x148>)
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	4619      	mov	r1, r3
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f7ff f990 	bl	800b588 <USBD_SetClassConfig>
 800c268:	4603      	mov	r3, r0
 800c26a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c26c:	7bfb      	ldrb	r3, [r7, #15]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d004      	beq.n	800c27c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c272:	6839      	ldr	r1, [r7, #0]
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 f949 	bl	800c50c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c27a:	e065      	b.n	800c348 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 fa10 	bl	800c6a2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2203      	movs	r2, #3
 800c286:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c28a:	e05d      	b.n	800c348 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f000 fa08 	bl	800c6a2 <USBD_CtlSendStatus>
      break;
 800c292:	e059      	b.n	800c348 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c294:	4b2f      	ldr	r3, [pc, #188]	@ (800c354 <USBD_SetConfig+0x148>)
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d112      	bne.n	800c2c2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2202      	movs	r2, #2
 800c2a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c2a4:	4b2b      	ldr	r3, [pc, #172]	@ (800c354 <USBD_SetConfig+0x148>)
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c2ae:	4b29      	ldr	r3, [pc, #164]	@ (800c354 <USBD_SetConfig+0x148>)
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f7ff f983 	bl	800b5c0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f000 f9f1 	bl	800c6a2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c2c0:	e042      	b.n	800c348 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c2c2:	4b24      	ldr	r3, [pc, #144]	@ (800c354 <USBD_SetConfig+0x148>)
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d02a      	beq.n	800c326 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	b2db      	uxtb	r3, r3
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f7ff f971 	bl	800b5c0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c2de:	4b1d      	ldr	r3, [pc, #116]	@ (800c354 <USBD_SetConfig+0x148>)
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c2e8:	4b1a      	ldr	r3, [pc, #104]	@ (800c354 <USBD_SetConfig+0x148>)
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	4619      	mov	r1, r3
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f7ff f94a 	bl	800b588 <USBD_SetClassConfig>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c2f8:	7bfb      	ldrb	r3, [r7, #15]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d00f      	beq.n	800c31e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c2fe:	6839      	ldr	r1, [r7, #0]
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 f903 	bl	800c50c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	b2db      	uxtb	r3, r3
 800c30c:	4619      	mov	r1, r3
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f7ff f956 	bl	800b5c0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2202      	movs	r2, #2
 800c318:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c31c:	e014      	b.n	800c348 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 f9bf 	bl	800c6a2 <USBD_CtlSendStatus>
      break;
 800c324:	e010      	b.n	800c348 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 f9bb 	bl	800c6a2 <USBD_CtlSendStatus>
      break;
 800c32c:	e00c      	b.n	800c348 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c32e:	6839      	ldr	r1, [r7, #0]
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f000 f8eb 	bl	800c50c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c336:	4b07      	ldr	r3, [pc, #28]	@ (800c354 <USBD_SetConfig+0x148>)
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	4619      	mov	r1, r3
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f7ff f93f 	bl	800b5c0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c342:	2303      	movs	r3, #3
 800c344:	73fb      	strb	r3, [r7, #15]
      break;
 800c346:	bf00      	nop
  }

  return ret;
 800c348:	7bfb      	ldrb	r3, [r7, #15]
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3710      	adds	r7, #16
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}
 800c352:	bf00      	nop
 800c354:	2000072c 	.word	0x2000072c

0800c358 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	88db      	ldrh	r3, [r3, #6]
 800c366:	2b01      	cmp	r3, #1
 800c368:	d004      	beq.n	800c374 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c36a:	6839      	ldr	r1, [r7, #0]
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f000 f8cd 	bl	800c50c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c372:	e023      	b.n	800c3bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	2b02      	cmp	r3, #2
 800c37e:	dc02      	bgt.n	800c386 <USBD_GetConfig+0x2e>
 800c380:	2b00      	cmp	r3, #0
 800c382:	dc03      	bgt.n	800c38c <USBD_GetConfig+0x34>
 800c384:	e015      	b.n	800c3b2 <USBD_GetConfig+0x5a>
 800c386:	2b03      	cmp	r3, #3
 800c388:	d00b      	beq.n	800c3a2 <USBD_GetConfig+0x4a>
 800c38a:	e012      	b.n	800c3b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2200      	movs	r2, #0
 800c390:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	3308      	adds	r3, #8
 800c396:	2201      	movs	r2, #1
 800c398:	4619      	mov	r1, r3
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 f927 	bl	800c5ee <USBD_CtlSendData>
        break;
 800c3a0:	e00c      	b.n	800c3bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	3304      	adds	r3, #4
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f000 f91f 	bl	800c5ee <USBD_CtlSendData>
        break;
 800c3b0:	e004      	b.n	800c3bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c3b2:	6839      	ldr	r1, [r7, #0]
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 f8a9 	bl	800c50c <USBD_CtlError>
        break;
 800c3ba:	bf00      	nop
}
 800c3bc:	bf00      	nop
 800c3be:	3708      	adds	r7, #8
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b082      	sub	sp, #8
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3d4:	b2db      	uxtb	r3, r3
 800c3d6:	3b01      	subs	r3, #1
 800c3d8:	2b02      	cmp	r3, #2
 800c3da:	d81e      	bhi.n	800c41a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	88db      	ldrh	r3, [r3, #6]
 800c3e0:	2b02      	cmp	r3, #2
 800c3e2:	d004      	beq.n	800c3ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c3e4:	6839      	ldr	r1, [r7, #0]
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 f890 	bl	800c50c <USBD_CtlError>
        break;
 800c3ec:	e01a      	b.n	800c424 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d005      	beq.n	800c40a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	68db      	ldr	r3, [r3, #12]
 800c402:	f043 0202 	orr.w	r2, r3, #2
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	330c      	adds	r3, #12
 800c40e:	2202      	movs	r2, #2
 800c410:	4619      	mov	r1, r3
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f000 f8eb 	bl	800c5ee <USBD_CtlSendData>
      break;
 800c418:	e004      	b.n	800c424 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c41a:	6839      	ldr	r1, [r7, #0]
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f000 f875 	bl	800c50c <USBD_CtlError>
      break;
 800c422:	bf00      	nop
  }
}
 800c424:	bf00      	nop
 800c426:	3708      	adds	r7, #8
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}

0800c42c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b082      	sub	sp, #8
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	885b      	ldrh	r3, [r3, #2]
 800c43a:	2b01      	cmp	r3, #1
 800c43c:	d106      	bne.n	800c44c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2201      	movs	r2, #1
 800c442:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 f92b 	bl	800c6a2 <USBD_CtlSendStatus>
  }
}
 800c44c:	bf00      	nop
 800c44e:	3708      	adds	r7, #8
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}

0800c454 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c464:	b2db      	uxtb	r3, r3
 800c466:	3b01      	subs	r3, #1
 800c468:	2b02      	cmp	r3, #2
 800c46a:	d80b      	bhi.n	800c484 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	885b      	ldrh	r3, [r3, #2]
 800c470:	2b01      	cmp	r3, #1
 800c472:	d10c      	bne.n	800c48e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2200      	movs	r2, #0
 800c478:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f000 f910 	bl	800c6a2 <USBD_CtlSendStatus>
      }
      break;
 800c482:	e004      	b.n	800c48e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c484:	6839      	ldr	r1, [r7, #0]
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f000 f840 	bl	800c50c <USBD_CtlError>
      break;
 800c48c:	e000      	b.n	800c490 <USBD_ClrFeature+0x3c>
      break;
 800c48e:	bf00      	nop
  }
}
 800c490:	bf00      	nop
 800c492:	3708      	adds	r7, #8
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b084      	sub	sp, #16
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	781a      	ldrb	r2, [r3, #0]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	781a      	ldrb	r2, [r3, #0]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	3301      	adds	r3, #1
 800c4c0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c4c2:	68f8      	ldr	r0, [r7, #12]
 800c4c4:	f7ff fa90 	bl	800b9e8 <SWAPBYTE>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	3301      	adds	r3, #1
 800c4da:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c4dc:	68f8      	ldr	r0, [r7, #12]
 800c4de:	f7ff fa83 	bl	800b9e8 <SWAPBYTE>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c4f6:	68f8      	ldr	r0, [r7, #12]
 800c4f8:	f7ff fa76 	bl	800b9e8 <SWAPBYTE>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	461a      	mov	r2, r3
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	80da      	strh	r2, [r3, #6]
}
 800c504:	bf00      	nop
 800c506:	3710      	adds	r7, #16
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c516:	2180      	movs	r1, #128	@ 0x80
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f000 fc83 	bl	800ce24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c51e:	2100      	movs	r1, #0
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f000 fc7f 	bl	800ce24 <USBD_LL_StallEP>
}
 800c526:	bf00      	nop
 800c528:	3708      	adds	r7, #8
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}

0800c52e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c52e:	b580      	push	{r7, lr}
 800c530:	b086      	sub	sp, #24
 800c532:	af00      	add	r7, sp, #0
 800c534:	60f8      	str	r0, [r7, #12]
 800c536:	60b9      	str	r1, [r7, #8]
 800c538:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c53a:	2300      	movs	r3, #0
 800c53c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d036      	beq.n	800c5b2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c548:	6938      	ldr	r0, [r7, #16]
 800c54a:	f000 f836 	bl	800c5ba <USBD_GetLen>
 800c54e:	4603      	mov	r3, r0
 800c550:	3301      	adds	r3, #1
 800c552:	b29b      	uxth	r3, r3
 800c554:	005b      	lsls	r3, r3, #1
 800c556:	b29a      	uxth	r2, r3
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c55c:	7dfb      	ldrb	r3, [r7, #23]
 800c55e:	68ba      	ldr	r2, [r7, #8]
 800c560:	4413      	add	r3, r2
 800c562:	687a      	ldr	r2, [r7, #4]
 800c564:	7812      	ldrb	r2, [r2, #0]
 800c566:	701a      	strb	r2, [r3, #0]
  idx++;
 800c568:	7dfb      	ldrb	r3, [r7, #23]
 800c56a:	3301      	adds	r3, #1
 800c56c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c56e:	7dfb      	ldrb	r3, [r7, #23]
 800c570:	68ba      	ldr	r2, [r7, #8]
 800c572:	4413      	add	r3, r2
 800c574:	2203      	movs	r2, #3
 800c576:	701a      	strb	r2, [r3, #0]
  idx++;
 800c578:	7dfb      	ldrb	r3, [r7, #23]
 800c57a:	3301      	adds	r3, #1
 800c57c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c57e:	e013      	b.n	800c5a8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c580:	7dfb      	ldrb	r3, [r7, #23]
 800c582:	68ba      	ldr	r2, [r7, #8]
 800c584:	4413      	add	r3, r2
 800c586:	693a      	ldr	r2, [r7, #16]
 800c588:	7812      	ldrb	r2, [r2, #0]
 800c58a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	3301      	adds	r3, #1
 800c590:	613b      	str	r3, [r7, #16]
    idx++;
 800c592:	7dfb      	ldrb	r3, [r7, #23]
 800c594:	3301      	adds	r3, #1
 800c596:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c598:	7dfb      	ldrb	r3, [r7, #23]
 800c59a:	68ba      	ldr	r2, [r7, #8]
 800c59c:	4413      	add	r3, r2
 800c59e:	2200      	movs	r2, #0
 800c5a0:	701a      	strb	r2, [r3, #0]
    idx++;
 800c5a2:	7dfb      	ldrb	r3, [r7, #23]
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d1e7      	bne.n	800c580 <USBD_GetString+0x52>
 800c5b0:	e000      	b.n	800c5b4 <USBD_GetString+0x86>
    return;
 800c5b2:	bf00      	nop
  }
}
 800c5b4:	3718      	adds	r7, #24
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}

0800c5ba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c5ba:	b480      	push	{r7}
 800c5bc:	b085      	sub	sp, #20
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c5ca:	e005      	b.n	800c5d8 <USBD_GetLen+0x1e>
  {
    len++;
 800c5cc:	7bfb      	ldrb	r3, [r7, #15]
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	3301      	adds	r3, #1
 800c5d6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d1f5      	bne.n	800c5cc <USBD_GetLen+0x12>
  }

  return len;
 800c5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3714      	adds	r7, #20
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr

0800c5ee <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c5ee:	b580      	push	{r7, lr}
 800c5f0:	b084      	sub	sp, #16
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	60f8      	str	r0, [r7, #12]
 800c5f6:	60b9      	str	r1, [r7, #8]
 800c5f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2202      	movs	r2, #2
 800c5fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	68ba      	ldr	r2, [r7, #8]
 800c612:	2100      	movs	r1, #0
 800c614:	68f8      	ldr	r0, [r7, #12]
 800c616:	f000 fc8e 	bl	800cf36 <USBD_LL_Transmit>

  return USBD_OK;
 800c61a:	2300      	movs	r3, #0
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3710      	adds	r7, #16
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b084      	sub	sp, #16
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	68ba      	ldr	r2, [r7, #8]
 800c634:	2100      	movs	r1, #0
 800c636:	68f8      	ldr	r0, [r7, #12]
 800c638:	f000 fc7d 	bl	800cf36 <USBD_LL_Transmit>

  return USBD_OK;
 800c63c:	2300      	movs	r3, #0
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}

0800c646 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c646:	b580      	push	{r7, lr}
 800c648:	b084      	sub	sp, #16
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	60f8      	str	r0, [r7, #12]
 800c64e:	60b9      	str	r1, [r7, #8]
 800c650:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2203      	movs	r2, #3
 800c656:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	68ba      	ldr	r2, [r7, #8]
 800c66e:	2100      	movs	r1, #0
 800c670:	68f8      	ldr	r0, [r7, #12]
 800c672:	f000 fc81 	bl	800cf78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c676:	2300      	movs	r3, #0
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3710      	adds	r7, #16
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	60f8      	str	r0, [r7, #12]
 800c688:	60b9      	str	r1, [r7, #8]
 800c68a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	68ba      	ldr	r2, [r7, #8]
 800c690:	2100      	movs	r1, #0
 800c692:	68f8      	ldr	r0, [r7, #12]
 800c694:	f000 fc70 	bl	800cf78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c698:	2300      	movs	r3, #0
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3710      	adds	r7, #16
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}

0800c6a2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c6a2:	b580      	push	{r7, lr}
 800c6a4:	b082      	sub	sp, #8
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2204      	movs	r2, #4
 800c6ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	2100      	movs	r1, #0
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f000 fc3c 	bl	800cf36 <USBD_LL_Transmit>

  return USBD_OK;
 800c6be:	2300      	movs	r3, #0
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3708      	adds	r7, #8
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b082      	sub	sp, #8
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2205      	movs	r2, #5
 800c6d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c6d8:	2300      	movs	r3, #0
 800c6da:	2200      	movs	r2, #0
 800c6dc:	2100      	movs	r1, #0
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f000 fc4a 	bl	800cf78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c6e4:	2300      	movs	r3, #0
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3708      	adds	r7, #8
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
	...

0800c6f0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	4912      	ldr	r1, [pc, #72]	@ (800c740 <MX_USB_Device_Init+0x50>)
 800c6f8:	4812      	ldr	r0, [pc, #72]	@ (800c744 <MX_USB_Device_Init+0x54>)
 800c6fa:	f7fe fed7 	bl	800b4ac <USBD_Init>
 800c6fe:	4603      	mov	r3, r0
 800c700:	2b00      	cmp	r3, #0
 800c702:	d001      	beq.n	800c708 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800c704:	f7f5 fca4 	bl	8002050 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800c708:	490f      	ldr	r1, [pc, #60]	@ (800c748 <MX_USB_Device_Init+0x58>)
 800c70a:	480e      	ldr	r0, [pc, #56]	@ (800c744 <MX_USB_Device_Init+0x54>)
 800c70c:	f7fe fefe 	bl	800b50c <USBD_RegisterClass>
 800c710:	4603      	mov	r3, r0
 800c712:	2b00      	cmp	r3, #0
 800c714:	d001      	beq.n	800c71a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800c716:	f7f5 fc9b 	bl	8002050 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800c71a:	490c      	ldr	r1, [pc, #48]	@ (800c74c <MX_USB_Device_Init+0x5c>)
 800c71c:	4809      	ldr	r0, [pc, #36]	@ (800c744 <MX_USB_Device_Init+0x54>)
 800c71e:	f7fe fe4f 	bl	800b3c0 <USBD_CDC_RegisterInterface>
 800c722:	4603      	mov	r3, r0
 800c724:	2b00      	cmp	r3, #0
 800c726:	d001      	beq.n	800c72c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800c728:	f7f5 fc92 	bl	8002050 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c72c:	4805      	ldr	r0, [pc, #20]	@ (800c744 <MX_USB_Device_Init+0x54>)
 800c72e:	f7fe ff14 	bl	800b55a <USBD_Start>
 800c732:	4603      	mov	r3, r0
 800c734:	2b00      	cmp	r3, #0
 800c736:	d001      	beq.n	800c73c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800c738:	f7f5 fc8a 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c73c:	bf00      	nop
 800c73e:	bd80      	pop	{r7, pc}
 800c740:	20000130 	.word	0x20000130
 800c744:	20000730 	.word	0x20000730
 800c748:	20000018 	.word	0x20000018
 800c74c:	2000011c 	.word	0x2000011c

0800c750 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c754:	2200      	movs	r2, #0
 800c756:	4905      	ldr	r1, [pc, #20]	@ (800c76c <CDC_Init_FS+0x1c>)
 800c758:	4805      	ldr	r0, [pc, #20]	@ (800c770 <CDC_Init_FS+0x20>)
 800c75a:	f7fe fe46 	bl	800b3ea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c75e:	4905      	ldr	r1, [pc, #20]	@ (800c774 <CDC_Init_FS+0x24>)
 800c760:	4803      	ldr	r0, [pc, #12]	@ (800c770 <CDC_Init_FS+0x20>)
 800c762:	f7fe fe60 	bl	800b426 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c766:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c768:	4618      	mov	r0, r3
 800c76a:	bd80      	pop	{r7, pc}
 800c76c:	20001240 	.word	0x20001240
 800c770:	20000730 	.word	0x20000730
 800c774:	20000a40 	.word	0x20000a40

0800c778 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c778:	b480      	push	{r7}
 800c77a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c77c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c77e:	4618      	mov	r0, r3
 800c780:	46bd      	mov	sp, r7
 800c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c786:	4770      	bx	lr

0800c788 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c788:	b480      	push	{r7}
 800c78a:	b083      	sub	sp, #12
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	4603      	mov	r3, r0
 800c790:	6039      	str	r1, [r7, #0]
 800c792:	71fb      	strb	r3, [r7, #7]
 800c794:	4613      	mov	r3, r2
 800c796:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c798:	79fb      	ldrb	r3, [r7, #7]
 800c79a:	2b23      	cmp	r3, #35	@ 0x23
 800c79c:	d84a      	bhi.n	800c834 <CDC_Control_FS+0xac>
 800c79e:	a201      	add	r2, pc, #4	@ (adr r2, 800c7a4 <CDC_Control_FS+0x1c>)
 800c7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7a4:	0800c835 	.word	0x0800c835
 800c7a8:	0800c835 	.word	0x0800c835
 800c7ac:	0800c835 	.word	0x0800c835
 800c7b0:	0800c835 	.word	0x0800c835
 800c7b4:	0800c835 	.word	0x0800c835
 800c7b8:	0800c835 	.word	0x0800c835
 800c7bc:	0800c835 	.word	0x0800c835
 800c7c0:	0800c835 	.word	0x0800c835
 800c7c4:	0800c835 	.word	0x0800c835
 800c7c8:	0800c835 	.word	0x0800c835
 800c7cc:	0800c835 	.word	0x0800c835
 800c7d0:	0800c835 	.word	0x0800c835
 800c7d4:	0800c835 	.word	0x0800c835
 800c7d8:	0800c835 	.word	0x0800c835
 800c7dc:	0800c835 	.word	0x0800c835
 800c7e0:	0800c835 	.word	0x0800c835
 800c7e4:	0800c835 	.word	0x0800c835
 800c7e8:	0800c835 	.word	0x0800c835
 800c7ec:	0800c835 	.word	0x0800c835
 800c7f0:	0800c835 	.word	0x0800c835
 800c7f4:	0800c835 	.word	0x0800c835
 800c7f8:	0800c835 	.word	0x0800c835
 800c7fc:	0800c835 	.word	0x0800c835
 800c800:	0800c835 	.word	0x0800c835
 800c804:	0800c835 	.word	0x0800c835
 800c808:	0800c835 	.word	0x0800c835
 800c80c:	0800c835 	.word	0x0800c835
 800c810:	0800c835 	.word	0x0800c835
 800c814:	0800c835 	.word	0x0800c835
 800c818:	0800c835 	.word	0x0800c835
 800c81c:	0800c835 	.word	0x0800c835
 800c820:	0800c835 	.word	0x0800c835
 800c824:	0800c835 	.word	0x0800c835
 800c828:	0800c835 	.word	0x0800c835
 800c82c:	0800c835 	.word	0x0800c835
 800c830:	0800c835 	.word	0x0800c835
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c834:	bf00      	nop
  }

  return (USBD_OK);
 800c836:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c838:	4618      	mov	r0, r3
 800c83a:	370c      	adds	r7, #12
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr

0800c844 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b084      	sub	sp, #16
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
 800c84c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c84e:	6879      	ldr	r1, [r7, #4]
 800c850:	480e      	ldr	r0, [pc, #56]	@ (800c88c <CDC_Receive_FS+0x48>)
 800c852:	f7fe fde8 	bl	800b426 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c856:	480d      	ldr	r0, [pc, #52]	@ (800c88c <CDC_Receive_FS+0x48>)
 800c858:	f7fe fdfe 	bl	800b458 <USBD_CDC_ReceivePacket>

  size_t length = (size_t) *Len;
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	60fb      	str	r3, [r7, #12]
  memset(usbRxBuffer, '\0', USB_RX_BUFFER_SIZE); // Clear buffer before setting
 800c862:	2240      	movs	r2, #64	@ 0x40
 800c864:	2100      	movs	r1, #0
 800c866:	480a      	ldr	r0, [pc, #40]	@ (800c890 <CDC_Receive_FS+0x4c>)
 800c868:	f001 fbd7 	bl	800e01a <memset>
  memcpy(usbRxBuffer, Buf, length);
 800c86c:	68fa      	ldr	r2, [r7, #12]
 800c86e:	6879      	ldr	r1, [r7, #4]
 800c870:	4807      	ldr	r0, [pc, #28]	@ (800c890 <CDC_Receive_FS+0x4c>)
 800c872:	f001 fc52 	bl	800e11a <memcpy>
  memset(Buf, '\0', length); // Clear Buf for next read
 800c876:	68fa      	ldr	r2, [r7, #12]
 800c878:	2100      	movs	r1, #0
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f001 fbcd 	bl	800e01a <memset>

//CDC_Transmit_FS(Buf,*Len); // Received characters are echoed to the terminal

  return (USBD_OK);
 800c880:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c882:	4618      	mov	r0, r3
 800c884:	3710      	adds	r7, #16
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
 800c88a:	bf00      	nop
 800c88c:	20000730 	.word	0x20000730
 800c890:	20000a00 	.word	0x20000a00

0800c894 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c894:	b480      	push	{r7}
 800c896:	b087      	sub	sp, #28
 800c898:	af00      	add	r7, sp, #0
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	60b9      	str	r1, [r7, #8]
 800c89e:	4613      	mov	r3, r2
 800c8a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c8a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	371c      	adds	r7, #28
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b4:	4770      	bx	lr
	...

0800c8b8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b083      	sub	sp, #12
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	4603      	mov	r3, r0
 800c8c0:	6039      	str	r1, [r7, #0]
 800c8c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	2212      	movs	r2, #18
 800c8c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800c8ca:	4b03      	ldr	r3, [pc, #12]	@ (800c8d8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	370c      	adds	r7, #12
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr
 800c8d8:	20000150 	.word	0x20000150

0800c8dc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b083      	sub	sp, #12
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	6039      	str	r1, [r7, #0]
 800c8e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	2204      	movs	r2, #4
 800c8ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c8ee:	4b03      	ldr	r3, [pc, #12]	@ (800c8fc <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	370c      	adds	r7, #12
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fa:	4770      	bx	lr
 800c8fc:	20000164 	.word	0x20000164

0800c900 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b082      	sub	sp, #8
 800c904:	af00      	add	r7, sp, #0
 800c906:	4603      	mov	r3, r0
 800c908:	6039      	str	r1, [r7, #0]
 800c90a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c90c:	79fb      	ldrb	r3, [r7, #7]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d105      	bne.n	800c91e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c912:	683a      	ldr	r2, [r7, #0]
 800c914:	4907      	ldr	r1, [pc, #28]	@ (800c934 <USBD_CDC_ProductStrDescriptor+0x34>)
 800c916:	4808      	ldr	r0, [pc, #32]	@ (800c938 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c918:	f7ff fe09 	bl	800c52e <USBD_GetString>
 800c91c:	e004      	b.n	800c928 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c91e:	683a      	ldr	r2, [r7, #0]
 800c920:	4904      	ldr	r1, [pc, #16]	@ (800c934 <USBD_CDC_ProductStrDescriptor+0x34>)
 800c922:	4805      	ldr	r0, [pc, #20]	@ (800c938 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c924:	f7ff fe03 	bl	800c52e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c928:	4b02      	ldr	r3, [pc, #8]	@ (800c934 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3708      	adds	r7, #8
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
 800c932:	bf00      	nop
 800c934:	20001a40 	.word	0x20001a40
 800c938:	080118a0 	.word	0x080118a0

0800c93c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
 800c942:	4603      	mov	r3, r0
 800c944:	6039      	str	r1, [r7, #0]
 800c946:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c948:	683a      	ldr	r2, [r7, #0]
 800c94a:	4904      	ldr	r1, [pc, #16]	@ (800c95c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800c94c:	4804      	ldr	r0, [pc, #16]	@ (800c960 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800c94e:	f7ff fdee 	bl	800c52e <USBD_GetString>
  return USBD_StrDesc;
 800c952:	4b02      	ldr	r3, [pc, #8]	@ (800c95c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800c954:	4618      	mov	r0, r3
 800c956:	3708      	adds	r7, #8
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}
 800c95c:	20001a40 	.word	0x20001a40
 800c960:	080118ac 	.word	0x080118ac

0800c964 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b082      	sub	sp, #8
 800c968:	af00      	add	r7, sp, #0
 800c96a:	4603      	mov	r3, r0
 800c96c:	6039      	str	r1, [r7, #0]
 800c96e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	221a      	movs	r2, #26
 800c974:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c976:	f000 f843 	bl	800ca00 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c97a:	4b02      	ldr	r3, [pc, #8]	@ (800c984 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3708      	adds	r7, #8
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	20000168 	.word	0x20000168

0800c988 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	4603      	mov	r3, r0
 800c990:	6039      	str	r1, [r7, #0]
 800c992:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c994:	79fb      	ldrb	r3, [r7, #7]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d105      	bne.n	800c9a6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c99a:	683a      	ldr	r2, [r7, #0]
 800c99c:	4907      	ldr	r1, [pc, #28]	@ (800c9bc <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c99e:	4808      	ldr	r0, [pc, #32]	@ (800c9c0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c9a0:	f7ff fdc5 	bl	800c52e <USBD_GetString>
 800c9a4:	e004      	b.n	800c9b0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c9a6:	683a      	ldr	r2, [r7, #0]
 800c9a8:	4904      	ldr	r1, [pc, #16]	@ (800c9bc <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c9aa:	4805      	ldr	r0, [pc, #20]	@ (800c9c0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c9ac:	f7ff fdbf 	bl	800c52e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c9b0:	4b02      	ldr	r3, [pc, #8]	@ (800c9bc <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3708      	adds	r7, #8
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
 800c9ba:	bf00      	nop
 800c9bc:	20001a40 	.word	0x20001a40
 800c9c0:	080118c0 	.word	0x080118c0

0800c9c4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b082      	sub	sp, #8
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	6039      	str	r1, [r7, #0]
 800c9ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c9d0:	79fb      	ldrb	r3, [r7, #7]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d105      	bne.n	800c9e2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c9d6:	683a      	ldr	r2, [r7, #0]
 800c9d8:	4907      	ldr	r1, [pc, #28]	@ (800c9f8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c9da:	4808      	ldr	r0, [pc, #32]	@ (800c9fc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c9dc:	f7ff fda7 	bl	800c52e <USBD_GetString>
 800c9e0:	e004      	b.n	800c9ec <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c9e2:	683a      	ldr	r2, [r7, #0]
 800c9e4:	4904      	ldr	r1, [pc, #16]	@ (800c9f8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c9e6:	4805      	ldr	r0, [pc, #20]	@ (800c9fc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c9e8:	f7ff fda1 	bl	800c52e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c9ec:	4b02      	ldr	r3, [pc, #8]	@ (800c9f8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3708      	adds	r7, #8
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
 800c9f6:	bf00      	nop
 800c9f8:	20001a40 	.word	0x20001a40
 800c9fc:	080118cc 	.word	0x080118cc

0800ca00 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ca06:	4b0f      	ldr	r3, [pc, #60]	@ (800ca44 <Get_SerialNum+0x44>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ca0c:	4b0e      	ldr	r3, [pc, #56]	@ (800ca48 <Get_SerialNum+0x48>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ca12:	4b0e      	ldr	r3, [pc, #56]	@ (800ca4c <Get_SerialNum+0x4c>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ca18:	68fa      	ldr	r2, [r7, #12]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	4413      	add	r3, r2
 800ca1e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d009      	beq.n	800ca3a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ca26:	2208      	movs	r2, #8
 800ca28:	4909      	ldr	r1, [pc, #36]	@ (800ca50 <Get_SerialNum+0x50>)
 800ca2a:	68f8      	ldr	r0, [r7, #12]
 800ca2c:	f000 f814 	bl	800ca58 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ca30:	2204      	movs	r2, #4
 800ca32:	4908      	ldr	r1, [pc, #32]	@ (800ca54 <Get_SerialNum+0x54>)
 800ca34:	68b8      	ldr	r0, [r7, #8]
 800ca36:	f000 f80f 	bl	800ca58 <IntToUnicode>
  }
}
 800ca3a:	bf00      	nop
 800ca3c:	3710      	adds	r7, #16
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop
 800ca44:	1fff7590 	.word	0x1fff7590
 800ca48:	1fff7594 	.word	0x1fff7594
 800ca4c:	1fff7598 	.word	0x1fff7598
 800ca50:	2000016a 	.word	0x2000016a
 800ca54:	2000017a 	.word	0x2000017a

0800ca58 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b087      	sub	sp, #28
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	60f8      	str	r0, [r7, #12]
 800ca60:	60b9      	str	r1, [r7, #8]
 800ca62:	4613      	mov	r3, r2
 800ca64:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ca66:	2300      	movs	r3, #0
 800ca68:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	75fb      	strb	r3, [r7, #23]
 800ca6e:	e027      	b.n	800cac0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	0f1b      	lsrs	r3, r3, #28
 800ca74:	2b09      	cmp	r3, #9
 800ca76:	d80b      	bhi.n	800ca90 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	0f1b      	lsrs	r3, r3, #28
 800ca7c:	b2da      	uxtb	r2, r3
 800ca7e:	7dfb      	ldrb	r3, [r7, #23]
 800ca80:	005b      	lsls	r3, r3, #1
 800ca82:	4619      	mov	r1, r3
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	440b      	add	r3, r1
 800ca88:	3230      	adds	r2, #48	@ 0x30
 800ca8a:	b2d2      	uxtb	r2, r2
 800ca8c:	701a      	strb	r2, [r3, #0]
 800ca8e:	e00a      	b.n	800caa6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	0f1b      	lsrs	r3, r3, #28
 800ca94:	b2da      	uxtb	r2, r3
 800ca96:	7dfb      	ldrb	r3, [r7, #23]
 800ca98:	005b      	lsls	r3, r3, #1
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	440b      	add	r3, r1
 800caa0:	3237      	adds	r2, #55	@ 0x37
 800caa2:	b2d2      	uxtb	r2, r2
 800caa4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	011b      	lsls	r3, r3, #4
 800caaa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800caac:	7dfb      	ldrb	r3, [r7, #23]
 800caae:	005b      	lsls	r3, r3, #1
 800cab0:	3301      	adds	r3, #1
 800cab2:	68ba      	ldr	r2, [r7, #8]
 800cab4:	4413      	add	r3, r2
 800cab6:	2200      	movs	r2, #0
 800cab8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800caba:	7dfb      	ldrb	r3, [r7, #23]
 800cabc:	3301      	adds	r3, #1
 800cabe:	75fb      	strb	r3, [r7, #23]
 800cac0:	7dfa      	ldrb	r2, [r7, #23]
 800cac2:	79fb      	ldrb	r3, [r7, #7]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d3d3      	bcc.n	800ca70 <IntToUnicode+0x18>
  }
}
 800cac8:	bf00      	nop
 800caca:	bf00      	nop
 800cacc:	371c      	adds	r7, #28
 800cace:	46bd      	mov	sp, r7
 800cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad4:	4770      	bx	lr
	...

0800cad8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b098      	sub	sp, #96	@ 0x60
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800cae0:	f107 0310 	add.w	r3, r7, #16
 800cae4:	2250      	movs	r2, #80	@ 0x50
 800cae6:	2100      	movs	r1, #0
 800cae8:	4618      	mov	r0, r3
 800caea:	f001 fa96 	bl	800e01a <memset>
  if(pcdHandle->Instance==USB)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4a15      	ldr	r2, [pc, #84]	@ (800cb48 <HAL_PCD_MspInit+0x70>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d122      	bne.n	800cb3e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800caf8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cafc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800cafe:	2300      	movs	r3, #0
 800cb00:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800cb02:	f107 0310 	add.w	r3, r7, #16
 800cb06:	4618      	mov	r0, r3
 800cb08:	f7fa fb00 	bl	800710c <HAL_RCCEx_PeriphCLKConfig>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d001      	beq.n	800cb16 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800cb12:	f7f5 fa9d 	bl	8002050 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cb16:	4b0d      	ldr	r3, [pc, #52]	@ (800cb4c <HAL_PCD_MspInit+0x74>)
 800cb18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb1a:	4a0c      	ldr	r2, [pc, #48]	@ (800cb4c <HAL_PCD_MspInit+0x74>)
 800cb1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cb20:	6593      	str	r3, [r2, #88]	@ 0x58
 800cb22:	4b0a      	ldr	r3, [pc, #40]	@ (800cb4c <HAL_PCD_MspInit+0x74>)
 800cb24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb2a:	60fb      	str	r3, [r7, #12]
 800cb2c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800cb2e:	2200      	movs	r2, #0
 800cb30:	2100      	movs	r1, #0
 800cb32:	2014      	movs	r0, #20
 800cb34:	f7f7 fc59 	bl	80043ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800cb38:	2014      	movs	r0, #20
 800cb3a:	f7f7 fc70 	bl	800441e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cb3e:	bf00      	nop
 800cb40:	3760      	adds	r7, #96	@ 0x60
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	40005c00 	.word	0x40005c00
 800cb4c:	40021000 	.word	0x40021000

0800cb50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800cb64:	4619      	mov	r1, r3
 800cb66:	4610      	mov	r0, r2
 800cb68:	f7fe fd42 	bl	800b5f0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800cb6c:	bf00      	nop
 800cb6e:	3708      	adds	r7, #8
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}

0800cb74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b082      	sub	sp, #8
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
 800cb7c:	460b      	mov	r3, r1
 800cb7e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800cb86:	78fa      	ldrb	r2, [r7, #3]
 800cb88:	6879      	ldr	r1, [r7, #4]
 800cb8a:	4613      	mov	r3, r2
 800cb8c:	009b      	lsls	r3, r3, #2
 800cb8e:	4413      	add	r3, r2
 800cb90:	00db      	lsls	r3, r3, #3
 800cb92:	440b      	add	r3, r1
 800cb94:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	78fb      	ldrb	r3, [r7, #3]
 800cb9c:	4619      	mov	r1, r3
 800cb9e:	f7fe fd7c 	bl	800b69a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800cba2:	bf00      	nop
 800cba4:	3708      	adds	r7, #8
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}

0800cbaa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbaa:	b580      	push	{r7, lr}
 800cbac:	b082      	sub	sp, #8
 800cbae:	af00      	add	r7, sp, #0
 800cbb0:	6078      	str	r0, [r7, #4]
 800cbb2:	460b      	mov	r3, r1
 800cbb4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800cbbc:	78fa      	ldrb	r2, [r7, #3]
 800cbbe:	6879      	ldr	r1, [r7, #4]
 800cbc0:	4613      	mov	r3, r2
 800cbc2:	009b      	lsls	r3, r3, #2
 800cbc4:	4413      	add	r3, r2
 800cbc6:	00db      	lsls	r3, r3, #3
 800cbc8:	440b      	add	r3, r1
 800cbca:	3324      	adds	r3, #36	@ 0x24
 800cbcc:	681a      	ldr	r2, [r3, #0]
 800cbce:	78fb      	ldrb	r3, [r7, #3]
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	f7fe fdc5 	bl	800b760 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800cbd6:	bf00      	nop
 800cbd8:	3708      	adds	r7, #8
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}

0800cbde <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbde:	b580      	push	{r7, lr}
 800cbe0:	b082      	sub	sp, #8
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7fe fed9 	bl	800b9a4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800cbf2:	bf00      	nop
 800cbf4:	3708      	adds	r7, #8
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}

0800cbfa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbfa:	b580      	push	{r7, lr}
 800cbfc:	b084      	sub	sp, #16
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cc02:	2301      	movs	r3, #1
 800cc04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	795b      	ldrb	r3, [r3, #5]
 800cc0a:	2b02      	cmp	r3, #2
 800cc0c:	d001      	beq.n	800cc12 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cc0e:	f7f5 fa1f 	bl	8002050 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cc18:	7bfa      	ldrb	r2, [r7, #15]
 800cc1a:	4611      	mov	r1, r2
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7fe fe83 	bl	800b928 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f7fe fe2f 	bl	800b88c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800cc2e:	bf00      	nop
 800cc30:	3710      	adds	r7, #16
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
	...

0800cc38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cc46:	4618      	mov	r0, r3
 800cc48:	f7fe fe7e 	bl	800b948 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	7a5b      	ldrb	r3, [r3, #9]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d005      	beq.n	800cc60 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cc54:	4b04      	ldr	r3, [pc, #16]	@ (800cc68 <HAL_PCD_SuspendCallback+0x30>)
 800cc56:	691b      	ldr	r3, [r3, #16]
 800cc58:	4a03      	ldr	r2, [pc, #12]	@ (800cc68 <HAL_PCD_SuspendCallback+0x30>)
 800cc5a:	f043 0306 	orr.w	r3, r3, #6
 800cc5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800cc60:	bf00      	nop
 800cc62:	3708      	adds	r7, #8
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}
 800cc68:	e000ed00 	.word	0xe000ed00

0800cc6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	7a5b      	ldrb	r3, [r3, #9]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d007      	beq.n	800cc8c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cc7c:	4b08      	ldr	r3, [pc, #32]	@ (800cca0 <HAL_PCD_ResumeCallback+0x34>)
 800cc7e:	691b      	ldr	r3, [r3, #16]
 800cc80:	4a07      	ldr	r2, [pc, #28]	@ (800cca0 <HAL_PCD_ResumeCallback+0x34>)
 800cc82:	f023 0306 	bic.w	r3, r3, #6
 800cc86:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800cc88:	f000 f9f8 	bl	800d07c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cc92:	4618      	mov	r0, r3
 800cc94:	f7fe fe6e 	bl	800b974 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800cc98:	bf00      	nop
 800cc9a:	3708      	adds	r7, #8
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}
 800cca0:	e000ed00 	.word	0xe000ed00

0800cca4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b082      	sub	sp, #8
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800ccac:	4a2b      	ldr	r2, [pc, #172]	@ (800cd5c <USBD_LL_Init+0xb8>)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	4a29      	ldr	r2, [pc, #164]	@ (800cd5c <USBD_LL_Init+0xb8>)
 800ccb8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800ccbc:	4b27      	ldr	r3, [pc, #156]	@ (800cd5c <USBD_LL_Init+0xb8>)
 800ccbe:	4a28      	ldr	r2, [pc, #160]	@ (800cd60 <USBD_LL_Init+0xbc>)
 800ccc0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ccc2:	4b26      	ldr	r3, [pc, #152]	@ (800cd5c <USBD_LL_Init+0xb8>)
 800ccc4:	2208      	movs	r2, #8
 800ccc6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ccc8:	4b24      	ldr	r3, [pc, #144]	@ (800cd5c <USBD_LL_Init+0xb8>)
 800ccca:	2202      	movs	r2, #2
 800cccc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ccce:	4b23      	ldr	r3, [pc, #140]	@ (800cd5c <USBD_LL_Init+0xb8>)
 800ccd0:	2202      	movs	r2, #2
 800ccd2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = ENABLE;
 800ccd4:	4b21      	ldr	r3, [pc, #132]	@ (800cd5c <USBD_LL_Init+0xb8>)
 800ccd6:	2201      	movs	r2, #1
 800ccd8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ccda:	4b20      	ldr	r3, [pc, #128]	@ (800cd5c <USBD_LL_Init+0xb8>)
 800ccdc:	2200      	movs	r2, #0
 800ccde:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cce0:	4b1e      	ldr	r3, [pc, #120]	@ (800cd5c <USBD_LL_Init+0xb8>)
 800cce2:	2200      	movs	r2, #0
 800cce4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cce6:	4b1d      	ldr	r3, [pc, #116]	@ (800cd5c <USBD_LL_Init+0xb8>)
 800cce8:	2200      	movs	r2, #0
 800ccea:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ccec:	481b      	ldr	r0, [pc, #108]	@ (800cd5c <USBD_LL_Init+0xb8>)
 800ccee:	f7f7 ff39 	bl	8004b64 <HAL_PCD_Init>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d001      	beq.n	800ccfc <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800ccf8:	f7f5 f9aa 	bl	8002050 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cd02:	2318      	movs	r3, #24
 800cd04:	2200      	movs	r2, #0
 800cd06:	2100      	movs	r1, #0
 800cd08:	f7f9 fbc0 	bl	800648c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cd12:	2358      	movs	r3, #88	@ 0x58
 800cd14:	2200      	movs	r2, #0
 800cd16:	2180      	movs	r1, #128	@ 0x80
 800cd18:	f7f9 fbb8 	bl	800648c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cd22:	23c0      	movs	r3, #192	@ 0xc0
 800cd24:	2200      	movs	r2, #0
 800cd26:	2181      	movs	r1, #129	@ 0x81
 800cd28:	f7f9 fbb0 	bl	800648c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cd32:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800cd36:	2200      	movs	r2, #0
 800cd38:	2101      	movs	r1, #1
 800cd3a:	f7f9 fba7 	bl	800648c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cd44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cd48:	2200      	movs	r2, #0
 800cd4a:	2182      	movs	r1, #130	@ 0x82
 800cd4c:	f7f9 fb9e 	bl	800648c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cd50:	2300      	movs	r3, #0
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3708      	adds	r7, #8
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	20001c40 	.word	0x20001c40
 800cd60:	40005c00 	.word	0x40005c00

0800cd64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b084      	sub	sp, #16
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd70:	2300      	movs	r3, #0
 800cd72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7f7 ffc0 	bl	8004d00 <HAL_PCD_Start>
 800cd80:	4603      	mov	r3, r0
 800cd82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd84:	7bfb      	ldrb	r3, [r7, #15]
 800cd86:	4618      	mov	r0, r3
 800cd88:	f000 f97e 	bl	800d088 <USBD_Get_USB_Status>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd90:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3710      	adds	r7, #16
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}

0800cd9a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cd9a:	b580      	push	{r7, lr}
 800cd9c:	b084      	sub	sp, #16
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
 800cda2:	4608      	mov	r0, r1
 800cda4:	4611      	mov	r1, r2
 800cda6:	461a      	mov	r2, r3
 800cda8:	4603      	mov	r3, r0
 800cdaa:	70fb      	strb	r3, [r7, #3]
 800cdac:	460b      	mov	r3, r1
 800cdae:	70bb      	strb	r3, [r7, #2]
 800cdb0:	4613      	mov	r3, r2
 800cdb2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cdc2:	78bb      	ldrb	r3, [r7, #2]
 800cdc4:	883a      	ldrh	r2, [r7, #0]
 800cdc6:	78f9      	ldrb	r1, [r7, #3]
 800cdc8:	f7f8 f907 	bl	8004fda <HAL_PCD_EP_Open>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdd0:	7bfb      	ldrb	r3, [r7, #15]
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f000 f958 	bl	800d088 <USBD_Get_USB_Status>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cddc:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3710      	adds	r7, #16
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}

0800cde6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cde6:	b580      	push	{r7, lr}
 800cde8:	b084      	sub	sp, #16
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	6078      	str	r0, [r7, #4]
 800cdee:	460b      	mov	r3, r1
 800cdf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ce00:	78fa      	ldrb	r2, [r7, #3]
 800ce02:	4611      	mov	r1, r2
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7f8 f947 	bl	8005098 <HAL_PCD_EP_Close>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce0e:	7bfb      	ldrb	r3, [r7, #15]
 800ce10:	4618      	mov	r0, r3
 800ce12:	f000 f939 	bl	800d088 <USBD_Get_USB_Status>
 800ce16:	4603      	mov	r3, r0
 800ce18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3710      	adds	r7, #16
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}

0800ce24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b084      	sub	sp, #16
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	460b      	mov	r3, r1
 800ce2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce30:	2300      	movs	r3, #0
 800ce32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce34:	2300      	movs	r3, #0
 800ce36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ce3e:	78fa      	ldrb	r2, [r7, #3]
 800ce40:	4611      	mov	r1, r2
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7f8 f9f0 	bl	8005228 <HAL_PCD_EP_SetStall>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce4c:	7bfb      	ldrb	r3, [r7, #15]
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f000 f91a 	bl	800d088 <USBD_Get_USB_Status>
 800ce54:	4603      	mov	r3, r0
 800ce56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce58:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3710      	adds	r7, #16
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}

0800ce62 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce62:	b580      	push	{r7, lr}
 800ce64:	b084      	sub	sp, #16
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	6078      	str	r0, [r7, #4]
 800ce6a:	460b      	mov	r3, r1
 800ce6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce72:	2300      	movs	r3, #0
 800ce74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ce7c:	78fa      	ldrb	r2, [r7, #3]
 800ce7e:	4611      	mov	r1, r2
 800ce80:	4618      	mov	r0, r3
 800ce82:	f7f8 fa23 	bl	80052cc <HAL_PCD_EP_ClrStall>
 800ce86:	4603      	mov	r3, r0
 800ce88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce8a:	7bfb      	ldrb	r3, [r7, #15]
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f000 f8fb 	bl	800d088 <USBD_Get_USB_Status>
 800ce92:	4603      	mov	r3, r0
 800ce94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce96:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3710      	adds	r7, #16
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b085      	sub	sp, #20
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	460b      	mov	r3, r1
 800ceaa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ceb2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ceb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	da0b      	bge.n	800ced4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cebc:	78fb      	ldrb	r3, [r7, #3]
 800cebe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cec2:	68f9      	ldr	r1, [r7, #12]
 800cec4:	4613      	mov	r3, r2
 800cec6:	009b      	lsls	r3, r3, #2
 800cec8:	4413      	add	r3, r2
 800ceca:	00db      	lsls	r3, r3, #3
 800cecc:	440b      	add	r3, r1
 800cece:	3312      	adds	r3, #18
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	e00b      	b.n	800ceec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ced4:	78fb      	ldrb	r3, [r7, #3]
 800ced6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ceda:	68f9      	ldr	r1, [r7, #12]
 800cedc:	4613      	mov	r3, r2
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	4413      	add	r3, r2
 800cee2:	00db      	lsls	r3, r3, #3
 800cee4:	440b      	add	r3, r1
 800cee6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800ceea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3714      	adds	r7, #20
 800cef0:	46bd      	mov	sp, r7
 800cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef6:	4770      	bx	lr

0800cef8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b084      	sub	sp, #16
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	460b      	mov	r3, r1
 800cf02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf04:	2300      	movs	r3, #0
 800cf06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cf12:	78fa      	ldrb	r2, [r7, #3]
 800cf14:	4611      	mov	r1, r2
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7f8 f83b 	bl	8004f92 <HAL_PCD_SetAddress>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf20:	7bfb      	ldrb	r3, [r7, #15]
 800cf22:	4618      	mov	r0, r3
 800cf24:	f000 f8b0 	bl	800d088 <USBD_Get_USB_Status>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3710      	adds	r7, #16
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}

0800cf36 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cf36:	b580      	push	{r7, lr}
 800cf38:	b086      	sub	sp, #24
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	60f8      	str	r0, [r7, #12]
 800cf3e:	607a      	str	r2, [r7, #4]
 800cf40:	603b      	str	r3, [r7, #0]
 800cf42:	460b      	mov	r3, r1
 800cf44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf46:	2300      	movs	r3, #0
 800cf48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cf54:	7af9      	ldrb	r1, [r7, #11]
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	687a      	ldr	r2, [r7, #4]
 800cf5a:	f7f8 f92e 	bl	80051ba <HAL_PCD_EP_Transmit>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf62:	7dfb      	ldrb	r3, [r7, #23]
 800cf64:	4618      	mov	r0, r3
 800cf66:	f000 f88f 	bl	800d088 <USBD_Get_USB_Status>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cf6e:	7dbb      	ldrb	r3, [r7, #22]
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3718      	adds	r7, #24
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}

0800cf78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b086      	sub	sp, #24
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	607a      	str	r2, [r7, #4]
 800cf82:	603b      	str	r3, [r7, #0]
 800cf84:	460b      	mov	r3, r1
 800cf86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cf96:	7af9      	ldrb	r1, [r7, #11]
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	687a      	ldr	r2, [r7, #4]
 800cf9c:	f7f8 f8c4 	bl	8005128 <HAL_PCD_EP_Receive>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfa4:	7dfb      	ldrb	r3, [r7, #23]
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f000 f86e 	bl	800d088 <USBD_Get_USB_Status>
 800cfac:	4603      	mov	r3, r0
 800cfae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cfb0:	7dbb      	ldrb	r3, [r7, #22]
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3718      	adds	r7, #24
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}

0800cfba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cfba:	b580      	push	{r7, lr}
 800cfbc:	b082      	sub	sp, #8
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	6078      	str	r0, [r7, #4]
 800cfc2:	460b      	mov	r3, r1
 800cfc4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cfcc:	78fa      	ldrb	r2, [r7, #3]
 800cfce:	4611      	mov	r1, r2
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7f8 f8da 	bl	800518a <HAL_PCD_EP_GetRxCount>
 800cfd6:	4603      	mov	r3, r0
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3708      	adds	r7, #8
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}

0800cfe0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b082      	sub	sp, #8
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	460b      	mov	r3, r1
 800cfea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800cfec:	78fb      	ldrb	r3, [r7, #3]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d002      	beq.n	800cff8 <HAL_PCDEx_LPM_Callback+0x18>
 800cff2:	2b01      	cmp	r3, #1
 800cff4:	d013      	beq.n	800d01e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800cff6:	e023      	b.n	800d040 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	7a5b      	ldrb	r3, [r3, #9]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d007      	beq.n	800d010 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d000:	f000 f83c 	bl	800d07c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d004:	4b10      	ldr	r3, [pc, #64]	@ (800d048 <HAL_PCDEx_LPM_Callback+0x68>)
 800d006:	691b      	ldr	r3, [r3, #16]
 800d008:	4a0f      	ldr	r2, [pc, #60]	@ (800d048 <HAL_PCDEx_LPM_Callback+0x68>)
 800d00a:	f023 0306 	bic.w	r3, r3, #6
 800d00e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d016:	4618      	mov	r0, r3
 800d018:	f7fe fcac 	bl	800b974 <USBD_LL_Resume>
    break;
 800d01c:	e010      	b.n	800d040 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d024:	4618      	mov	r0, r3
 800d026:	f7fe fc8f 	bl	800b948 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	7a5b      	ldrb	r3, [r3, #9]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d005      	beq.n	800d03e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d032:	4b05      	ldr	r3, [pc, #20]	@ (800d048 <HAL_PCDEx_LPM_Callback+0x68>)
 800d034:	691b      	ldr	r3, [r3, #16]
 800d036:	4a04      	ldr	r2, [pc, #16]	@ (800d048 <HAL_PCDEx_LPM_Callback+0x68>)
 800d038:	f043 0306 	orr.w	r3, r3, #6
 800d03c:	6113      	str	r3, [r2, #16]
    break;
 800d03e:	bf00      	nop
}
 800d040:	bf00      	nop
 800d042:	3708      	adds	r7, #8
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}
 800d048:	e000ed00 	.word	0xe000ed00

0800d04c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b083      	sub	sp, #12
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d054:	4b03      	ldr	r3, [pc, #12]	@ (800d064 <USBD_static_malloc+0x18>)
}
 800d056:	4618      	mov	r0, r3
 800d058:	370c      	adds	r7, #12
 800d05a:	46bd      	mov	sp, r7
 800d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d060:	4770      	bx	lr
 800d062:	bf00      	nop
 800d064:	20001f1c 	.word	0x20001f1c

0800d068 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d068:	b480      	push	{r7}
 800d06a:	b083      	sub	sp, #12
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]

}
 800d070:	bf00      	nop
 800d072:	370c      	adds	r7, #12
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr

0800d07c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d080:	f7f4 f9b0 	bl	80013e4 <SystemClock_Config>
}
 800d084:	bf00      	nop
 800d086:	bd80      	pop	{r7, pc}

0800d088 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d088:	b480      	push	{r7}
 800d08a:	b085      	sub	sp, #20
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	4603      	mov	r3, r0
 800d090:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d092:	2300      	movs	r3, #0
 800d094:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d096:	79fb      	ldrb	r3, [r7, #7]
 800d098:	2b03      	cmp	r3, #3
 800d09a:	d817      	bhi.n	800d0cc <USBD_Get_USB_Status+0x44>
 800d09c:	a201      	add	r2, pc, #4	@ (adr r2, 800d0a4 <USBD_Get_USB_Status+0x1c>)
 800d09e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0a2:	bf00      	nop
 800d0a4:	0800d0b5 	.word	0x0800d0b5
 800d0a8:	0800d0bb 	.word	0x0800d0bb
 800d0ac:	0800d0c1 	.word	0x0800d0c1
 800d0b0:	0800d0c7 	.word	0x0800d0c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	73fb      	strb	r3, [r7, #15]
    break;
 800d0b8:	e00b      	b.n	800d0d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d0ba:	2303      	movs	r3, #3
 800d0bc:	73fb      	strb	r3, [r7, #15]
    break;
 800d0be:	e008      	b.n	800d0d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	73fb      	strb	r3, [r7, #15]
    break;
 800d0c4:	e005      	b.n	800d0d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d0c6:	2303      	movs	r3, #3
 800d0c8:	73fb      	strb	r3, [r7, #15]
    break;
 800d0ca:	e002      	b.n	800d0d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d0cc:	2303      	movs	r3, #3
 800d0ce:	73fb      	strb	r3, [r7, #15]
    break;
 800d0d0:	bf00      	nop
  }
  return usb_status;
 800d0d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3714      	adds	r7, #20
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr

0800d0e0 <__cvt>:
 800d0e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0e4:	ec57 6b10 	vmov	r6, r7, d0
 800d0e8:	2f00      	cmp	r7, #0
 800d0ea:	460c      	mov	r4, r1
 800d0ec:	4619      	mov	r1, r3
 800d0ee:	463b      	mov	r3, r7
 800d0f0:	bfbb      	ittet	lt
 800d0f2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d0f6:	461f      	movlt	r7, r3
 800d0f8:	2300      	movge	r3, #0
 800d0fa:	232d      	movlt	r3, #45	@ 0x2d
 800d0fc:	700b      	strb	r3, [r1, #0]
 800d0fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d100:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d104:	4691      	mov	r9, r2
 800d106:	f023 0820 	bic.w	r8, r3, #32
 800d10a:	bfbc      	itt	lt
 800d10c:	4632      	movlt	r2, r6
 800d10e:	4616      	movlt	r6, r2
 800d110:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d114:	d005      	beq.n	800d122 <__cvt+0x42>
 800d116:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d11a:	d100      	bne.n	800d11e <__cvt+0x3e>
 800d11c:	3401      	adds	r4, #1
 800d11e:	2102      	movs	r1, #2
 800d120:	e000      	b.n	800d124 <__cvt+0x44>
 800d122:	2103      	movs	r1, #3
 800d124:	ab03      	add	r3, sp, #12
 800d126:	9301      	str	r3, [sp, #4]
 800d128:	ab02      	add	r3, sp, #8
 800d12a:	9300      	str	r3, [sp, #0]
 800d12c:	ec47 6b10 	vmov	d0, r6, r7
 800d130:	4653      	mov	r3, sl
 800d132:	4622      	mov	r2, r4
 800d134:	f001 f890 	bl	800e258 <_dtoa_r>
 800d138:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d13c:	4605      	mov	r5, r0
 800d13e:	d119      	bne.n	800d174 <__cvt+0x94>
 800d140:	f019 0f01 	tst.w	r9, #1
 800d144:	d00e      	beq.n	800d164 <__cvt+0x84>
 800d146:	eb00 0904 	add.w	r9, r0, r4
 800d14a:	2200      	movs	r2, #0
 800d14c:	2300      	movs	r3, #0
 800d14e:	4630      	mov	r0, r6
 800d150:	4639      	mov	r1, r7
 800d152:	f7f3 fce1 	bl	8000b18 <__aeabi_dcmpeq>
 800d156:	b108      	cbz	r0, 800d15c <__cvt+0x7c>
 800d158:	f8cd 900c 	str.w	r9, [sp, #12]
 800d15c:	2230      	movs	r2, #48	@ 0x30
 800d15e:	9b03      	ldr	r3, [sp, #12]
 800d160:	454b      	cmp	r3, r9
 800d162:	d31e      	bcc.n	800d1a2 <__cvt+0xc2>
 800d164:	9b03      	ldr	r3, [sp, #12]
 800d166:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d168:	1b5b      	subs	r3, r3, r5
 800d16a:	4628      	mov	r0, r5
 800d16c:	6013      	str	r3, [r2, #0]
 800d16e:	b004      	add	sp, #16
 800d170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d174:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d178:	eb00 0904 	add.w	r9, r0, r4
 800d17c:	d1e5      	bne.n	800d14a <__cvt+0x6a>
 800d17e:	7803      	ldrb	r3, [r0, #0]
 800d180:	2b30      	cmp	r3, #48	@ 0x30
 800d182:	d10a      	bne.n	800d19a <__cvt+0xba>
 800d184:	2200      	movs	r2, #0
 800d186:	2300      	movs	r3, #0
 800d188:	4630      	mov	r0, r6
 800d18a:	4639      	mov	r1, r7
 800d18c:	f7f3 fcc4 	bl	8000b18 <__aeabi_dcmpeq>
 800d190:	b918      	cbnz	r0, 800d19a <__cvt+0xba>
 800d192:	f1c4 0401 	rsb	r4, r4, #1
 800d196:	f8ca 4000 	str.w	r4, [sl]
 800d19a:	f8da 3000 	ldr.w	r3, [sl]
 800d19e:	4499      	add	r9, r3
 800d1a0:	e7d3      	b.n	800d14a <__cvt+0x6a>
 800d1a2:	1c59      	adds	r1, r3, #1
 800d1a4:	9103      	str	r1, [sp, #12]
 800d1a6:	701a      	strb	r2, [r3, #0]
 800d1a8:	e7d9      	b.n	800d15e <__cvt+0x7e>

0800d1aa <__exponent>:
 800d1aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1ac:	2900      	cmp	r1, #0
 800d1ae:	bfba      	itte	lt
 800d1b0:	4249      	neglt	r1, r1
 800d1b2:	232d      	movlt	r3, #45	@ 0x2d
 800d1b4:	232b      	movge	r3, #43	@ 0x2b
 800d1b6:	2909      	cmp	r1, #9
 800d1b8:	7002      	strb	r2, [r0, #0]
 800d1ba:	7043      	strb	r3, [r0, #1]
 800d1bc:	dd29      	ble.n	800d212 <__exponent+0x68>
 800d1be:	f10d 0307 	add.w	r3, sp, #7
 800d1c2:	461d      	mov	r5, r3
 800d1c4:	270a      	movs	r7, #10
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	fbb1 f6f7 	udiv	r6, r1, r7
 800d1cc:	fb07 1416 	mls	r4, r7, r6, r1
 800d1d0:	3430      	adds	r4, #48	@ 0x30
 800d1d2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d1d6:	460c      	mov	r4, r1
 800d1d8:	2c63      	cmp	r4, #99	@ 0x63
 800d1da:	f103 33ff 	add.w	r3, r3, #4294967295
 800d1de:	4631      	mov	r1, r6
 800d1e0:	dcf1      	bgt.n	800d1c6 <__exponent+0x1c>
 800d1e2:	3130      	adds	r1, #48	@ 0x30
 800d1e4:	1e94      	subs	r4, r2, #2
 800d1e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d1ea:	1c41      	adds	r1, r0, #1
 800d1ec:	4623      	mov	r3, r4
 800d1ee:	42ab      	cmp	r3, r5
 800d1f0:	d30a      	bcc.n	800d208 <__exponent+0x5e>
 800d1f2:	f10d 0309 	add.w	r3, sp, #9
 800d1f6:	1a9b      	subs	r3, r3, r2
 800d1f8:	42ac      	cmp	r4, r5
 800d1fa:	bf88      	it	hi
 800d1fc:	2300      	movhi	r3, #0
 800d1fe:	3302      	adds	r3, #2
 800d200:	4403      	add	r3, r0
 800d202:	1a18      	subs	r0, r3, r0
 800d204:	b003      	add	sp, #12
 800d206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d208:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d20c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d210:	e7ed      	b.n	800d1ee <__exponent+0x44>
 800d212:	2330      	movs	r3, #48	@ 0x30
 800d214:	3130      	adds	r1, #48	@ 0x30
 800d216:	7083      	strb	r3, [r0, #2]
 800d218:	70c1      	strb	r1, [r0, #3]
 800d21a:	1d03      	adds	r3, r0, #4
 800d21c:	e7f1      	b.n	800d202 <__exponent+0x58>
	...

0800d220 <_printf_float>:
 800d220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d224:	b08d      	sub	sp, #52	@ 0x34
 800d226:	460c      	mov	r4, r1
 800d228:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d22c:	4616      	mov	r6, r2
 800d22e:	461f      	mov	r7, r3
 800d230:	4605      	mov	r5, r0
 800d232:	f000 fefb 	bl	800e02c <_localeconv_r>
 800d236:	6803      	ldr	r3, [r0, #0]
 800d238:	9304      	str	r3, [sp, #16]
 800d23a:	4618      	mov	r0, r3
 800d23c:	f7f3 f840 	bl	80002c0 <strlen>
 800d240:	2300      	movs	r3, #0
 800d242:	930a      	str	r3, [sp, #40]	@ 0x28
 800d244:	f8d8 3000 	ldr.w	r3, [r8]
 800d248:	9005      	str	r0, [sp, #20]
 800d24a:	3307      	adds	r3, #7
 800d24c:	f023 0307 	bic.w	r3, r3, #7
 800d250:	f103 0208 	add.w	r2, r3, #8
 800d254:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d258:	f8d4 b000 	ldr.w	fp, [r4]
 800d25c:	f8c8 2000 	str.w	r2, [r8]
 800d260:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d264:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d268:	9307      	str	r3, [sp, #28]
 800d26a:	f8cd 8018 	str.w	r8, [sp, #24]
 800d26e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d272:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d276:	4b9c      	ldr	r3, [pc, #624]	@ (800d4e8 <_printf_float+0x2c8>)
 800d278:	f04f 32ff 	mov.w	r2, #4294967295
 800d27c:	f7f3 fc7e 	bl	8000b7c <__aeabi_dcmpun>
 800d280:	bb70      	cbnz	r0, 800d2e0 <_printf_float+0xc0>
 800d282:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d286:	4b98      	ldr	r3, [pc, #608]	@ (800d4e8 <_printf_float+0x2c8>)
 800d288:	f04f 32ff 	mov.w	r2, #4294967295
 800d28c:	f7f3 fc58 	bl	8000b40 <__aeabi_dcmple>
 800d290:	bb30      	cbnz	r0, 800d2e0 <_printf_float+0xc0>
 800d292:	2200      	movs	r2, #0
 800d294:	2300      	movs	r3, #0
 800d296:	4640      	mov	r0, r8
 800d298:	4649      	mov	r1, r9
 800d29a:	f7f3 fc47 	bl	8000b2c <__aeabi_dcmplt>
 800d29e:	b110      	cbz	r0, 800d2a6 <_printf_float+0x86>
 800d2a0:	232d      	movs	r3, #45	@ 0x2d
 800d2a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d2a6:	4a91      	ldr	r2, [pc, #580]	@ (800d4ec <_printf_float+0x2cc>)
 800d2a8:	4b91      	ldr	r3, [pc, #580]	@ (800d4f0 <_printf_float+0x2d0>)
 800d2aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d2ae:	bf8c      	ite	hi
 800d2b0:	4690      	movhi	r8, r2
 800d2b2:	4698      	movls	r8, r3
 800d2b4:	2303      	movs	r3, #3
 800d2b6:	6123      	str	r3, [r4, #16]
 800d2b8:	f02b 0304 	bic.w	r3, fp, #4
 800d2bc:	6023      	str	r3, [r4, #0]
 800d2be:	f04f 0900 	mov.w	r9, #0
 800d2c2:	9700      	str	r7, [sp, #0]
 800d2c4:	4633      	mov	r3, r6
 800d2c6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d2c8:	4621      	mov	r1, r4
 800d2ca:	4628      	mov	r0, r5
 800d2cc:	f000 f9d2 	bl	800d674 <_printf_common>
 800d2d0:	3001      	adds	r0, #1
 800d2d2:	f040 808d 	bne.w	800d3f0 <_printf_float+0x1d0>
 800d2d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d2da:	b00d      	add	sp, #52	@ 0x34
 800d2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2e0:	4642      	mov	r2, r8
 800d2e2:	464b      	mov	r3, r9
 800d2e4:	4640      	mov	r0, r8
 800d2e6:	4649      	mov	r1, r9
 800d2e8:	f7f3 fc48 	bl	8000b7c <__aeabi_dcmpun>
 800d2ec:	b140      	cbz	r0, 800d300 <_printf_float+0xe0>
 800d2ee:	464b      	mov	r3, r9
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	bfbc      	itt	lt
 800d2f4:	232d      	movlt	r3, #45	@ 0x2d
 800d2f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d2fa:	4a7e      	ldr	r2, [pc, #504]	@ (800d4f4 <_printf_float+0x2d4>)
 800d2fc:	4b7e      	ldr	r3, [pc, #504]	@ (800d4f8 <_printf_float+0x2d8>)
 800d2fe:	e7d4      	b.n	800d2aa <_printf_float+0x8a>
 800d300:	6863      	ldr	r3, [r4, #4]
 800d302:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d306:	9206      	str	r2, [sp, #24]
 800d308:	1c5a      	adds	r2, r3, #1
 800d30a:	d13b      	bne.n	800d384 <_printf_float+0x164>
 800d30c:	2306      	movs	r3, #6
 800d30e:	6063      	str	r3, [r4, #4]
 800d310:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d314:	2300      	movs	r3, #0
 800d316:	6022      	str	r2, [r4, #0]
 800d318:	9303      	str	r3, [sp, #12]
 800d31a:	ab0a      	add	r3, sp, #40	@ 0x28
 800d31c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d320:	ab09      	add	r3, sp, #36	@ 0x24
 800d322:	9300      	str	r3, [sp, #0]
 800d324:	6861      	ldr	r1, [r4, #4]
 800d326:	ec49 8b10 	vmov	d0, r8, r9
 800d32a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d32e:	4628      	mov	r0, r5
 800d330:	f7ff fed6 	bl	800d0e0 <__cvt>
 800d334:	9b06      	ldr	r3, [sp, #24]
 800d336:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d338:	2b47      	cmp	r3, #71	@ 0x47
 800d33a:	4680      	mov	r8, r0
 800d33c:	d129      	bne.n	800d392 <_printf_float+0x172>
 800d33e:	1cc8      	adds	r0, r1, #3
 800d340:	db02      	blt.n	800d348 <_printf_float+0x128>
 800d342:	6863      	ldr	r3, [r4, #4]
 800d344:	4299      	cmp	r1, r3
 800d346:	dd41      	ble.n	800d3cc <_printf_float+0x1ac>
 800d348:	f1aa 0a02 	sub.w	sl, sl, #2
 800d34c:	fa5f fa8a 	uxtb.w	sl, sl
 800d350:	3901      	subs	r1, #1
 800d352:	4652      	mov	r2, sl
 800d354:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d358:	9109      	str	r1, [sp, #36]	@ 0x24
 800d35a:	f7ff ff26 	bl	800d1aa <__exponent>
 800d35e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d360:	1813      	adds	r3, r2, r0
 800d362:	2a01      	cmp	r2, #1
 800d364:	4681      	mov	r9, r0
 800d366:	6123      	str	r3, [r4, #16]
 800d368:	dc02      	bgt.n	800d370 <_printf_float+0x150>
 800d36a:	6822      	ldr	r2, [r4, #0]
 800d36c:	07d2      	lsls	r2, r2, #31
 800d36e:	d501      	bpl.n	800d374 <_printf_float+0x154>
 800d370:	3301      	adds	r3, #1
 800d372:	6123      	str	r3, [r4, #16]
 800d374:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d0a2      	beq.n	800d2c2 <_printf_float+0xa2>
 800d37c:	232d      	movs	r3, #45	@ 0x2d
 800d37e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d382:	e79e      	b.n	800d2c2 <_printf_float+0xa2>
 800d384:	9a06      	ldr	r2, [sp, #24]
 800d386:	2a47      	cmp	r2, #71	@ 0x47
 800d388:	d1c2      	bne.n	800d310 <_printf_float+0xf0>
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d1c0      	bne.n	800d310 <_printf_float+0xf0>
 800d38e:	2301      	movs	r3, #1
 800d390:	e7bd      	b.n	800d30e <_printf_float+0xee>
 800d392:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d396:	d9db      	bls.n	800d350 <_printf_float+0x130>
 800d398:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d39c:	d118      	bne.n	800d3d0 <_printf_float+0x1b0>
 800d39e:	2900      	cmp	r1, #0
 800d3a0:	6863      	ldr	r3, [r4, #4]
 800d3a2:	dd0b      	ble.n	800d3bc <_printf_float+0x19c>
 800d3a4:	6121      	str	r1, [r4, #16]
 800d3a6:	b913      	cbnz	r3, 800d3ae <_printf_float+0x18e>
 800d3a8:	6822      	ldr	r2, [r4, #0]
 800d3aa:	07d0      	lsls	r0, r2, #31
 800d3ac:	d502      	bpl.n	800d3b4 <_printf_float+0x194>
 800d3ae:	3301      	adds	r3, #1
 800d3b0:	440b      	add	r3, r1
 800d3b2:	6123      	str	r3, [r4, #16]
 800d3b4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d3b6:	f04f 0900 	mov.w	r9, #0
 800d3ba:	e7db      	b.n	800d374 <_printf_float+0x154>
 800d3bc:	b913      	cbnz	r3, 800d3c4 <_printf_float+0x1a4>
 800d3be:	6822      	ldr	r2, [r4, #0]
 800d3c0:	07d2      	lsls	r2, r2, #31
 800d3c2:	d501      	bpl.n	800d3c8 <_printf_float+0x1a8>
 800d3c4:	3302      	adds	r3, #2
 800d3c6:	e7f4      	b.n	800d3b2 <_printf_float+0x192>
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	e7f2      	b.n	800d3b2 <_printf_float+0x192>
 800d3cc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d3d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3d2:	4299      	cmp	r1, r3
 800d3d4:	db05      	blt.n	800d3e2 <_printf_float+0x1c2>
 800d3d6:	6823      	ldr	r3, [r4, #0]
 800d3d8:	6121      	str	r1, [r4, #16]
 800d3da:	07d8      	lsls	r0, r3, #31
 800d3dc:	d5ea      	bpl.n	800d3b4 <_printf_float+0x194>
 800d3de:	1c4b      	adds	r3, r1, #1
 800d3e0:	e7e7      	b.n	800d3b2 <_printf_float+0x192>
 800d3e2:	2900      	cmp	r1, #0
 800d3e4:	bfd4      	ite	le
 800d3e6:	f1c1 0202 	rsble	r2, r1, #2
 800d3ea:	2201      	movgt	r2, #1
 800d3ec:	4413      	add	r3, r2
 800d3ee:	e7e0      	b.n	800d3b2 <_printf_float+0x192>
 800d3f0:	6823      	ldr	r3, [r4, #0]
 800d3f2:	055a      	lsls	r2, r3, #21
 800d3f4:	d407      	bmi.n	800d406 <_printf_float+0x1e6>
 800d3f6:	6923      	ldr	r3, [r4, #16]
 800d3f8:	4642      	mov	r2, r8
 800d3fa:	4631      	mov	r1, r6
 800d3fc:	4628      	mov	r0, r5
 800d3fe:	47b8      	blx	r7
 800d400:	3001      	adds	r0, #1
 800d402:	d12b      	bne.n	800d45c <_printf_float+0x23c>
 800d404:	e767      	b.n	800d2d6 <_printf_float+0xb6>
 800d406:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d40a:	f240 80dd 	bls.w	800d5c8 <_printf_float+0x3a8>
 800d40e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d412:	2200      	movs	r2, #0
 800d414:	2300      	movs	r3, #0
 800d416:	f7f3 fb7f 	bl	8000b18 <__aeabi_dcmpeq>
 800d41a:	2800      	cmp	r0, #0
 800d41c:	d033      	beq.n	800d486 <_printf_float+0x266>
 800d41e:	4a37      	ldr	r2, [pc, #220]	@ (800d4fc <_printf_float+0x2dc>)
 800d420:	2301      	movs	r3, #1
 800d422:	4631      	mov	r1, r6
 800d424:	4628      	mov	r0, r5
 800d426:	47b8      	blx	r7
 800d428:	3001      	adds	r0, #1
 800d42a:	f43f af54 	beq.w	800d2d6 <_printf_float+0xb6>
 800d42e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d432:	4543      	cmp	r3, r8
 800d434:	db02      	blt.n	800d43c <_printf_float+0x21c>
 800d436:	6823      	ldr	r3, [r4, #0]
 800d438:	07d8      	lsls	r0, r3, #31
 800d43a:	d50f      	bpl.n	800d45c <_printf_float+0x23c>
 800d43c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d440:	4631      	mov	r1, r6
 800d442:	4628      	mov	r0, r5
 800d444:	47b8      	blx	r7
 800d446:	3001      	adds	r0, #1
 800d448:	f43f af45 	beq.w	800d2d6 <_printf_float+0xb6>
 800d44c:	f04f 0900 	mov.w	r9, #0
 800d450:	f108 38ff 	add.w	r8, r8, #4294967295
 800d454:	f104 0a1a 	add.w	sl, r4, #26
 800d458:	45c8      	cmp	r8, r9
 800d45a:	dc09      	bgt.n	800d470 <_printf_float+0x250>
 800d45c:	6823      	ldr	r3, [r4, #0]
 800d45e:	079b      	lsls	r3, r3, #30
 800d460:	f100 8103 	bmi.w	800d66a <_printf_float+0x44a>
 800d464:	68e0      	ldr	r0, [r4, #12]
 800d466:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d468:	4298      	cmp	r0, r3
 800d46a:	bfb8      	it	lt
 800d46c:	4618      	movlt	r0, r3
 800d46e:	e734      	b.n	800d2da <_printf_float+0xba>
 800d470:	2301      	movs	r3, #1
 800d472:	4652      	mov	r2, sl
 800d474:	4631      	mov	r1, r6
 800d476:	4628      	mov	r0, r5
 800d478:	47b8      	blx	r7
 800d47a:	3001      	adds	r0, #1
 800d47c:	f43f af2b 	beq.w	800d2d6 <_printf_float+0xb6>
 800d480:	f109 0901 	add.w	r9, r9, #1
 800d484:	e7e8      	b.n	800d458 <_printf_float+0x238>
 800d486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d488:	2b00      	cmp	r3, #0
 800d48a:	dc39      	bgt.n	800d500 <_printf_float+0x2e0>
 800d48c:	4a1b      	ldr	r2, [pc, #108]	@ (800d4fc <_printf_float+0x2dc>)
 800d48e:	2301      	movs	r3, #1
 800d490:	4631      	mov	r1, r6
 800d492:	4628      	mov	r0, r5
 800d494:	47b8      	blx	r7
 800d496:	3001      	adds	r0, #1
 800d498:	f43f af1d 	beq.w	800d2d6 <_printf_float+0xb6>
 800d49c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d4a0:	ea59 0303 	orrs.w	r3, r9, r3
 800d4a4:	d102      	bne.n	800d4ac <_printf_float+0x28c>
 800d4a6:	6823      	ldr	r3, [r4, #0]
 800d4a8:	07d9      	lsls	r1, r3, #31
 800d4aa:	d5d7      	bpl.n	800d45c <_printf_float+0x23c>
 800d4ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4b0:	4631      	mov	r1, r6
 800d4b2:	4628      	mov	r0, r5
 800d4b4:	47b8      	blx	r7
 800d4b6:	3001      	adds	r0, #1
 800d4b8:	f43f af0d 	beq.w	800d2d6 <_printf_float+0xb6>
 800d4bc:	f04f 0a00 	mov.w	sl, #0
 800d4c0:	f104 0b1a 	add.w	fp, r4, #26
 800d4c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4c6:	425b      	negs	r3, r3
 800d4c8:	4553      	cmp	r3, sl
 800d4ca:	dc01      	bgt.n	800d4d0 <_printf_float+0x2b0>
 800d4cc:	464b      	mov	r3, r9
 800d4ce:	e793      	b.n	800d3f8 <_printf_float+0x1d8>
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	465a      	mov	r2, fp
 800d4d4:	4631      	mov	r1, r6
 800d4d6:	4628      	mov	r0, r5
 800d4d8:	47b8      	blx	r7
 800d4da:	3001      	adds	r0, #1
 800d4dc:	f43f aefb 	beq.w	800d2d6 <_printf_float+0xb6>
 800d4e0:	f10a 0a01 	add.w	sl, sl, #1
 800d4e4:	e7ee      	b.n	800d4c4 <_printf_float+0x2a4>
 800d4e6:	bf00      	nop
 800d4e8:	7fefffff 	.word	0x7fefffff
 800d4ec:	08011a21 	.word	0x08011a21
 800d4f0:	08011a1d 	.word	0x08011a1d
 800d4f4:	08011a29 	.word	0x08011a29
 800d4f8:	08011a25 	.word	0x08011a25
 800d4fc:	08011a2d 	.word	0x08011a2d
 800d500:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d502:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d506:	4553      	cmp	r3, sl
 800d508:	bfa8      	it	ge
 800d50a:	4653      	movge	r3, sl
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	4699      	mov	r9, r3
 800d510:	dc36      	bgt.n	800d580 <_printf_float+0x360>
 800d512:	f04f 0b00 	mov.w	fp, #0
 800d516:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d51a:	f104 021a 	add.w	r2, r4, #26
 800d51e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d520:	9306      	str	r3, [sp, #24]
 800d522:	eba3 0309 	sub.w	r3, r3, r9
 800d526:	455b      	cmp	r3, fp
 800d528:	dc31      	bgt.n	800d58e <_printf_float+0x36e>
 800d52a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d52c:	459a      	cmp	sl, r3
 800d52e:	dc3a      	bgt.n	800d5a6 <_printf_float+0x386>
 800d530:	6823      	ldr	r3, [r4, #0]
 800d532:	07da      	lsls	r2, r3, #31
 800d534:	d437      	bmi.n	800d5a6 <_printf_float+0x386>
 800d536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d538:	ebaa 0903 	sub.w	r9, sl, r3
 800d53c:	9b06      	ldr	r3, [sp, #24]
 800d53e:	ebaa 0303 	sub.w	r3, sl, r3
 800d542:	4599      	cmp	r9, r3
 800d544:	bfa8      	it	ge
 800d546:	4699      	movge	r9, r3
 800d548:	f1b9 0f00 	cmp.w	r9, #0
 800d54c:	dc33      	bgt.n	800d5b6 <_printf_float+0x396>
 800d54e:	f04f 0800 	mov.w	r8, #0
 800d552:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d556:	f104 0b1a 	add.w	fp, r4, #26
 800d55a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d55c:	ebaa 0303 	sub.w	r3, sl, r3
 800d560:	eba3 0309 	sub.w	r3, r3, r9
 800d564:	4543      	cmp	r3, r8
 800d566:	f77f af79 	ble.w	800d45c <_printf_float+0x23c>
 800d56a:	2301      	movs	r3, #1
 800d56c:	465a      	mov	r2, fp
 800d56e:	4631      	mov	r1, r6
 800d570:	4628      	mov	r0, r5
 800d572:	47b8      	blx	r7
 800d574:	3001      	adds	r0, #1
 800d576:	f43f aeae 	beq.w	800d2d6 <_printf_float+0xb6>
 800d57a:	f108 0801 	add.w	r8, r8, #1
 800d57e:	e7ec      	b.n	800d55a <_printf_float+0x33a>
 800d580:	4642      	mov	r2, r8
 800d582:	4631      	mov	r1, r6
 800d584:	4628      	mov	r0, r5
 800d586:	47b8      	blx	r7
 800d588:	3001      	adds	r0, #1
 800d58a:	d1c2      	bne.n	800d512 <_printf_float+0x2f2>
 800d58c:	e6a3      	b.n	800d2d6 <_printf_float+0xb6>
 800d58e:	2301      	movs	r3, #1
 800d590:	4631      	mov	r1, r6
 800d592:	4628      	mov	r0, r5
 800d594:	9206      	str	r2, [sp, #24]
 800d596:	47b8      	blx	r7
 800d598:	3001      	adds	r0, #1
 800d59a:	f43f ae9c 	beq.w	800d2d6 <_printf_float+0xb6>
 800d59e:	9a06      	ldr	r2, [sp, #24]
 800d5a0:	f10b 0b01 	add.w	fp, fp, #1
 800d5a4:	e7bb      	b.n	800d51e <_printf_float+0x2fe>
 800d5a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5aa:	4631      	mov	r1, r6
 800d5ac:	4628      	mov	r0, r5
 800d5ae:	47b8      	blx	r7
 800d5b0:	3001      	adds	r0, #1
 800d5b2:	d1c0      	bne.n	800d536 <_printf_float+0x316>
 800d5b4:	e68f      	b.n	800d2d6 <_printf_float+0xb6>
 800d5b6:	9a06      	ldr	r2, [sp, #24]
 800d5b8:	464b      	mov	r3, r9
 800d5ba:	4442      	add	r2, r8
 800d5bc:	4631      	mov	r1, r6
 800d5be:	4628      	mov	r0, r5
 800d5c0:	47b8      	blx	r7
 800d5c2:	3001      	adds	r0, #1
 800d5c4:	d1c3      	bne.n	800d54e <_printf_float+0x32e>
 800d5c6:	e686      	b.n	800d2d6 <_printf_float+0xb6>
 800d5c8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d5cc:	f1ba 0f01 	cmp.w	sl, #1
 800d5d0:	dc01      	bgt.n	800d5d6 <_printf_float+0x3b6>
 800d5d2:	07db      	lsls	r3, r3, #31
 800d5d4:	d536      	bpl.n	800d644 <_printf_float+0x424>
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	4642      	mov	r2, r8
 800d5da:	4631      	mov	r1, r6
 800d5dc:	4628      	mov	r0, r5
 800d5de:	47b8      	blx	r7
 800d5e0:	3001      	adds	r0, #1
 800d5e2:	f43f ae78 	beq.w	800d2d6 <_printf_float+0xb6>
 800d5e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5ea:	4631      	mov	r1, r6
 800d5ec:	4628      	mov	r0, r5
 800d5ee:	47b8      	blx	r7
 800d5f0:	3001      	adds	r0, #1
 800d5f2:	f43f ae70 	beq.w	800d2d6 <_printf_float+0xb6>
 800d5f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d602:	f7f3 fa89 	bl	8000b18 <__aeabi_dcmpeq>
 800d606:	b9c0      	cbnz	r0, 800d63a <_printf_float+0x41a>
 800d608:	4653      	mov	r3, sl
 800d60a:	f108 0201 	add.w	r2, r8, #1
 800d60e:	4631      	mov	r1, r6
 800d610:	4628      	mov	r0, r5
 800d612:	47b8      	blx	r7
 800d614:	3001      	adds	r0, #1
 800d616:	d10c      	bne.n	800d632 <_printf_float+0x412>
 800d618:	e65d      	b.n	800d2d6 <_printf_float+0xb6>
 800d61a:	2301      	movs	r3, #1
 800d61c:	465a      	mov	r2, fp
 800d61e:	4631      	mov	r1, r6
 800d620:	4628      	mov	r0, r5
 800d622:	47b8      	blx	r7
 800d624:	3001      	adds	r0, #1
 800d626:	f43f ae56 	beq.w	800d2d6 <_printf_float+0xb6>
 800d62a:	f108 0801 	add.w	r8, r8, #1
 800d62e:	45d0      	cmp	r8, sl
 800d630:	dbf3      	blt.n	800d61a <_printf_float+0x3fa>
 800d632:	464b      	mov	r3, r9
 800d634:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d638:	e6df      	b.n	800d3fa <_printf_float+0x1da>
 800d63a:	f04f 0800 	mov.w	r8, #0
 800d63e:	f104 0b1a 	add.w	fp, r4, #26
 800d642:	e7f4      	b.n	800d62e <_printf_float+0x40e>
 800d644:	2301      	movs	r3, #1
 800d646:	4642      	mov	r2, r8
 800d648:	e7e1      	b.n	800d60e <_printf_float+0x3ee>
 800d64a:	2301      	movs	r3, #1
 800d64c:	464a      	mov	r2, r9
 800d64e:	4631      	mov	r1, r6
 800d650:	4628      	mov	r0, r5
 800d652:	47b8      	blx	r7
 800d654:	3001      	adds	r0, #1
 800d656:	f43f ae3e 	beq.w	800d2d6 <_printf_float+0xb6>
 800d65a:	f108 0801 	add.w	r8, r8, #1
 800d65e:	68e3      	ldr	r3, [r4, #12]
 800d660:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d662:	1a5b      	subs	r3, r3, r1
 800d664:	4543      	cmp	r3, r8
 800d666:	dcf0      	bgt.n	800d64a <_printf_float+0x42a>
 800d668:	e6fc      	b.n	800d464 <_printf_float+0x244>
 800d66a:	f04f 0800 	mov.w	r8, #0
 800d66e:	f104 0919 	add.w	r9, r4, #25
 800d672:	e7f4      	b.n	800d65e <_printf_float+0x43e>

0800d674 <_printf_common>:
 800d674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d678:	4616      	mov	r6, r2
 800d67a:	4698      	mov	r8, r3
 800d67c:	688a      	ldr	r2, [r1, #8]
 800d67e:	690b      	ldr	r3, [r1, #16]
 800d680:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d684:	4293      	cmp	r3, r2
 800d686:	bfb8      	it	lt
 800d688:	4613      	movlt	r3, r2
 800d68a:	6033      	str	r3, [r6, #0]
 800d68c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d690:	4607      	mov	r7, r0
 800d692:	460c      	mov	r4, r1
 800d694:	b10a      	cbz	r2, 800d69a <_printf_common+0x26>
 800d696:	3301      	adds	r3, #1
 800d698:	6033      	str	r3, [r6, #0]
 800d69a:	6823      	ldr	r3, [r4, #0]
 800d69c:	0699      	lsls	r1, r3, #26
 800d69e:	bf42      	ittt	mi
 800d6a0:	6833      	ldrmi	r3, [r6, #0]
 800d6a2:	3302      	addmi	r3, #2
 800d6a4:	6033      	strmi	r3, [r6, #0]
 800d6a6:	6825      	ldr	r5, [r4, #0]
 800d6a8:	f015 0506 	ands.w	r5, r5, #6
 800d6ac:	d106      	bne.n	800d6bc <_printf_common+0x48>
 800d6ae:	f104 0a19 	add.w	sl, r4, #25
 800d6b2:	68e3      	ldr	r3, [r4, #12]
 800d6b4:	6832      	ldr	r2, [r6, #0]
 800d6b6:	1a9b      	subs	r3, r3, r2
 800d6b8:	42ab      	cmp	r3, r5
 800d6ba:	dc26      	bgt.n	800d70a <_printf_common+0x96>
 800d6bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d6c0:	6822      	ldr	r2, [r4, #0]
 800d6c2:	3b00      	subs	r3, #0
 800d6c4:	bf18      	it	ne
 800d6c6:	2301      	movne	r3, #1
 800d6c8:	0692      	lsls	r2, r2, #26
 800d6ca:	d42b      	bmi.n	800d724 <_printf_common+0xb0>
 800d6cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d6d0:	4641      	mov	r1, r8
 800d6d2:	4638      	mov	r0, r7
 800d6d4:	47c8      	blx	r9
 800d6d6:	3001      	adds	r0, #1
 800d6d8:	d01e      	beq.n	800d718 <_printf_common+0xa4>
 800d6da:	6823      	ldr	r3, [r4, #0]
 800d6dc:	6922      	ldr	r2, [r4, #16]
 800d6de:	f003 0306 	and.w	r3, r3, #6
 800d6e2:	2b04      	cmp	r3, #4
 800d6e4:	bf02      	ittt	eq
 800d6e6:	68e5      	ldreq	r5, [r4, #12]
 800d6e8:	6833      	ldreq	r3, [r6, #0]
 800d6ea:	1aed      	subeq	r5, r5, r3
 800d6ec:	68a3      	ldr	r3, [r4, #8]
 800d6ee:	bf0c      	ite	eq
 800d6f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d6f4:	2500      	movne	r5, #0
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	bfc4      	itt	gt
 800d6fa:	1a9b      	subgt	r3, r3, r2
 800d6fc:	18ed      	addgt	r5, r5, r3
 800d6fe:	2600      	movs	r6, #0
 800d700:	341a      	adds	r4, #26
 800d702:	42b5      	cmp	r5, r6
 800d704:	d11a      	bne.n	800d73c <_printf_common+0xc8>
 800d706:	2000      	movs	r0, #0
 800d708:	e008      	b.n	800d71c <_printf_common+0xa8>
 800d70a:	2301      	movs	r3, #1
 800d70c:	4652      	mov	r2, sl
 800d70e:	4641      	mov	r1, r8
 800d710:	4638      	mov	r0, r7
 800d712:	47c8      	blx	r9
 800d714:	3001      	adds	r0, #1
 800d716:	d103      	bne.n	800d720 <_printf_common+0xac>
 800d718:	f04f 30ff 	mov.w	r0, #4294967295
 800d71c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d720:	3501      	adds	r5, #1
 800d722:	e7c6      	b.n	800d6b2 <_printf_common+0x3e>
 800d724:	18e1      	adds	r1, r4, r3
 800d726:	1c5a      	adds	r2, r3, #1
 800d728:	2030      	movs	r0, #48	@ 0x30
 800d72a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d72e:	4422      	add	r2, r4
 800d730:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d734:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d738:	3302      	adds	r3, #2
 800d73a:	e7c7      	b.n	800d6cc <_printf_common+0x58>
 800d73c:	2301      	movs	r3, #1
 800d73e:	4622      	mov	r2, r4
 800d740:	4641      	mov	r1, r8
 800d742:	4638      	mov	r0, r7
 800d744:	47c8      	blx	r9
 800d746:	3001      	adds	r0, #1
 800d748:	d0e6      	beq.n	800d718 <_printf_common+0xa4>
 800d74a:	3601      	adds	r6, #1
 800d74c:	e7d9      	b.n	800d702 <_printf_common+0x8e>
	...

0800d750 <_printf_i>:
 800d750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d754:	7e0f      	ldrb	r7, [r1, #24]
 800d756:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d758:	2f78      	cmp	r7, #120	@ 0x78
 800d75a:	4691      	mov	r9, r2
 800d75c:	4680      	mov	r8, r0
 800d75e:	460c      	mov	r4, r1
 800d760:	469a      	mov	sl, r3
 800d762:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d766:	d807      	bhi.n	800d778 <_printf_i+0x28>
 800d768:	2f62      	cmp	r7, #98	@ 0x62
 800d76a:	d80a      	bhi.n	800d782 <_printf_i+0x32>
 800d76c:	2f00      	cmp	r7, #0
 800d76e:	f000 80d1 	beq.w	800d914 <_printf_i+0x1c4>
 800d772:	2f58      	cmp	r7, #88	@ 0x58
 800d774:	f000 80b8 	beq.w	800d8e8 <_printf_i+0x198>
 800d778:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d77c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d780:	e03a      	b.n	800d7f8 <_printf_i+0xa8>
 800d782:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d786:	2b15      	cmp	r3, #21
 800d788:	d8f6      	bhi.n	800d778 <_printf_i+0x28>
 800d78a:	a101      	add	r1, pc, #4	@ (adr r1, 800d790 <_printf_i+0x40>)
 800d78c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d790:	0800d7e9 	.word	0x0800d7e9
 800d794:	0800d7fd 	.word	0x0800d7fd
 800d798:	0800d779 	.word	0x0800d779
 800d79c:	0800d779 	.word	0x0800d779
 800d7a0:	0800d779 	.word	0x0800d779
 800d7a4:	0800d779 	.word	0x0800d779
 800d7a8:	0800d7fd 	.word	0x0800d7fd
 800d7ac:	0800d779 	.word	0x0800d779
 800d7b0:	0800d779 	.word	0x0800d779
 800d7b4:	0800d779 	.word	0x0800d779
 800d7b8:	0800d779 	.word	0x0800d779
 800d7bc:	0800d8fb 	.word	0x0800d8fb
 800d7c0:	0800d827 	.word	0x0800d827
 800d7c4:	0800d8b5 	.word	0x0800d8b5
 800d7c8:	0800d779 	.word	0x0800d779
 800d7cc:	0800d779 	.word	0x0800d779
 800d7d0:	0800d91d 	.word	0x0800d91d
 800d7d4:	0800d779 	.word	0x0800d779
 800d7d8:	0800d827 	.word	0x0800d827
 800d7dc:	0800d779 	.word	0x0800d779
 800d7e0:	0800d779 	.word	0x0800d779
 800d7e4:	0800d8bd 	.word	0x0800d8bd
 800d7e8:	6833      	ldr	r3, [r6, #0]
 800d7ea:	1d1a      	adds	r2, r3, #4
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	6032      	str	r2, [r6, #0]
 800d7f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d7f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	e09c      	b.n	800d936 <_printf_i+0x1e6>
 800d7fc:	6833      	ldr	r3, [r6, #0]
 800d7fe:	6820      	ldr	r0, [r4, #0]
 800d800:	1d19      	adds	r1, r3, #4
 800d802:	6031      	str	r1, [r6, #0]
 800d804:	0606      	lsls	r6, r0, #24
 800d806:	d501      	bpl.n	800d80c <_printf_i+0xbc>
 800d808:	681d      	ldr	r5, [r3, #0]
 800d80a:	e003      	b.n	800d814 <_printf_i+0xc4>
 800d80c:	0645      	lsls	r5, r0, #25
 800d80e:	d5fb      	bpl.n	800d808 <_printf_i+0xb8>
 800d810:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d814:	2d00      	cmp	r5, #0
 800d816:	da03      	bge.n	800d820 <_printf_i+0xd0>
 800d818:	232d      	movs	r3, #45	@ 0x2d
 800d81a:	426d      	negs	r5, r5
 800d81c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d820:	4858      	ldr	r0, [pc, #352]	@ (800d984 <_printf_i+0x234>)
 800d822:	230a      	movs	r3, #10
 800d824:	e011      	b.n	800d84a <_printf_i+0xfa>
 800d826:	6821      	ldr	r1, [r4, #0]
 800d828:	6833      	ldr	r3, [r6, #0]
 800d82a:	0608      	lsls	r0, r1, #24
 800d82c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d830:	d402      	bmi.n	800d838 <_printf_i+0xe8>
 800d832:	0649      	lsls	r1, r1, #25
 800d834:	bf48      	it	mi
 800d836:	b2ad      	uxthmi	r5, r5
 800d838:	2f6f      	cmp	r7, #111	@ 0x6f
 800d83a:	4852      	ldr	r0, [pc, #328]	@ (800d984 <_printf_i+0x234>)
 800d83c:	6033      	str	r3, [r6, #0]
 800d83e:	bf14      	ite	ne
 800d840:	230a      	movne	r3, #10
 800d842:	2308      	moveq	r3, #8
 800d844:	2100      	movs	r1, #0
 800d846:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d84a:	6866      	ldr	r6, [r4, #4]
 800d84c:	60a6      	str	r6, [r4, #8]
 800d84e:	2e00      	cmp	r6, #0
 800d850:	db05      	blt.n	800d85e <_printf_i+0x10e>
 800d852:	6821      	ldr	r1, [r4, #0]
 800d854:	432e      	orrs	r6, r5
 800d856:	f021 0104 	bic.w	r1, r1, #4
 800d85a:	6021      	str	r1, [r4, #0]
 800d85c:	d04b      	beq.n	800d8f6 <_printf_i+0x1a6>
 800d85e:	4616      	mov	r6, r2
 800d860:	fbb5 f1f3 	udiv	r1, r5, r3
 800d864:	fb03 5711 	mls	r7, r3, r1, r5
 800d868:	5dc7      	ldrb	r7, [r0, r7]
 800d86a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d86e:	462f      	mov	r7, r5
 800d870:	42bb      	cmp	r3, r7
 800d872:	460d      	mov	r5, r1
 800d874:	d9f4      	bls.n	800d860 <_printf_i+0x110>
 800d876:	2b08      	cmp	r3, #8
 800d878:	d10b      	bne.n	800d892 <_printf_i+0x142>
 800d87a:	6823      	ldr	r3, [r4, #0]
 800d87c:	07df      	lsls	r7, r3, #31
 800d87e:	d508      	bpl.n	800d892 <_printf_i+0x142>
 800d880:	6923      	ldr	r3, [r4, #16]
 800d882:	6861      	ldr	r1, [r4, #4]
 800d884:	4299      	cmp	r1, r3
 800d886:	bfde      	ittt	le
 800d888:	2330      	movle	r3, #48	@ 0x30
 800d88a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d88e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d892:	1b92      	subs	r2, r2, r6
 800d894:	6122      	str	r2, [r4, #16]
 800d896:	f8cd a000 	str.w	sl, [sp]
 800d89a:	464b      	mov	r3, r9
 800d89c:	aa03      	add	r2, sp, #12
 800d89e:	4621      	mov	r1, r4
 800d8a0:	4640      	mov	r0, r8
 800d8a2:	f7ff fee7 	bl	800d674 <_printf_common>
 800d8a6:	3001      	adds	r0, #1
 800d8a8:	d14a      	bne.n	800d940 <_printf_i+0x1f0>
 800d8aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ae:	b004      	add	sp, #16
 800d8b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8b4:	6823      	ldr	r3, [r4, #0]
 800d8b6:	f043 0320 	orr.w	r3, r3, #32
 800d8ba:	6023      	str	r3, [r4, #0]
 800d8bc:	4832      	ldr	r0, [pc, #200]	@ (800d988 <_printf_i+0x238>)
 800d8be:	2778      	movs	r7, #120	@ 0x78
 800d8c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d8c4:	6823      	ldr	r3, [r4, #0]
 800d8c6:	6831      	ldr	r1, [r6, #0]
 800d8c8:	061f      	lsls	r7, r3, #24
 800d8ca:	f851 5b04 	ldr.w	r5, [r1], #4
 800d8ce:	d402      	bmi.n	800d8d6 <_printf_i+0x186>
 800d8d0:	065f      	lsls	r7, r3, #25
 800d8d2:	bf48      	it	mi
 800d8d4:	b2ad      	uxthmi	r5, r5
 800d8d6:	6031      	str	r1, [r6, #0]
 800d8d8:	07d9      	lsls	r1, r3, #31
 800d8da:	bf44      	itt	mi
 800d8dc:	f043 0320 	orrmi.w	r3, r3, #32
 800d8e0:	6023      	strmi	r3, [r4, #0]
 800d8e2:	b11d      	cbz	r5, 800d8ec <_printf_i+0x19c>
 800d8e4:	2310      	movs	r3, #16
 800d8e6:	e7ad      	b.n	800d844 <_printf_i+0xf4>
 800d8e8:	4826      	ldr	r0, [pc, #152]	@ (800d984 <_printf_i+0x234>)
 800d8ea:	e7e9      	b.n	800d8c0 <_printf_i+0x170>
 800d8ec:	6823      	ldr	r3, [r4, #0]
 800d8ee:	f023 0320 	bic.w	r3, r3, #32
 800d8f2:	6023      	str	r3, [r4, #0]
 800d8f4:	e7f6      	b.n	800d8e4 <_printf_i+0x194>
 800d8f6:	4616      	mov	r6, r2
 800d8f8:	e7bd      	b.n	800d876 <_printf_i+0x126>
 800d8fa:	6833      	ldr	r3, [r6, #0]
 800d8fc:	6825      	ldr	r5, [r4, #0]
 800d8fe:	6961      	ldr	r1, [r4, #20]
 800d900:	1d18      	adds	r0, r3, #4
 800d902:	6030      	str	r0, [r6, #0]
 800d904:	062e      	lsls	r6, r5, #24
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	d501      	bpl.n	800d90e <_printf_i+0x1be>
 800d90a:	6019      	str	r1, [r3, #0]
 800d90c:	e002      	b.n	800d914 <_printf_i+0x1c4>
 800d90e:	0668      	lsls	r0, r5, #25
 800d910:	d5fb      	bpl.n	800d90a <_printf_i+0x1ba>
 800d912:	8019      	strh	r1, [r3, #0]
 800d914:	2300      	movs	r3, #0
 800d916:	6123      	str	r3, [r4, #16]
 800d918:	4616      	mov	r6, r2
 800d91a:	e7bc      	b.n	800d896 <_printf_i+0x146>
 800d91c:	6833      	ldr	r3, [r6, #0]
 800d91e:	1d1a      	adds	r2, r3, #4
 800d920:	6032      	str	r2, [r6, #0]
 800d922:	681e      	ldr	r6, [r3, #0]
 800d924:	6862      	ldr	r2, [r4, #4]
 800d926:	2100      	movs	r1, #0
 800d928:	4630      	mov	r0, r6
 800d92a:	f7f2 fc79 	bl	8000220 <memchr>
 800d92e:	b108      	cbz	r0, 800d934 <_printf_i+0x1e4>
 800d930:	1b80      	subs	r0, r0, r6
 800d932:	6060      	str	r0, [r4, #4]
 800d934:	6863      	ldr	r3, [r4, #4]
 800d936:	6123      	str	r3, [r4, #16]
 800d938:	2300      	movs	r3, #0
 800d93a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d93e:	e7aa      	b.n	800d896 <_printf_i+0x146>
 800d940:	6923      	ldr	r3, [r4, #16]
 800d942:	4632      	mov	r2, r6
 800d944:	4649      	mov	r1, r9
 800d946:	4640      	mov	r0, r8
 800d948:	47d0      	blx	sl
 800d94a:	3001      	adds	r0, #1
 800d94c:	d0ad      	beq.n	800d8aa <_printf_i+0x15a>
 800d94e:	6823      	ldr	r3, [r4, #0]
 800d950:	079b      	lsls	r3, r3, #30
 800d952:	d413      	bmi.n	800d97c <_printf_i+0x22c>
 800d954:	68e0      	ldr	r0, [r4, #12]
 800d956:	9b03      	ldr	r3, [sp, #12]
 800d958:	4298      	cmp	r0, r3
 800d95a:	bfb8      	it	lt
 800d95c:	4618      	movlt	r0, r3
 800d95e:	e7a6      	b.n	800d8ae <_printf_i+0x15e>
 800d960:	2301      	movs	r3, #1
 800d962:	4632      	mov	r2, r6
 800d964:	4649      	mov	r1, r9
 800d966:	4640      	mov	r0, r8
 800d968:	47d0      	blx	sl
 800d96a:	3001      	adds	r0, #1
 800d96c:	d09d      	beq.n	800d8aa <_printf_i+0x15a>
 800d96e:	3501      	adds	r5, #1
 800d970:	68e3      	ldr	r3, [r4, #12]
 800d972:	9903      	ldr	r1, [sp, #12]
 800d974:	1a5b      	subs	r3, r3, r1
 800d976:	42ab      	cmp	r3, r5
 800d978:	dcf2      	bgt.n	800d960 <_printf_i+0x210>
 800d97a:	e7eb      	b.n	800d954 <_printf_i+0x204>
 800d97c:	2500      	movs	r5, #0
 800d97e:	f104 0619 	add.w	r6, r4, #25
 800d982:	e7f5      	b.n	800d970 <_printf_i+0x220>
 800d984:	08011a2f 	.word	0x08011a2f
 800d988:	08011a40 	.word	0x08011a40

0800d98c <_scanf_float>:
 800d98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d990:	b087      	sub	sp, #28
 800d992:	4691      	mov	r9, r2
 800d994:	9303      	str	r3, [sp, #12]
 800d996:	688b      	ldr	r3, [r1, #8]
 800d998:	1e5a      	subs	r2, r3, #1
 800d99a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d99e:	bf81      	itttt	hi
 800d9a0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d9a4:	eb03 0b05 	addhi.w	fp, r3, r5
 800d9a8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d9ac:	608b      	strhi	r3, [r1, #8]
 800d9ae:	680b      	ldr	r3, [r1, #0]
 800d9b0:	460a      	mov	r2, r1
 800d9b2:	f04f 0500 	mov.w	r5, #0
 800d9b6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d9ba:	f842 3b1c 	str.w	r3, [r2], #28
 800d9be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d9c2:	4680      	mov	r8, r0
 800d9c4:	460c      	mov	r4, r1
 800d9c6:	bf98      	it	ls
 800d9c8:	f04f 0b00 	movls.w	fp, #0
 800d9cc:	9201      	str	r2, [sp, #4]
 800d9ce:	4616      	mov	r6, r2
 800d9d0:	46aa      	mov	sl, r5
 800d9d2:	462f      	mov	r7, r5
 800d9d4:	9502      	str	r5, [sp, #8]
 800d9d6:	68a2      	ldr	r2, [r4, #8]
 800d9d8:	b15a      	cbz	r2, 800d9f2 <_scanf_float+0x66>
 800d9da:	f8d9 3000 	ldr.w	r3, [r9]
 800d9de:	781b      	ldrb	r3, [r3, #0]
 800d9e0:	2b4e      	cmp	r3, #78	@ 0x4e
 800d9e2:	d863      	bhi.n	800daac <_scanf_float+0x120>
 800d9e4:	2b40      	cmp	r3, #64	@ 0x40
 800d9e6:	d83b      	bhi.n	800da60 <_scanf_float+0xd4>
 800d9e8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d9ec:	b2c8      	uxtb	r0, r1
 800d9ee:	280e      	cmp	r0, #14
 800d9f0:	d939      	bls.n	800da66 <_scanf_float+0xda>
 800d9f2:	b11f      	cbz	r7, 800d9fc <_scanf_float+0x70>
 800d9f4:	6823      	ldr	r3, [r4, #0]
 800d9f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d9fa:	6023      	str	r3, [r4, #0]
 800d9fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da00:	f1ba 0f01 	cmp.w	sl, #1
 800da04:	f200 8114 	bhi.w	800dc30 <_scanf_float+0x2a4>
 800da08:	9b01      	ldr	r3, [sp, #4]
 800da0a:	429e      	cmp	r6, r3
 800da0c:	f200 8105 	bhi.w	800dc1a <_scanf_float+0x28e>
 800da10:	2001      	movs	r0, #1
 800da12:	b007      	add	sp, #28
 800da14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da18:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800da1c:	2a0d      	cmp	r2, #13
 800da1e:	d8e8      	bhi.n	800d9f2 <_scanf_float+0x66>
 800da20:	a101      	add	r1, pc, #4	@ (adr r1, 800da28 <_scanf_float+0x9c>)
 800da22:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800da26:	bf00      	nop
 800da28:	0800db71 	.word	0x0800db71
 800da2c:	0800d9f3 	.word	0x0800d9f3
 800da30:	0800d9f3 	.word	0x0800d9f3
 800da34:	0800d9f3 	.word	0x0800d9f3
 800da38:	0800dbcd 	.word	0x0800dbcd
 800da3c:	0800dba7 	.word	0x0800dba7
 800da40:	0800d9f3 	.word	0x0800d9f3
 800da44:	0800d9f3 	.word	0x0800d9f3
 800da48:	0800db7f 	.word	0x0800db7f
 800da4c:	0800d9f3 	.word	0x0800d9f3
 800da50:	0800d9f3 	.word	0x0800d9f3
 800da54:	0800d9f3 	.word	0x0800d9f3
 800da58:	0800d9f3 	.word	0x0800d9f3
 800da5c:	0800db3b 	.word	0x0800db3b
 800da60:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800da64:	e7da      	b.n	800da1c <_scanf_float+0x90>
 800da66:	290e      	cmp	r1, #14
 800da68:	d8c3      	bhi.n	800d9f2 <_scanf_float+0x66>
 800da6a:	a001      	add	r0, pc, #4	@ (adr r0, 800da70 <_scanf_float+0xe4>)
 800da6c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800da70:	0800db2b 	.word	0x0800db2b
 800da74:	0800d9f3 	.word	0x0800d9f3
 800da78:	0800db2b 	.word	0x0800db2b
 800da7c:	0800dbbb 	.word	0x0800dbbb
 800da80:	0800d9f3 	.word	0x0800d9f3
 800da84:	0800dacd 	.word	0x0800dacd
 800da88:	0800db11 	.word	0x0800db11
 800da8c:	0800db11 	.word	0x0800db11
 800da90:	0800db11 	.word	0x0800db11
 800da94:	0800db11 	.word	0x0800db11
 800da98:	0800db11 	.word	0x0800db11
 800da9c:	0800db11 	.word	0x0800db11
 800daa0:	0800db11 	.word	0x0800db11
 800daa4:	0800db11 	.word	0x0800db11
 800daa8:	0800db11 	.word	0x0800db11
 800daac:	2b6e      	cmp	r3, #110	@ 0x6e
 800daae:	d809      	bhi.n	800dac4 <_scanf_float+0x138>
 800dab0:	2b60      	cmp	r3, #96	@ 0x60
 800dab2:	d8b1      	bhi.n	800da18 <_scanf_float+0x8c>
 800dab4:	2b54      	cmp	r3, #84	@ 0x54
 800dab6:	d07b      	beq.n	800dbb0 <_scanf_float+0x224>
 800dab8:	2b59      	cmp	r3, #89	@ 0x59
 800daba:	d19a      	bne.n	800d9f2 <_scanf_float+0x66>
 800dabc:	2d07      	cmp	r5, #7
 800dabe:	d198      	bne.n	800d9f2 <_scanf_float+0x66>
 800dac0:	2508      	movs	r5, #8
 800dac2:	e02f      	b.n	800db24 <_scanf_float+0x198>
 800dac4:	2b74      	cmp	r3, #116	@ 0x74
 800dac6:	d073      	beq.n	800dbb0 <_scanf_float+0x224>
 800dac8:	2b79      	cmp	r3, #121	@ 0x79
 800daca:	e7f6      	b.n	800daba <_scanf_float+0x12e>
 800dacc:	6821      	ldr	r1, [r4, #0]
 800dace:	05c8      	lsls	r0, r1, #23
 800dad0:	d51e      	bpl.n	800db10 <_scanf_float+0x184>
 800dad2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800dad6:	6021      	str	r1, [r4, #0]
 800dad8:	3701      	adds	r7, #1
 800dada:	f1bb 0f00 	cmp.w	fp, #0
 800dade:	d003      	beq.n	800dae8 <_scanf_float+0x15c>
 800dae0:	3201      	adds	r2, #1
 800dae2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dae6:	60a2      	str	r2, [r4, #8]
 800dae8:	68a3      	ldr	r3, [r4, #8]
 800daea:	3b01      	subs	r3, #1
 800daec:	60a3      	str	r3, [r4, #8]
 800daee:	6923      	ldr	r3, [r4, #16]
 800daf0:	3301      	adds	r3, #1
 800daf2:	6123      	str	r3, [r4, #16]
 800daf4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800daf8:	3b01      	subs	r3, #1
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	f8c9 3004 	str.w	r3, [r9, #4]
 800db00:	f340 8082 	ble.w	800dc08 <_scanf_float+0x27c>
 800db04:	f8d9 3000 	ldr.w	r3, [r9]
 800db08:	3301      	adds	r3, #1
 800db0a:	f8c9 3000 	str.w	r3, [r9]
 800db0e:	e762      	b.n	800d9d6 <_scanf_float+0x4a>
 800db10:	eb1a 0105 	adds.w	r1, sl, r5
 800db14:	f47f af6d 	bne.w	800d9f2 <_scanf_float+0x66>
 800db18:	6822      	ldr	r2, [r4, #0]
 800db1a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800db1e:	6022      	str	r2, [r4, #0]
 800db20:	460d      	mov	r5, r1
 800db22:	468a      	mov	sl, r1
 800db24:	f806 3b01 	strb.w	r3, [r6], #1
 800db28:	e7de      	b.n	800dae8 <_scanf_float+0x15c>
 800db2a:	6822      	ldr	r2, [r4, #0]
 800db2c:	0610      	lsls	r0, r2, #24
 800db2e:	f57f af60 	bpl.w	800d9f2 <_scanf_float+0x66>
 800db32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800db36:	6022      	str	r2, [r4, #0]
 800db38:	e7f4      	b.n	800db24 <_scanf_float+0x198>
 800db3a:	f1ba 0f00 	cmp.w	sl, #0
 800db3e:	d10c      	bne.n	800db5a <_scanf_float+0x1ce>
 800db40:	b977      	cbnz	r7, 800db60 <_scanf_float+0x1d4>
 800db42:	6822      	ldr	r2, [r4, #0]
 800db44:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800db48:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800db4c:	d108      	bne.n	800db60 <_scanf_float+0x1d4>
 800db4e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800db52:	6022      	str	r2, [r4, #0]
 800db54:	f04f 0a01 	mov.w	sl, #1
 800db58:	e7e4      	b.n	800db24 <_scanf_float+0x198>
 800db5a:	f1ba 0f02 	cmp.w	sl, #2
 800db5e:	d050      	beq.n	800dc02 <_scanf_float+0x276>
 800db60:	2d01      	cmp	r5, #1
 800db62:	d002      	beq.n	800db6a <_scanf_float+0x1de>
 800db64:	2d04      	cmp	r5, #4
 800db66:	f47f af44 	bne.w	800d9f2 <_scanf_float+0x66>
 800db6a:	3501      	adds	r5, #1
 800db6c:	b2ed      	uxtb	r5, r5
 800db6e:	e7d9      	b.n	800db24 <_scanf_float+0x198>
 800db70:	f1ba 0f01 	cmp.w	sl, #1
 800db74:	f47f af3d 	bne.w	800d9f2 <_scanf_float+0x66>
 800db78:	f04f 0a02 	mov.w	sl, #2
 800db7c:	e7d2      	b.n	800db24 <_scanf_float+0x198>
 800db7e:	b975      	cbnz	r5, 800db9e <_scanf_float+0x212>
 800db80:	2f00      	cmp	r7, #0
 800db82:	f47f af37 	bne.w	800d9f4 <_scanf_float+0x68>
 800db86:	6822      	ldr	r2, [r4, #0]
 800db88:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800db8c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800db90:	f040 8103 	bne.w	800dd9a <_scanf_float+0x40e>
 800db94:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800db98:	6022      	str	r2, [r4, #0]
 800db9a:	2501      	movs	r5, #1
 800db9c:	e7c2      	b.n	800db24 <_scanf_float+0x198>
 800db9e:	2d03      	cmp	r5, #3
 800dba0:	d0e3      	beq.n	800db6a <_scanf_float+0x1de>
 800dba2:	2d05      	cmp	r5, #5
 800dba4:	e7df      	b.n	800db66 <_scanf_float+0x1da>
 800dba6:	2d02      	cmp	r5, #2
 800dba8:	f47f af23 	bne.w	800d9f2 <_scanf_float+0x66>
 800dbac:	2503      	movs	r5, #3
 800dbae:	e7b9      	b.n	800db24 <_scanf_float+0x198>
 800dbb0:	2d06      	cmp	r5, #6
 800dbb2:	f47f af1e 	bne.w	800d9f2 <_scanf_float+0x66>
 800dbb6:	2507      	movs	r5, #7
 800dbb8:	e7b4      	b.n	800db24 <_scanf_float+0x198>
 800dbba:	6822      	ldr	r2, [r4, #0]
 800dbbc:	0591      	lsls	r1, r2, #22
 800dbbe:	f57f af18 	bpl.w	800d9f2 <_scanf_float+0x66>
 800dbc2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800dbc6:	6022      	str	r2, [r4, #0]
 800dbc8:	9702      	str	r7, [sp, #8]
 800dbca:	e7ab      	b.n	800db24 <_scanf_float+0x198>
 800dbcc:	6822      	ldr	r2, [r4, #0]
 800dbce:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800dbd2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800dbd6:	d005      	beq.n	800dbe4 <_scanf_float+0x258>
 800dbd8:	0550      	lsls	r0, r2, #21
 800dbda:	f57f af0a 	bpl.w	800d9f2 <_scanf_float+0x66>
 800dbde:	2f00      	cmp	r7, #0
 800dbe0:	f000 80db 	beq.w	800dd9a <_scanf_float+0x40e>
 800dbe4:	0591      	lsls	r1, r2, #22
 800dbe6:	bf58      	it	pl
 800dbe8:	9902      	ldrpl	r1, [sp, #8]
 800dbea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dbee:	bf58      	it	pl
 800dbf0:	1a79      	subpl	r1, r7, r1
 800dbf2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800dbf6:	bf58      	it	pl
 800dbf8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800dbfc:	6022      	str	r2, [r4, #0]
 800dbfe:	2700      	movs	r7, #0
 800dc00:	e790      	b.n	800db24 <_scanf_float+0x198>
 800dc02:	f04f 0a03 	mov.w	sl, #3
 800dc06:	e78d      	b.n	800db24 <_scanf_float+0x198>
 800dc08:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800dc0c:	4649      	mov	r1, r9
 800dc0e:	4640      	mov	r0, r8
 800dc10:	4798      	blx	r3
 800dc12:	2800      	cmp	r0, #0
 800dc14:	f43f aedf 	beq.w	800d9d6 <_scanf_float+0x4a>
 800dc18:	e6eb      	b.n	800d9f2 <_scanf_float+0x66>
 800dc1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dc1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dc22:	464a      	mov	r2, r9
 800dc24:	4640      	mov	r0, r8
 800dc26:	4798      	blx	r3
 800dc28:	6923      	ldr	r3, [r4, #16]
 800dc2a:	3b01      	subs	r3, #1
 800dc2c:	6123      	str	r3, [r4, #16]
 800dc2e:	e6eb      	b.n	800da08 <_scanf_float+0x7c>
 800dc30:	1e6b      	subs	r3, r5, #1
 800dc32:	2b06      	cmp	r3, #6
 800dc34:	d824      	bhi.n	800dc80 <_scanf_float+0x2f4>
 800dc36:	2d02      	cmp	r5, #2
 800dc38:	d836      	bhi.n	800dca8 <_scanf_float+0x31c>
 800dc3a:	9b01      	ldr	r3, [sp, #4]
 800dc3c:	429e      	cmp	r6, r3
 800dc3e:	f67f aee7 	bls.w	800da10 <_scanf_float+0x84>
 800dc42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dc46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dc4a:	464a      	mov	r2, r9
 800dc4c:	4640      	mov	r0, r8
 800dc4e:	4798      	blx	r3
 800dc50:	6923      	ldr	r3, [r4, #16]
 800dc52:	3b01      	subs	r3, #1
 800dc54:	6123      	str	r3, [r4, #16]
 800dc56:	e7f0      	b.n	800dc3a <_scanf_float+0x2ae>
 800dc58:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dc5c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800dc60:	464a      	mov	r2, r9
 800dc62:	4640      	mov	r0, r8
 800dc64:	4798      	blx	r3
 800dc66:	6923      	ldr	r3, [r4, #16]
 800dc68:	3b01      	subs	r3, #1
 800dc6a:	6123      	str	r3, [r4, #16]
 800dc6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dc70:	fa5f fa8a 	uxtb.w	sl, sl
 800dc74:	f1ba 0f02 	cmp.w	sl, #2
 800dc78:	d1ee      	bne.n	800dc58 <_scanf_float+0x2cc>
 800dc7a:	3d03      	subs	r5, #3
 800dc7c:	b2ed      	uxtb	r5, r5
 800dc7e:	1b76      	subs	r6, r6, r5
 800dc80:	6823      	ldr	r3, [r4, #0]
 800dc82:	05da      	lsls	r2, r3, #23
 800dc84:	d530      	bpl.n	800dce8 <_scanf_float+0x35c>
 800dc86:	055b      	lsls	r3, r3, #21
 800dc88:	d511      	bpl.n	800dcae <_scanf_float+0x322>
 800dc8a:	9b01      	ldr	r3, [sp, #4]
 800dc8c:	429e      	cmp	r6, r3
 800dc8e:	f67f aebf 	bls.w	800da10 <_scanf_float+0x84>
 800dc92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dc96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dc9a:	464a      	mov	r2, r9
 800dc9c:	4640      	mov	r0, r8
 800dc9e:	4798      	blx	r3
 800dca0:	6923      	ldr	r3, [r4, #16]
 800dca2:	3b01      	subs	r3, #1
 800dca4:	6123      	str	r3, [r4, #16]
 800dca6:	e7f0      	b.n	800dc8a <_scanf_float+0x2fe>
 800dca8:	46aa      	mov	sl, r5
 800dcaa:	46b3      	mov	fp, r6
 800dcac:	e7de      	b.n	800dc6c <_scanf_float+0x2e0>
 800dcae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dcb2:	6923      	ldr	r3, [r4, #16]
 800dcb4:	2965      	cmp	r1, #101	@ 0x65
 800dcb6:	f103 33ff 	add.w	r3, r3, #4294967295
 800dcba:	f106 35ff 	add.w	r5, r6, #4294967295
 800dcbe:	6123      	str	r3, [r4, #16]
 800dcc0:	d00c      	beq.n	800dcdc <_scanf_float+0x350>
 800dcc2:	2945      	cmp	r1, #69	@ 0x45
 800dcc4:	d00a      	beq.n	800dcdc <_scanf_float+0x350>
 800dcc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dcca:	464a      	mov	r2, r9
 800dccc:	4640      	mov	r0, r8
 800dcce:	4798      	blx	r3
 800dcd0:	6923      	ldr	r3, [r4, #16]
 800dcd2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800dcd6:	3b01      	subs	r3, #1
 800dcd8:	1eb5      	subs	r5, r6, #2
 800dcda:	6123      	str	r3, [r4, #16]
 800dcdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dce0:	464a      	mov	r2, r9
 800dce2:	4640      	mov	r0, r8
 800dce4:	4798      	blx	r3
 800dce6:	462e      	mov	r6, r5
 800dce8:	6822      	ldr	r2, [r4, #0]
 800dcea:	f012 0210 	ands.w	r2, r2, #16
 800dcee:	d001      	beq.n	800dcf4 <_scanf_float+0x368>
 800dcf0:	2000      	movs	r0, #0
 800dcf2:	e68e      	b.n	800da12 <_scanf_float+0x86>
 800dcf4:	7032      	strb	r2, [r6, #0]
 800dcf6:	6823      	ldr	r3, [r4, #0]
 800dcf8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800dcfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dd00:	d125      	bne.n	800dd4e <_scanf_float+0x3c2>
 800dd02:	9b02      	ldr	r3, [sp, #8]
 800dd04:	429f      	cmp	r7, r3
 800dd06:	d00a      	beq.n	800dd1e <_scanf_float+0x392>
 800dd08:	1bda      	subs	r2, r3, r7
 800dd0a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800dd0e:	429e      	cmp	r6, r3
 800dd10:	bf28      	it	cs
 800dd12:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800dd16:	4922      	ldr	r1, [pc, #136]	@ (800dda0 <_scanf_float+0x414>)
 800dd18:	4630      	mov	r0, r6
 800dd1a:	f000 f919 	bl	800df50 <siprintf>
 800dd1e:	9901      	ldr	r1, [sp, #4]
 800dd20:	2200      	movs	r2, #0
 800dd22:	4640      	mov	r0, r8
 800dd24:	f002 fc14 	bl	8010550 <_strtod_r>
 800dd28:	9b03      	ldr	r3, [sp, #12]
 800dd2a:	6821      	ldr	r1, [r4, #0]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f011 0f02 	tst.w	r1, #2
 800dd32:	ec57 6b10 	vmov	r6, r7, d0
 800dd36:	f103 0204 	add.w	r2, r3, #4
 800dd3a:	d015      	beq.n	800dd68 <_scanf_float+0x3dc>
 800dd3c:	9903      	ldr	r1, [sp, #12]
 800dd3e:	600a      	str	r2, [r1, #0]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	e9c3 6700 	strd	r6, r7, [r3]
 800dd46:	68e3      	ldr	r3, [r4, #12]
 800dd48:	3301      	adds	r3, #1
 800dd4a:	60e3      	str	r3, [r4, #12]
 800dd4c:	e7d0      	b.n	800dcf0 <_scanf_float+0x364>
 800dd4e:	9b04      	ldr	r3, [sp, #16]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d0e4      	beq.n	800dd1e <_scanf_float+0x392>
 800dd54:	9905      	ldr	r1, [sp, #20]
 800dd56:	230a      	movs	r3, #10
 800dd58:	3101      	adds	r1, #1
 800dd5a:	4640      	mov	r0, r8
 800dd5c:	f002 fc78 	bl	8010650 <_strtol_r>
 800dd60:	9b04      	ldr	r3, [sp, #16]
 800dd62:	9e05      	ldr	r6, [sp, #20]
 800dd64:	1ac2      	subs	r2, r0, r3
 800dd66:	e7d0      	b.n	800dd0a <_scanf_float+0x37e>
 800dd68:	f011 0f04 	tst.w	r1, #4
 800dd6c:	9903      	ldr	r1, [sp, #12]
 800dd6e:	600a      	str	r2, [r1, #0]
 800dd70:	d1e6      	bne.n	800dd40 <_scanf_float+0x3b4>
 800dd72:	681d      	ldr	r5, [r3, #0]
 800dd74:	4632      	mov	r2, r6
 800dd76:	463b      	mov	r3, r7
 800dd78:	4630      	mov	r0, r6
 800dd7a:	4639      	mov	r1, r7
 800dd7c:	f7f2 fefe 	bl	8000b7c <__aeabi_dcmpun>
 800dd80:	b128      	cbz	r0, 800dd8e <_scanf_float+0x402>
 800dd82:	4808      	ldr	r0, [pc, #32]	@ (800dda4 <_scanf_float+0x418>)
 800dd84:	f000 f9d8 	bl	800e138 <nanf>
 800dd88:	ed85 0a00 	vstr	s0, [r5]
 800dd8c:	e7db      	b.n	800dd46 <_scanf_float+0x3ba>
 800dd8e:	4630      	mov	r0, r6
 800dd90:	4639      	mov	r1, r7
 800dd92:	f7f2 ff51 	bl	8000c38 <__aeabi_d2f>
 800dd96:	6028      	str	r0, [r5, #0]
 800dd98:	e7d5      	b.n	800dd46 <_scanf_float+0x3ba>
 800dd9a:	2700      	movs	r7, #0
 800dd9c:	e62e      	b.n	800d9fc <_scanf_float+0x70>
 800dd9e:	bf00      	nop
 800dda0:	08011a51 	.word	0x08011a51
 800dda4:	08011b92 	.word	0x08011b92

0800dda8 <std>:
 800dda8:	2300      	movs	r3, #0
 800ddaa:	b510      	push	{r4, lr}
 800ddac:	4604      	mov	r4, r0
 800ddae:	e9c0 3300 	strd	r3, r3, [r0]
 800ddb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ddb6:	6083      	str	r3, [r0, #8]
 800ddb8:	8181      	strh	r1, [r0, #12]
 800ddba:	6643      	str	r3, [r0, #100]	@ 0x64
 800ddbc:	81c2      	strh	r2, [r0, #14]
 800ddbe:	6183      	str	r3, [r0, #24]
 800ddc0:	4619      	mov	r1, r3
 800ddc2:	2208      	movs	r2, #8
 800ddc4:	305c      	adds	r0, #92	@ 0x5c
 800ddc6:	f000 f928 	bl	800e01a <memset>
 800ddca:	4b0d      	ldr	r3, [pc, #52]	@ (800de00 <std+0x58>)
 800ddcc:	6263      	str	r3, [r4, #36]	@ 0x24
 800ddce:	4b0d      	ldr	r3, [pc, #52]	@ (800de04 <std+0x5c>)
 800ddd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ddd2:	4b0d      	ldr	r3, [pc, #52]	@ (800de08 <std+0x60>)
 800ddd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ddd6:	4b0d      	ldr	r3, [pc, #52]	@ (800de0c <std+0x64>)
 800ddd8:	6323      	str	r3, [r4, #48]	@ 0x30
 800ddda:	4b0d      	ldr	r3, [pc, #52]	@ (800de10 <std+0x68>)
 800dddc:	6224      	str	r4, [r4, #32]
 800ddde:	429c      	cmp	r4, r3
 800dde0:	d006      	beq.n	800ddf0 <std+0x48>
 800dde2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dde6:	4294      	cmp	r4, r2
 800dde8:	d002      	beq.n	800ddf0 <std+0x48>
 800ddea:	33d0      	adds	r3, #208	@ 0xd0
 800ddec:	429c      	cmp	r4, r3
 800ddee:	d105      	bne.n	800ddfc <std+0x54>
 800ddf0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ddf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddf8:	f000 b98c 	b.w	800e114 <__retarget_lock_init_recursive>
 800ddfc:	bd10      	pop	{r4, pc}
 800ddfe:	bf00      	nop
 800de00:	0800df95 	.word	0x0800df95
 800de04:	0800dfb7 	.word	0x0800dfb7
 800de08:	0800dfef 	.word	0x0800dfef
 800de0c:	0800e013 	.word	0x0800e013
 800de10:	2000213c 	.word	0x2000213c

0800de14 <stdio_exit_handler>:
 800de14:	4a02      	ldr	r2, [pc, #8]	@ (800de20 <stdio_exit_handler+0xc>)
 800de16:	4903      	ldr	r1, [pc, #12]	@ (800de24 <stdio_exit_handler+0x10>)
 800de18:	4803      	ldr	r0, [pc, #12]	@ (800de28 <stdio_exit_handler+0x14>)
 800de1a:	f000 b87b 	b.w	800df14 <_fwalk_sglue>
 800de1e:	bf00      	nop
 800de20:	20000184 	.word	0x20000184
 800de24:	08010c91 	.word	0x08010c91
 800de28:	20000194 	.word	0x20000194

0800de2c <cleanup_stdio>:
 800de2c:	6841      	ldr	r1, [r0, #4]
 800de2e:	4b0c      	ldr	r3, [pc, #48]	@ (800de60 <cleanup_stdio+0x34>)
 800de30:	4299      	cmp	r1, r3
 800de32:	b510      	push	{r4, lr}
 800de34:	4604      	mov	r4, r0
 800de36:	d001      	beq.n	800de3c <cleanup_stdio+0x10>
 800de38:	f002 ff2a 	bl	8010c90 <_fflush_r>
 800de3c:	68a1      	ldr	r1, [r4, #8]
 800de3e:	4b09      	ldr	r3, [pc, #36]	@ (800de64 <cleanup_stdio+0x38>)
 800de40:	4299      	cmp	r1, r3
 800de42:	d002      	beq.n	800de4a <cleanup_stdio+0x1e>
 800de44:	4620      	mov	r0, r4
 800de46:	f002 ff23 	bl	8010c90 <_fflush_r>
 800de4a:	68e1      	ldr	r1, [r4, #12]
 800de4c:	4b06      	ldr	r3, [pc, #24]	@ (800de68 <cleanup_stdio+0x3c>)
 800de4e:	4299      	cmp	r1, r3
 800de50:	d004      	beq.n	800de5c <cleanup_stdio+0x30>
 800de52:	4620      	mov	r0, r4
 800de54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de58:	f002 bf1a 	b.w	8010c90 <_fflush_r>
 800de5c:	bd10      	pop	{r4, pc}
 800de5e:	bf00      	nop
 800de60:	2000213c 	.word	0x2000213c
 800de64:	200021a4 	.word	0x200021a4
 800de68:	2000220c 	.word	0x2000220c

0800de6c <global_stdio_init.part.0>:
 800de6c:	b510      	push	{r4, lr}
 800de6e:	4b0b      	ldr	r3, [pc, #44]	@ (800de9c <global_stdio_init.part.0+0x30>)
 800de70:	4c0b      	ldr	r4, [pc, #44]	@ (800dea0 <global_stdio_init.part.0+0x34>)
 800de72:	4a0c      	ldr	r2, [pc, #48]	@ (800dea4 <global_stdio_init.part.0+0x38>)
 800de74:	601a      	str	r2, [r3, #0]
 800de76:	4620      	mov	r0, r4
 800de78:	2200      	movs	r2, #0
 800de7a:	2104      	movs	r1, #4
 800de7c:	f7ff ff94 	bl	800dda8 <std>
 800de80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800de84:	2201      	movs	r2, #1
 800de86:	2109      	movs	r1, #9
 800de88:	f7ff ff8e 	bl	800dda8 <std>
 800de8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800de90:	2202      	movs	r2, #2
 800de92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de96:	2112      	movs	r1, #18
 800de98:	f7ff bf86 	b.w	800dda8 <std>
 800de9c:	20002274 	.word	0x20002274
 800dea0:	2000213c 	.word	0x2000213c
 800dea4:	0800de15 	.word	0x0800de15

0800dea8 <__sfp_lock_acquire>:
 800dea8:	4801      	ldr	r0, [pc, #4]	@ (800deb0 <__sfp_lock_acquire+0x8>)
 800deaa:	f000 b934 	b.w	800e116 <__retarget_lock_acquire_recursive>
 800deae:	bf00      	nop
 800deb0:	2000227d 	.word	0x2000227d

0800deb4 <__sfp_lock_release>:
 800deb4:	4801      	ldr	r0, [pc, #4]	@ (800debc <__sfp_lock_release+0x8>)
 800deb6:	f000 b92f 	b.w	800e118 <__retarget_lock_release_recursive>
 800deba:	bf00      	nop
 800debc:	2000227d 	.word	0x2000227d

0800dec0 <__sinit>:
 800dec0:	b510      	push	{r4, lr}
 800dec2:	4604      	mov	r4, r0
 800dec4:	f7ff fff0 	bl	800dea8 <__sfp_lock_acquire>
 800dec8:	6a23      	ldr	r3, [r4, #32]
 800deca:	b11b      	cbz	r3, 800ded4 <__sinit+0x14>
 800decc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ded0:	f7ff bff0 	b.w	800deb4 <__sfp_lock_release>
 800ded4:	4b04      	ldr	r3, [pc, #16]	@ (800dee8 <__sinit+0x28>)
 800ded6:	6223      	str	r3, [r4, #32]
 800ded8:	4b04      	ldr	r3, [pc, #16]	@ (800deec <__sinit+0x2c>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d1f5      	bne.n	800decc <__sinit+0xc>
 800dee0:	f7ff ffc4 	bl	800de6c <global_stdio_init.part.0>
 800dee4:	e7f2      	b.n	800decc <__sinit+0xc>
 800dee6:	bf00      	nop
 800dee8:	0800de2d 	.word	0x0800de2d
 800deec:	20002274 	.word	0x20002274

0800def0 <fiprintf>:
 800def0:	b40e      	push	{r1, r2, r3}
 800def2:	b503      	push	{r0, r1, lr}
 800def4:	4601      	mov	r1, r0
 800def6:	ab03      	add	r3, sp, #12
 800def8:	4805      	ldr	r0, [pc, #20]	@ (800df10 <fiprintf+0x20>)
 800defa:	f853 2b04 	ldr.w	r2, [r3], #4
 800defe:	6800      	ldr	r0, [r0, #0]
 800df00:	9301      	str	r3, [sp, #4]
 800df02:	f002 fd29 	bl	8010958 <_vfiprintf_r>
 800df06:	b002      	add	sp, #8
 800df08:	f85d eb04 	ldr.w	lr, [sp], #4
 800df0c:	b003      	add	sp, #12
 800df0e:	4770      	bx	lr
 800df10:	20000190 	.word	0x20000190

0800df14 <_fwalk_sglue>:
 800df14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df18:	4607      	mov	r7, r0
 800df1a:	4688      	mov	r8, r1
 800df1c:	4614      	mov	r4, r2
 800df1e:	2600      	movs	r6, #0
 800df20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800df24:	f1b9 0901 	subs.w	r9, r9, #1
 800df28:	d505      	bpl.n	800df36 <_fwalk_sglue+0x22>
 800df2a:	6824      	ldr	r4, [r4, #0]
 800df2c:	2c00      	cmp	r4, #0
 800df2e:	d1f7      	bne.n	800df20 <_fwalk_sglue+0xc>
 800df30:	4630      	mov	r0, r6
 800df32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df36:	89ab      	ldrh	r3, [r5, #12]
 800df38:	2b01      	cmp	r3, #1
 800df3a:	d907      	bls.n	800df4c <_fwalk_sglue+0x38>
 800df3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800df40:	3301      	adds	r3, #1
 800df42:	d003      	beq.n	800df4c <_fwalk_sglue+0x38>
 800df44:	4629      	mov	r1, r5
 800df46:	4638      	mov	r0, r7
 800df48:	47c0      	blx	r8
 800df4a:	4306      	orrs	r6, r0
 800df4c:	3568      	adds	r5, #104	@ 0x68
 800df4e:	e7e9      	b.n	800df24 <_fwalk_sglue+0x10>

0800df50 <siprintf>:
 800df50:	b40e      	push	{r1, r2, r3}
 800df52:	b510      	push	{r4, lr}
 800df54:	b09d      	sub	sp, #116	@ 0x74
 800df56:	ab1f      	add	r3, sp, #124	@ 0x7c
 800df58:	9002      	str	r0, [sp, #8]
 800df5a:	9006      	str	r0, [sp, #24]
 800df5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800df60:	480a      	ldr	r0, [pc, #40]	@ (800df8c <siprintf+0x3c>)
 800df62:	9107      	str	r1, [sp, #28]
 800df64:	9104      	str	r1, [sp, #16]
 800df66:	490a      	ldr	r1, [pc, #40]	@ (800df90 <siprintf+0x40>)
 800df68:	f853 2b04 	ldr.w	r2, [r3], #4
 800df6c:	9105      	str	r1, [sp, #20]
 800df6e:	2400      	movs	r4, #0
 800df70:	a902      	add	r1, sp, #8
 800df72:	6800      	ldr	r0, [r0, #0]
 800df74:	9301      	str	r3, [sp, #4]
 800df76:	941b      	str	r4, [sp, #108]	@ 0x6c
 800df78:	f002 fbc8 	bl	801070c <_svfiprintf_r>
 800df7c:	9b02      	ldr	r3, [sp, #8]
 800df7e:	701c      	strb	r4, [r3, #0]
 800df80:	b01d      	add	sp, #116	@ 0x74
 800df82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df86:	b003      	add	sp, #12
 800df88:	4770      	bx	lr
 800df8a:	bf00      	nop
 800df8c:	20000190 	.word	0x20000190
 800df90:	ffff0208 	.word	0xffff0208

0800df94 <__sread>:
 800df94:	b510      	push	{r4, lr}
 800df96:	460c      	mov	r4, r1
 800df98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df9c:	f000 f86c 	bl	800e078 <_read_r>
 800dfa0:	2800      	cmp	r0, #0
 800dfa2:	bfab      	itete	ge
 800dfa4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dfa6:	89a3      	ldrhlt	r3, [r4, #12]
 800dfa8:	181b      	addge	r3, r3, r0
 800dfaa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dfae:	bfac      	ite	ge
 800dfb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dfb2:	81a3      	strhlt	r3, [r4, #12]
 800dfb4:	bd10      	pop	{r4, pc}

0800dfb6 <__swrite>:
 800dfb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfba:	461f      	mov	r7, r3
 800dfbc:	898b      	ldrh	r3, [r1, #12]
 800dfbe:	05db      	lsls	r3, r3, #23
 800dfc0:	4605      	mov	r5, r0
 800dfc2:	460c      	mov	r4, r1
 800dfc4:	4616      	mov	r6, r2
 800dfc6:	d505      	bpl.n	800dfd4 <__swrite+0x1e>
 800dfc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfcc:	2302      	movs	r3, #2
 800dfce:	2200      	movs	r2, #0
 800dfd0:	f000 f840 	bl	800e054 <_lseek_r>
 800dfd4:	89a3      	ldrh	r3, [r4, #12]
 800dfd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dfda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dfde:	81a3      	strh	r3, [r4, #12]
 800dfe0:	4632      	mov	r2, r6
 800dfe2:	463b      	mov	r3, r7
 800dfe4:	4628      	mov	r0, r5
 800dfe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dfea:	f000 b857 	b.w	800e09c <_write_r>

0800dfee <__sseek>:
 800dfee:	b510      	push	{r4, lr}
 800dff0:	460c      	mov	r4, r1
 800dff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dff6:	f000 f82d 	bl	800e054 <_lseek_r>
 800dffa:	1c43      	adds	r3, r0, #1
 800dffc:	89a3      	ldrh	r3, [r4, #12]
 800dffe:	bf15      	itete	ne
 800e000:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e002:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e006:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e00a:	81a3      	strheq	r3, [r4, #12]
 800e00c:	bf18      	it	ne
 800e00e:	81a3      	strhne	r3, [r4, #12]
 800e010:	bd10      	pop	{r4, pc}

0800e012 <__sclose>:
 800e012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e016:	f000 b80d 	b.w	800e034 <_close_r>

0800e01a <memset>:
 800e01a:	4402      	add	r2, r0
 800e01c:	4603      	mov	r3, r0
 800e01e:	4293      	cmp	r3, r2
 800e020:	d100      	bne.n	800e024 <memset+0xa>
 800e022:	4770      	bx	lr
 800e024:	f803 1b01 	strb.w	r1, [r3], #1
 800e028:	e7f9      	b.n	800e01e <memset+0x4>
	...

0800e02c <_localeconv_r>:
 800e02c:	4800      	ldr	r0, [pc, #0]	@ (800e030 <_localeconv_r+0x4>)
 800e02e:	4770      	bx	lr
 800e030:	200002d0 	.word	0x200002d0

0800e034 <_close_r>:
 800e034:	b538      	push	{r3, r4, r5, lr}
 800e036:	4d06      	ldr	r5, [pc, #24]	@ (800e050 <_close_r+0x1c>)
 800e038:	2300      	movs	r3, #0
 800e03a:	4604      	mov	r4, r0
 800e03c:	4608      	mov	r0, r1
 800e03e:	602b      	str	r3, [r5, #0]
 800e040:	f7f4 fdf4 	bl	8002c2c <_close>
 800e044:	1c43      	adds	r3, r0, #1
 800e046:	d102      	bne.n	800e04e <_close_r+0x1a>
 800e048:	682b      	ldr	r3, [r5, #0]
 800e04a:	b103      	cbz	r3, 800e04e <_close_r+0x1a>
 800e04c:	6023      	str	r3, [r4, #0]
 800e04e:	bd38      	pop	{r3, r4, r5, pc}
 800e050:	20002278 	.word	0x20002278

0800e054 <_lseek_r>:
 800e054:	b538      	push	{r3, r4, r5, lr}
 800e056:	4d07      	ldr	r5, [pc, #28]	@ (800e074 <_lseek_r+0x20>)
 800e058:	4604      	mov	r4, r0
 800e05a:	4608      	mov	r0, r1
 800e05c:	4611      	mov	r1, r2
 800e05e:	2200      	movs	r2, #0
 800e060:	602a      	str	r2, [r5, #0]
 800e062:	461a      	mov	r2, r3
 800e064:	f7f4 fe09 	bl	8002c7a <_lseek>
 800e068:	1c43      	adds	r3, r0, #1
 800e06a:	d102      	bne.n	800e072 <_lseek_r+0x1e>
 800e06c:	682b      	ldr	r3, [r5, #0]
 800e06e:	b103      	cbz	r3, 800e072 <_lseek_r+0x1e>
 800e070:	6023      	str	r3, [r4, #0]
 800e072:	bd38      	pop	{r3, r4, r5, pc}
 800e074:	20002278 	.word	0x20002278

0800e078 <_read_r>:
 800e078:	b538      	push	{r3, r4, r5, lr}
 800e07a:	4d07      	ldr	r5, [pc, #28]	@ (800e098 <_read_r+0x20>)
 800e07c:	4604      	mov	r4, r0
 800e07e:	4608      	mov	r0, r1
 800e080:	4611      	mov	r1, r2
 800e082:	2200      	movs	r2, #0
 800e084:	602a      	str	r2, [r5, #0]
 800e086:	461a      	mov	r2, r3
 800e088:	f7f4 fd97 	bl	8002bba <_read>
 800e08c:	1c43      	adds	r3, r0, #1
 800e08e:	d102      	bne.n	800e096 <_read_r+0x1e>
 800e090:	682b      	ldr	r3, [r5, #0]
 800e092:	b103      	cbz	r3, 800e096 <_read_r+0x1e>
 800e094:	6023      	str	r3, [r4, #0]
 800e096:	bd38      	pop	{r3, r4, r5, pc}
 800e098:	20002278 	.word	0x20002278

0800e09c <_write_r>:
 800e09c:	b538      	push	{r3, r4, r5, lr}
 800e09e:	4d07      	ldr	r5, [pc, #28]	@ (800e0bc <_write_r+0x20>)
 800e0a0:	4604      	mov	r4, r0
 800e0a2:	4608      	mov	r0, r1
 800e0a4:	4611      	mov	r1, r2
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	602a      	str	r2, [r5, #0]
 800e0aa:	461a      	mov	r2, r3
 800e0ac:	f7f4 fda2 	bl	8002bf4 <_write>
 800e0b0:	1c43      	adds	r3, r0, #1
 800e0b2:	d102      	bne.n	800e0ba <_write_r+0x1e>
 800e0b4:	682b      	ldr	r3, [r5, #0]
 800e0b6:	b103      	cbz	r3, 800e0ba <_write_r+0x1e>
 800e0b8:	6023      	str	r3, [r4, #0]
 800e0ba:	bd38      	pop	{r3, r4, r5, pc}
 800e0bc:	20002278 	.word	0x20002278

0800e0c0 <__errno>:
 800e0c0:	4b01      	ldr	r3, [pc, #4]	@ (800e0c8 <__errno+0x8>)
 800e0c2:	6818      	ldr	r0, [r3, #0]
 800e0c4:	4770      	bx	lr
 800e0c6:	bf00      	nop
 800e0c8:	20000190 	.word	0x20000190

0800e0cc <__libc_init_array>:
 800e0cc:	b570      	push	{r4, r5, r6, lr}
 800e0ce:	4d0d      	ldr	r5, [pc, #52]	@ (800e104 <__libc_init_array+0x38>)
 800e0d0:	4c0d      	ldr	r4, [pc, #52]	@ (800e108 <__libc_init_array+0x3c>)
 800e0d2:	1b64      	subs	r4, r4, r5
 800e0d4:	10a4      	asrs	r4, r4, #2
 800e0d6:	2600      	movs	r6, #0
 800e0d8:	42a6      	cmp	r6, r4
 800e0da:	d109      	bne.n	800e0f0 <__libc_init_array+0x24>
 800e0dc:	4d0b      	ldr	r5, [pc, #44]	@ (800e10c <__libc_init_array+0x40>)
 800e0de:	4c0c      	ldr	r4, [pc, #48]	@ (800e110 <__libc_init_array+0x44>)
 800e0e0:	f003 fb66 	bl	80117b0 <_init>
 800e0e4:	1b64      	subs	r4, r4, r5
 800e0e6:	10a4      	asrs	r4, r4, #2
 800e0e8:	2600      	movs	r6, #0
 800e0ea:	42a6      	cmp	r6, r4
 800e0ec:	d105      	bne.n	800e0fa <__libc_init_array+0x2e>
 800e0ee:	bd70      	pop	{r4, r5, r6, pc}
 800e0f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0f4:	4798      	blx	r3
 800e0f6:	3601      	adds	r6, #1
 800e0f8:	e7ee      	b.n	800e0d8 <__libc_init_array+0xc>
 800e0fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0fe:	4798      	blx	r3
 800e100:	3601      	adds	r6, #1
 800e102:	e7f2      	b.n	800e0ea <__libc_init_array+0x1e>
 800e104:	08011d48 	.word	0x08011d48
 800e108:	08011d48 	.word	0x08011d48
 800e10c:	08011d48 	.word	0x08011d48
 800e110:	08011d4c 	.word	0x08011d4c

0800e114 <__retarget_lock_init_recursive>:
 800e114:	4770      	bx	lr

0800e116 <__retarget_lock_acquire_recursive>:
 800e116:	4770      	bx	lr

0800e118 <__retarget_lock_release_recursive>:
 800e118:	4770      	bx	lr

0800e11a <memcpy>:
 800e11a:	440a      	add	r2, r1
 800e11c:	4291      	cmp	r1, r2
 800e11e:	f100 33ff 	add.w	r3, r0, #4294967295
 800e122:	d100      	bne.n	800e126 <memcpy+0xc>
 800e124:	4770      	bx	lr
 800e126:	b510      	push	{r4, lr}
 800e128:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e12c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e130:	4291      	cmp	r1, r2
 800e132:	d1f9      	bne.n	800e128 <memcpy+0xe>
 800e134:	bd10      	pop	{r4, pc}
	...

0800e138 <nanf>:
 800e138:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e140 <nanf+0x8>
 800e13c:	4770      	bx	lr
 800e13e:	bf00      	nop
 800e140:	7fc00000 	.word	0x7fc00000

0800e144 <quorem>:
 800e144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e148:	6903      	ldr	r3, [r0, #16]
 800e14a:	690c      	ldr	r4, [r1, #16]
 800e14c:	42a3      	cmp	r3, r4
 800e14e:	4607      	mov	r7, r0
 800e150:	db7e      	blt.n	800e250 <quorem+0x10c>
 800e152:	3c01      	subs	r4, #1
 800e154:	f101 0814 	add.w	r8, r1, #20
 800e158:	00a3      	lsls	r3, r4, #2
 800e15a:	f100 0514 	add.w	r5, r0, #20
 800e15e:	9300      	str	r3, [sp, #0]
 800e160:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e164:	9301      	str	r3, [sp, #4]
 800e166:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e16a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e16e:	3301      	adds	r3, #1
 800e170:	429a      	cmp	r2, r3
 800e172:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e176:	fbb2 f6f3 	udiv	r6, r2, r3
 800e17a:	d32e      	bcc.n	800e1da <quorem+0x96>
 800e17c:	f04f 0a00 	mov.w	sl, #0
 800e180:	46c4      	mov	ip, r8
 800e182:	46ae      	mov	lr, r5
 800e184:	46d3      	mov	fp, sl
 800e186:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e18a:	b298      	uxth	r0, r3
 800e18c:	fb06 a000 	mla	r0, r6, r0, sl
 800e190:	0c02      	lsrs	r2, r0, #16
 800e192:	0c1b      	lsrs	r3, r3, #16
 800e194:	fb06 2303 	mla	r3, r6, r3, r2
 800e198:	f8de 2000 	ldr.w	r2, [lr]
 800e19c:	b280      	uxth	r0, r0
 800e19e:	b292      	uxth	r2, r2
 800e1a0:	1a12      	subs	r2, r2, r0
 800e1a2:	445a      	add	r2, fp
 800e1a4:	f8de 0000 	ldr.w	r0, [lr]
 800e1a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e1ac:	b29b      	uxth	r3, r3
 800e1ae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e1b2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e1b6:	b292      	uxth	r2, r2
 800e1b8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e1bc:	45e1      	cmp	r9, ip
 800e1be:	f84e 2b04 	str.w	r2, [lr], #4
 800e1c2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e1c6:	d2de      	bcs.n	800e186 <quorem+0x42>
 800e1c8:	9b00      	ldr	r3, [sp, #0]
 800e1ca:	58eb      	ldr	r3, [r5, r3]
 800e1cc:	b92b      	cbnz	r3, 800e1da <quorem+0x96>
 800e1ce:	9b01      	ldr	r3, [sp, #4]
 800e1d0:	3b04      	subs	r3, #4
 800e1d2:	429d      	cmp	r5, r3
 800e1d4:	461a      	mov	r2, r3
 800e1d6:	d32f      	bcc.n	800e238 <quorem+0xf4>
 800e1d8:	613c      	str	r4, [r7, #16]
 800e1da:	4638      	mov	r0, r7
 800e1dc:	f001 f9c8 	bl	800f570 <__mcmp>
 800e1e0:	2800      	cmp	r0, #0
 800e1e2:	db25      	blt.n	800e230 <quorem+0xec>
 800e1e4:	4629      	mov	r1, r5
 800e1e6:	2000      	movs	r0, #0
 800e1e8:	f858 2b04 	ldr.w	r2, [r8], #4
 800e1ec:	f8d1 c000 	ldr.w	ip, [r1]
 800e1f0:	fa1f fe82 	uxth.w	lr, r2
 800e1f4:	fa1f f38c 	uxth.w	r3, ip
 800e1f8:	eba3 030e 	sub.w	r3, r3, lr
 800e1fc:	4403      	add	r3, r0
 800e1fe:	0c12      	lsrs	r2, r2, #16
 800e200:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e204:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e208:	b29b      	uxth	r3, r3
 800e20a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e20e:	45c1      	cmp	r9, r8
 800e210:	f841 3b04 	str.w	r3, [r1], #4
 800e214:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e218:	d2e6      	bcs.n	800e1e8 <quorem+0xa4>
 800e21a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e21e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e222:	b922      	cbnz	r2, 800e22e <quorem+0xea>
 800e224:	3b04      	subs	r3, #4
 800e226:	429d      	cmp	r5, r3
 800e228:	461a      	mov	r2, r3
 800e22a:	d30b      	bcc.n	800e244 <quorem+0x100>
 800e22c:	613c      	str	r4, [r7, #16]
 800e22e:	3601      	adds	r6, #1
 800e230:	4630      	mov	r0, r6
 800e232:	b003      	add	sp, #12
 800e234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e238:	6812      	ldr	r2, [r2, #0]
 800e23a:	3b04      	subs	r3, #4
 800e23c:	2a00      	cmp	r2, #0
 800e23e:	d1cb      	bne.n	800e1d8 <quorem+0x94>
 800e240:	3c01      	subs	r4, #1
 800e242:	e7c6      	b.n	800e1d2 <quorem+0x8e>
 800e244:	6812      	ldr	r2, [r2, #0]
 800e246:	3b04      	subs	r3, #4
 800e248:	2a00      	cmp	r2, #0
 800e24a:	d1ef      	bne.n	800e22c <quorem+0xe8>
 800e24c:	3c01      	subs	r4, #1
 800e24e:	e7ea      	b.n	800e226 <quorem+0xe2>
 800e250:	2000      	movs	r0, #0
 800e252:	e7ee      	b.n	800e232 <quorem+0xee>
 800e254:	0000      	movs	r0, r0
	...

0800e258 <_dtoa_r>:
 800e258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e25c:	69c7      	ldr	r7, [r0, #28]
 800e25e:	b097      	sub	sp, #92	@ 0x5c
 800e260:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e264:	ec55 4b10 	vmov	r4, r5, d0
 800e268:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e26a:	9107      	str	r1, [sp, #28]
 800e26c:	4681      	mov	r9, r0
 800e26e:	920c      	str	r2, [sp, #48]	@ 0x30
 800e270:	9311      	str	r3, [sp, #68]	@ 0x44
 800e272:	b97f      	cbnz	r7, 800e294 <_dtoa_r+0x3c>
 800e274:	2010      	movs	r0, #16
 800e276:	f000 fe09 	bl	800ee8c <malloc>
 800e27a:	4602      	mov	r2, r0
 800e27c:	f8c9 001c 	str.w	r0, [r9, #28]
 800e280:	b920      	cbnz	r0, 800e28c <_dtoa_r+0x34>
 800e282:	4ba9      	ldr	r3, [pc, #676]	@ (800e528 <_dtoa_r+0x2d0>)
 800e284:	21ef      	movs	r1, #239	@ 0xef
 800e286:	48a9      	ldr	r0, [pc, #676]	@ (800e52c <_dtoa_r+0x2d4>)
 800e288:	f002 fe02 	bl	8010e90 <__assert_func>
 800e28c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e290:	6007      	str	r7, [r0, #0]
 800e292:	60c7      	str	r7, [r0, #12]
 800e294:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e298:	6819      	ldr	r1, [r3, #0]
 800e29a:	b159      	cbz	r1, 800e2b4 <_dtoa_r+0x5c>
 800e29c:	685a      	ldr	r2, [r3, #4]
 800e29e:	604a      	str	r2, [r1, #4]
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	4093      	lsls	r3, r2
 800e2a4:	608b      	str	r3, [r1, #8]
 800e2a6:	4648      	mov	r0, r9
 800e2a8:	f000 fee6 	bl	800f078 <_Bfree>
 800e2ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	601a      	str	r2, [r3, #0]
 800e2b4:	1e2b      	subs	r3, r5, #0
 800e2b6:	bfb9      	ittee	lt
 800e2b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e2bc:	9305      	strlt	r3, [sp, #20]
 800e2be:	2300      	movge	r3, #0
 800e2c0:	6033      	strge	r3, [r6, #0]
 800e2c2:	9f05      	ldr	r7, [sp, #20]
 800e2c4:	4b9a      	ldr	r3, [pc, #616]	@ (800e530 <_dtoa_r+0x2d8>)
 800e2c6:	bfbc      	itt	lt
 800e2c8:	2201      	movlt	r2, #1
 800e2ca:	6032      	strlt	r2, [r6, #0]
 800e2cc:	43bb      	bics	r3, r7
 800e2ce:	d112      	bne.n	800e2f6 <_dtoa_r+0x9e>
 800e2d0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e2d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e2d6:	6013      	str	r3, [r2, #0]
 800e2d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e2dc:	4323      	orrs	r3, r4
 800e2de:	f000 855a 	beq.w	800ed96 <_dtoa_r+0xb3e>
 800e2e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e2e4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800e544 <_dtoa_r+0x2ec>
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	f000 855c 	beq.w	800eda6 <_dtoa_r+0xb4e>
 800e2ee:	f10a 0303 	add.w	r3, sl, #3
 800e2f2:	f000 bd56 	b.w	800eda2 <_dtoa_r+0xb4a>
 800e2f6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	ec51 0b17 	vmov	r0, r1, d7
 800e300:	2300      	movs	r3, #0
 800e302:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e306:	f7f2 fc07 	bl	8000b18 <__aeabi_dcmpeq>
 800e30a:	4680      	mov	r8, r0
 800e30c:	b158      	cbz	r0, 800e326 <_dtoa_r+0xce>
 800e30e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e310:	2301      	movs	r3, #1
 800e312:	6013      	str	r3, [r2, #0]
 800e314:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e316:	b113      	cbz	r3, 800e31e <_dtoa_r+0xc6>
 800e318:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e31a:	4b86      	ldr	r3, [pc, #536]	@ (800e534 <_dtoa_r+0x2dc>)
 800e31c:	6013      	str	r3, [r2, #0]
 800e31e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800e548 <_dtoa_r+0x2f0>
 800e322:	f000 bd40 	b.w	800eda6 <_dtoa_r+0xb4e>
 800e326:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800e32a:	aa14      	add	r2, sp, #80	@ 0x50
 800e32c:	a915      	add	r1, sp, #84	@ 0x54
 800e32e:	4648      	mov	r0, r9
 800e330:	f001 fa3e 	bl	800f7b0 <__d2b>
 800e334:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e338:	9002      	str	r0, [sp, #8]
 800e33a:	2e00      	cmp	r6, #0
 800e33c:	d078      	beq.n	800e430 <_dtoa_r+0x1d8>
 800e33e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e340:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800e344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e348:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e34c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e350:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e354:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e358:	4619      	mov	r1, r3
 800e35a:	2200      	movs	r2, #0
 800e35c:	4b76      	ldr	r3, [pc, #472]	@ (800e538 <_dtoa_r+0x2e0>)
 800e35e:	f7f1 ffbb 	bl	80002d8 <__aeabi_dsub>
 800e362:	a36b      	add	r3, pc, #428	@ (adr r3, 800e510 <_dtoa_r+0x2b8>)
 800e364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e368:	f7f2 f96e 	bl	8000648 <__aeabi_dmul>
 800e36c:	a36a      	add	r3, pc, #424	@ (adr r3, 800e518 <_dtoa_r+0x2c0>)
 800e36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e372:	f7f1 ffb3 	bl	80002dc <__adddf3>
 800e376:	4604      	mov	r4, r0
 800e378:	4630      	mov	r0, r6
 800e37a:	460d      	mov	r5, r1
 800e37c:	f7f2 f8fa 	bl	8000574 <__aeabi_i2d>
 800e380:	a367      	add	r3, pc, #412	@ (adr r3, 800e520 <_dtoa_r+0x2c8>)
 800e382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e386:	f7f2 f95f 	bl	8000648 <__aeabi_dmul>
 800e38a:	4602      	mov	r2, r0
 800e38c:	460b      	mov	r3, r1
 800e38e:	4620      	mov	r0, r4
 800e390:	4629      	mov	r1, r5
 800e392:	f7f1 ffa3 	bl	80002dc <__adddf3>
 800e396:	4604      	mov	r4, r0
 800e398:	460d      	mov	r5, r1
 800e39a:	f7f2 fc05 	bl	8000ba8 <__aeabi_d2iz>
 800e39e:	2200      	movs	r2, #0
 800e3a0:	4607      	mov	r7, r0
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	4620      	mov	r0, r4
 800e3a6:	4629      	mov	r1, r5
 800e3a8:	f7f2 fbc0 	bl	8000b2c <__aeabi_dcmplt>
 800e3ac:	b140      	cbz	r0, 800e3c0 <_dtoa_r+0x168>
 800e3ae:	4638      	mov	r0, r7
 800e3b0:	f7f2 f8e0 	bl	8000574 <__aeabi_i2d>
 800e3b4:	4622      	mov	r2, r4
 800e3b6:	462b      	mov	r3, r5
 800e3b8:	f7f2 fbae 	bl	8000b18 <__aeabi_dcmpeq>
 800e3bc:	b900      	cbnz	r0, 800e3c0 <_dtoa_r+0x168>
 800e3be:	3f01      	subs	r7, #1
 800e3c0:	2f16      	cmp	r7, #22
 800e3c2:	d852      	bhi.n	800e46a <_dtoa_r+0x212>
 800e3c4:	4b5d      	ldr	r3, [pc, #372]	@ (800e53c <_dtoa_r+0x2e4>)
 800e3c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e3d2:	f7f2 fbab 	bl	8000b2c <__aeabi_dcmplt>
 800e3d6:	2800      	cmp	r0, #0
 800e3d8:	d049      	beq.n	800e46e <_dtoa_r+0x216>
 800e3da:	3f01      	subs	r7, #1
 800e3dc:	2300      	movs	r3, #0
 800e3de:	9310      	str	r3, [sp, #64]	@ 0x40
 800e3e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e3e2:	1b9b      	subs	r3, r3, r6
 800e3e4:	1e5a      	subs	r2, r3, #1
 800e3e6:	bf45      	ittet	mi
 800e3e8:	f1c3 0301 	rsbmi	r3, r3, #1
 800e3ec:	9300      	strmi	r3, [sp, #0]
 800e3ee:	2300      	movpl	r3, #0
 800e3f0:	2300      	movmi	r3, #0
 800e3f2:	9206      	str	r2, [sp, #24]
 800e3f4:	bf54      	ite	pl
 800e3f6:	9300      	strpl	r3, [sp, #0]
 800e3f8:	9306      	strmi	r3, [sp, #24]
 800e3fa:	2f00      	cmp	r7, #0
 800e3fc:	db39      	blt.n	800e472 <_dtoa_r+0x21a>
 800e3fe:	9b06      	ldr	r3, [sp, #24]
 800e400:	970d      	str	r7, [sp, #52]	@ 0x34
 800e402:	443b      	add	r3, r7
 800e404:	9306      	str	r3, [sp, #24]
 800e406:	2300      	movs	r3, #0
 800e408:	9308      	str	r3, [sp, #32]
 800e40a:	9b07      	ldr	r3, [sp, #28]
 800e40c:	2b09      	cmp	r3, #9
 800e40e:	d863      	bhi.n	800e4d8 <_dtoa_r+0x280>
 800e410:	2b05      	cmp	r3, #5
 800e412:	bfc4      	itt	gt
 800e414:	3b04      	subgt	r3, #4
 800e416:	9307      	strgt	r3, [sp, #28]
 800e418:	9b07      	ldr	r3, [sp, #28]
 800e41a:	f1a3 0302 	sub.w	r3, r3, #2
 800e41e:	bfcc      	ite	gt
 800e420:	2400      	movgt	r4, #0
 800e422:	2401      	movle	r4, #1
 800e424:	2b03      	cmp	r3, #3
 800e426:	d863      	bhi.n	800e4f0 <_dtoa_r+0x298>
 800e428:	e8df f003 	tbb	[pc, r3]
 800e42c:	2b375452 	.word	0x2b375452
 800e430:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e434:	441e      	add	r6, r3
 800e436:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e43a:	2b20      	cmp	r3, #32
 800e43c:	bfc1      	itttt	gt
 800e43e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e442:	409f      	lslgt	r7, r3
 800e444:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e448:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e44c:	bfd6      	itet	le
 800e44e:	f1c3 0320 	rsble	r3, r3, #32
 800e452:	ea47 0003 	orrgt.w	r0, r7, r3
 800e456:	fa04 f003 	lslle.w	r0, r4, r3
 800e45a:	f7f2 f87b 	bl	8000554 <__aeabi_ui2d>
 800e45e:	2201      	movs	r2, #1
 800e460:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e464:	3e01      	subs	r6, #1
 800e466:	9212      	str	r2, [sp, #72]	@ 0x48
 800e468:	e776      	b.n	800e358 <_dtoa_r+0x100>
 800e46a:	2301      	movs	r3, #1
 800e46c:	e7b7      	b.n	800e3de <_dtoa_r+0x186>
 800e46e:	9010      	str	r0, [sp, #64]	@ 0x40
 800e470:	e7b6      	b.n	800e3e0 <_dtoa_r+0x188>
 800e472:	9b00      	ldr	r3, [sp, #0]
 800e474:	1bdb      	subs	r3, r3, r7
 800e476:	9300      	str	r3, [sp, #0]
 800e478:	427b      	negs	r3, r7
 800e47a:	9308      	str	r3, [sp, #32]
 800e47c:	2300      	movs	r3, #0
 800e47e:	930d      	str	r3, [sp, #52]	@ 0x34
 800e480:	e7c3      	b.n	800e40a <_dtoa_r+0x1b2>
 800e482:	2301      	movs	r3, #1
 800e484:	9309      	str	r3, [sp, #36]	@ 0x24
 800e486:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e488:	eb07 0b03 	add.w	fp, r7, r3
 800e48c:	f10b 0301 	add.w	r3, fp, #1
 800e490:	2b01      	cmp	r3, #1
 800e492:	9303      	str	r3, [sp, #12]
 800e494:	bfb8      	it	lt
 800e496:	2301      	movlt	r3, #1
 800e498:	e006      	b.n	800e4a8 <_dtoa_r+0x250>
 800e49a:	2301      	movs	r3, #1
 800e49c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e49e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	dd28      	ble.n	800e4f6 <_dtoa_r+0x29e>
 800e4a4:	469b      	mov	fp, r3
 800e4a6:	9303      	str	r3, [sp, #12]
 800e4a8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e4ac:	2100      	movs	r1, #0
 800e4ae:	2204      	movs	r2, #4
 800e4b0:	f102 0514 	add.w	r5, r2, #20
 800e4b4:	429d      	cmp	r5, r3
 800e4b6:	d926      	bls.n	800e506 <_dtoa_r+0x2ae>
 800e4b8:	6041      	str	r1, [r0, #4]
 800e4ba:	4648      	mov	r0, r9
 800e4bc:	f000 fd9c 	bl	800eff8 <_Balloc>
 800e4c0:	4682      	mov	sl, r0
 800e4c2:	2800      	cmp	r0, #0
 800e4c4:	d142      	bne.n	800e54c <_dtoa_r+0x2f4>
 800e4c6:	4b1e      	ldr	r3, [pc, #120]	@ (800e540 <_dtoa_r+0x2e8>)
 800e4c8:	4602      	mov	r2, r0
 800e4ca:	f240 11af 	movw	r1, #431	@ 0x1af
 800e4ce:	e6da      	b.n	800e286 <_dtoa_r+0x2e>
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	e7e3      	b.n	800e49c <_dtoa_r+0x244>
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	e7d5      	b.n	800e484 <_dtoa_r+0x22c>
 800e4d8:	2401      	movs	r4, #1
 800e4da:	2300      	movs	r3, #0
 800e4dc:	9307      	str	r3, [sp, #28]
 800e4de:	9409      	str	r4, [sp, #36]	@ 0x24
 800e4e0:	f04f 3bff 	mov.w	fp, #4294967295
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	f8cd b00c 	str.w	fp, [sp, #12]
 800e4ea:	2312      	movs	r3, #18
 800e4ec:	920c      	str	r2, [sp, #48]	@ 0x30
 800e4ee:	e7db      	b.n	800e4a8 <_dtoa_r+0x250>
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4f4:	e7f4      	b.n	800e4e0 <_dtoa_r+0x288>
 800e4f6:	f04f 0b01 	mov.w	fp, #1
 800e4fa:	f8cd b00c 	str.w	fp, [sp, #12]
 800e4fe:	465b      	mov	r3, fp
 800e500:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e504:	e7d0      	b.n	800e4a8 <_dtoa_r+0x250>
 800e506:	3101      	adds	r1, #1
 800e508:	0052      	lsls	r2, r2, #1
 800e50a:	e7d1      	b.n	800e4b0 <_dtoa_r+0x258>
 800e50c:	f3af 8000 	nop.w
 800e510:	636f4361 	.word	0x636f4361
 800e514:	3fd287a7 	.word	0x3fd287a7
 800e518:	8b60c8b3 	.word	0x8b60c8b3
 800e51c:	3fc68a28 	.word	0x3fc68a28
 800e520:	509f79fb 	.word	0x509f79fb
 800e524:	3fd34413 	.word	0x3fd34413
 800e528:	08011a63 	.word	0x08011a63
 800e52c:	08011a7a 	.word	0x08011a7a
 800e530:	7ff00000 	.word	0x7ff00000
 800e534:	08011a2e 	.word	0x08011a2e
 800e538:	3ff80000 	.word	0x3ff80000
 800e53c:	08011c28 	.word	0x08011c28
 800e540:	08011ad2 	.word	0x08011ad2
 800e544:	08011a5f 	.word	0x08011a5f
 800e548:	08011a2d 	.word	0x08011a2d
 800e54c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e550:	6018      	str	r0, [r3, #0]
 800e552:	9b03      	ldr	r3, [sp, #12]
 800e554:	2b0e      	cmp	r3, #14
 800e556:	f200 80a1 	bhi.w	800e69c <_dtoa_r+0x444>
 800e55a:	2c00      	cmp	r4, #0
 800e55c:	f000 809e 	beq.w	800e69c <_dtoa_r+0x444>
 800e560:	2f00      	cmp	r7, #0
 800e562:	dd33      	ble.n	800e5cc <_dtoa_r+0x374>
 800e564:	4b9c      	ldr	r3, [pc, #624]	@ (800e7d8 <_dtoa_r+0x580>)
 800e566:	f007 020f 	and.w	r2, r7, #15
 800e56a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e56e:	ed93 7b00 	vldr	d7, [r3]
 800e572:	05f8      	lsls	r0, r7, #23
 800e574:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e578:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e57c:	d516      	bpl.n	800e5ac <_dtoa_r+0x354>
 800e57e:	4b97      	ldr	r3, [pc, #604]	@ (800e7dc <_dtoa_r+0x584>)
 800e580:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e584:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e588:	f7f2 f988 	bl	800089c <__aeabi_ddiv>
 800e58c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e590:	f004 040f 	and.w	r4, r4, #15
 800e594:	2603      	movs	r6, #3
 800e596:	4d91      	ldr	r5, [pc, #580]	@ (800e7dc <_dtoa_r+0x584>)
 800e598:	b954      	cbnz	r4, 800e5b0 <_dtoa_r+0x358>
 800e59a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e59e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e5a2:	f7f2 f97b 	bl	800089c <__aeabi_ddiv>
 800e5a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e5aa:	e028      	b.n	800e5fe <_dtoa_r+0x3a6>
 800e5ac:	2602      	movs	r6, #2
 800e5ae:	e7f2      	b.n	800e596 <_dtoa_r+0x33e>
 800e5b0:	07e1      	lsls	r1, r4, #31
 800e5b2:	d508      	bpl.n	800e5c6 <_dtoa_r+0x36e>
 800e5b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e5b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e5bc:	f7f2 f844 	bl	8000648 <__aeabi_dmul>
 800e5c0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e5c4:	3601      	adds	r6, #1
 800e5c6:	1064      	asrs	r4, r4, #1
 800e5c8:	3508      	adds	r5, #8
 800e5ca:	e7e5      	b.n	800e598 <_dtoa_r+0x340>
 800e5cc:	f000 80af 	beq.w	800e72e <_dtoa_r+0x4d6>
 800e5d0:	427c      	negs	r4, r7
 800e5d2:	4b81      	ldr	r3, [pc, #516]	@ (800e7d8 <_dtoa_r+0x580>)
 800e5d4:	4d81      	ldr	r5, [pc, #516]	@ (800e7dc <_dtoa_r+0x584>)
 800e5d6:	f004 020f 	and.w	r2, r4, #15
 800e5da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e5e6:	f7f2 f82f 	bl	8000648 <__aeabi_dmul>
 800e5ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e5ee:	1124      	asrs	r4, r4, #4
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	2602      	movs	r6, #2
 800e5f4:	2c00      	cmp	r4, #0
 800e5f6:	f040 808f 	bne.w	800e718 <_dtoa_r+0x4c0>
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d1d3      	bne.n	800e5a6 <_dtoa_r+0x34e>
 800e5fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e600:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e604:	2b00      	cmp	r3, #0
 800e606:	f000 8094 	beq.w	800e732 <_dtoa_r+0x4da>
 800e60a:	4b75      	ldr	r3, [pc, #468]	@ (800e7e0 <_dtoa_r+0x588>)
 800e60c:	2200      	movs	r2, #0
 800e60e:	4620      	mov	r0, r4
 800e610:	4629      	mov	r1, r5
 800e612:	f7f2 fa8b 	bl	8000b2c <__aeabi_dcmplt>
 800e616:	2800      	cmp	r0, #0
 800e618:	f000 808b 	beq.w	800e732 <_dtoa_r+0x4da>
 800e61c:	9b03      	ldr	r3, [sp, #12]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	f000 8087 	beq.w	800e732 <_dtoa_r+0x4da>
 800e624:	f1bb 0f00 	cmp.w	fp, #0
 800e628:	dd34      	ble.n	800e694 <_dtoa_r+0x43c>
 800e62a:	4620      	mov	r0, r4
 800e62c:	4b6d      	ldr	r3, [pc, #436]	@ (800e7e4 <_dtoa_r+0x58c>)
 800e62e:	2200      	movs	r2, #0
 800e630:	4629      	mov	r1, r5
 800e632:	f7f2 f809 	bl	8000648 <__aeabi_dmul>
 800e636:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e63a:	f107 38ff 	add.w	r8, r7, #4294967295
 800e63e:	3601      	adds	r6, #1
 800e640:	465c      	mov	r4, fp
 800e642:	4630      	mov	r0, r6
 800e644:	f7f1 ff96 	bl	8000574 <__aeabi_i2d>
 800e648:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e64c:	f7f1 fffc 	bl	8000648 <__aeabi_dmul>
 800e650:	4b65      	ldr	r3, [pc, #404]	@ (800e7e8 <_dtoa_r+0x590>)
 800e652:	2200      	movs	r2, #0
 800e654:	f7f1 fe42 	bl	80002dc <__adddf3>
 800e658:	4605      	mov	r5, r0
 800e65a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e65e:	2c00      	cmp	r4, #0
 800e660:	d16a      	bne.n	800e738 <_dtoa_r+0x4e0>
 800e662:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e666:	4b61      	ldr	r3, [pc, #388]	@ (800e7ec <_dtoa_r+0x594>)
 800e668:	2200      	movs	r2, #0
 800e66a:	f7f1 fe35 	bl	80002d8 <__aeabi_dsub>
 800e66e:	4602      	mov	r2, r0
 800e670:	460b      	mov	r3, r1
 800e672:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e676:	462a      	mov	r2, r5
 800e678:	4633      	mov	r3, r6
 800e67a:	f7f2 fa75 	bl	8000b68 <__aeabi_dcmpgt>
 800e67e:	2800      	cmp	r0, #0
 800e680:	f040 8298 	bne.w	800ebb4 <_dtoa_r+0x95c>
 800e684:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e688:	462a      	mov	r2, r5
 800e68a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e68e:	f7f2 fa4d 	bl	8000b2c <__aeabi_dcmplt>
 800e692:	bb38      	cbnz	r0, 800e6e4 <_dtoa_r+0x48c>
 800e694:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e698:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e69c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	f2c0 8157 	blt.w	800e952 <_dtoa_r+0x6fa>
 800e6a4:	2f0e      	cmp	r7, #14
 800e6a6:	f300 8154 	bgt.w	800e952 <_dtoa_r+0x6fa>
 800e6aa:	4b4b      	ldr	r3, [pc, #300]	@ (800e7d8 <_dtoa_r+0x580>)
 800e6ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e6b0:	ed93 7b00 	vldr	d7, [r3]
 800e6b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	ed8d 7b00 	vstr	d7, [sp]
 800e6bc:	f280 80e5 	bge.w	800e88a <_dtoa_r+0x632>
 800e6c0:	9b03      	ldr	r3, [sp, #12]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	f300 80e1 	bgt.w	800e88a <_dtoa_r+0x632>
 800e6c8:	d10c      	bne.n	800e6e4 <_dtoa_r+0x48c>
 800e6ca:	4b48      	ldr	r3, [pc, #288]	@ (800e7ec <_dtoa_r+0x594>)
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	ec51 0b17 	vmov	r0, r1, d7
 800e6d2:	f7f1 ffb9 	bl	8000648 <__aeabi_dmul>
 800e6d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e6da:	f7f2 fa3b 	bl	8000b54 <__aeabi_dcmpge>
 800e6de:	2800      	cmp	r0, #0
 800e6e0:	f000 8266 	beq.w	800ebb0 <_dtoa_r+0x958>
 800e6e4:	2400      	movs	r4, #0
 800e6e6:	4625      	mov	r5, r4
 800e6e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e6ea:	4656      	mov	r6, sl
 800e6ec:	ea6f 0803 	mvn.w	r8, r3
 800e6f0:	2700      	movs	r7, #0
 800e6f2:	4621      	mov	r1, r4
 800e6f4:	4648      	mov	r0, r9
 800e6f6:	f000 fcbf 	bl	800f078 <_Bfree>
 800e6fa:	2d00      	cmp	r5, #0
 800e6fc:	f000 80bd 	beq.w	800e87a <_dtoa_r+0x622>
 800e700:	b12f      	cbz	r7, 800e70e <_dtoa_r+0x4b6>
 800e702:	42af      	cmp	r7, r5
 800e704:	d003      	beq.n	800e70e <_dtoa_r+0x4b6>
 800e706:	4639      	mov	r1, r7
 800e708:	4648      	mov	r0, r9
 800e70a:	f000 fcb5 	bl	800f078 <_Bfree>
 800e70e:	4629      	mov	r1, r5
 800e710:	4648      	mov	r0, r9
 800e712:	f000 fcb1 	bl	800f078 <_Bfree>
 800e716:	e0b0      	b.n	800e87a <_dtoa_r+0x622>
 800e718:	07e2      	lsls	r2, r4, #31
 800e71a:	d505      	bpl.n	800e728 <_dtoa_r+0x4d0>
 800e71c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e720:	f7f1 ff92 	bl	8000648 <__aeabi_dmul>
 800e724:	3601      	adds	r6, #1
 800e726:	2301      	movs	r3, #1
 800e728:	1064      	asrs	r4, r4, #1
 800e72a:	3508      	adds	r5, #8
 800e72c:	e762      	b.n	800e5f4 <_dtoa_r+0x39c>
 800e72e:	2602      	movs	r6, #2
 800e730:	e765      	b.n	800e5fe <_dtoa_r+0x3a6>
 800e732:	9c03      	ldr	r4, [sp, #12]
 800e734:	46b8      	mov	r8, r7
 800e736:	e784      	b.n	800e642 <_dtoa_r+0x3ea>
 800e738:	4b27      	ldr	r3, [pc, #156]	@ (800e7d8 <_dtoa_r+0x580>)
 800e73a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e73c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e740:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e744:	4454      	add	r4, sl
 800e746:	2900      	cmp	r1, #0
 800e748:	d054      	beq.n	800e7f4 <_dtoa_r+0x59c>
 800e74a:	4929      	ldr	r1, [pc, #164]	@ (800e7f0 <_dtoa_r+0x598>)
 800e74c:	2000      	movs	r0, #0
 800e74e:	f7f2 f8a5 	bl	800089c <__aeabi_ddiv>
 800e752:	4633      	mov	r3, r6
 800e754:	462a      	mov	r2, r5
 800e756:	f7f1 fdbf 	bl	80002d8 <__aeabi_dsub>
 800e75a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e75e:	4656      	mov	r6, sl
 800e760:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e764:	f7f2 fa20 	bl	8000ba8 <__aeabi_d2iz>
 800e768:	4605      	mov	r5, r0
 800e76a:	f7f1 ff03 	bl	8000574 <__aeabi_i2d>
 800e76e:	4602      	mov	r2, r0
 800e770:	460b      	mov	r3, r1
 800e772:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e776:	f7f1 fdaf 	bl	80002d8 <__aeabi_dsub>
 800e77a:	3530      	adds	r5, #48	@ 0x30
 800e77c:	4602      	mov	r2, r0
 800e77e:	460b      	mov	r3, r1
 800e780:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e784:	f806 5b01 	strb.w	r5, [r6], #1
 800e788:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e78c:	f7f2 f9ce 	bl	8000b2c <__aeabi_dcmplt>
 800e790:	2800      	cmp	r0, #0
 800e792:	d172      	bne.n	800e87a <_dtoa_r+0x622>
 800e794:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e798:	4911      	ldr	r1, [pc, #68]	@ (800e7e0 <_dtoa_r+0x588>)
 800e79a:	2000      	movs	r0, #0
 800e79c:	f7f1 fd9c 	bl	80002d8 <__aeabi_dsub>
 800e7a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e7a4:	f7f2 f9c2 	bl	8000b2c <__aeabi_dcmplt>
 800e7a8:	2800      	cmp	r0, #0
 800e7aa:	f040 80b4 	bne.w	800e916 <_dtoa_r+0x6be>
 800e7ae:	42a6      	cmp	r6, r4
 800e7b0:	f43f af70 	beq.w	800e694 <_dtoa_r+0x43c>
 800e7b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e7b8:	4b0a      	ldr	r3, [pc, #40]	@ (800e7e4 <_dtoa_r+0x58c>)
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	f7f1 ff44 	bl	8000648 <__aeabi_dmul>
 800e7c0:	4b08      	ldr	r3, [pc, #32]	@ (800e7e4 <_dtoa_r+0x58c>)
 800e7c2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e7cc:	f7f1 ff3c 	bl	8000648 <__aeabi_dmul>
 800e7d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e7d4:	e7c4      	b.n	800e760 <_dtoa_r+0x508>
 800e7d6:	bf00      	nop
 800e7d8:	08011c28 	.word	0x08011c28
 800e7dc:	08011c00 	.word	0x08011c00
 800e7e0:	3ff00000 	.word	0x3ff00000
 800e7e4:	40240000 	.word	0x40240000
 800e7e8:	401c0000 	.word	0x401c0000
 800e7ec:	40140000 	.word	0x40140000
 800e7f0:	3fe00000 	.word	0x3fe00000
 800e7f4:	4631      	mov	r1, r6
 800e7f6:	4628      	mov	r0, r5
 800e7f8:	f7f1 ff26 	bl	8000648 <__aeabi_dmul>
 800e7fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e800:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e802:	4656      	mov	r6, sl
 800e804:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e808:	f7f2 f9ce 	bl	8000ba8 <__aeabi_d2iz>
 800e80c:	4605      	mov	r5, r0
 800e80e:	f7f1 feb1 	bl	8000574 <__aeabi_i2d>
 800e812:	4602      	mov	r2, r0
 800e814:	460b      	mov	r3, r1
 800e816:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e81a:	f7f1 fd5d 	bl	80002d8 <__aeabi_dsub>
 800e81e:	3530      	adds	r5, #48	@ 0x30
 800e820:	f806 5b01 	strb.w	r5, [r6], #1
 800e824:	4602      	mov	r2, r0
 800e826:	460b      	mov	r3, r1
 800e828:	42a6      	cmp	r6, r4
 800e82a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e82e:	f04f 0200 	mov.w	r2, #0
 800e832:	d124      	bne.n	800e87e <_dtoa_r+0x626>
 800e834:	4baf      	ldr	r3, [pc, #700]	@ (800eaf4 <_dtoa_r+0x89c>)
 800e836:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e83a:	f7f1 fd4f 	bl	80002dc <__adddf3>
 800e83e:	4602      	mov	r2, r0
 800e840:	460b      	mov	r3, r1
 800e842:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e846:	f7f2 f98f 	bl	8000b68 <__aeabi_dcmpgt>
 800e84a:	2800      	cmp	r0, #0
 800e84c:	d163      	bne.n	800e916 <_dtoa_r+0x6be>
 800e84e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e852:	49a8      	ldr	r1, [pc, #672]	@ (800eaf4 <_dtoa_r+0x89c>)
 800e854:	2000      	movs	r0, #0
 800e856:	f7f1 fd3f 	bl	80002d8 <__aeabi_dsub>
 800e85a:	4602      	mov	r2, r0
 800e85c:	460b      	mov	r3, r1
 800e85e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e862:	f7f2 f963 	bl	8000b2c <__aeabi_dcmplt>
 800e866:	2800      	cmp	r0, #0
 800e868:	f43f af14 	beq.w	800e694 <_dtoa_r+0x43c>
 800e86c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e86e:	1e73      	subs	r3, r6, #1
 800e870:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e872:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e876:	2b30      	cmp	r3, #48	@ 0x30
 800e878:	d0f8      	beq.n	800e86c <_dtoa_r+0x614>
 800e87a:	4647      	mov	r7, r8
 800e87c:	e03b      	b.n	800e8f6 <_dtoa_r+0x69e>
 800e87e:	4b9e      	ldr	r3, [pc, #632]	@ (800eaf8 <_dtoa_r+0x8a0>)
 800e880:	f7f1 fee2 	bl	8000648 <__aeabi_dmul>
 800e884:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e888:	e7bc      	b.n	800e804 <_dtoa_r+0x5ac>
 800e88a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e88e:	4656      	mov	r6, sl
 800e890:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e894:	4620      	mov	r0, r4
 800e896:	4629      	mov	r1, r5
 800e898:	f7f2 f800 	bl	800089c <__aeabi_ddiv>
 800e89c:	f7f2 f984 	bl	8000ba8 <__aeabi_d2iz>
 800e8a0:	4680      	mov	r8, r0
 800e8a2:	f7f1 fe67 	bl	8000574 <__aeabi_i2d>
 800e8a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e8aa:	f7f1 fecd 	bl	8000648 <__aeabi_dmul>
 800e8ae:	4602      	mov	r2, r0
 800e8b0:	460b      	mov	r3, r1
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	4629      	mov	r1, r5
 800e8b6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e8ba:	f7f1 fd0d 	bl	80002d8 <__aeabi_dsub>
 800e8be:	f806 4b01 	strb.w	r4, [r6], #1
 800e8c2:	9d03      	ldr	r5, [sp, #12]
 800e8c4:	eba6 040a 	sub.w	r4, r6, sl
 800e8c8:	42a5      	cmp	r5, r4
 800e8ca:	4602      	mov	r2, r0
 800e8cc:	460b      	mov	r3, r1
 800e8ce:	d133      	bne.n	800e938 <_dtoa_r+0x6e0>
 800e8d0:	f7f1 fd04 	bl	80002dc <__adddf3>
 800e8d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e8d8:	4604      	mov	r4, r0
 800e8da:	460d      	mov	r5, r1
 800e8dc:	f7f2 f944 	bl	8000b68 <__aeabi_dcmpgt>
 800e8e0:	b9c0      	cbnz	r0, 800e914 <_dtoa_r+0x6bc>
 800e8e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e8e6:	4620      	mov	r0, r4
 800e8e8:	4629      	mov	r1, r5
 800e8ea:	f7f2 f915 	bl	8000b18 <__aeabi_dcmpeq>
 800e8ee:	b110      	cbz	r0, 800e8f6 <_dtoa_r+0x69e>
 800e8f0:	f018 0f01 	tst.w	r8, #1
 800e8f4:	d10e      	bne.n	800e914 <_dtoa_r+0x6bc>
 800e8f6:	9902      	ldr	r1, [sp, #8]
 800e8f8:	4648      	mov	r0, r9
 800e8fa:	f000 fbbd 	bl	800f078 <_Bfree>
 800e8fe:	2300      	movs	r3, #0
 800e900:	7033      	strb	r3, [r6, #0]
 800e902:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e904:	3701      	adds	r7, #1
 800e906:	601f      	str	r7, [r3, #0]
 800e908:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	f000 824b 	beq.w	800eda6 <_dtoa_r+0xb4e>
 800e910:	601e      	str	r6, [r3, #0]
 800e912:	e248      	b.n	800eda6 <_dtoa_r+0xb4e>
 800e914:	46b8      	mov	r8, r7
 800e916:	4633      	mov	r3, r6
 800e918:	461e      	mov	r6, r3
 800e91a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e91e:	2a39      	cmp	r2, #57	@ 0x39
 800e920:	d106      	bne.n	800e930 <_dtoa_r+0x6d8>
 800e922:	459a      	cmp	sl, r3
 800e924:	d1f8      	bne.n	800e918 <_dtoa_r+0x6c0>
 800e926:	2230      	movs	r2, #48	@ 0x30
 800e928:	f108 0801 	add.w	r8, r8, #1
 800e92c:	f88a 2000 	strb.w	r2, [sl]
 800e930:	781a      	ldrb	r2, [r3, #0]
 800e932:	3201      	adds	r2, #1
 800e934:	701a      	strb	r2, [r3, #0]
 800e936:	e7a0      	b.n	800e87a <_dtoa_r+0x622>
 800e938:	4b6f      	ldr	r3, [pc, #444]	@ (800eaf8 <_dtoa_r+0x8a0>)
 800e93a:	2200      	movs	r2, #0
 800e93c:	f7f1 fe84 	bl	8000648 <__aeabi_dmul>
 800e940:	2200      	movs	r2, #0
 800e942:	2300      	movs	r3, #0
 800e944:	4604      	mov	r4, r0
 800e946:	460d      	mov	r5, r1
 800e948:	f7f2 f8e6 	bl	8000b18 <__aeabi_dcmpeq>
 800e94c:	2800      	cmp	r0, #0
 800e94e:	d09f      	beq.n	800e890 <_dtoa_r+0x638>
 800e950:	e7d1      	b.n	800e8f6 <_dtoa_r+0x69e>
 800e952:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e954:	2a00      	cmp	r2, #0
 800e956:	f000 80ea 	beq.w	800eb2e <_dtoa_r+0x8d6>
 800e95a:	9a07      	ldr	r2, [sp, #28]
 800e95c:	2a01      	cmp	r2, #1
 800e95e:	f300 80cd 	bgt.w	800eafc <_dtoa_r+0x8a4>
 800e962:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e964:	2a00      	cmp	r2, #0
 800e966:	f000 80c1 	beq.w	800eaec <_dtoa_r+0x894>
 800e96a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e96e:	9c08      	ldr	r4, [sp, #32]
 800e970:	9e00      	ldr	r6, [sp, #0]
 800e972:	9a00      	ldr	r2, [sp, #0]
 800e974:	441a      	add	r2, r3
 800e976:	9200      	str	r2, [sp, #0]
 800e978:	9a06      	ldr	r2, [sp, #24]
 800e97a:	2101      	movs	r1, #1
 800e97c:	441a      	add	r2, r3
 800e97e:	4648      	mov	r0, r9
 800e980:	9206      	str	r2, [sp, #24]
 800e982:	f000 fc77 	bl	800f274 <__i2b>
 800e986:	4605      	mov	r5, r0
 800e988:	b166      	cbz	r6, 800e9a4 <_dtoa_r+0x74c>
 800e98a:	9b06      	ldr	r3, [sp, #24]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	dd09      	ble.n	800e9a4 <_dtoa_r+0x74c>
 800e990:	42b3      	cmp	r3, r6
 800e992:	9a00      	ldr	r2, [sp, #0]
 800e994:	bfa8      	it	ge
 800e996:	4633      	movge	r3, r6
 800e998:	1ad2      	subs	r2, r2, r3
 800e99a:	9200      	str	r2, [sp, #0]
 800e99c:	9a06      	ldr	r2, [sp, #24]
 800e99e:	1af6      	subs	r6, r6, r3
 800e9a0:	1ad3      	subs	r3, r2, r3
 800e9a2:	9306      	str	r3, [sp, #24]
 800e9a4:	9b08      	ldr	r3, [sp, #32]
 800e9a6:	b30b      	cbz	r3, 800e9ec <_dtoa_r+0x794>
 800e9a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	f000 80c6 	beq.w	800eb3c <_dtoa_r+0x8e4>
 800e9b0:	2c00      	cmp	r4, #0
 800e9b2:	f000 80c0 	beq.w	800eb36 <_dtoa_r+0x8de>
 800e9b6:	4629      	mov	r1, r5
 800e9b8:	4622      	mov	r2, r4
 800e9ba:	4648      	mov	r0, r9
 800e9bc:	f000 fd12 	bl	800f3e4 <__pow5mult>
 800e9c0:	9a02      	ldr	r2, [sp, #8]
 800e9c2:	4601      	mov	r1, r0
 800e9c4:	4605      	mov	r5, r0
 800e9c6:	4648      	mov	r0, r9
 800e9c8:	f000 fc6a 	bl	800f2a0 <__multiply>
 800e9cc:	9902      	ldr	r1, [sp, #8]
 800e9ce:	4680      	mov	r8, r0
 800e9d0:	4648      	mov	r0, r9
 800e9d2:	f000 fb51 	bl	800f078 <_Bfree>
 800e9d6:	9b08      	ldr	r3, [sp, #32]
 800e9d8:	1b1b      	subs	r3, r3, r4
 800e9da:	9308      	str	r3, [sp, #32]
 800e9dc:	f000 80b1 	beq.w	800eb42 <_dtoa_r+0x8ea>
 800e9e0:	9a08      	ldr	r2, [sp, #32]
 800e9e2:	4641      	mov	r1, r8
 800e9e4:	4648      	mov	r0, r9
 800e9e6:	f000 fcfd 	bl	800f3e4 <__pow5mult>
 800e9ea:	9002      	str	r0, [sp, #8]
 800e9ec:	2101      	movs	r1, #1
 800e9ee:	4648      	mov	r0, r9
 800e9f0:	f000 fc40 	bl	800f274 <__i2b>
 800e9f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e9f6:	4604      	mov	r4, r0
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	f000 81d8 	beq.w	800edae <_dtoa_r+0xb56>
 800e9fe:	461a      	mov	r2, r3
 800ea00:	4601      	mov	r1, r0
 800ea02:	4648      	mov	r0, r9
 800ea04:	f000 fcee 	bl	800f3e4 <__pow5mult>
 800ea08:	9b07      	ldr	r3, [sp, #28]
 800ea0a:	2b01      	cmp	r3, #1
 800ea0c:	4604      	mov	r4, r0
 800ea0e:	f300 809f 	bgt.w	800eb50 <_dtoa_r+0x8f8>
 800ea12:	9b04      	ldr	r3, [sp, #16]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	f040 8097 	bne.w	800eb48 <_dtoa_r+0x8f0>
 800ea1a:	9b05      	ldr	r3, [sp, #20]
 800ea1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	f040 8093 	bne.w	800eb4c <_dtoa_r+0x8f4>
 800ea26:	9b05      	ldr	r3, [sp, #20]
 800ea28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ea2c:	0d1b      	lsrs	r3, r3, #20
 800ea2e:	051b      	lsls	r3, r3, #20
 800ea30:	b133      	cbz	r3, 800ea40 <_dtoa_r+0x7e8>
 800ea32:	9b00      	ldr	r3, [sp, #0]
 800ea34:	3301      	adds	r3, #1
 800ea36:	9300      	str	r3, [sp, #0]
 800ea38:	9b06      	ldr	r3, [sp, #24]
 800ea3a:	3301      	adds	r3, #1
 800ea3c:	9306      	str	r3, [sp, #24]
 800ea3e:	2301      	movs	r3, #1
 800ea40:	9308      	str	r3, [sp, #32]
 800ea42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	f000 81b8 	beq.w	800edba <_dtoa_r+0xb62>
 800ea4a:	6923      	ldr	r3, [r4, #16]
 800ea4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ea50:	6918      	ldr	r0, [r3, #16]
 800ea52:	f000 fbc3 	bl	800f1dc <__hi0bits>
 800ea56:	f1c0 0020 	rsb	r0, r0, #32
 800ea5a:	9b06      	ldr	r3, [sp, #24]
 800ea5c:	4418      	add	r0, r3
 800ea5e:	f010 001f 	ands.w	r0, r0, #31
 800ea62:	f000 8082 	beq.w	800eb6a <_dtoa_r+0x912>
 800ea66:	f1c0 0320 	rsb	r3, r0, #32
 800ea6a:	2b04      	cmp	r3, #4
 800ea6c:	dd73      	ble.n	800eb56 <_dtoa_r+0x8fe>
 800ea6e:	9b00      	ldr	r3, [sp, #0]
 800ea70:	f1c0 001c 	rsb	r0, r0, #28
 800ea74:	4403      	add	r3, r0
 800ea76:	9300      	str	r3, [sp, #0]
 800ea78:	9b06      	ldr	r3, [sp, #24]
 800ea7a:	4403      	add	r3, r0
 800ea7c:	4406      	add	r6, r0
 800ea7e:	9306      	str	r3, [sp, #24]
 800ea80:	9b00      	ldr	r3, [sp, #0]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	dd05      	ble.n	800ea92 <_dtoa_r+0x83a>
 800ea86:	9902      	ldr	r1, [sp, #8]
 800ea88:	461a      	mov	r2, r3
 800ea8a:	4648      	mov	r0, r9
 800ea8c:	f000 fd04 	bl	800f498 <__lshift>
 800ea90:	9002      	str	r0, [sp, #8]
 800ea92:	9b06      	ldr	r3, [sp, #24]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	dd05      	ble.n	800eaa4 <_dtoa_r+0x84c>
 800ea98:	4621      	mov	r1, r4
 800ea9a:	461a      	mov	r2, r3
 800ea9c:	4648      	mov	r0, r9
 800ea9e:	f000 fcfb 	bl	800f498 <__lshift>
 800eaa2:	4604      	mov	r4, r0
 800eaa4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d061      	beq.n	800eb6e <_dtoa_r+0x916>
 800eaaa:	9802      	ldr	r0, [sp, #8]
 800eaac:	4621      	mov	r1, r4
 800eaae:	f000 fd5f 	bl	800f570 <__mcmp>
 800eab2:	2800      	cmp	r0, #0
 800eab4:	da5b      	bge.n	800eb6e <_dtoa_r+0x916>
 800eab6:	2300      	movs	r3, #0
 800eab8:	9902      	ldr	r1, [sp, #8]
 800eaba:	220a      	movs	r2, #10
 800eabc:	4648      	mov	r0, r9
 800eabe:	f000 fafd 	bl	800f0bc <__multadd>
 800eac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eac4:	9002      	str	r0, [sp, #8]
 800eac6:	f107 38ff 	add.w	r8, r7, #4294967295
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	f000 8177 	beq.w	800edbe <_dtoa_r+0xb66>
 800ead0:	4629      	mov	r1, r5
 800ead2:	2300      	movs	r3, #0
 800ead4:	220a      	movs	r2, #10
 800ead6:	4648      	mov	r0, r9
 800ead8:	f000 faf0 	bl	800f0bc <__multadd>
 800eadc:	f1bb 0f00 	cmp.w	fp, #0
 800eae0:	4605      	mov	r5, r0
 800eae2:	dc6f      	bgt.n	800ebc4 <_dtoa_r+0x96c>
 800eae4:	9b07      	ldr	r3, [sp, #28]
 800eae6:	2b02      	cmp	r3, #2
 800eae8:	dc49      	bgt.n	800eb7e <_dtoa_r+0x926>
 800eaea:	e06b      	b.n	800ebc4 <_dtoa_r+0x96c>
 800eaec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800eaee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800eaf2:	e73c      	b.n	800e96e <_dtoa_r+0x716>
 800eaf4:	3fe00000 	.word	0x3fe00000
 800eaf8:	40240000 	.word	0x40240000
 800eafc:	9b03      	ldr	r3, [sp, #12]
 800eafe:	1e5c      	subs	r4, r3, #1
 800eb00:	9b08      	ldr	r3, [sp, #32]
 800eb02:	42a3      	cmp	r3, r4
 800eb04:	db09      	blt.n	800eb1a <_dtoa_r+0x8c2>
 800eb06:	1b1c      	subs	r4, r3, r4
 800eb08:	9b03      	ldr	r3, [sp, #12]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	f6bf af30 	bge.w	800e970 <_dtoa_r+0x718>
 800eb10:	9b00      	ldr	r3, [sp, #0]
 800eb12:	9a03      	ldr	r2, [sp, #12]
 800eb14:	1a9e      	subs	r6, r3, r2
 800eb16:	2300      	movs	r3, #0
 800eb18:	e72b      	b.n	800e972 <_dtoa_r+0x71a>
 800eb1a:	9b08      	ldr	r3, [sp, #32]
 800eb1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eb1e:	9408      	str	r4, [sp, #32]
 800eb20:	1ae3      	subs	r3, r4, r3
 800eb22:	441a      	add	r2, r3
 800eb24:	9e00      	ldr	r6, [sp, #0]
 800eb26:	9b03      	ldr	r3, [sp, #12]
 800eb28:	920d      	str	r2, [sp, #52]	@ 0x34
 800eb2a:	2400      	movs	r4, #0
 800eb2c:	e721      	b.n	800e972 <_dtoa_r+0x71a>
 800eb2e:	9c08      	ldr	r4, [sp, #32]
 800eb30:	9e00      	ldr	r6, [sp, #0]
 800eb32:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800eb34:	e728      	b.n	800e988 <_dtoa_r+0x730>
 800eb36:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800eb3a:	e751      	b.n	800e9e0 <_dtoa_r+0x788>
 800eb3c:	9a08      	ldr	r2, [sp, #32]
 800eb3e:	9902      	ldr	r1, [sp, #8]
 800eb40:	e750      	b.n	800e9e4 <_dtoa_r+0x78c>
 800eb42:	f8cd 8008 	str.w	r8, [sp, #8]
 800eb46:	e751      	b.n	800e9ec <_dtoa_r+0x794>
 800eb48:	2300      	movs	r3, #0
 800eb4a:	e779      	b.n	800ea40 <_dtoa_r+0x7e8>
 800eb4c:	9b04      	ldr	r3, [sp, #16]
 800eb4e:	e777      	b.n	800ea40 <_dtoa_r+0x7e8>
 800eb50:	2300      	movs	r3, #0
 800eb52:	9308      	str	r3, [sp, #32]
 800eb54:	e779      	b.n	800ea4a <_dtoa_r+0x7f2>
 800eb56:	d093      	beq.n	800ea80 <_dtoa_r+0x828>
 800eb58:	9a00      	ldr	r2, [sp, #0]
 800eb5a:	331c      	adds	r3, #28
 800eb5c:	441a      	add	r2, r3
 800eb5e:	9200      	str	r2, [sp, #0]
 800eb60:	9a06      	ldr	r2, [sp, #24]
 800eb62:	441a      	add	r2, r3
 800eb64:	441e      	add	r6, r3
 800eb66:	9206      	str	r2, [sp, #24]
 800eb68:	e78a      	b.n	800ea80 <_dtoa_r+0x828>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	e7f4      	b.n	800eb58 <_dtoa_r+0x900>
 800eb6e:	9b03      	ldr	r3, [sp, #12]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	46b8      	mov	r8, r7
 800eb74:	dc20      	bgt.n	800ebb8 <_dtoa_r+0x960>
 800eb76:	469b      	mov	fp, r3
 800eb78:	9b07      	ldr	r3, [sp, #28]
 800eb7a:	2b02      	cmp	r3, #2
 800eb7c:	dd1e      	ble.n	800ebbc <_dtoa_r+0x964>
 800eb7e:	f1bb 0f00 	cmp.w	fp, #0
 800eb82:	f47f adb1 	bne.w	800e6e8 <_dtoa_r+0x490>
 800eb86:	4621      	mov	r1, r4
 800eb88:	465b      	mov	r3, fp
 800eb8a:	2205      	movs	r2, #5
 800eb8c:	4648      	mov	r0, r9
 800eb8e:	f000 fa95 	bl	800f0bc <__multadd>
 800eb92:	4601      	mov	r1, r0
 800eb94:	4604      	mov	r4, r0
 800eb96:	9802      	ldr	r0, [sp, #8]
 800eb98:	f000 fcea 	bl	800f570 <__mcmp>
 800eb9c:	2800      	cmp	r0, #0
 800eb9e:	f77f ada3 	ble.w	800e6e8 <_dtoa_r+0x490>
 800eba2:	4656      	mov	r6, sl
 800eba4:	2331      	movs	r3, #49	@ 0x31
 800eba6:	f806 3b01 	strb.w	r3, [r6], #1
 800ebaa:	f108 0801 	add.w	r8, r8, #1
 800ebae:	e59f      	b.n	800e6f0 <_dtoa_r+0x498>
 800ebb0:	9c03      	ldr	r4, [sp, #12]
 800ebb2:	46b8      	mov	r8, r7
 800ebb4:	4625      	mov	r5, r4
 800ebb6:	e7f4      	b.n	800eba2 <_dtoa_r+0x94a>
 800ebb8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ebbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	f000 8101 	beq.w	800edc6 <_dtoa_r+0xb6e>
 800ebc4:	2e00      	cmp	r6, #0
 800ebc6:	dd05      	ble.n	800ebd4 <_dtoa_r+0x97c>
 800ebc8:	4629      	mov	r1, r5
 800ebca:	4632      	mov	r2, r6
 800ebcc:	4648      	mov	r0, r9
 800ebce:	f000 fc63 	bl	800f498 <__lshift>
 800ebd2:	4605      	mov	r5, r0
 800ebd4:	9b08      	ldr	r3, [sp, #32]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d05c      	beq.n	800ec94 <_dtoa_r+0xa3c>
 800ebda:	6869      	ldr	r1, [r5, #4]
 800ebdc:	4648      	mov	r0, r9
 800ebde:	f000 fa0b 	bl	800eff8 <_Balloc>
 800ebe2:	4606      	mov	r6, r0
 800ebe4:	b928      	cbnz	r0, 800ebf2 <_dtoa_r+0x99a>
 800ebe6:	4b82      	ldr	r3, [pc, #520]	@ (800edf0 <_dtoa_r+0xb98>)
 800ebe8:	4602      	mov	r2, r0
 800ebea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ebee:	f7ff bb4a 	b.w	800e286 <_dtoa_r+0x2e>
 800ebf2:	692a      	ldr	r2, [r5, #16]
 800ebf4:	3202      	adds	r2, #2
 800ebf6:	0092      	lsls	r2, r2, #2
 800ebf8:	f105 010c 	add.w	r1, r5, #12
 800ebfc:	300c      	adds	r0, #12
 800ebfe:	f7ff fa8c 	bl	800e11a <memcpy>
 800ec02:	2201      	movs	r2, #1
 800ec04:	4631      	mov	r1, r6
 800ec06:	4648      	mov	r0, r9
 800ec08:	f000 fc46 	bl	800f498 <__lshift>
 800ec0c:	f10a 0301 	add.w	r3, sl, #1
 800ec10:	9300      	str	r3, [sp, #0]
 800ec12:	eb0a 030b 	add.w	r3, sl, fp
 800ec16:	9308      	str	r3, [sp, #32]
 800ec18:	9b04      	ldr	r3, [sp, #16]
 800ec1a:	f003 0301 	and.w	r3, r3, #1
 800ec1e:	462f      	mov	r7, r5
 800ec20:	9306      	str	r3, [sp, #24]
 800ec22:	4605      	mov	r5, r0
 800ec24:	9b00      	ldr	r3, [sp, #0]
 800ec26:	9802      	ldr	r0, [sp, #8]
 800ec28:	4621      	mov	r1, r4
 800ec2a:	f103 3bff 	add.w	fp, r3, #4294967295
 800ec2e:	f7ff fa89 	bl	800e144 <quorem>
 800ec32:	4603      	mov	r3, r0
 800ec34:	3330      	adds	r3, #48	@ 0x30
 800ec36:	9003      	str	r0, [sp, #12]
 800ec38:	4639      	mov	r1, r7
 800ec3a:	9802      	ldr	r0, [sp, #8]
 800ec3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec3e:	f000 fc97 	bl	800f570 <__mcmp>
 800ec42:	462a      	mov	r2, r5
 800ec44:	9004      	str	r0, [sp, #16]
 800ec46:	4621      	mov	r1, r4
 800ec48:	4648      	mov	r0, r9
 800ec4a:	f000 fcad 	bl	800f5a8 <__mdiff>
 800ec4e:	68c2      	ldr	r2, [r0, #12]
 800ec50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec52:	4606      	mov	r6, r0
 800ec54:	bb02      	cbnz	r2, 800ec98 <_dtoa_r+0xa40>
 800ec56:	4601      	mov	r1, r0
 800ec58:	9802      	ldr	r0, [sp, #8]
 800ec5a:	f000 fc89 	bl	800f570 <__mcmp>
 800ec5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec60:	4602      	mov	r2, r0
 800ec62:	4631      	mov	r1, r6
 800ec64:	4648      	mov	r0, r9
 800ec66:	920c      	str	r2, [sp, #48]	@ 0x30
 800ec68:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec6a:	f000 fa05 	bl	800f078 <_Bfree>
 800ec6e:	9b07      	ldr	r3, [sp, #28]
 800ec70:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ec72:	9e00      	ldr	r6, [sp, #0]
 800ec74:	ea42 0103 	orr.w	r1, r2, r3
 800ec78:	9b06      	ldr	r3, [sp, #24]
 800ec7a:	4319      	orrs	r1, r3
 800ec7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec7e:	d10d      	bne.n	800ec9c <_dtoa_r+0xa44>
 800ec80:	2b39      	cmp	r3, #57	@ 0x39
 800ec82:	d027      	beq.n	800ecd4 <_dtoa_r+0xa7c>
 800ec84:	9a04      	ldr	r2, [sp, #16]
 800ec86:	2a00      	cmp	r2, #0
 800ec88:	dd01      	ble.n	800ec8e <_dtoa_r+0xa36>
 800ec8a:	9b03      	ldr	r3, [sp, #12]
 800ec8c:	3331      	adds	r3, #49	@ 0x31
 800ec8e:	f88b 3000 	strb.w	r3, [fp]
 800ec92:	e52e      	b.n	800e6f2 <_dtoa_r+0x49a>
 800ec94:	4628      	mov	r0, r5
 800ec96:	e7b9      	b.n	800ec0c <_dtoa_r+0x9b4>
 800ec98:	2201      	movs	r2, #1
 800ec9a:	e7e2      	b.n	800ec62 <_dtoa_r+0xa0a>
 800ec9c:	9904      	ldr	r1, [sp, #16]
 800ec9e:	2900      	cmp	r1, #0
 800eca0:	db04      	blt.n	800ecac <_dtoa_r+0xa54>
 800eca2:	9807      	ldr	r0, [sp, #28]
 800eca4:	4301      	orrs	r1, r0
 800eca6:	9806      	ldr	r0, [sp, #24]
 800eca8:	4301      	orrs	r1, r0
 800ecaa:	d120      	bne.n	800ecee <_dtoa_r+0xa96>
 800ecac:	2a00      	cmp	r2, #0
 800ecae:	ddee      	ble.n	800ec8e <_dtoa_r+0xa36>
 800ecb0:	9902      	ldr	r1, [sp, #8]
 800ecb2:	9300      	str	r3, [sp, #0]
 800ecb4:	2201      	movs	r2, #1
 800ecb6:	4648      	mov	r0, r9
 800ecb8:	f000 fbee 	bl	800f498 <__lshift>
 800ecbc:	4621      	mov	r1, r4
 800ecbe:	9002      	str	r0, [sp, #8]
 800ecc0:	f000 fc56 	bl	800f570 <__mcmp>
 800ecc4:	2800      	cmp	r0, #0
 800ecc6:	9b00      	ldr	r3, [sp, #0]
 800ecc8:	dc02      	bgt.n	800ecd0 <_dtoa_r+0xa78>
 800ecca:	d1e0      	bne.n	800ec8e <_dtoa_r+0xa36>
 800eccc:	07da      	lsls	r2, r3, #31
 800ecce:	d5de      	bpl.n	800ec8e <_dtoa_r+0xa36>
 800ecd0:	2b39      	cmp	r3, #57	@ 0x39
 800ecd2:	d1da      	bne.n	800ec8a <_dtoa_r+0xa32>
 800ecd4:	2339      	movs	r3, #57	@ 0x39
 800ecd6:	f88b 3000 	strb.w	r3, [fp]
 800ecda:	4633      	mov	r3, r6
 800ecdc:	461e      	mov	r6, r3
 800ecde:	3b01      	subs	r3, #1
 800ece0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ece4:	2a39      	cmp	r2, #57	@ 0x39
 800ece6:	d04e      	beq.n	800ed86 <_dtoa_r+0xb2e>
 800ece8:	3201      	adds	r2, #1
 800ecea:	701a      	strb	r2, [r3, #0]
 800ecec:	e501      	b.n	800e6f2 <_dtoa_r+0x49a>
 800ecee:	2a00      	cmp	r2, #0
 800ecf0:	dd03      	ble.n	800ecfa <_dtoa_r+0xaa2>
 800ecf2:	2b39      	cmp	r3, #57	@ 0x39
 800ecf4:	d0ee      	beq.n	800ecd4 <_dtoa_r+0xa7c>
 800ecf6:	3301      	adds	r3, #1
 800ecf8:	e7c9      	b.n	800ec8e <_dtoa_r+0xa36>
 800ecfa:	9a00      	ldr	r2, [sp, #0]
 800ecfc:	9908      	ldr	r1, [sp, #32]
 800ecfe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ed02:	428a      	cmp	r2, r1
 800ed04:	d028      	beq.n	800ed58 <_dtoa_r+0xb00>
 800ed06:	9902      	ldr	r1, [sp, #8]
 800ed08:	2300      	movs	r3, #0
 800ed0a:	220a      	movs	r2, #10
 800ed0c:	4648      	mov	r0, r9
 800ed0e:	f000 f9d5 	bl	800f0bc <__multadd>
 800ed12:	42af      	cmp	r7, r5
 800ed14:	9002      	str	r0, [sp, #8]
 800ed16:	f04f 0300 	mov.w	r3, #0
 800ed1a:	f04f 020a 	mov.w	r2, #10
 800ed1e:	4639      	mov	r1, r7
 800ed20:	4648      	mov	r0, r9
 800ed22:	d107      	bne.n	800ed34 <_dtoa_r+0xadc>
 800ed24:	f000 f9ca 	bl	800f0bc <__multadd>
 800ed28:	4607      	mov	r7, r0
 800ed2a:	4605      	mov	r5, r0
 800ed2c:	9b00      	ldr	r3, [sp, #0]
 800ed2e:	3301      	adds	r3, #1
 800ed30:	9300      	str	r3, [sp, #0]
 800ed32:	e777      	b.n	800ec24 <_dtoa_r+0x9cc>
 800ed34:	f000 f9c2 	bl	800f0bc <__multadd>
 800ed38:	4629      	mov	r1, r5
 800ed3a:	4607      	mov	r7, r0
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	220a      	movs	r2, #10
 800ed40:	4648      	mov	r0, r9
 800ed42:	f000 f9bb 	bl	800f0bc <__multadd>
 800ed46:	4605      	mov	r5, r0
 800ed48:	e7f0      	b.n	800ed2c <_dtoa_r+0xad4>
 800ed4a:	f1bb 0f00 	cmp.w	fp, #0
 800ed4e:	bfcc      	ite	gt
 800ed50:	465e      	movgt	r6, fp
 800ed52:	2601      	movle	r6, #1
 800ed54:	4456      	add	r6, sl
 800ed56:	2700      	movs	r7, #0
 800ed58:	9902      	ldr	r1, [sp, #8]
 800ed5a:	9300      	str	r3, [sp, #0]
 800ed5c:	2201      	movs	r2, #1
 800ed5e:	4648      	mov	r0, r9
 800ed60:	f000 fb9a 	bl	800f498 <__lshift>
 800ed64:	4621      	mov	r1, r4
 800ed66:	9002      	str	r0, [sp, #8]
 800ed68:	f000 fc02 	bl	800f570 <__mcmp>
 800ed6c:	2800      	cmp	r0, #0
 800ed6e:	dcb4      	bgt.n	800ecda <_dtoa_r+0xa82>
 800ed70:	d102      	bne.n	800ed78 <_dtoa_r+0xb20>
 800ed72:	9b00      	ldr	r3, [sp, #0]
 800ed74:	07db      	lsls	r3, r3, #31
 800ed76:	d4b0      	bmi.n	800ecda <_dtoa_r+0xa82>
 800ed78:	4633      	mov	r3, r6
 800ed7a:	461e      	mov	r6, r3
 800ed7c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ed80:	2a30      	cmp	r2, #48	@ 0x30
 800ed82:	d0fa      	beq.n	800ed7a <_dtoa_r+0xb22>
 800ed84:	e4b5      	b.n	800e6f2 <_dtoa_r+0x49a>
 800ed86:	459a      	cmp	sl, r3
 800ed88:	d1a8      	bne.n	800ecdc <_dtoa_r+0xa84>
 800ed8a:	2331      	movs	r3, #49	@ 0x31
 800ed8c:	f108 0801 	add.w	r8, r8, #1
 800ed90:	f88a 3000 	strb.w	r3, [sl]
 800ed94:	e4ad      	b.n	800e6f2 <_dtoa_r+0x49a>
 800ed96:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ed98:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800edf4 <_dtoa_r+0xb9c>
 800ed9c:	b11b      	cbz	r3, 800eda6 <_dtoa_r+0xb4e>
 800ed9e:	f10a 0308 	add.w	r3, sl, #8
 800eda2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800eda4:	6013      	str	r3, [r2, #0]
 800eda6:	4650      	mov	r0, sl
 800eda8:	b017      	add	sp, #92	@ 0x5c
 800edaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edae:	9b07      	ldr	r3, [sp, #28]
 800edb0:	2b01      	cmp	r3, #1
 800edb2:	f77f ae2e 	ble.w	800ea12 <_dtoa_r+0x7ba>
 800edb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800edb8:	9308      	str	r3, [sp, #32]
 800edba:	2001      	movs	r0, #1
 800edbc:	e64d      	b.n	800ea5a <_dtoa_r+0x802>
 800edbe:	f1bb 0f00 	cmp.w	fp, #0
 800edc2:	f77f aed9 	ble.w	800eb78 <_dtoa_r+0x920>
 800edc6:	4656      	mov	r6, sl
 800edc8:	9802      	ldr	r0, [sp, #8]
 800edca:	4621      	mov	r1, r4
 800edcc:	f7ff f9ba 	bl	800e144 <quorem>
 800edd0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800edd4:	f806 3b01 	strb.w	r3, [r6], #1
 800edd8:	eba6 020a 	sub.w	r2, r6, sl
 800eddc:	4593      	cmp	fp, r2
 800edde:	ddb4      	ble.n	800ed4a <_dtoa_r+0xaf2>
 800ede0:	9902      	ldr	r1, [sp, #8]
 800ede2:	2300      	movs	r3, #0
 800ede4:	220a      	movs	r2, #10
 800ede6:	4648      	mov	r0, r9
 800ede8:	f000 f968 	bl	800f0bc <__multadd>
 800edec:	9002      	str	r0, [sp, #8]
 800edee:	e7eb      	b.n	800edc8 <_dtoa_r+0xb70>
 800edf0:	08011ad2 	.word	0x08011ad2
 800edf4:	08011a56 	.word	0x08011a56

0800edf8 <_free_r>:
 800edf8:	b538      	push	{r3, r4, r5, lr}
 800edfa:	4605      	mov	r5, r0
 800edfc:	2900      	cmp	r1, #0
 800edfe:	d041      	beq.n	800ee84 <_free_r+0x8c>
 800ee00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee04:	1f0c      	subs	r4, r1, #4
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	bfb8      	it	lt
 800ee0a:	18e4      	addlt	r4, r4, r3
 800ee0c:	f000 f8e8 	bl	800efe0 <__malloc_lock>
 800ee10:	4a1d      	ldr	r2, [pc, #116]	@ (800ee88 <_free_r+0x90>)
 800ee12:	6813      	ldr	r3, [r2, #0]
 800ee14:	b933      	cbnz	r3, 800ee24 <_free_r+0x2c>
 800ee16:	6063      	str	r3, [r4, #4]
 800ee18:	6014      	str	r4, [r2, #0]
 800ee1a:	4628      	mov	r0, r5
 800ee1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee20:	f000 b8e4 	b.w	800efec <__malloc_unlock>
 800ee24:	42a3      	cmp	r3, r4
 800ee26:	d908      	bls.n	800ee3a <_free_r+0x42>
 800ee28:	6820      	ldr	r0, [r4, #0]
 800ee2a:	1821      	adds	r1, r4, r0
 800ee2c:	428b      	cmp	r3, r1
 800ee2e:	bf01      	itttt	eq
 800ee30:	6819      	ldreq	r1, [r3, #0]
 800ee32:	685b      	ldreq	r3, [r3, #4]
 800ee34:	1809      	addeq	r1, r1, r0
 800ee36:	6021      	streq	r1, [r4, #0]
 800ee38:	e7ed      	b.n	800ee16 <_free_r+0x1e>
 800ee3a:	461a      	mov	r2, r3
 800ee3c:	685b      	ldr	r3, [r3, #4]
 800ee3e:	b10b      	cbz	r3, 800ee44 <_free_r+0x4c>
 800ee40:	42a3      	cmp	r3, r4
 800ee42:	d9fa      	bls.n	800ee3a <_free_r+0x42>
 800ee44:	6811      	ldr	r1, [r2, #0]
 800ee46:	1850      	adds	r0, r2, r1
 800ee48:	42a0      	cmp	r0, r4
 800ee4a:	d10b      	bne.n	800ee64 <_free_r+0x6c>
 800ee4c:	6820      	ldr	r0, [r4, #0]
 800ee4e:	4401      	add	r1, r0
 800ee50:	1850      	adds	r0, r2, r1
 800ee52:	4283      	cmp	r3, r0
 800ee54:	6011      	str	r1, [r2, #0]
 800ee56:	d1e0      	bne.n	800ee1a <_free_r+0x22>
 800ee58:	6818      	ldr	r0, [r3, #0]
 800ee5a:	685b      	ldr	r3, [r3, #4]
 800ee5c:	6053      	str	r3, [r2, #4]
 800ee5e:	4408      	add	r0, r1
 800ee60:	6010      	str	r0, [r2, #0]
 800ee62:	e7da      	b.n	800ee1a <_free_r+0x22>
 800ee64:	d902      	bls.n	800ee6c <_free_r+0x74>
 800ee66:	230c      	movs	r3, #12
 800ee68:	602b      	str	r3, [r5, #0]
 800ee6a:	e7d6      	b.n	800ee1a <_free_r+0x22>
 800ee6c:	6820      	ldr	r0, [r4, #0]
 800ee6e:	1821      	adds	r1, r4, r0
 800ee70:	428b      	cmp	r3, r1
 800ee72:	bf04      	itt	eq
 800ee74:	6819      	ldreq	r1, [r3, #0]
 800ee76:	685b      	ldreq	r3, [r3, #4]
 800ee78:	6063      	str	r3, [r4, #4]
 800ee7a:	bf04      	itt	eq
 800ee7c:	1809      	addeq	r1, r1, r0
 800ee7e:	6021      	streq	r1, [r4, #0]
 800ee80:	6054      	str	r4, [r2, #4]
 800ee82:	e7ca      	b.n	800ee1a <_free_r+0x22>
 800ee84:	bd38      	pop	{r3, r4, r5, pc}
 800ee86:	bf00      	nop
 800ee88:	20002284 	.word	0x20002284

0800ee8c <malloc>:
 800ee8c:	4b02      	ldr	r3, [pc, #8]	@ (800ee98 <malloc+0xc>)
 800ee8e:	4601      	mov	r1, r0
 800ee90:	6818      	ldr	r0, [r3, #0]
 800ee92:	f000 b825 	b.w	800eee0 <_malloc_r>
 800ee96:	bf00      	nop
 800ee98:	20000190 	.word	0x20000190

0800ee9c <sbrk_aligned>:
 800ee9c:	b570      	push	{r4, r5, r6, lr}
 800ee9e:	4e0f      	ldr	r6, [pc, #60]	@ (800eedc <sbrk_aligned+0x40>)
 800eea0:	460c      	mov	r4, r1
 800eea2:	6831      	ldr	r1, [r6, #0]
 800eea4:	4605      	mov	r5, r0
 800eea6:	b911      	cbnz	r1, 800eeae <sbrk_aligned+0x12>
 800eea8:	f001 ffda 	bl	8010e60 <_sbrk_r>
 800eeac:	6030      	str	r0, [r6, #0]
 800eeae:	4621      	mov	r1, r4
 800eeb0:	4628      	mov	r0, r5
 800eeb2:	f001 ffd5 	bl	8010e60 <_sbrk_r>
 800eeb6:	1c43      	adds	r3, r0, #1
 800eeb8:	d103      	bne.n	800eec2 <sbrk_aligned+0x26>
 800eeba:	f04f 34ff 	mov.w	r4, #4294967295
 800eebe:	4620      	mov	r0, r4
 800eec0:	bd70      	pop	{r4, r5, r6, pc}
 800eec2:	1cc4      	adds	r4, r0, #3
 800eec4:	f024 0403 	bic.w	r4, r4, #3
 800eec8:	42a0      	cmp	r0, r4
 800eeca:	d0f8      	beq.n	800eebe <sbrk_aligned+0x22>
 800eecc:	1a21      	subs	r1, r4, r0
 800eece:	4628      	mov	r0, r5
 800eed0:	f001 ffc6 	bl	8010e60 <_sbrk_r>
 800eed4:	3001      	adds	r0, #1
 800eed6:	d1f2      	bne.n	800eebe <sbrk_aligned+0x22>
 800eed8:	e7ef      	b.n	800eeba <sbrk_aligned+0x1e>
 800eeda:	bf00      	nop
 800eedc:	20002280 	.word	0x20002280

0800eee0 <_malloc_r>:
 800eee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eee4:	1ccd      	adds	r5, r1, #3
 800eee6:	f025 0503 	bic.w	r5, r5, #3
 800eeea:	3508      	adds	r5, #8
 800eeec:	2d0c      	cmp	r5, #12
 800eeee:	bf38      	it	cc
 800eef0:	250c      	movcc	r5, #12
 800eef2:	2d00      	cmp	r5, #0
 800eef4:	4606      	mov	r6, r0
 800eef6:	db01      	blt.n	800eefc <_malloc_r+0x1c>
 800eef8:	42a9      	cmp	r1, r5
 800eefa:	d904      	bls.n	800ef06 <_malloc_r+0x26>
 800eefc:	230c      	movs	r3, #12
 800eefe:	6033      	str	r3, [r6, #0]
 800ef00:	2000      	movs	r0, #0
 800ef02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800efdc <_malloc_r+0xfc>
 800ef0a:	f000 f869 	bl	800efe0 <__malloc_lock>
 800ef0e:	f8d8 3000 	ldr.w	r3, [r8]
 800ef12:	461c      	mov	r4, r3
 800ef14:	bb44      	cbnz	r4, 800ef68 <_malloc_r+0x88>
 800ef16:	4629      	mov	r1, r5
 800ef18:	4630      	mov	r0, r6
 800ef1a:	f7ff ffbf 	bl	800ee9c <sbrk_aligned>
 800ef1e:	1c43      	adds	r3, r0, #1
 800ef20:	4604      	mov	r4, r0
 800ef22:	d158      	bne.n	800efd6 <_malloc_r+0xf6>
 800ef24:	f8d8 4000 	ldr.w	r4, [r8]
 800ef28:	4627      	mov	r7, r4
 800ef2a:	2f00      	cmp	r7, #0
 800ef2c:	d143      	bne.n	800efb6 <_malloc_r+0xd6>
 800ef2e:	2c00      	cmp	r4, #0
 800ef30:	d04b      	beq.n	800efca <_malloc_r+0xea>
 800ef32:	6823      	ldr	r3, [r4, #0]
 800ef34:	4639      	mov	r1, r7
 800ef36:	4630      	mov	r0, r6
 800ef38:	eb04 0903 	add.w	r9, r4, r3
 800ef3c:	f001 ff90 	bl	8010e60 <_sbrk_r>
 800ef40:	4581      	cmp	r9, r0
 800ef42:	d142      	bne.n	800efca <_malloc_r+0xea>
 800ef44:	6821      	ldr	r1, [r4, #0]
 800ef46:	1a6d      	subs	r5, r5, r1
 800ef48:	4629      	mov	r1, r5
 800ef4a:	4630      	mov	r0, r6
 800ef4c:	f7ff ffa6 	bl	800ee9c <sbrk_aligned>
 800ef50:	3001      	adds	r0, #1
 800ef52:	d03a      	beq.n	800efca <_malloc_r+0xea>
 800ef54:	6823      	ldr	r3, [r4, #0]
 800ef56:	442b      	add	r3, r5
 800ef58:	6023      	str	r3, [r4, #0]
 800ef5a:	f8d8 3000 	ldr.w	r3, [r8]
 800ef5e:	685a      	ldr	r2, [r3, #4]
 800ef60:	bb62      	cbnz	r2, 800efbc <_malloc_r+0xdc>
 800ef62:	f8c8 7000 	str.w	r7, [r8]
 800ef66:	e00f      	b.n	800ef88 <_malloc_r+0xa8>
 800ef68:	6822      	ldr	r2, [r4, #0]
 800ef6a:	1b52      	subs	r2, r2, r5
 800ef6c:	d420      	bmi.n	800efb0 <_malloc_r+0xd0>
 800ef6e:	2a0b      	cmp	r2, #11
 800ef70:	d917      	bls.n	800efa2 <_malloc_r+0xc2>
 800ef72:	1961      	adds	r1, r4, r5
 800ef74:	42a3      	cmp	r3, r4
 800ef76:	6025      	str	r5, [r4, #0]
 800ef78:	bf18      	it	ne
 800ef7a:	6059      	strne	r1, [r3, #4]
 800ef7c:	6863      	ldr	r3, [r4, #4]
 800ef7e:	bf08      	it	eq
 800ef80:	f8c8 1000 	streq.w	r1, [r8]
 800ef84:	5162      	str	r2, [r4, r5]
 800ef86:	604b      	str	r3, [r1, #4]
 800ef88:	4630      	mov	r0, r6
 800ef8a:	f000 f82f 	bl	800efec <__malloc_unlock>
 800ef8e:	f104 000b 	add.w	r0, r4, #11
 800ef92:	1d23      	adds	r3, r4, #4
 800ef94:	f020 0007 	bic.w	r0, r0, #7
 800ef98:	1ac2      	subs	r2, r0, r3
 800ef9a:	bf1c      	itt	ne
 800ef9c:	1a1b      	subne	r3, r3, r0
 800ef9e:	50a3      	strne	r3, [r4, r2]
 800efa0:	e7af      	b.n	800ef02 <_malloc_r+0x22>
 800efa2:	6862      	ldr	r2, [r4, #4]
 800efa4:	42a3      	cmp	r3, r4
 800efa6:	bf0c      	ite	eq
 800efa8:	f8c8 2000 	streq.w	r2, [r8]
 800efac:	605a      	strne	r2, [r3, #4]
 800efae:	e7eb      	b.n	800ef88 <_malloc_r+0xa8>
 800efb0:	4623      	mov	r3, r4
 800efb2:	6864      	ldr	r4, [r4, #4]
 800efb4:	e7ae      	b.n	800ef14 <_malloc_r+0x34>
 800efb6:	463c      	mov	r4, r7
 800efb8:	687f      	ldr	r7, [r7, #4]
 800efba:	e7b6      	b.n	800ef2a <_malloc_r+0x4a>
 800efbc:	461a      	mov	r2, r3
 800efbe:	685b      	ldr	r3, [r3, #4]
 800efc0:	42a3      	cmp	r3, r4
 800efc2:	d1fb      	bne.n	800efbc <_malloc_r+0xdc>
 800efc4:	2300      	movs	r3, #0
 800efc6:	6053      	str	r3, [r2, #4]
 800efc8:	e7de      	b.n	800ef88 <_malloc_r+0xa8>
 800efca:	230c      	movs	r3, #12
 800efcc:	6033      	str	r3, [r6, #0]
 800efce:	4630      	mov	r0, r6
 800efd0:	f000 f80c 	bl	800efec <__malloc_unlock>
 800efd4:	e794      	b.n	800ef00 <_malloc_r+0x20>
 800efd6:	6005      	str	r5, [r0, #0]
 800efd8:	e7d6      	b.n	800ef88 <_malloc_r+0xa8>
 800efda:	bf00      	nop
 800efdc:	20002284 	.word	0x20002284

0800efe0 <__malloc_lock>:
 800efe0:	4801      	ldr	r0, [pc, #4]	@ (800efe8 <__malloc_lock+0x8>)
 800efe2:	f7ff b898 	b.w	800e116 <__retarget_lock_acquire_recursive>
 800efe6:	bf00      	nop
 800efe8:	2000227c 	.word	0x2000227c

0800efec <__malloc_unlock>:
 800efec:	4801      	ldr	r0, [pc, #4]	@ (800eff4 <__malloc_unlock+0x8>)
 800efee:	f7ff b893 	b.w	800e118 <__retarget_lock_release_recursive>
 800eff2:	bf00      	nop
 800eff4:	2000227c 	.word	0x2000227c

0800eff8 <_Balloc>:
 800eff8:	b570      	push	{r4, r5, r6, lr}
 800effa:	69c6      	ldr	r6, [r0, #28]
 800effc:	4604      	mov	r4, r0
 800effe:	460d      	mov	r5, r1
 800f000:	b976      	cbnz	r6, 800f020 <_Balloc+0x28>
 800f002:	2010      	movs	r0, #16
 800f004:	f7ff ff42 	bl	800ee8c <malloc>
 800f008:	4602      	mov	r2, r0
 800f00a:	61e0      	str	r0, [r4, #28]
 800f00c:	b920      	cbnz	r0, 800f018 <_Balloc+0x20>
 800f00e:	4b18      	ldr	r3, [pc, #96]	@ (800f070 <_Balloc+0x78>)
 800f010:	4818      	ldr	r0, [pc, #96]	@ (800f074 <_Balloc+0x7c>)
 800f012:	216b      	movs	r1, #107	@ 0x6b
 800f014:	f001 ff3c 	bl	8010e90 <__assert_func>
 800f018:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f01c:	6006      	str	r6, [r0, #0]
 800f01e:	60c6      	str	r6, [r0, #12]
 800f020:	69e6      	ldr	r6, [r4, #28]
 800f022:	68f3      	ldr	r3, [r6, #12]
 800f024:	b183      	cbz	r3, 800f048 <_Balloc+0x50>
 800f026:	69e3      	ldr	r3, [r4, #28]
 800f028:	68db      	ldr	r3, [r3, #12]
 800f02a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f02e:	b9b8      	cbnz	r0, 800f060 <_Balloc+0x68>
 800f030:	2101      	movs	r1, #1
 800f032:	fa01 f605 	lsl.w	r6, r1, r5
 800f036:	1d72      	adds	r2, r6, #5
 800f038:	0092      	lsls	r2, r2, #2
 800f03a:	4620      	mov	r0, r4
 800f03c:	f001 ff46 	bl	8010ecc <_calloc_r>
 800f040:	b160      	cbz	r0, 800f05c <_Balloc+0x64>
 800f042:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f046:	e00e      	b.n	800f066 <_Balloc+0x6e>
 800f048:	2221      	movs	r2, #33	@ 0x21
 800f04a:	2104      	movs	r1, #4
 800f04c:	4620      	mov	r0, r4
 800f04e:	f001 ff3d 	bl	8010ecc <_calloc_r>
 800f052:	69e3      	ldr	r3, [r4, #28]
 800f054:	60f0      	str	r0, [r6, #12]
 800f056:	68db      	ldr	r3, [r3, #12]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d1e4      	bne.n	800f026 <_Balloc+0x2e>
 800f05c:	2000      	movs	r0, #0
 800f05e:	bd70      	pop	{r4, r5, r6, pc}
 800f060:	6802      	ldr	r2, [r0, #0]
 800f062:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f066:	2300      	movs	r3, #0
 800f068:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f06c:	e7f7      	b.n	800f05e <_Balloc+0x66>
 800f06e:	bf00      	nop
 800f070:	08011a63 	.word	0x08011a63
 800f074:	08011ae3 	.word	0x08011ae3

0800f078 <_Bfree>:
 800f078:	b570      	push	{r4, r5, r6, lr}
 800f07a:	69c6      	ldr	r6, [r0, #28]
 800f07c:	4605      	mov	r5, r0
 800f07e:	460c      	mov	r4, r1
 800f080:	b976      	cbnz	r6, 800f0a0 <_Bfree+0x28>
 800f082:	2010      	movs	r0, #16
 800f084:	f7ff ff02 	bl	800ee8c <malloc>
 800f088:	4602      	mov	r2, r0
 800f08a:	61e8      	str	r0, [r5, #28]
 800f08c:	b920      	cbnz	r0, 800f098 <_Bfree+0x20>
 800f08e:	4b09      	ldr	r3, [pc, #36]	@ (800f0b4 <_Bfree+0x3c>)
 800f090:	4809      	ldr	r0, [pc, #36]	@ (800f0b8 <_Bfree+0x40>)
 800f092:	218f      	movs	r1, #143	@ 0x8f
 800f094:	f001 fefc 	bl	8010e90 <__assert_func>
 800f098:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f09c:	6006      	str	r6, [r0, #0]
 800f09e:	60c6      	str	r6, [r0, #12]
 800f0a0:	b13c      	cbz	r4, 800f0b2 <_Bfree+0x3a>
 800f0a2:	69eb      	ldr	r3, [r5, #28]
 800f0a4:	6862      	ldr	r2, [r4, #4]
 800f0a6:	68db      	ldr	r3, [r3, #12]
 800f0a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f0ac:	6021      	str	r1, [r4, #0]
 800f0ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f0b2:	bd70      	pop	{r4, r5, r6, pc}
 800f0b4:	08011a63 	.word	0x08011a63
 800f0b8:	08011ae3 	.word	0x08011ae3

0800f0bc <__multadd>:
 800f0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0c0:	690d      	ldr	r5, [r1, #16]
 800f0c2:	4607      	mov	r7, r0
 800f0c4:	460c      	mov	r4, r1
 800f0c6:	461e      	mov	r6, r3
 800f0c8:	f101 0c14 	add.w	ip, r1, #20
 800f0cc:	2000      	movs	r0, #0
 800f0ce:	f8dc 3000 	ldr.w	r3, [ip]
 800f0d2:	b299      	uxth	r1, r3
 800f0d4:	fb02 6101 	mla	r1, r2, r1, r6
 800f0d8:	0c1e      	lsrs	r6, r3, #16
 800f0da:	0c0b      	lsrs	r3, r1, #16
 800f0dc:	fb02 3306 	mla	r3, r2, r6, r3
 800f0e0:	b289      	uxth	r1, r1
 800f0e2:	3001      	adds	r0, #1
 800f0e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f0e8:	4285      	cmp	r5, r0
 800f0ea:	f84c 1b04 	str.w	r1, [ip], #4
 800f0ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f0f2:	dcec      	bgt.n	800f0ce <__multadd+0x12>
 800f0f4:	b30e      	cbz	r6, 800f13a <__multadd+0x7e>
 800f0f6:	68a3      	ldr	r3, [r4, #8]
 800f0f8:	42ab      	cmp	r3, r5
 800f0fa:	dc19      	bgt.n	800f130 <__multadd+0x74>
 800f0fc:	6861      	ldr	r1, [r4, #4]
 800f0fe:	4638      	mov	r0, r7
 800f100:	3101      	adds	r1, #1
 800f102:	f7ff ff79 	bl	800eff8 <_Balloc>
 800f106:	4680      	mov	r8, r0
 800f108:	b928      	cbnz	r0, 800f116 <__multadd+0x5a>
 800f10a:	4602      	mov	r2, r0
 800f10c:	4b0c      	ldr	r3, [pc, #48]	@ (800f140 <__multadd+0x84>)
 800f10e:	480d      	ldr	r0, [pc, #52]	@ (800f144 <__multadd+0x88>)
 800f110:	21ba      	movs	r1, #186	@ 0xba
 800f112:	f001 febd 	bl	8010e90 <__assert_func>
 800f116:	6922      	ldr	r2, [r4, #16]
 800f118:	3202      	adds	r2, #2
 800f11a:	f104 010c 	add.w	r1, r4, #12
 800f11e:	0092      	lsls	r2, r2, #2
 800f120:	300c      	adds	r0, #12
 800f122:	f7fe fffa 	bl	800e11a <memcpy>
 800f126:	4621      	mov	r1, r4
 800f128:	4638      	mov	r0, r7
 800f12a:	f7ff ffa5 	bl	800f078 <_Bfree>
 800f12e:	4644      	mov	r4, r8
 800f130:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f134:	3501      	adds	r5, #1
 800f136:	615e      	str	r6, [r3, #20]
 800f138:	6125      	str	r5, [r4, #16]
 800f13a:	4620      	mov	r0, r4
 800f13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f140:	08011ad2 	.word	0x08011ad2
 800f144:	08011ae3 	.word	0x08011ae3

0800f148 <__s2b>:
 800f148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f14c:	460c      	mov	r4, r1
 800f14e:	4615      	mov	r5, r2
 800f150:	461f      	mov	r7, r3
 800f152:	2209      	movs	r2, #9
 800f154:	3308      	adds	r3, #8
 800f156:	4606      	mov	r6, r0
 800f158:	fb93 f3f2 	sdiv	r3, r3, r2
 800f15c:	2100      	movs	r1, #0
 800f15e:	2201      	movs	r2, #1
 800f160:	429a      	cmp	r2, r3
 800f162:	db09      	blt.n	800f178 <__s2b+0x30>
 800f164:	4630      	mov	r0, r6
 800f166:	f7ff ff47 	bl	800eff8 <_Balloc>
 800f16a:	b940      	cbnz	r0, 800f17e <__s2b+0x36>
 800f16c:	4602      	mov	r2, r0
 800f16e:	4b19      	ldr	r3, [pc, #100]	@ (800f1d4 <__s2b+0x8c>)
 800f170:	4819      	ldr	r0, [pc, #100]	@ (800f1d8 <__s2b+0x90>)
 800f172:	21d3      	movs	r1, #211	@ 0xd3
 800f174:	f001 fe8c 	bl	8010e90 <__assert_func>
 800f178:	0052      	lsls	r2, r2, #1
 800f17a:	3101      	adds	r1, #1
 800f17c:	e7f0      	b.n	800f160 <__s2b+0x18>
 800f17e:	9b08      	ldr	r3, [sp, #32]
 800f180:	6143      	str	r3, [r0, #20]
 800f182:	2d09      	cmp	r5, #9
 800f184:	f04f 0301 	mov.w	r3, #1
 800f188:	6103      	str	r3, [r0, #16]
 800f18a:	dd16      	ble.n	800f1ba <__s2b+0x72>
 800f18c:	f104 0909 	add.w	r9, r4, #9
 800f190:	46c8      	mov	r8, r9
 800f192:	442c      	add	r4, r5
 800f194:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f198:	4601      	mov	r1, r0
 800f19a:	3b30      	subs	r3, #48	@ 0x30
 800f19c:	220a      	movs	r2, #10
 800f19e:	4630      	mov	r0, r6
 800f1a0:	f7ff ff8c 	bl	800f0bc <__multadd>
 800f1a4:	45a0      	cmp	r8, r4
 800f1a6:	d1f5      	bne.n	800f194 <__s2b+0x4c>
 800f1a8:	f1a5 0408 	sub.w	r4, r5, #8
 800f1ac:	444c      	add	r4, r9
 800f1ae:	1b2d      	subs	r5, r5, r4
 800f1b0:	1963      	adds	r3, r4, r5
 800f1b2:	42bb      	cmp	r3, r7
 800f1b4:	db04      	blt.n	800f1c0 <__s2b+0x78>
 800f1b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1ba:	340a      	adds	r4, #10
 800f1bc:	2509      	movs	r5, #9
 800f1be:	e7f6      	b.n	800f1ae <__s2b+0x66>
 800f1c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f1c4:	4601      	mov	r1, r0
 800f1c6:	3b30      	subs	r3, #48	@ 0x30
 800f1c8:	220a      	movs	r2, #10
 800f1ca:	4630      	mov	r0, r6
 800f1cc:	f7ff ff76 	bl	800f0bc <__multadd>
 800f1d0:	e7ee      	b.n	800f1b0 <__s2b+0x68>
 800f1d2:	bf00      	nop
 800f1d4:	08011ad2 	.word	0x08011ad2
 800f1d8:	08011ae3 	.word	0x08011ae3

0800f1dc <__hi0bits>:
 800f1dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	bf36      	itet	cc
 800f1e4:	0403      	lslcc	r3, r0, #16
 800f1e6:	2000      	movcs	r0, #0
 800f1e8:	2010      	movcc	r0, #16
 800f1ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f1ee:	bf3c      	itt	cc
 800f1f0:	021b      	lslcc	r3, r3, #8
 800f1f2:	3008      	addcc	r0, #8
 800f1f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f1f8:	bf3c      	itt	cc
 800f1fa:	011b      	lslcc	r3, r3, #4
 800f1fc:	3004      	addcc	r0, #4
 800f1fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f202:	bf3c      	itt	cc
 800f204:	009b      	lslcc	r3, r3, #2
 800f206:	3002      	addcc	r0, #2
 800f208:	2b00      	cmp	r3, #0
 800f20a:	db05      	blt.n	800f218 <__hi0bits+0x3c>
 800f20c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f210:	f100 0001 	add.w	r0, r0, #1
 800f214:	bf08      	it	eq
 800f216:	2020      	moveq	r0, #32
 800f218:	4770      	bx	lr

0800f21a <__lo0bits>:
 800f21a:	6803      	ldr	r3, [r0, #0]
 800f21c:	4602      	mov	r2, r0
 800f21e:	f013 0007 	ands.w	r0, r3, #7
 800f222:	d00b      	beq.n	800f23c <__lo0bits+0x22>
 800f224:	07d9      	lsls	r1, r3, #31
 800f226:	d421      	bmi.n	800f26c <__lo0bits+0x52>
 800f228:	0798      	lsls	r0, r3, #30
 800f22a:	bf49      	itett	mi
 800f22c:	085b      	lsrmi	r3, r3, #1
 800f22e:	089b      	lsrpl	r3, r3, #2
 800f230:	2001      	movmi	r0, #1
 800f232:	6013      	strmi	r3, [r2, #0]
 800f234:	bf5c      	itt	pl
 800f236:	6013      	strpl	r3, [r2, #0]
 800f238:	2002      	movpl	r0, #2
 800f23a:	4770      	bx	lr
 800f23c:	b299      	uxth	r1, r3
 800f23e:	b909      	cbnz	r1, 800f244 <__lo0bits+0x2a>
 800f240:	0c1b      	lsrs	r3, r3, #16
 800f242:	2010      	movs	r0, #16
 800f244:	b2d9      	uxtb	r1, r3
 800f246:	b909      	cbnz	r1, 800f24c <__lo0bits+0x32>
 800f248:	3008      	adds	r0, #8
 800f24a:	0a1b      	lsrs	r3, r3, #8
 800f24c:	0719      	lsls	r1, r3, #28
 800f24e:	bf04      	itt	eq
 800f250:	091b      	lsreq	r3, r3, #4
 800f252:	3004      	addeq	r0, #4
 800f254:	0799      	lsls	r1, r3, #30
 800f256:	bf04      	itt	eq
 800f258:	089b      	lsreq	r3, r3, #2
 800f25a:	3002      	addeq	r0, #2
 800f25c:	07d9      	lsls	r1, r3, #31
 800f25e:	d403      	bmi.n	800f268 <__lo0bits+0x4e>
 800f260:	085b      	lsrs	r3, r3, #1
 800f262:	f100 0001 	add.w	r0, r0, #1
 800f266:	d003      	beq.n	800f270 <__lo0bits+0x56>
 800f268:	6013      	str	r3, [r2, #0]
 800f26a:	4770      	bx	lr
 800f26c:	2000      	movs	r0, #0
 800f26e:	4770      	bx	lr
 800f270:	2020      	movs	r0, #32
 800f272:	4770      	bx	lr

0800f274 <__i2b>:
 800f274:	b510      	push	{r4, lr}
 800f276:	460c      	mov	r4, r1
 800f278:	2101      	movs	r1, #1
 800f27a:	f7ff febd 	bl	800eff8 <_Balloc>
 800f27e:	4602      	mov	r2, r0
 800f280:	b928      	cbnz	r0, 800f28e <__i2b+0x1a>
 800f282:	4b05      	ldr	r3, [pc, #20]	@ (800f298 <__i2b+0x24>)
 800f284:	4805      	ldr	r0, [pc, #20]	@ (800f29c <__i2b+0x28>)
 800f286:	f240 1145 	movw	r1, #325	@ 0x145
 800f28a:	f001 fe01 	bl	8010e90 <__assert_func>
 800f28e:	2301      	movs	r3, #1
 800f290:	6144      	str	r4, [r0, #20]
 800f292:	6103      	str	r3, [r0, #16]
 800f294:	bd10      	pop	{r4, pc}
 800f296:	bf00      	nop
 800f298:	08011ad2 	.word	0x08011ad2
 800f29c:	08011ae3 	.word	0x08011ae3

0800f2a0 <__multiply>:
 800f2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2a4:	4617      	mov	r7, r2
 800f2a6:	690a      	ldr	r2, [r1, #16]
 800f2a8:	693b      	ldr	r3, [r7, #16]
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	bfa8      	it	ge
 800f2ae:	463b      	movge	r3, r7
 800f2b0:	4689      	mov	r9, r1
 800f2b2:	bfa4      	itt	ge
 800f2b4:	460f      	movge	r7, r1
 800f2b6:	4699      	movge	r9, r3
 800f2b8:	693d      	ldr	r5, [r7, #16]
 800f2ba:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	6879      	ldr	r1, [r7, #4]
 800f2c2:	eb05 060a 	add.w	r6, r5, sl
 800f2c6:	42b3      	cmp	r3, r6
 800f2c8:	b085      	sub	sp, #20
 800f2ca:	bfb8      	it	lt
 800f2cc:	3101      	addlt	r1, #1
 800f2ce:	f7ff fe93 	bl	800eff8 <_Balloc>
 800f2d2:	b930      	cbnz	r0, 800f2e2 <__multiply+0x42>
 800f2d4:	4602      	mov	r2, r0
 800f2d6:	4b41      	ldr	r3, [pc, #260]	@ (800f3dc <__multiply+0x13c>)
 800f2d8:	4841      	ldr	r0, [pc, #260]	@ (800f3e0 <__multiply+0x140>)
 800f2da:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f2de:	f001 fdd7 	bl	8010e90 <__assert_func>
 800f2e2:	f100 0414 	add.w	r4, r0, #20
 800f2e6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f2ea:	4623      	mov	r3, r4
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	4573      	cmp	r3, lr
 800f2f0:	d320      	bcc.n	800f334 <__multiply+0x94>
 800f2f2:	f107 0814 	add.w	r8, r7, #20
 800f2f6:	f109 0114 	add.w	r1, r9, #20
 800f2fa:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f2fe:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f302:	9302      	str	r3, [sp, #8]
 800f304:	1beb      	subs	r3, r5, r7
 800f306:	3b15      	subs	r3, #21
 800f308:	f023 0303 	bic.w	r3, r3, #3
 800f30c:	3304      	adds	r3, #4
 800f30e:	3715      	adds	r7, #21
 800f310:	42bd      	cmp	r5, r7
 800f312:	bf38      	it	cc
 800f314:	2304      	movcc	r3, #4
 800f316:	9301      	str	r3, [sp, #4]
 800f318:	9b02      	ldr	r3, [sp, #8]
 800f31a:	9103      	str	r1, [sp, #12]
 800f31c:	428b      	cmp	r3, r1
 800f31e:	d80c      	bhi.n	800f33a <__multiply+0x9a>
 800f320:	2e00      	cmp	r6, #0
 800f322:	dd03      	ble.n	800f32c <__multiply+0x8c>
 800f324:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d055      	beq.n	800f3d8 <__multiply+0x138>
 800f32c:	6106      	str	r6, [r0, #16]
 800f32e:	b005      	add	sp, #20
 800f330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f334:	f843 2b04 	str.w	r2, [r3], #4
 800f338:	e7d9      	b.n	800f2ee <__multiply+0x4e>
 800f33a:	f8b1 a000 	ldrh.w	sl, [r1]
 800f33e:	f1ba 0f00 	cmp.w	sl, #0
 800f342:	d01f      	beq.n	800f384 <__multiply+0xe4>
 800f344:	46c4      	mov	ip, r8
 800f346:	46a1      	mov	r9, r4
 800f348:	2700      	movs	r7, #0
 800f34a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f34e:	f8d9 3000 	ldr.w	r3, [r9]
 800f352:	fa1f fb82 	uxth.w	fp, r2
 800f356:	b29b      	uxth	r3, r3
 800f358:	fb0a 330b 	mla	r3, sl, fp, r3
 800f35c:	443b      	add	r3, r7
 800f35e:	f8d9 7000 	ldr.w	r7, [r9]
 800f362:	0c12      	lsrs	r2, r2, #16
 800f364:	0c3f      	lsrs	r7, r7, #16
 800f366:	fb0a 7202 	mla	r2, sl, r2, r7
 800f36a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800f36e:	b29b      	uxth	r3, r3
 800f370:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f374:	4565      	cmp	r5, ip
 800f376:	f849 3b04 	str.w	r3, [r9], #4
 800f37a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800f37e:	d8e4      	bhi.n	800f34a <__multiply+0xaa>
 800f380:	9b01      	ldr	r3, [sp, #4]
 800f382:	50e7      	str	r7, [r4, r3]
 800f384:	9b03      	ldr	r3, [sp, #12]
 800f386:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f38a:	3104      	adds	r1, #4
 800f38c:	f1b9 0f00 	cmp.w	r9, #0
 800f390:	d020      	beq.n	800f3d4 <__multiply+0x134>
 800f392:	6823      	ldr	r3, [r4, #0]
 800f394:	4647      	mov	r7, r8
 800f396:	46a4      	mov	ip, r4
 800f398:	f04f 0a00 	mov.w	sl, #0
 800f39c:	f8b7 b000 	ldrh.w	fp, [r7]
 800f3a0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800f3a4:	fb09 220b 	mla	r2, r9, fp, r2
 800f3a8:	4452      	add	r2, sl
 800f3aa:	b29b      	uxth	r3, r3
 800f3ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f3b0:	f84c 3b04 	str.w	r3, [ip], #4
 800f3b4:	f857 3b04 	ldr.w	r3, [r7], #4
 800f3b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f3bc:	f8bc 3000 	ldrh.w	r3, [ip]
 800f3c0:	fb09 330a 	mla	r3, r9, sl, r3
 800f3c4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800f3c8:	42bd      	cmp	r5, r7
 800f3ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f3ce:	d8e5      	bhi.n	800f39c <__multiply+0xfc>
 800f3d0:	9a01      	ldr	r2, [sp, #4]
 800f3d2:	50a3      	str	r3, [r4, r2]
 800f3d4:	3404      	adds	r4, #4
 800f3d6:	e79f      	b.n	800f318 <__multiply+0x78>
 800f3d8:	3e01      	subs	r6, #1
 800f3da:	e7a1      	b.n	800f320 <__multiply+0x80>
 800f3dc:	08011ad2 	.word	0x08011ad2
 800f3e0:	08011ae3 	.word	0x08011ae3

0800f3e4 <__pow5mult>:
 800f3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3e8:	4615      	mov	r5, r2
 800f3ea:	f012 0203 	ands.w	r2, r2, #3
 800f3ee:	4607      	mov	r7, r0
 800f3f0:	460e      	mov	r6, r1
 800f3f2:	d007      	beq.n	800f404 <__pow5mult+0x20>
 800f3f4:	4c25      	ldr	r4, [pc, #148]	@ (800f48c <__pow5mult+0xa8>)
 800f3f6:	3a01      	subs	r2, #1
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f3fe:	f7ff fe5d 	bl	800f0bc <__multadd>
 800f402:	4606      	mov	r6, r0
 800f404:	10ad      	asrs	r5, r5, #2
 800f406:	d03d      	beq.n	800f484 <__pow5mult+0xa0>
 800f408:	69fc      	ldr	r4, [r7, #28]
 800f40a:	b97c      	cbnz	r4, 800f42c <__pow5mult+0x48>
 800f40c:	2010      	movs	r0, #16
 800f40e:	f7ff fd3d 	bl	800ee8c <malloc>
 800f412:	4602      	mov	r2, r0
 800f414:	61f8      	str	r0, [r7, #28]
 800f416:	b928      	cbnz	r0, 800f424 <__pow5mult+0x40>
 800f418:	4b1d      	ldr	r3, [pc, #116]	@ (800f490 <__pow5mult+0xac>)
 800f41a:	481e      	ldr	r0, [pc, #120]	@ (800f494 <__pow5mult+0xb0>)
 800f41c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f420:	f001 fd36 	bl	8010e90 <__assert_func>
 800f424:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f428:	6004      	str	r4, [r0, #0]
 800f42a:	60c4      	str	r4, [r0, #12]
 800f42c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f430:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f434:	b94c      	cbnz	r4, 800f44a <__pow5mult+0x66>
 800f436:	f240 2171 	movw	r1, #625	@ 0x271
 800f43a:	4638      	mov	r0, r7
 800f43c:	f7ff ff1a 	bl	800f274 <__i2b>
 800f440:	2300      	movs	r3, #0
 800f442:	f8c8 0008 	str.w	r0, [r8, #8]
 800f446:	4604      	mov	r4, r0
 800f448:	6003      	str	r3, [r0, #0]
 800f44a:	f04f 0900 	mov.w	r9, #0
 800f44e:	07eb      	lsls	r3, r5, #31
 800f450:	d50a      	bpl.n	800f468 <__pow5mult+0x84>
 800f452:	4631      	mov	r1, r6
 800f454:	4622      	mov	r2, r4
 800f456:	4638      	mov	r0, r7
 800f458:	f7ff ff22 	bl	800f2a0 <__multiply>
 800f45c:	4631      	mov	r1, r6
 800f45e:	4680      	mov	r8, r0
 800f460:	4638      	mov	r0, r7
 800f462:	f7ff fe09 	bl	800f078 <_Bfree>
 800f466:	4646      	mov	r6, r8
 800f468:	106d      	asrs	r5, r5, #1
 800f46a:	d00b      	beq.n	800f484 <__pow5mult+0xa0>
 800f46c:	6820      	ldr	r0, [r4, #0]
 800f46e:	b938      	cbnz	r0, 800f480 <__pow5mult+0x9c>
 800f470:	4622      	mov	r2, r4
 800f472:	4621      	mov	r1, r4
 800f474:	4638      	mov	r0, r7
 800f476:	f7ff ff13 	bl	800f2a0 <__multiply>
 800f47a:	6020      	str	r0, [r4, #0]
 800f47c:	f8c0 9000 	str.w	r9, [r0]
 800f480:	4604      	mov	r4, r0
 800f482:	e7e4      	b.n	800f44e <__pow5mult+0x6a>
 800f484:	4630      	mov	r0, r6
 800f486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f48a:	bf00      	nop
 800f48c:	08011bf4 	.word	0x08011bf4
 800f490:	08011a63 	.word	0x08011a63
 800f494:	08011ae3 	.word	0x08011ae3

0800f498 <__lshift>:
 800f498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f49c:	460c      	mov	r4, r1
 800f49e:	6849      	ldr	r1, [r1, #4]
 800f4a0:	6923      	ldr	r3, [r4, #16]
 800f4a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f4a6:	68a3      	ldr	r3, [r4, #8]
 800f4a8:	4607      	mov	r7, r0
 800f4aa:	4691      	mov	r9, r2
 800f4ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f4b0:	f108 0601 	add.w	r6, r8, #1
 800f4b4:	42b3      	cmp	r3, r6
 800f4b6:	db0b      	blt.n	800f4d0 <__lshift+0x38>
 800f4b8:	4638      	mov	r0, r7
 800f4ba:	f7ff fd9d 	bl	800eff8 <_Balloc>
 800f4be:	4605      	mov	r5, r0
 800f4c0:	b948      	cbnz	r0, 800f4d6 <__lshift+0x3e>
 800f4c2:	4602      	mov	r2, r0
 800f4c4:	4b28      	ldr	r3, [pc, #160]	@ (800f568 <__lshift+0xd0>)
 800f4c6:	4829      	ldr	r0, [pc, #164]	@ (800f56c <__lshift+0xd4>)
 800f4c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f4cc:	f001 fce0 	bl	8010e90 <__assert_func>
 800f4d0:	3101      	adds	r1, #1
 800f4d2:	005b      	lsls	r3, r3, #1
 800f4d4:	e7ee      	b.n	800f4b4 <__lshift+0x1c>
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	f100 0114 	add.w	r1, r0, #20
 800f4dc:	f100 0210 	add.w	r2, r0, #16
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	4553      	cmp	r3, sl
 800f4e4:	db33      	blt.n	800f54e <__lshift+0xb6>
 800f4e6:	6920      	ldr	r0, [r4, #16]
 800f4e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f4ec:	f104 0314 	add.w	r3, r4, #20
 800f4f0:	f019 091f 	ands.w	r9, r9, #31
 800f4f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f4f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f4fc:	d02b      	beq.n	800f556 <__lshift+0xbe>
 800f4fe:	f1c9 0e20 	rsb	lr, r9, #32
 800f502:	468a      	mov	sl, r1
 800f504:	2200      	movs	r2, #0
 800f506:	6818      	ldr	r0, [r3, #0]
 800f508:	fa00 f009 	lsl.w	r0, r0, r9
 800f50c:	4310      	orrs	r0, r2
 800f50e:	f84a 0b04 	str.w	r0, [sl], #4
 800f512:	f853 2b04 	ldr.w	r2, [r3], #4
 800f516:	459c      	cmp	ip, r3
 800f518:	fa22 f20e 	lsr.w	r2, r2, lr
 800f51c:	d8f3      	bhi.n	800f506 <__lshift+0x6e>
 800f51e:	ebac 0304 	sub.w	r3, ip, r4
 800f522:	3b15      	subs	r3, #21
 800f524:	f023 0303 	bic.w	r3, r3, #3
 800f528:	3304      	adds	r3, #4
 800f52a:	f104 0015 	add.w	r0, r4, #21
 800f52e:	4560      	cmp	r0, ip
 800f530:	bf88      	it	hi
 800f532:	2304      	movhi	r3, #4
 800f534:	50ca      	str	r2, [r1, r3]
 800f536:	b10a      	cbz	r2, 800f53c <__lshift+0xa4>
 800f538:	f108 0602 	add.w	r6, r8, #2
 800f53c:	3e01      	subs	r6, #1
 800f53e:	4638      	mov	r0, r7
 800f540:	612e      	str	r6, [r5, #16]
 800f542:	4621      	mov	r1, r4
 800f544:	f7ff fd98 	bl	800f078 <_Bfree>
 800f548:	4628      	mov	r0, r5
 800f54a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f54e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f552:	3301      	adds	r3, #1
 800f554:	e7c5      	b.n	800f4e2 <__lshift+0x4a>
 800f556:	3904      	subs	r1, #4
 800f558:	f853 2b04 	ldr.w	r2, [r3], #4
 800f55c:	f841 2f04 	str.w	r2, [r1, #4]!
 800f560:	459c      	cmp	ip, r3
 800f562:	d8f9      	bhi.n	800f558 <__lshift+0xc0>
 800f564:	e7ea      	b.n	800f53c <__lshift+0xa4>
 800f566:	bf00      	nop
 800f568:	08011ad2 	.word	0x08011ad2
 800f56c:	08011ae3 	.word	0x08011ae3

0800f570 <__mcmp>:
 800f570:	690a      	ldr	r2, [r1, #16]
 800f572:	4603      	mov	r3, r0
 800f574:	6900      	ldr	r0, [r0, #16]
 800f576:	1a80      	subs	r0, r0, r2
 800f578:	b530      	push	{r4, r5, lr}
 800f57a:	d10e      	bne.n	800f59a <__mcmp+0x2a>
 800f57c:	3314      	adds	r3, #20
 800f57e:	3114      	adds	r1, #20
 800f580:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f584:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f588:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f58c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f590:	4295      	cmp	r5, r2
 800f592:	d003      	beq.n	800f59c <__mcmp+0x2c>
 800f594:	d205      	bcs.n	800f5a2 <__mcmp+0x32>
 800f596:	f04f 30ff 	mov.w	r0, #4294967295
 800f59a:	bd30      	pop	{r4, r5, pc}
 800f59c:	42a3      	cmp	r3, r4
 800f59e:	d3f3      	bcc.n	800f588 <__mcmp+0x18>
 800f5a0:	e7fb      	b.n	800f59a <__mcmp+0x2a>
 800f5a2:	2001      	movs	r0, #1
 800f5a4:	e7f9      	b.n	800f59a <__mcmp+0x2a>
	...

0800f5a8 <__mdiff>:
 800f5a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5ac:	4689      	mov	r9, r1
 800f5ae:	4606      	mov	r6, r0
 800f5b0:	4611      	mov	r1, r2
 800f5b2:	4648      	mov	r0, r9
 800f5b4:	4614      	mov	r4, r2
 800f5b6:	f7ff ffdb 	bl	800f570 <__mcmp>
 800f5ba:	1e05      	subs	r5, r0, #0
 800f5bc:	d112      	bne.n	800f5e4 <__mdiff+0x3c>
 800f5be:	4629      	mov	r1, r5
 800f5c0:	4630      	mov	r0, r6
 800f5c2:	f7ff fd19 	bl	800eff8 <_Balloc>
 800f5c6:	4602      	mov	r2, r0
 800f5c8:	b928      	cbnz	r0, 800f5d6 <__mdiff+0x2e>
 800f5ca:	4b3f      	ldr	r3, [pc, #252]	@ (800f6c8 <__mdiff+0x120>)
 800f5cc:	f240 2137 	movw	r1, #567	@ 0x237
 800f5d0:	483e      	ldr	r0, [pc, #248]	@ (800f6cc <__mdiff+0x124>)
 800f5d2:	f001 fc5d 	bl	8010e90 <__assert_func>
 800f5d6:	2301      	movs	r3, #1
 800f5d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f5dc:	4610      	mov	r0, r2
 800f5de:	b003      	add	sp, #12
 800f5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5e4:	bfbc      	itt	lt
 800f5e6:	464b      	movlt	r3, r9
 800f5e8:	46a1      	movlt	r9, r4
 800f5ea:	4630      	mov	r0, r6
 800f5ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f5f0:	bfba      	itte	lt
 800f5f2:	461c      	movlt	r4, r3
 800f5f4:	2501      	movlt	r5, #1
 800f5f6:	2500      	movge	r5, #0
 800f5f8:	f7ff fcfe 	bl	800eff8 <_Balloc>
 800f5fc:	4602      	mov	r2, r0
 800f5fe:	b918      	cbnz	r0, 800f608 <__mdiff+0x60>
 800f600:	4b31      	ldr	r3, [pc, #196]	@ (800f6c8 <__mdiff+0x120>)
 800f602:	f240 2145 	movw	r1, #581	@ 0x245
 800f606:	e7e3      	b.n	800f5d0 <__mdiff+0x28>
 800f608:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f60c:	6926      	ldr	r6, [r4, #16]
 800f60e:	60c5      	str	r5, [r0, #12]
 800f610:	f109 0310 	add.w	r3, r9, #16
 800f614:	f109 0514 	add.w	r5, r9, #20
 800f618:	f104 0e14 	add.w	lr, r4, #20
 800f61c:	f100 0b14 	add.w	fp, r0, #20
 800f620:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f624:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f628:	9301      	str	r3, [sp, #4]
 800f62a:	46d9      	mov	r9, fp
 800f62c:	f04f 0c00 	mov.w	ip, #0
 800f630:	9b01      	ldr	r3, [sp, #4]
 800f632:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f636:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f63a:	9301      	str	r3, [sp, #4]
 800f63c:	fa1f f38a 	uxth.w	r3, sl
 800f640:	4619      	mov	r1, r3
 800f642:	b283      	uxth	r3, r0
 800f644:	1acb      	subs	r3, r1, r3
 800f646:	0c00      	lsrs	r0, r0, #16
 800f648:	4463      	add	r3, ip
 800f64a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f64e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f652:	b29b      	uxth	r3, r3
 800f654:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f658:	4576      	cmp	r6, lr
 800f65a:	f849 3b04 	str.w	r3, [r9], #4
 800f65e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f662:	d8e5      	bhi.n	800f630 <__mdiff+0x88>
 800f664:	1b33      	subs	r3, r6, r4
 800f666:	3b15      	subs	r3, #21
 800f668:	f023 0303 	bic.w	r3, r3, #3
 800f66c:	3415      	adds	r4, #21
 800f66e:	3304      	adds	r3, #4
 800f670:	42a6      	cmp	r6, r4
 800f672:	bf38      	it	cc
 800f674:	2304      	movcc	r3, #4
 800f676:	441d      	add	r5, r3
 800f678:	445b      	add	r3, fp
 800f67a:	461e      	mov	r6, r3
 800f67c:	462c      	mov	r4, r5
 800f67e:	4544      	cmp	r4, r8
 800f680:	d30e      	bcc.n	800f6a0 <__mdiff+0xf8>
 800f682:	f108 0103 	add.w	r1, r8, #3
 800f686:	1b49      	subs	r1, r1, r5
 800f688:	f021 0103 	bic.w	r1, r1, #3
 800f68c:	3d03      	subs	r5, #3
 800f68e:	45a8      	cmp	r8, r5
 800f690:	bf38      	it	cc
 800f692:	2100      	movcc	r1, #0
 800f694:	440b      	add	r3, r1
 800f696:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f69a:	b191      	cbz	r1, 800f6c2 <__mdiff+0x11a>
 800f69c:	6117      	str	r7, [r2, #16]
 800f69e:	e79d      	b.n	800f5dc <__mdiff+0x34>
 800f6a0:	f854 1b04 	ldr.w	r1, [r4], #4
 800f6a4:	46e6      	mov	lr, ip
 800f6a6:	0c08      	lsrs	r0, r1, #16
 800f6a8:	fa1c fc81 	uxtah	ip, ip, r1
 800f6ac:	4471      	add	r1, lr
 800f6ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f6b2:	b289      	uxth	r1, r1
 800f6b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f6b8:	f846 1b04 	str.w	r1, [r6], #4
 800f6bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f6c0:	e7dd      	b.n	800f67e <__mdiff+0xd6>
 800f6c2:	3f01      	subs	r7, #1
 800f6c4:	e7e7      	b.n	800f696 <__mdiff+0xee>
 800f6c6:	bf00      	nop
 800f6c8:	08011ad2 	.word	0x08011ad2
 800f6cc:	08011ae3 	.word	0x08011ae3

0800f6d0 <__ulp>:
 800f6d0:	b082      	sub	sp, #8
 800f6d2:	ed8d 0b00 	vstr	d0, [sp]
 800f6d6:	9a01      	ldr	r2, [sp, #4]
 800f6d8:	4b0f      	ldr	r3, [pc, #60]	@ (800f718 <__ulp+0x48>)
 800f6da:	4013      	ands	r3, r2
 800f6dc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	dc08      	bgt.n	800f6f6 <__ulp+0x26>
 800f6e4:	425b      	negs	r3, r3
 800f6e6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f6ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f6ee:	da04      	bge.n	800f6fa <__ulp+0x2a>
 800f6f0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f6f4:	4113      	asrs	r3, r2
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	e008      	b.n	800f70c <__ulp+0x3c>
 800f6fa:	f1a2 0314 	sub.w	r3, r2, #20
 800f6fe:	2b1e      	cmp	r3, #30
 800f700:	bfda      	itte	le
 800f702:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f706:	40da      	lsrle	r2, r3
 800f708:	2201      	movgt	r2, #1
 800f70a:	2300      	movs	r3, #0
 800f70c:	4619      	mov	r1, r3
 800f70e:	4610      	mov	r0, r2
 800f710:	ec41 0b10 	vmov	d0, r0, r1
 800f714:	b002      	add	sp, #8
 800f716:	4770      	bx	lr
 800f718:	7ff00000 	.word	0x7ff00000

0800f71c <__b2d>:
 800f71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f720:	6906      	ldr	r6, [r0, #16]
 800f722:	f100 0814 	add.w	r8, r0, #20
 800f726:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f72a:	1f37      	subs	r7, r6, #4
 800f72c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f730:	4610      	mov	r0, r2
 800f732:	f7ff fd53 	bl	800f1dc <__hi0bits>
 800f736:	f1c0 0320 	rsb	r3, r0, #32
 800f73a:	280a      	cmp	r0, #10
 800f73c:	600b      	str	r3, [r1, #0]
 800f73e:	491b      	ldr	r1, [pc, #108]	@ (800f7ac <__b2d+0x90>)
 800f740:	dc15      	bgt.n	800f76e <__b2d+0x52>
 800f742:	f1c0 0c0b 	rsb	ip, r0, #11
 800f746:	fa22 f30c 	lsr.w	r3, r2, ip
 800f74a:	45b8      	cmp	r8, r7
 800f74c:	ea43 0501 	orr.w	r5, r3, r1
 800f750:	bf34      	ite	cc
 800f752:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f756:	2300      	movcs	r3, #0
 800f758:	3015      	adds	r0, #21
 800f75a:	fa02 f000 	lsl.w	r0, r2, r0
 800f75e:	fa23 f30c 	lsr.w	r3, r3, ip
 800f762:	4303      	orrs	r3, r0
 800f764:	461c      	mov	r4, r3
 800f766:	ec45 4b10 	vmov	d0, r4, r5
 800f76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f76e:	45b8      	cmp	r8, r7
 800f770:	bf3a      	itte	cc
 800f772:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f776:	f1a6 0708 	subcc.w	r7, r6, #8
 800f77a:	2300      	movcs	r3, #0
 800f77c:	380b      	subs	r0, #11
 800f77e:	d012      	beq.n	800f7a6 <__b2d+0x8a>
 800f780:	f1c0 0120 	rsb	r1, r0, #32
 800f784:	fa23 f401 	lsr.w	r4, r3, r1
 800f788:	4082      	lsls	r2, r0
 800f78a:	4322      	orrs	r2, r4
 800f78c:	4547      	cmp	r7, r8
 800f78e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f792:	bf8c      	ite	hi
 800f794:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f798:	2200      	movls	r2, #0
 800f79a:	4083      	lsls	r3, r0
 800f79c:	40ca      	lsrs	r2, r1
 800f79e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f7a2:	4313      	orrs	r3, r2
 800f7a4:	e7de      	b.n	800f764 <__b2d+0x48>
 800f7a6:	ea42 0501 	orr.w	r5, r2, r1
 800f7aa:	e7db      	b.n	800f764 <__b2d+0x48>
 800f7ac:	3ff00000 	.word	0x3ff00000

0800f7b0 <__d2b>:
 800f7b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f7b4:	460f      	mov	r7, r1
 800f7b6:	2101      	movs	r1, #1
 800f7b8:	ec59 8b10 	vmov	r8, r9, d0
 800f7bc:	4616      	mov	r6, r2
 800f7be:	f7ff fc1b 	bl	800eff8 <_Balloc>
 800f7c2:	4604      	mov	r4, r0
 800f7c4:	b930      	cbnz	r0, 800f7d4 <__d2b+0x24>
 800f7c6:	4602      	mov	r2, r0
 800f7c8:	4b23      	ldr	r3, [pc, #140]	@ (800f858 <__d2b+0xa8>)
 800f7ca:	4824      	ldr	r0, [pc, #144]	@ (800f85c <__d2b+0xac>)
 800f7cc:	f240 310f 	movw	r1, #783	@ 0x30f
 800f7d0:	f001 fb5e 	bl	8010e90 <__assert_func>
 800f7d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f7d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f7dc:	b10d      	cbz	r5, 800f7e2 <__d2b+0x32>
 800f7de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f7e2:	9301      	str	r3, [sp, #4]
 800f7e4:	f1b8 0300 	subs.w	r3, r8, #0
 800f7e8:	d023      	beq.n	800f832 <__d2b+0x82>
 800f7ea:	4668      	mov	r0, sp
 800f7ec:	9300      	str	r3, [sp, #0]
 800f7ee:	f7ff fd14 	bl	800f21a <__lo0bits>
 800f7f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f7f6:	b1d0      	cbz	r0, 800f82e <__d2b+0x7e>
 800f7f8:	f1c0 0320 	rsb	r3, r0, #32
 800f7fc:	fa02 f303 	lsl.w	r3, r2, r3
 800f800:	430b      	orrs	r3, r1
 800f802:	40c2      	lsrs	r2, r0
 800f804:	6163      	str	r3, [r4, #20]
 800f806:	9201      	str	r2, [sp, #4]
 800f808:	9b01      	ldr	r3, [sp, #4]
 800f80a:	61a3      	str	r3, [r4, #24]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	bf0c      	ite	eq
 800f810:	2201      	moveq	r2, #1
 800f812:	2202      	movne	r2, #2
 800f814:	6122      	str	r2, [r4, #16]
 800f816:	b1a5      	cbz	r5, 800f842 <__d2b+0x92>
 800f818:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f81c:	4405      	add	r5, r0
 800f81e:	603d      	str	r5, [r7, #0]
 800f820:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f824:	6030      	str	r0, [r6, #0]
 800f826:	4620      	mov	r0, r4
 800f828:	b003      	add	sp, #12
 800f82a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f82e:	6161      	str	r1, [r4, #20]
 800f830:	e7ea      	b.n	800f808 <__d2b+0x58>
 800f832:	a801      	add	r0, sp, #4
 800f834:	f7ff fcf1 	bl	800f21a <__lo0bits>
 800f838:	9b01      	ldr	r3, [sp, #4]
 800f83a:	6163      	str	r3, [r4, #20]
 800f83c:	3020      	adds	r0, #32
 800f83e:	2201      	movs	r2, #1
 800f840:	e7e8      	b.n	800f814 <__d2b+0x64>
 800f842:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f846:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f84a:	6038      	str	r0, [r7, #0]
 800f84c:	6918      	ldr	r0, [r3, #16]
 800f84e:	f7ff fcc5 	bl	800f1dc <__hi0bits>
 800f852:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f856:	e7e5      	b.n	800f824 <__d2b+0x74>
 800f858:	08011ad2 	.word	0x08011ad2
 800f85c:	08011ae3 	.word	0x08011ae3

0800f860 <__ratio>:
 800f860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f864:	b085      	sub	sp, #20
 800f866:	e9cd 1000 	strd	r1, r0, [sp]
 800f86a:	a902      	add	r1, sp, #8
 800f86c:	f7ff ff56 	bl	800f71c <__b2d>
 800f870:	9800      	ldr	r0, [sp, #0]
 800f872:	a903      	add	r1, sp, #12
 800f874:	ec55 4b10 	vmov	r4, r5, d0
 800f878:	f7ff ff50 	bl	800f71c <__b2d>
 800f87c:	9b01      	ldr	r3, [sp, #4]
 800f87e:	6919      	ldr	r1, [r3, #16]
 800f880:	9b00      	ldr	r3, [sp, #0]
 800f882:	691b      	ldr	r3, [r3, #16]
 800f884:	1ac9      	subs	r1, r1, r3
 800f886:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f88a:	1a9b      	subs	r3, r3, r2
 800f88c:	ec5b ab10 	vmov	sl, fp, d0
 800f890:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f894:	2b00      	cmp	r3, #0
 800f896:	bfce      	itee	gt
 800f898:	462a      	movgt	r2, r5
 800f89a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f89e:	465a      	movle	r2, fp
 800f8a0:	462f      	mov	r7, r5
 800f8a2:	46d9      	mov	r9, fp
 800f8a4:	bfcc      	ite	gt
 800f8a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f8aa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f8ae:	464b      	mov	r3, r9
 800f8b0:	4652      	mov	r2, sl
 800f8b2:	4620      	mov	r0, r4
 800f8b4:	4639      	mov	r1, r7
 800f8b6:	f7f0 fff1 	bl	800089c <__aeabi_ddiv>
 800f8ba:	ec41 0b10 	vmov	d0, r0, r1
 800f8be:	b005      	add	sp, #20
 800f8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f8c4 <__copybits>:
 800f8c4:	3901      	subs	r1, #1
 800f8c6:	b570      	push	{r4, r5, r6, lr}
 800f8c8:	1149      	asrs	r1, r1, #5
 800f8ca:	6914      	ldr	r4, [r2, #16]
 800f8cc:	3101      	adds	r1, #1
 800f8ce:	f102 0314 	add.w	r3, r2, #20
 800f8d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f8d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f8da:	1f05      	subs	r5, r0, #4
 800f8dc:	42a3      	cmp	r3, r4
 800f8de:	d30c      	bcc.n	800f8fa <__copybits+0x36>
 800f8e0:	1aa3      	subs	r3, r4, r2
 800f8e2:	3b11      	subs	r3, #17
 800f8e4:	f023 0303 	bic.w	r3, r3, #3
 800f8e8:	3211      	adds	r2, #17
 800f8ea:	42a2      	cmp	r2, r4
 800f8ec:	bf88      	it	hi
 800f8ee:	2300      	movhi	r3, #0
 800f8f0:	4418      	add	r0, r3
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	4288      	cmp	r0, r1
 800f8f6:	d305      	bcc.n	800f904 <__copybits+0x40>
 800f8f8:	bd70      	pop	{r4, r5, r6, pc}
 800f8fa:	f853 6b04 	ldr.w	r6, [r3], #4
 800f8fe:	f845 6f04 	str.w	r6, [r5, #4]!
 800f902:	e7eb      	b.n	800f8dc <__copybits+0x18>
 800f904:	f840 3b04 	str.w	r3, [r0], #4
 800f908:	e7f4      	b.n	800f8f4 <__copybits+0x30>

0800f90a <__any_on>:
 800f90a:	f100 0214 	add.w	r2, r0, #20
 800f90e:	6900      	ldr	r0, [r0, #16]
 800f910:	114b      	asrs	r3, r1, #5
 800f912:	4298      	cmp	r0, r3
 800f914:	b510      	push	{r4, lr}
 800f916:	db11      	blt.n	800f93c <__any_on+0x32>
 800f918:	dd0a      	ble.n	800f930 <__any_on+0x26>
 800f91a:	f011 011f 	ands.w	r1, r1, #31
 800f91e:	d007      	beq.n	800f930 <__any_on+0x26>
 800f920:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f924:	fa24 f001 	lsr.w	r0, r4, r1
 800f928:	fa00 f101 	lsl.w	r1, r0, r1
 800f92c:	428c      	cmp	r4, r1
 800f92e:	d10b      	bne.n	800f948 <__any_on+0x3e>
 800f930:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f934:	4293      	cmp	r3, r2
 800f936:	d803      	bhi.n	800f940 <__any_on+0x36>
 800f938:	2000      	movs	r0, #0
 800f93a:	bd10      	pop	{r4, pc}
 800f93c:	4603      	mov	r3, r0
 800f93e:	e7f7      	b.n	800f930 <__any_on+0x26>
 800f940:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f944:	2900      	cmp	r1, #0
 800f946:	d0f5      	beq.n	800f934 <__any_on+0x2a>
 800f948:	2001      	movs	r0, #1
 800f94a:	e7f6      	b.n	800f93a <__any_on+0x30>

0800f94c <sulp>:
 800f94c:	b570      	push	{r4, r5, r6, lr}
 800f94e:	4604      	mov	r4, r0
 800f950:	460d      	mov	r5, r1
 800f952:	ec45 4b10 	vmov	d0, r4, r5
 800f956:	4616      	mov	r6, r2
 800f958:	f7ff feba 	bl	800f6d0 <__ulp>
 800f95c:	ec51 0b10 	vmov	r0, r1, d0
 800f960:	b17e      	cbz	r6, 800f982 <sulp+0x36>
 800f962:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f966:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	dd09      	ble.n	800f982 <sulp+0x36>
 800f96e:	051b      	lsls	r3, r3, #20
 800f970:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f974:	2400      	movs	r4, #0
 800f976:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f97a:	4622      	mov	r2, r4
 800f97c:	462b      	mov	r3, r5
 800f97e:	f7f0 fe63 	bl	8000648 <__aeabi_dmul>
 800f982:	ec41 0b10 	vmov	d0, r0, r1
 800f986:	bd70      	pop	{r4, r5, r6, pc}

0800f988 <_strtod_l>:
 800f988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f98c:	b09f      	sub	sp, #124	@ 0x7c
 800f98e:	460c      	mov	r4, r1
 800f990:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f992:	2200      	movs	r2, #0
 800f994:	921a      	str	r2, [sp, #104]	@ 0x68
 800f996:	9005      	str	r0, [sp, #20]
 800f998:	f04f 0a00 	mov.w	sl, #0
 800f99c:	f04f 0b00 	mov.w	fp, #0
 800f9a0:	460a      	mov	r2, r1
 800f9a2:	9219      	str	r2, [sp, #100]	@ 0x64
 800f9a4:	7811      	ldrb	r1, [r2, #0]
 800f9a6:	292b      	cmp	r1, #43	@ 0x2b
 800f9a8:	d04a      	beq.n	800fa40 <_strtod_l+0xb8>
 800f9aa:	d838      	bhi.n	800fa1e <_strtod_l+0x96>
 800f9ac:	290d      	cmp	r1, #13
 800f9ae:	d832      	bhi.n	800fa16 <_strtod_l+0x8e>
 800f9b0:	2908      	cmp	r1, #8
 800f9b2:	d832      	bhi.n	800fa1a <_strtod_l+0x92>
 800f9b4:	2900      	cmp	r1, #0
 800f9b6:	d03b      	beq.n	800fa30 <_strtod_l+0xa8>
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	920e      	str	r2, [sp, #56]	@ 0x38
 800f9bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f9be:	782a      	ldrb	r2, [r5, #0]
 800f9c0:	2a30      	cmp	r2, #48	@ 0x30
 800f9c2:	f040 80b2 	bne.w	800fb2a <_strtod_l+0x1a2>
 800f9c6:	786a      	ldrb	r2, [r5, #1]
 800f9c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f9cc:	2a58      	cmp	r2, #88	@ 0x58
 800f9ce:	d16e      	bne.n	800faae <_strtod_l+0x126>
 800f9d0:	9302      	str	r3, [sp, #8]
 800f9d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f9d4:	9301      	str	r3, [sp, #4]
 800f9d6:	ab1a      	add	r3, sp, #104	@ 0x68
 800f9d8:	9300      	str	r3, [sp, #0]
 800f9da:	4a8f      	ldr	r2, [pc, #572]	@ (800fc18 <_strtod_l+0x290>)
 800f9dc:	9805      	ldr	r0, [sp, #20]
 800f9de:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f9e0:	a919      	add	r1, sp, #100	@ 0x64
 800f9e2:	f001 faef 	bl	8010fc4 <__gethex>
 800f9e6:	f010 060f 	ands.w	r6, r0, #15
 800f9ea:	4604      	mov	r4, r0
 800f9ec:	d005      	beq.n	800f9fa <_strtod_l+0x72>
 800f9ee:	2e06      	cmp	r6, #6
 800f9f0:	d128      	bne.n	800fa44 <_strtod_l+0xbc>
 800f9f2:	3501      	adds	r5, #1
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	9519      	str	r5, [sp, #100]	@ 0x64
 800f9f8:	930e      	str	r3, [sp, #56]	@ 0x38
 800f9fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	f040 858e 	bne.w	801051e <_strtod_l+0xb96>
 800fa02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fa04:	b1cb      	cbz	r3, 800fa3a <_strtod_l+0xb2>
 800fa06:	4652      	mov	r2, sl
 800fa08:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800fa0c:	ec43 2b10 	vmov	d0, r2, r3
 800fa10:	b01f      	add	sp, #124	@ 0x7c
 800fa12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa16:	2920      	cmp	r1, #32
 800fa18:	d1ce      	bne.n	800f9b8 <_strtod_l+0x30>
 800fa1a:	3201      	adds	r2, #1
 800fa1c:	e7c1      	b.n	800f9a2 <_strtod_l+0x1a>
 800fa1e:	292d      	cmp	r1, #45	@ 0x2d
 800fa20:	d1ca      	bne.n	800f9b8 <_strtod_l+0x30>
 800fa22:	2101      	movs	r1, #1
 800fa24:	910e      	str	r1, [sp, #56]	@ 0x38
 800fa26:	1c51      	adds	r1, r2, #1
 800fa28:	9119      	str	r1, [sp, #100]	@ 0x64
 800fa2a:	7852      	ldrb	r2, [r2, #1]
 800fa2c:	2a00      	cmp	r2, #0
 800fa2e:	d1c5      	bne.n	800f9bc <_strtod_l+0x34>
 800fa30:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fa32:	9419      	str	r4, [sp, #100]	@ 0x64
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	f040 8570 	bne.w	801051a <_strtod_l+0xb92>
 800fa3a:	4652      	mov	r2, sl
 800fa3c:	465b      	mov	r3, fp
 800fa3e:	e7e5      	b.n	800fa0c <_strtod_l+0x84>
 800fa40:	2100      	movs	r1, #0
 800fa42:	e7ef      	b.n	800fa24 <_strtod_l+0x9c>
 800fa44:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fa46:	b13a      	cbz	r2, 800fa58 <_strtod_l+0xd0>
 800fa48:	2135      	movs	r1, #53	@ 0x35
 800fa4a:	a81c      	add	r0, sp, #112	@ 0x70
 800fa4c:	f7ff ff3a 	bl	800f8c4 <__copybits>
 800fa50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fa52:	9805      	ldr	r0, [sp, #20]
 800fa54:	f7ff fb10 	bl	800f078 <_Bfree>
 800fa58:	3e01      	subs	r6, #1
 800fa5a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800fa5c:	2e04      	cmp	r6, #4
 800fa5e:	d806      	bhi.n	800fa6e <_strtod_l+0xe6>
 800fa60:	e8df f006 	tbb	[pc, r6]
 800fa64:	201d0314 	.word	0x201d0314
 800fa68:	14          	.byte	0x14
 800fa69:	00          	.byte	0x00
 800fa6a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800fa6e:	05e1      	lsls	r1, r4, #23
 800fa70:	bf48      	it	mi
 800fa72:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800fa76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fa7a:	0d1b      	lsrs	r3, r3, #20
 800fa7c:	051b      	lsls	r3, r3, #20
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d1bb      	bne.n	800f9fa <_strtod_l+0x72>
 800fa82:	f7fe fb1d 	bl	800e0c0 <__errno>
 800fa86:	2322      	movs	r3, #34	@ 0x22
 800fa88:	6003      	str	r3, [r0, #0]
 800fa8a:	e7b6      	b.n	800f9fa <_strtod_l+0x72>
 800fa8c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800fa90:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800fa94:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800fa98:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fa9c:	e7e7      	b.n	800fa6e <_strtod_l+0xe6>
 800fa9e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800fc20 <_strtod_l+0x298>
 800faa2:	e7e4      	b.n	800fa6e <_strtod_l+0xe6>
 800faa4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800faa8:	f04f 3aff 	mov.w	sl, #4294967295
 800faac:	e7df      	b.n	800fa6e <_strtod_l+0xe6>
 800faae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fab0:	1c5a      	adds	r2, r3, #1
 800fab2:	9219      	str	r2, [sp, #100]	@ 0x64
 800fab4:	785b      	ldrb	r3, [r3, #1]
 800fab6:	2b30      	cmp	r3, #48	@ 0x30
 800fab8:	d0f9      	beq.n	800faae <_strtod_l+0x126>
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d09d      	beq.n	800f9fa <_strtod_l+0x72>
 800fabe:	2301      	movs	r3, #1
 800fac0:	2700      	movs	r7, #0
 800fac2:	9308      	str	r3, [sp, #32]
 800fac4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fac6:	930c      	str	r3, [sp, #48]	@ 0x30
 800fac8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800faca:	46b9      	mov	r9, r7
 800facc:	220a      	movs	r2, #10
 800face:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800fad0:	7805      	ldrb	r5, [r0, #0]
 800fad2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800fad6:	b2d9      	uxtb	r1, r3
 800fad8:	2909      	cmp	r1, #9
 800fada:	d928      	bls.n	800fb2e <_strtod_l+0x1a6>
 800fadc:	494f      	ldr	r1, [pc, #316]	@ (800fc1c <_strtod_l+0x294>)
 800fade:	2201      	movs	r2, #1
 800fae0:	f001 f9ac 	bl	8010e3c <strncmp>
 800fae4:	2800      	cmp	r0, #0
 800fae6:	d032      	beq.n	800fb4e <_strtod_l+0x1c6>
 800fae8:	2000      	movs	r0, #0
 800faea:	462a      	mov	r2, r5
 800faec:	900a      	str	r0, [sp, #40]	@ 0x28
 800faee:	464d      	mov	r5, r9
 800faf0:	4603      	mov	r3, r0
 800faf2:	2a65      	cmp	r2, #101	@ 0x65
 800faf4:	d001      	beq.n	800fafa <_strtod_l+0x172>
 800faf6:	2a45      	cmp	r2, #69	@ 0x45
 800faf8:	d114      	bne.n	800fb24 <_strtod_l+0x19c>
 800fafa:	b91d      	cbnz	r5, 800fb04 <_strtod_l+0x17c>
 800fafc:	9a08      	ldr	r2, [sp, #32]
 800fafe:	4302      	orrs	r2, r0
 800fb00:	d096      	beq.n	800fa30 <_strtod_l+0xa8>
 800fb02:	2500      	movs	r5, #0
 800fb04:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800fb06:	1c62      	adds	r2, r4, #1
 800fb08:	9219      	str	r2, [sp, #100]	@ 0x64
 800fb0a:	7862      	ldrb	r2, [r4, #1]
 800fb0c:	2a2b      	cmp	r2, #43	@ 0x2b
 800fb0e:	d07a      	beq.n	800fc06 <_strtod_l+0x27e>
 800fb10:	2a2d      	cmp	r2, #45	@ 0x2d
 800fb12:	d07e      	beq.n	800fc12 <_strtod_l+0x28a>
 800fb14:	f04f 0c00 	mov.w	ip, #0
 800fb18:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800fb1c:	2909      	cmp	r1, #9
 800fb1e:	f240 8085 	bls.w	800fc2c <_strtod_l+0x2a4>
 800fb22:	9419      	str	r4, [sp, #100]	@ 0x64
 800fb24:	f04f 0800 	mov.w	r8, #0
 800fb28:	e0a5      	b.n	800fc76 <_strtod_l+0x2ee>
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	e7c8      	b.n	800fac0 <_strtod_l+0x138>
 800fb2e:	f1b9 0f08 	cmp.w	r9, #8
 800fb32:	bfd8      	it	le
 800fb34:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800fb36:	f100 0001 	add.w	r0, r0, #1
 800fb3a:	bfda      	itte	le
 800fb3c:	fb02 3301 	mlale	r3, r2, r1, r3
 800fb40:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800fb42:	fb02 3707 	mlagt	r7, r2, r7, r3
 800fb46:	f109 0901 	add.w	r9, r9, #1
 800fb4a:	9019      	str	r0, [sp, #100]	@ 0x64
 800fb4c:	e7bf      	b.n	800face <_strtod_l+0x146>
 800fb4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fb50:	1c5a      	adds	r2, r3, #1
 800fb52:	9219      	str	r2, [sp, #100]	@ 0x64
 800fb54:	785a      	ldrb	r2, [r3, #1]
 800fb56:	f1b9 0f00 	cmp.w	r9, #0
 800fb5a:	d03b      	beq.n	800fbd4 <_strtod_l+0x24c>
 800fb5c:	900a      	str	r0, [sp, #40]	@ 0x28
 800fb5e:	464d      	mov	r5, r9
 800fb60:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800fb64:	2b09      	cmp	r3, #9
 800fb66:	d912      	bls.n	800fb8e <_strtod_l+0x206>
 800fb68:	2301      	movs	r3, #1
 800fb6a:	e7c2      	b.n	800faf2 <_strtod_l+0x16a>
 800fb6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fb6e:	1c5a      	adds	r2, r3, #1
 800fb70:	9219      	str	r2, [sp, #100]	@ 0x64
 800fb72:	785a      	ldrb	r2, [r3, #1]
 800fb74:	3001      	adds	r0, #1
 800fb76:	2a30      	cmp	r2, #48	@ 0x30
 800fb78:	d0f8      	beq.n	800fb6c <_strtod_l+0x1e4>
 800fb7a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800fb7e:	2b08      	cmp	r3, #8
 800fb80:	f200 84d2 	bhi.w	8010528 <_strtod_l+0xba0>
 800fb84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fb86:	900a      	str	r0, [sp, #40]	@ 0x28
 800fb88:	2000      	movs	r0, #0
 800fb8a:	930c      	str	r3, [sp, #48]	@ 0x30
 800fb8c:	4605      	mov	r5, r0
 800fb8e:	3a30      	subs	r2, #48	@ 0x30
 800fb90:	f100 0301 	add.w	r3, r0, #1
 800fb94:	d018      	beq.n	800fbc8 <_strtod_l+0x240>
 800fb96:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fb98:	4419      	add	r1, r3
 800fb9a:	910a      	str	r1, [sp, #40]	@ 0x28
 800fb9c:	462e      	mov	r6, r5
 800fb9e:	f04f 0e0a 	mov.w	lr, #10
 800fba2:	1c71      	adds	r1, r6, #1
 800fba4:	eba1 0c05 	sub.w	ip, r1, r5
 800fba8:	4563      	cmp	r3, ip
 800fbaa:	dc15      	bgt.n	800fbd8 <_strtod_l+0x250>
 800fbac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800fbb0:	182b      	adds	r3, r5, r0
 800fbb2:	2b08      	cmp	r3, #8
 800fbb4:	f105 0501 	add.w	r5, r5, #1
 800fbb8:	4405      	add	r5, r0
 800fbba:	dc1a      	bgt.n	800fbf2 <_strtod_l+0x26a>
 800fbbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fbbe:	230a      	movs	r3, #10
 800fbc0:	fb03 2301 	mla	r3, r3, r1, r2
 800fbc4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fbca:	1c51      	adds	r1, r2, #1
 800fbcc:	9119      	str	r1, [sp, #100]	@ 0x64
 800fbce:	7852      	ldrb	r2, [r2, #1]
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	e7c5      	b.n	800fb60 <_strtod_l+0x1d8>
 800fbd4:	4648      	mov	r0, r9
 800fbd6:	e7ce      	b.n	800fb76 <_strtod_l+0x1ee>
 800fbd8:	2e08      	cmp	r6, #8
 800fbda:	dc05      	bgt.n	800fbe8 <_strtod_l+0x260>
 800fbdc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800fbde:	fb0e f606 	mul.w	r6, lr, r6
 800fbe2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800fbe4:	460e      	mov	r6, r1
 800fbe6:	e7dc      	b.n	800fba2 <_strtod_l+0x21a>
 800fbe8:	2910      	cmp	r1, #16
 800fbea:	bfd8      	it	le
 800fbec:	fb0e f707 	mulle.w	r7, lr, r7
 800fbf0:	e7f8      	b.n	800fbe4 <_strtod_l+0x25c>
 800fbf2:	2b0f      	cmp	r3, #15
 800fbf4:	bfdc      	itt	le
 800fbf6:	230a      	movle	r3, #10
 800fbf8:	fb03 2707 	mlale	r7, r3, r7, r2
 800fbfc:	e7e3      	b.n	800fbc6 <_strtod_l+0x23e>
 800fbfe:	2300      	movs	r3, #0
 800fc00:	930a      	str	r3, [sp, #40]	@ 0x28
 800fc02:	2301      	movs	r3, #1
 800fc04:	e77a      	b.n	800fafc <_strtod_l+0x174>
 800fc06:	f04f 0c00 	mov.w	ip, #0
 800fc0a:	1ca2      	adds	r2, r4, #2
 800fc0c:	9219      	str	r2, [sp, #100]	@ 0x64
 800fc0e:	78a2      	ldrb	r2, [r4, #2]
 800fc10:	e782      	b.n	800fb18 <_strtod_l+0x190>
 800fc12:	f04f 0c01 	mov.w	ip, #1
 800fc16:	e7f8      	b.n	800fc0a <_strtod_l+0x282>
 800fc18:	08011d04 	.word	0x08011d04
 800fc1c:	08011b3c 	.word	0x08011b3c
 800fc20:	7ff00000 	.word	0x7ff00000
 800fc24:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fc26:	1c51      	adds	r1, r2, #1
 800fc28:	9119      	str	r1, [sp, #100]	@ 0x64
 800fc2a:	7852      	ldrb	r2, [r2, #1]
 800fc2c:	2a30      	cmp	r2, #48	@ 0x30
 800fc2e:	d0f9      	beq.n	800fc24 <_strtod_l+0x29c>
 800fc30:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800fc34:	2908      	cmp	r1, #8
 800fc36:	f63f af75 	bhi.w	800fb24 <_strtod_l+0x19c>
 800fc3a:	3a30      	subs	r2, #48	@ 0x30
 800fc3c:	9209      	str	r2, [sp, #36]	@ 0x24
 800fc3e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fc40:	920f      	str	r2, [sp, #60]	@ 0x3c
 800fc42:	f04f 080a 	mov.w	r8, #10
 800fc46:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fc48:	1c56      	adds	r6, r2, #1
 800fc4a:	9619      	str	r6, [sp, #100]	@ 0x64
 800fc4c:	7852      	ldrb	r2, [r2, #1]
 800fc4e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800fc52:	f1be 0f09 	cmp.w	lr, #9
 800fc56:	d939      	bls.n	800fccc <_strtod_l+0x344>
 800fc58:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fc5a:	1a76      	subs	r6, r6, r1
 800fc5c:	2e08      	cmp	r6, #8
 800fc5e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800fc62:	dc03      	bgt.n	800fc6c <_strtod_l+0x2e4>
 800fc64:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fc66:	4588      	cmp	r8, r1
 800fc68:	bfa8      	it	ge
 800fc6a:	4688      	movge	r8, r1
 800fc6c:	f1bc 0f00 	cmp.w	ip, #0
 800fc70:	d001      	beq.n	800fc76 <_strtod_l+0x2ee>
 800fc72:	f1c8 0800 	rsb	r8, r8, #0
 800fc76:	2d00      	cmp	r5, #0
 800fc78:	d14e      	bne.n	800fd18 <_strtod_l+0x390>
 800fc7a:	9908      	ldr	r1, [sp, #32]
 800fc7c:	4308      	orrs	r0, r1
 800fc7e:	f47f aebc 	bne.w	800f9fa <_strtod_l+0x72>
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	f47f aed4 	bne.w	800fa30 <_strtod_l+0xa8>
 800fc88:	2a69      	cmp	r2, #105	@ 0x69
 800fc8a:	d028      	beq.n	800fcde <_strtod_l+0x356>
 800fc8c:	dc25      	bgt.n	800fcda <_strtod_l+0x352>
 800fc8e:	2a49      	cmp	r2, #73	@ 0x49
 800fc90:	d025      	beq.n	800fcde <_strtod_l+0x356>
 800fc92:	2a4e      	cmp	r2, #78	@ 0x4e
 800fc94:	f47f aecc 	bne.w	800fa30 <_strtod_l+0xa8>
 800fc98:	499a      	ldr	r1, [pc, #616]	@ (800ff04 <_strtod_l+0x57c>)
 800fc9a:	a819      	add	r0, sp, #100	@ 0x64
 800fc9c:	f001 fbb4 	bl	8011408 <__match>
 800fca0:	2800      	cmp	r0, #0
 800fca2:	f43f aec5 	beq.w	800fa30 <_strtod_l+0xa8>
 800fca6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fca8:	781b      	ldrb	r3, [r3, #0]
 800fcaa:	2b28      	cmp	r3, #40	@ 0x28
 800fcac:	d12e      	bne.n	800fd0c <_strtod_l+0x384>
 800fcae:	4996      	ldr	r1, [pc, #600]	@ (800ff08 <_strtod_l+0x580>)
 800fcb0:	aa1c      	add	r2, sp, #112	@ 0x70
 800fcb2:	a819      	add	r0, sp, #100	@ 0x64
 800fcb4:	f001 fbbc 	bl	8011430 <__hexnan>
 800fcb8:	2805      	cmp	r0, #5
 800fcba:	d127      	bne.n	800fd0c <_strtod_l+0x384>
 800fcbc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fcbe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800fcc2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800fcc6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800fcca:	e696      	b.n	800f9fa <_strtod_l+0x72>
 800fccc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fcce:	fb08 2101 	mla	r1, r8, r1, r2
 800fcd2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800fcd6:	9209      	str	r2, [sp, #36]	@ 0x24
 800fcd8:	e7b5      	b.n	800fc46 <_strtod_l+0x2be>
 800fcda:	2a6e      	cmp	r2, #110	@ 0x6e
 800fcdc:	e7da      	b.n	800fc94 <_strtod_l+0x30c>
 800fcde:	498b      	ldr	r1, [pc, #556]	@ (800ff0c <_strtod_l+0x584>)
 800fce0:	a819      	add	r0, sp, #100	@ 0x64
 800fce2:	f001 fb91 	bl	8011408 <__match>
 800fce6:	2800      	cmp	r0, #0
 800fce8:	f43f aea2 	beq.w	800fa30 <_strtod_l+0xa8>
 800fcec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fcee:	4988      	ldr	r1, [pc, #544]	@ (800ff10 <_strtod_l+0x588>)
 800fcf0:	3b01      	subs	r3, #1
 800fcf2:	a819      	add	r0, sp, #100	@ 0x64
 800fcf4:	9319      	str	r3, [sp, #100]	@ 0x64
 800fcf6:	f001 fb87 	bl	8011408 <__match>
 800fcfa:	b910      	cbnz	r0, 800fd02 <_strtod_l+0x37a>
 800fcfc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fcfe:	3301      	adds	r3, #1
 800fd00:	9319      	str	r3, [sp, #100]	@ 0x64
 800fd02:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800ff20 <_strtod_l+0x598>
 800fd06:	f04f 0a00 	mov.w	sl, #0
 800fd0a:	e676      	b.n	800f9fa <_strtod_l+0x72>
 800fd0c:	4881      	ldr	r0, [pc, #516]	@ (800ff14 <_strtod_l+0x58c>)
 800fd0e:	f001 f8b7 	bl	8010e80 <nan>
 800fd12:	ec5b ab10 	vmov	sl, fp, d0
 800fd16:	e670      	b.n	800f9fa <_strtod_l+0x72>
 800fd18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd1a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800fd1c:	eba8 0303 	sub.w	r3, r8, r3
 800fd20:	f1b9 0f00 	cmp.w	r9, #0
 800fd24:	bf08      	it	eq
 800fd26:	46a9      	moveq	r9, r5
 800fd28:	2d10      	cmp	r5, #16
 800fd2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd2c:	462c      	mov	r4, r5
 800fd2e:	bfa8      	it	ge
 800fd30:	2410      	movge	r4, #16
 800fd32:	f7f0 fc0f 	bl	8000554 <__aeabi_ui2d>
 800fd36:	2d09      	cmp	r5, #9
 800fd38:	4682      	mov	sl, r0
 800fd3a:	468b      	mov	fp, r1
 800fd3c:	dc13      	bgt.n	800fd66 <_strtod_l+0x3de>
 800fd3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	f43f ae5a 	beq.w	800f9fa <_strtod_l+0x72>
 800fd46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd48:	dd78      	ble.n	800fe3c <_strtod_l+0x4b4>
 800fd4a:	2b16      	cmp	r3, #22
 800fd4c:	dc5f      	bgt.n	800fe0e <_strtod_l+0x486>
 800fd4e:	4972      	ldr	r1, [pc, #456]	@ (800ff18 <_strtod_l+0x590>)
 800fd50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fd54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd58:	4652      	mov	r2, sl
 800fd5a:	465b      	mov	r3, fp
 800fd5c:	f7f0 fc74 	bl	8000648 <__aeabi_dmul>
 800fd60:	4682      	mov	sl, r0
 800fd62:	468b      	mov	fp, r1
 800fd64:	e649      	b.n	800f9fa <_strtod_l+0x72>
 800fd66:	4b6c      	ldr	r3, [pc, #432]	@ (800ff18 <_strtod_l+0x590>)
 800fd68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fd6c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800fd70:	f7f0 fc6a 	bl	8000648 <__aeabi_dmul>
 800fd74:	4682      	mov	sl, r0
 800fd76:	4638      	mov	r0, r7
 800fd78:	468b      	mov	fp, r1
 800fd7a:	f7f0 fbeb 	bl	8000554 <__aeabi_ui2d>
 800fd7e:	4602      	mov	r2, r0
 800fd80:	460b      	mov	r3, r1
 800fd82:	4650      	mov	r0, sl
 800fd84:	4659      	mov	r1, fp
 800fd86:	f7f0 faa9 	bl	80002dc <__adddf3>
 800fd8a:	2d0f      	cmp	r5, #15
 800fd8c:	4682      	mov	sl, r0
 800fd8e:	468b      	mov	fp, r1
 800fd90:	ddd5      	ble.n	800fd3e <_strtod_l+0x3b6>
 800fd92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd94:	1b2c      	subs	r4, r5, r4
 800fd96:	441c      	add	r4, r3
 800fd98:	2c00      	cmp	r4, #0
 800fd9a:	f340 8093 	ble.w	800fec4 <_strtod_l+0x53c>
 800fd9e:	f014 030f 	ands.w	r3, r4, #15
 800fda2:	d00a      	beq.n	800fdba <_strtod_l+0x432>
 800fda4:	495c      	ldr	r1, [pc, #368]	@ (800ff18 <_strtod_l+0x590>)
 800fda6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fdaa:	4652      	mov	r2, sl
 800fdac:	465b      	mov	r3, fp
 800fdae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fdb2:	f7f0 fc49 	bl	8000648 <__aeabi_dmul>
 800fdb6:	4682      	mov	sl, r0
 800fdb8:	468b      	mov	fp, r1
 800fdba:	f034 040f 	bics.w	r4, r4, #15
 800fdbe:	d073      	beq.n	800fea8 <_strtod_l+0x520>
 800fdc0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800fdc4:	dd49      	ble.n	800fe5a <_strtod_l+0x4d2>
 800fdc6:	2400      	movs	r4, #0
 800fdc8:	46a0      	mov	r8, r4
 800fdca:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fdcc:	46a1      	mov	r9, r4
 800fdce:	9a05      	ldr	r2, [sp, #20]
 800fdd0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800ff20 <_strtod_l+0x598>
 800fdd4:	2322      	movs	r3, #34	@ 0x22
 800fdd6:	6013      	str	r3, [r2, #0]
 800fdd8:	f04f 0a00 	mov.w	sl, #0
 800fddc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	f43f ae0b 	beq.w	800f9fa <_strtod_l+0x72>
 800fde4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fde6:	9805      	ldr	r0, [sp, #20]
 800fde8:	f7ff f946 	bl	800f078 <_Bfree>
 800fdec:	9805      	ldr	r0, [sp, #20]
 800fdee:	4649      	mov	r1, r9
 800fdf0:	f7ff f942 	bl	800f078 <_Bfree>
 800fdf4:	9805      	ldr	r0, [sp, #20]
 800fdf6:	4641      	mov	r1, r8
 800fdf8:	f7ff f93e 	bl	800f078 <_Bfree>
 800fdfc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fdfe:	9805      	ldr	r0, [sp, #20]
 800fe00:	f7ff f93a 	bl	800f078 <_Bfree>
 800fe04:	9805      	ldr	r0, [sp, #20]
 800fe06:	4621      	mov	r1, r4
 800fe08:	f7ff f936 	bl	800f078 <_Bfree>
 800fe0c:	e5f5      	b.n	800f9fa <_strtod_l+0x72>
 800fe0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fe10:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800fe14:	4293      	cmp	r3, r2
 800fe16:	dbbc      	blt.n	800fd92 <_strtod_l+0x40a>
 800fe18:	4c3f      	ldr	r4, [pc, #252]	@ (800ff18 <_strtod_l+0x590>)
 800fe1a:	f1c5 050f 	rsb	r5, r5, #15
 800fe1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fe22:	4652      	mov	r2, sl
 800fe24:	465b      	mov	r3, fp
 800fe26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe2a:	f7f0 fc0d 	bl	8000648 <__aeabi_dmul>
 800fe2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe30:	1b5d      	subs	r5, r3, r5
 800fe32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fe36:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fe3a:	e78f      	b.n	800fd5c <_strtod_l+0x3d4>
 800fe3c:	3316      	adds	r3, #22
 800fe3e:	dba8      	blt.n	800fd92 <_strtod_l+0x40a>
 800fe40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe42:	eba3 0808 	sub.w	r8, r3, r8
 800fe46:	4b34      	ldr	r3, [pc, #208]	@ (800ff18 <_strtod_l+0x590>)
 800fe48:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800fe4c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800fe50:	4650      	mov	r0, sl
 800fe52:	4659      	mov	r1, fp
 800fe54:	f7f0 fd22 	bl	800089c <__aeabi_ddiv>
 800fe58:	e782      	b.n	800fd60 <_strtod_l+0x3d8>
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	4f2f      	ldr	r7, [pc, #188]	@ (800ff1c <_strtod_l+0x594>)
 800fe5e:	1124      	asrs	r4, r4, #4
 800fe60:	4650      	mov	r0, sl
 800fe62:	4659      	mov	r1, fp
 800fe64:	461e      	mov	r6, r3
 800fe66:	2c01      	cmp	r4, #1
 800fe68:	dc21      	bgt.n	800feae <_strtod_l+0x526>
 800fe6a:	b10b      	cbz	r3, 800fe70 <_strtod_l+0x4e8>
 800fe6c:	4682      	mov	sl, r0
 800fe6e:	468b      	mov	fp, r1
 800fe70:	492a      	ldr	r1, [pc, #168]	@ (800ff1c <_strtod_l+0x594>)
 800fe72:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800fe76:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800fe7a:	4652      	mov	r2, sl
 800fe7c:	465b      	mov	r3, fp
 800fe7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe82:	f7f0 fbe1 	bl	8000648 <__aeabi_dmul>
 800fe86:	4b26      	ldr	r3, [pc, #152]	@ (800ff20 <_strtod_l+0x598>)
 800fe88:	460a      	mov	r2, r1
 800fe8a:	400b      	ands	r3, r1
 800fe8c:	4925      	ldr	r1, [pc, #148]	@ (800ff24 <_strtod_l+0x59c>)
 800fe8e:	428b      	cmp	r3, r1
 800fe90:	4682      	mov	sl, r0
 800fe92:	d898      	bhi.n	800fdc6 <_strtod_l+0x43e>
 800fe94:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800fe98:	428b      	cmp	r3, r1
 800fe9a:	bf86      	itte	hi
 800fe9c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800ff28 <_strtod_l+0x5a0>
 800fea0:	f04f 3aff 	movhi.w	sl, #4294967295
 800fea4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800fea8:	2300      	movs	r3, #0
 800feaa:	9308      	str	r3, [sp, #32]
 800feac:	e076      	b.n	800ff9c <_strtod_l+0x614>
 800feae:	07e2      	lsls	r2, r4, #31
 800feb0:	d504      	bpl.n	800febc <_strtod_l+0x534>
 800feb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800feb6:	f7f0 fbc7 	bl	8000648 <__aeabi_dmul>
 800feba:	2301      	movs	r3, #1
 800febc:	3601      	adds	r6, #1
 800febe:	1064      	asrs	r4, r4, #1
 800fec0:	3708      	adds	r7, #8
 800fec2:	e7d0      	b.n	800fe66 <_strtod_l+0x4de>
 800fec4:	d0f0      	beq.n	800fea8 <_strtod_l+0x520>
 800fec6:	4264      	negs	r4, r4
 800fec8:	f014 020f 	ands.w	r2, r4, #15
 800fecc:	d00a      	beq.n	800fee4 <_strtod_l+0x55c>
 800fece:	4b12      	ldr	r3, [pc, #72]	@ (800ff18 <_strtod_l+0x590>)
 800fed0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fed4:	4650      	mov	r0, sl
 800fed6:	4659      	mov	r1, fp
 800fed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fedc:	f7f0 fcde 	bl	800089c <__aeabi_ddiv>
 800fee0:	4682      	mov	sl, r0
 800fee2:	468b      	mov	fp, r1
 800fee4:	1124      	asrs	r4, r4, #4
 800fee6:	d0df      	beq.n	800fea8 <_strtod_l+0x520>
 800fee8:	2c1f      	cmp	r4, #31
 800feea:	dd1f      	ble.n	800ff2c <_strtod_l+0x5a4>
 800feec:	2400      	movs	r4, #0
 800feee:	46a0      	mov	r8, r4
 800fef0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fef2:	46a1      	mov	r9, r4
 800fef4:	9a05      	ldr	r2, [sp, #20]
 800fef6:	2322      	movs	r3, #34	@ 0x22
 800fef8:	f04f 0a00 	mov.w	sl, #0
 800fefc:	f04f 0b00 	mov.w	fp, #0
 800ff00:	6013      	str	r3, [r2, #0]
 800ff02:	e76b      	b.n	800fddc <_strtod_l+0x454>
 800ff04:	08011a2a 	.word	0x08011a2a
 800ff08:	08011cf0 	.word	0x08011cf0
 800ff0c:	08011a22 	.word	0x08011a22
 800ff10:	08011a59 	.word	0x08011a59
 800ff14:	08011b92 	.word	0x08011b92
 800ff18:	08011c28 	.word	0x08011c28
 800ff1c:	08011c00 	.word	0x08011c00
 800ff20:	7ff00000 	.word	0x7ff00000
 800ff24:	7ca00000 	.word	0x7ca00000
 800ff28:	7fefffff 	.word	0x7fefffff
 800ff2c:	f014 0310 	ands.w	r3, r4, #16
 800ff30:	bf18      	it	ne
 800ff32:	236a      	movne	r3, #106	@ 0x6a
 800ff34:	4ea9      	ldr	r6, [pc, #676]	@ (80101dc <_strtod_l+0x854>)
 800ff36:	9308      	str	r3, [sp, #32]
 800ff38:	4650      	mov	r0, sl
 800ff3a:	4659      	mov	r1, fp
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	07e7      	lsls	r7, r4, #31
 800ff40:	d504      	bpl.n	800ff4c <_strtod_l+0x5c4>
 800ff42:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ff46:	f7f0 fb7f 	bl	8000648 <__aeabi_dmul>
 800ff4a:	2301      	movs	r3, #1
 800ff4c:	1064      	asrs	r4, r4, #1
 800ff4e:	f106 0608 	add.w	r6, r6, #8
 800ff52:	d1f4      	bne.n	800ff3e <_strtod_l+0x5b6>
 800ff54:	b10b      	cbz	r3, 800ff5a <_strtod_l+0x5d2>
 800ff56:	4682      	mov	sl, r0
 800ff58:	468b      	mov	fp, r1
 800ff5a:	9b08      	ldr	r3, [sp, #32]
 800ff5c:	b1b3      	cbz	r3, 800ff8c <_strtod_l+0x604>
 800ff5e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ff62:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	4659      	mov	r1, fp
 800ff6a:	dd0f      	ble.n	800ff8c <_strtod_l+0x604>
 800ff6c:	2b1f      	cmp	r3, #31
 800ff6e:	dd56      	ble.n	801001e <_strtod_l+0x696>
 800ff70:	2b34      	cmp	r3, #52	@ 0x34
 800ff72:	bfde      	ittt	le
 800ff74:	f04f 33ff 	movle.w	r3, #4294967295
 800ff78:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ff7c:	4093      	lslle	r3, r2
 800ff7e:	f04f 0a00 	mov.w	sl, #0
 800ff82:	bfcc      	ite	gt
 800ff84:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ff88:	ea03 0b01 	andle.w	fp, r3, r1
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	2300      	movs	r3, #0
 800ff90:	4650      	mov	r0, sl
 800ff92:	4659      	mov	r1, fp
 800ff94:	f7f0 fdc0 	bl	8000b18 <__aeabi_dcmpeq>
 800ff98:	2800      	cmp	r0, #0
 800ff9a:	d1a7      	bne.n	800feec <_strtod_l+0x564>
 800ff9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ff9e:	9300      	str	r3, [sp, #0]
 800ffa0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ffa2:	9805      	ldr	r0, [sp, #20]
 800ffa4:	462b      	mov	r3, r5
 800ffa6:	464a      	mov	r2, r9
 800ffa8:	f7ff f8ce 	bl	800f148 <__s2b>
 800ffac:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ffae:	2800      	cmp	r0, #0
 800ffb0:	f43f af09 	beq.w	800fdc6 <_strtod_l+0x43e>
 800ffb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ffb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ffb8:	2a00      	cmp	r2, #0
 800ffba:	eba3 0308 	sub.w	r3, r3, r8
 800ffbe:	bfa8      	it	ge
 800ffc0:	2300      	movge	r3, #0
 800ffc2:	9312      	str	r3, [sp, #72]	@ 0x48
 800ffc4:	2400      	movs	r4, #0
 800ffc6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ffca:	9316      	str	r3, [sp, #88]	@ 0x58
 800ffcc:	46a0      	mov	r8, r4
 800ffce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ffd0:	9805      	ldr	r0, [sp, #20]
 800ffd2:	6859      	ldr	r1, [r3, #4]
 800ffd4:	f7ff f810 	bl	800eff8 <_Balloc>
 800ffd8:	4681      	mov	r9, r0
 800ffda:	2800      	cmp	r0, #0
 800ffdc:	f43f aef7 	beq.w	800fdce <_strtod_l+0x446>
 800ffe0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ffe2:	691a      	ldr	r2, [r3, #16]
 800ffe4:	3202      	adds	r2, #2
 800ffe6:	f103 010c 	add.w	r1, r3, #12
 800ffea:	0092      	lsls	r2, r2, #2
 800ffec:	300c      	adds	r0, #12
 800ffee:	f7fe f894 	bl	800e11a <memcpy>
 800fff2:	ec4b ab10 	vmov	d0, sl, fp
 800fff6:	9805      	ldr	r0, [sp, #20]
 800fff8:	aa1c      	add	r2, sp, #112	@ 0x70
 800fffa:	a91b      	add	r1, sp, #108	@ 0x6c
 800fffc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8010000:	f7ff fbd6 	bl	800f7b0 <__d2b>
 8010004:	901a      	str	r0, [sp, #104]	@ 0x68
 8010006:	2800      	cmp	r0, #0
 8010008:	f43f aee1 	beq.w	800fdce <_strtod_l+0x446>
 801000c:	9805      	ldr	r0, [sp, #20]
 801000e:	2101      	movs	r1, #1
 8010010:	f7ff f930 	bl	800f274 <__i2b>
 8010014:	4680      	mov	r8, r0
 8010016:	b948      	cbnz	r0, 801002c <_strtod_l+0x6a4>
 8010018:	f04f 0800 	mov.w	r8, #0
 801001c:	e6d7      	b.n	800fdce <_strtod_l+0x446>
 801001e:	f04f 32ff 	mov.w	r2, #4294967295
 8010022:	fa02 f303 	lsl.w	r3, r2, r3
 8010026:	ea03 0a0a 	and.w	sl, r3, sl
 801002a:	e7af      	b.n	800ff8c <_strtod_l+0x604>
 801002c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801002e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010030:	2d00      	cmp	r5, #0
 8010032:	bfab      	itete	ge
 8010034:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8010036:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8010038:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801003a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801003c:	bfac      	ite	ge
 801003e:	18ef      	addge	r7, r5, r3
 8010040:	1b5e      	sublt	r6, r3, r5
 8010042:	9b08      	ldr	r3, [sp, #32]
 8010044:	1aed      	subs	r5, r5, r3
 8010046:	4415      	add	r5, r2
 8010048:	4b65      	ldr	r3, [pc, #404]	@ (80101e0 <_strtod_l+0x858>)
 801004a:	3d01      	subs	r5, #1
 801004c:	429d      	cmp	r5, r3
 801004e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010052:	da50      	bge.n	80100f6 <_strtod_l+0x76e>
 8010054:	1b5b      	subs	r3, r3, r5
 8010056:	2b1f      	cmp	r3, #31
 8010058:	eba2 0203 	sub.w	r2, r2, r3
 801005c:	f04f 0101 	mov.w	r1, #1
 8010060:	dc3d      	bgt.n	80100de <_strtod_l+0x756>
 8010062:	fa01 f303 	lsl.w	r3, r1, r3
 8010066:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010068:	2300      	movs	r3, #0
 801006a:	9310      	str	r3, [sp, #64]	@ 0x40
 801006c:	18bd      	adds	r5, r7, r2
 801006e:	9b08      	ldr	r3, [sp, #32]
 8010070:	42af      	cmp	r7, r5
 8010072:	4416      	add	r6, r2
 8010074:	441e      	add	r6, r3
 8010076:	463b      	mov	r3, r7
 8010078:	bfa8      	it	ge
 801007a:	462b      	movge	r3, r5
 801007c:	42b3      	cmp	r3, r6
 801007e:	bfa8      	it	ge
 8010080:	4633      	movge	r3, r6
 8010082:	2b00      	cmp	r3, #0
 8010084:	bfc2      	ittt	gt
 8010086:	1aed      	subgt	r5, r5, r3
 8010088:	1af6      	subgt	r6, r6, r3
 801008a:	1aff      	subgt	r7, r7, r3
 801008c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801008e:	2b00      	cmp	r3, #0
 8010090:	dd16      	ble.n	80100c0 <_strtod_l+0x738>
 8010092:	4641      	mov	r1, r8
 8010094:	9805      	ldr	r0, [sp, #20]
 8010096:	461a      	mov	r2, r3
 8010098:	f7ff f9a4 	bl	800f3e4 <__pow5mult>
 801009c:	4680      	mov	r8, r0
 801009e:	2800      	cmp	r0, #0
 80100a0:	d0ba      	beq.n	8010018 <_strtod_l+0x690>
 80100a2:	4601      	mov	r1, r0
 80100a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80100a6:	9805      	ldr	r0, [sp, #20]
 80100a8:	f7ff f8fa 	bl	800f2a0 <__multiply>
 80100ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80100ae:	2800      	cmp	r0, #0
 80100b0:	f43f ae8d 	beq.w	800fdce <_strtod_l+0x446>
 80100b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80100b6:	9805      	ldr	r0, [sp, #20]
 80100b8:	f7fe ffde 	bl	800f078 <_Bfree>
 80100bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80100be:	931a      	str	r3, [sp, #104]	@ 0x68
 80100c0:	2d00      	cmp	r5, #0
 80100c2:	dc1d      	bgt.n	8010100 <_strtod_l+0x778>
 80100c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	dd23      	ble.n	8010112 <_strtod_l+0x78a>
 80100ca:	4649      	mov	r1, r9
 80100cc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80100ce:	9805      	ldr	r0, [sp, #20]
 80100d0:	f7ff f988 	bl	800f3e4 <__pow5mult>
 80100d4:	4681      	mov	r9, r0
 80100d6:	b9e0      	cbnz	r0, 8010112 <_strtod_l+0x78a>
 80100d8:	f04f 0900 	mov.w	r9, #0
 80100dc:	e677      	b.n	800fdce <_strtod_l+0x446>
 80100de:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80100e2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80100e6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80100ea:	35e2      	adds	r5, #226	@ 0xe2
 80100ec:	fa01 f305 	lsl.w	r3, r1, r5
 80100f0:	9310      	str	r3, [sp, #64]	@ 0x40
 80100f2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80100f4:	e7ba      	b.n	801006c <_strtod_l+0x6e4>
 80100f6:	2300      	movs	r3, #0
 80100f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80100fa:	2301      	movs	r3, #1
 80100fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80100fe:	e7b5      	b.n	801006c <_strtod_l+0x6e4>
 8010100:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010102:	9805      	ldr	r0, [sp, #20]
 8010104:	462a      	mov	r2, r5
 8010106:	f7ff f9c7 	bl	800f498 <__lshift>
 801010a:	901a      	str	r0, [sp, #104]	@ 0x68
 801010c:	2800      	cmp	r0, #0
 801010e:	d1d9      	bne.n	80100c4 <_strtod_l+0x73c>
 8010110:	e65d      	b.n	800fdce <_strtod_l+0x446>
 8010112:	2e00      	cmp	r6, #0
 8010114:	dd07      	ble.n	8010126 <_strtod_l+0x79e>
 8010116:	4649      	mov	r1, r9
 8010118:	9805      	ldr	r0, [sp, #20]
 801011a:	4632      	mov	r2, r6
 801011c:	f7ff f9bc 	bl	800f498 <__lshift>
 8010120:	4681      	mov	r9, r0
 8010122:	2800      	cmp	r0, #0
 8010124:	d0d8      	beq.n	80100d8 <_strtod_l+0x750>
 8010126:	2f00      	cmp	r7, #0
 8010128:	dd08      	ble.n	801013c <_strtod_l+0x7b4>
 801012a:	4641      	mov	r1, r8
 801012c:	9805      	ldr	r0, [sp, #20]
 801012e:	463a      	mov	r2, r7
 8010130:	f7ff f9b2 	bl	800f498 <__lshift>
 8010134:	4680      	mov	r8, r0
 8010136:	2800      	cmp	r0, #0
 8010138:	f43f ae49 	beq.w	800fdce <_strtod_l+0x446>
 801013c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801013e:	9805      	ldr	r0, [sp, #20]
 8010140:	464a      	mov	r2, r9
 8010142:	f7ff fa31 	bl	800f5a8 <__mdiff>
 8010146:	4604      	mov	r4, r0
 8010148:	2800      	cmp	r0, #0
 801014a:	f43f ae40 	beq.w	800fdce <_strtod_l+0x446>
 801014e:	68c3      	ldr	r3, [r0, #12]
 8010150:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010152:	2300      	movs	r3, #0
 8010154:	60c3      	str	r3, [r0, #12]
 8010156:	4641      	mov	r1, r8
 8010158:	f7ff fa0a 	bl	800f570 <__mcmp>
 801015c:	2800      	cmp	r0, #0
 801015e:	da45      	bge.n	80101ec <_strtod_l+0x864>
 8010160:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010162:	ea53 030a 	orrs.w	r3, r3, sl
 8010166:	d16b      	bne.n	8010240 <_strtod_l+0x8b8>
 8010168:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801016c:	2b00      	cmp	r3, #0
 801016e:	d167      	bne.n	8010240 <_strtod_l+0x8b8>
 8010170:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010174:	0d1b      	lsrs	r3, r3, #20
 8010176:	051b      	lsls	r3, r3, #20
 8010178:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801017c:	d960      	bls.n	8010240 <_strtod_l+0x8b8>
 801017e:	6963      	ldr	r3, [r4, #20]
 8010180:	b913      	cbnz	r3, 8010188 <_strtod_l+0x800>
 8010182:	6923      	ldr	r3, [r4, #16]
 8010184:	2b01      	cmp	r3, #1
 8010186:	dd5b      	ble.n	8010240 <_strtod_l+0x8b8>
 8010188:	4621      	mov	r1, r4
 801018a:	2201      	movs	r2, #1
 801018c:	9805      	ldr	r0, [sp, #20]
 801018e:	f7ff f983 	bl	800f498 <__lshift>
 8010192:	4641      	mov	r1, r8
 8010194:	4604      	mov	r4, r0
 8010196:	f7ff f9eb 	bl	800f570 <__mcmp>
 801019a:	2800      	cmp	r0, #0
 801019c:	dd50      	ble.n	8010240 <_strtod_l+0x8b8>
 801019e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80101a2:	9a08      	ldr	r2, [sp, #32]
 80101a4:	0d1b      	lsrs	r3, r3, #20
 80101a6:	051b      	lsls	r3, r3, #20
 80101a8:	2a00      	cmp	r2, #0
 80101aa:	d06a      	beq.n	8010282 <_strtod_l+0x8fa>
 80101ac:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80101b0:	d867      	bhi.n	8010282 <_strtod_l+0x8fa>
 80101b2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80101b6:	f67f ae9d 	bls.w	800fef4 <_strtod_l+0x56c>
 80101ba:	4b0a      	ldr	r3, [pc, #40]	@ (80101e4 <_strtod_l+0x85c>)
 80101bc:	4650      	mov	r0, sl
 80101be:	4659      	mov	r1, fp
 80101c0:	2200      	movs	r2, #0
 80101c2:	f7f0 fa41 	bl	8000648 <__aeabi_dmul>
 80101c6:	4b08      	ldr	r3, [pc, #32]	@ (80101e8 <_strtod_l+0x860>)
 80101c8:	400b      	ands	r3, r1
 80101ca:	4682      	mov	sl, r0
 80101cc:	468b      	mov	fp, r1
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	f47f ae08 	bne.w	800fde4 <_strtod_l+0x45c>
 80101d4:	9a05      	ldr	r2, [sp, #20]
 80101d6:	2322      	movs	r3, #34	@ 0x22
 80101d8:	6013      	str	r3, [r2, #0]
 80101da:	e603      	b.n	800fde4 <_strtod_l+0x45c>
 80101dc:	08011d18 	.word	0x08011d18
 80101e0:	fffffc02 	.word	0xfffffc02
 80101e4:	39500000 	.word	0x39500000
 80101e8:	7ff00000 	.word	0x7ff00000
 80101ec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80101f0:	d165      	bne.n	80102be <_strtod_l+0x936>
 80101f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80101f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80101f8:	b35a      	cbz	r2, 8010252 <_strtod_l+0x8ca>
 80101fa:	4a9f      	ldr	r2, [pc, #636]	@ (8010478 <_strtod_l+0xaf0>)
 80101fc:	4293      	cmp	r3, r2
 80101fe:	d12b      	bne.n	8010258 <_strtod_l+0x8d0>
 8010200:	9b08      	ldr	r3, [sp, #32]
 8010202:	4651      	mov	r1, sl
 8010204:	b303      	cbz	r3, 8010248 <_strtod_l+0x8c0>
 8010206:	4b9d      	ldr	r3, [pc, #628]	@ (801047c <_strtod_l+0xaf4>)
 8010208:	465a      	mov	r2, fp
 801020a:	4013      	ands	r3, r2
 801020c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010210:	f04f 32ff 	mov.w	r2, #4294967295
 8010214:	d81b      	bhi.n	801024e <_strtod_l+0x8c6>
 8010216:	0d1b      	lsrs	r3, r3, #20
 8010218:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801021c:	fa02 f303 	lsl.w	r3, r2, r3
 8010220:	4299      	cmp	r1, r3
 8010222:	d119      	bne.n	8010258 <_strtod_l+0x8d0>
 8010224:	4b96      	ldr	r3, [pc, #600]	@ (8010480 <_strtod_l+0xaf8>)
 8010226:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010228:	429a      	cmp	r2, r3
 801022a:	d102      	bne.n	8010232 <_strtod_l+0x8aa>
 801022c:	3101      	adds	r1, #1
 801022e:	f43f adce 	beq.w	800fdce <_strtod_l+0x446>
 8010232:	4b92      	ldr	r3, [pc, #584]	@ (801047c <_strtod_l+0xaf4>)
 8010234:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010236:	401a      	ands	r2, r3
 8010238:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801023c:	f04f 0a00 	mov.w	sl, #0
 8010240:	9b08      	ldr	r3, [sp, #32]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d1b9      	bne.n	80101ba <_strtod_l+0x832>
 8010246:	e5cd      	b.n	800fde4 <_strtod_l+0x45c>
 8010248:	f04f 33ff 	mov.w	r3, #4294967295
 801024c:	e7e8      	b.n	8010220 <_strtod_l+0x898>
 801024e:	4613      	mov	r3, r2
 8010250:	e7e6      	b.n	8010220 <_strtod_l+0x898>
 8010252:	ea53 030a 	orrs.w	r3, r3, sl
 8010256:	d0a2      	beq.n	801019e <_strtod_l+0x816>
 8010258:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801025a:	b1db      	cbz	r3, 8010294 <_strtod_l+0x90c>
 801025c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801025e:	4213      	tst	r3, r2
 8010260:	d0ee      	beq.n	8010240 <_strtod_l+0x8b8>
 8010262:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010264:	9a08      	ldr	r2, [sp, #32]
 8010266:	4650      	mov	r0, sl
 8010268:	4659      	mov	r1, fp
 801026a:	b1bb      	cbz	r3, 801029c <_strtod_l+0x914>
 801026c:	f7ff fb6e 	bl	800f94c <sulp>
 8010270:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010274:	ec53 2b10 	vmov	r2, r3, d0
 8010278:	f7f0 f830 	bl	80002dc <__adddf3>
 801027c:	4682      	mov	sl, r0
 801027e:	468b      	mov	fp, r1
 8010280:	e7de      	b.n	8010240 <_strtod_l+0x8b8>
 8010282:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010286:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801028a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801028e:	f04f 3aff 	mov.w	sl, #4294967295
 8010292:	e7d5      	b.n	8010240 <_strtod_l+0x8b8>
 8010294:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010296:	ea13 0f0a 	tst.w	r3, sl
 801029a:	e7e1      	b.n	8010260 <_strtod_l+0x8d8>
 801029c:	f7ff fb56 	bl	800f94c <sulp>
 80102a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80102a4:	ec53 2b10 	vmov	r2, r3, d0
 80102a8:	f7f0 f816 	bl	80002d8 <__aeabi_dsub>
 80102ac:	2200      	movs	r2, #0
 80102ae:	2300      	movs	r3, #0
 80102b0:	4682      	mov	sl, r0
 80102b2:	468b      	mov	fp, r1
 80102b4:	f7f0 fc30 	bl	8000b18 <__aeabi_dcmpeq>
 80102b8:	2800      	cmp	r0, #0
 80102ba:	d0c1      	beq.n	8010240 <_strtod_l+0x8b8>
 80102bc:	e61a      	b.n	800fef4 <_strtod_l+0x56c>
 80102be:	4641      	mov	r1, r8
 80102c0:	4620      	mov	r0, r4
 80102c2:	f7ff facd 	bl	800f860 <__ratio>
 80102c6:	ec57 6b10 	vmov	r6, r7, d0
 80102ca:	2200      	movs	r2, #0
 80102cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80102d0:	4630      	mov	r0, r6
 80102d2:	4639      	mov	r1, r7
 80102d4:	f7f0 fc34 	bl	8000b40 <__aeabi_dcmple>
 80102d8:	2800      	cmp	r0, #0
 80102da:	d06f      	beq.n	80103bc <_strtod_l+0xa34>
 80102dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d17a      	bne.n	80103d8 <_strtod_l+0xa50>
 80102e2:	f1ba 0f00 	cmp.w	sl, #0
 80102e6:	d158      	bne.n	801039a <_strtod_l+0xa12>
 80102e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d15a      	bne.n	80103a8 <_strtod_l+0xa20>
 80102f2:	4b64      	ldr	r3, [pc, #400]	@ (8010484 <_strtod_l+0xafc>)
 80102f4:	2200      	movs	r2, #0
 80102f6:	4630      	mov	r0, r6
 80102f8:	4639      	mov	r1, r7
 80102fa:	f7f0 fc17 	bl	8000b2c <__aeabi_dcmplt>
 80102fe:	2800      	cmp	r0, #0
 8010300:	d159      	bne.n	80103b6 <_strtod_l+0xa2e>
 8010302:	4630      	mov	r0, r6
 8010304:	4639      	mov	r1, r7
 8010306:	4b60      	ldr	r3, [pc, #384]	@ (8010488 <_strtod_l+0xb00>)
 8010308:	2200      	movs	r2, #0
 801030a:	f7f0 f99d 	bl	8000648 <__aeabi_dmul>
 801030e:	4606      	mov	r6, r0
 8010310:	460f      	mov	r7, r1
 8010312:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8010316:	9606      	str	r6, [sp, #24]
 8010318:	9307      	str	r3, [sp, #28]
 801031a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801031e:	4d57      	ldr	r5, [pc, #348]	@ (801047c <_strtod_l+0xaf4>)
 8010320:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010326:	401d      	ands	r5, r3
 8010328:	4b58      	ldr	r3, [pc, #352]	@ (801048c <_strtod_l+0xb04>)
 801032a:	429d      	cmp	r5, r3
 801032c:	f040 80b2 	bne.w	8010494 <_strtod_l+0xb0c>
 8010330:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010332:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8010336:	ec4b ab10 	vmov	d0, sl, fp
 801033a:	f7ff f9c9 	bl	800f6d0 <__ulp>
 801033e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010342:	ec51 0b10 	vmov	r0, r1, d0
 8010346:	f7f0 f97f 	bl	8000648 <__aeabi_dmul>
 801034a:	4652      	mov	r2, sl
 801034c:	465b      	mov	r3, fp
 801034e:	f7ef ffc5 	bl	80002dc <__adddf3>
 8010352:	460b      	mov	r3, r1
 8010354:	4949      	ldr	r1, [pc, #292]	@ (801047c <_strtod_l+0xaf4>)
 8010356:	4a4e      	ldr	r2, [pc, #312]	@ (8010490 <_strtod_l+0xb08>)
 8010358:	4019      	ands	r1, r3
 801035a:	4291      	cmp	r1, r2
 801035c:	4682      	mov	sl, r0
 801035e:	d942      	bls.n	80103e6 <_strtod_l+0xa5e>
 8010360:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010362:	4b47      	ldr	r3, [pc, #284]	@ (8010480 <_strtod_l+0xaf8>)
 8010364:	429a      	cmp	r2, r3
 8010366:	d103      	bne.n	8010370 <_strtod_l+0x9e8>
 8010368:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801036a:	3301      	adds	r3, #1
 801036c:	f43f ad2f 	beq.w	800fdce <_strtod_l+0x446>
 8010370:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8010480 <_strtod_l+0xaf8>
 8010374:	f04f 3aff 	mov.w	sl, #4294967295
 8010378:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801037a:	9805      	ldr	r0, [sp, #20]
 801037c:	f7fe fe7c 	bl	800f078 <_Bfree>
 8010380:	9805      	ldr	r0, [sp, #20]
 8010382:	4649      	mov	r1, r9
 8010384:	f7fe fe78 	bl	800f078 <_Bfree>
 8010388:	9805      	ldr	r0, [sp, #20]
 801038a:	4641      	mov	r1, r8
 801038c:	f7fe fe74 	bl	800f078 <_Bfree>
 8010390:	9805      	ldr	r0, [sp, #20]
 8010392:	4621      	mov	r1, r4
 8010394:	f7fe fe70 	bl	800f078 <_Bfree>
 8010398:	e619      	b.n	800ffce <_strtod_l+0x646>
 801039a:	f1ba 0f01 	cmp.w	sl, #1
 801039e:	d103      	bne.n	80103a8 <_strtod_l+0xa20>
 80103a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	f43f ada6 	beq.w	800fef4 <_strtod_l+0x56c>
 80103a8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8010458 <_strtod_l+0xad0>
 80103ac:	4f35      	ldr	r7, [pc, #212]	@ (8010484 <_strtod_l+0xafc>)
 80103ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80103b2:	2600      	movs	r6, #0
 80103b4:	e7b1      	b.n	801031a <_strtod_l+0x992>
 80103b6:	4f34      	ldr	r7, [pc, #208]	@ (8010488 <_strtod_l+0xb00>)
 80103b8:	2600      	movs	r6, #0
 80103ba:	e7aa      	b.n	8010312 <_strtod_l+0x98a>
 80103bc:	4b32      	ldr	r3, [pc, #200]	@ (8010488 <_strtod_l+0xb00>)
 80103be:	4630      	mov	r0, r6
 80103c0:	4639      	mov	r1, r7
 80103c2:	2200      	movs	r2, #0
 80103c4:	f7f0 f940 	bl	8000648 <__aeabi_dmul>
 80103c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80103ca:	4606      	mov	r6, r0
 80103cc:	460f      	mov	r7, r1
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d09f      	beq.n	8010312 <_strtod_l+0x98a>
 80103d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80103d6:	e7a0      	b.n	801031a <_strtod_l+0x992>
 80103d8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010460 <_strtod_l+0xad8>
 80103dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80103e0:	ec57 6b17 	vmov	r6, r7, d7
 80103e4:	e799      	b.n	801031a <_strtod_l+0x992>
 80103e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80103ea:	9b08      	ldr	r3, [sp, #32]
 80103ec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d1c1      	bne.n	8010378 <_strtod_l+0x9f0>
 80103f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80103f8:	0d1b      	lsrs	r3, r3, #20
 80103fa:	051b      	lsls	r3, r3, #20
 80103fc:	429d      	cmp	r5, r3
 80103fe:	d1bb      	bne.n	8010378 <_strtod_l+0x9f0>
 8010400:	4630      	mov	r0, r6
 8010402:	4639      	mov	r1, r7
 8010404:	f7f0 fc80 	bl	8000d08 <__aeabi_d2lz>
 8010408:	f7f0 f8f0 	bl	80005ec <__aeabi_l2d>
 801040c:	4602      	mov	r2, r0
 801040e:	460b      	mov	r3, r1
 8010410:	4630      	mov	r0, r6
 8010412:	4639      	mov	r1, r7
 8010414:	f7ef ff60 	bl	80002d8 <__aeabi_dsub>
 8010418:	460b      	mov	r3, r1
 801041a:	4602      	mov	r2, r0
 801041c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010420:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8010424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010426:	ea46 060a 	orr.w	r6, r6, sl
 801042a:	431e      	orrs	r6, r3
 801042c:	d06f      	beq.n	801050e <_strtod_l+0xb86>
 801042e:	a30e      	add	r3, pc, #56	@ (adr r3, 8010468 <_strtod_l+0xae0>)
 8010430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010434:	f7f0 fb7a 	bl	8000b2c <__aeabi_dcmplt>
 8010438:	2800      	cmp	r0, #0
 801043a:	f47f acd3 	bne.w	800fde4 <_strtod_l+0x45c>
 801043e:	a30c      	add	r3, pc, #48	@ (adr r3, 8010470 <_strtod_l+0xae8>)
 8010440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010444:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010448:	f7f0 fb8e 	bl	8000b68 <__aeabi_dcmpgt>
 801044c:	2800      	cmp	r0, #0
 801044e:	d093      	beq.n	8010378 <_strtod_l+0x9f0>
 8010450:	e4c8      	b.n	800fde4 <_strtod_l+0x45c>
 8010452:	bf00      	nop
 8010454:	f3af 8000 	nop.w
 8010458:	00000000 	.word	0x00000000
 801045c:	bff00000 	.word	0xbff00000
 8010460:	00000000 	.word	0x00000000
 8010464:	3ff00000 	.word	0x3ff00000
 8010468:	94a03595 	.word	0x94a03595
 801046c:	3fdfffff 	.word	0x3fdfffff
 8010470:	35afe535 	.word	0x35afe535
 8010474:	3fe00000 	.word	0x3fe00000
 8010478:	000fffff 	.word	0x000fffff
 801047c:	7ff00000 	.word	0x7ff00000
 8010480:	7fefffff 	.word	0x7fefffff
 8010484:	3ff00000 	.word	0x3ff00000
 8010488:	3fe00000 	.word	0x3fe00000
 801048c:	7fe00000 	.word	0x7fe00000
 8010490:	7c9fffff 	.word	0x7c9fffff
 8010494:	9b08      	ldr	r3, [sp, #32]
 8010496:	b323      	cbz	r3, 80104e2 <_strtod_l+0xb5a>
 8010498:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801049c:	d821      	bhi.n	80104e2 <_strtod_l+0xb5a>
 801049e:	a328      	add	r3, pc, #160	@ (adr r3, 8010540 <_strtod_l+0xbb8>)
 80104a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a4:	4630      	mov	r0, r6
 80104a6:	4639      	mov	r1, r7
 80104a8:	f7f0 fb4a 	bl	8000b40 <__aeabi_dcmple>
 80104ac:	b1a0      	cbz	r0, 80104d8 <_strtod_l+0xb50>
 80104ae:	4639      	mov	r1, r7
 80104b0:	4630      	mov	r0, r6
 80104b2:	f7f0 fba1 	bl	8000bf8 <__aeabi_d2uiz>
 80104b6:	2801      	cmp	r0, #1
 80104b8:	bf38      	it	cc
 80104ba:	2001      	movcc	r0, #1
 80104bc:	f7f0 f84a 	bl	8000554 <__aeabi_ui2d>
 80104c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104c2:	4606      	mov	r6, r0
 80104c4:	460f      	mov	r7, r1
 80104c6:	b9fb      	cbnz	r3, 8010508 <_strtod_l+0xb80>
 80104c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80104cc:	9014      	str	r0, [sp, #80]	@ 0x50
 80104ce:	9315      	str	r3, [sp, #84]	@ 0x54
 80104d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80104d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80104d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80104da:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80104de:	1b5b      	subs	r3, r3, r5
 80104e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80104e2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80104e6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80104ea:	f7ff f8f1 	bl	800f6d0 <__ulp>
 80104ee:	4650      	mov	r0, sl
 80104f0:	ec53 2b10 	vmov	r2, r3, d0
 80104f4:	4659      	mov	r1, fp
 80104f6:	f7f0 f8a7 	bl	8000648 <__aeabi_dmul>
 80104fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80104fe:	f7ef feed 	bl	80002dc <__adddf3>
 8010502:	4682      	mov	sl, r0
 8010504:	468b      	mov	fp, r1
 8010506:	e770      	b.n	80103ea <_strtod_l+0xa62>
 8010508:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801050c:	e7e0      	b.n	80104d0 <_strtod_l+0xb48>
 801050e:	a30e      	add	r3, pc, #56	@ (adr r3, 8010548 <_strtod_l+0xbc0>)
 8010510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010514:	f7f0 fb0a 	bl	8000b2c <__aeabi_dcmplt>
 8010518:	e798      	b.n	801044c <_strtod_l+0xac4>
 801051a:	2300      	movs	r3, #0
 801051c:	930e      	str	r3, [sp, #56]	@ 0x38
 801051e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010520:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010522:	6013      	str	r3, [r2, #0]
 8010524:	f7ff ba6d 	b.w	800fa02 <_strtod_l+0x7a>
 8010528:	2a65      	cmp	r2, #101	@ 0x65
 801052a:	f43f ab68 	beq.w	800fbfe <_strtod_l+0x276>
 801052e:	2a45      	cmp	r2, #69	@ 0x45
 8010530:	f43f ab65 	beq.w	800fbfe <_strtod_l+0x276>
 8010534:	2301      	movs	r3, #1
 8010536:	f7ff bba0 	b.w	800fc7a <_strtod_l+0x2f2>
 801053a:	bf00      	nop
 801053c:	f3af 8000 	nop.w
 8010540:	ffc00000 	.word	0xffc00000
 8010544:	41dfffff 	.word	0x41dfffff
 8010548:	94a03595 	.word	0x94a03595
 801054c:	3fcfffff 	.word	0x3fcfffff

08010550 <_strtod_r>:
 8010550:	4b01      	ldr	r3, [pc, #4]	@ (8010558 <_strtod_r+0x8>)
 8010552:	f7ff ba19 	b.w	800f988 <_strtod_l>
 8010556:	bf00      	nop
 8010558:	200001e0 	.word	0x200001e0

0801055c <_strtol_l.isra.0>:
 801055c:	2b24      	cmp	r3, #36	@ 0x24
 801055e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010562:	4686      	mov	lr, r0
 8010564:	4690      	mov	r8, r2
 8010566:	d801      	bhi.n	801056c <_strtol_l.isra.0+0x10>
 8010568:	2b01      	cmp	r3, #1
 801056a:	d106      	bne.n	801057a <_strtol_l.isra.0+0x1e>
 801056c:	f7fd fda8 	bl	800e0c0 <__errno>
 8010570:	2316      	movs	r3, #22
 8010572:	6003      	str	r3, [r0, #0]
 8010574:	2000      	movs	r0, #0
 8010576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801057a:	4834      	ldr	r0, [pc, #208]	@ (801064c <_strtol_l.isra.0+0xf0>)
 801057c:	460d      	mov	r5, r1
 801057e:	462a      	mov	r2, r5
 8010580:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010584:	5d06      	ldrb	r6, [r0, r4]
 8010586:	f016 0608 	ands.w	r6, r6, #8
 801058a:	d1f8      	bne.n	801057e <_strtol_l.isra.0+0x22>
 801058c:	2c2d      	cmp	r4, #45	@ 0x2d
 801058e:	d110      	bne.n	80105b2 <_strtol_l.isra.0+0x56>
 8010590:	782c      	ldrb	r4, [r5, #0]
 8010592:	2601      	movs	r6, #1
 8010594:	1c95      	adds	r5, r2, #2
 8010596:	f033 0210 	bics.w	r2, r3, #16
 801059a:	d115      	bne.n	80105c8 <_strtol_l.isra.0+0x6c>
 801059c:	2c30      	cmp	r4, #48	@ 0x30
 801059e:	d10d      	bne.n	80105bc <_strtol_l.isra.0+0x60>
 80105a0:	782a      	ldrb	r2, [r5, #0]
 80105a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80105a6:	2a58      	cmp	r2, #88	@ 0x58
 80105a8:	d108      	bne.n	80105bc <_strtol_l.isra.0+0x60>
 80105aa:	786c      	ldrb	r4, [r5, #1]
 80105ac:	3502      	adds	r5, #2
 80105ae:	2310      	movs	r3, #16
 80105b0:	e00a      	b.n	80105c8 <_strtol_l.isra.0+0x6c>
 80105b2:	2c2b      	cmp	r4, #43	@ 0x2b
 80105b4:	bf04      	itt	eq
 80105b6:	782c      	ldrbeq	r4, [r5, #0]
 80105b8:	1c95      	addeq	r5, r2, #2
 80105ba:	e7ec      	b.n	8010596 <_strtol_l.isra.0+0x3a>
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d1f6      	bne.n	80105ae <_strtol_l.isra.0+0x52>
 80105c0:	2c30      	cmp	r4, #48	@ 0x30
 80105c2:	bf14      	ite	ne
 80105c4:	230a      	movne	r3, #10
 80105c6:	2308      	moveq	r3, #8
 80105c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80105cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80105d0:	2200      	movs	r2, #0
 80105d2:	fbbc f9f3 	udiv	r9, ip, r3
 80105d6:	4610      	mov	r0, r2
 80105d8:	fb03 ca19 	mls	sl, r3, r9, ip
 80105dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80105e0:	2f09      	cmp	r7, #9
 80105e2:	d80f      	bhi.n	8010604 <_strtol_l.isra.0+0xa8>
 80105e4:	463c      	mov	r4, r7
 80105e6:	42a3      	cmp	r3, r4
 80105e8:	dd1b      	ble.n	8010622 <_strtol_l.isra.0+0xc6>
 80105ea:	1c57      	adds	r7, r2, #1
 80105ec:	d007      	beq.n	80105fe <_strtol_l.isra.0+0xa2>
 80105ee:	4581      	cmp	r9, r0
 80105f0:	d314      	bcc.n	801061c <_strtol_l.isra.0+0xc0>
 80105f2:	d101      	bne.n	80105f8 <_strtol_l.isra.0+0x9c>
 80105f4:	45a2      	cmp	sl, r4
 80105f6:	db11      	blt.n	801061c <_strtol_l.isra.0+0xc0>
 80105f8:	fb00 4003 	mla	r0, r0, r3, r4
 80105fc:	2201      	movs	r2, #1
 80105fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010602:	e7eb      	b.n	80105dc <_strtol_l.isra.0+0x80>
 8010604:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010608:	2f19      	cmp	r7, #25
 801060a:	d801      	bhi.n	8010610 <_strtol_l.isra.0+0xb4>
 801060c:	3c37      	subs	r4, #55	@ 0x37
 801060e:	e7ea      	b.n	80105e6 <_strtol_l.isra.0+0x8a>
 8010610:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010614:	2f19      	cmp	r7, #25
 8010616:	d804      	bhi.n	8010622 <_strtol_l.isra.0+0xc6>
 8010618:	3c57      	subs	r4, #87	@ 0x57
 801061a:	e7e4      	b.n	80105e6 <_strtol_l.isra.0+0x8a>
 801061c:	f04f 32ff 	mov.w	r2, #4294967295
 8010620:	e7ed      	b.n	80105fe <_strtol_l.isra.0+0xa2>
 8010622:	1c53      	adds	r3, r2, #1
 8010624:	d108      	bne.n	8010638 <_strtol_l.isra.0+0xdc>
 8010626:	2322      	movs	r3, #34	@ 0x22
 8010628:	f8ce 3000 	str.w	r3, [lr]
 801062c:	4660      	mov	r0, ip
 801062e:	f1b8 0f00 	cmp.w	r8, #0
 8010632:	d0a0      	beq.n	8010576 <_strtol_l.isra.0+0x1a>
 8010634:	1e69      	subs	r1, r5, #1
 8010636:	e006      	b.n	8010646 <_strtol_l.isra.0+0xea>
 8010638:	b106      	cbz	r6, 801063c <_strtol_l.isra.0+0xe0>
 801063a:	4240      	negs	r0, r0
 801063c:	f1b8 0f00 	cmp.w	r8, #0
 8010640:	d099      	beq.n	8010576 <_strtol_l.isra.0+0x1a>
 8010642:	2a00      	cmp	r2, #0
 8010644:	d1f6      	bne.n	8010634 <_strtol_l.isra.0+0xd8>
 8010646:	f8c8 1000 	str.w	r1, [r8]
 801064a:	e794      	b.n	8010576 <_strtol_l.isra.0+0x1a>
 801064c:	0801191d 	.word	0x0801191d

08010650 <_strtol_r>:
 8010650:	f7ff bf84 	b.w	801055c <_strtol_l.isra.0>

08010654 <__ssputs_r>:
 8010654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010658:	688e      	ldr	r6, [r1, #8]
 801065a:	461f      	mov	r7, r3
 801065c:	42be      	cmp	r6, r7
 801065e:	680b      	ldr	r3, [r1, #0]
 8010660:	4682      	mov	sl, r0
 8010662:	460c      	mov	r4, r1
 8010664:	4690      	mov	r8, r2
 8010666:	d82d      	bhi.n	80106c4 <__ssputs_r+0x70>
 8010668:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801066c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010670:	d026      	beq.n	80106c0 <__ssputs_r+0x6c>
 8010672:	6965      	ldr	r5, [r4, #20]
 8010674:	6909      	ldr	r1, [r1, #16]
 8010676:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801067a:	eba3 0901 	sub.w	r9, r3, r1
 801067e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010682:	1c7b      	adds	r3, r7, #1
 8010684:	444b      	add	r3, r9
 8010686:	106d      	asrs	r5, r5, #1
 8010688:	429d      	cmp	r5, r3
 801068a:	bf38      	it	cc
 801068c:	461d      	movcc	r5, r3
 801068e:	0553      	lsls	r3, r2, #21
 8010690:	d527      	bpl.n	80106e2 <__ssputs_r+0x8e>
 8010692:	4629      	mov	r1, r5
 8010694:	f7fe fc24 	bl	800eee0 <_malloc_r>
 8010698:	4606      	mov	r6, r0
 801069a:	b360      	cbz	r0, 80106f6 <__ssputs_r+0xa2>
 801069c:	6921      	ldr	r1, [r4, #16]
 801069e:	464a      	mov	r2, r9
 80106a0:	f7fd fd3b 	bl	800e11a <memcpy>
 80106a4:	89a3      	ldrh	r3, [r4, #12]
 80106a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80106aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80106ae:	81a3      	strh	r3, [r4, #12]
 80106b0:	6126      	str	r6, [r4, #16]
 80106b2:	6165      	str	r5, [r4, #20]
 80106b4:	444e      	add	r6, r9
 80106b6:	eba5 0509 	sub.w	r5, r5, r9
 80106ba:	6026      	str	r6, [r4, #0]
 80106bc:	60a5      	str	r5, [r4, #8]
 80106be:	463e      	mov	r6, r7
 80106c0:	42be      	cmp	r6, r7
 80106c2:	d900      	bls.n	80106c6 <__ssputs_r+0x72>
 80106c4:	463e      	mov	r6, r7
 80106c6:	6820      	ldr	r0, [r4, #0]
 80106c8:	4632      	mov	r2, r6
 80106ca:	4641      	mov	r1, r8
 80106cc:	f000 fb9c 	bl	8010e08 <memmove>
 80106d0:	68a3      	ldr	r3, [r4, #8]
 80106d2:	1b9b      	subs	r3, r3, r6
 80106d4:	60a3      	str	r3, [r4, #8]
 80106d6:	6823      	ldr	r3, [r4, #0]
 80106d8:	4433      	add	r3, r6
 80106da:	6023      	str	r3, [r4, #0]
 80106dc:	2000      	movs	r0, #0
 80106de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106e2:	462a      	mov	r2, r5
 80106e4:	f000 ff51 	bl	801158a <_realloc_r>
 80106e8:	4606      	mov	r6, r0
 80106ea:	2800      	cmp	r0, #0
 80106ec:	d1e0      	bne.n	80106b0 <__ssputs_r+0x5c>
 80106ee:	6921      	ldr	r1, [r4, #16]
 80106f0:	4650      	mov	r0, sl
 80106f2:	f7fe fb81 	bl	800edf8 <_free_r>
 80106f6:	230c      	movs	r3, #12
 80106f8:	f8ca 3000 	str.w	r3, [sl]
 80106fc:	89a3      	ldrh	r3, [r4, #12]
 80106fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010702:	81a3      	strh	r3, [r4, #12]
 8010704:	f04f 30ff 	mov.w	r0, #4294967295
 8010708:	e7e9      	b.n	80106de <__ssputs_r+0x8a>
	...

0801070c <_svfiprintf_r>:
 801070c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010710:	4698      	mov	r8, r3
 8010712:	898b      	ldrh	r3, [r1, #12]
 8010714:	061b      	lsls	r3, r3, #24
 8010716:	b09d      	sub	sp, #116	@ 0x74
 8010718:	4607      	mov	r7, r0
 801071a:	460d      	mov	r5, r1
 801071c:	4614      	mov	r4, r2
 801071e:	d510      	bpl.n	8010742 <_svfiprintf_r+0x36>
 8010720:	690b      	ldr	r3, [r1, #16]
 8010722:	b973      	cbnz	r3, 8010742 <_svfiprintf_r+0x36>
 8010724:	2140      	movs	r1, #64	@ 0x40
 8010726:	f7fe fbdb 	bl	800eee0 <_malloc_r>
 801072a:	6028      	str	r0, [r5, #0]
 801072c:	6128      	str	r0, [r5, #16]
 801072e:	b930      	cbnz	r0, 801073e <_svfiprintf_r+0x32>
 8010730:	230c      	movs	r3, #12
 8010732:	603b      	str	r3, [r7, #0]
 8010734:	f04f 30ff 	mov.w	r0, #4294967295
 8010738:	b01d      	add	sp, #116	@ 0x74
 801073a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801073e:	2340      	movs	r3, #64	@ 0x40
 8010740:	616b      	str	r3, [r5, #20]
 8010742:	2300      	movs	r3, #0
 8010744:	9309      	str	r3, [sp, #36]	@ 0x24
 8010746:	2320      	movs	r3, #32
 8010748:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801074c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010750:	2330      	movs	r3, #48	@ 0x30
 8010752:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80108f0 <_svfiprintf_r+0x1e4>
 8010756:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801075a:	f04f 0901 	mov.w	r9, #1
 801075e:	4623      	mov	r3, r4
 8010760:	469a      	mov	sl, r3
 8010762:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010766:	b10a      	cbz	r2, 801076c <_svfiprintf_r+0x60>
 8010768:	2a25      	cmp	r2, #37	@ 0x25
 801076a:	d1f9      	bne.n	8010760 <_svfiprintf_r+0x54>
 801076c:	ebba 0b04 	subs.w	fp, sl, r4
 8010770:	d00b      	beq.n	801078a <_svfiprintf_r+0x7e>
 8010772:	465b      	mov	r3, fp
 8010774:	4622      	mov	r2, r4
 8010776:	4629      	mov	r1, r5
 8010778:	4638      	mov	r0, r7
 801077a:	f7ff ff6b 	bl	8010654 <__ssputs_r>
 801077e:	3001      	adds	r0, #1
 8010780:	f000 80a7 	beq.w	80108d2 <_svfiprintf_r+0x1c6>
 8010784:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010786:	445a      	add	r2, fp
 8010788:	9209      	str	r2, [sp, #36]	@ 0x24
 801078a:	f89a 3000 	ldrb.w	r3, [sl]
 801078e:	2b00      	cmp	r3, #0
 8010790:	f000 809f 	beq.w	80108d2 <_svfiprintf_r+0x1c6>
 8010794:	2300      	movs	r3, #0
 8010796:	f04f 32ff 	mov.w	r2, #4294967295
 801079a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801079e:	f10a 0a01 	add.w	sl, sl, #1
 80107a2:	9304      	str	r3, [sp, #16]
 80107a4:	9307      	str	r3, [sp, #28]
 80107a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80107aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80107ac:	4654      	mov	r4, sl
 80107ae:	2205      	movs	r2, #5
 80107b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107b4:	484e      	ldr	r0, [pc, #312]	@ (80108f0 <_svfiprintf_r+0x1e4>)
 80107b6:	f7ef fd33 	bl	8000220 <memchr>
 80107ba:	9a04      	ldr	r2, [sp, #16]
 80107bc:	b9d8      	cbnz	r0, 80107f6 <_svfiprintf_r+0xea>
 80107be:	06d0      	lsls	r0, r2, #27
 80107c0:	bf44      	itt	mi
 80107c2:	2320      	movmi	r3, #32
 80107c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80107c8:	0711      	lsls	r1, r2, #28
 80107ca:	bf44      	itt	mi
 80107cc:	232b      	movmi	r3, #43	@ 0x2b
 80107ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80107d2:	f89a 3000 	ldrb.w	r3, [sl]
 80107d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80107d8:	d015      	beq.n	8010806 <_svfiprintf_r+0xfa>
 80107da:	9a07      	ldr	r2, [sp, #28]
 80107dc:	4654      	mov	r4, sl
 80107de:	2000      	movs	r0, #0
 80107e0:	f04f 0c0a 	mov.w	ip, #10
 80107e4:	4621      	mov	r1, r4
 80107e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107ea:	3b30      	subs	r3, #48	@ 0x30
 80107ec:	2b09      	cmp	r3, #9
 80107ee:	d94b      	bls.n	8010888 <_svfiprintf_r+0x17c>
 80107f0:	b1b0      	cbz	r0, 8010820 <_svfiprintf_r+0x114>
 80107f2:	9207      	str	r2, [sp, #28]
 80107f4:	e014      	b.n	8010820 <_svfiprintf_r+0x114>
 80107f6:	eba0 0308 	sub.w	r3, r0, r8
 80107fa:	fa09 f303 	lsl.w	r3, r9, r3
 80107fe:	4313      	orrs	r3, r2
 8010800:	9304      	str	r3, [sp, #16]
 8010802:	46a2      	mov	sl, r4
 8010804:	e7d2      	b.n	80107ac <_svfiprintf_r+0xa0>
 8010806:	9b03      	ldr	r3, [sp, #12]
 8010808:	1d19      	adds	r1, r3, #4
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	9103      	str	r1, [sp, #12]
 801080e:	2b00      	cmp	r3, #0
 8010810:	bfbb      	ittet	lt
 8010812:	425b      	neglt	r3, r3
 8010814:	f042 0202 	orrlt.w	r2, r2, #2
 8010818:	9307      	strge	r3, [sp, #28]
 801081a:	9307      	strlt	r3, [sp, #28]
 801081c:	bfb8      	it	lt
 801081e:	9204      	strlt	r2, [sp, #16]
 8010820:	7823      	ldrb	r3, [r4, #0]
 8010822:	2b2e      	cmp	r3, #46	@ 0x2e
 8010824:	d10a      	bne.n	801083c <_svfiprintf_r+0x130>
 8010826:	7863      	ldrb	r3, [r4, #1]
 8010828:	2b2a      	cmp	r3, #42	@ 0x2a
 801082a:	d132      	bne.n	8010892 <_svfiprintf_r+0x186>
 801082c:	9b03      	ldr	r3, [sp, #12]
 801082e:	1d1a      	adds	r2, r3, #4
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	9203      	str	r2, [sp, #12]
 8010834:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010838:	3402      	adds	r4, #2
 801083a:	9305      	str	r3, [sp, #20]
 801083c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010900 <_svfiprintf_r+0x1f4>
 8010840:	7821      	ldrb	r1, [r4, #0]
 8010842:	2203      	movs	r2, #3
 8010844:	4650      	mov	r0, sl
 8010846:	f7ef fceb 	bl	8000220 <memchr>
 801084a:	b138      	cbz	r0, 801085c <_svfiprintf_r+0x150>
 801084c:	9b04      	ldr	r3, [sp, #16]
 801084e:	eba0 000a 	sub.w	r0, r0, sl
 8010852:	2240      	movs	r2, #64	@ 0x40
 8010854:	4082      	lsls	r2, r0
 8010856:	4313      	orrs	r3, r2
 8010858:	3401      	adds	r4, #1
 801085a:	9304      	str	r3, [sp, #16]
 801085c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010860:	4824      	ldr	r0, [pc, #144]	@ (80108f4 <_svfiprintf_r+0x1e8>)
 8010862:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010866:	2206      	movs	r2, #6
 8010868:	f7ef fcda 	bl	8000220 <memchr>
 801086c:	2800      	cmp	r0, #0
 801086e:	d036      	beq.n	80108de <_svfiprintf_r+0x1d2>
 8010870:	4b21      	ldr	r3, [pc, #132]	@ (80108f8 <_svfiprintf_r+0x1ec>)
 8010872:	bb1b      	cbnz	r3, 80108bc <_svfiprintf_r+0x1b0>
 8010874:	9b03      	ldr	r3, [sp, #12]
 8010876:	3307      	adds	r3, #7
 8010878:	f023 0307 	bic.w	r3, r3, #7
 801087c:	3308      	adds	r3, #8
 801087e:	9303      	str	r3, [sp, #12]
 8010880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010882:	4433      	add	r3, r6
 8010884:	9309      	str	r3, [sp, #36]	@ 0x24
 8010886:	e76a      	b.n	801075e <_svfiprintf_r+0x52>
 8010888:	fb0c 3202 	mla	r2, ip, r2, r3
 801088c:	460c      	mov	r4, r1
 801088e:	2001      	movs	r0, #1
 8010890:	e7a8      	b.n	80107e4 <_svfiprintf_r+0xd8>
 8010892:	2300      	movs	r3, #0
 8010894:	3401      	adds	r4, #1
 8010896:	9305      	str	r3, [sp, #20]
 8010898:	4619      	mov	r1, r3
 801089a:	f04f 0c0a 	mov.w	ip, #10
 801089e:	4620      	mov	r0, r4
 80108a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80108a4:	3a30      	subs	r2, #48	@ 0x30
 80108a6:	2a09      	cmp	r2, #9
 80108a8:	d903      	bls.n	80108b2 <_svfiprintf_r+0x1a6>
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d0c6      	beq.n	801083c <_svfiprintf_r+0x130>
 80108ae:	9105      	str	r1, [sp, #20]
 80108b0:	e7c4      	b.n	801083c <_svfiprintf_r+0x130>
 80108b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80108b6:	4604      	mov	r4, r0
 80108b8:	2301      	movs	r3, #1
 80108ba:	e7f0      	b.n	801089e <_svfiprintf_r+0x192>
 80108bc:	ab03      	add	r3, sp, #12
 80108be:	9300      	str	r3, [sp, #0]
 80108c0:	462a      	mov	r2, r5
 80108c2:	4b0e      	ldr	r3, [pc, #56]	@ (80108fc <_svfiprintf_r+0x1f0>)
 80108c4:	a904      	add	r1, sp, #16
 80108c6:	4638      	mov	r0, r7
 80108c8:	f7fc fcaa 	bl	800d220 <_printf_float>
 80108cc:	1c42      	adds	r2, r0, #1
 80108ce:	4606      	mov	r6, r0
 80108d0:	d1d6      	bne.n	8010880 <_svfiprintf_r+0x174>
 80108d2:	89ab      	ldrh	r3, [r5, #12]
 80108d4:	065b      	lsls	r3, r3, #25
 80108d6:	f53f af2d 	bmi.w	8010734 <_svfiprintf_r+0x28>
 80108da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80108dc:	e72c      	b.n	8010738 <_svfiprintf_r+0x2c>
 80108de:	ab03      	add	r3, sp, #12
 80108e0:	9300      	str	r3, [sp, #0]
 80108e2:	462a      	mov	r2, r5
 80108e4:	4b05      	ldr	r3, [pc, #20]	@ (80108fc <_svfiprintf_r+0x1f0>)
 80108e6:	a904      	add	r1, sp, #16
 80108e8:	4638      	mov	r0, r7
 80108ea:	f7fc ff31 	bl	800d750 <_printf_i>
 80108ee:	e7ed      	b.n	80108cc <_svfiprintf_r+0x1c0>
 80108f0:	08011b3e 	.word	0x08011b3e
 80108f4:	08011b48 	.word	0x08011b48
 80108f8:	0800d221 	.word	0x0800d221
 80108fc:	08010655 	.word	0x08010655
 8010900:	08011b44 	.word	0x08011b44

08010904 <__sfputc_r>:
 8010904:	6893      	ldr	r3, [r2, #8]
 8010906:	3b01      	subs	r3, #1
 8010908:	2b00      	cmp	r3, #0
 801090a:	b410      	push	{r4}
 801090c:	6093      	str	r3, [r2, #8]
 801090e:	da08      	bge.n	8010922 <__sfputc_r+0x1e>
 8010910:	6994      	ldr	r4, [r2, #24]
 8010912:	42a3      	cmp	r3, r4
 8010914:	db01      	blt.n	801091a <__sfputc_r+0x16>
 8010916:	290a      	cmp	r1, #10
 8010918:	d103      	bne.n	8010922 <__sfputc_r+0x1e>
 801091a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801091e:	f000 b9df 	b.w	8010ce0 <__swbuf_r>
 8010922:	6813      	ldr	r3, [r2, #0]
 8010924:	1c58      	adds	r0, r3, #1
 8010926:	6010      	str	r0, [r2, #0]
 8010928:	7019      	strb	r1, [r3, #0]
 801092a:	4608      	mov	r0, r1
 801092c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010930:	4770      	bx	lr

08010932 <__sfputs_r>:
 8010932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010934:	4606      	mov	r6, r0
 8010936:	460f      	mov	r7, r1
 8010938:	4614      	mov	r4, r2
 801093a:	18d5      	adds	r5, r2, r3
 801093c:	42ac      	cmp	r4, r5
 801093e:	d101      	bne.n	8010944 <__sfputs_r+0x12>
 8010940:	2000      	movs	r0, #0
 8010942:	e007      	b.n	8010954 <__sfputs_r+0x22>
 8010944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010948:	463a      	mov	r2, r7
 801094a:	4630      	mov	r0, r6
 801094c:	f7ff ffda 	bl	8010904 <__sfputc_r>
 8010950:	1c43      	adds	r3, r0, #1
 8010952:	d1f3      	bne.n	801093c <__sfputs_r+0xa>
 8010954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010958 <_vfiprintf_r>:
 8010958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801095c:	460d      	mov	r5, r1
 801095e:	b09d      	sub	sp, #116	@ 0x74
 8010960:	4614      	mov	r4, r2
 8010962:	4698      	mov	r8, r3
 8010964:	4606      	mov	r6, r0
 8010966:	b118      	cbz	r0, 8010970 <_vfiprintf_r+0x18>
 8010968:	6a03      	ldr	r3, [r0, #32]
 801096a:	b90b      	cbnz	r3, 8010970 <_vfiprintf_r+0x18>
 801096c:	f7fd faa8 	bl	800dec0 <__sinit>
 8010970:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010972:	07d9      	lsls	r1, r3, #31
 8010974:	d405      	bmi.n	8010982 <_vfiprintf_r+0x2a>
 8010976:	89ab      	ldrh	r3, [r5, #12]
 8010978:	059a      	lsls	r2, r3, #22
 801097a:	d402      	bmi.n	8010982 <_vfiprintf_r+0x2a>
 801097c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801097e:	f7fd fbca 	bl	800e116 <__retarget_lock_acquire_recursive>
 8010982:	89ab      	ldrh	r3, [r5, #12]
 8010984:	071b      	lsls	r3, r3, #28
 8010986:	d501      	bpl.n	801098c <_vfiprintf_r+0x34>
 8010988:	692b      	ldr	r3, [r5, #16]
 801098a:	b99b      	cbnz	r3, 80109b4 <_vfiprintf_r+0x5c>
 801098c:	4629      	mov	r1, r5
 801098e:	4630      	mov	r0, r6
 8010990:	f000 f9e4 	bl	8010d5c <__swsetup_r>
 8010994:	b170      	cbz	r0, 80109b4 <_vfiprintf_r+0x5c>
 8010996:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010998:	07dc      	lsls	r4, r3, #31
 801099a:	d504      	bpl.n	80109a6 <_vfiprintf_r+0x4e>
 801099c:	f04f 30ff 	mov.w	r0, #4294967295
 80109a0:	b01d      	add	sp, #116	@ 0x74
 80109a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109a6:	89ab      	ldrh	r3, [r5, #12]
 80109a8:	0598      	lsls	r0, r3, #22
 80109aa:	d4f7      	bmi.n	801099c <_vfiprintf_r+0x44>
 80109ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80109ae:	f7fd fbb3 	bl	800e118 <__retarget_lock_release_recursive>
 80109b2:	e7f3      	b.n	801099c <_vfiprintf_r+0x44>
 80109b4:	2300      	movs	r3, #0
 80109b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80109b8:	2320      	movs	r3, #32
 80109ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80109be:	f8cd 800c 	str.w	r8, [sp, #12]
 80109c2:	2330      	movs	r3, #48	@ 0x30
 80109c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010b74 <_vfiprintf_r+0x21c>
 80109c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80109cc:	f04f 0901 	mov.w	r9, #1
 80109d0:	4623      	mov	r3, r4
 80109d2:	469a      	mov	sl, r3
 80109d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109d8:	b10a      	cbz	r2, 80109de <_vfiprintf_r+0x86>
 80109da:	2a25      	cmp	r2, #37	@ 0x25
 80109dc:	d1f9      	bne.n	80109d2 <_vfiprintf_r+0x7a>
 80109de:	ebba 0b04 	subs.w	fp, sl, r4
 80109e2:	d00b      	beq.n	80109fc <_vfiprintf_r+0xa4>
 80109e4:	465b      	mov	r3, fp
 80109e6:	4622      	mov	r2, r4
 80109e8:	4629      	mov	r1, r5
 80109ea:	4630      	mov	r0, r6
 80109ec:	f7ff ffa1 	bl	8010932 <__sfputs_r>
 80109f0:	3001      	adds	r0, #1
 80109f2:	f000 80a7 	beq.w	8010b44 <_vfiprintf_r+0x1ec>
 80109f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80109f8:	445a      	add	r2, fp
 80109fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80109fc:	f89a 3000 	ldrb.w	r3, [sl]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	f000 809f 	beq.w	8010b44 <_vfiprintf_r+0x1ec>
 8010a06:	2300      	movs	r3, #0
 8010a08:	f04f 32ff 	mov.w	r2, #4294967295
 8010a0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a10:	f10a 0a01 	add.w	sl, sl, #1
 8010a14:	9304      	str	r3, [sp, #16]
 8010a16:	9307      	str	r3, [sp, #28]
 8010a18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010a1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8010a1e:	4654      	mov	r4, sl
 8010a20:	2205      	movs	r2, #5
 8010a22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a26:	4853      	ldr	r0, [pc, #332]	@ (8010b74 <_vfiprintf_r+0x21c>)
 8010a28:	f7ef fbfa 	bl	8000220 <memchr>
 8010a2c:	9a04      	ldr	r2, [sp, #16]
 8010a2e:	b9d8      	cbnz	r0, 8010a68 <_vfiprintf_r+0x110>
 8010a30:	06d1      	lsls	r1, r2, #27
 8010a32:	bf44      	itt	mi
 8010a34:	2320      	movmi	r3, #32
 8010a36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a3a:	0713      	lsls	r3, r2, #28
 8010a3c:	bf44      	itt	mi
 8010a3e:	232b      	movmi	r3, #43	@ 0x2b
 8010a40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a44:	f89a 3000 	ldrb.w	r3, [sl]
 8010a48:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a4a:	d015      	beq.n	8010a78 <_vfiprintf_r+0x120>
 8010a4c:	9a07      	ldr	r2, [sp, #28]
 8010a4e:	4654      	mov	r4, sl
 8010a50:	2000      	movs	r0, #0
 8010a52:	f04f 0c0a 	mov.w	ip, #10
 8010a56:	4621      	mov	r1, r4
 8010a58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a5c:	3b30      	subs	r3, #48	@ 0x30
 8010a5e:	2b09      	cmp	r3, #9
 8010a60:	d94b      	bls.n	8010afa <_vfiprintf_r+0x1a2>
 8010a62:	b1b0      	cbz	r0, 8010a92 <_vfiprintf_r+0x13a>
 8010a64:	9207      	str	r2, [sp, #28]
 8010a66:	e014      	b.n	8010a92 <_vfiprintf_r+0x13a>
 8010a68:	eba0 0308 	sub.w	r3, r0, r8
 8010a6c:	fa09 f303 	lsl.w	r3, r9, r3
 8010a70:	4313      	orrs	r3, r2
 8010a72:	9304      	str	r3, [sp, #16]
 8010a74:	46a2      	mov	sl, r4
 8010a76:	e7d2      	b.n	8010a1e <_vfiprintf_r+0xc6>
 8010a78:	9b03      	ldr	r3, [sp, #12]
 8010a7a:	1d19      	adds	r1, r3, #4
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	9103      	str	r1, [sp, #12]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	bfbb      	ittet	lt
 8010a84:	425b      	neglt	r3, r3
 8010a86:	f042 0202 	orrlt.w	r2, r2, #2
 8010a8a:	9307      	strge	r3, [sp, #28]
 8010a8c:	9307      	strlt	r3, [sp, #28]
 8010a8e:	bfb8      	it	lt
 8010a90:	9204      	strlt	r2, [sp, #16]
 8010a92:	7823      	ldrb	r3, [r4, #0]
 8010a94:	2b2e      	cmp	r3, #46	@ 0x2e
 8010a96:	d10a      	bne.n	8010aae <_vfiprintf_r+0x156>
 8010a98:	7863      	ldrb	r3, [r4, #1]
 8010a9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a9c:	d132      	bne.n	8010b04 <_vfiprintf_r+0x1ac>
 8010a9e:	9b03      	ldr	r3, [sp, #12]
 8010aa0:	1d1a      	adds	r2, r3, #4
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	9203      	str	r2, [sp, #12]
 8010aa6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010aaa:	3402      	adds	r4, #2
 8010aac:	9305      	str	r3, [sp, #20]
 8010aae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010b84 <_vfiprintf_r+0x22c>
 8010ab2:	7821      	ldrb	r1, [r4, #0]
 8010ab4:	2203      	movs	r2, #3
 8010ab6:	4650      	mov	r0, sl
 8010ab8:	f7ef fbb2 	bl	8000220 <memchr>
 8010abc:	b138      	cbz	r0, 8010ace <_vfiprintf_r+0x176>
 8010abe:	9b04      	ldr	r3, [sp, #16]
 8010ac0:	eba0 000a 	sub.w	r0, r0, sl
 8010ac4:	2240      	movs	r2, #64	@ 0x40
 8010ac6:	4082      	lsls	r2, r0
 8010ac8:	4313      	orrs	r3, r2
 8010aca:	3401      	adds	r4, #1
 8010acc:	9304      	str	r3, [sp, #16]
 8010ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ad2:	4829      	ldr	r0, [pc, #164]	@ (8010b78 <_vfiprintf_r+0x220>)
 8010ad4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010ad8:	2206      	movs	r2, #6
 8010ada:	f7ef fba1 	bl	8000220 <memchr>
 8010ade:	2800      	cmp	r0, #0
 8010ae0:	d03f      	beq.n	8010b62 <_vfiprintf_r+0x20a>
 8010ae2:	4b26      	ldr	r3, [pc, #152]	@ (8010b7c <_vfiprintf_r+0x224>)
 8010ae4:	bb1b      	cbnz	r3, 8010b2e <_vfiprintf_r+0x1d6>
 8010ae6:	9b03      	ldr	r3, [sp, #12]
 8010ae8:	3307      	adds	r3, #7
 8010aea:	f023 0307 	bic.w	r3, r3, #7
 8010aee:	3308      	adds	r3, #8
 8010af0:	9303      	str	r3, [sp, #12]
 8010af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010af4:	443b      	add	r3, r7
 8010af6:	9309      	str	r3, [sp, #36]	@ 0x24
 8010af8:	e76a      	b.n	80109d0 <_vfiprintf_r+0x78>
 8010afa:	fb0c 3202 	mla	r2, ip, r2, r3
 8010afe:	460c      	mov	r4, r1
 8010b00:	2001      	movs	r0, #1
 8010b02:	e7a8      	b.n	8010a56 <_vfiprintf_r+0xfe>
 8010b04:	2300      	movs	r3, #0
 8010b06:	3401      	adds	r4, #1
 8010b08:	9305      	str	r3, [sp, #20]
 8010b0a:	4619      	mov	r1, r3
 8010b0c:	f04f 0c0a 	mov.w	ip, #10
 8010b10:	4620      	mov	r0, r4
 8010b12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b16:	3a30      	subs	r2, #48	@ 0x30
 8010b18:	2a09      	cmp	r2, #9
 8010b1a:	d903      	bls.n	8010b24 <_vfiprintf_r+0x1cc>
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d0c6      	beq.n	8010aae <_vfiprintf_r+0x156>
 8010b20:	9105      	str	r1, [sp, #20]
 8010b22:	e7c4      	b.n	8010aae <_vfiprintf_r+0x156>
 8010b24:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b28:	4604      	mov	r4, r0
 8010b2a:	2301      	movs	r3, #1
 8010b2c:	e7f0      	b.n	8010b10 <_vfiprintf_r+0x1b8>
 8010b2e:	ab03      	add	r3, sp, #12
 8010b30:	9300      	str	r3, [sp, #0]
 8010b32:	462a      	mov	r2, r5
 8010b34:	4b12      	ldr	r3, [pc, #72]	@ (8010b80 <_vfiprintf_r+0x228>)
 8010b36:	a904      	add	r1, sp, #16
 8010b38:	4630      	mov	r0, r6
 8010b3a:	f7fc fb71 	bl	800d220 <_printf_float>
 8010b3e:	4607      	mov	r7, r0
 8010b40:	1c78      	adds	r0, r7, #1
 8010b42:	d1d6      	bne.n	8010af2 <_vfiprintf_r+0x19a>
 8010b44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010b46:	07d9      	lsls	r1, r3, #31
 8010b48:	d405      	bmi.n	8010b56 <_vfiprintf_r+0x1fe>
 8010b4a:	89ab      	ldrh	r3, [r5, #12]
 8010b4c:	059a      	lsls	r2, r3, #22
 8010b4e:	d402      	bmi.n	8010b56 <_vfiprintf_r+0x1fe>
 8010b50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010b52:	f7fd fae1 	bl	800e118 <__retarget_lock_release_recursive>
 8010b56:	89ab      	ldrh	r3, [r5, #12]
 8010b58:	065b      	lsls	r3, r3, #25
 8010b5a:	f53f af1f 	bmi.w	801099c <_vfiprintf_r+0x44>
 8010b5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010b60:	e71e      	b.n	80109a0 <_vfiprintf_r+0x48>
 8010b62:	ab03      	add	r3, sp, #12
 8010b64:	9300      	str	r3, [sp, #0]
 8010b66:	462a      	mov	r2, r5
 8010b68:	4b05      	ldr	r3, [pc, #20]	@ (8010b80 <_vfiprintf_r+0x228>)
 8010b6a:	a904      	add	r1, sp, #16
 8010b6c:	4630      	mov	r0, r6
 8010b6e:	f7fc fdef 	bl	800d750 <_printf_i>
 8010b72:	e7e4      	b.n	8010b3e <_vfiprintf_r+0x1e6>
 8010b74:	08011b3e 	.word	0x08011b3e
 8010b78:	08011b48 	.word	0x08011b48
 8010b7c:	0800d221 	.word	0x0800d221
 8010b80:	08010933 	.word	0x08010933
 8010b84:	08011b44 	.word	0x08011b44

08010b88 <__sflush_r>:
 8010b88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b90:	0716      	lsls	r6, r2, #28
 8010b92:	4605      	mov	r5, r0
 8010b94:	460c      	mov	r4, r1
 8010b96:	d454      	bmi.n	8010c42 <__sflush_r+0xba>
 8010b98:	684b      	ldr	r3, [r1, #4]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	dc02      	bgt.n	8010ba4 <__sflush_r+0x1c>
 8010b9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	dd48      	ble.n	8010c36 <__sflush_r+0xae>
 8010ba4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010ba6:	2e00      	cmp	r6, #0
 8010ba8:	d045      	beq.n	8010c36 <__sflush_r+0xae>
 8010baa:	2300      	movs	r3, #0
 8010bac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010bb0:	682f      	ldr	r7, [r5, #0]
 8010bb2:	6a21      	ldr	r1, [r4, #32]
 8010bb4:	602b      	str	r3, [r5, #0]
 8010bb6:	d030      	beq.n	8010c1a <__sflush_r+0x92>
 8010bb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010bba:	89a3      	ldrh	r3, [r4, #12]
 8010bbc:	0759      	lsls	r1, r3, #29
 8010bbe:	d505      	bpl.n	8010bcc <__sflush_r+0x44>
 8010bc0:	6863      	ldr	r3, [r4, #4]
 8010bc2:	1ad2      	subs	r2, r2, r3
 8010bc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010bc6:	b10b      	cbz	r3, 8010bcc <__sflush_r+0x44>
 8010bc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010bca:	1ad2      	subs	r2, r2, r3
 8010bcc:	2300      	movs	r3, #0
 8010bce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010bd0:	6a21      	ldr	r1, [r4, #32]
 8010bd2:	4628      	mov	r0, r5
 8010bd4:	47b0      	blx	r6
 8010bd6:	1c43      	adds	r3, r0, #1
 8010bd8:	89a3      	ldrh	r3, [r4, #12]
 8010bda:	d106      	bne.n	8010bea <__sflush_r+0x62>
 8010bdc:	6829      	ldr	r1, [r5, #0]
 8010bde:	291d      	cmp	r1, #29
 8010be0:	d82b      	bhi.n	8010c3a <__sflush_r+0xb2>
 8010be2:	4a2a      	ldr	r2, [pc, #168]	@ (8010c8c <__sflush_r+0x104>)
 8010be4:	40ca      	lsrs	r2, r1
 8010be6:	07d6      	lsls	r6, r2, #31
 8010be8:	d527      	bpl.n	8010c3a <__sflush_r+0xb2>
 8010bea:	2200      	movs	r2, #0
 8010bec:	6062      	str	r2, [r4, #4]
 8010bee:	04d9      	lsls	r1, r3, #19
 8010bf0:	6922      	ldr	r2, [r4, #16]
 8010bf2:	6022      	str	r2, [r4, #0]
 8010bf4:	d504      	bpl.n	8010c00 <__sflush_r+0x78>
 8010bf6:	1c42      	adds	r2, r0, #1
 8010bf8:	d101      	bne.n	8010bfe <__sflush_r+0x76>
 8010bfa:	682b      	ldr	r3, [r5, #0]
 8010bfc:	b903      	cbnz	r3, 8010c00 <__sflush_r+0x78>
 8010bfe:	6560      	str	r0, [r4, #84]	@ 0x54
 8010c00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010c02:	602f      	str	r7, [r5, #0]
 8010c04:	b1b9      	cbz	r1, 8010c36 <__sflush_r+0xae>
 8010c06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010c0a:	4299      	cmp	r1, r3
 8010c0c:	d002      	beq.n	8010c14 <__sflush_r+0x8c>
 8010c0e:	4628      	mov	r0, r5
 8010c10:	f7fe f8f2 	bl	800edf8 <_free_r>
 8010c14:	2300      	movs	r3, #0
 8010c16:	6363      	str	r3, [r4, #52]	@ 0x34
 8010c18:	e00d      	b.n	8010c36 <__sflush_r+0xae>
 8010c1a:	2301      	movs	r3, #1
 8010c1c:	4628      	mov	r0, r5
 8010c1e:	47b0      	blx	r6
 8010c20:	4602      	mov	r2, r0
 8010c22:	1c50      	adds	r0, r2, #1
 8010c24:	d1c9      	bne.n	8010bba <__sflush_r+0x32>
 8010c26:	682b      	ldr	r3, [r5, #0]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d0c6      	beq.n	8010bba <__sflush_r+0x32>
 8010c2c:	2b1d      	cmp	r3, #29
 8010c2e:	d001      	beq.n	8010c34 <__sflush_r+0xac>
 8010c30:	2b16      	cmp	r3, #22
 8010c32:	d11e      	bne.n	8010c72 <__sflush_r+0xea>
 8010c34:	602f      	str	r7, [r5, #0]
 8010c36:	2000      	movs	r0, #0
 8010c38:	e022      	b.n	8010c80 <__sflush_r+0xf8>
 8010c3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c3e:	b21b      	sxth	r3, r3
 8010c40:	e01b      	b.n	8010c7a <__sflush_r+0xf2>
 8010c42:	690f      	ldr	r7, [r1, #16]
 8010c44:	2f00      	cmp	r7, #0
 8010c46:	d0f6      	beq.n	8010c36 <__sflush_r+0xae>
 8010c48:	0793      	lsls	r3, r2, #30
 8010c4a:	680e      	ldr	r6, [r1, #0]
 8010c4c:	bf08      	it	eq
 8010c4e:	694b      	ldreq	r3, [r1, #20]
 8010c50:	600f      	str	r7, [r1, #0]
 8010c52:	bf18      	it	ne
 8010c54:	2300      	movne	r3, #0
 8010c56:	eba6 0807 	sub.w	r8, r6, r7
 8010c5a:	608b      	str	r3, [r1, #8]
 8010c5c:	f1b8 0f00 	cmp.w	r8, #0
 8010c60:	dde9      	ble.n	8010c36 <__sflush_r+0xae>
 8010c62:	6a21      	ldr	r1, [r4, #32]
 8010c64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010c66:	4643      	mov	r3, r8
 8010c68:	463a      	mov	r2, r7
 8010c6a:	4628      	mov	r0, r5
 8010c6c:	47b0      	blx	r6
 8010c6e:	2800      	cmp	r0, #0
 8010c70:	dc08      	bgt.n	8010c84 <__sflush_r+0xfc>
 8010c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c7a:	81a3      	strh	r3, [r4, #12]
 8010c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c84:	4407      	add	r7, r0
 8010c86:	eba8 0800 	sub.w	r8, r8, r0
 8010c8a:	e7e7      	b.n	8010c5c <__sflush_r+0xd4>
 8010c8c:	20400001 	.word	0x20400001

08010c90 <_fflush_r>:
 8010c90:	b538      	push	{r3, r4, r5, lr}
 8010c92:	690b      	ldr	r3, [r1, #16]
 8010c94:	4605      	mov	r5, r0
 8010c96:	460c      	mov	r4, r1
 8010c98:	b913      	cbnz	r3, 8010ca0 <_fflush_r+0x10>
 8010c9a:	2500      	movs	r5, #0
 8010c9c:	4628      	mov	r0, r5
 8010c9e:	bd38      	pop	{r3, r4, r5, pc}
 8010ca0:	b118      	cbz	r0, 8010caa <_fflush_r+0x1a>
 8010ca2:	6a03      	ldr	r3, [r0, #32]
 8010ca4:	b90b      	cbnz	r3, 8010caa <_fflush_r+0x1a>
 8010ca6:	f7fd f90b 	bl	800dec0 <__sinit>
 8010caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d0f3      	beq.n	8010c9a <_fflush_r+0xa>
 8010cb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010cb4:	07d0      	lsls	r0, r2, #31
 8010cb6:	d404      	bmi.n	8010cc2 <_fflush_r+0x32>
 8010cb8:	0599      	lsls	r1, r3, #22
 8010cba:	d402      	bmi.n	8010cc2 <_fflush_r+0x32>
 8010cbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010cbe:	f7fd fa2a 	bl	800e116 <__retarget_lock_acquire_recursive>
 8010cc2:	4628      	mov	r0, r5
 8010cc4:	4621      	mov	r1, r4
 8010cc6:	f7ff ff5f 	bl	8010b88 <__sflush_r>
 8010cca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010ccc:	07da      	lsls	r2, r3, #31
 8010cce:	4605      	mov	r5, r0
 8010cd0:	d4e4      	bmi.n	8010c9c <_fflush_r+0xc>
 8010cd2:	89a3      	ldrh	r3, [r4, #12]
 8010cd4:	059b      	lsls	r3, r3, #22
 8010cd6:	d4e1      	bmi.n	8010c9c <_fflush_r+0xc>
 8010cd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010cda:	f7fd fa1d 	bl	800e118 <__retarget_lock_release_recursive>
 8010cde:	e7dd      	b.n	8010c9c <_fflush_r+0xc>

08010ce0 <__swbuf_r>:
 8010ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ce2:	460e      	mov	r6, r1
 8010ce4:	4614      	mov	r4, r2
 8010ce6:	4605      	mov	r5, r0
 8010ce8:	b118      	cbz	r0, 8010cf2 <__swbuf_r+0x12>
 8010cea:	6a03      	ldr	r3, [r0, #32]
 8010cec:	b90b      	cbnz	r3, 8010cf2 <__swbuf_r+0x12>
 8010cee:	f7fd f8e7 	bl	800dec0 <__sinit>
 8010cf2:	69a3      	ldr	r3, [r4, #24]
 8010cf4:	60a3      	str	r3, [r4, #8]
 8010cf6:	89a3      	ldrh	r3, [r4, #12]
 8010cf8:	071a      	lsls	r2, r3, #28
 8010cfa:	d501      	bpl.n	8010d00 <__swbuf_r+0x20>
 8010cfc:	6923      	ldr	r3, [r4, #16]
 8010cfe:	b943      	cbnz	r3, 8010d12 <__swbuf_r+0x32>
 8010d00:	4621      	mov	r1, r4
 8010d02:	4628      	mov	r0, r5
 8010d04:	f000 f82a 	bl	8010d5c <__swsetup_r>
 8010d08:	b118      	cbz	r0, 8010d12 <__swbuf_r+0x32>
 8010d0a:	f04f 37ff 	mov.w	r7, #4294967295
 8010d0e:	4638      	mov	r0, r7
 8010d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d12:	6823      	ldr	r3, [r4, #0]
 8010d14:	6922      	ldr	r2, [r4, #16]
 8010d16:	1a98      	subs	r0, r3, r2
 8010d18:	6963      	ldr	r3, [r4, #20]
 8010d1a:	b2f6      	uxtb	r6, r6
 8010d1c:	4283      	cmp	r3, r0
 8010d1e:	4637      	mov	r7, r6
 8010d20:	dc05      	bgt.n	8010d2e <__swbuf_r+0x4e>
 8010d22:	4621      	mov	r1, r4
 8010d24:	4628      	mov	r0, r5
 8010d26:	f7ff ffb3 	bl	8010c90 <_fflush_r>
 8010d2a:	2800      	cmp	r0, #0
 8010d2c:	d1ed      	bne.n	8010d0a <__swbuf_r+0x2a>
 8010d2e:	68a3      	ldr	r3, [r4, #8]
 8010d30:	3b01      	subs	r3, #1
 8010d32:	60a3      	str	r3, [r4, #8]
 8010d34:	6823      	ldr	r3, [r4, #0]
 8010d36:	1c5a      	adds	r2, r3, #1
 8010d38:	6022      	str	r2, [r4, #0]
 8010d3a:	701e      	strb	r6, [r3, #0]
 8010d3c:	6962      	ldr	r2, [r4, #20]
 8010d3e:	1c43      	adds	r3, r0, #1
 8010d40:	429a      	cmp	r2, r3
 8010d42:	d004      	beq.n	8010d4e <__swbuf_r+0x6e>
 8010d44:	89a3      	ldrh	r3, [r4, #12]
 8010d46:	07db      	lsls	r3, r3, #31
 8010d48:	d5e1      	bpl.n	8010d0e <__swbuf_r+0x2e>
 8010d4a:	2e0a      	cmp	r6, #10
 8010d4c:	d1df      	bne.n	8010d0e <__swbuf_r+0x2e>
 8010d4e:	4621      	mov	r1, r4
 8010d50:	4628      	mov	r0, r5
 8010d52:	f7ff ff9d 	bl	8010c90 <_fflush_r>
 8010d56:	2800      	cmp	r0, #0
 8010d58:	d0d9      	beq.n	8010d0e <__swbuf_r+0x2e>
 8010d5a:	e7d6      	b.n	8010d0a <__swbuf_r+0x2a>

08010d5c <__swsetup_r>:
 8010d5c:	b538      	push	{r3, r4, r5, lr}
 8010d5e:	4b29      	ldr	r3, [pc, #164]	@ (8010e04 <__swsetup_r+0xa8>)
 8010d60:	4605      	mov	r5, r0
 8010d62:	6818      	ldr	r0, [r3, #0]
 8010d64:	460c      	mov	r4, r1
 8010d66:	b118      	cbz	r0, 8010d70 <__swsetup_r+0x14>
 8010d68:	6a03      	ldr	r3, [r0, #32]
 8010d6a:	b90b      	cbnz	r3, 8010d70 <__swsetup_r+0x14>
 8010d6c:	f7fd f8a8 	bl	800dec0 <__sinit>
 8010d70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d74:	0719      	lsls	r1, r3, #28
 8010d76:	d422      	bmi.n	8010dbe <__swsetup_r+0x62>
 8010d78:	06da      	lsls	r2, r3, #27
 8010d7a:	d407      	bmi.n	8010d8c <__swsetup_r+0x30>
 8010d7c:	2209      	movs	r2, #9
 8010d7e:	602a      	str	r2, [r5, #0]
 8010d80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d84:	81a3      	strh	r3, [r4, #12]
 8010d86:	f04f 30ff 	mov.w	r0, #4294967295
 8010d8a:	e033      	b.n	8010df4 <__swsetup_r+0x98>
 8010d8c:	0758      	lsls	r0, r3, #29
 8010d8e:	d512      	bpl.n	8010db6 <__swsetup_r+0x5a>
 8010d90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010d92:	b141      	cbz	r1, 8010da6 <__swsetup_r+0x4a>
 8010d94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010d98:	4299      	cmp	r1, r3
 8010d9a:	d002      	beq.n	8010da2 <__swsetup_r+0x46>
 8010d9c:	4628      	mov	r0, r5
 8010d9e:	f7fe f82b 	bl	800edf8 <_free_r>
 8010da2:	2300      	movs	r3, #0
 8010da4:	6363      	str	r3, [r4, #52]	@ 0x34
 8010da6:	89a3      	ldrh	r3, [r4, #12]
 8010da8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010dac:	81a3      	strh	r3, [r4, #12]
 8010dae:	2300      	movs	r3, #0
 8010db0:	6063      	str	r3, [r4, #4]
 8010db2:	6923      	ldr	r3, [r4, #16]
 8010db4:	6023      	str	r3, [r4, #0]
 8010db6:	89a3      	ldrh	r3, [r4, #12]
 8010db8:	f043 0308 	orr.w	r3, r3, #8
 8010dbc:	81a3      	strh	r3, [r4, #12]
 8010dbe:	6923      	ldr	r3, [r4, #16]
 8010dc0:	b94b      	cbnz	r3, 8010dd6 <__swsetup_r+0x7a>
 8010dc2:	89a3      	ldrh	r3, [r4, #12]
 8010dc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010dc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010dcc:	d003      	beq.n	8010dd6 <__swsetup_r+0x7a>
 8010dce:	4621      	mov	r1, r4
 8010dd0:	4628      	mov	r0, r5
 8010dd2:	f000 fc3b 	bl	801164c <__smakebuf_r>
 8010dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010dda:	f013 0201 	ands.w	r2, r3, #1
 8010dde:	d00a      	beq.n	8010df6 <__swsetup_r+0x9a>
 8010de0:	2200      	movs	r2, #0
 8010de2:	60a2      	str	r2, [r4, #8]
 8010de4:	6962      	ldr	r2, [r4, #20]
 8010de6:	4252      	negs	r2, r2
 8010de8:	61a2      	str	r2, [r4, #24]
 8010dea:	6922      	ldr	r2, [r4, #16]
 8010dec:	b942      	cbnz	r2, 8010e00 <__swsetup_r+0xa4>
 8010dee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010df2:	d1c5      	bne.n	8010d80 <__swsetup_r+0x24>
 8010df4:	bd38      	pop	{r3, r4, r5, pc}
 8010df6:	0799      	lsls	r1, r3, #30
 8010df8:	bf58      	it	pl
 8010dfa:	6962      	ldrpl	r2, [r4, #20]
 8010dfc:	60a2      	str	r2, [r4, #8]
 8010dfe:	e7f4      	b.n	8010dea <__swsetup_r+0x8e>
 8010e00:	2000      	movs	r0, #0
 8010e02:	e7f7      	b.n	8010df4 <__swsetup_r+0x98>
 8010e04:	20000190 	.word	0x20000190

08010e08 <memmove>:
 8010e08:	4288      	cmp	r0, r1
 8010e0a:	b510      	push	{r4, lr}
 8010e0c:	eb01 0402 	add.w	r4, r1, r2
 8010e10:	d902      	bls.n	8010e18 <memmove+0x10>
 8010e12:	4284      	cmp	r4, r0
 8010e14:	4623      	mov	r3, r4
 8010e16:	d807      	bhi.n	8010e28 <memmove+0x20>
 8010e18:	1e43      	subs	r3, r0, #1
 8010e1a:	42a1      	cmp	r1, r4
 8010e1c:	d008      	beq.n	8010e30 <memmove+0x28>
 8010e1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010e22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010e26:	e7f8      	b.n	8010e1a <memmove+0x12>
 8010e28:	4402      	add	r2, r0
 8010e2a:	4601      	mov	r1, r0
 8010e2c:	428a      	cmp	r2, r1
 8010e2e:	d100      	bne.n	8010e32 <memmove+0x2a>
 8010e30:	bd10      	pop	{r4, pc}
 8010e32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010e36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010e3a:	e7f7      	b.n	8010e2c <memmove+0x24>

08010e3c <strncmp>:
 8010e3c:	b510      	push	{r4, lr}
 8010e3e:	b16a      	cbz	r2, 8010e5c <strncmp+0x20>
 8010e40:	3901      	subs	r1, #1
 8010e42:	1884      	adds	r4, r0, r2
 8010e44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e48:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010e4c:	429a      	cmp	r2, r3
 8010e4e:	d103      	bne.n	8010e58 <strncmp+0x1c>
 8010e50:	42a0      	cmp	r0, r4
 8010e52:	d001      	beq.n	8010e58 <strncmp+0x1c>
 8010e54:	2a00      	cmp	r2, #0
 8010e56:	d1f5      	bne.n	8010e44 <strncmp+0x8>
 8010e58:	1ad0      	subs	r0, r2, r3
 8010e5a:	bd10      	pop	{r4, pc}
 8010e5c:	4610      	mov	r0, r2
 8010e5e:	e7fc      	b.n	8010e5a <strncmp+0x1e>

08010e60 <_sbrk_r>:
 8010e60:	b538      	push	{r3, r4, r5, lr}
 8010e62:	4d06      	ldr	r5, [pc, #24]	@ (8010e7c <_sbrk_r+0x1c>)
 8010e64:	2300      	movs	r3, #0
 8010e66:	4604      	mov	r4, r0
 8010e68:	4608      	mov	r0, r1
 8010e6a:	602b      	str	r3, [r5, #0]
 8010e6c:	f7f1 ff12 	bl	8002c94 <_sbrk>
 8010e70:	1c43      	adds	r3, r0, #1
 8010e72:	d102      	bne.n	8010e7a <_sbrk_r+0x1a>
 8010e74:	682b      	ldr	r3, [r5, #0]
 8010e76:	b103      	cbz	r3, 8010e7a <_sbrk_r+0x1a>
 8010e78:	6023      	str	r3, [r4, #0]
 8010e7a:	bd38      	pop	{r3, r4, r5, pc}
 8010e7c:	20002278 	.word	0x20002278

08010e80 <nan>:
 8010e80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010e88 <nan+0x8>
 8010e84:	4770      	bx	lr
 8010e86:	bf00      	nop
 8010e88:	00000000 	.word	0x00000000
 8010e8c:	7ff80000 	.word	0x7ff80000

08010e90 <__assert_func>:
 8010e90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e92:	4614      	mov	r4, r2
 8010e94:	461a      	mov	r2, r3
 8010e96:	4b09      	ldr	r3, [pc, #36]	@ (8010ebc <__assert_func+0x2c>)
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	4605      	mov	r5, r0
 8010e9c:	68d8      	ldr	r0, [r3, #12]
 8010e9e:	b14c      	cbz	r4, 8010eb4 <__assert_func+0x24>
 8010ea0:	4b07      	ldr	r3, [pc, #28]	@ (8010ec0 <__assert_func+0x30>)
 8010ea2:	9100      	str	r1, [sp, #0]
 8010ea4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010ea8:	4906      	ldr	r1, [pc, #24]	@ (8010ec4 <__assert_func+0x34>)
 8010eaa:	462b      	mov	r3, r5
 8010eac:	f7fd f820 	bl	800def0 <fiprintf>
 8010eb0:	f000 fc2a 	bl	8011708 <abort>
 8010eb4:	4b04      	ldr	r3, [pc, #16]	@ (8010ec8 <__assert_func+0x38>)
 8010eb6:	461c      	mov	r4, r3
 8010eb8:	e7f3      	b.n	8010ea2 <__assert_func+0x12>
 8010eba:	bf00      	nop
 8010ebc:	20000190 	.word	0x20000190
 8010ec0:	08011b57 	.word	0x08011b57
 8010ec4:	08011b64 	.word	0x08011b64
 8010ec8:	08011b92 	.word	0x08011b92

08010ecc <_calloc_r>:
 8010ecc:	b570      	push	{r4, r5, r6, lr}
 8010ece:	fba1 5402 	umull	r5, r4, r1, r2
 8010ed2:	b934      	cbnz	r4, 8010ee2 <_calloc_r+0x16>
 8010ed4:	4629      	mov	r1, r5
 8010ed6:	f7fe f803 	bl	800eee0 <_malloc_r>
 8010eda:	4606      	mov	r6, r0
 8010edc:	b928      	cbnz	r0, 8010eea <_calloc_r+0x1e>
 8010ede:	4630      	mov	r0, r6
 8010ee0:	bd70      	pop	{r4, r5, r6, pc}
 8010ee2:	220c      	movs	r2, #12
 8010ee4:	6002      	str	r2, [r0, #0]
 8010ee6:	2600      	movs	r6, #0
 8010ee8:	e7f9      	b.n	8010ede <_calloc_r+0x12>
 8010eea:	462a      	mov	r2, r5
 8010eec:	4621      	mov	r1, r4
 8010eee:	f7fd f894 	bl	800e01a <memset>
 8010ef2:	e7f4      	b.n	8010ede <_calloc_r+0x12>

08010ef4 <rshift>:
 8010ef4:	6903      	ldr	r3, [r0, #16]
 8010ef6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010efa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010efe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010f02:	f100 0414 	add.w	r4, r0, #20
 8010f06:	dd45      	ble.n	8010f94 <rshift+0xa0>
 8010f08:	f011 011f 	ands.w	r1, r1, #31
 8010f0c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010f10:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010f14:	d10c      	bne.n	8010f30 <rshift+0x3c>
 8010f16:	f100 0710 	add.w	r7, r0, #16
 8010f1a:	4629      	mov	r1, r5
 8010f1c:	42b1      	cmp	r1, r6
 8010f1e:	d334      	bcc.n	8010f8a <rshift+0x96>
 8010f20:	1a9b      	subs	r3, r3, r2
 8010f22:	009b      	lsls	r3, r3, #2
 8010f24:	1eea      	subs	r2, r5, #3
 8010f26:	4296      	cmp	r6, r2
 8010f28:	bf38      	it	cc
 8010f2a:	2300      	movcc	r3, #0
 8010f2c:	4423      	add	r3, r4
 8010f2e:	e015      	b.n	8010f5c <rshift+0x68>
 8010f30:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010f34:	f1c1 0820 	rsb	r8, r1, #32
 8010f38:	40cf      	lsrs	r7, r1
 8010f3a:	f105 0e04 	add.w	lr, r5, #4
 8010f3e:	46a1      	mov	r9, r4
 8010f40:	4576      	cmp	r6, lr
 8010f42:	46f4      	mov	ip, lr
 8010f44:	d815      	bhi.n	8010f72 <rshift+0x7e>
 8010f46:	1a9a      	subs	r2, r3, r2
 8010f48:	0092      	lsls	r2, r2, #2
 8010f4a:	3a04      	subs	r2, #4
 8010f4c:	3501      	adds	r5, #1
 8010f4e:	42ae      	cmp	r6, r5
 8010f50:	bf38      	it	cc
 8010f52:	2200      	movcc	r2, #0
 8010f54:	18a3      	adds	r3, r4, r2
 8010f56:	50a7      	str	r7, [r4, r2]
 8010f58:	b107      	cbz	r7, 8010f5c <rshift+0x68>
 8010f5a:	3304      	adds	r3, #4
 8010f5c:	1b1a      	subs	r2, r3, r4
 8010f5e:	42a3      	cmp	r3, r4
 8010f60:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010f64:	bf08      	it	eq
 8010f66:	2300      	moveq	r3, #0
 8010f68:	6102      	str	r2, [r0, #16]
 8010f6a:	bf08      	it	eq
 8010f6c:	6143      	streq	r3, [r0, #20]
 8010f6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f72:	f8dc c000 	ldr.w	ip, [ip]
 8010f76:	fa0c fc08 	lsl.w	ip, ip, r8
 8010f7a:	ea4c 0707 	orr.w	r7, ip, r7
 8010f7e:	f849 7b04 	str.w	r7, [r9], #4
 8010f82:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010f86:	40cf      	lsrs	r7, r1
 8010f88:	e7da      	b.n	8010f40 <rshift+0x4c>
 8010f8a:	f851 cb04 	ldr.w	ip, [r1], #4
 8010f8e:	f847 cf04 	str.w	ip, [r7, #4]!
 8010f92:	e7c3      	b.n	8010f1c <rshift+0x28>
 8010f94:	4623      	mov	r3, r4
 8010f96:	e7e1      	b.n	8010f5c <rshift+0x68>

08010f98 <__hexdig_fun>:
 8010f98:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010f9c:	2b09      	cmp	r3, #9
 8010f9e:	d802      	bhi.n	8010fa6 <__hexdig_fun+0xe>
 8010fa0:	3820      	subs	r0, #32
 8010fa2:	b2c0      	uxtb	r0, r0
 8010fa4:	4770      	bx	lr
 8010fa6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010faa:	2b05      	cmp	r3, #5
 8010fac:	d801      	bhi.n	8010fb2 <__hexdig_fun+0x1a>
 8010fae:	3847      	subs	r0, #71	@ 0x47
 8010fb0:	e7f7      	b.n	8010fa2 <__hexdig_fun+0xa>
 8010fb2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010fb6:	2b05      	cmp	r3, #5
 8010fb8:	d801      	bhi.n	8010fbe <__hexdig_fun+0x26>
 8010fba:	3827      	subs	r0, #39	@ 0x27
 8010fbc:	e7f1      	b.n	8010fa2 <__hexdig_fun+0xa>
 8010fbe:	2000      	movs	r0, #0
 8010fc0:	4770      	bx	lr
	...

08010fc4 <__gethex>:
 8010fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fc8:	b085      	sub	sp, #20
 8010fca:	468a      	mov	sl, r1
 8010fcc:	9302      	str	r3, [sp, #8]
 8010fce:	680b      	ldr	r3, [r1, #0]
 8010fd0:	9001      	str	r0, [sp, #4]
 8010fd2:	4690      	mov	r8, r2
 8010fd4:	1c9c      	adds	r4, r3, #2
 8010fd6:	46a1      	mov	r9, r4
 8010fd8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010fdc:	2830      	cmp	r0, #48	@ 0x30
 8010fde:	d0fa      	beq.n	8010fd6 <__gethex+0x12>
 8010fe0:	eba9 0303 	sub.w	r3, r9, r3
 8010fe4:	f1a3 0b02 	sub.w	fp, r3, #2
 8010fe8:	f7ff ffd6 	bl	8010f98 <__hexdig_fun>
 8010fec:	4605      	mov	r5, r0
 8010fee:	2800      	cmp	r0, #0
 8010ff0:	d168      	bne.n	80110c4 <__gethex+0x100>
 8010ff2:	49a0      	ldr	r1, [pc, #640]	@ (8011274 <__gethex+0x2b0>)
 8010ff4:	2201      	movs	r2, #1
 8010ff6:	4648      	mov	r0, r9
 8010ff8:	f7ff ff20 	bl	8010e3c <strncmp>
 8010ffc:	4607      	mov	r7, r0
 8010ffe:	2800      	cmp	r0, #0
 8011000:	d167      	bne.n	80110d2 <__gethex+0x10e>
 8011002:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011006:	4626      	mov	r6, r4
 8011008:	f7ff ffc6 	bl	8010f98 <__hexdig_fun>
 801100c:	2800      	cmp	r0, #0
 801100e:	d062      	beq.n	80110d6 <__gethex+0x112>
 8011010:	4623      	mov	r3, r4
 8011012:	7818      	ldrb	r0, [r3, #0]
 8011014:	2830      	cmp	r0, #48	@ 0x30
 8011016:	4699      	mov	r9, r3
 8011018:	f103 0301 	add.w	r3, r3, #1
 801101c:	d0f9      	beq.n	8011012 <__gethex+0x4e>
 801101e:	f7ff ffbb 	bl	8010f98 <__hexdig_fun>
 8011022:	fab0 f580 	clz	r5, r0
 8011026:	096d      	lsrs	r5, r5, #5
 8011028:	f04f 0b01 	mov.w	fp, #1
 801102c:	464a      	mov	r2, r9
 801102e:	4616      	mov	r6, r2
 8011030:	3201      	adds	r2, #1
 8011032:	7830      	ldrb	r0, [r6, #0]
 8011034:	f7ff ffb0 	bl	8010f98 <__hexdig_fun>
 8011038:	2800      	cmp	r0, #0
 801103a:	d1f8      	bne.n	801102e <__gethex+0x6a>
 801103c:	498d      	ldr	r1, [pc, #564]	@ (8011274 <__gethex+0x2b0>)
 801103e:	2201      	movs	r2, #1
 8011040:	4630      	mov	r0, r6
 8011042:	f7ff fefb 	bl	8010e3c <strncmp>
 8011046:	2800      	cmp	r0, #0
 8011048:	d13f      	bne.n	80110ca <__gethex+0x106>
 801104a:	b944      	cbnz	r4, 801105e <__gethex+0x9a>
 801104c:	1c74      	adds	r4, r6, #1
 801104e:	4622      	mov	r2, r4
 8011050:	4616      	mov	r6, r2
 8011052:	3201      	adds	r2, #1
 8011054:	7830      	ldrb	r0, [r6, #0]
 8011056:	f7ff ff9f 	bl	8010f98 <__hexdig_fun>
 801105a:	2800      	cmp	r0, #0
 801105c:	d1f8      	bne.n	8011050 <__gethex+0x8c>
 801105e:	1ba4      	subs	r4, r4, r6
 8011060:	00a7      	lsls	r7, r4, #2
 8011062:	7833      	ldrb	r3, [r6, #0]
 8011064:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011068:	2b50      	cmp	r3, #80	@ 0x50
 801106a:	d13e      	bne.n	80110ea <__gethex+0x126>
 801106c:	7873      	ldrb	r3, [r6, #1]
 801106e:	2b2b      	cmp	r3, #43	@ 0x2b
 8011070:	d033      	beq.n	80110da <__gethex+0x116>
 8011072:	2b2d      	cmp	r3, #45	@ 0x2d
 8011074:	d034      	beq.n	80110e0 <__gethex+0x11c>
 8011076:	1c71      	adds	r1, r6, #1
 8011078:	2400      	movs	r4, #0
 801107a:	7808      	ldrb	r0, [r1, #0]
 801107c:	f7ff ff8c 	bl	8010f98 <__hexdig_fun>
 8011080:	1e43      	subs	r3, r0, #1
 8011082:	b2db      	uxtb	r3, r3
 8011084:	2b18      	cmp	r3, #24
 8011086:	d830      	bhi.n	80110ea <__gethex+0x126>
 8011088:	f1a0 0210 	sub.w	r2, r0, #16
 801108c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011090:	f7ff ff82 	bl	8010f98 <__hexdig_fun>
 8011094:	f100 3cff 	add.w	ip, r0, #4294967295
 8011098:	fa5f fc8c 	uxtb.w	ip, ip
 801109c:	f1bc 0f18 	cmp.w	ip, #24
 80110a0:	f04f 030a 	mov.w	r3, #10
 80110a4:	d91e      	bls.n	80110e4 <__gethex+0x120>
 80110a6:	b104      	cbz	r4, 80110aa <__gethex+0xe6>
 80110a8:	4252      	negs	r2, r2
 80110aa:	4417      	add	r7, r2
 80110ac:	f8ca 1000 	str.w	r1, [sl]
 80110b0:	b1ed      	cbz	r5, 80110ee <__gethex+0x12a>
 80110b2:	f1bb 0f00 	cmp.w	fp, #0
 80110b6:	bf0c      	ite	eq
 80110b8:	2506      	moveq	r5, #6
 80110ba:	2500      	movne	r5, #0
 80110bc:	4628      	mov	r0, r5
 80110be:	b005      	add	sp, #20
 80110c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110c4:	2500      	movs	r5, #0
 80110c6:	462c      	mov	r4, r5
 80110c8:	e7b0      	b.n	801102c <__gethex+0x68>
 80110ca:	2c00      	cmp	r4, #0
 80110cc:	d1c7      	bne.n	801105e <__gethex+0x9a>
 80110ce:	4627      	mov	r7, r4
 80110d0:	e7c7      	b.n	8011062 <__gethex+0x9e>
 80110d2:	464e      	mov	r6, r9
 80110d4:	462f      	mov	r7, r5
 80110d6:	2501      	movs	r5, #1
 80110d8:	e7c3      	b.n	8011062 <__gethex+0x9e>
 80110da:	2400      	movs	r4, #0
 80110dc:	1cb1      	adds	r1, r6, #2
 80110de:	e7cc      	b.n	801107a <__gethex+0xb6>
 80110e0:	2401      	movs	r4, #1
 80110e2:	e7fb      	b.n	80110dc <__gethex+0x118>
 80110e4:	fb03 0002 	mla	r0, r3, r2, r0
 80110e8:	e7ce      	b.n	8011088 <__gethex+0xc4>
 80110ea:	4631      	mov	r1, r6
 80110ec:	e7de      	b.n	80110ac <__gethex+0xe8>
 80110ee:	eba6 0309 	sub.w	r3, r6, r9
 80110f2:	3b01      	subs	r3, #1
 80110f4:	4629      	mov	r1, r5
 80110f6:	2b07      	cmp	r3, #7
 80110f8:	dc0a      	bgt.n	8011110 <__gethex+0x14c>
 80110fa:	9801      	ldr	r0, [sp, #4]
 80110fc:	f7fd ff7c 	bl	800eff8 <_Balloc>
 8011100:	4604      	mov	r4, r0
 8011102:	b940      	cbnz	r0, 8011116 <__gethex+0x152>
 8011104:	4b5c      	ldr	r3, [pc, #368]	@ (8011278 <__gethex+0x2b4>)
 8011106:	4602      	mov	r2, r0
 8011108:	21e4      	movs	r1, #228	@ 0xe4
 801110a:	485c      	ldr	r0, [pc, #368]	@ (801127c <__gethex+0x2b8>)
 801110c:	f7ff fec0 	bl	8010e90 <__assert_func>
 8011110:	3101      	adds	r1, #1
 8011112:	105b      	asrs	r3, r3, #1
 8011114:	e7ef      	b.n	80110f6 <__gethex+0x132>
 8011116:	f100 0a14 	add.w	sl, r0, #20
 801111a:	2300      	movs	r3, #0
 801111c:	4655      	mov	r5, sl
 801111e:	469b      	mov	fp, r3
 8011120:	45b1      	cmp	r9, r6
 8011122:	d337      	bcc.n	8011194 <__gethex+0x1d0>
 8011124:	f845 bb04 	str.w	fp, [r5], #4
 8011128:	eba5 050a 	sub.w	r5, r5, sl
 801112c:	10ad      	asrs	r5, r5, #2
 801112e:	6125      	str	r5, [r4, #16]
 8011130:	4658      	mov	r0, fp
 8011132:	f7fe f853 	bl	800f1dc <__hi0bits>
 8011136:	016d      	lsls	r5, r5, #5
 8011138:	f8d8 6000 	ldr.w	r6, [r8]
 801113c:	1a2d      	subs	r5, r5, r0
 801113e:	42b5      	cmp	r5, r6
 8011140:	dd54      	ble.n	80111ec <__gethex+0x228>
 8011142:	1bad      	subs	r5, r5, r6
 8011144:	4629      	mov	r1, r5
 8011146:	4620      	mov	r0, r4
 8011148:	f7fe fbdf 	bl	800f90a <__any_on>
 801114c:	4681      	mov	r9, r0
 801114e:	b178      	cbz	r0, 8011170 <__gethex+0x1ac>
 8011150:	1e6b      	subs	r3, r5, #1
 8011152:	1159      	asrs	r1, r3, #5
 8011154:	f003 021f 	and.w	r2, r3, #31
 8011158:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801115c:	f04f 0901 	mov.w	r9, #1
 8011160:	fa09 f202 	lsl.w	r2, r9, r2
 8011164:	420a      	tst	r2, r1
 8011166:	d003      	beq.n	8011170 <__gethex+0x1ac>
 8011168:	454b      	cmp	r3, r9
 801116a:	dc36      	bgt.n	80111da <__gethex+0x216>
 801116c:	f04f 0902 	mov.w	r9, #2
 8011170:	4629      	mov	r1, r5
 8011172:	4620      	mov	r0, r4
 8011174:	f7ff febe 	bl	8010ef4 <rshift>
 8011178:	442f      	add	r7, r5
 801117a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801117e:	42bb      	cmp	r3, r7
 8011180:	da42      	bge.n	8011208 <__gethex+0x244>
 8011182:	9801      	ldr	r0, [sp, #4]
 8011184:	4621      	mov	r1, r4
 8011186:	f7fd ff77 	bl	800f078 <_Bfree>
 801118a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801118c:	2300      	movs	r3, #0
 801118e:	6013      	str	r3, [r2, #0]
 8011190:	25a3      	movs	r5, #163	@ 0xa3
 8011192:	e793      	b.n	80110bc <__gethex+0xf8>
 8011194:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011198:	2a2e      	cmp	r2, #46	@ 0x2e
 801119a:	d012      	beq.n	80111c2 <__gethex+0x1fe>
 801119c:	2b20      	cmp	r3, #32
 801119e:	d104      	bne.n	80111aa <__gethex+0x1e6>
 80111a0:	f845 bb04 	str.w	fp, [r5], #4
 80111a4:	f04f 0b00 	mov.w	fp, #0
 80111a8:	465b      	mov	r3, fp
 80111aa:	7830      	ldrb	r0, [r6, #0]
 80111ac:	9303      	str	r3, [sp, #12]
 80111ae:	f7ff fef3 	bl	8010f98 <__hexdig_fun>
 80111b2:	9b03      	ldr	r3, [sp, #12]
 80111b4:	f000 000f 	and.w	r0, r0, #15
 80111b8:	4098      	lsls	r0, r3
 80111ba:	ea4b 0b00 	orr.w	fp, fp, r0
 80111be:	3304      	adds	r3, #4
 80111c0:	e7ae      	b.n	8011120 <__gethex+0x15c>
 80111c2:	45b1      	cmp	r9, r6
 80111c4:	d8ea      	bhi.n	801119c <__gethex+0x1d8>
 80111c6:	492b      	ldr	r1, [pc, #172]	@ (8011274 <__gethex+0x2b0>)
 80111c8:	9303      	str	r3, [sp, #12]
 80111ca:	2201      	movs	r2, #1
 80111cc:	4630      	mov	r0, r6
 80111ce:	f7ff fe35 	bl	8010e3c <strncmp>
 80111d2:	9b03      	ldr	r3, [sp, #12]
 80111d4:	2800      	cmp	r0, #0
 80111d6:	d1e1      	bne.n	801119c <__gethex+0x1d8>
 80111d8:	e7a2      	b.n	8011120 <__gethex+0x15c>
 80111da:	1ea9      	subs	r1, r5, #2
 80111dc:	4620      	mov	r0, r4
 80111de:	f7fe fb94 	bl	800f90a <__any_on>
 80111e2:	2800      	cmp	r0, #0
 80111e4:	d0c2      	beq.n	801116c <__gethex+0x1a8>
 80111e6:	f04f 0903 	mov.w	r9, #3
 80111ea:	e7c1      	b.n	8011170 <__gethex+0x1ac>
 80111ec:	da09      	bge.n	8011202 <__gethex+0x23e>
 80111ee:	1b75      	subs	r5, r6, r5
 80111f0:	4621      	mov	r1, r4
 80111f2:	9801      	ldr	r0, [sp, #4]
 80111f4:	462a      	mov	r2, r5
 80111f6:	f7fe f94f 	bl	800f498 <__lshift>
 80111fa:	1b7f      	subs	r7, r7, r5
 80111fc:	4604      	mov	r4, r0
 80111fe:	f100 0a14 	add.w	sl, r0, #20
 8011202:	f04f 0900 	mov.w	r9, #0
 8011206:	e7b8      	b.n	801117a <__gethex+0x1b6>
 8011208:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801120c:	42bd      	cmp	r5, r7
 801120e:	dd6f      	ble.n	80112f0 <__gethex+0x32c>
 8011210:	1bed      	subs	r5, r5, r7
 8011212:	42ae      	cmp	r6, r5
 8011214:	dc34      	bgt.n	8011280 <__gethex+0x2bc>
 8011216:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801121a:	2b02      	cmp	r3, #2
 801121c:	d022      	beq.n	8011264 <__gethex+0x2a0>
 801121e:	2b03      	cmp	r3, #3
 8011220:	d024      	beq.n	801126c <__gethex+0x2a8>
 8011222:	2b01      	cmp	r3, #1
 8011224:	d115      	bne.n	8011252 <__gethex+0x28e>
 8011226:	42ae      	cmp	r6, r5
 8011228:	d113      	bne.n	8011252 <__gethex+0x28e>
 801122a:	2e01      	cmp	r6, #1
 801122c:	d10b      	bne.n	8011246 <__gethex+0x282>
 801122e:	9a02      	ldr	r2, [sp, #8]
 8011230:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011234:	6013      	str	r3, [r2, #0]
 8011236:	2301      	movs	r3, #1
 8011238:	6123      	str	r3, [r4, #16]
 801123a:	f8ca 3000 	str.w	r3, [sl]
 801123e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011240:	2562      	movs	r5, #98	@ 0x62
 8011242:	601c      	str	r4, [r3, #0]
 8011244:	e73a      	b.n	80110bc <__gethex+0xf8>
 8011246:	1e71      	subs	r1, r6, #1
 8011248:	4620      	mov	r0, r4
 801124a:	f7fe fb5e 	bl	800f90a <__any_on>
 801124e:	2800      	cmp	r0, #0
 8011250:	d1ed      	bne.n	801122e <__gethex+0x26a>
 8011252:	9801      	ldr	r0, [sp, #4]
 8011254:	4621      	mov	r1, r4
 8011256:	f7fd ff0f 	bl	800f078 <_Bfree>
 801125a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801125c:	2300      	movs	r3, #0
 801125e:	6013      	str	r3, [r2, #0]
 8011260:	2550      	movs	r5, #80	@ 0x50
 8011262:	e72b      	b.n	80110bc <__gethex+0xf8>
 8011264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011266:	2b00      	cmp	r3, #0
 8011268:	d1f3      	bne.n	8011252 <__gethex+0x28e>
 801126a:	e7e0      	b.n	801122e <__gethex+0x26a>
 801126c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801126e:	2b00      	cmp	r3, #0
 8011270:	d1dd      	bne.n	801122e <__gethex+0x26a>
 8011272:	e7ee      	b.n	8011252 <__gethex+0x28e>
 8011274:	08011b3c 	.word	0x08011b3c
 8011278:	08011ad2 	.word	0x08011ad2
 801127c:	08011b93 	.word	0x08011b93
 8011280:	1e6f      	subs	r7, r5, #1
 8011282:	f1b9 0f00 	cmp.w	r9, #0
 8011286:	d130      	bne.n	80112ea <__gethex+0x326>
 8011288:	b127      	cbz	r7, 8011294 <__gethex+0x2d0>
 801128a:	4639      	mov	r1, r7
 801128c:	4620      	mov	r0, r4
 801128e:	f7fe fb3c 	bl	800f90a <__any_on>
 8011292:	4681      	mov	r9, r0
 8011294:	117a      	asrs	r2, r7, #5
 8011296:	2301      	movs	r3, #1
 8011298:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801129c:	f007 071f 	and.w	r7, r7, #31
 80112a0:	40bb      	lsls	r3, r7
 80112a2:	4213      	tst	r3, r2
 80112a4:	4629      	mov	r1, r5
 80112a6:	4620      	mov	r0, r4
 80112a8:	bf18      	it	ne
 80112aa:	f049 0902 	orrne.w	r9, r9, #2
 80112ae:	f7ff fe21 	bl	8010ef4 <rshift>
 80112b2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80112b6:	1b76      	subs	r6, r6, r5
 80112b8:	2502      	movs	r5, #2
 80112ba:	f1b9 0f00 	cmp.w	r9, #0
 80112be:	d047      	beq.n	8011350 <__gethex+0x38c>
 80112c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80112c4:	2b02      	cmp	r3, #2
 80112c6:	d015      	beq.n	80112f4 <__gethex+0x330>
 80112c8:	2b03      	cmp	r3, #3
 80112ca:	d017      	beq.n	80112fc <__gethex+0x338>
 80112cc:	2b01      	cmp	r3, #1
 80112ce:	d109      	bne.n	80112e4 <__gethex+0x320>
 80112d0:	f019 0f02 	tst.w	r9, #2
 80112d4:	d006      	beq.n	80112e4 <__gethex+0x320>
 80112d6:	f8da 3000 	ldr.w	r3, [sl]
 80112da:	ea49 0903 	orr.w	r9, r9, r3
 80112de:	f019 0f01 	tst.w	r9, #1
 80112e2:	d10e      	bne.n	8011302 <__gethex+0x33e>
 80112e4:	f045 0510 	orr.w	r5, r5, #16
 80112e8:	e032      	b.n	8011350 <__gethex+0x38c>
 80112ea:	f04f 0901 	mov.w	r9, #1
 80112ee:	e7d1      	b.n	8011294 <__gethex+0x2d0>
 80112f0:	2501      	movs	r5, #1
 80112f2:	e7e2      	b.n	80112ba <__gethex+0x2f6>
 80112f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80112f6:	f1c3 0301 	rsb	r3, r3, #1
 80112fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80112fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d0f0      	beq.n	80112e4 <__gethex+0x320>
 8011302:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011306:	f104 0314 	add.w	r3, r4, #20
 801130a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801130e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011312:	f04f 0c00 	mov.w	ip, #0
 8011316:	4618      	mov	r0, r3
 8011318:	f853 2b04 	ldr.w	r2, [r3], #4
 801131c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011320:	d01b      	beq.n	801135a <__gethex+0x396>
 8011322:	3201      	adds	r2, #1
 8011324:	6002      	str	r2, [r0, #0]
 8011326:	2d02      	cmp	r5, #2
 8011328:	f104 0314 	add.w	r3, r4, #20
 801132c:	d13c      	bne.n	80113a8 <__gethex+0x3e4>
 801132e:	f8d8 2000 	ldr.w	r2, [r8]
 8011332:	3a01      	subs	r2, #1
 8011334:	42b2      	cmp	r2, r6
 8011336:	d109      	bne.n	801134c <__gethex+0x388>
 8011338:	1171      	asrs	r1, r6, #5
 801133a:	2201      	movs	r2, #1
 801133c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011340:	f006 061f 	and.w	r6, r6, #31
 8011344:	fa02 f606 	lsl.w	r6, r2, r6
 8011348:	421e      	tst	r6, r3
 801134a:	d13a      	bne.n	80113c2 <__gethex+0x3fe>
 801134c:	f045 0520 	orr.w	r5, r5, #32
 8011350:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011352:	601c      	str	r4, [r3, #0]
 8011354:	9b02      	ldr	r3, [sp, #8]
 8011356:	601f      	str	r7, [r3, #0]
 8011358:	e6b0      	b.n	80110bc <__gethex+0xf8>
 801135a:	4299      	cmp	r1, r3
 801135c:	f843 cc04 	str.w	ip, [r3, #-4]
 8011360:	d8d9      	bhi.n	8011316 <__gethex+0x352>
 8011362:	68a3      	ldr	r3, [r4, #8]
 8011364:	459b      	cmp	fp, r3
 8011366:	db17      	blt.n	8011398 <__gethex+0x3d4>
 8011368:	6861      	ldr	r1, [r4, #4]
 801136a:	9801      	ldr	r0, [sp, #4]
 801136c:	3101      	adds	r1, #1
 801136e:	f7fd fe43 	bl	800eff8 <_Balloc>
 8011372:	4681      	mov	r9, r0
 8011374:	b918      	cbnz	r0, 801137e <__gethex+0x3ba>
 8011376:	4b1a      	ldr	r3, [pc, #104]	@ (80113e0 <__gethex+0x41c>)
 8011378:	4602      	mov	r2, r0
 801137a:	2184      	movs	r1, #132	@ 0x84
 801137c:	e6c5      	b.n	801110a <__gethex+0x146>
 801137e:	6922      	ldr	r2, [r4, #16]
 8011380:	3202      	adds	r2, #2
 8011382:	f104 010c 	add.w	r1, r4, #12
 8011386:	0092      	lsls	r2, r2, #2
 8011388:	300c      	adds	r0, #12
 801138a:	f7fc fec6 	bl	800e11a <memcpy>
 801138e:	4621      	mov	r1, r4
 8011390:	9801      	ldr	r0, [sp, #4]
 8011392:	f7fd fe71 	bl	800f078 <_Bfree>
 8011396:	464c      	mov	r4, r9
 8011398:	6923      	ldr	r3, [r4, #16]
 801139a:	1c5a      	adds	r2, r3, #1
 801139c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80113a0:	6122      	str	r2, [r4, #16]
 80113a2:	2201      	movs	r2, #1
 80113a4:	615a      	str	r2, [r3, #20]
 80113a6:	e7be      	b.n	8011326 <__gethex+0x362>
 80113a8:	6922      	ldr	r2, [r4, #16]
 80113aa:	455a      	cmp	r2, fp
 80113ac:	dd0b      	ble.n	80113c6 <__gethex+0x402>
 80113ae:	2101      	movs	r1, #1
 80113b0:	4620      	mov	r0, r4
 80113b2:	f7ff fd9f 	bl	8010ef4 <rshift>
 80113b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80113ba:	3701      	adds	r7, #1
 80113bc:	42bb      	cmp	r3, r7
 80113be:	f6ff aee0 	blt.w	8011182 <__gethex+0x1be>
 80113c2:	2501      	movs	r5, #1
 80113c4:	e7c2      	b.n	801134c <__gethex+0x388>
 80113c6:	f016 061f 	ands.w	r6, r6, #31
 80113ca:	d0fa      	beq.n	80113c2 <__gethex+0x3fe>
 80113cc:	4453      	add	r3, sl
 80113ce:	f1c6 0620 	rsb	r6, r6, #32
 80113d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80113d6:	f7fd ff01 	bl	800f1dc <__hi0bits>
 80113da:	42b0      	cmp	r0, r6
 80113dc:	dbe7      	blt.n	80113ae <__gethex+0x3ea>
 80113de:	e7f0      	b.n	80113c2 <__gethex+0x3fe>
 80113e0:	08011ad2 	.word	0x08011ad2

080113e4 <L_shift>:
 80113e4:	f1c2 0208 	rsb	r2, r2, #8
 80113e8:	0092      	lsls	r2, r2, #2
 80113ea:	b570      	push	{r4, r5, r6, lr}
 80113ec:	f1c2 0620 	rsb	r6, r2, #32
 80113f0:	6843      	ldr	r3, [r0, #4]
 80113f2:	6804      	ldr	r4, [r0, #0]
 80113f4:	fa03 f506 	lsl.w	r5, r3, r6
 80113f8:	432c      	orrs	r4, r5
 80113fa:	40d3      	lsrs	r3, r2
 80113fc:	6004      	str	r4, [r0, #0]
 80113fe:	f840 3f04 	str.w	r3, [r0, #4]!
 8011402:	4288      	cmp	r0, r1
 8011404:	d3f4      	bcc.n	80113f0 <L_shift+0xc>
 8011406:	bd70      	pop	{r4, r5, r6, pc}

08011408 <__match>:
 8011408:	b530      	push	{r4, r5, lr}
 801140a:	6803      	ldr	r3, [r0, #0]
 801140c:	3301      	adds	r3, #1
 801140e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011412:	b914      	cbnz	r4, 801141a <__match+0x12>
 8011414:	6003      	str	r3, [r0, #0]
 8011416:	2001      	movs	r0, #1
 8011418:	bd30      	pop	{r4, r5, pc}
 801141a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801141e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011422:	2d19      	cmp	r5, #25
 8011424:	bf98      	it	ls
 8011426:	3220      	addls	r2, #32
 8011428:	42a2      	cmp	r2, r4
 801142a:	d0f0      	beq.n	801140e <__match+0x6>
 801142c:	2000      	movs	r0, #0
 801142e:	e7f3      	b.n	8011418 <__match+0x10>

08011430 <__hexnan>:
 8011430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011434:	680b      	ldr	r3, [r1, #0]
 8011436:	6801      	ldr	r1, [r0, #0]
 8011438:	115e      	asrs	r6, r3, #5
 801143a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801143e:	f013 031f 	ands.w	r3, r3, #31
 8011442:	b087      	sub	sp, #28
 8011444:	bf18      	it	ne
 8011446:	3604      	addne	r6, #4
 8011448:	2500      	movs	r5, #0
 801144a:	1f37      	subs	r7, r6, #4
 801144c:	4682      	mov	sl, r0
 801144e:	4690      	mov	r8, r2
 8011450:	9301      	str	r3, [sp, #4]
 8011452:	f846 5c04 	str.w	r5, [r6, #-4]
 8011456:	46b9      	mov	r9, r7
 8011458:	463c      	mov	r4, r7
 801145a:	9502      	str	r5, [sp, #8]
 801145c:	46ab      	mov	fp, r5
 801145e:	784a      	ldrb	r2, [r1, #1]
 8011460:	1c4b      	adds	r3, r1, #1
 8011462:	9303      	str	r3, [sp, #12]
 8011464:	b342      	cbz	r2, 80114b8 <__hexnan+0x88>
 8011466:	4610      	mov	r0, r2
 8011468:	9105      	str	r1, [sp, #20]
 801146a:	9204      	str	r2, [sp, #16]
 801146c:	f7ff fd94 	bl	8010f98 <__hexdig_fun>
 8011470:	2800      	cmp	r0, #0
 8011472:	d151      	bne.n	8011518 <__hexnan+0xe8>
 8011474:	9a04      	ldr	r2, [sp, #16]
 8011476:	9905      	ldr	r1, [sp, #20]
 8011478:	2a20      	cmp	r2, #32
 801147a:	d818      	bhi.n	80114ae <__hexnan+0x7e>
 801147c:	9b02      	ldr	r3, [sp, #8]
 801147e:	459b      	cmp	fp, r3
 8011480:	dd13      	ble.n	80114aa <__hexnan+0x7a>
 8011482:	454c      	cmp	r4, r9
 8011484:	d206      	bcs.n	8011494 <__hexnan+0x64>
 8011486:	2d07      	cmp	r5, #7
 8011488:	dc04      	bgt.n	8011494 <__hexnan+0x64>
 801148a:	462a      	mov	r2, r5
 801148c:	4649      	mov	r1, r9
 801148e:	4620      	mov	r0, r4
 8011490:	f7ff ffa8 	bl	80113e4 <L_shift>
 8011494:	4544      	cmp	r4, r8
 8011496:	d952      	bls.n	801153e <__hexnan+0x10e>
 8011498:	2300      	movs	r3, #0
 801149a:	f1a4 0904 	sub.w	r9, r4, #4
 801149e:	f844 3c04 	str.w	r3, [r4, #-4]
 80114a2:	f8cd b008 	str.w	fp, [sp, #8]
 80114a6:	464c      	mov	r4, r9
 80114a8:	461d      	mov	r5, r3
 80114aa:	9903      	ldr	r1, [sp, #12]
 80114ac:	e7d7      	b.n	801145e <__hexnan+0x2e>
 80114ae:	2a29      	cmp	r2, #41	@ 0x29
 80114b0:	d157      	bne.n	8011562 <__hexnan+0x132>
 80114b2:	3102      	adds	r1, #2
 80114b4:	f8ca 1000 	str.w	r1, [sl]
 80114b8:	f1bb 0f00 	cmp.w	fp, #0
 80114bc:	d051      	beq.n	8011562 <__hexnan+0x132>
 80114be:	454c      	cmp	r4, r9
 80114c0:	d206      	bcs.n	80114d0 <__hexnan+0xa0>
 80114c2:	2d07      	cmp	r5, #7
 80114c4:	dc04      	bgt.n	80114d0 <__hexnan+0xa0>
 80114c6:	462a      	mov	r2, r5
 80114c8:	4649      	mov	r1, r9
 80114ca:	4620      	mov	r0, r4
 80114cc:	f7ff ff8a 	bl	80113e4 <L_shift>
 80114d0:	4544      	cmp	r4, r8
 80114d2:	d936      	bls.n	8011542 <__hexnan+0x112>
 80114d4:	f1a8 0204 	sub.w	r2, r8, #4
 80114d8:	4623      	mov	r3, r4
 80114da:	f853 1b04 	ldr.w	r1, [r3], #4
 80114de:	f842 1f04 	str.w	r1, [r2, #4]!
 80114e2:	429f      	cmp	r7, r3
 80114e4:	d2f9      	bcs.n	80114da <__hexnan+0xaa>
 80114e6:	1b3b      	subs	r3, r7, r4
 80114e8:	f023 0303 	bic.w	r3, r3, #3
 80114ec:	3304      	adds	r3, #4
 80114ee:	3401      	adds	r4, #1
 80114f0:	3e03      	subs	r6, #3
 80114f2:	42b4      	cmp	r4, r6
 80114f4:	bf88      	it	hi
 80114f6:	2304      	movhi	r3, #4
 80114f8:	4443      	add	r3, r8
 80114fa:	2200      	movs	r2, #0
 80114fc:	f843 2b04 	str.w	r2, [r3], #4
 8011500:	429f      	cmp	r7, r3
 8011502:	d2fb      	bcs.n	80114fc <__hexnan+0xcc>
 8011504:	683b      	ldr	r3, [r7, #0]
 8011506:	b91b      	cbnz	r3, 8011510 <__hexnan+0xe0>
 8011508:	4547      	cmp	r7, r8
 801150a:	d128      	bne.n	801155e <__hexnan+0x12e>
 801150c:	2301      	movs	r3, #1
 801150e:	603b      	str	r3, [r7, #0]
 8011510:	2005      	movs	r0, #5
 8011512:	b007      	add	sp, #28
 8011514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011518:	3501      	adds	r5, #1
 801151a:	2d08      	cmp	r5, #8
 801151c:	f10b 0b01 	add.w	fp, fp, #1
 8011520:	dd06      	ble.n	8011530 <__hexnan+0x100>
 8011522:	4544      	cmp	r4, r8
 8011524:	d9c1      	bls.n	80114aa <__hexnan+0x7a>
 8011526:	2300      	movs	r3, #0
 8011528:	f844 3c04 	str.w	r3, [r4, #-4]
 801152c:	2501      	movs	r5, #1
 801152e:	3c04      	subs	r4, #4
 8011530:	6822      	ldr	r2, [r4, #0]
 8011532:	f000 000f 	and.w	r0, r0, #15
 8011536:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801153a:	6020      	str	r0, [r4, #0]
 801153c:	e7b5      	b.n	80114aa <__hexnan+0x7a>
 801153e:	2508      	movs	r5, #8
 8011540:	e7b3      	b.n	80114aa <__hexnan+0x7a>
 8011542:	9b01      	ldr	r3, [sp, #4]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d0dd      	beq.n	8011504 <__hexnan+0xd4>
 8011548:	f1c3 0320 	rsb	r3, r3, #32
 801154c:	f04f 32ff 	mov.w	r2, #4294967295
 8011550:	40da      	lsrs	r2, r3
 8011552:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011556:	4013      	ands	r3, r2
 8011558:	f846 3c04 	str.w	r3, [r6, #-4]
 801155c:	e7d2      	b.n	8011504 <__hexnan+0xd4>
 801155e:	3f04      	subs	r7, #4
 8011560:	e7d0      	b.n	8011504 <__hexnan+0xd4>
 8011562:	2004      	movs	r0, #4
 8011564:	e7d5      	b.n	8011512 <__hexnan+0xe2>

08011566 <__ascii_mbtowc>:
 8011566:	b082      	sub	sp, #8
 8011568:	b901      	cbnz	r1, 801156c <__ascii_mbtowc+0x6>
 801156a:	a901      	add	r1, sp, #4
 801156c:	b142      	cbz	r2, 8011580 <__ascii_mbtowc+0x1a>
 801156e:	b14b      	cbz	r3, 8011584 <__ascii_mbtowc+0x1e>
 8011570:	7813      	ldrb	r3, [r2, #0]
 8011572:	600b      	str	r3, [r1, #0]
 8011574:	7812      	ldrb	r2, [r2, #0]
 8011576:	1e10      	subs	r0, r2, #0
 8011578:	bf18      	it	ne
 801157a:	2001      	movne	r0, #1
 801157c:	b002      	add	sp, #8
 801157e:	4770      	bx	lr
 8011580:	4610      	mov	r0, r2
 8011582:	e7fb      	b.n	801157c <__ascii_mbtowc+0x16>
 8011584:	f06f 0001 	mvn.w	r0, #1
 8011588:	e7f8      	b.n	801157c <__ascii_mbtowc+0x16>

0801158a <_realloc_r>:
 801158a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801158e:	4607      	mov	r7, r0
 8011590:	4614      	mov	r4, r2
 8011592:	460d      	mov	r5, r1
 8011594:	b921      	cbnz	r1, 80115a0 <_realloc_r+0x16>
 8011596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801159a:	4611      	mov	r1, r2
 801159c:	f7fd bca0 	b.w	800eee0 <_malloc_r>
 80115a0:	b92a      	cbnz	r2, 80115ae <_realloc_r+0x24>
 80115a2:	f7fd fc29 	bl	800edf8 <_free_r>
 80115a6:	4625      	mov	r5, r4
 80115a8:	4628      	mov	r0, r5
 80115aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115ae:	f000 f8b2 	bl	8011716 <_malloc_usable_size_r>
 80115b2:	4284      	cmp	r4, r0
 80115b4:	4606      	mov	r6, r0
 80115b6:	d802      	bhi.n	80115be <_realloc_r+0x34>
 80115b8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80115bc:	d8f4      	bhi.n	80115a8 <_realloc_r+0x1e>
 80115be:	4621      	mov	r1, r4
 80115c0:	4638      	mov	r0, r7
 80115c2:	f7fd fc8d 	bl	800eee0 <_malloc_r>
 80115c6:	4680      	mov	r8, r0
 80115c8:	b908      	cbnz	r0, 80115ce <_realloc_r+0x44>
 80115ca:	4645      	mov	r5, r8
 80115cc:	e7ec      	b.n	80115a8 <_realloc_r+0x1e>
 80115ce:	42b4      	cmp	r4, r6
 80115d0:	4622      	mov	r2, r4
 80115d2:	4629      	mov	r1, r5
 80115d4:	bf28      	it	cs
 80115d6:	4632      	movcs	r2, r6
 80115d8:	f7fc fd9f 	bl	800e11a <memcpy>
 80115dc:	4629      	mov	r1, r5
 80115de:	4638      	mov	r0, r7
 80115e0:	f7fd fc0a 	bl	800edf8 <_free_r>
 80115e4:	e7f1      	b.n	80115ca <_realloc_r+0x40>

080115e6 <__ascii_wctomb>:
 80115e6:	4603      	mov	r3, r0
 80115e8:	4608      	mov	r0, r1
 80115ea:	b141      	cbz	r1, 80115fe <__ascii_wctomb+0x18>
 80115ec:	2aff      	cmp	r2, #255	@ 0xff
 80115ee:	d904      	bls.n	80115fa <__ascii_wctomb+0x14>
 80115f0:	228a      	movs	r2, #138	@ 0x8a
 80115f2:	601a      	str	r2, [r3, #0]
 80115f4:	f04f 30ff 	mov.w	r0, #4294967295
 80115f8:	4770      	bx	lr
 80115fa:	700a      	strb	r2, [r1, #0]
 80115fc:	2001      	movs	r0, #1
 80115fe:	4770      	bx	lr

08011600 <__swhatbuf_r>:
 8011600:	b570      	push	{r4, r5, r6, lr}
 8011602:	460c      	mov	r4, r1
 8011604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011608:	2900      	cmp	r1, #0
 801160a:	b096      	sub	sp, #88	@ 0x58
 801160c:	4615      	mov	r5, r2
 801160e:	461e      	mov	r6, r3
 8011610:	da0d      	bge.n	801162e <__swhatbuf_r+0x2e>
 8011612:	89a3      	ldrh	r3, [r4, #12]
 8011614:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011618:	f04f 0100 	mov.w	r1, #0
 801161c:	bf14      	ite	ne
 801161e:	2340      	movne	r3, #64	@ 0x40
 8011620:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011624:	2000      	movs	r0, #0
 8011626:	6031      	str	r1, [r6, #0]
 8011628:	602b      	str	r3, [r5, #0]
 801162a:	b016      	add	sp, #88	@ 0x58
 801162c:	bd70      	pop	{r4, r5, r6, pc}
 801162e:	466a      	mov	r2, sp
 8011630:	f000 f848 	bl	80116c4 <_fstat_r>
 8011634:	2800      	cmp	r0, #0
 8011636:	dbec      	blt.n	8011612 <__swhatbuf_r+0x12>
 8011638:	9901      	ldr	r1, [sp, #4]
 801163a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801163e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011642:	4259      	negs	r1, r3
 8011644:	4159      	adcs	r1, r3
 8011646:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801164a:	e7eb      	b.n	8011624 <__swhatbuf_r+0x24>

0801164c <__smakebuf_r>:
 801164c:	898b      	ldrh	r3, [r1, #12]
 801164e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011650:	079d      	lsls	r5, r3, #30
 8011652:	4606      	mov	r6, r0
 8011654:	460c      	mov	r4, r1
 8011656:	d507      	bpl.n	8011668 <__smakebuf_r+0x1c>
 8011658:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801165c:	6023      	str	r3, [r4, #0]
 801165e:	6123      	str	r3, [r4, #16]
 8011660:	2301      	movs	r3, #1
 8011662:	6163      	str	r3, [r4, #20]
 8011664:	b003      	add	sp, #12
 8011666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011668:	ab01      	add	r3, sp, #4
 801166a:	466a      	mov	r2, sp
 801166c:	f7ff ffc8 	bl	8011600 <__swhatbuf_r>
 8011670:	9f00      	ldr	r7, [sp, #0]
 8011672:	4605      	mov	r5, r0
 8011674:	4639      	mov	r1, r7
 8011676:	4630      	mov	r0, r6
 8011678:	f7fd fc32 	bl	800eee0 <_malloc_r>
 801167c:	b948      	cbnz	r0, 8011692 <__smakebuf_r+0x46>
 801167e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011682:	059a      	lsls	r2, r3, #22
 8011684:	d4ee      	bmi.n	8011664 <__smakebuf_r+0x18>
 8011686:	f023 0303 	bic.w	r3, r3, #3
 801168a:	f043 0302 	orr.w	r3, r3, #2
 801168e:	81a3      	strh	r3, [r4, #12]
 8011690:	e7e2      	b.n	8011658 <__smakebuf_r+0xc>
 8011692:	89a3      	ldrh	r3, [r4, #12]
 8011694:	6020      	str	r0, [r4, #0]
 8011696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801169a:	81a3      	strh	r3, [r4, #12]
 801169c:	9b01      	ldr	r3, [sp, #4]
 801169e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80116a2:	b15b      	cbz	r3, 80116bc <__smakebuf_r+0x70>
 80116a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80116a8:	4630      	mov	r0, r6
 80116aa:	f000 f81d 	bl	80116e8 <_isatty_r>
 80116ae:	b128      	cbz	r0, 80116bc <__smakebuf_r+0x70>
 80116b0:	89a3      	ldrh	r3, [r4, #12]
 80116b2:	f023 0303 	bic.w	r3, r3, #3
 80116b6:	f043 0301 	orr.w	r3, r3, #1
 80116ba:	81a3      	strh	r3, [r4, #12]
 80116bc:	89a3      	ldrh	r3, [r4, #12]
 80116be:	431d      	orrs	r5, r3
 80116c0:	81a5      	strh	r5, [r4, #12]
 80116c2:	e7cf      	b.n	8011664 <__smakebuf_r+0x18>

080116c4 <_fstat_r>:
 80116c4:	b538      	push	{r3, r4, r5, lr}
 80116c6:	4d07      	ldr	r5, [pc, #28]	@ (80116e4 <_fstat_r+0x20>)
 80116c8:	2300      	movs	r3, #0
 80116ca:	4604      	mov	r4, r0
 80116cc:	4608      	mov	r0, r1
 80116ce:	4611      	mov	r1, r2
 80116d0:	602b      	str	r3, [r5, #0]
 80116d2:	f7f1 fab7 	bl	8002c44 <_fstat>
 80116d6:	1c43      	adds	r3, r0, #1
 80116d8:	d102      	bne.n	80116e0 <_fstat_r+0x1c>
 80116da:	682b      	ldr	r3, [r5, #0]
 80116dc:	b103      	cbz	r3, 80116e0 <_fstat_r+0x1c>
 80116de:	6023      	str	r3, [r4, #0]
 80116e0:	bd38      	pop	{r3, r4, r5, pc}
 80116e2:	bf00      	nop
 80116e4:	20002278 	.word	0x20002278

080116e8 <_isatty_r>:
 80116e8:	b538      	push	{r3, r4, r5, lr}
 80116ea:	4d06      	ldr	r5, [pc, #24]	@ (8011704 <_isatty_r+0x1c>)
 80116ec:	2300      	movs	r3, #0
 80116ee:	4604      	mov	r4, r0
 80116f0:	4608      	mov	r0, r1
 80116f2:	602b      	str	r3, [r5, #0]
 80116f4:	f7f1 fab6 	bl	8002c64 <_isatty>
 80116f8:	1c43      	adds	r3, r0, #1
 80116fa:	d102      	bne.n	8011702 <_isatty_r+0x1a>
 80116fc:	682b      	ldr	r3, [r5, #0]
 80116fe:	b103      	cbz	r3, 8011702 <_isatty_r+0x1a>
 8011700:	6023      	str	r3, [r4, #0]
 8011702:	bd38      	pop	{r3, r4, r5, pc}
 8011704:	20002278 	.word	0x20002278

08011708 <abort>:
 8011708:	b508      	push	{r3, lr}
 801170a:	2006      	movs	r0, #6
 801170c:	f000 f834 	bl	8011778 <raise>
 8011710:	2001      	movs	r0, #1
 8011712:	f7f1 fa47 	bl	8002ba4 <_exit>

08011716 <_malloc_usable_size_r>:
 8011716:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801171a:	1f18      	subs	r0, r3, #4
 801171c:	2b00      	cmp	r3, #0
 801171e:	bfbc      	itt	lt
 8011720:	580b      	ldrlt	r3, [r1, r0]
 8011722:	18c0      	addlt	r0, r0, r3
 8011724:	4770      	bx	lr

08011726 <_raise_r>:
 8011726:	291f      	cmp	r1, #31
 8011728:	b538      	push	{r3, r4, r5, lr}
 801172a:	4605      	mov	r5, r0
 801172c:	460c      	mov	r4, r1
 801172e:	d904      	bls.n	801173a <_raise_r+0x14>
 8011730:	2316      	movs	r3, #22
 8011732:	6003      	str	r3, [r0, #0]
 8011734:	f04f 30ff 	mov.w	r0, #4294967295
 8011738:	bd38      	pop	{r3, r4, r5, pc}
 801173a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801173c:	b112      	cbz	r2, 8011744 <_raise_r+0x1e>
 801173e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011742:	b94b      	cbnz	r3, 8011758 <_raise_r+0x32>
 8011744:	4628      	mov	r0, r5
 8011746:	f000 f831 	bl	80117ac <_getpid_r>
 801174a:	4622      	mov	r2, r4
 801174c:	4601      	mov	r1, r0
 801174e:	4628      	mov	r0, r5
 8011750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011754:	f000 b818 	b.w	8011788 <_kill_r>
 8011758:	2b01      	cmp	r3, #1
 801175a:	d00a      	beq.n	8011772 <_raise_r+0x4c>
 801175c:	1c59      	adds	r1, r3, #1
 801175e:	d103      	bne.n	8011768 <_raise_r+0x42>
 8011760:	2316      	movs	r3, #22
 8011762:	6003      	str	r3, [r0, #0]
 8011764:	2001      	movs	r0, #1
 8011766:	e7e7      	b.n	8011738 <_raise_r+0x12>
 8011768:	2100      	movs	r1, #0
 801176a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801176e:	4620      	mov	r0, r4
 8011770:	4798      	blx	r3
 8011772:	2000      	movs	r0, #0
 8011774:	e7e0      	b.n	8011738 <_raise_r+0x12>
	...

08011778 <raise>:
 8011778:	4b02      	ldr	r3, [pc, #8]	@ (8011784 <raise+0xc>)
 801177a:	4601      	mov	r1, r0
 801177c:	6818      	ldr	r0, [r3, #0]
 801177e:	f7ff bfd2 	b.w	8011726 <_raise_r>
 8011782:	bf00      	nop
 8011784:	20000190 	.word	0x20000190

08011788 <_kill_r>:
 8011788:	b538      	push	{r3, r4, r5, lr}
 801178a:	4d07      	ldr	r5, [pc, #28]	@ (80117a8 <_kill_r+0x20>)
 801178c:	2300      	movs	r3, #0
 801178e:	4604      	mov	r4, r0
 8011790:	4608      	mov	r0, r1
 8011792:	4611      	mov	r1, r2
 8011794:	602b      	str	r3, [r5, #0]
 8011796:	f7f1 f9f5 	bl	8002b84 <_kill>
 801179a:	1c43      	adds	r3, r0, #1
 801179c:	d102      	bne.n	80117a4 <_kill_r+0x1c>
 801179e:	682b      	ldr	r3, [r5, #0]
 80117a0:	b103      	cbz	r3, 80117a4 <_kill_r+0x1c>
 80117a2:	6023      	str	r3, [r4, #0]
 80117a4:	bd38      	pop	{r3, r4, r5, pc}
 80117a6:	bf00      	nop
 80117a8:	20002278 	.word	0x20002278

080117ac <_getpid_r>:
 80117ac:	f7f1 b9e2 	b.w	8002b74 <_getpid>

080117b0 <_init>:
 80117b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117b2:	bf00      	nop
 80117b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80117b6:	bc08      	pop	{r3}
 80117b8:	469e      	mov	lr, r3
 80117ba:	4770      	bx	lr

080117bc <_fini>:
 80117bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117be:	bf00      	nop
 80117c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80117c2:	bc08      	pop	{r3}
 80117c4:	469e      	mov	lr, r3
 80117c6:	4770      	bx	lr
