
BalanceBot3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011010  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  080111f0  080111f0  000121f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080116c8  080116c8  0001334c  2**0
                  CONTENTS
  4 .ARM          00000008  080116c8  080116c8  000126c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080116d0  080116d0  0001334c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080116d0  080116d0  000126d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080116d4  080116d4  000126d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  080116d8  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f28  2000034c  08011a24  0001334c  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  20002274  08011a24  00014274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001334c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002428e  00000000  00000000  0001337c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004aa0  00000000  00000000  0003760a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f10  00000000  00000000  0003c0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017e7  00000000  00000000  0003dfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007842  00000000  00000000  0003f7a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024dc5  00000000  00000000  00046fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5d87  00000000  00000000  0006bdae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00161b35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a7c  00000000  00000000  00161b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0016b5f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000034c 	.word	0x2000034c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080111d8 	.word	0x080111d8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000350 	.word	0x20000350
 800021c:	080111d8 	.word	0x080111d8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9be 	b.w	800106c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	468e      	mov	lr, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4688      	mov	r8, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d962      	bls.n	8000e50 <__udivmoddi4+0xdc>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	b14e      	cbz	r6, 8000da4 <__udivmoddi4+0x30>
 8000d90:	f1c6 0320 	rsb	r3, r6, #32
 8000d94:	fa01 f806 	lsl.w	r8, r1, r6
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	40b7      	lsls	r7, r6
 8000d9e:	ea43 0808 	orr.w	r8, r3, r8
 8000da2:	40b4      	lsls	r4, r6
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	fa1f fc87 	uxth.w	ip, r7
 8000dac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fb01 f20c 	mul.w	r2, r1, ip
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dc8:	f080 80ea 	bcs.w	8000fa0 <__udivmoddi4+0x22c>
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f240 80e7 	bls.w	8000fa0 <__udivmoddi4+0x22c>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	443b      	add	r3, r7
 8000dd6:	1a9a      	subs	r2, r3, r2
 8000dd8:	b2a3      	uxth	r3, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dea:	459c      	cmp	ip, r3
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0x8e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df4:	f080 80d6 	bcs.w	8000fa4 <__udivmoddi4+0x230>
 8000df8:	459c      	cmp	ip, r3
 8000dfa:	f240 80d3 	bls.w	8000fa4 <__udivmoddi4+0x230>
 8000dfe:	443b      	add	r3, r7
 8000e00:	3802      	subs	r0, #2
 8000e02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e06:	eba3 030c 	sub.w	r3, r3, ip
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11d      	cbz	r5, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40f3      	lsrs	r3, r6
 8000e10:	2200      	movs	r2, #0
 8000e12:	e9c5 3200 	strd	r3, r2, [r5]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d905      	bls.n	8000e2a <__udivmoddi4+0xb6>
 8000e1e:	b10d      	cbz	r5, 8000e24 <__udivmoddi4+0xb0>
 8000e20:	e9c5 0100 	strd	r0, r1, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4608      	mov	r0, r1
 8000e28:	e7f5      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e2a:	fab3 f183 	clz	r1, r3
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d146      	bne.n	8000ec0 <__udivmoddi4+0x14c>
 8000e32:	4573      	cmp	r3, lr
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xc8>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 8105 	bhi.w	8001046 <__udivmoddi4+0x2d2>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	4690      	mov	r8, r2
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e5      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e4e:	e7e2      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	f000 8090 	beq.w	8000f76 <__udivmoddi4+0x202>
 8000e56:	fab2 f682 	clz	r6, r2
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	f040 80a4 	bne.w	8000fa8 <__udivmoddi4+0x234>
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x11e>
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x11c>
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	f200 80e0 	bhi.w	8001050 <__udivmoddi4+0x2dc>
 8000e90:	46c4      	mov	ip, r8
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea0:	fb02 f404 	mul.w	r4, r2, r4
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x144>
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x142>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f200 80ca 	bhi.w	800104a <__udivmoddi4+0x2d6>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ebe:	e7a5      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ec0:	f1c1 0620 	rsb	r6, r1, #32
 8000ec4:	408b      	lsls	r3, r1
 8000ec6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eca:	431f      	orrs	r7, r3
 8000ecc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ed0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ed4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000edc:	4323      	orrs	r3, r4
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	fa1f fc87 	uxth.w	ip, r7
 8000ee6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eea:	0c1c      	lsrs	r4, r3, #16
 8000eec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ef0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ef4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x1a0>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f06:	f080 809c 	bcs.w	8001042 <__udivmoddi4+0x2ce>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f240 8099 	bls.w	8001042 <__udivmoddi4+0x2ce>
 8000f10:	3802      	subs	r0, #2
 8000f12:	443c      	add	r4, r7
 8000f14:	eba4 040e 	sub.w	r4, r4, lr
 8000f18:	fa1f fe83 	uxth.w	lr, r3
 8000f1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f20:	fb09 4413 	mls	r4, r9, r3, r4
 8000f24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f2c:	45a4      	cmp	ip, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x1ce>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f36:	f080 8082 	bcs.w	800103e <__udivmoddi4+0x2ca>
 8000f3a:	45a4      	cmp	ip, r4
 8000f3c:	d97f      	bls.n	800103e <__udivmoddi4+0x2ca>
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	443c      	add	r4, r7
 8000f42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f46:	eba4 040c 	sub.w	r4, r4, ip
 8000f4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f4e:	4564      	cmp	r4, ip
 8000f50:	4673      	mov	r3, lr
 8000f52:	46e1      	mov	r9, ip
 8000f54:	d362      	bcc.n	800101c <__udivmoddi4+0x2a8>
 8000f56:	d05f      	beq.n	8001018 <__udivmoddi4+0x2a4>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x1fe>
 8000f5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f62:	fa04 f606 	lsl.w	r6, r4, r6
 8000f66:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f72:	2100      	movs	r1, #0
 8000f74:	e74f      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000f76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7a:	0c01      	lsrs	r1, r0, #16
 8000f7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f80:	b280      	uxth	r0, r0
 8000f82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f86:	463b      	mov	r3, r7
 8000f88:	4638      	mov	r0, r7
 8000f8a:	463c      	mov	r4, r7
 8000f8c:	46b8      	mov	r8, r7
 8000f8e:	46be      	mov	lr, r7
 8000f90:	2620      	movs	r6, #32
 8000f92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f96:	eba2 0208 	sub.w	r2, r2, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e766      	b.n	8000e6e <__udivmoddi4+0xfa>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	e718      	b.n	8000dd6 <__udivmoddi4+0x62>
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	e72c      	b.n	8000e02 <__udivmoddi4+0x8e>
 8000fa8:	f1c6 0220 	rsb	r2, r6, #32
 8000fac:	fa2e f302 	lsr.w	r3, lr, r2
 8000fb0:	40b7      	lsls	r7, r6
 8000fb2:	40b1      	lsls	r1, r6
 8000fb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fc2:	b2bc      	uxth	r4, r7
 8000fc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc8:	0c11      	lsrs	r1, r2, #16
 8000fca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fce:	fb08 f904 	mul.w	r9, r8, r4
 8000fd2:	40b0      	lsls	r0, r6
 8000fd4:	4589      	cmp	r9, r1
 8000fd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fda:	b280      	uxth	r0, r0
 8000fdc:	d93e      	bls.n	800105c <__udivmoddi4+0x2e8>
 8000fde:	1879      	adds	r1, r7, r1
 8000fe0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fe4:	d201      	bcs.n	8000fea <__udivmoddi4+0x276>
 8000fe6:	4589      	cmp	r9, r1
 8000fe8:	d81f      	bhi.n	800102a <__udivmoddi4+0x2b6>
 8000fea:	eba1 0109 	sub.w	r1, r1, r9
 8000fee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff2:	fb09 f804 	mul.w	r8, r9, r4
 8000ff6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	4542      	cmp	r2, r8
 8001002:	d229      	bcs.n	8001058 <__udivmoddi4+0x2e4>
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	f109 31ff 	add.w	r1, r9, #4294967295
 800100a:	d2c4      	bcs.n	8000f96 <__udivmoddi4+0x222>
 800100c:	4542      	cmp	r2, r8
 800100e:	d2c2      	bcs.n	8000f96 <__udivmoddi4+0x222>
 8001010:	f1a9 0102 	sub.w	r1, r9, #2
 8001014:	443a      	add	r2, r7
 8001016:	e7be      	b.n	8000f96 <__udivmoddi4+0x222>
 8001018:	45f0      	cmp	r8, lr
 800101a:	d29d      	bcs.n	8000f58 <__udivmoddi4+0x1e4>
 800101c:	ebbe 0302 	subs.w	r3, lr, r2
 8001020:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001024:	3801      	subs	r0, #1
 8001026:	46e1      	mov	r9, ip
 8001028:	e796      	b.n	8000f58 <__udivmoddi4+0x1e4>
 800102a:	eba7 0909 	sub.w	r9, r7, r9
 800102e:	4449      	add	r1, r9
 8001030:	f1a8 0c02 	sub.w	ip, r8, #2
 8001034:	fbb1 f9fe 	udiv	r9, r1, lr
 8001038:	fb09 f804 	mul.w	r8, r9, r4
 800103c:	e7db      	b.n	8000ff6 <__udivmoddi4+0x282>
 800103e:	4673      	mov	r3, lr
 8001040:	e77f      	b.n	8000f42 <__udivmoddi4+0x1ce>
 8001042:	4650      	mov	r0, sl
 8001044:	e766      	b.n	8000f14 <__udivmoddi4+0x1a0>
 8001046:	4608      	mov	r0, r1
 8001048:	e6fd      	b.n	8000e46 <__udivmoddi4+0xd2>
 800104a:	443b      	add	r3, r7
 800104c:	3a02      	subs	r2, #2
 800104e:	e733      	b.n	8000eb8 <__udivmoddi4+0x144>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	443b      	add	r3, r7
 8001056:	e71c      	b.n	8000e92 <__udivmoddi4+0x11e>
 8001058:	4649      	mov	r1, r9
 800105a:	e79c      	b.n	8000f96 <__udivmoddi4+0x222>
 800105c:	eba1 0109 	sub.w	r1, r1, r9
 8001060:	46c4      	mov	ip, r8
 8001062:	fbb1 f9fe 	udiv	r9, r1, lr
 8001066:	fb09 f804 	mul.w	r8, r9, r4
 800106a:	e7c4      	b.n	8000ff6 <__udivmoddi4+0x282>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	b5b0      	push	{r4, r5, r7, lr}
 8001072:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001076:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001078:	f001 fc7b 	bl	8002972 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107c:	f000 f994 	bl	80013a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001080:	f000 fd66 	bl	8001b50 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001084:	f000 fbae 	bl	80017e4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001088:	f000 fcca 	bl	8001a20 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800108c:	f000 fd14 	bl	8001ab8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001090:	f000 fac8 	bl	8001624 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001094:	f000 fb04 	bl	80016a0 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001098:	f000 fc0a 	bl	80018b0 <MX_TIM8_Init>
  MX_FDCAN1_Init();
 800109c:	f000 fa36 	bl	800150c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80010a0:	f000 fa7a 	bl	8001598 <MX_FDCAN2_Init>
  MX_ADC2_Init();
 80010a4:	f000 f9cc 	bl	8001440 <MX_ADC2_Init>
  MX_USB_Device_Init();
 80010a8:	f00b f836 	bl	800c118 <MX_USB_Device_Init>


  /*
   *  Servo motors
   */
  servo_t servo1 = Servo_newMG90S(&htim1, TIM_CHANNEL_2);
 80010ac:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 80010b0:	2204      	movs	r2, #4
 80010b2:	49b5      	ldr	r1, [pc, #724]	@ (8001388 <main+0x318>)
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 fe03 	bl	8001cc0 <Servo_newMG90S>
  servo_t servo2 = Servo_newMG90S(&htim1, TIM_CHANNEL_1);
 80010ba:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80010be:	2200      	movs	r2, #0
 80010c0:	49b1      	ldr	r1, [pc, #708]	@ (8001388 <main+0x318>)
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 fdfc 	bl	8001cc0 <Servo_newMG90S>
  servo_t servo3 = Servo_newMG90S(&htim8, TIM_CHANNEL_4);
 80010c8:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 80010cc:	220c      	movs	r2, #12
 80010ce:	49af      	ldr	r1, [pc, #700]	@ (800138c <main+0x31c>)
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 fdf5 	bl	8001cc0 <Servo_newMG90S>
  servo_t servo4 = Servo_newMG90S(&htim8, TIM_CHANNEL_3);
 80010d6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80010da:	2208      	movs	r2, #8
 80010dc:	49ab      	ldr	r1, [pc, #684]	@ (800138c <main+0x31c>)
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 fdee 	bl	8001cc0 <Servo_newMG90S>
  servo_t servo5 = Servo_newMG90S(&htim8, TIM_CHANNEL_2);
 80010e4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80010e8:	2204      	movs	r2, #4
 80010ea:	49a8      	ldr	r1, [pc, #672]	@ (800138c <main+0x31c>)
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 fde7 	bl	8001cc0 <Servo_newMG90S>
  servo_t servo6 = Servo_newMG90S(&htim8, TIM_CHANNEL_1);
 80010f2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80010f6:	2200      	movs	r2, #0
 80010f8:	49a4      	ldr	r1, [pc, #656]	@ (800138c <main+0x31c>)
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 fde0 	bl	8001cc0 <Servo_newMG90S>

  /**
   *  RGB LEDs
   */
  rgb_t rgb1 = {
 8001100:	4ba3      	ldr	r3, [pc, #652]	@ (8001390 <main+0x320>)
 8001102:	f507 7486 	add.w	r4, r7, #268	@ 0x10c
 8001106:	461d      	mov	r5, r3
 8001108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800110a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800110c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001110:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	.b_pin = LED1_B_Pin,
	.b_port = LED1_B_GPIO_Port,
	.currentState = RGB_OFF,
	.activeState = 1
  };
  rgb_t rgb2 = {
 8001114:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800111c:	4a9d      	ldr	r2, [pc, #628]	@ (8001394 <main+0x324>)
 800111e:	461c      	mov	r4, r3
 8001120:	4615      	mov	r5, r2
 8001122:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001124:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001126:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800112a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    };

  /**
   * Stepper motor drivers
   */
  tmc2209_t rightMotor = tmc2209_new(
 800112e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001132:	f5a3 70c0 	sub.w	r0, r3, #384	@ 0x180
 8001136:	2301      	movs	r3, #1
 8001138:	9302      	str	r3, [sp, #8]
 800113a:	4b97      	ldr	r3, [pc, #604]	@ (8001398 <main+0x328>)
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2301      	movs	r3, #1
 8001146:	2204      	movs	r2, #4
 8001148:	4994      	ldr	r1, [pc, #592]	@ (800139c <main+0x32c>)
 800114a:	f001 fa17 	bl	800257c <tmc2209_new>
		  TIM_CHANNEL_2,
		  RIGHT_DIR_Pin,
		  RIGHT_DIR_GPIO_Port,
		  &huart1,
		  TMC2209_ADDR_1);
  tmc2209_t leftMotor = tmc2209_new(
 800114e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001152:	f5a3 70fc 	sub.w	r0, r3, #504	@ 0x1f8
 8001156:	2302      	movs	r3, #2
 8001158:	9302      	str	r3, [sp, #8]
 800115a:	4b8f      	ldr	r3, [pc, #572]	@ (8001398 <main+0x328>)
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2340      	movs	r3, #64	@ 0x40
 8001166:	2200      	movs	r2, #0
 8001168:	498c      	ldr	r1, [pc, #560]	@ (800139c <main+0x32c>)
 800116a:	f001 fa07 	bl	800257c <tmc2209_new>
  /*
   * Amber Status LEDs
   * 	- One LED toggles every iteration of the while loop
   * 	- The other toggles every i_MAX loops
   */
  HAL_GPIO_WritePin(STATUS_LED1_GPIO_Port, STATUS_LED1_Pin, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2104      	movs	r1, #4
 8001172:	488b      	ldr	r0, [pc, #556]	@ (80013a0 <main+0x330>)
 8001174:	f003 f8a6 	bl	80042c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STATUS_LED2_GPIO_Port, STATUS_LED2_Pin, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2108      	movs	r1, #8
 800117c:	4888      	ldr	r0, [pc, #544]	@ (80013a0 <main+0x330>)
 800117e:	f003 f8a1 	bl	80042c4 <HAL_GPIO_WritePin>
  uint8_t i = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	f887 31f7 	strb.w	r3, [r7, #503]	@ 0x1f7
  uint8_t i_MAX = 100;
 8001188:	2364      	movs	r3, #100	@ 0x64
 800118a:	f887 31f6 	strb.w	r3, [r7, #502]	@ 0x1f6

  // Delay to wait for USB to be ready
  // TODO wait until USB is ready for transmission, Note: CDC_Transit_FS returns success or failure
  HAL_Delay(250);
 800118e:	20fa      	movs	r0, #250	@ 0xfa
 8001190:	f001 fc60 	bl	8002a54 <HAL_Delay>


  /*
   * Start of infinite loop!
   */
  uint32_t increment = 1000;
 8001194:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001198:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
	   */
//	  /* Enable/Disable
	  // Use buttons to test functions
	  // Check buttons
	  uint8_t topPB, botPB, midPB;
	  topPB = HAL_GPIO_ReadPin(TOP_PB_GPIO_Port, TOP_PB_Pin);
 800119c:	2102      	movs	r1, #2
 800119e:	4881      	ldr	r0, [pc, #516]	@ (80013a4 <main+0x334>)
 80011a0:	f003 f878 	bl	8004294 <HAL_GPIO_ReadPin>
 80011a4:	4603      	mov	r3, r0
 80011a6:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
	  midPB = HAL_GPIO_ReadPin(MID_PB_GPIO_Port, MID_PB_Pin);
 80011aa:	2104      	movs	r1, #4
 80011ac:	487d      	ldr	r0, [pc, #500]	@ (80013a4 <main+0x334>)
 80011ae:	f003 f871 	bl	8004294 <HAL_GPIO_ReadPin>
 80011b2:	4603      	mov	r3, r0
 80011b4:	f887 31ee 	strb.w	r3, [r7, #494]	@ 0x1ee
	  botPB = HAL_GPIO_ReadPin(BOT_PB_GPIO_Port, BOT_PB_Pin);
 80011b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011bc:	4879      	ldr	r0, [pc, #484]	@ (80013a4 <main+0x334>)
 80011be:	f003 f869 	bl	8004294 <HAL_GPIO_ReadPin>
 80011c2:	4603      	mov	r3, r0
 80011c4:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed

	  if (topPB == PB_PRESSED)
 80011c8:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d152      	bne.n	8001276 <main+0x206>
////		  status = HAL_UART_Transmit(&huart2, msg, 6, 10);
//		  HAL_UART_Transmit(&huart1, msg, 6, 10);


		  // VACTUAL control
		  if (leftMotor.vactual > (TMC2209_VACTUAL_MAX_P - increment) ) {
 80011d0:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80011d4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80011d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80011da:	f8d7 11f0 	ldr.w	r1, [r7, #496]	@ 0x1f0
 80011de:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80011e2:	1a5b      	subs	r3, r3, r1
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d907      	bls.n	80011f8 <main+0x188>
			  leftMotor.vactual = TMC2209_VACTUAL_MAX_P;
 80011e8:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80011ec:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80011f0:	f06f 427e 	mvn.w	r2, #4261412864	@ 0xfe000000
 80011f4:	649a      	str	r2, [r3, #72]	@ 0x48
 80011f6:	e00c      	b.n	8001212 <main+0x1a2>
		  } else {
			  leftMotor.vactual = leftMotor.vactual + increment;
 80011f8:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80011fc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001200:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001202:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001206:	441a      	add	r2, r3
 8001208:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800120c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001210:	649a      	str	r2, [r3, #72]	@ 0x48
		  }
		  tmc2209_set_VACTUAL(&leftMotor);
 8001212:	463b      	mov	r3, r7
 8001214:	4618      	mov	r0, r3
 8001216:	f001 fad6 	bl	80027c6 <tmc2209_set_VACTUAL>

		  if (rightMotor.vactual > (TMC2209_VACTUAL_MAX_P - increment) ) {
 800121a:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800121e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001222:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001224:	f8d7 11f0 	ldr.w	r1, [r7, #496]	@ 0x1f0
 8001228:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800122c:	1a5b      	subs	r3, r3, r1
 800122e:	429a      	cmp	r2, r3
 8001230:	d907      	bls.n	8001242 <main+0x1d2>
			  rightMotor.vactual = TMC2209_VACTUAL_MAX_P;
 8001232:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001236:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800123a:	f06f 427e 	mvn.w	r2, #4261412864	@ 0xfe000000
 800123e:	649a      	str	r2, [r3, #72]	@ 0x48
 8001240:	e00c      	b.n	800125c <main+0x1ec>
		  } else {
			  rightMotor.vactual = rightMotor.vactual + increment;
 8001242:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001246:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800124a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800124c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001250:	441a      	add	r2, r3
 8001252:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001256:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800125a:	649a      	str	r2, [r3, #72]	@ 0x48
		  }
		  tmc2209_set_VACTUAL(&rightMotor);
 800125c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001260:	4618      	mov	r0, r3
 8001262:	f001 fab0 	bl	80027c6 <tmc2209_set_VACTUAL>
//		  tmc2209_on(&rightMotor);




		  while(HAL_GPIO_ReadPin(TOP_PB_GPIO_Port, TOP_PB_Pin) == PB_PRESSED);
 8001266:	bf00      	nop
 8001268:	2102      	movs	r1, #2
 800126a:	484e      	ldr	r0, [pc, #312]	@ (80013a4 <main+0x334>)
 800126c:	f003 f812 	bl	8004294 <HAL_GPIO_ReadPin>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f8      	beq.n	8001268 <main+0x1f8>
	  }
	  if (midPB == PB_PRESSED)
 8001276:	f897 31ee 	ldrb.w	r3, [r7, #494]	@ 0x1ee
 800127a:	2b00      	cmp	r3, #0
 800127c:	d14a      	bne.n	8001314 <main+0x2a4>
//		  status = HAL_UART_Transmit(&huart2, &data, 4, 10);
//		  HAL_UART_Transmit(&huart1, msg, 6, 10);


		  // VACTUAL control
		  if (leftMotor.vactual < increment ) {
 800127e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001282:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001288:	f8d7 21f0 	ldr.w	r2, [r7, #496]	@ 0x1f0
 800128c:	429a      	cmp	r2, r3
 800128e:	d906      	bls.n	800129e <main+0x22e>
			  leftMotor.vactual = 0x000000;
 8001290:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001294:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001298:	2200      	movs	r2, #0
 800129a:	649a      	str	r2, [r3, #72]	@ 0x48
 800129c:	e00c      	b.n	80012b8 <main+0x248>
		  } else {
			  leftMotor.vactual = leftMotor.vactual - increment;
 800129e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80012a2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80012a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80012a8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80012ac:	1ad2      	subs	r2, r2, r3
 80012ae:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80012b2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80012b6:	649a      	str	r2, [r3, #72]	@ 0x48
		  }
		  tmc2209_set_VACTUAL(&leftMotor);
 80012b8:	463b      	mov	r3, r7
 80012ba:	4618      	mov	r0, r3
 80012bc:	f001 fa83 	bl	80027c6 <tmc2209_set_VACTUAL>

		  if (rightMotor.vactual < increment ) {
 80012c0:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80012c4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80012c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012ca:	f8d7 21f0 	ldr.w	r2, [r7, #496]	@ 0x1f0
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d906      	bls.n	80012e0 <main+0x270>
			  rightMotor.vactual = 0x000000;
 80012d2:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80012d6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80012da:	2200      	movs	r2, #0
 80012dc:	649a      	str	r2, [r3, #72]	@ 0x48
 80012de:	e00c      	b.n	80012fa <main+0x28a>
		  } else {
			  rightMotor.vactual = rightMotor.vactual - increment;
 80012e0:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80012e4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80012e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80012ea:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80012ee:	1ad2      	subs	r2, r2, r3
 80012f0:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80012f4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80012f8:	649a      	str	r2, [r3, #72]	@ 0x48
		  }
		  tmc2209_set_VACTUAL(&rightMotor);
 80012fa:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80012fe:	4618      	mov	r0, r3
 8001300:	f001 fa61 	bl	80027c6 <tmc2209_set_VACTUAL>
		  // STEP / DIR control
//		  tmc2209_on(&leftMotor);



		  while(HAL_GPIO_ReadPin(MID_PB_GPIO_Port, MID_PB_Pin) == PB_PRESSED);
 8001304:	bf00      	nop
 8001306:	2104      	movs	r1, #4
 8001308:	4826      	ldr	r0, [pc, #152]	@ (80013a4 <main+0x334>)
 800130a:	f002 ffc3 	bl	8004294 <HAL_GPIO_ReadPin>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f8      	beq.n	8001306 <main+0x296>
	  }
	  if (botPB == PB_PRESSED)
 8001314:	f897 31ed 	ldrb.w	r3, [r7, #493]	@ 0x1ed
 8001318:	2b00      	cmp	r3, #0
 800131a:	d11d      	bne.n	8001358 <main+0x2e8>
//		  HAL_UART_Transmit(&huart1, msg, 18, 10);



		  // VACTUAL control
		  leftMotor.vactual = 0x00000000;
 800131c:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001320:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001324:	2200      	movs	r2, #0
 8001326:	649a      	str	r2, [r3, #72]	@ 0x48
		  rightMotor.vactual = 0x00000000;
 8001328:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800132c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001330:	2200      	movs	r2, #0
 8001332:	649a      	str	r2, [r3, #72]	@ 0x48
		  tmc2209_set_VACTUAL(&leftMotor);
 8001334:	463b      	mov	r3, r7
 8001336:	4618      	mov	r0, r3
 8001338:	f001 fa45 	bl	80027c6 <tmc2209_set_VACTUAL>
		  tmc2209_set_VACTUAL(&rightMotor);
 800133c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001340:	4618      	mov	r0, r3
 8001342:	f001 fa40 	bl	80027c6 <tmc2209_set_VACTUAL>
//		  tmc2209_off(&leftMotor);
//		  tmc2209_off(&rightMotor);



		  while(HAL_GPIO_ReadPin(BOT_PB_GPIO_Port, BOT_PB_Pin) == PB_PRESSED);
 8001346:	bf00      	nop
 8001348:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800134c:	4815      	ldr	r0, [pc, #84]	@ (80013a4 <main+0x334>)
 800134e:	f002 ffa1 	bl	8004294 <HAL_GPIO_ReadPin>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0f7      	beq.n	8001348 <main+0x2d8>

	  /*
	   * Heart beat
	   */
	  // Toggle system LEDs every i_MAX iterations
	  if( i < i_MAX) {
 8001358:	f897 21f7 	ldrb.w	r2, [r7, #503]	@ 0x1f7
 800135c:	f897 31f6 	ldrb.w	r3, [r7, #502]	@ 0x1f6
 8001360:	429a      	cmp	r2, r3
 8001362:	d205      	bcs.n	8001370 <main+0x300>
		  i++;
 8001364:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 8001368:	3301      	adds	r3, #1
 800136a:	f887 31f7 	strb.w	r3, [r7, #503]	@ 0x1f7
 800136e:	e006      	b.n	800137e <main+0x30e>
	  } else {
		  i = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	f887 31f7 	strb.w	r3, [r7, #503]	@ 0x1f7
		  HAL_GPIO_TogglePin(STATUS_LED2_GPIO_Port, STATUS_LED2_Pin);
 8001376:	2108      	movs	r1, #8
 8001378:	4809      	ldr	r0, [pc, #36]	@ (80013a0 <main+0x330>)
 800137a:	f002 ffbb 	bl	80042f4 <HAL_GPIO_TogglePin>
	  }
	  // Toggle the other system LED every iteration
	  HAL_GPIO_TogglePin(STATUS_LED1_GPIO_Port, STATUS_LED1_Pin);
 800137e:	2104      	movs	r1, #4
 8001380:	4807      	ldr	r0, [pc, #28]	@ (80013a0 <main+0x330>)
 8001382:	f002 ffb7 	bl	80042f4 <HAL_GPIO_TogglePin>
  {
 8001386:	e709      	b.n	800119c <main+0x12c>
 8001388:	20000500 	.word	0x20000500
 800138c:	20000598 	.word	0x20000598
 8001390:	080111f0 	.word	0x080111f0
 8001394:	0801120c 	.word	0x0801120c
 8001398:	200005e4 	.word	0x200005e4
 800139c:	2000054c 	.word	0x2000054c
 80013a0:	48000800 	.word	0x48000800
 80013a4:	48000400 	.word	0x48000400

080013a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b094      	sub	sp, #80	@ 0x50
 80013ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ae:	f107 0318 	add.w	r3, r7, #24
 80013b2:	2238      	movs	r2, #56	@ 0x38
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f00c fb43 	bl	800da42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80013ca:	2000      	movs	r0, #0
 80013cc:	f004 fcae 	bl	8005d2c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80013d0:	2321      	movs	r3, #33	@ 0x21
 80013d2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013d8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80013da:	2301      	movs	r3, #1
 80013dc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013de:	2302      	movs	r3, #2
 80013e0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013e2:	2303      	movs	r3, #3
 80013e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV12;
 80013e6:	230c      	movs	r3, #12
 80013e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80013ea:	2355      	movs	r3, #85	@ 0x55
 80013ec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013ee:	2302      	movs	r3, #2
 80013f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013f2:	2302      	movs	r3, #2
 80013f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013f6:	2302      	movs	r3, #2
 80013f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fa:	f107 0318 	add.w	r3, r7, #24
 80013fe:	4618      	mov	r0, r3
 8001400:	f004 fd38 	bl	8005e74 <HAL_RCC_OscConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800140a:	f000 fc51 	bl	8001cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800140e:	230f      	movs	r3, #15
 8001410:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001412:	2303      	movs	r3, #3
 8001414:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	2104      	movs	r1, #4
 8001426:	4618      	mov	r0, r3
 8001428:	f005 f836 	bl	8006498 <HAL_RCC_ClockConfig>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001432:	f000 fc3d 	bl	8001cb0 <Error_Handler>
  }
}
 8001436:	bf00      	nop
 8001438:	3750      	adds	r7, #80	@ 0x50
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001446:	463b      	mov	r3, r7
 8001448:	2220      	movs	r2, #32
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f00c faf8 	bl	800da42 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001452:	4b2b      	ldr	r3, [pc, #172]	@ (8001500 <MX_ADC2_Init+0xc0>)
 8001454:	4a2b      	ldr	r2, [pc, #172]	@ (8001504 <MX_ADC2_Init+0xc4>)
 8001456:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001458:	4b29      	ldr	r3, [pc, #164]	@ (8001500 <MX_ADC2_Init+0xc0>)
 800145a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800145e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001460:	4b27      	ldr	r3, [pc, #156]	@ (8001500 <MX_ADC2_Init+0xc0>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001466:	4b26      	ldr	r3, [pc, #152]	@ (8001500 <MX_ADC2_Init+0xc0>)
 8001468:	2200      	movs	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800146c:	4b24      	ldr	r3, [pc, #144]	@ (8001500 <MX_ADC2_Init+0xc0>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001472:	4b23      	ldr	r3, [pc, #140]	@ (8001500 <MX_ADC2_Init+0xc0>)
 8001474:	2200      	movs	r2, #0
 8001476:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001478:	4b21      	ldr	r3, [pc, #132]	@ (8001500 <MX_ADC2_Init+0xc0>)
 800147a:	2204      	movs	r2, #4
 800147c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800147e:	4b20      	ldr	r3, [pc, #128]	@ (8001500 <MX_ADC2_Init+0xc0>)
 8001480:	2200      	movs	r2, #0
 8001482:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001484:	4b1e      	ldr	r3, [pc, #120]	@ (8001500 <MX_ADC2_Init+0xc0>)
 8001486:	2200      	movs	r2, #0
 8001488:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800148a:	4b1d      	ldr	r3, [pc, #116]	@ (8001500 <MX_ADC2_Init+0xc0>)
 800148c:	2201      	movs	r2, #1
 800148e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001490:	4b1b      	ldr	r3, [pc, #108]	@ (8001500 <MX_ADC2_Init+0xc0>)
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001498:	4b19      	ldr	r3, [pc, #100]	@ (8001500 <MX_ADC2_Init+0xc0>)
 800149a:	2200      	movs	r2, #0
 800149c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800149e:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <MX_ADC2_Init+0xc0>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80014a4:	4b16      	ldr	r3, [pc, #88]	@ (8001500 <MX_ADC2_Init+0xc0>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014ac:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <MX_ADC2_Init+0xc0>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80014b2:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <MX_ADC2_Init+0xc0>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014ba:	4811      	ldr	r0, [pc, #68]	@ (8001500 <MX_ADC2_Init+0xc0>)
 80014bc:	f001 fcc2 	bl	8002e44 <HAL_ADC_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80014c6:	f000 fbf3 	bl	8001cb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80014ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <MX_ADC2_Init+0xc8>)
 80014cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014ce:	2306      	movs	r3, #6
 80014d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014d6:	237f      	movs	r3, #127	@ 0x7f
 80014d8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014da:	2304      	movs	r3, #4
 80014dc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014e2:	463b      	mov	r3, r7
 80014e4:	4619      	mov	r1, r3
 80014e6:	4806      	ldr	r0, [pc, #24]	@ (8001500 <MX_ADC2_Init+0xc0>)
 80014e8:	f001 fe5a 	bl	80031a0 <HAL_ADC_ConfigChannel>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80014f2:	f000 fbdd 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	3720      	adds	r7, #32
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000368 	.word	0x20000368
 8001504:	50000100 	.word	0x50000100
 8001508:	10c00010 	.word	0x10c00010

0800150c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001510:	4b1f      	ldr	r3, [pc, #124]	@ (8001590 <MX_FDCAN1_Init+0x84>)
 8001512:	4a20      	ldr	r2, [pc, #128]	@ (8001594 <MX_FDCAN1_Init+0x88>)
 8001514:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001516:	4b1e      	ldr	r3, [pc, #120]	@ (8001590 <MX_FDCAN1_Init+0x84>)
 8001518:	2200      	movs	r2, #0
 800151a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800151c:	4b1c      	ldr	r3, [pc, #112]	@ (8001590 <MX_FDCAN1_Init+0x84>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001522:	4b1b      	ldr	r3, [pc, #108]	@ (8001590 <MX_FDCAN1_Init+0x84>)
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001528:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <MX_FDCAN1_Init+0x84>)
 800152a:	2200      	movs	r2, #0
 800152c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800152e:	4b18      	ldr	r3, [pc, #96]	@ (8001590 <MX_FDCAN1_Init+0x84>)
 8001530:	2200      	movs	r2, #0
 8001532:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001534:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <MX_FDCAN1_Init+0x84>)
 8001536:	2200      	movs	r2, #0
 8001538:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800153a:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <MX_FDCAN1_Init+0x84>)
 800153c:	2210      	movs	r2, #16
 800153e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001540:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <MX_FDCAN1_Init+0x84>)
 8001542:	2201      	movs	r2, #1
 8001544:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 8001546:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <MX_FDCAN1_Init+0x84>)
 8001548:	2201      	movs	r2, #1
 800154a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 800154c:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <MX_FDCAN1_Init+0x84>)
 800154e:	2201      	movs	r2, #1
 8001550:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001552:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <MX_FDCAN1_Init+0x84>)
 8001554:	2201      	movs	r2, #1
 8001556:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001558:	4b0d      	ldr	r3, [pc, #52]	@ (8001590 <MX_FDCAN1_Init+0x84>)
 800155a:	2201      	movs	r2, #1
 800155c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800155e:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <MX_FDCAN1_Init+0x84>)
 8001560:	2201      	movs	r2, #1
 8001562:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001564:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <MX_FDCAN1_Init+0x84>)
 8001566:	2201      	movs	r2, #1
 8001568:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800156a:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <MX_FDCAN1_Init+0x84>)
 800156c:	2200      	movs	r2, #0
 800156e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001570:	4b07      	ldr	r3, [pc, #28]	@ (8001590 <MX_FDCAN1_Init+0x84>)
 8001572:	2200      	movs	r2, #0
 8001574:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001576:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <MX_FDCAN1_Init+0x84>)
 8001578:	2200      	movs	r2, #0
 800157a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800157c:	4804      	ldr	r0, [pc, #16]	@ (8001590 <MX_FDCAN1_Init+0x84>)
 800157e:	f002 fb4b 	bl	8003c18 <HAL_FDCAN_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001588:	f000 fb92 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200003d4 	.word	0x200003d4
 8001594:	40006400 	.word	0x40006400

08001598 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800159c:	4b1f      	ldr	r3, [pc, #124]	@ (800161c <MX_FDCAN2_Init+0x84>)
 800159e:	4a20      	ldr	r2, [pc, #128]	@ (8001620 <MX_FDCAN2_Init+0x88>)
 80015a0:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80015a2:	4b1e      	ldr	r3, [pc, #120]	@ (800161c <MX_FDCAN2_Init+0x84>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80015a8:	4b1c      	ldr	r3, [pc, #112]	@ (800161c <MX_FDCAN2_Init+0x84>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80015ae:	4b1b      	ldr	r3, [pc, #108]	@ (800161c <MX_FDCAN2_Init+0x84>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80015b4:	4b19      	ldr	r3, [pc, #100]	@ (800161c <MX_FDCAN2_Init+0x84>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80015ba:	4b18      	ldr	r3, [pc, #96]	@ (800161c <MX_FDCAN2_Init+0x84>)
 80015bc:	2200      	movs	r2, #0
 80015be:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80015c0:	4b16      	ldr	r3, [pc, #88]	@ (800161c <MX_FDCAN2_Init+0x84>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80015c6:	4b15      	ldr	r3, [pc, #84]	@ (800161c <MX_FDCAN2_Init+0x84>)
 80015c8:	2210      	movs	r2, #16
 80015ca:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80015cc:	4b13      	ldr	r3, [pc, #76]	@ (800161c <MX_FDCAN2_Init+0x84>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 1;
 80015d2:	4b12      	ldr	r3, [pc, #72]	@ (800161c <MX_FDCAN2_Init+0x84>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 80015d8:	4b10      	ldr	r3, [pc, #64]	@ (800161c <MX_FDCAN2_Init+0x84>)
 80015da:	2201      	movs	r2, #1
 80015dc:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80015de:	4b0f      	ldr	r3, [pc, #60]	@ (800161c <MX_FDCAN2_Init+0x84>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80015e4:	4b0d      	ldr	r3, [pc, #52]	@ (800161c <MX_FDCAN2_Init+0x84>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80015ea:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <MX_FDCAN2_Init+0x84>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80015f0:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <MX_FDCAN2_Init+0x84>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80015f6:	4b09      	ldr	r3, [pc, #36]	@ (800161c <MX_FDCAN2_Init+0x84>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80015fc:	4b07      	ldr	r3, [pc, #28]	@ (800161c <MX_FDCAN2_Init+0x84>)
 80015fe:	2200      	movs	r2, #0
 8001600:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001602:	4b06      	ldr	r3, [pc, #24]	@ (800161c <MX_FDCAN2_Init+0x84>)
 8001604:	2200      	movs	r2, #0
 8001606:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001608:	4804      	ldr	r0, [pc, #16]	@ (800161c <MX_FDCAN2_Init+0x84>)
 800160a:	f002 fb05 	bl	8003c18 <HAL_FDCAN_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8001614:	f000 fb4c 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000438 	.word	0x20000438
 8001620:	40006800 	.word	0x40006800

08001624 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001628:	4b1b      	ldr	r3, [pc, #108]	@ (8001698 <MX_SPI2_Init+0x74>)
 800162a:	4a1c      	ldr	r2, [pc, #112]	@ (800169c <MX_SPI2_Init+0x78>)
 800162c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800162e:	4b1a      	ldr	r3, [pc, #104]	@ (8001698 <MX_SPI2_Init+0x74>)
 8001630:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001634:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001636:	4b18      	ldr	r3, [pc, #96]	@ (8001698 <MX_SPI2_Init+0x74>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800163c:	4b16      	ldr	r3, [pc, #88]	@ (8001698 <MX_SPI2_Init+0x74>)
 800163e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001642:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001644:	4b14      	ldr	r3, [pc, #80]	@ (8001698 <MX_SPI2_Init+0x74>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800164a:	4b13      	ldr	r3, [pc, #76]	@ (8001698 <MX_SPI2_Init+0x74>)
 800164c:	2200      	movs	r2, #0
 800164e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001650:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <MX_SPI2_Init+0x74>)
 8001652:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001656:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001658:	4b0f      	ldr	r3, [pc, #60]	@ (8001698 <MX_SPI2_Init+0x74>)
 800165a:	2208      	movs	r2, #8
 800165c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800165e:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <MX_SPI2_Init+0x74>)
 8001660:	2200      	movs	r2, #0
 8001662:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001664:	4b0c      	ldr	r3, [pc, #48]	@ (8001698 <MX_SPI2_Init+0x74>)
 8001666:	2200      	movs	r2, #0
 8001668:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800166a:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <MX_SPI2_Init+0x74>)
 800166c:	2200      	movs	r2, #0
 800166e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001670:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <MX_SPI2_Init+0x74>)
 8001672:	2207      	movs	r2, #7
 8001674:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001676:	4b08      	ldr	r3, [pc, #32]	@ (8001698 <MX_SPI2_Init+0x74>)
 8001678:	2200      	movs	r2, #0
 800167a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <MX_SPI2_Init+0x74>)
 800167e:	2208      	movs	r2, #8
 8001680:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001682:	4805      	ldr	r0, [pc, #20]	@ (8001698 <MX_SPI2_Init+0x74>)
 8001684:	f005 fb60 	bl	8006d48 <HAL_SPI_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800168e:	f000 fb0f 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	2000049c 	.word	0x2000049c
 800169c:	40003800 	.word	0x40003800

080016a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b098      	sub	sp, #96	@ 0x60
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	611a      	str	r2, [r3, #16]
 80016c2:	615a      	str	r2, [r3, #20]
 80016c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	2234      	movs	r2, #52	@ 0x34
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f00c f9b8 	bl	800da42 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016d2:	4b42      	ldr	r3, [pc, #264]	@ (80017dc <MX_TIM1_Init+0x13c>)
 80016d4:	4a42      	ldr	r2, [pc, #264]	@ (80017e0 <MX_TIM1_Init+0x140>)
 80016d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 80016d8:	4b40      	ldr	r3, [pc, #256]	@ (80017dc <MX_TIM1_Init+0x13c>)
 80016da:	2254      	movs	r2, #84	@ 0x54
 80016dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016de:	4b3f      	ldr	r3, [pc, #252]	@ (80017dc <MX_TIM1_Init+0x13c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39999;
 80016e4:	4b3d      	ldr	r3, [pc, #244]	@ (80017dc <MX_TIM1_Init+0x13c>)
 80016e6:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80016ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ec:	4b3b      	ldr	r3, [pc, #236]	@ (80017dc <MX_TIM1_Init+0x13c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016f2:	4b3a      	ldr	r3, [pc, #232]	@ (80017dc <MX_TIM1_Init+0x13c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f8:	4b38      	ldr	r3, [pc, #224]	@ (80017dc <MX_TIM1_Init+0x13c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016fe:	4837      	ldr	r0, [pc, #220]	@ (80017dc <MX_TIM1_Init+0x13c>)
 8001700:	f005 fbcd 	bl	8006e9e <HAL_TIM_PWM_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800170a:	f000 fad1 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001712:	2300      	movs	r3, #0
 8001714:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800171a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800171e:	4619      	mov	r1, r3
 8001720:	482e      	ldr	r0, [pc, #184]	@ (80017dc <MX_TIM1_Init+0x13c>)
 8001722:	f006 fa2d 	bl	8007b80 <HAL_TIMEx_MasterConfigSynchronization>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800172c:	f000 fac0 	bl	8001cb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001730:	2360      	movs	r3, #96	@ 0x60
 8001732:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 200;
 8001734:	23c8      	movs	r3, #200	@ 0xc8
 8001736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001738:	2300      	movs	r3, #0
 800173a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800173c:	2300      	movs	r3, #0
 800173e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001744:	2300      	movs	r3, #0
 8001746:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001748:	2300      	movs	r3, #0
 800174a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800174c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001750:	2200      	movs	r2, #0
 8001752:	4619      	mov	r1, r3
 8001754:	4821      	ldr	r0, [pc, #132]	@ (80017dc <MX_TIM1_Init+0x13c>)
 8001756:	f005 fd05 	bl	8007164 <HAL_TIM_PWM_ConfigChannel>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001760:	f000 faa6 	bl	8001cb0 <Error_Handler>
  }
  sConfigOC.Pulse = 150;
 8001764:	2396      	movs	r3, #150	@ 0x96
 8001766:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001768:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800176c:	2204      	movs	r2, #4
 800176e:	4619      	mov	r1, r3
 8001770:	481a      	ldr	r0, [pc, #104]	@ (80017dc <MX_TIM1_Init+0x13c>)
 8001772:	f005 fcf7 	bl	8007164 <HAL_TIM_PWM_ConfigChannel>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 800177c:	f000 fa98 	bl	8001cb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001794:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001798:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80017b0:	2300      	movs	r3, #0
 80017b2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	4619      	mov	r1, r3
 80017bc:	4807      	ldr	r0, [pc, #28]	@ (80017dc <MX_TIM1_Init+0x13c>)
 80017be:	f006 fa6d 	bl	8007c9c <HAL_TIMEx_ConfigBreakDeadTime>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80017c8:	f000 fa72 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017cc:	4803      	ldr	r0, [pc, #12]	@ (80017dc <MX_TIM1_Init+0x13c>)
 80017ce:	f000 fca9 	bl	8002124 <HAL_TIM_MspPostInit>

}
 80017d2:	bf00      	nop
 80017d4:	3760      	adds	r7, #96	@ 0x60
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000500 	.word	0x20000500
 80017e0:	40012c00 	.word	0x40012c00

080017e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	@ 0x28
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ea:	f107 031c 	add.w	r3, r7, #28
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017f6:	463b      	mov	r3, r7
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
 8001804:	615a      	str	r2, [r3, #20]
 8001806:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001808:	4b28      	ldr	r3, [pc, #160]	@ (80018ac <MX_TIM2_Init+0xc8>)
 800180a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800180e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 339;
 8001810:	4b26      	ldr	r3, [pc, #152]	@ (80018ac <MX_TIM2_Init+0xc8>)
 8001812:	f240 1253 	movw	r2, #339	@ 0x153
 8001816:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001818:	4b24      	ldr	r3, [pc, #144]	@ (80018ac <MX_TIM2_Init+0xc8>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800181e:	4b23      	ldr	r3, [pc, #140]	@ (80018ac <MX_TIM2_Init+0xc8>)
 8001820:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001824:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001826:	4b21      	ldr	r3, [pc, #132]	@ (80018ac <MX_TIM2_Init+0xc8>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182c:	4b1f      	ldr	r3, [pc, #124]	@ (80018ac <MX_TIM2_Init+0xc8>)
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001832:	481e      	ldr	r0, [pc, #120]	@ (80018ac <MX_TIM2_Init+0xc8>)
 8001834:	f005 fb33 	bl	8006e9e <HAL_TIM_PWM_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 800183e:	f000 fa37 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800184a:	f107 031c 	add.w	r3, r7, #28
 800184e:	4619      	mov	r1, r3
 8001850:	4816      	ldr	r0, [pc, #88]	@ (80018ac <MX_TIM2_Init+0xc8>)
 8001852:	f006 f995 	bl	8007b80 <HAL_TIMEx_MasterConfigSynchronization>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800185c:	f000 fa28 	bl	8001cb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001860:	2360      	movs	r3, #96	@ 0x60
 8001862:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 4999;
 8001864:	f241 3387 	movw	r3, #4999	@ 0x1387
 8001868:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001872:	463b      	mov	r3, r7
 8001874:	2200      	movs	r2, #0
 8001876:	4619      	mov	r1, r3
 8001878:	480c      	ldr	r0, [pc, #48]	@ (80018ac <MX_TIM2_Init+0xc8>)
 800187a:	f005 fc73 	bl	8007164 <HAL_TIM_PWM_ConfigChannel>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001884:	f000 fa14 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001888:	463b      	mov	r3, r7
 800188a:	2204      	movs	r2, #4
 800188c:	4619      	mov	r1, r3
 800188e:	4807      	ldr	r0, [pc, #28]	@ (80018ac <MX_TIM2_Init+0xc8>)
 8001890:	f005 fc68 	bl	8007164 <HAL_TIM_PWM_ConfigChannel>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800189a:	f000 fa09 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800189e:	4803      	ldr	r0, [pc, #12]	@ (80018ac <MX_TIM2_Init+0xc8>)
 80018a0:	f000 fc40 	bl	8002124 <HAL_TIM_MspPostInit>

}
 80018a4:	bf00      	nop
 80018a6:	3728      	adds	r7, #40	@ 0x28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	2000054c 	.word	0x2000054c

080018b0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b098      	sub	sp, #96	@ 0x60
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018c2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
 80018d0:	611a      	str	r2, [r3, #16]
 80018d2:	615a      	str	r2, [r3, #20]
 80018d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	2234      	movs	r2, #52	@ 0x34
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f00c f8b0 	bl	800da42 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80018e2:	4b4d      	ldr	r3, [pc, #308]	@ (8001a18 <MX_TIM8_Init+0x168>)
 80018e4:	4a4d      	ldr	r2, [pc, #308]	@ (8001a1c <MX_TIM8_Init+0x16c>)
 80018e6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 84;
 80018e8:	4b4b      	ldr	r3, [pc, #300]	@ (8001a18 <MX_TIM8_Init+0x168>)
 80018ea:	2254      	movs	r2, #84	@ 0x54
 80018ec:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001a18 <MX_TIM8_Init+0x168>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 39999;
 80018f4:	4b48      	ldr	r3, [pc, #288]	@ (8001a18 <MX_TIM8_Init+0x168>)
 80018f6:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80018fa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018fc:	4b46      	ldr	r3, [pc, #280]	@ (8001a18 <MX_TIM8_Init+0x168>)
 80018fe:	2200      	movs	r2, #0
 8001900:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001902:	4b45      	ldr	r3, [pc, #276]	@ (8001a18 <MX_TIM8_Init+0x168>)
 8001904:	2200      	movs	r2, #0
 8001906:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001908:	4b43      	ldr	r3, [pc, #268]	@ (8001a18 <MX_TIM8_Init+0x168>)
 800190a:	2200      	movs	r2, #0
 800190c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800190e:	4842      	ldr	r0, [pc, #264]	@ (8001a18 <MX_TIM8_Init+0x168>)
 8001910:	f005 fac5 	bl	8006e9e <HAL_TIM_PWM_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800191a:	f000 f9c9 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800191e:	2300      	movs	r3, #0
 8001920:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800192a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800192e:	4619      	mov	r1, r3
 8001930:	4839      	ldr	r0, [pc, #228]	@ (8001a18 <MX_TIM8_Init+0x168>)
 8001932:	f006 f925 	bl	8007b80 <HAL_TIMEx_MasterConfigSynchronization>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 800193c:	f000 f9b8 	bl	8001cb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001940:	2360      	movs	r3, #96	@ 0x60
 8001942:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 150;
 8001944:	2396      	movs	r3, #150	@ 0x96
 8001946:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001948:	2300      	movs	r3, #0
 800194a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800194c:	2300      	movs	r3, #0
 800194e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001950:	2300      	movs	r3, #0
 8001952:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001954:	2300      	movs	r3, #0
 8001956:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001958:	2300      	movs	r3, #0
 800195a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800195c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001960:	2200      	movs	r2, #0
 8001962:	4619      	mov	r1, r3
 8001964:	482c      	ldr	r0, [pc, #176]	@ (8001a18 <MX_TIM8_Init+0x168>)
 8001966:	f005 fbfd 	bl	8007164 <HAL_TIM_PWM_ConfigChannel>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001970:	f000 f99e 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001974:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001978:	2204      	movs	r2, #4
 800197a:	4619      	mov	r1, r3
 800197c:	4826      	ldr	r0, [pc, #152]	@ (8001a18 <MX_TIM8_Init+0x168>)
 800197e:	f005 fbf1 	bl	8007164 <HAL_TIM_PWM_ConfigChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8001988:	f000 f992 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800198c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001990:	2208      	movs	r2, #8
 8001992:	4619      	mov	r1, r3
 8001994:	4820      	ldr	r0, [pc, #128]	@ (8001a18 <MX_TIM8_Init+0x168>)
 8001996:	f005 fbe5 	bl	8007164 <HAL_TIM_PWM_ConfigChannel>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 80019a0:	f000 f986 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019a8:	220c      	movs	r2, #12
 80019aa:	4619      	mov	r1, r3
 80019ac:	481a      	ldr	r0, [pc, #104]	@ (8001a18 <MX_TIM8_Init+0x168>)
 80019ae:	f005 fbd9 	bl	8007164 <HAL_TIM_PWM_ConfigChannel>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 80019b8:	f000 f97a 	bl	8001cb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80019ec:	2300      	movs	r3, #0
 80019ee:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	4619      	mov	r1, r3
 80019f8:	4807      	ldr	r0, [pc, #28]	@ (8001a18 <MX_TIM8_Init+0x168>)
 80019fa:	f006 f94f 	bl	8007c9c <HAL_TIMEx_ConfigBreakDeadTime>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM8_Init+0x158>
  {
    Error_Handler();
 8001a04:	f000 f954 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001a08:	4803      	ldr	r0, [pc, #12]	@ (8001a18 <MX_TIM8_Init+0x168>)
 8001a0a:	f000 fb8b 	bl	8002124 <HAL_TIM_MspPostInit>

}
 8001a0e:	bf00      	nop
 8001a10:	3760      	adds	r7, #96	@ 0x60
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000598 	.word	0x20000598
 8001a1c:	40013400 	.word	0x40013400

08001a20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a24:	4b22      	ldr	r3, [pc, #136]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a26:	4a23      	ldr	r2, [pc, #140]	@ (8001ab4 <MX_USART1_UART_Init+0x94>)
 8001a28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a2a:	4b21      	ldr	r3, [pc, #132]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a32:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a38:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a44:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a46:	220c      	movs	r2, #12
 8001a48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a4a:	4b19      	ldr	r3, [pc, #100]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a50:	4b17      	ldr	r3, [pc, #92]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a56:	4b16      	ldr	r3, [pc, #88]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a5c:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a62:	4b13      	ldr	r3, [pc, #76]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a68:	4811      	ldr	r0, [pc, #68]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a6a:	f006 f9ab 	bl	8007dc4 <HAL_UART_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a74:	f000 f91c 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a78:	2100      	movs	r1, #0
 8001a7a:	480d      	ldr	r0, [pc, #52]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a7c:	f006 ffd4 	bl	8008a28 <HAL_UARTEx_SetTxFifoThreshold>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a86:	f000 f913 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4808      	ldr	r0, [pc, #32]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a8e:	f007 f809 	bl	8008aa4 <HAL_UARTEx_SetRxFifoThreshold>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a98:	f000 f90a 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a9c:	4804      	ldr	r0, [pc, #16]	@ (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a9e:	f006 ff8a 	bl	80089b6 <HAL_UARTEx_DisableFifoMode>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001aa8:	f000 f902 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	200005e4 	.word	0x200005e4
 8001ab4:	40013800 	.word	0x40013800

08001ab8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001abc:	4b22      	ldr	r3, [pc, #136]	@ (8001b48 <MX_USART2_UART_Init+0x90>)
 8001abe:	4a23      	ldr	r2, [pc, #140]	@ (8001b4c <MX_USART2_UART_Init+0x94>)
 8001ac0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ac2:	4b21      	ldr	r3, [pc, #132]	@ (8001b48 <MX_USART2_UART_Init+0x90>)
 8001ac4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ac8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aca:	4b1f      	ldr	r3, [pc, #124]	@ (8001b48 <MX_USART2_UART_Init+0x90>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b48 <MX_USART2_UART_Init+0x90>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b48 <MX_USART2_UART_Init+0x90>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001adc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b48 <MX_USART2_UART_Init+0x90>)
 8001ade:	220c      	movs	r2, #12
 8001ae0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae2:	4b19      	ldr	r3, [pc, #100]	@ (8001b48 <MX_USART2_UART_Init+0x90>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae8:	4b17      	ldr	r3, [pc, #92]	@ (8001b48 <MX_USART2_UART_Init+0x90>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aee:	4b16      	ldr	r3, [pc, #88]	@ (8001b48 <MX_USART2_UART_Init+0x90>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001af4:	4b14      	ldr	r3, [pc, #80]	@ (8001b48 <MX_USART2_UART_Init+0x90>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001afa:	4b13      	ldr	r3, [pc, #76]	@ (8001b48 <MX_USART2_UART_Init+0x90>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b00:	4811      	ldr	r0, [pc, #68]	@ (8001b48 <MX_USART2_UART_Init+0x90>)
 8001b02:	f006 f95f 	bl	8007dc4 <HAL_UART_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001b0c:	f000 f8d0 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b10:	2100      	movs	r1, #0
 8001b12:	480d      	ldr	r0, [pc, #52]	@ (8001b48 <MX_USART2_UART_Init+0x90>)
 8001b14:	f006 ff88 	bl	8008a28 <HAL_UARTEx_SetTxFifoThreshold>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001b1e:	f000 f8c7 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b22:	2100      	movs	r1, #0
 8001b24:	4808      	ldr	r0, [pc, #32]	@ (8001b48 <MX_USART2_UART_Init+0x90>)
 8001b26:	f006 ffbd 	bl	8008aa4 <HAL_UARTEx_SetRxFifoThreshold>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001b30:	f000 f8be 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001b34:	4804      	ldr	r0, [pc, #16]	@ (8001b48 <MX_USART2_UART_Init+0x90>)
 8001b36:	f006 ff3e 	bl	80089b6 <HAL_UARTEx_DisableFifoMode>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001b40:	f000 f8b6 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000678 	.word	0x20000678
 8001b4c:	40004400 	.word	0x40004400

08001b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	@ 0x28
 8001b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	60da      	str	r2, [r3, #12]
 8001b64:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b66:	4b4e      	ldr	r3, [pc, #312]	@ (8001ca0 <MX_GPIO_Init+0x150>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6a:	4a4d      	ldr	r2, [pc, #308]	@ (8001ca0 <MX_GPIO_Init+0x150>)
 8001b6c:	f043 0304 	orr.w	r3, r3, #4
 8001b70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b72:	4b4b      	ldr	r3, [pc, #300]	@ (8001ca0 <MX_GPIO_Init+0x150>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b7e:	4b48      	ldr	r3, [pc, #288]	@ (8001ca0 <MX_GPIO_Init+0x150>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b82:	4a47      	ldr	r2, [pc, #284]	@ (8001ca0 <MX_GPIO_Init+0x150>)
 8001b84:	f043 0320 	orr.w	r3, r3, #32
 8001b88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b8a:	4b45      	ldr	r3, [pc, #276]	@ (8001ca0 <MX_GPIO_Init+0x150>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8e:	f003 0320 	and.w	r3, r3, #32
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b96:	4b42      	ldr	r3, [pc, #264]	@ (8001ca0 <MX_GPIO_Init+0x150>)
 8001b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9a:	4a41      	ldr	r2, [pc, #260]	@ (8001ca0 <MX_GPIO_Init+0x150>)
 8001b9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ba0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ba2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ca0 <MX_GPIO_Init+0x150>)
 8001ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bae:	4b3c      	ldr	r3, [pc, #240]	@ (8001ca0 <MX_GPIO_Init+0x150>)
 8001bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb2:	4a3b      	ldr	r2, [pc, #236]	@ (8001ca0 <MX_GPIO_Init+0x150>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bba:	4b39      	ldr	r3, [pc, #228]	@ (8001ca0 <MX_GPIO_Init+0x150>)
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	607b      	str	r3, [r7, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc6:	4b36      	ldr	r3, [pc, #216]	@ (8001ca0 <MX_GPIO_Init+0x150>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bca:	4a35      	ldr	r2, [pc, #212]	@ (8001ca0 <MX_GPIO_Init+0x150>)
 8001bcc:	f043 0302 	orr.w	r3, r3, #2
 8001bd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bd2:	4b33      	ldr	r3, [pc, #204]	@ (8001ca0 <MX_GPIO_Init+0x150>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	603b      	str	r3, [r7, #0]
 8001bdc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_B_Pin|LED2_G_Pin|LED2_R_Pin|STATUS_LED1_Pin
 8001bde:	2200      	movs	r2, #0
 8001be0:	f64f 410c 	movw	r1, #64524	@ 0xfc0c
 8001be4:	482f      	ldr	r0, [pc, #188]	@ (8001ca4 <MX_GPIO_Init+0x154>)
 8001be6:	f002 fb6d 	bl	80042c4 <HAL_GPIO_WritePin>
                          |STATUS_LED2_Pin|LED1_R_Pin|LED1_G_Pin|LED1_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RIGHT_DIR_GPIO_Port, RIGHT_DIR_Pin, GPIO_PIN_RESET);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2101      	movs	r1, #1
 8001bee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bf2:	f002 fb67 	bl	80042c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_B_Pin LED2_G_Pin LED2_R_Pin STATUS_LED1_Pin
                           STATUS_LED2_Pin LED1_R_Pin LED1_G_Pin LED1_B_Pin */
  GPIO_InitStruct.Pin = LED2_B_Pin|LED2_G_Pin|LED2_R_Pin|STATUS_LED1_Pin
 8001bf6:	f64f 430c 	movw	r3, #64524	@ 0xfc0c
 8001bfa:	617b      	str	r3, [r7, #20]
                          |STATUS_LED2_Pin|LED1_R_Pin|LED1_G_Pin|LED1_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	2300      	movs	r3, #0
 8001c06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4825      	ldr	r0, [pc, #148]	@ (8001ca4 <MX_GPIO_Init+0x154>)
 8001c10:	f002 f9be 	bl	8003f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : nRST_Pin */
  GPIO_InitStruct.Pin = nRST_Pin;
 8001c14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nRST_GPIO_Port, &GPIO_InitStruct);
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	4619      	mov	r1, r3
 8001c28:	481f      	ldr	r0, [pc, #124]	@ (8001ca8 <MX_GPIO_Init+0x158>)
 8001c2a:	f002 f9b1 	bl	8003f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN1_FAULT_Pin FDCAN1_S_Pin */
  GPIO_InitStruct.Pin = FDCAN1_FAULT_Pin|FDCAN1_S_Pin;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4818      	ldr	r0, [pc, #96]	@ (8001ca4 <MX_GPIO_Init+0x154>)
 8001c42:	f002 f9a5 	bl	8003f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : RIGHT_DIR_Pin */
  GPIO_InitStruct.Pin = RIGHT_DIR_Pin;
 8001c46:	2301      	movs	r3, #1
 8001c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c52:	2300      	movs	r3, #0
 8001c54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RIGHT_DIR_GPIO_Port, &GPIO_InitStruct);
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c60:	f002 f996 	bl	8003f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEFT_DIR_Pin */
  GPIO_InitStruct.Pin = LEFT_DIR_Pin;
 8001c64:	2340      	movs	r3, #64	@ 0x40
 8001c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEFT_DIR_GPIO_Port, &GPIO_InitStruct);
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	4619      	mov	r1, r3
 8001c76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c7a:	f002 f989 	bl	8003f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_SW_Pin TOP_PB_Pin MID_PB_Pin BOT_PB_Pin
                           IMU_INTERRUPT_Pin FDCAN2_FAULT_Pin FDCAN2_S_Pin */
  GPIO_InitStruct.Pin = LIMIT_SW_Pin|TOP_PB_Pin|MID_PB_Pin|BOT_PB_Pin
 8001c7e:	f640 4397 	movw	r3, #3223	@ 0xc97
 8001c82:	617b      	str	r3, [r7, #20]
                          |IMU_INTERRUPT_Pin|FDCAN2_FAULT_Pin|FDCAN2_S_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	4619      	mov	r1, r3
 8001c92:	4806      	ldr	r0, [pc, #24]	@ (8001cac <MX_GPIO_Init+0x15c>)
 8001c94:	f002 f97c 	bl	8003f90 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c98:	bf00      	nop
 8001c9a:	3728      	adds	r7, #40	@ 0x28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	48000800 	.word	0x48000800
 8001ca8:	48001800 	.word	0x48001800
 8001cac:	48000400 	.word	0x48000400

08001cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb4:	b672      	cpsid	i
}
 8001cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <Error_Handler+0x8>
 8001cbc:	0000      	movs	r0, r0
	...

08001cc0 <Servo_newMG90S>:

/**
 * Create and initialize a new MG90S servo
 */

servo_t Servo_newMG90S(TIM_HandleTypeDef *htim, uint32_t channel) {
 8001cc0:	b5b0      	push	{r4, r5, r7, lr}
 8001cc2:	b08c      	sub	sp, #48	@ 0x30
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
	// TODO: Check for valid values
	servo_t  newServo = {
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	4b37      	ldr	r3, [pc, #220]	@ (8001db8 <Servo_newMG90S+0xf8>)
 8001cda:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	4b35      	ldr	r3, [pc, #212]	@ (8001db8 <Servo_newMG90S+0xf8>)
 8001ce4:	e9c7 2308 	strd	r2, r3, [r7, #32]
			.tim = htim,
			.channel = channel,
			.setPoint = 0.5,
			.home = 0.5,
			// Period x Duty cycle
			.maxPulseWidth = (uint16_t)(htim->Instance->ARR * MG90S_MAX_LIMIT),
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fc30 	bl	8000554 <__aeabi_ui2d>
 8001cf4:	a32c      	add	r3, pc, #176	@ (adr r3, 8001da8 <Servo_newMG90S+0xe8>)
 8001cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfa:	f7fe fca5 	bl	8000648 <__aeabi_dmul>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f7fe ff77 	bl	8000bf8 <__aeabi_d2uiz>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	b29b      	uxth	r3, r3
	servo_t  newServo = {
 8001d0e:	853b      	strh	r3, [r7, #40]	@ 0x28
			.minPulseWidth = (uint16_t)(htim->Instance->ARR * MG90S_MIN_LIMIT),
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fc1c 	bl	8000554 <__aeabi_ui2d>
 8001d1c:	a324      	add	r3, pc, #144	@ (adr r3, 8001db0 <Servo_newMG90S+0xf0>)
 8001d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d22:	f7fe fc91 	bl	8000648 <__aeabi_dmul>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f7fe ff63 	bl	8000bf8 <__aeabi_d2uiz>
 8001d32:	4603      	mov	r3, r0
 8001d34:	b29b      	uxth	r3, r3
	servo_t  newServo = {
 8001d36:	857b      	strh	r3, [r7, #42]	@ 0x2a
			.absMaxPulseWidth = (uint16_t)(htim->Instance->ARR * MG90S_MAX_LIMIT),
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fc08 	bl	8000554 <__aeabi_ui2d>
 8001d44:	a318      	add	r3, pc, #96	@ (adr r3, 8001da8 <Servo_newMG90S+0xe8>)
 8001d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4a:	f7fe fc7d 	bl	8000648 <__aeabi_dmul>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4610      	mov	r0, r2
 8001d54:	4619      	mov	r1, r3
 8001d56:	f7fe ff4f 	bl	8000bf8 <__aeabi_d2uiz>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	b29b      	uxth	r3, r3
	servo_t  newServo = {
 8001d5e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			.absMinPulseWidth = (uint16_t)(htim->Instance->ARR * MG90S_MIN_LIMIT)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fbf4 	bl	8000554 <__aeabi_ui2d>
 8001d6c:	a310      	add	r3, pc, #64	@ (adr r3, 8001db0 <Servo_newMG90S+0xf0>)
 8001d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d72:	f7fe fc69 	bl	8000648 <__aeabi_dmul>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f7fe ff3b 	bl	8000bf8 <__aeabi_d2uiz>
 8001d82:	4603      	mov	r3, r0
 8001d84:	b29b      	uxth	r3, r3
	servo_t  newServo = {
 8001d86:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	};
	//Servo_start(&newServo);
	return newServo;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	461d      	mov	r5, r3
 8001d8c:	f107 0410 	add.w	r4, r7, #16
 8001d90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d98:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	3730      	adds	r7, #48	@ 0x30
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bdb0      	pop	{r4, r5, r7, pc}
 8001da4:	f3af 8000 	nop.w
 8001da8:	7ced9168 	.word	0x7ced9168
 8001dac:	3fbe353f 	.word	0x3fbe353f
 8001db0:	76c8b439 	.word	0x76c8b439
 8001db4:	3f9a9fbe 	.word	0x3f9a9fbe
 8001db8:	3fe00000 	.word	0x3fe00000

08001dbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e00 <HAL_MspInit+0x44>)
 8001dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8001e00 <HAL_MspInit+0x44>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dce:	4b0c      	ldr	r3, [pc, #48]	@ (8001e00 <HAL_MspInit+0x44>)
 8001dd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	607b      	str	r3, [r7, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dda:	4b09      	ldr	r3, [pc, #36]	@ (8001e00 <HAL_MspInit+0x44>)
 8001ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dde:	4a08      	ldr	r2, [pc, #32]	@ (8001e00 <HAL_MspInit+0x44>)
 8001de0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001de4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001de6:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <HAL_MspInit+0x44>)
 8001de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40021000 	.word	0x40021000

08001e04 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b09e      	sub	sp, #120	@ 0x78
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	2250      	movs	r2, #80	@ 0x50
 8001e22:	2100      	movs	r1, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f00b fe0c 	bl	800da42 <memset>
  if(hadc->Instance==ADC2)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ea8 <HAL_ADC_MspInit+0xa4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d134      	bne.n	8001e9e <HAL_ADC_MspInit+0x9a>

    /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001e34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e38:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001e3a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001e3e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	4618      	mov	r0, r3
 8001e46:	f004 fd43 	bl	80068d0 <HAL_RCCEx_PeriphCLKConfig>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001e50:	f7ff ff2e 	bl	8001cb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001e54:	4b15      	ldr	r3, [pc, #84]	@ (8001eac <HAL_ADC_MspInit+0xa8>)
 8001e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e58:	4a14      	ldr	r2, [pc, #80]	@ (8001eac <HAL_ADC_MspInit+0xa8>)
 8001e5a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e60:	4b12      	ldr	r3, [pc, #72]	@ (8001eac <HAL_ADC_MspInit+0xa8>)
 8001e62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001eac <HAL_ADC_MspInit+0xa8>)
 8001e6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e70:	4a0e      	ldr	r2, [pc, #56]	@ (8001eac <HAL_ADC_MspInit+0xa8>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e78:	4b0c      	ldr	r3, [pc, #48]	@ (8001eac <HAL_ADC_MspInit+0xa8>)
 8001e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = BAT_MON_Pin;
 8001e84:	2380      	movs	r3, #128	@ 0x80
 8001e86:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BAT_MON_GPIO_Port, &GPIO_InitStruct);
 8001e90:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e94:	4619      	mov	r1, r3
 8001e96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e9a:	f002 f879 	bl	8003f90 <HAL_GPIO_Init>

    /* USER CODE END ADC2_MspInit 1 */

  }

}
 8001e9e:	bf00      	nop
 8001ea0:	3778      	adds	r7, #120	@ 0x78
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	50000100 	.word	0x50000100
 8001eac:	40021000 	.word	0x40021000

08001eb0 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b0a0      	sub	sp, #128	@ 0x80
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ec8:	f107 031c 	add.w	r3, r7, #28
 8001ecc:	2250      	movs	r2, #80	@ 0x50
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f00b fdb6 	bl	800da42 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a48      	ldr	r2, [pc, #288]	@ (8001ffc <HAL_FDCAN_MspInit+0x14c>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d142      	bne.n	8001f66 <HAL_FDCAN_MspInit+0xb6>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001ee0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ee4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001ee6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001eea:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eec:	f107 031c 	add.w	r3, r7, #28
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f004 fced 	bl	80068d0 <HAL_RCCEx_PeriphCLKConfig>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001efc:	f7ff fed8 	bl	8001cb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001f00:	4b3f      	ldr	r3, [pc, #252]	@ (8002000 <HAL_FDCAN_MspInit+0x150>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	3301      	adds	r3, #1
 8001f06:	4a3e      	ldr	r2, [pc, #248]	@ (8002000 <HAL_FDCAN_MspInit+0x150>)
 8001f08:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001f0a:	4b3d      	ldr	r3, [pc, #244]	@ (8002000 <HAL_FDCAN_MspInit+0x150>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d10b      	bne.n	8001f2a <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f12:	4b3c      	ldr	r3, [pc, #240]	@ (8002004 <HAL_FDCAN_MspInit+0x154>)
 8001f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f16:	4a3b      	ldr	r2, [pc, #236]	@ (8002004 <HAL_FDCAN_MspInit+0x154>)
 8001f18:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f1e:	4b39      	ldr	r3, [pc, #228]	@ (8002004 <HAL_FDCAN_MspInit+0x154>)
 8001f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f26:	61bb      	str	r3, [r7, #24]
 8001f28:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2a:	4b36      	ldr	r3, [pc, #216]	@ (8002004 <HAL_FDCAN_MspInit+0x154>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f2e:	4a35      	ldr	r2, [pc, #212]	@ (8002004 <HAL_FDCAN_MspInit+0x154>)
 8001f30:	f043 0302 	orr.w	r3, r3, #2
 8001f34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f36:	4b33      	ldr	r3, [pc, #204]	@ (8002004 <HAL_FDCAN_MspInit+0x154>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f42:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f46:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001f54:	2309      	movs	r3, #9
 8001f56:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f58:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	482a      	ldr	r0, [pc, #168]	@ (8002008 <HAL_FDCAN_MspInit+0x158>)
 8001f60:	f002 f816 	bl	8003f90 <HAL_GPIO_Init>
    /* USER CODE BEGIN FDCAN2_MspInit 1 */

    /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001f64:	e045      	b.n	8001ff2 <HAL_FDCAN_MspInit+0x142>
  else if(hfdcan->Instance==FDCAN2)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a28      	ldr	r2, [pc, #160]	@ (800200c <HAL_FDCAN_MspInit+0x15c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d140      	bne.n	8001ff2 <HAL_FDCAN_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001f70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f74:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001f76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f7a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f7c:	f107 031c 	add.w	r3, r7, #28
 8001f80:	4618      	mov	r0, r3
 8001f82:	f004 fca5 	bl	80068d0 <HAL_RCCEx_PeriphCLKConfig>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_FDCAN_MspInit+0xe0>
      Error_Handler();
 8001f8c:	f7ff fe90 	bl	8001cb0 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001f90:	4b1b      	ldr	r3, [pc, #108]	@ (8002000 <HAL_FDCAN_MspInit+0x150>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	3301      	adds	r3, #1
 8001f96:	4a1a      	ldr	r2, [pc, #104]	@ (8002000 <HAL_FDCAN_MspInit+0x150>)
 8001f98:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001f9a:	4b19      	ldr	r3, [pc, #100]	@ (8002000 <HAL_FDCAN_MspInit+0x150>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d10b      	bne.n	8001fba <HAL_FDCAN_MspInit+0x10a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001fa2:	4b18      	ldr	r3, [pc, #96]	@ (8002004 <HAL_FDCAN_MspInit+0x154>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa6:	4a17      	ldr	r2, [pc, #92]	@ (8002004 <HAL_FDCAN_MspInit+0x154>)
 8001fa8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001fac:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fae:	4b15      	ldr	r3, [pc, #84]	@ (8002004 <HAL_FDCAN_MspInit+0x154>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fba:	4b12      	ldr	r3, [pc, #72]	@ (8002004 <HAL_FDCAN_MspInit+0x154>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fbe:	4a11      	ldr	r2, [pc, #68]	@ (8002004 <HAL_FDCAN_MspInit+0x154>)
 8001fc0:	f043 0302 	orr.w	r3, r3, #2
 8001fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002004 <HAL_FDCAN_MspInit+0x154>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001fd2:	2360      	movs	r3, #96	@ 0x60
 8001fd4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001fe2:	2309      	movs	r3, #9
 8001fe4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001fea:	4619      	mov	r1, r3
 8001fec:	4806      	ldr	r0, [pc, #24]	@ (8002008 <HAL_FDCAN_MspInit+0x158>)
 8001fee:	f001 ffcf 	bl	8003f90 <HAL_GPIO_Init>
}
 8001ff2:	bf00      	nop
 8001ff4:	3780      	adds	r7, #128	@ 0x80
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40006400 	.word	0x40006400
 8002000:	2000070c 	.word	0x2000070c
 8002004:	40021000 	.word	0x40021000
 8002008:	48000400 	.word	0x48000400
 800200c:	40006800 	.word	0x40006800

08002010 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08a      	sub	sp, #40	@ 0x28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a17      	ldr	r2, [pc, #92]	@ (800208c <HAL_SPI_MspInit+0x7c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d128      	bne.n	8002084 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002032:	4b17      	ldr	r3, [pc, #92]	@ (8002090 <HAL_SPI_MspInit+0x80>)
 8002034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002036:	4a16      	ldr	r2, [pc, #88]	@ (8002090 <HAL_SPI_MspInit+0x80>)
 8002038:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800203c:	6593      	str	r3, [r2, #88]	@ 0x58
 800203e:	4b14      	ldr	r3, [pc, #80]	@ (8002090 <HAL_SPI_MspInit+0x80>)
 8002040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002042:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800204a:	4b11      	ldr	r3, [pc, #68]	@ (8002090 <HAL_SPI_MspInit+0x80>)
 800204c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204e:	4a10      	ldr	r2, [pc, #64]	@ (8002090 <HAL_SPI_MspInit+0x80>)
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002056:	4b0e      	ldr	r3, [pc, #56]	@ (8002090 <HAL_SPI_MspInit+0x80>)
 8002058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002062:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002070:	2300      	movs	r3, #0
 8002072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002074:	2305      	movs	r3, #5
 8002076:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	4619      	mov	r1, r3
 800207e:	4805      	ldr	r0, [pc, #20]	@ (8002094 <HAL_SPI_MspInit+0x84>)
 8002080:	f001 ff86 	bl	8003f90 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002084:	bf00      	nop
 8002086:	3728      	adds	r7, #40	@ 0x28
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40003800 	.word	0x40003800
 8002090:	40021000 	.word	0x40021000
 8002094:	48000400 	.word	0x48000400

08002098 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002098:	b480      	push	{r7}
 800209a:	b087      	sub	sp, #28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002118 <HAL_TIM_PWM_MspInit+0x80>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d10c      	bne.n	80020c4 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020aa:	4b1c      	ldr	r3, [pc, #112]	@ (800211c <HAL_TIM_PWM_MspInit+0x84>)
 80020ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ae:	4a1b      	ldr	r2, [pc, #108]	@ (800211c <HAL_TIM_PWM_MspInit+0x84>)
 80020b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80020b6:	4b19      	ldr	r3, [pc, #100]	@ (800211c <HAL_TIM_PWM_MspInit+0x84>)
 80020b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 80020c2:	e022      	b.n	800210a <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM2)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020cc:	d10c      	bne.n	80020e8 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020ce:	4b13      	ldr	r3, [pc, #76]	@ (800211c <HAL_TIM_PWM_MspInit+0x84>)
 80020d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d2:	4a12      	ldr	r2, [pc, #72]	@ (800211c <HAL_TIM_PWM_MspInit+0x84>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80020da:	4b10      	ldr	r3, [pc, #64]	@ (800211c <HAL_TIM_PWM_MspInit+0x84>)
 80020dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	693b      	ldr	r3, [r7, #16]
}
 80020e6:	e010      	b.n	800210a <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a0c      	ldr	r2, [pc, #48]	@ (8002120 <HAL_TIM_PWM_MspInit+0x88>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d10b      	bne.n	800210a <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80020f2:	4b0a      	ldr	r3, [pc, #40]	@ (800211c <HAL_TIM_PWM_MspInit+0x84>)
 80020f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f6:	4a09      	ldr	r2, [pc, #36]	@ (800211c <HAL_TIM_PWM_MspInit+0x84>)
 80020f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80020fe:	4b07      	ldr	r3, [pc, #28]	@ (800211c <HAL_TIM_PWM_MspInit+0x84>)
 8002100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002102:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
}
 800210a:	bf00      	nop
 800210c:	371c      	adds	r7, #28
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40012c00 	.word	0x40012c00
 800211c:	40021000 	.word	0x40021000
 8002120:	40013400 	.word	0x40013400

08002124 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08a      	sub	sp, #40	@ 0x28
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a35      	ldr	r2, [pc, #212]	@ (8002218 <HAL_TIM_MspPostInit+0xf4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d11e      	bne.n	8002184 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002146:	4b35      	ldr	r3, [pc, #212]	@ (800221c <HAL_TIM_MspPostInit+0xf8>)
 8002148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800214a:	4a34      	ldr	r2, [pc, #208]	@ (800221c <HAL_TIM_MspPostInit+0xf8>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002152:	4b32      	ldr	r3, [pc, #200]	@ (800221c <HAL_TIM_MspPostInit+0xf8>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM2_Pin|PWM1_Pin;
 800215e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216c:	2300      	movs	r3, #0
 800216e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002170:	2306      	movs	r3, #6
 8002172:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002174:	f107 0314 	add.w	r3, r7, #20
 8002178:	4619      	mov	r1, r3
 800217a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800217e:	f001 ff07 	bl	8003f90 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002182:	e044      	b.n	800220e <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM2)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800218c:	d11d      	bne.n	80021ca <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218e:	4b23      	ldr	r3, [pc, #140]	@ (800221c <HAL_TIM_MspPostInit+0xf8>)
 8002190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002192:	4a22      	ldr	r2, [pc, #136]	@ (800221c <HAL_TIM_MspPostInit+0xf8>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800219a:	4b20      	ldr	r3, [pc, #128]	@ (800221c <HAL_TIM_MspPostInit+0xf8>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RIGHT_STEP_Pin|LEFT_STEP_Pin;
 80021a6:	2322      	movs	r3, #34	@ 0x22
 80021a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b2:	2300      	movs	r3, #0
 80021b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021b6:	2301      	movs	r3, #1
 80021b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	4619      	mov	r1, r3
 80021c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021c4:	f001 fee4 	bl	8003f90 <HAL_GPIO_Init>
}
 80021c8:	e021      	b.n	800220e <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM8)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a14      	ldr	r2, [pc, #80]	@ (8002220 <HAL_TIM_MspPostInit+0xfc>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d11c      	bne.n	800220e <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d4:	4b11      	ldr	r3, [pc, #68]	@ (800221c <HAL_TIM_MspPostInit+0xf8>)
 80021d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d8:	4a10      	ldr	r2, [pc, #64]	@ (800221c <HAL_TIM_MspPostInit+0xf8>)
 80021da:	f043 0304 	orr.w	r3, r3, #4
 80021de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021e0:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <HAL_TIM_MspPostInit+0xf8>)
 80021e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM6_Pin|PWM5_Pin|PWM4_Pin|PWM3_Pin;
 80021ec:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80021f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f2:	2302      	movs	r3, #2
 80021f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	2300      	movs	r3, #0
 80021fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80021fe:	2304      	movs	r3, #4
 8002200:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002202:	f107 0314 	add.w	r3, r7, #20
 8002206:	4619      	mov	r1, r3
 8002208:	4806      	ldr	r0, [pc, #24]	@ (8002224 <HAL_TIM_MspPostInit+0x100>)
 800220a:	f001 fec1 	bl	8003f90 <HAL_GPIO_Init>
}
 800220e:	bf00      	nop
 8002210:	3728      	adds	r7, #40	@ 0x28
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40012c00 	.word	0x40012c00
 800221c:	40021000 	.word	0x40021000
 8002220:	40013400 	.word	0x40013400
 8002224:	48000800 	.word	0x48000800

08002228 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b0a0      	sub	sp, #128	@ 0x80
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002240:	f107 031c 	add.w	r3, r7, #28
 8002244:	2250      	movs	r2, #80	@ 0x50
 8002246:	2100      	movs	r1, #0
 8002248:	4618      	mov	r0, r3
 800224a:	f00b fbfa 	bl	800da42 <memset>
  if(huart->Instance==USART1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a3d      	ldr	r2, [pc, #244]	@ (8002348 <HAL_UART_MspInit+0x120>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d136      	bne.n	80022c6 <HAL_UART_MspInit+0x9e>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002258:	2301      	movs	r3, #1
 800225a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800225c:	2300      	movs	r3, #0
 800225e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002260:	f107 031c 	add.w	r3, r7, #28
 8002264:	4618      	mov	r0, r3
 8002266:	f004 fb33 	bl	80068d0 <HAL_RCCEx_PeriphCLKConfig>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002270:	f7ff fd1e 	bl	8001cb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002274:	4b35      	ldr	r3, [pc, #212]	@ (800234c <HAL_UART_MspInit+0x124>)
 8002276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002278:	4a34      	ldr	r2, [pc, #208]	@ (800234c <HAL_UART_MspInit+0x124>)
 800227a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800227e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002280:	4b32      	ldr	r3, [pc, #200]	@ (800234c <HAL_UART_MspInit+0x124>)
 8002282:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002284:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002288:	61bb      	str	r3, [r7, #24]
 800228a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800228c:	4b2f      	ldr	r3, [pc, #188]	@ (800234c <HAL_UART_MspInit+0x124>)
 800228e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002290:	4a2e      	ldr	r2, [pc, #184]	@ (800234c <HAL_UART_MspInit+0x124>)
 8002292:	f043 0304 	orr.w	r3, r3, #4
 8002296:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002298:	4b2c      	ldr	r3, [pc, #176]	@ (800234c <HAL_UART_MspInit+0x124>)
 800229a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STEPPER_TX_Pin|STEPPER_RX_Pin;
 80022a4:	2330      	movs	r3, #48	@ 0x30
 80022a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a8:	2302      	movs	r3, #2
 80022aa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b0:	2300      	movs	r3, #0
 80022b2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022b4:	2307      	movs	r3, #7
 80022b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022b8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80022bc:	4619      	mov	r1, r3
 80022be:	4824      	ldr	r0, [pc, #144]	@ (8002350 <HAL_UART_MspInit+0x128>)
 80022c0:	f001 fe66 	bl	8003f90 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80022c4:	e03b      	b.n	800233e <HAL_UART_MspInit+0x116>
  else if(huart->Instance==USART2)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a22      	ldr	r2, [pc, #136]	@ (8002354 <HAL_UART_MspInit+0x12c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d136      	bne.n	800233e <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80022d0:	2302      	movs	r3, #2
 80022d2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80022d4:	2300      	movs	r3, #0
 80022d6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022d8:	f107 031c 	add.w	r3, r7, #28
 80022dc:	4618      	mov	r0, r3
 80022de:	f004 faf7 	bl	80068d0 <HAL_RCCEx_PeriphCLKConfig>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <HAL_UART_MspInit+0xc4>
      Error_Handler();
 80022e8:	f7ff fce2 	bl	8001cb0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022ec:	4b17      	ldr	r3, [pc, #92]	@ (800234c <HAL_UART_MspInit+0x124>)
 80022ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f0:	4a16      	ldr	r2, [pc, #88]	@ (800234c <HAL_UART_MspInit+0x124>)
 80022f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80022f8:	4b14      	ldr	r3, [pc, #80]	@ (800234c <HAL_UART_MspInit+0x124>)
 80022fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002304:	4b11      	ldr	r3, [pc, #68]	@ (800234c <HAL_UART_MspInit+0x124>)
 8002306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002308:	4a10      	ldr	r2, [pc, #64]	@ (800234c <HAL_UART_MspInit+0x124>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002310:	4b0e      	ldr	r3, [pc, #56]	@ (800234c <HAL_UART_MspInit+0x124>)
 8002312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 800231c:	230c      	movs	r3, #12
 800231e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002320:	2302      	movs	r3, #2
 8002322:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002328:	2300      	movs	r3, #0
 800232a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800232c:	2307      	movs	r3, #7
 800232e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002330:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002334:	4619      	mov	r1, r3
 8002336:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800233a:	f001 fe29 	bl	8003f90 <HAL_GPIO_Init>
}
 800233e:	bf00      	nop
 8002340:	3780      	adds	r7, #128	@ 0x80
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40013800 	.word	0x40013800
 800234c:	40021000 	.word	0x40021000
 8002350:	48000800 	.word	0x48000800
 8002354:	40004400 	.word	0x40004400

08002358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800235c:	bf00      	nop
 800235e:	e7fd      	b.n	800235c <NMI_Handler+0x4>

08002360 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002364:	bf00      	nop
 8002366:	e7fd      	b.n	8002364 <HardFault_Handler+0x4>

08002368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800236c:	bf00      	nop
 800236e:	e7fd      	b.n	800236c <MemManage_Handler+0x4>

08002370 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002374:	bf00      	nop
 8002376:	e7fd      	b.n	8002374 <BusFault_Handler+0x4>

08002378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800237c:	bf00      	nop
 800237e:	e7fd      	b.n	800237c <UsageFault_Handler+0x4>

08002380 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023ae:	f000 fb33 	bl	8002a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80023bc:	4802      	ldr	r0, [pc, #8]	@ (80023c8 <USB_LP_IRQHandler+0x10>)
 80023be:	f002 f8a3 	bl	8004508 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20001c2c 	.word	0x20001c2c

080023cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return 1;
 80023d0:	2301      	movs	r3, #1
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <_kill>:

int _kill(int pid, int sig)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023e6:	f00b fb7f 	bl	800dae8 <__errno>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2216      	movs	r2, #22
 80023ee:	601a      	str	r2, [r3, #0]
  return -1;
 80023f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <_exit>:

void _exit (int status)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002404:	f04f 31ff 	mov.w	r1, #4294967295
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ffe7 	bl	80023dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800240e:	bf00      	nop
 8002410:	e7fd      	b.n	800240e <_exit+0x12>

08002412 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b086      	sub	sp, #24
 8002416:	af00      	add	r7, sp, #0
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	e00a      	b.n	800243a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002424:	f3af 8000 	nop.w
 8002428:	4601      	mov	r1, r0
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	60ba      	str	r2, [r7, #8]
 8002430:	b2ca      	uxtb	r2, r1
 8002432:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	3301      	adds	r3, #1
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	429a      	cmp	r2, r3
 8002440:	dbf0      	blt.n	8002424 <_read+0x12>
  }

  return len;
 8002442:	687b      	ldr	r3, [r7, #4]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	e009      	b.n	8002472 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	60ba      	str	r2, [r7, #8]
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	3301      	adds	r3, #1
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	429a      	cmp	r2, r3
 8002478:	dbf1      	blt.n	800245e <_write+0x12>
  }
  return len;
 800247a:	687b      	ldr	r3, [r7, #4]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <_close>:

int _close(int file)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800248c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002490:	4618      	mov	r0, r3
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024ac:	605a      	str	r2, [r3, #4]
  return 0;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <_isatty>:

int _isatty(int file)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024c4:	2301      	movs	r3, #1
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b085      	sub	sp, #20
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	60f8      	str	r0, [r7, #12]
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024f4:	4a14      	ldr	r2, [pc, #80]	@ (8002548 <_sbrk+0x5c>)
 80024f6:	4b15      	ldr	r3, [pc, #84]	@ (800254c <_sbrk+0x60>)
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002500:	4b13      	ldr	r3, [pc, #76]	@ (8002550 <_sbrk+0x64>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d102      	bne.n	800250e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002508:	4b11      	ldr	r3, [pc, #68]	@ (8002550 <_sbrk+0x64>)
 800250a:	4a12      	ldr	r2, [pc, #72]	@ (8002554 <_sbrk+0x68>)
 800250c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800250e:	4b10      	ldr	r3, [pc, #64]	@ (8002550 <_sbrk+0x64>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	429a      	cmp	r2, r3
 800251a:	d207      	bcs.n	800252c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800251c:	f00b fae4 	bl	800dae8 <__errno>
 8002520:	4603      	mov	r3, r0
 8002522:	220c      	movs	r2, #12
 8002524:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002526:	f04f 33ff 	mov.w	r3, #4294967295
 800252a:	e009      	b.n	8002540 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800252c:	4b08      	ldr	r3, [pc, #32]	@ (8002550 <_sbrk+0x64>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002532:	4b07      	ldr	r3, [pc, #28]	@ (8002550 <_sbrk+0x64>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	4a05      	ldr	r2, [pc, #20]	@ (8002550 <_sbrk+0x64>)
 800253c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800253e:	68fb      	ldr	r3, [r7, #12]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	2001c000 	.word	0x2001c000
 800254c:	00000400 	.word	0x00000400
 8002550:	20000710 	.word	0x20000710
 8002554:	20002278 	.word	0x20002278

08002558 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800255c:	4b06      	ldr	r3, [pc, #24]	@ (8002578 <SystemInit+0x20>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002562:	4a05      	ldr	r2, [pc, #20]	@ (8002578 <SystemInit+0x20>)
 8002564:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002568:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <tmc2209_new>:
/**
 *
 *
 */

tmc2209_t tmc2209_new(TIM_HandleTypeDef *stepTimer, uint32_t stepTimerChannel, uint16_t dirPin, GPIO_TypeDef *dirPort, UART_HandleTypeDef *uart, uint8_t uartAddr) {
 800257c:	b580      	push	{r7, lr}
 800257e:	b0a6      	sub	sp, #152	@ 0x98
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
 8002588:	807b      	strh	r3, [r7, #2]
	tmc2209_t newMotor = {
 800258a:	f107 0314 	add.w	r3, r7, #20
 800258e:	2278      	movs	r2, #120	@ 0x78
 8002590:	2100      	movs	r1, #0
 8002592:	4618      	mov	r0, r3
 8002594:	f00b fa55 	bl	800da42 <memset>
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	61bb      	str	r3, [r7, #24]
 80025a0:	887b      	ldrh	r3, [r7, #2]
 80025a2:	83bb      	strh	r3, [r7, #28]
 80025a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025a8:	623b      	str	r3, [r7, #32]
 80025aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80025b0:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 80025b4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	/*
	 * Set initial register states
	 */

	//HAL_GPIO_WritePin(stepPort, stepPin, 0);
	HAL_GPIO_WritePin(dirPort, dirPin, 0);
 80025b8:	887b      	ldrh	r3, [r7, #2]
 80025ba:	2200      	movs	r2, #0
 80025bc:	4619      	mov	r1, r3
 80025be:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80025c2:	f001 fe7f 	bl	80042c4 <HAL_GPIO_WritePin>

	/*
	 * Configure driver using UART
	 */
	// General registers
	newMotor.gconf =	TMC2209_internal_rsense |
 80025c6:	23e3      	movs	r3, #227	@ 0xe3
 80025c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 						TMC2209_pdn_disable | // Use UART
						TMC2209_index_step | // INDEX output shows pulse each step
//						TMC2209_en_SpreadCycle | // 0: StealthChop 1: SpreadCycle
						TMC2209_mstep_reg_select;// Select micro-steps with UART

	tmc2209_set_GCONF(&newMotor);
 80025ca:	f107 0314 	add.w	r3, r7, #20
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 f887 	bl	80026e2 <tmc2209_set_GCONF>

	// CHOPCONF
	newMotor.chopconf = 	TMC2209_CHOPCONF_MRES_16 |	// Micro-step resolution
 80025d4:	4b27      	ldr	r3, [pc, #156]	@ (8002674 <tmc2209_new+0xf8>)
 80025d6:	67bb      	str	r3, [r7, #120]	@ 0x78
							TMC2209_CHOPCONF_vsense |
							TMC2209_CHOPCONF_HEND_n1 |	// Hysteresis end
							TMC2209_CHOPCONF_HSTRT_2 |	// Hysteresis_start
							TMC2209_CHOPCONF_TOFF_10;	// Off time

	tmc2209_set_CHOPCONF(&newMotor);
 80025d8:	f107 0314 	add.w	r3, r7, #20
 80025dc:	4618      	mov	r0, r3
 80025de:	f000 f913 	bl	8002808 <tmc2209_set_CHOPCONF>


	//	st.rms_current(mA, hold_multiplier);

	// Currents
	uint32_t newHoldCurrent = 10; // 0: Free wheel/passive breaking
 80025e2:	230a      	movs	r3, #10
 80025e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	uint32_t newRunCurrent = 10; // 0=1/32 … 31=32/32
 80025e8:	230a      	movs	r3, #10
 80025ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	uint32_t newHoldDelay = 5; // 0: instant power down
 80025ee:	2305      	movs	r3, #5
 80025f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	newMotor.ihold_irun =	newHoldCurrent |
							(newRunCurrent << 8) |
 80025f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80025f8:	021a      	lsls	r2, r3, #8
	newMotor.ihold_irun =	newHoldCurrent |
 80025fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80025fe:	431a      	orrs	r2, r3
							(newHoldDelay << 16);
 8002600:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002604:	041b      	lsls	r3, r3, #16
							(newRunCurrent << 8) |
 8002606:	4313      	orrs	r3, r2
	newMotor.ihold_irun =	newHoldCurrent |
 8002608:	64fb      	str	r3, [r7, #76]	@ 0x4c
	tmc2209_set_IHOLD_IRUN(&newMotor);
 800260a:	f107 0314 	add.w	r3, r7, #20
 800260e:	4618      	mov	r0, r3
 8002610:	f000 f894 	bl	800273c <tmc2209_set_IHOLD_IRUN>

	// TPOWERDOWN
	newMotor.tpowerdown = 128;	// ~2s until driver lowers to hold current
 8002614:	2380      	movs	r3, #128	@ 0x80
 8002616:	653b      	str	r3, [r7, #80]	@ 0x50
	tmc2209_set_TPOWERDOWN(&newMotor);
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	4618      	mov	r0, r3
 800261e:	f000 f8a4 	bl	800276a <tmc2209_set_TPOWERDOWN>

	// Values mostly taken from the Marlin default
	newMotor.pwmconf = 	(((uint32_t) 12 << TMC2209_PWMCONF_PWM_LIM_shift) & TMC2209_PWMCONF_PWM_LIM) |
 8002622:	4b15      	ldr	r3, [pc, #84]	@ (8002678 <tmc2209_new+0xfc>)
 8002624:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
						TMC2209_PWMCONF_pwm_autoscale |
						TMC2209_PWMCONF_freewheel_normal |
						TMC2209_PWMCONF_pwm_freq_2_1024 |
						(((uint32_t) 14 << TMC2209_PWMCONF_PWM_GRAD_shift) & TMC2209_PWMCONF_PWM_GRAD) |
						(((uint32_t) 36 << TMC2209_PWMCONF_PWM_OFS_shift) & TMC2209_PWMCONF_PWM_OFS)  ;
	tmc2209_set_PWMCONF(&newMotor);
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	4618      	mov	r0, r3
 800262e:	f000 f902 	bl	8002836 <tmc2209_set_PWMCONF>
	// VACTUAL is for UART constantly velocity driving, turn off -> 0x00000000
	// DO NOT RUN THESE LINES IF YOU WANT TO USE STEP/DIR
//	newMotor.vactual = 0x00000000 & TMC2209_VACTUAL;
//	tmc2209_set_VACTUAL(&newMotor);

	newMotor.tpwmthrs = 0x00000000;
 8002632:	2300      	movs	r3, #0
 8002634:	65bb      	str	r3, [r7, #88]	@ 0x58
	tmc2209_set_TPWMTHRS(&newMotor);
 8002636:	f107 0314 	add.w	r3, r7, #20
 800263a:	4618      	mov	r0, r3
 800263c:	f000 f8ac 	bl	8002798 <tmc2209_set_TPWMTHRS>


	// Reset statistics
	tmc2209_reset_GSTAT(&newMotor);
 8002640:	f107 0314 	add.w	r3, r7, #20
 8002644:	4618      	mov	r0, r3
 8002646:	f000 f863 	bl	8002710 <tmc2209_reset_GSTAT>


	HAL_Delay(500);
 800264a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800264e:	f000 fa01 	bl	8002a54 <HAL_Delay>
	tmc2209_on(&newMotor);
 8002652:	f107 0314 	add.w	r3, r7, #20
 8002656:	4618      	mov	r0, r3
 8002658:	f000 f904 	bl	8002864 <tmc2209_on>

	return newMotor;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4618      	mov	r0, r3
 8002660:	f107 0314 	add.w	r3, r7, #20
 8002664:	2278      	movs	r2, #120	@ 0x78
 8002666:	4619      	mov	r1, r3
 8002668:	f00b fa6b 	bl	800db42 <memcpy>
}
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	3798      	adds	r7, #152	@ 0x98
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	1403811a 	.word	0x1403811a
 8002678:	c80c0e24 	.word	0xc80c0e24

0800267c <tmc2209_write>:


/**
 *
 */
void tmc2209_write(tmc2209_t *tmc, tmc2209_write_t writeDatagram) {
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	1d3b      	adds	r3, r7, #4
 8002686:	e883 0006 	stmia.w	r3, {r1, r2}

	uint8_t msg[TMC2209_WRITE_DATAGRAM_LENGTH];

	msg[0] = TMC2209_SYNC_BYTE;
 800268a:	2305      	movs	r3, #5
 800268c:	743b      	strb	r3, [r7, #16]
	msg[1] = writeDatagram.slaveAddress;
 800268e:	793b      	ldrb	r3, [r7, #4]
 8002690:	747b      	strb	r3, [r7, #17]
	msg[2] = writeDatagram.registerAddress | TMC2209_RW_WRITE;
 8002692:	797b      	ldrb	r3, [r7, #5]
 8002694:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002698:	b2db      	uxtb	r3, r3
 800269a:	74bb      	strb	r3, [r7, #18]
	msg[3] = (uint8_t)((writeDatagram.data >> 24) & 0x000000ff);
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	0e1b      	lsrs	r3, r3, #24
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	74fb      	strb	r3, [r7, #19]
	msg[4] = (uint8_t)((writeDatagram.data >> 16) & 0x000000ff);
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	0c1b      	lsrs	r3, r3, #16
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	753b      	strb	r3, [r7, #20]
	msg[5] = (uint8_t)((writeDatagram.data >> 8) & 0x000000ff);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	0a1b      	lsrs	r3, r3, #8
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	757b      	strb	r3, [r7, #21]
	msg[6] = (uint8_t)(writeDatagram.data & 0x000000ff);
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	75bb      	strb	r3, [r7, #22]
	msg[7] = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	75fb      	strb	r3, [r7, #23]
	tmc2209_calculateCRC(msg, TMC2209_WRITE_DATAGRAM_LENGTH);
 80026be:	f107 0310 	add.w	r3, r7, #16
 80026c2:	2108      	movs	r1, #8
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 f8dd 	bl	8002884 <tmc2209_calculateCRC>

	HAL_UART_Transmit(tmc->uart, msg, TMC2209_WRITE_DATAGRAM_LENGTH, TMC2209_UART_TIMEOUT);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6918      	ldr	r0, [r3, #16]
 80026ce:	f107 0110 	add.w	r1, r7, #16
 80026d2:	2364      	movs	r3, #100	@ 0x64
 80026d4:	2208      	movs	r2, #8
 80026d6:	f005 fbc5 	bl	8007e64 <HAL_UART_Transmit>
}
 80026da:	bf00      	nop
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <tmc2209_set_GCONF>:

/**
 *	@function tmc2209_setGCONF
 *	@brief programs CGONF register
 */
void tmc2209_set_GCONF(tmc2209_t *tmc) {
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b084      	sub	sp, #16
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
	tmc2209_write_t msg = {
		.slaveAddress = tmc->uartAddr,
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	7d1b      	ldrb	r3, [r3, #20]
	tmc2209_write_t msg = {
 80026ee:	723b      	strb	r3, [r7, #8]
 80026f0:	2300      	movs	r3, #0
 80026f2:	727b      	strb	r3, [r7, #9]
		.registerAddress = TMC2209_GCONF_ADDR,
		.data = tmc->gconf
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
	tmc2209_write_t msg = {
 80026f8:	60fb      	str	r3, [r7, #12]
  	};
	tmc2209_write(tmc, msg);
 80026fa:	f107 0308 	add.w	r3, r7, #8
 80026fe:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff ffba 	bl	800267c <tmc2209_write>
}
 8002708:	bf00      	nop
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <tmc2209_reset_GSTAT>:

/**
 *	@function tmc2209_reset GSTAT
 *	@brief Reset the status registers
 */
void tmc2209_reset_GSTAT(tmc2209_t *tmc){
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
	tmc2209_write_t msg = {
			.slaveAddress = tmc->uartAddr,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	7d1b      	ldrb	r3, [r3, #20]
	tmc2209_write_t msg = {
 800271c:	723b      	strb	r3, [r7, #8]
 800271e:	2301      	movs	r3, #1
 8002720:	727b      	strb	r3, [r7, #9]
 8002722:	2307      	movs	r3, #7
 8002724:	60fb      	str	r3, [r7, #12]
			.registerAddress = TMC2209_GSTAT_ADDR,
			.data = TMC2209_GSTAT_RESET
	  	};
		tmc2209_write(tmc, msg);
 8002726:	f107 0308 	add.w	r3, r7, #8
 800272a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff ffa4 	bl	800267c <tmc2209_write>
}
 8002734:	bf00      	nop
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <tmc2209_set_IHOLD_IRUN>:

/**
 *	@function tmc2209_setIHOLD_IRUN
 *	@brief Programs holding current, run current, and hold delay time
 */
void tmc2209_set_IHOLD_IRUN(tmc2209_t *tmc) {
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
	tmc2209_write_t msg = {
		.slaveAddress = tmc->uartAddr,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	7d1b      	ldrb	r3, [r3, #20]
	tmc2209_write_t msg = {
 8002748:	723b      	strb	r3, [r7, #8]
 800274a:	2310      	movs	r3, #16
 800274c:	727b      	strb	r3, [r7, #9]
		.registerAddress = TMC2209_IHOLD_IRUN_ADDR,
		.data = tmc->ihold_irun
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
	tmc2209_write_t msg = {
 8002752:	60fb      	str	r3, [r7, #12]
  	};
	tmc2209_write(tmc, msg);
 8002754:	f107 0308 	add.w	r3, r7, #8
 8002758:	e893 0006 	ldmia.w	r3, {r1, r2}
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff ff8d 	bl	800267c <tmc2209_write>
}
 8002762:	bf00      	nop
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <tmc2209_set_TPOWERDOWN>:

/**
 *	@function tmc2209_
 *	@brief
 */
void tmc2209_set_TPOWERDOWN(tmc2209_t *tmc){
 800276a:	b580      	push	{r7, lr}
 800276c:	b084      	sub	sp, #16
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
	tmc2209_write_t msg = {
		.slaveAddress = tmc->uartAddr,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	7d1b      	ldrb	r3, [r3, #20]
	tmc2209_write_t msg = {
 8002776:	723b      	strb	r3, [r7, #8]
 8002778:	2311      	movs	r3, #17
 800277a:	727b      	strb	r3, [r7, #9]
		.registerAddress = TMC2209_TPOWERDOWN_ADDR,
		.data = tmc->tpowerdown
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
	tmc2209_write_t msg = {
 8002780:	60fb      	str	r3, [r7, #12]
  	};
	tmc2209_write(tmc, msg);
 8002782:	f107 0308 	add.w	r3, r7, #8
 8002786:	e893 0006 	ldmia.w	r3, {r1, r2}
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff ff76 	bl	800267c <tmc2209_write>
}
 8002790:	bf00      	nop
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <tmc2209_set_TPWMTHRS>:

/**
 *	@function tmc2209_
 *	@brief
 */
void tmc2209_set_TPWMTHRS(tmc2209_t *tmc){
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
	tmc2209_write_t msg = {
		.slaveAddress = tmc->uartAddr,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	7d1b      	ldrb	r3, [r3, #20]
	tmc2209_write_t msg = {
 80027a4:	723b      	strb	r3, [r7, #8]
 80027a6:	2313      	movs	r3, #19
 80027a8:	727b      	strb	r3, [r7, #9]
		.registerAddress = TMC2209_TPWMTHRS_ADDR,
		.data = tmc->tpwmthrs
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
	tmc2209_write_t msg = {
 80027ae:	60fb      	str	r3, [r7, #12]
  	};
	tmc2209_write(tmc, msg);
 80027b0:	f107 0308 	add.w	r3, r7, #8
 80027b4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff ff5f 	bl	800267c <tmc2209_write>
}
 80027be:	bf00      	nop
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <tmc2209_set_VACTUAL>:

/**
 *	@function tmc2209_
 *	@brief
 */
void tmc2209_set_VACTUAL(tmc2209_t *tmc){
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b084      	sub	sp, #16
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
	// Max sure speed isn't above the maximum allowable
	if(tmc->vactual >= TMC2209_VACTUAL_MAX_P) {
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027d2:	f06f 427e 	mvn.w	r2, #4261412864	@ 0xfe000000
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d303      	bcc.n	80027e2 <tmc2209_set_VACTUAL+0x1c>
		tmc->vactual = TMC2209_VACTUAL_MAX_P;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f06f 427e 	mvn.w	r2, #4261412864	@ 0xfe000000
 80027e0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	tmc2209_write_t msg = {
		.slaveAddress = tmc->uartAddr,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	7d1b      	ldrb	r3, [r3, #20]
	tmc2209_write_t msg = {
 80027e6:	723b      	strb	r3, [r7, #8]
 80027e8:	2322      	movs	r3, #34	@ 0x22
 80027ea:	727b      	strb	r3, [r7, #9]
		.registerAddress = TMC2209_VACTUAL_ADDR,
		.data = tmc->vactual
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
	tmc2209_write_t msg = {
 80027f0:	60fb      	str	r3, [r7, #12]
  	};
	tmc2209_write(tmc, msg);
 80027f2:	f107 0308 	add.w	r3, r7, #8
 80027f6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff ff3e 	bl	800267c <tmc2209_write>
}
 8002800:	bf00      	nop
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <tmc2209_set_CHOPCONF>:

/**
 *	@function tmc2209_
 *	@brief
 */
void tmc2209_set_CHOPCONF(tmc2209_t *tmc){
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
	tmc2209_write_t msg = {
		.slaveAddress = tmc->uartAddr,
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	7d1b      	ldrb	r3, [r3, #20]
	tmc2209_write_t msg = {
 8002814:	723b      	strb	r3, [r7, #8]
 8002816:	236c      	movs	r3, #108	@ 0x6c
 8002818:	727b      	strb	r3, [r7, #9]
		.registerAddress = TMC2209_CHOPCONF_ADDR,
		.data = tmc->chopconf
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
	tmc2209_write_t msg = {
 800281e:	60fb      	str	r3, [r7, #12]
  	};
	tmc2209_write(tmc, msg);
 8002820:	f107 0308 	add.w	r3, r7, #8
 8002824:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff ff27 	bl	800267c <tmc2209_write>
}
 800282e:	bf00      	nop
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <tmc2209_set_PWMCONF>:

/**
 *	@function tmc2209_
 *	@brief
 */
void tmc2209_set_PWMCONF(tmc2209_t *tmc){
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
	tmc2209_write_t msg = {
		.slaveAddress = tmc->uartAddr,
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	7d1b      	ldrb	r3, [r3, #20]
	tmc2209_write_t msg = {
 8002842:	723b      	strb	r3, [r7, #8]
 8002844:	2370      	movs	r3, #112	@ 0x70
 8002846:	727b      	strb	r3, [r7, #9]
		.registerAddress = TMC2209_PWMCONF_ADDR,
		.data = tmc->pwmconf
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
	tmc2209_write_t msg = {
 800284c:	60fb      	str	r3, [r7, #12]
  	};
	tmc2209_write(tmc, msg);
 800284e:	f107 0308 	add.w	r3, r7, #8
 8002852:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff ff10 	bl	800267c <tmc2209_write>
}
 800285c:	bf00      	nop
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <tmc2209_on>:
}

/**
 *
 */
void tmc2209_on(tmc2209_t *tmc) {
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(tmc->stepTimer, tmc->stepTimerChannel);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	4619      	mov	r1, r3
 8002876:	4610      	mov	r0, r2
 8002878:	f004 fb68 	bl	8006f4c <HAL_TIM_PWM_Start>
}
 800287c:	bf00      	nop
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <tmc2209_calculateCRC>:


/**
 *
 */
void tmc2209_calculateCRC(uint8_t* datagram, uint8_t datagramLength){
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	70fb      	strb	r3, [r7, #3]
	// Taken from TMC2209 datasheet
	int i,j;
	uint8_t* crc = datagram + (datagramLength-1); // CRC located in last byte of message
 8002890:	78fb      	ldrb	r3, [r7, #3]
 8002892:	3b01      	subs	r3, #1
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	4413      	add	r3, r2
 8002898:	60bb      	str	r3, [r7, #8]
	uint8_t currentByte;
	*crc = 0;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
	for (i=0; i<(datagramLength-1); i++) { // Execute for all bytes of a message
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	e02f      	b.n	8002906 <tmc2209_calculateCRC+0x82>
		currentByte = datagram[i]; // Retrieve a byte to be sent from Array
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	4413      	add	r3, r2
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	73fb      	strb	r3, [r7, #15]
		for (j=0; j<8; j++) {
 80028b0:	2300      	movs	r3, #0
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	e021      	b.n	80028fa <tmc2209_calculateCRC+0x76>
			if ((*crc >> 7) ^ (currentByte&0x01)) // update CRC based result of XOR operation
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	09db      	lsrs	r3, r3, #7
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	461a      	mov	r2, r3
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d00b      	beq.n	80028e2 <tmc2209_calculateCRC+0x5e>
			{
				*crc = (*crc << 1) ^ 0x07;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	b25b      	sxtb	r3, r3
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	b25b      	sxtb	r3, r3
 80028d4:	f083 0307 	eor.w	r3, r3, #7
 80028d8:	b25b      	sxtb	r3, r3
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	701a      	strb	r2, [r3, #0]
 80028e0:	e005      	b.n	80028ee <tmc2209_calculateCRC+0x6a>
			}
			else
			{
				*crc = (*crc << 1);
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	701a      	strb	r2, [r3, #0]
			}
			currentByte = currentByte >> 1;
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
 80028f0:	085b      	lsrs	r3, r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
		for (j=0; j<8; j++) {
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	3301      	adds	r3, #1
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	2b07      	cmp	r3, #7
 80028fe:	ddda      	ble.n	80028b6 <tmc2209_calculateCRC+0x32>
	for (i=0; i<(datagramLength-1); i++) { // Execute for all bytes of a message
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	3301      	adds	r3, #1
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	78fb      	ldrb	r3, [r7, #3]
 8002908:	3b01      	subs	r3, #1
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	429a      	cmp	r2, r3
 800290e:	dbca      	blt.n	80028a6 <tmc2209_calculateCRC+0x22>
		} // for CRC bit
	} // for message byte
}
 8002910:	bf00      	nop
 8002912:	bf00      	nop
 8002914:	371c      	adds	r7, #28
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002920:	480d      	ldr	r0, [pc, #52]	@ (8002958 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002922:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002924:	480d      	ldr	r0, [pc, #52]	@ (800295c <LoopForever+0x6>)
  ldr r1, =_edata
 8002926:	490e      	ldr	r1, [pc, #56]	@ (8002960 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002928:	4a0e      	ldr	r2, [pc, #56]	@ (8002964 <LoopForever+0xe>)
  movs r3, #0
 800292a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800292c:	e002      	b.n	8002934 <LoopCopyDataInit>

0800292e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800292e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002932:	3304      	adds	r3, #4

08002934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002938:	d3f9      	bcc.n	800292e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800293a:	4a0b      	ldr	r2, [pc, #44]	@ (8002968 <LoopForever+0x12>)
  ldr r4, =_ebss
 800293c:	4c0b      	ldr	r4, [pc, #44]	@ (800296c <LoopForever+0x16>)
  movs r3, #0
 800293e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002940:	e001      	b.n	8002946 <LoopFillZerobss>

08002942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002944:	3204      	adds	r2, #4

08002946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002948:	d3fb      	bcc.n	8002942 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800294a:	f7ff fe05 	bl	8002558 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800294e:	f00b f8d1 	bl	800daf4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002952:	f7fe fb8d 	bl	8001070 <main>

08002956 <LoopForever>:

LoopForever:
    b LoopForever
 8002956:	e7fe      	b.n	8002956 <LoopForever>
  ldr   r0, =_estack
 8002958:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 800295c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002960:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 8002964:	080116d8 	.word	0x080116d8
  ldr r2, =_sbss
 8002968:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 800296c:	20002274 	.word	0x20002274

08002970 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002970:	e7fe      	b.n	8002970 <ADC1_2_IRQHandler>

08002972 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002978:	2300      	movs	r3, #0
 800297a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800297c:	2003      	movs	r0, #3
 800297e:	f001 f90b 	bl	8003b98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002982:	2000      	movs	r0, #0
 8002984:	f000 f80e 	bl	80029a4 <HAL_InitTick>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	71fb      	strb	r3, [r7, #7]
 8002992:	e001      	b.n	8002998 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002994:	f7ff fa12 	bl	8001dbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002998:	79fb      	ldrb	r3, [r7, #7]

}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80029b0:	4b16      	ldr	r3, [pc, #88]	@ (8002a0c <HAL_InitTick+0x68>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d022      	beq.n	80029fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80029b8:	4b15      	ldr	r3, [pc, #84]	@ (8002a10 <HAL_InitTick+0x6c>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4b13      	ldr	r3, [pc, #76]	@ (8002a0c <HAL_InitTick+0x68>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80029c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80029c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029cc:	4618      	mov	r0, r3
 80029ce:	f001 f916 	bl	8003bfe <HAL_SYSTICK_Config>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10f      	bne.n	80029f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b0f      	cmp	r3, #15
 80029dc:	d809      	bhi.n	80029f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029de:	2200      	movs	r2, #0
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	f04f 30ff 	mov.w	r0, #4294967295
 80029e6:	f001 f8e2 	bl	8003bae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002a14 <HAL_InitTick+0x70>)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	e007      	b.n	8002a02 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	73fb      	strb	r3, [r7, #15]
 80029f6:	e004      	b.n	8002a02 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
 80029fc:	e001      	b.n	8002a02 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20000008 	.word	0x20000008
 8002a10:	20000000 	.word	0x20000000
 8002a14:	20000004 	.word	0x20000004

08002a18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a1c:	4b05      	ldr	r3, [pc, #20]	@ (8002a34 <HAL_IncTick+0x1c>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4b05      	ldr	r3, [pc, #20]	@ (8002a38 <HAL_IncTick+0x20>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4413      	add	r3, r2
 8002a26:	4a03      	ldr	r2, [pc, #12]	@ (8002a34 <HAL_IncTick+0x1c>)
 8002a28:	6013      	str	r3, [r2, #0]
}
 8002a2a:	bf00      	nop
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	20000714 	.word	0x20000714
 8002a38:	20000008 	.word	0x20000008

08002a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a40:	4b03      	ldr	r3, [pc, #12]	@ (8002a50 <HAL_GetTick+0x14>)
 8002a42:	681b      	ldr	r3, [r3, #0]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	20000714 	.word	0x20000714

08002a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a5c:	f7ff ffee 	bl	8002a3c <HAL_GetTick>
 8002a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6c:	d004      	beq.n	8002a78 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a6e:	4b09      	ldr	r3, [pc, #36]	@ (8002a94 <HAL_Delay+0x40>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4413      	add	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a78:	bf00      	nop
 8002a7a:	f7ff ffdf 	bl	8002a3c <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d8f7      	bhi.n	8002a7a <HAL_Delay+0x26>
  {
  }
}
 8002a8a:	bf00      	nop
 8002a8c:	bf00      	nop
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20000008 	.word	0x20000008

08002a98 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	431a      	orrs	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	609a      	str	r2, [r3, #8]
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
 8002b0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	3360      	adds	r3, #96	@ 0x60
 8002b12:	461a      	mov	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4b08      	ldr	r3, [pc, #32]	@ (8002b44 <LL_ADC_SetOffset+0x44>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002b38:	bf00      	nop
 8002b3a:	371c      	adds	r7, #28
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	03fff000 	.word	0x03fff000

08002b48 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3360      	adds	r3, #96	@ 0x60
 8002b56:	461a      	mov	r2, r3
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	3360      	adds	r3, #96	@ 0x60
 8002b84:	461a      	mov	r2, r3
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002b9e:	bf00      	nop
 8002ba0:	371c      	adds	r7, #28
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b087      	sub	sp, #28
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	3360      	adds	r3, #96	@ 0x60
 8002bba:	461a      	mov	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002bd4:	bf00      	nop
 8002bd6:	371c      	adds	r7, #28
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	3360      	adds	r3, #96	@ 0x60
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	431a      	orrs	r2, r3
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002c0a:	bf00      	nop
 8002c0c:	371c      	adds	r7, #28
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	615a      	str	r2, [r3, #20]
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	3330      	adds	r3, #48	@ 0x30
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	0a1b      	lsrs	r3, r3, #8
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	f003 030c 	and.w	r3, r3, #12
 8002c58:	4413      	add	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f003 031f 	and.w	r3, r3, #31
 8002c66:	211f      	movs	r1, #31
 8002c68:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	401a      	ands	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	0e9b      	lsrs	r3, r3, #26
 8002c74:	f003 011f 	and.w	r1, r3, #31
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f003 031f 	and.w	r3, r3, #31
 8002c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c82:	431a      	orrs	r2, r3
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c88:	bf00      	nop
 8002c8a:	371c      	adds	r7, #28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	3314      	adds	r3, #20
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	0e5b      	lsrs	r3, r3, #25
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	4413      	add	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	0d1b      	lsrs	r3, r3, #20
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	2107      	movs	r1, #7
 8002cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	401a      	ands	r2, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	0d1b      	lsrs	r3, r3, #20
 8002cce:	f003 031f 	and.w	r3, r3, #31
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002cde:	bf00      	nop
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
	...

08002cec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d04:	43db      	mvns	r3, r3
 8002d06:	401a      	ands	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f003 0318 	and.w	r3, r3, #24
 8002d0e:	4908      	ldr	r1, [pc, #32]	@ (8002d30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d10:	40d9      	lsrs	r1, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	400b      	ands	r3, r1
 8002d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002d22:	bf00      	nop
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	0007ffff 	.word	0x0007ffff

08002d34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002d44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6093      	str	r3, [r2, #8]
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d6c:	d101      	bne.n	8002d72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002d90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d94:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dbc:	d101      	bne.n	8002dc2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <LL_ADC_IsEnabled+0x18>
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <LL_ADC_IsEnabled+0x1a>
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d101      	bne.n	8002e0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d101      	bne.n	8002e34 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e44:	b590      	push	{r4, r7, lr}
 8002e46:	b089      	sub	sp, #36	@ 0x24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e19b      	b.n	8003196 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d109      	bne.n	8002e80 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7fe ffc9 	bl	8001e04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff ff67 	bl	8002d58 <LL_ADC_IsDeepPowerDownEnabled>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d004      	beq.n	8002e9a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff ff4d 	bl	8002d34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff ff82 	bl	8002da8 <LL_ADC_IsInternalRegulatorEnabled>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d115      	bne.n	8002ed6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff ff66 	bl	8002d80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002eb4:	4b97      	ldr	r3, [pc, #604]	@ (8003114 <HAL_ADC_Init+0x2d0>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	099b      	lsrs	r3, r3, #6
 8002eba:	4a97      	ldr	r2, [pc, #604]	@ (8003118 <HAL_ADC_Init+0x2d4>)
 8002ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec0:	099b      	lsrs	r3, r3, #6
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ec8:	e002      	b.n	8002ed0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f9      	bne.n	8002eca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff ff64 	bl	8002da8 <LL_ADC_IsInternalRegulatorEnabled>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10d      	bne.n	8002f02 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eea:	f043 0210 	orr.w	r2, r3, #16
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ef6:	f043 0201 	orr.w	r2, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff ff75 	bl	8002df6 <LL_ADC_REG_IsConversionOngoing>
 8002f0c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f12:	f003 0310 	and.w	r3, r3, #16
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f040 8134 	bne.w	8003184 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f040 8130 	bne.w	8003184 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f28:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002f2c:	f043 0202 	orr.w	r2, r3, #2
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff ff49 	bl	8002dd0 <LL_ADC_IsEnabled>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d137      	bne.n	8002fb4 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f4c:	d004      	beq.n	8002f58 <HAL_ADC_Init+0x114>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a72      	ldr	r2, [pc, #456]	@ (800311c <HAL_ADC_Init+0x2d8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d10f      	bne.n	8002f78 <HAL_ADC_Init+0x134>
 8002f58:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002f5c:	f7ff ff38 	bl	8002dd0 <LL_ADC_IsEnabled>
 8002f60:	4604      	mov	r4, r0
 8002f62:	486e      	ldr	r0, [pc, #440]	@ (800311c <HAL_ADC_Init+0x2d8>)
 8002f64:	f7ff ff34 	bl	8002dd0 <LL_ADC_IsEnabled>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	4323      	orrs	r3, r4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	bf0c      	ite	eq
 8002f70:	2301      	moveq	r3, #1
 8002f72:	2300      	movne	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	e008      	b.n	8002f8a <HAL_ADC_Init+0x146>
 8002f78:	4869      	ldr	r0, [pc, #420]	@ (8003120 <HAL_ADC_Init+0x2dc>)
 8002f7a:	f7ff ff29 	bl	8002dd0 <LL_ADC_IsEnabled>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d012      	beq.n	8002fb4 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f96:	d004      	beq.n	8002fa2 <HAL_ADC_Init+0x15e>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a5f      	ldr	r2, [pc, #380]	@ (800311c <HAL_ADC_Init+0x2d8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d101      	bne.n	8002fa6 <HAL_ADC_Init+0x162>
 8002fa2:	4a60      	ldr	r2, [pc, #384]	@ (8003124 <HAL_ADC_Init+0x2e0>)
 8002fa4:	e000      	b.n	8002fa8 <HAL_ADC_Init+0x164>
 8002fa6:	4a60      	ldr	r2, [pc, #384]	@ (8003128 <HAL_ADC_Init+0x2e4>)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	4619      	mov	r1, r3
 8002fae:	4610      	mov	r0, r2
 8002fb0:	f7ff fd72 	bl	8002a98 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	7f5b      	ldrb	r3, [r3, #29]
 8002fb8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fbe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002fc4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002fca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fd2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d106      	bne.n	8002ff0 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	045b      	lsls	r3, r3, #17
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d009      	beq.n	800300c <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003004:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4313      	orrs	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	4b46      	ldr	r3, [pc, #280]	@ (800312c <HAL_ADC_Init+0x2e8>)
 8003014:	4013      	ands	r3, r2
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6812      	ldr	r2, [r2, #0]
 800301a:	69b9      	ldr	r1, [r7, #24]
 800301c:	430b      	orrs	r3, r1
 800301e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff feee 	bl	8002e1c <LL_ADC_INJ_IsConversionOngoing>
 8003040:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d17b      	bne.n	8003140 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d178      	bne.n	8003140 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003052:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800305a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800305c:	4313      	orrs	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800306a:	f023 0302 	bic.w	r3, r3, #2
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6812      	ldr	r2, [r2, #0]
 8003072:	69b9      	ldr	r1, [r7, #24]
 8003074:	430b      	orrs	r3, r1
 8003076:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d017      	beq.n	80030b0 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800308e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003098:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800309c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6911      	ldr	r1, [r2, #16]
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	430b      	orrs	r3, r1
 80030aa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80030ae:	e013      	b.n	80030d8 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80030be:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80030d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030d4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d126      	bne.n	8003130 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80030ec:	f023 0304 	bic.w	r3, r3, #4
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80030f8:	4311      	orrs	r1, r2
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80030fe:	4311      	orrs	r1, r2
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003104:	430a      	orrs	r2, r1
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 0201 	orr.w	r2, r2, #1
 8003110:	611a      	str	r2, [r3, #16]
 8003112:	e015      	b.n	8003140 <HAL_ADC_Init+0x2fc>
 8003114:	20000000 	.word	0x20000000
 8003118:	053e2d63 	.word	0x053e2d63
 800311c:	50000100 	.word	0x50000100
 8003120:	50000400 	.word	0x50000400
 8003124:	50000300 	.word	0x50000300
 8003128:	50000700 	.word	0x50000700
 800312c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691a      	ldr	r2, [r3, #16]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0201 	bic.w	r2, r2, #1
 800313e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d10c      	bne.n	8003162 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314e:	f023 010f 	bic.w	r1, r3, #15
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	1e5a      	subs	r2, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003160:	e007      	b.n	8003172 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 020f 	bic.w	r2, r2, #15
 8003170:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003176:	f023 0303 	bic.w	r3, r3, #3
 800317a:	f043 0201 	orr.w	r2, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003182:	e007      	b.n	8003194 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003188:	f043 0210 	orr.w	r2, r3, #16
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003194:	7ffb      	ldrb	r3, [r7, #31]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3724      	adds	r7, #36	@ 0x24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd90      	pop	{r4, r7, pc}
 800319e:	bf00      	nop

080031a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b0b6      	sub	sp, #216	@ 0xd8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d102      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x24>
 80031be:	2302      	movs	r3, #2
 80031c0:	f000 bc04 	b.w	80039cc <HAL_ADC_ConfigChannel+0x82c>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff fe10 	bl	8002df6 <LL_ADC_REG_IsConversionOngoing>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f040 83e8 	bne.w	80039ae <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	6859      	ldr	r1, [r3, #4]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	461a      	mov	r2, r3
 80031ec:	f7ff fd26 	bl	8002c3c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff fdfe 	bl	8002df6 <LL_ADC_REG_IsConversionOngoing>
 80031fa:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff fe0a 	bl	8002e1c <LL_ADC_INJ_IsConversionOngoing>
 8003208:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800320c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003210:	2b00      	cmp	r3, #0
 8003212:	f040 81d9 	bne.w	80035c8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003216:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800321a:	2b00      	cmp	r3, #0
 800321c:	f040 81d4 	bne.w	80035c8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003228:	d10f      	bne.n	800324a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2200      	movs	r2, #0
 8003234:	4619      	mov	r1, r3
 8003236:	f7ff fd2d 	bl	8002c94 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff fce7 	bl	8002c16 <LL_ADC_SetSamplingTimeCommonConfig>
 8003248:	e00e      	b.n	8003268 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	6819      	ldr	r1, [r3, #0]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	461a      	mov	r2, r3
 8003258:	f7ff fd1c 	bl	8002c94 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2100      	movs	r1, #0
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff fcd7 	bl	8002c16 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	695a      	ldr	r2, [r3, #20]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	08db      	lsrs	r3, r3, #3
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	2b04      	cmp	r3, #4
 8003288:	d022      	beq.n	80032d0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6818      	ldr	r0, [r3, #0]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	6919      	ldr	r1, [r3, #16]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800329a:	f7ff fc31 	bl	8002b00 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6818      	ldr	r0, [r3, #0]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	6919      	ldr	r1, [r3, #16]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	461a      	mov	r2, r3
 80032ac:	f7ff fc7d 	bl	8002baa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d102      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x126>
 80032c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032c4:	e000      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x128>
 80032c6:	2300      	movs	r3, #0
 80032c8:	461a      	mov	r2, r3
 80032ca:	f7ff fc89 	bl	8002be0 <LL_ADC_SetOffsetSaturation>
 80032ce:	e17b      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2100      	movs	r1, #0
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff fc36 	bl	8002b48 <LL_ADC_GetOffsetChannel>
 80032dc:	4603      	mov	r3, r0
 80032de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10a      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x15c>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2100      	movs	r1, #0
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fc2b 	bl	8002b48 <LL_ADC_GetOffsetChannel>
 80032f2:	4603      	mov	r3, r0
 80032f4:	0e9b      	lsrs	r3, r3, #26
 80032f6:	f003 021f 	and.w	r2, r3, #31
 80032fa:	e01e      	b.n	800333a <HAL_ADC_ConfigChannel+0x19a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2100      	movs	r1, #0
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff fc20 	bl	8002b48 <LL_ADC_GetOffsetChannel>
 8003308:	4603      	mov	r3, r0
 800330a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800331a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800331e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003322:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800332a:	2320      	movs	r3, #32
 800332c:	e004      	b.n	8003338 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800332e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003332:	fab3 f383 	clz	r3, r3
 8003336:	b2db      	uxtb	r3, r3
 8003338:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003342:	2b00      	cmp	r3, #0
 8003344:	d105      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x1b2>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	0e9b      	lsrs	r3, r3, #26
 800334c:	f003 031f 	and.w	r3, r3, #31
 8003350:	e018      	b.n	8003384 <HAL_ADC_ConfigChannel+0x1e4>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800335e:	fa93 f3a3 	rbit	r3, r3
 8003362:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003366:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800336a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800336e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003376:	2320      	movs	r3, #32
 8003378:	e004      	b.n	8003384 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800337a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800337e:	fab3 f383 	clz	r3, r3
 8003382:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003384:	429a      	cmp	r2, r3
 8003386:	d106      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2200      	movs	r2, #0
 800338e:	2100      	movs	r1, #0
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff fbef 	bl	8002b74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2101      	movs	r1, #1
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff fbd3 	bl	8002b48 <LL_ADC_GetOffsetChannel>
 80033a2:	4603      	mov	r3, r0
 80033a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10a      	bne.n	80033c2 <HAL_ADC_ConfigChannel+0x222>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2101      	movs	r1, #1
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff fbc8 	bl	8002b48 <LL_ADC_GetOffsetChannel>
 80033b8:	4603      	mov	r3, r0
 80033ba:	0e9b      	lsrs	r3, r3, #26
 80033bc:	f003 021f 	and.w	r2, r3, #31
 80033c0:	e01e      	b.n	8003400 <HAL_ADC_ConfigChannel+0x260>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2101      	movs	r1, #1
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff fbbd 	bl	8002b48 <LL_ADC_GetOffsetChannel>
 80033ce:	4603      	mov	r3, r0
 80033d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80033d8:	fa93 f3a3 	rbit	r3, r3
 80033dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80033e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80033e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80033e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80033f0:	2320      	movs	r3, #32
 80033f2:	e004      	b.n	80033fe <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80033f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80033f8:	fab3 f383 	clz	r3, r3
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003408:	2b00      	cmp	r3, #0
 800340a:	d105      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x278>
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	0e9b      	lsrs	r3, r3, #26
 8003412:	f003 031f 	and.w	r3, r3, #31
 8003416:	e018      	b.n	800344a <HAL_ADC_ConfigChannel+0x2aa>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003420:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003424:	fa93 f3a3 	rbit	r3, r3
 8003428:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800342c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003430:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003434:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800343c:	2320      	movs	r3, #32
 800343e:	e004      	b.n	800344a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003440:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003444:	fab3 f383 	clz	r3, r3
 8003448:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800344a:	429a      	cmp	r2, r3
 800344c:	d106      	bne.n	800345c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2200      	movs	r2, #0
 8003454:	2101      	movs	r1, #1
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff fb8c 	bl	8002b74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2102      	movs	r1, #2
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff fb70 	bl	8002b48 <LL_ADC_GetOffsetChannel>
 8003468:	4603      	mov	r3, r0
 800346a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10a      	bne.n	8003488 <HAL_ADC_ConfigChannel+0x2e8>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2102      	movs	r1, #2
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff fb65 	bl	8002b48 <LL_ADC_GetOffsetChannel>
 800347e:	4603      	mov	r3, r0
 8003480:	0e9b      	lsrs	r3, r3, #26
 8003482:	f003 021f 	and.w	r2, r3, #31
 8003486:	e01e      	b.n	80034c6 <HAL_ADC_ConfigChannel+0x326>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2102      	movs	r1, #2
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff fb5a 	bl	8002b48 <LL_ADC_GetOffsetChannel>
 8003494:	4603      	mov	r3, r0
 8003496:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800349e:	fa93 f3a3 	rbit	r3, r3
 80034a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80034a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80034ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80034b6:	2320      	movs	r3, #32
 80034b8:	e004      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80034ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80034be:	fab3 f383 	clz	r3, r3
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d105      	bne.n	80034de <HAL_ADC_ConfigChannel+0x33e>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	0e9b      	lsrs	r3, r3, #26
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	e016      	b.n	800350c <HAL_ADC_ConfigChannel+0x36c>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034ea:	fa93 f3a3 	rbit	r3, r3
 80034ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80034f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80034f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80034fe:	2320      	movs	r3, #32
 8003500:	e004      	b.n	800350c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003502:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003506:	fab3 f383 	clz	r3, r3
 800350a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800350c:	429a      	cmp	r2, r3
 800350e:	d106      	bne.n	800351e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2200      	movs	r2, #0
 8003516:	2102      	movs	r1, #2
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff fb2b 	bl	8002b74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2103      	movs	r1, #3
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff fb0f 	bl	8002b48 <LL_ADC_GetOffsetChannel>
 800352a:	4603      	mov	r3, r0
 800352c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10a      	bne.n	800354a <HAL_ADC_ConfigChannel+0x3aa>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2103      	movs	r1, #3
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff fb04 	bl	8002b48 <LL_ADC_GetOffsetChannel>
 8003540:	4603      	mov	r3, r0
 8003542:	0e9b      	lsrs	r3, r3, #26
 8003544:	f003 021f 	and.w	r2, r3, #31
 8003548:	e017      	b.n	800357a <HAL_ADC_ConfigChannel+0x3da>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2103      	movs	r1, #3
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff faf9 	bl	8002b48 <LL_ADC_GetOffsetChannel>
 8003556:	4603      	mov	r3, r0
 8003558:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800355c:	fa93 f3a3 	rbit	r3, r3
 8003560:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003562:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003564:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003566:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800356c:	2320      	movs	r3, #32
 800356e:	e003      	b.n	8003578 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003570:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003572:	fab3 f383 	clz	r3, r3
 8003576:	b2db      	uxtb	r3, r3
 8003578:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003582:	2b00      	cmp	r3, #0
 8003584:	d105      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x3f2>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	0e9b      	lsrs	r3, r3, #26
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	e011      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x416>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003598:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800359a:	fa93 f3a3 	rbit	r3, r3
 800359e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80035a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80035a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80035aa:	2320      	movs	r3, #32
 80035ac:	e003      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80035ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035b0:	fab3 f383 	clz	r3, r3
 80035b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d106      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2200      	movs	r2, #0
 80035c0:	2103      	movs	r1, #3
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff fad6 	bl	8002b74 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff fbff 	bl	8002dd0 <LL_ADC_IsEnabled>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f040 813d 	bne.w	8003854 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6818      	ldr	r0, [r3, #0]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	6819      	ldr	r1, [r3, #0]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	461a      	mov	r2, r3
 80035e8:	f7ff fb80 	bl	8002cec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	4aa2      	ldr	r2, [pc, #648]	@ (800387c <HAL_ADC_ConfigChannel+0x6dc>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	f040 812e 	bne.w	8003854 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10b      	bne.n	8003620 <HAL_ADC_ConfigChannel+0x480>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	0e9b      	lsrs	r3, r3, #26
 800360e:	3301      	adds	r3, #1
 8003610:	f003 031f 	and.w	r3, r3, #31
 8003614:	2b09      	cmp	r3, #9
 8003616:	bf94      	ite	ls
 8003618:	2301      	movls	r3, #1
 800361a:	2300      	movhi	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	e019      	b.n	8003654 <HAL_ADC_ConfigChannel+0x4b4>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003628:	fa93 f3a3 	rbit	r3, r3
 800362c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800362e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003630:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003632:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003638:	2320      	movs	r3, #32
 800363a:	e003      	b.n	8003644 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800363c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800363e:	fab3 f383 	clz	r3, r3
 8003642:	b2db      	uxtb	r3, r3
 8003644:	3301      	adds	r3, #1
 8003646:	f003 031f 	and.w	r3, r3, #31
 800364a:	2b09      	cmp	r3, #9
 800364c:	bf94      	ite	ls
 800364e:	2301      	movls	r3, #1
 8003650:	2300      	movhi	r3, #0
 8003652:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003654:	2b00      	cmp	r3, #0
 8003656:	d079      	beq.n	800374c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003660:	2b00      	cmp	r3, #0
 8003662:	d107      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x4d4>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	0e9b      	lsrs	r3, r3, #26
 800366a:	3301      	adds	r3, #1
 800366c:	069b      	lsls	r3, r3, #26
 800366e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003672:	e015      	b.n	80036a0 <HAL_ADC_ConfigChannel+0x500>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800367c:	fa93 f3a3 	rbit	r3, r3
 8003680:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003682:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003684:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800368c:	2320      	movs	r3, #32
 800368e:	e003      	b.n	8003698 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003692:	fab3 f383 	clz	r3, r3
 8003696:	b2db      	uxtb	r3, r3
 8003698:	3301      	adds	r3, #1
 800369a:	069b      	lsls	r3, r3, #26
 800369c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d109      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x520>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	0e9b      	lsrs	r3, r3, #26
 80036b2:	3301      	adds	r3, #1
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	2101      	movs	r1, #1
 80036ba:	fa01 f303 	lsl.w	r3, r1, r3
 80036be:	e017      	b.n	80036f0 <HAL_ADC_ConfigChannel+0x550>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036c8:	fa93 f3a3 	rbit	r3, r3
 80036cc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80036ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80036d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80036d8:	2320      	movs	r3, #32
 80036da:	e003      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80036dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036de:	fab3 f383 	clz	r3, r3
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	3301      	adds	r3, #1
 80036e6:	f003 031f 	and.w	r3, r3, #31
 80036ea:	2101      	movs	r1, #1
 80036ec:	fa01 f303 	lsl.w	r3, r1, r3
 80036f0:	ea42 0103 	orr.w	r1, r2, r3
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10a      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x576>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	0e9b      	lsrs	r3, r3, #26
 8003706:	3301      	adds	r3, #1
 8003708:	f003 021f 	and.w	r2, r3, #31
 800370c:	4613      	mov	r3, r2
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	4413      	add	r3, r2
 8003712:	051b      	lsls	r3, r3, #20
 8003714:	e018      	b.n	8003748 <HAL_ADC_ConfigChannel+0x5a8>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800371e:	fa93 f3a3 	rbit	r3, r3
 8003722:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003726:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800372e:	2320      	movs	r3, #32
 8003730:	e003      	b.n	800373a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003734:	fab3 f383 	clz	r3, r3
 8003738:	b2db      	uxtb	r3, r3
 800373a:	3301      	adds	r3, #1
 800373c:	f003 021f 	and.w	r2, r3, #31
 8003740:	4613      	mov	r3, r2
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	4413      	add	r3, r2
 8003746:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003748:	430b      	orrs	r3, r1
 800374a:	e07e      	b.n	800384a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003754:	2b00      	cmp	r3, #0
 8003756:	d107      	bne.n	8003768 <HAL_ADC_ConfigChannel+0x5c8>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	0e9b      	lsrs	r3, r3, #26
 800375e:	3301      	adds	r3, #1
 8003760:	069b      	lsls	r3, r3, #26
 8003762:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003766:	e015      	b.n	8003794 <HAL_ADC_ConfigChannel+0x5f4>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003770:	fa93 f3a3 	rbit	r3, r3
 8003774:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003778:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800377a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003780:	2320      	movs	r3, #32
 8003782:	e003      	b.n	800378c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003786:	fab3 f383 	clz	r3, r3
 800378a:	b2db      	uxtb	r3, r3
 800378c:	3301      	adds	r3, #1
 800378e:	069b      	lsls	r3, r3, #26
 8003790:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800379c:	2b00      	cmp	r3, #0
 800379e:	d109      	bne.n	80037b4 <HAL_ADC_ConfigChannel+0x614>
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	0e9b      	lsrs	r3, r3, #26
 80037a6:	3301      	adds	r3, #1
 80037a8:	f003 031f 	and.w	r3, r3, #31
 80037ac:	2101      	movs	r1, #1
 80037ae:	fa01 f303 	lsl.w	r3, r1, r3
 80037b2:	e017      	b.n	80037e4 <HAL_ADC_ConfigChannel+0x644>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	fa93 f3a3 	rbit	r3, r3
 80037c0:	61fb      	str	r3, [r7, #28]
  return result;
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80037c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80037cc:	2320      	movs	r3, #32
 80037ce:	e003      	b.n	80037d8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80037d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d2:	fab3 f383 	clz	r3, r3
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	3301      	adds	r3, #1
 80037da:	f003 031f 	and.w	r3, r3, #31
 80037de:	2101      	movs	r1, #1
 80037e0:	fa01 f303 	lsl.w	r3, r1, r3
 80037e4:	ea42 0103 	orr.w	r1, r2, r3
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10d      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x670>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	0e9b      	lsrs	r3, r3, #26
 80037fa:	3301      	adds	r3, #1
 80037fc:	f003 021f 	and.w	r2, r3, #31
 8003800:	4613      	mov	r3, r2
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	4413      	add	r3, r2
 8003806:	3b1e      	subs	r3, #30
 8003808:	051b      	lsls	r3, r3, #20
 800380a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800380e:	e01b      	b.n	8003848 <HAL_ADC_ConfigChannel+0x6a8>
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	fa93 f3a3 	rbit	r3, r3
 800381c:	613b      	str	r3, [r7, #16]
  return result;
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003828:	2320      	movs	r3, #32
 800382a:	e003      	b.n	8003834 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	fab3 f383 	clz	r3, r3
 8003832:	b2db      	uxtb	r3, r3
 8003834:	3301      	adds	r3, #1
 8003836:	f003 021f 	and.w	r2, r3, #31
 800383a:	4613      	mov	r3, r2
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	4413      	add	r3, r2
 8003840:	3b1e      	subs	r3, #30
 8003842:	051b      	lsls	r3, r3, #20
 8003844:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003848:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800384e:	4619      	mov	r1, r3
 8003850:	f7ff fa20 	bl	8002c94 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	4b09      	ldr	r3, [pc, #36]	@ (8003880 <HAL_ADC_ConfigChannel+0x6e0>)
 800385a:	4013      	ands	r3, r2
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 80af 	beq.w	80039c0 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800386a:	d004      	beq.n	8003876 <HAL_ADC_ConfigChannel+0x6d6>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a04      	ldr	r2, [pc, #16]	@ (8003884 <HAL_ADC_ConfigChannel+0x6e4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d10a      	bne.n	800388c <HAL_ADC_ConfigChannel+0x6ec>
 8003876:	4b04      	ldr	r3, [pc, #16]	@ (8003888 <HAL_ADC_ConfigChannel+0x6e8>)
 8003878:	e009      	b.n	800388e <HAL_ADC_ConfigChannel+0x6ee>
 800387a:	bf00      	nop
 800387c:	407f0000 	.word	0x407f0000
 8003880:	80080000 	.word	0x80080000
 8003884:	50000100 	.word	0x50000100
 8003888:	50000300 	.word	0x50000300
 800388c:	4b51      	ldr	r3, [pc, #324]	@ (80039d4 <HAL_ADC_ConfigChannel+0x834>)
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff f928 	bl	8002ae4 <LL_ADC_GetCommonPathInternalCh>
 8003894:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a4e      	ldr	r2, [pc, #312]	@ (80039d8 <HAL_ADC_ConfigChannel+0x838>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d004      	beq.n	80038ac <HAL_ADC_ConfigChannel+0x70c>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a4d      	ldr	r2, [pc, #308]	@ (80039dc <HAL_ADC_ConfigChannel+0x83c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d134      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d12e      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038c0:	d17e      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038ca:	d004      	beq.n	80038d6 <HAL_ADC_ConfigChannel+0x736>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a43      	ldr	r2, [pc, #268]	@ (80039e0 <HAL_ADC_ConfigChannel+0x840>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d101      	bne.n	80038da <HAL_ADC_ConfigChannel+0x73a>
 80038d6:	4a43      	ldr	r2, [pc, #268]	@ (80039e4 <HAL_ADC_ConfigChannel+0x844>)
 80038d8:	e000      	b.n	80038dc <HAL_ADC_ConfigChannel+0x73c>
 80038da:	4a3e      	ldr	r2, [pc, #248]	@ (80039d4 <HAL_ADC_ConfigChannel+0x834>)
 80038dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038e4:	4619      	mov	r1, r3
 80038e6:	4610      	mov	r0, r2
 80038e8:	f7ff f8e9 	bl	8002abe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038ec:	4b3e      	ldr	r3, [pc, #248]	@ (80039e8 <HAL_ADC_ConfigChannel+0x848>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	099b      	lsrs	r3, r3, #6
 80038f2:	4a3e      	ldr	r2, [pc, #248]	@ (80039ec <HAL_ADC_ConfigChannel+0x84c>)
 80038f4:	fba2 2303 	umull	r2, r3, r2, r3
 80038f8:	099b      	lsrs	r3, r3, #6
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	4613      	mov	r3, r2
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	4413      	add	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003906:	e002      	b.n	800390e <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	3b01      	subs	r3, #1
 800390c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1f9      	bne.n	8003908 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003914:	e054      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a35      	ldr	r2, [pc, #212]	@ (80039f0 <HAL_ADC_ConfigChannel+0x850>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d120      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003920:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003924:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d11a      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003934:	d144      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800393e:	d004      	beq.n	800394a <HAL_ADC_ConfigChannel+0x7aa>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a26      	ldr	r2, [pc, #152]	@ (80039e0 <HAL_ADC_ConfigChannel+0x840>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d101      	bne.n	800394e <HAL_ADC_ConfigChannel+0x7ae>
 800394a:	4a26      	ldr	r2, [pc, #152]	@ (80039e4 <HAL_ADC_ConfigChannel+0x844>)
 800394c:	e000      	b.n	8003950 <HAL_ADC_ConfigChannel+0x7b0>
 800394e:	4a21      	ldr	r2, [pc, #132]	@ (80039d4 <HAL_ADC_ConfigChannel+0x834>)
 8003950:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003954:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003958:	4619      	mov	r1, r3
 800395a:	4610      	mov	r0, r2
 800395c:	f7ff f8af 	bl	8002abe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003960:	e02e      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a23      	ldr	r2, [pc, #140]	@ (80039f4 <HAL_ADC_ConfigChannel+0x854>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d129      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800396c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003970:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d123      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a18      	ldr	r2, [pc, #96]	@ (80039e0 <HAL_ADC_ConfigChannel+0x840>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d01e      	beq.n	80039c0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800398a:	d004      	beq.n	8003996 <HAL_ADC_ConfigChannel+0x7f6>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a13      	ldr	r2, [pc, #76]	@ (80039e0 <HAL_ADC_ConfigChannel+0x840>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d101      	bne.n	800399a <HAL_ADC_ConfigChannel+0x7fa>
 8003996:	4a13      	ldr	r2, [pc, #76]	@ (80039e4 <HAL_ADC_ConfigChannel+0x844>)
 8003998:	e000      	b.n	800399c <HAL_ADC_ConfigChannel+0x7fc>
 800399a:	4a0e      	ldr	r2, [pc, #56]	@ (80039d4 <HAL_ADC_ConfigChannel+0x834>)
 800399c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80039a4:	4619      	mov	r1, r3
 80039a6:	4610      	mov	r0, r2
 80039a8:	f7ff f889 	bl	8002abe <LL_ADC_SetCommonPathInternalCh>
 80039ac:	e008      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b2:	f043 0220 	orr.w	r2, r3, #32
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80039c8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	37d8      	adds	r7, #216	@ 0xd8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	50000700 	.word	0x50000700
 80039d8:	c3210000 	.word	0xc3210000
 80039dc:	90c00010 	.word	0x90c00010
 80039e0:	50000100 	.word	0x50000100
 80039e4:	50000300 	.word	0x50000300
 80039e8:	20000000 	.word	0x20000000
 80039ec:	053e2d63 	.word	0x053e2d63
 80039f0:	c7520000 	.word	0xc7520000
 80039f4:	cb840000 	.word	0xcb840000

080039f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a08:	4b0c      	ldr	r3, [pc, #48]	@ (8003a3c <__NVIC_SetPriorityGrouping+0x44>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a14:	4013      	ands	r3, r2
 8003a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a2a:	4a04      	ldr	r2, [pc, #16]	@ (8003a3c <__NVIC_SetPriorityGrouping+0x44>)
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	60d3      	str	r3, [r2, #12]
}
 8003a30:	bf00      	nop
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	e000ed00 	.word	0xe000ed00

08003a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a44:	4b04      	ldr	r3, [pc, #16]	@ (8003a58 <__NVIC_GetPriorityGrouping+0x18>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	0a1b      	lsrs	r3, r3, #8
 8003a4a:	f003 0307 	and.w	r3, r3, #7
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	e000ed00 	.word	0xe000ed00

08003a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	4603      	mov	r3, r0
 8003a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	db0b      	blt.n	8003a86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a6e:	79fb      	ldrb	r3, [r7, #7]
 8003a70:	f003 021f 	and.w	r2, r3, #31
 8003a74:	4907      	ldr	r1, [pc, #28]	@ (8003a94 <__NVIC_EnableIRQ+0x38>)
 8003a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7a:	095b      	lsrs	r3, r3, #5
 8003a7c:	2001      	movs	r0, #1
 8003a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	e000e100 	.word	0xe000e100

08003a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	6039      	str	r1, [r7, #0]
 8003aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	db0a      	blt.n	8003ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	490c      	ldr	r1, [pc, #48]	@ (8003ae4 <__NVIC_SetPriority+0x4c>)
 8003ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab6:	0112      	lsls	r2, r2, #4
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	440b      	add	r3, r1
 8003abc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ac0:	e00a      	b.n	8003ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	4908      	ldr	r1, [pc, #32]	@ (8003ae8 <__NVIC_SetPriority+0x50>)
 8003ac8:	79fb      	ldrb	r3, [r7, #7]
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	3b04      	subs	r3, #4
 8003ad0:	0112      	lsls	r2, r2, #4
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	761a      	strb	r2, [r3, #24]
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	e000e100 	.word	0xe000e100
 8003ae8:	e000ed00 	.word	0xe000ed00

08003aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b089      	sub	sp, #36	@ 0x24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	f1c3 0307 	rsb	r3, r3, #7
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	bf28      	it	cs
 8003b0a:	2304      	movcs	r3, #4
 8003b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	3304      	adds	r3, #4
 8003b12:	2b06      	cmp	r3, #6
 8003b14:	d902      	bls.n	8003b1c <NVIC_EncodePriority+0x30>
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	3b03      	subs	r3, #3
 8003b1a:	e000      	b.n	8003b1e <NVIC_EncodePriority+0x32>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b20:	f04f 32ff 	mov.w	r2, #4294967295
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	43da      	mvns	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	401a      	ands	r2, r3
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b34:	f04f 31ff 	mov.w	r1, #4294967295
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3e:	43d9      	mvns	r1, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b44:	4313      	orrs	r3, r2
         );
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3724      	adds	r7, #36	@ 0x24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
	...

08003b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b64:	d301      	bcc.n	8003b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b66:	2301      	movs	r3, #1
 8003b68:	e00f      	b.n	8003b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b94 <SysTick_Config+0x40>)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b72:	210f      	movs	r1, #15
 8003b74:	f04f 30ff 	mov.w	r0, #4294967295
 8003b78:	f7ff ff8e 	bl	8003a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b7c:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <SysTick_Config+0x40>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b82:	4b04      	ldr	r3, [pc, #16]	@ (8003b94 <SysTick_Config+0x40>)
 8003b84:	2207      	movs	r2, #7
 8003b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	e000e010 	.word	0xe000e010

08003b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff ff29 	bl	80039f8 <__NVIC_SetPriorityGrouping>
}
 8003ba6:	bf00      	nop
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b086      	sub	sp, #24
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	607a      	str	r2, [r7, #4]
 8003bba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bbc:	f7ff ff40 	bl	8003a40 <__NVIC_GetPriorityGrouping>
 8003bc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	68b9      	ldr	r1, [r7, #8]
 8003bc6:	6978      	ldr	r0, [r7, #20]
 8003bc8:	f7ff ff90 	bl	8003aec <NVIC_EncodePriority>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bd2:	4611      	mov	r1, r2
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff ff5f 	bl	8003a98 <__NVIC_SetPriority>
}
 8003bda:	bf00      	nop
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	4603      	mov	r3, r0
 8003bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff ff33 	bl	8003a5c <__NVIC_EnableIRQ>
}
 8003bf6:	bf00      	nop
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b082      	sub	sp, #8
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7ff ffa4 	bl	8003b54 <SysTick_Config>
 8003c0c:	4603      	mov	r3, r0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e147      	b.n	8003eba <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fe f936 	bl	8001eb0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0210 	bic.w	r2, r2, #16
 8003c52:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c54:	f7fe fef2 	bl	8002a3c <HAL_GetTick>
 8003c58:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003c5a:	e012      	b.n	8003c82 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003c5c:	f7fe feee 	bl	8002a3c <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b0a      	cmp	r3, #10
 8003c68:	d90b      	bls.n	8003c82 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c6e:	f043 0201 	orr.w	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2203      	movs	r2, #3
 8003c7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e11b      	b.n	8003eba <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	f003 0308 	and.w	r3, r3, #8
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d0e5      	beq.n	8003c5c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699a      	ldr	r2, [r3, #24]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ca0:	f7fe fecc 	bl	8002a3c <HAL_GetTick>
 8003ca4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003ca6:	e012      	b.n	8003cce <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003ca8:	f7fe fec8 	bl	8002a3c <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b0a      	cmp	r3, #10
 8003cb4:	d90b      	bls.n	8003cce <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cba:	f043 0201 	orr.w	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e0f5      	b.n	8003eba <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0e5      	beq.n	8003ca8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699a      	ldr	r2, [r3, #24]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0202 	orr.w	r2, r2, #2
 8003cea:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a74      	ldr	r2, [pc, #464]	@ (8003ec4 <HAL_FDCAN_Init+0x2ac>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d103      	bne.n	8003cfe <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003cf6:	4a74      	ldr	r2, [pc, #464]	@ (8003ec8 <HAL_FDCAN_Init+0x2b0>)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	7c1b      	ldrb	r3, [r3, #16]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d108      	bne.n	8003d18 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	699a      	ldr	r2, [r3, #24]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d14:	619a      	str	r2, [r3, #24]
 8003d16:	e007      	b.n	8003d28 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699a      	ldr	r2, [r3, #24]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d26:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	7c5b      	ldrb	r3, [r3, #17]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d108      	bne.n	8003d42 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699a      	ldr	r2, [r3, #24]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d3e:	619a      	str	r2, [r3, #24]
 8003d40:	e007      	b.n	8003d52 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699a      	ldr	r2, [r3, #24]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003d50:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	7c9b      	ldrb	r3, [r3, #18]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d108      	bne.n	8003d6c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699a      	ldr	r2, [r3, #24]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d68:	619a      	str	r2, [r3, #24]
 8003d6a:	e007      	b.n	8003d7c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699a      	ldr	r2, [r3, #24]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003d7a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	699a      	ldr	r2, [r3, #24]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003da0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0210 	bic.w	r2, r2, #16
 8003db0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d108      	bne.n	8003dcc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699a      	ldr	r2, [r3, #24]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0204 	orr.w	r2, r2, #4
 8003dc8:	619a      	str	r2, [r3, #24]
 8003dca:	e02c      	b.n	8003e26 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d028      	beq.n	8003e26 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d01c      	beq.n	8003e16 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699a      	ldr	r2, [r3, #24]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003dea:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0210 	orr.w	r2, r2, #16
 8003dfa:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	2b03      	cmp	r3, #3
 8003e02:	d110      	bne.n	8003e26 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699a      	ldr	r2, [r3, #24]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0220 	orr.w	r2, r2, #32
 8003e12:	619a      	str	r2, [r3, #24]
 8003e14:	e007      	b.n	8003e26 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	699a      	ldr	r2, [r3, #24]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f042 0220 	orr.w	r2, r2, #32
 8003e24:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e36:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003e3e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003e4e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e50:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e5a:	d115      	bne.n	8003e88 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e60:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e66:	3b01      	subs	r3, #1
 8003e68:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003e6a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e70:	3b01      	subs	r3, #1
 8003e72:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003e74:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003e84:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003e86:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f814 	bl	8003ecc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40006400 	.word	0x40006400
 8003ec8:	40006500 	.word	0x40006500

08003ecc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003ed4:	4b2c      	ldr	r3, [pc, #176]	@ (8003f88 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8003ed6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a2b      	ldr	r2, [pc, #172]	@ (8003f8c <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d103      	bne.n	8003eea <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003ee8:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ef8:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f00:	041a      	lsls	r2, r3, #16
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f1e:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f26:	061a      	lsls	r2, r3, #24
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	e005      	b.n	8003f6c <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d3f3      	bcc.n	8003f60 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8003f78:	bf00      	nop
 8003f7a:	bf00      	nop
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	4000a400 	.word	0x4000a400
 8003f8c:	40006800 	.word	0x40006800

08003f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f9e:	e15a      	b.n	8004256 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fac:	4013      	ands	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 814c 	beq.w	8004250 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f003 0303 	and.w	r3, r3, #3
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d005      	beq.n	8003fd0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d130      	bne.n	8004032 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	2203      	movs	r2, #3
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004006:	2201      	movs	r2, #1
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	43db      	mvns	r3, r3
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4013      	ands	r3, r2
 8004014:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	091b      	lsrs	r3, r3, #4
 800401c:	f003 0201 	and.w	r2, r3, #1
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	4313      	orrs	r3, r2
 800402a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	2b03      	cmp	r3, #3
 800403c:	d017      	beq.n	800406e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	2203      	movs	r2, #3
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	43db      	mvns	r3, r3
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4013      	ands	r3, r2
 8004054:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	4313      	orrs	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d123      	bne.n	80040c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	08da      	lsrs	r2, r3, #3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3208      	adds	r2, #8
 8004082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004086:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	220f      	movs	r2, #15
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	43db      	mvns	r3, r3
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4013      	ands	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	691a      	ldr	r2, [r3, #16]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	08da      	lsrs	r2, r3, #3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3208      	adds	r2, #8
 80040bc:	6939      	ldr	r1, [r7, #16]
 80040be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	2203      	movs	r2, #3
 80040ce:	fa02 f303 	lsl.w	r3, r2, r3
 80040d2:	43db      	mvns	r3, r3
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4013      	ands	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f003 0203 	and.w	r2, r3, #3
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 80a6 	beq.w	8004250 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004104:	4b5b      	ldr	r3, [pc, #364]	@ (8004274 <HAL_GPIO_Init+0x2e4>)
 8004106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004108:	4a5a      	ldr	r2, [pc, #360]	@ (8004274 <HAL_GPIO_Init+0x2e4>)
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004110:	4b58      	ldr	r3, [pc, #352]	@ (8004274 <HAL_GPIO_Init+0x2e4>)
 8004112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	60bb      	str	r3, [r7, #8]
 800411a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800411c:	4a56      	ldr	r2, [pc, #344]	@ (8004278 <HAL_GPIO_Init+0x2e8>)
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	089b      	lsrs	r3, r3, #2
 8004122:	3302      	adds	r3, #2
 8004124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004128:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f003 0303 	and.w	r3, r3, #3
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	220f      	movs	r2, #15
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	43db      	mvns	r3, r3
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4013      	ands	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004146:	d01f      	beq.n	8004188 <HAL_GPIO_Init+0x1f8>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a4c      	ldr	r2, [pc, #304]	@ (800427c <HAL_GPIO_Init+0x2ec>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d019      	beq.n	8004184 <HAL_GPIO_Init+0x1f4>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a4b      	ldr	r2, [pc, #300]	@ (8004280 <HAL_GPIO_Init+0x2f0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d013      	beq.n	8004180 <HAL_GPIO_Init+0x1f0>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a4a      	ldr	r2, [pc, #296]	@ (8004284 <HAL_GPIO_Init+0x2f4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00d      	beq.n	800417c <HAL_GPIO_Init+0x1ec>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a49      	ldr	r2, [pc, #292]	@ (8004288 <HAL_GPIO_Init+0x2f8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d007      	beq.n	8004178 <HAL_GPIO_Init+0x1e8>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a48      	ldr	r2, [pc, #288]	@ (800428c <HAL_GPIO_Init+0x2fc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d101      	bne.n	8004174 <HAL_GPIO_Init+0x1e4>
 8004170:	2305      	movs	r3, #5
 8004172:	e00a      	b.n	800418a <HAL_GPIO_Init+0x1fa>
 8004174:	2306      	movs	r3, #6
 8004176:	e008      	b.n	800418a <HAL_GPIO_Init+0x1fa>
 8004178:	2304      	movs	r3, #4
 800417a:	e006      	b.n	800418a <HAL_GPIO_Init+0x1fa>
 800417c:	2303      	movs	r3, #3
 800417e:	e004      	b.n	800418a <HAL_GPIO_Init+0x1fa>
 8004180:	2302      	movs	r3, #2
 8004182:	e002      	b.n	800418a <HAL_GPIO_Init+0x1fa>
 8004184:	2301      	movs	r3, #1
 8004186:	e000      	b.n	800418a <HAL_GPIO_Init+0x1fa>
 8004188:	2300      	movs	r3, #0
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	f002 0203 	and.w	r2, r2, #3
 8004190:	0092      	lsls	r2, r2, #2
 8004192:	4093      	lsls	r3, r2
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800419a:	4937      	ldr	r1, [pc, #220]	@ (8004278 <HAL_GPIO_Init+0x2e8>)
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	089b      	lsrs	r3, r3, #2
 80041a0:	3302      	adds	r3, #2
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041a8:	4b39      	ldr	r3, [pc, #228]	@ (8004290 <HAL_GPIO_Init+0x300>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	43db      	mvns	r3, r3
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4013      	ands	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041cc:	4a30      	ldr	r2, [pc, #192]	@ (8004290 <HAL_GPIO_Init+0x300>)
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80041d2:	4b2f      	ldr	r3, [pc, #188]	@ (8004290 <HAL_GPIO_Init+0x300>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	43db      	mvns	r3, r3
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4013      	ands	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041f6:	4a26      	ldr	r2, [pc, #152]	@ (8004290 <HAL_GPIO_Init+0x300>)
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80041fc:	4b24      	ldr	r3, [pc, #144]	@ (8004290 <HAL_GPIO_Init+0x300>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	43db      	mvns	r3, r3
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	4013      	ands	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004220:	4a1b      	ldr	r2, [pc, #108]	@ (8004290 <HAL_GPIO_Init+0x300>)
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004226:	4b1a      	ldr	r3, [pc, #104]	@ (8004290 <HAL_GPIO_Init+0x300>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	43db      	mvns	r3, r3
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4013      	ands	r3, r2
 8004234:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4313      	orrs	r3, r2
 8004248:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800424a:	4a11      	ldr	r2, [pc, #68]	@ (8004290 <HAL_GPIO_Init+0x300>)
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	3301      	adds	r3, #1
 8004254:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	fa22 f303 	lsr.w	r3, r2, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	f47f ae9d 	bne.w	8003fa0 <HAL_GPIO_Init+0x10>
  }
}
 8004266:	bf00      	nop
 8004268:	bf00      	nop
 800426a:	371c      	adds	r7, #28
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	40021000 	.word	0x40021000
 8004278:	40010000 	.word	0x40010000
 800427c:	48000400 	.word	0x48000400
 8004280:	48000800 	.word	0x48000800
 8004284:	48000c00 	.word	0x48000c00
 8004288:	48001000 	.word	0x48001000
 800428c:	48001400 	.word	0x48001400
 8004290:	40010400 	.word	0x40010400

08004294 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	460b      	mov	r3, r1
 800429e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691a      	ldr	r2, [r3, #16]
 80042a4:	887b      	ldrh	r3, [r7, #2]
 80042a6:	4013      	ands	r3, r2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d002      	beq.n	80042b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042ac:	2301      	movs	r3, #1
 80042ae:	73fb      	strb	r3, [r7, #15]
 80042b0:	e001      	b.n	80042b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042b2:	2300      	movs	r3, #0
 80042b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	460b      	mov	r3, r1
 80042ce:	807b      	strh	r3, [r7, #2]
 80042d0:	4613      	mov	r3, r2
 80042d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042d4:	787b      	ldrb	r3, [r7, #1]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042da:	887a      	ldrh	r2, [r7, #2]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042e0:	e002      	b.n	80042e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042e2:	887a      	ldrh	r2, [r7, #2]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004306:	887a      	ldrh	r2, [r7, #2]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4013      	ands	r3, r2
 800430c:	041a      	lsls	r2, r3, #16
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	43d9      	mvns	r1, r3
 8004312:	887b      	ldrh	r3, [r7, #2]
 8004314:	400b      	ands	r3, r1
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	619a      	str	r2, [r3, #24]
}
 800431c:	bf00      	nop
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e0c0      	b.n	80044bc <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d106      	bne.n	8004354 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f008 f8d6 	bl	800c500 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2203      	movs	r2, #3
 8004358:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4618      	mov	r0, r3
 8004362:	f004 fc42 	bl	8008bea <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004366:	2300      	movs	r3, #0
 8004368:	73fb      	strb	r3, [r7, #15]
 800436a:	e03e      	b.n	80043ea <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800436c:	7bfa      	ldrb	r2, [r7, #15]
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	4613      	mov	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	440b      	add	r3, r1
 800437a:	3311      	adds	r3, #17
 800437c:	2201      	movs	r2, #1
 800437e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004380:	7bfa      	ldrb	r2, [r7, #15]
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	4613      	mov	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	440b      	add	r3, r1
 800438e:	3310      	adds	r3, #16
 8004390:	7bfa      	ldrb	r2, [r7, #15]
 8004392:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004394:	7bfa      	ldrb	r2, [r7, #15]
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	4613      	mov	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	440b      	add	r3, r1
 80043a2:	3313      	adds	r3, #19
 80043a4:	2200      	movs	r2, #0
 80043a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80043a8:	7bfa      	ldrb	r2, [r7, #15]
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	440b      	add	r3, r1
 80043b6:	3320      	adds	r3, #32
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80043bc:	7bfa      	ldrb	r2, [r7, #15]
 80043be:	6879      	ldr	r1, [r7, #4]
 80043c0:	4613      	mov	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	440b      	add	r3, r1
 80043ca:	3324      	adds	r3, #36	@ 0x24
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	4613      	mov	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	440b      	add	r3, r1
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
 80043e6:	3301      	adds	r3, #1
 80043e8:	73fb      	strb	r3, [r7, #15]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	791b      	ldrb	r3, [r3, #4]
 80043ee:	7bfa      	ldrb	r2, [r7, #15]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d3bb      	bcc.n	800436c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043f4:	2300      	movs	r3, #0
 80043f6:	73fb      	strb	r3, [r7, #15]
 80043f8:	e044      	b.n	8004484 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80043fa:	7bfa      	ldrb	r2, [r7, #15]
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	440b      	add	r3, r1
 8004408:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800440c:	2200      	movs	r2, #0
 800440e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004410:	7bfa      	ldrb	r2, [r7, #15]
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	4613      	mov	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	440b      	add	r3, r1
 800441e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004422:	7bfa      	ldrb	r2, [r7, #15]
 8004424:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004426:	7bfa      	ldrb	r2, [r7, #15]
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	4613      	mov	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	440b      	add	r3, r1
 8004434:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004438:	2200      	movs	r2, #0
 800443a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800443c:	7bfa      	ldrb	r2, [r7, #15]
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	440b      	add	r3, r1
 800444a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004452:	7bfa      	ldrb	r2, [r7, #15]
 8004454:	6879      	ldr	r1, [r7, #4]
 8004456:	4613      	mov	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	440b      	add	r3, r1
 8004460:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004468:	7bfa      	ldrb	r2, [r7, #15]
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	440b      	add	r3, r1
 8004476:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800447a:	2200      	movs	r2, #0
 800447c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800447e:	7bfb      	ldrb	r3, [r7, #15]
 8004480:	3301      	adds	r3, #1
 8004482:	73fb      	strb	r3, [r7, #15]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	791b      	ldrb	r3, [r3, #4]
 8004488:	7bfa      	ldrb	r2, [r7, #15]
 800448a:	429a      	cmp	r2, r3
 800448c:	d3b5      	bcc.n	80043fa <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3304      	adds	r3, #4
 8004496:	e893 0006 	ldmia.w	r3, {r1, r2}
 800449a:	f004 fbc1 	bl	8008c20 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	7a9b      	ldrb	r3, [r3, #10]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d102      	bne.n	80044ba <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f001 fc0e 	bl	8005cd6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <HAL_PCD_Start+0x16>
 80044d6:	2302      	movs	r3, #2
 80044d8:	e012      	b.n	8004500 <HAL_PCD_Start+0x3c>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f004 fb68 	bl	8008bbc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f006 f945 	bl	800a780 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3708      	adds	r7, #8
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4618      	mov	r0, r3
 8004516:	f006 f94a 	bl	800a7ae <USB_ReadInterrupts>
 800451a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 fb06 	bl	8004b38 <PCD_EP_ISR_Handler>

    return;
 800452c:	e110      	b.n	8004750 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004534:	2b00      	cmp	r3, #0
 8004536:	d013      	beq.n	8004560 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004540:	b29a      	uxth	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800454a:	b292      	uxth	r2, r2
 800454c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f008 f866 	bl	800c622 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004556:	2100      	movs	r1, #0
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f8fc 	bl	8004756 <HAL_PCD_SetAddress>

    return;
 800455e:	e0f7      	b.n	8004750 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00c      	beq.n	8004584 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004572:	b29a      	uxth	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800457c:	b292      	uxth	r2, r2
 800457e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004582:	e0e5      	b.n	8004750 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00c      	beq.n	80045a8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004596:	b29a      	uxth	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80045a0:	b292      	uxth	r2, r2
 80045a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80045a6:	e0d3      	b.n	8004750 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d034      	beq.n	800461c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 0204 	bic.w	r2, r2, #4
 80045c4:	b292      	uxth	r2, r2
 80045c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0208 	bic.w	r2, r2, #8
 80045dc:	b292      	uxth	r2, r2
 80045de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d107      	bne.n	80045fc <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80045f4:	2100      	movs	r1, #0
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f008 fa06 	bl	800ca08 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f008 f849 	bl	800c694 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800460a:	b29a      	uxth	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004614:	b292      	uxth	r2, r2
 8004616:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800461a:	e099      	b.n	8004750 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004622:	2b00      	cmp	r3, #0
 8004624:	d027      	beq.n	8004676 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800462e:	b29a      	uxth	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f042 0208 	orr.w	r2, r2, #8
 8004638:	b292      	uxth	r2, r2
 800463a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004646:	b29a      	uxth	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004650:	b292      	uxth	r2, r2
 8004652:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800465e:	b29a      	uxth	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f042 0204 	orr.w	r2, r2, #4
 8004668:	b292      	uxth	r2, r2
 800466a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f007 fff6 	bl	800c660 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004674:	e06c      	b.n	8004750 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800467c:	2b00      	cmp	r3, #0
 800467e:	d040      	beq.n	8004702 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004688:	b29a      	uxth	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004692:	b292      	uxth	r2, r2
 8004694:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d12b      	bne.n	80046fa <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0204 	orr.w	r2, r2, #4
 80046b4:	b292      	uxth	r2, r2
 80046b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f042 0208 	orr.w	r2, r2, #8
 80046cc:	b292      	uxth	r2, r2
 80046ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	089b      	lsrs	r3, r3, #2
 80046e6:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80046f0:	2101      	movs	r1, #1
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f008 f988 	bl	800ca08 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80046f8:	e02a      	b.n	8004750 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f007 ffb0 	bl	800c660 <HAL_PCD_SuspendCallback>
    return;
 8004700:	e026      	b.n	8004750 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00f      	beq.n	800472c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004714:	b29a      	uxth	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800471e:	b292      	uxth	r2, r2
 8004720:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f007 ff6e 	bl	800c606 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800472a:	e011      	b.n	8004750 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00c      	beq.n	8004750 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800473e:	b29a      	uxth	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004748:	b292      	uxth	r2, r2
 800474a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800474e:	bf00      	nop
  }
}
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b082      	sub	sp, #8
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	460b      	mov	r3, r1
 8004760:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_PCD_SetAddress+0x1a>
 800476c:	2302      	movs	r3, #2
 800476e:	e012      	b.n	8004796 <HAL_PCD_SetAddress+0x40>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	78fa      	ldrb	r2, [r7, #3]
 800477c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	78fa      	ldrb	r2, [r7, #3]
 8004784:	4611      	mov	r1, r2
 8004786:	4618      	mov	r0, r3
 8004788:	f005 ffe6 	bl	800a758 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b084      	sub	sp, #16
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	4608      	mov	r0, r1
 80047a8:	4611      	mov	r1, r2
 80047aa:	461a      	mov	r2, r3
 80047ac:	4603      	mov	r3, r0
 80047ae:	70fb      	strb	r3, [r7, #3]
 80047b0:	460b      	mov	r3, r1
 80047b2:	803b      	strh	r3, [r7, #0]
 80047b4:	4613      	mov	r3, r2
 80047b6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80047b8:	2300      	movs	r3, #0
 80047ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	da0e      	bge.n	80047e2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047c4:	78fb      	ldrb	r3, [r7, #3]
 80047c6:	f003 0207 	and.w	r2, r3, #7
 80047ca:	4613      	mov	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	3310      	adds	r3, #16
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	4413      	add	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2201      	movs	r2, #1
 80047de:	705a      	strb	r2, [r3, #1]
 80047e0:	e00e      	b.n	8004800 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047e2:	78fb      	ldrb	r3, [r7, #3]
 80047e4:	f003 0207 	and.w	r2, r3, #7
 80047e8:	4613      	mov	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	4413      	add	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004800:	78fb      	ldrb	r3, [r7, #3]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	b2da      	uxtb	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800480c:	883b      	ldrh	r3, [r7, #0]
 800480e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	78ba      	ldrb	r2, [r7, #2]
 800481a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800481c:	78bb      	ldrb	r3, [r7, #2]
 800481e:	2b02      	cmp	r3, #2
 8004820:	d102      	bne.n	8004828 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800482e:	2b01      	cmp	r3, #1
 8004830:	d101      	bne.n	8004836 <HAL_PCD_EP_Open+0x98>
 8004832:	2302      	movs	r3, #2
 8004834:	e00e      	b.n	8004854 <HAL_PCD_EP_Open+0xb6>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68f9      	ldr	r1, [r7, #12]
 8004844:	4618      	mov	r0, r3
 8004846:	f004 fa09 	bl	8008c5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004852:	7afb      	ldrb	r3, [r7, #11]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004868:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800486c:	2b00      	cmp	r3, #0
 800486e:	da0e      	bge.n	800488e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004870:	78fb      	ldrb	r3, [r7, #3]
 8004872:	f003 0207 	and.w	r2, r3, #7
 8004876:	4613      	mov	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	3310      	adds	r3, #16
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	4413      	add	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2201      	movs	r2, #1
 800488a:	705a      	strb	r2, [r3, #1]
 800488c:	e00e      	b.n	80048ac <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800488e:	78fb      	ldrb	r3, [r7, #3]
 8004890:	f003 0207 	and.w	r2, r3, #7
 8004894:	4613      	mov	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	4413      	add	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80048ac:	78fb      	ldrb	r3, [r7, #3]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d101      	bne.n	80048c6 <HAL_PCD_EP_Close+0x6a>
 80048c2:	2302      	movs	r3, #2
 80048c4:	e00e      	b.n	80048e4 <HAL_PCD_EP_Close+0x88>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68f9      	ldr	r1, [r7, #12]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f004 fea9 	bl	800962c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	607a      	str	r2, [r7, #4]
 80048f6:	603b      	str	r3, [r7, #0]
 80048f8:	460b      	mov	r3, r1
 80048fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048fc:	7afb      	ldrb	r3, [r7, #11]
 80048fe:	f003 0207 	and.w	r2, r3, #7
 8004902:	4613      	mov	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	4413      	add	r3, r2
 8004912:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	2200      	movs	r2, #0
 8004924:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2200      	movs	r2, #0
 800492a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800492c:	7afb      	ldrb	r3, [r7, #11]
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	b2da      	uxtb	r2, r3
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6979      	ldr	r1, [r7, #20]
 800493e:	4618      	mov	r0, r3
 8004940:	f005 f861 	bl	8009a06 <USB_EPStartXfer>

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	460b      	mov	r3, r1
 8004958:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800495a:	78fb      	ldrb	r3, [r7, #3]
 800495c:	f003 0207 	and.w	r2, r3, #7
 8004960:	6879      	ldr	r1, [r7, #4]
 8004962:	4613      	mov	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	440b      	add	r3, r1
 800496c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004970:	681b      	ldr	r3, [r3, #0]
}
 8004972:	4618      	mov	r0, r3
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b086      	sub	sp, #24
 8004982:	af00      	add	r7, sp, #0
 8004984:	60f8      	str	r0, [r7, #12]
 8004986:	607a      	str	r2, [r7, #4]
 8004988:	603b      	str	r3, [r7, #0]
 800498a:	460b      	mov	r3, r1
 800498c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800498e:	7afb      	ldrb	r3, [r7, #11]
 8004990:	f003 0207 	and.w	r2, r3, #7
 8004994:	4613      	mov	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	3310      	adds	r3, #16
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	4413      	add	r3, r2
 80049a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2200      	movs	r2, #0
 80049c2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2201      	movs	r2, #1
 80049c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049ca:	7afb      	ldrb	r3, [r7, #11]
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6979      	ldr	r1, [r7, #20]
 80049dc:	4618      	mov	r0, r3
 80049de:	f005 f812 	bl	8009a06 <USB_EPStartXfer>

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3718      	adds	r7, #24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	460b      	mov	r3, r1
 80049f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80049f8:	78fb      	ldrb	r3, [r7, #3]
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	7912      	ldrb	r2, [r2, #4]
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d901      	bls.n	8004a0a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e03e      	b.n	8004a88 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	da0e      	bge.n	8004a30 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a12:	78fb      	ldrb	r3, [r7, #3]
 8004a14:	f003 0207 	and.w	r2, r3, #7
 8004a18:	4613      	mov	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	3310      	adds	r3, #16
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	4413      	add	r3, r2
 8004a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	705a      	strb	r2, [r3, #1]
 8004a2e:	e00c      	b.n	8004a4a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a30:	78fa      	ldrb	r2, [r7, #3]
 8004a32:	4613      	mov	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	4413      	add	r3, r2
 8004a42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a50:	78fb      	ldrb	r3, [r7, #3]
 8004a52:	f003 0307 	and.w	r3, r3, #7
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d101      	bne.n	8004a6a <HAL_PCD_EP_SetStall+0x7e>
 8004a66:	2302      	movs	r3, #2
 8004a68:	e00e      	b.n	8004a88 <HAL_PCD_EP_SetStall+0x9c>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68f9      	ldr	r1, [r7, #12]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f005 fd73 	bl	800a564 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	7912      	ldrb	r2, [r2, #4]
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d901      	bls.n	8004aae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e040      	b.n	8004b30 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004aae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	da0e      	bge.n	8004ad4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ab6:	78fb      	ldrb	r3, [r7, #3]
 8004ab8:	f003 0207 	and.w	r2, r3, #7
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	3310      	adds	r3, #16
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	4413      	add	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	705a      	strb	r2, [r3, #1]
 8004ad2:	e00e      	b.n	8004af2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ad4:	78fb      	ldrb	r3, [r7, #3]
 8004ad6:	f003 0207 	and.w	r2, r3, #7
 8004ada:	4613      	mov	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	00db      	lsls	r3, r3, #3
 8004ae2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	4413      	add	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004af8:	78fb      	ldrb	r3, [r7, #3]
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_PCD_EP_ClrStall+0x82>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e00e      	b.n	8004b30 <HAL_PCD_EP_ClrStall+0xa0>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68f9      	ldr	r1, [r7, #12]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f005 fd70 	bl	800a606 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b092      	sub	sp, #72	@ 0x48
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004b40:	e333      	b.n	80051aa <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004b4a:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004b4c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	f003 030f 	and.w	r3, r3, #15
 8004b54:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8004b58:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f040 8108 	bne.w	8004d72 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004b62:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004b64:	f003 0310 	and.w	r3, r3, #16
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d14c      	bne.n	8004c06 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004b78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b7c:	813b      	strh	r3, [r7, #8]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	893b      	ldrh	r3, [r7, #8]
 8004b84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3310      	adds	r3, #16
 8004b94:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	4413      	add	r3, r2
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6812      	ldr	r2, [r2, #0]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004bba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bbc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bc0:	695a      	ldr	r2, [r3, #20]
 8004bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	441a      	add	r2, r3
 8004bc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bca:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004bcc:	2100      	movs	r1, #0
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f007 fcff 	bl	800c5d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	7b1b      	ldrb	r3, [r3, #12]
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 82e5 	beq.w	80051aa <PCD_EP_ISR_Handler+0x672>
 8004be0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f040 82e0 	bne.w	80051aa <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	7b1b      	ldrb	r3, [r3, #12]
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	731a      	strb	r2, [r3, #12]
 8004c04:	e2d1      	b.n	80051aa <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004c0c:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004c16:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004c18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d032      	beq.n	8004c86 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	00db      	lsls	r3, r3, #3
 8004c32:	4413      	add	r3, r2
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6812      	ldr	r2, [r2, #0]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004c44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c46:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6818      	ldr	r0, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004c52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c54:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004c56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c58:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	f005 fdfa 	bl	800a854 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	817b      	strh	r3, [r7, #10]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	897a      	ldrh	r2, [r7, #10]
 8004c76:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004c7a:	b292      	uxth	r2, r2
 8004c7c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f007 fc7a 	bl	800c578 <HAL_PCD_SetupStageCallback>
 8004c84:	e291      	b.n	80051aa <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004c86:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f280 828d 	bge.w	80051aa <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	81fb      	strh	r3, [r7, #14]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	89fa      	ldrh	r2, [r7, #14]
 8004ca6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004caa:	b292      	uxth	r2, r2
 8004cac:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	461a      	mov	r2, r3
 8004cba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	4413      	add	r3, r2
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6812      	ldr	r2, [r2, #0]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004cd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cd4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004cd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d019      	beq.n	8004d12 <PCD_EP_ISR_Handler+0x1da>
 8004cde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d015      	beq.n	8004d12 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6818      	ldr	r0, [r3, #0]
 8004cea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cec:	6959      	ldr	r1, [r3, #20]
 8004cee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cf0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004cf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cf4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	f005 fdac 	bl	800a854 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004cfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cfe:	695a      	ldr	r2, [r3, #20]
 8004d00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	441a      	add	r2, r3
 8004d06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d08:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f007 fc45 	bl	800c59c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004d1a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004d1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f040 8242 	bne.w	80051aa <PCD_EP_ISR_Handler+0x672>
 8004d26:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004d28:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004d2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d30:	f000 823b 	beq.w	80051aa <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d44:	81bb      	strh	r3, [r7, #12]
 8004d46:	89bb      	ldrh	r3, [r7, #12]
 8004d48:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004d4c:	81bb      	strh	r3, [r7, #12]
 8004d4e:	89bb      	ldrh	r3, [r7, #12]
 8004d50:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004d54:	81bb      	strh	r3, [r7, #12]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	89bb      	ldrh	r3, [r7, #12]
 8004d5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	8013      	strh	r3, [r2, #0]
 8004d70:	e21b      	b.n	80051aa <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	461a      	mov	r2, r3
 8004d78:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	881b      	ldrh	r3, [r3, #0]
 8004d82:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004d84:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f280 80f1 	bge.w	8004f70 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	461a      	mov	r2, r3
 8004d94:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4413      	add	r3, r2
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004da4:	4013      	ands	r3, r2
 8004da6:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	461a      	mov	r2, r3
 8004dae:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004db8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004dbc:	b292      	uxth	r2, r2
 8004dbe:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004dc0:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004dd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dd8:	7b1b      	ldrb	r3, [r3, #12]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d123      	bne.n	8004e26 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	461a      	mov	r2, r3
 8004dea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	4413      	add	r3, r2
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6812      	ldr	r2, [r2, #0]
 8004df6:	4413      	add	r3, r2
 8004df8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e02:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8004e06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 808b 	beq.w	8004f26 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6818      	ldr	r0, [r3, #0]
 8004e14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e16:	6959      	ldr	r1, [r3, #20]
 8004e18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e1a:	88da      	ldrh	r2, [r3, #6]
 8004e1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004e20:	f005 fd18 	bl	800a854 <USB_ReadPMA>
 8004e24:	e07f      	b.n	8004f26 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004e26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e28:	78db      	ldrb	r3, [r3, #3]
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d109      	bne.n	8004e42 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004e2e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004e30:	461a      	mov	r2, r3
 8004e32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f9c6 	bl	80051c6 <HAL_PCD_EP_DB_Receive>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004e40:	e071      	b.n	8004f26 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	461a      	mov	r2, r3
 8004e48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e5c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	461a      	mov	r2, r3
 8004e64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	441a      	add	r2, r3
 8004e6c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004e6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e7a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	461a      	mov	r2, r3
 8004e88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d022      	beq.n	8004ee2 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	4413      	add	r3, r2
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	6812      	ldr	r2, [r2, #0]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004eba:	881b      	ldrh	r3, [r3, #0]
 8004ebc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ec0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8004ec4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d02c      	beq.n	8004f26 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6818      	ldr	r0, [r3, #0]
 8004ed0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ed2:	6959      	ldr	r1, [r3, #20]
 8004ed4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ed6:	891a      	ldrh	r2, [r3, #8]
 8004ed8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004edc:	f005 fcba 	bl	800a854 <USB_ReadPMA>
 8004ee0:	e021      	b.n	8004f26 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	461a      	mov	r2, r3
 8004eee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	4413      	add	r3, r2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6812      	ldr	r2, [r2, #0]
 8004efa:	4413      	add	r3, r2
 8004efc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f06:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8004f0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d009      	beq.n	8004f26 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6818      	ldr	r0, [r3, #0]
 8004f16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f18:	6959      	ldr	r1, [r3, #20]
 8004f1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f1c:	895a      	ldrh	r2, [r3, #10]
 8004f1e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004f22:	f005 fc97 	bl	800a854 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004f26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f28:	69da      	ldr	r2, [r3, #28]
 8004f2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004f2e:	441a      	add	r2, r3
 8004f30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f32:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004f34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f36:	695a      	ldr	r2, [r3, #20]
 8004f38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004f3c:	441a      	add	r2, r3
 8004f3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f40:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004f42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d005      	beq.n	8004f56 <PCD_EP_ISR_Handler+0x41e>
 8004f4a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8004f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d206      	bcs.n	8004f64 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004f56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f007 fb1d 	bl	800c59c <HAL_PCD_DataOutStageCallback>
 8004f62:	e005      	b.n	8004f70 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f004 fd4b 	bl	8009a06 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004f70:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 8117 	beq.w	80051aa <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8004f7c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004f80:	4613      	mov	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	3310      	adds	r3, #16
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	461a      	mov	r2, r3
 8004f96:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004faa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	441a      	add	r2, r3
 8004fba:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004fc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fca:	78db      	ldrb	r3, [r3, #3]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	f040 80a1 	bne.w	8005114 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8004fd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004fd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fda:	7b1b      	ldrb	r3, [r3, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 8092 	beq.w	8005106 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004fe2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d046      	beq.n	800507a <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004fec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fee:	785b      	ldrb	r3, [r3, #1]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d126      	bne.n	8005042 <PCD_EP_ISR_Handler+0x50a>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	617b      	str	r3, [r7, #20]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005002:	b29b      	uxth	r3, r3
 8005004:	461a      	mov	r2, r3
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	4413      	add	r3, r2
 800500a:	617b      	str	r3, [r7, #20]
 800500c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	00da      	lsls	r2, r3, #3
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	4413      	add	r3, r2
 8005016:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800501a:	613b      	str	r3, [r7, #16]
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	b29b      	uxth	r3, r3
 8005022:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005026:	b29a      	uxth	r2, r3
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	801a      	strh	r2, [r3, #0]
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	b29b      	uxth	r3, r3
 8005032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800503a:	b29a      	uxth	r2, r3
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	801a      	strh	r2, [r3, #0]
 8005040:	e061      	b.n	8005106 <PCD_EP_ISR_Handler+0x5ce>
 8005042:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005044:	785b      	ldrb	r3, [r3, #1]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d15d      	bne.n	8005106 <PCD_EP_ISR_Handler+0x5ce>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	61fb      	str	r3, [r7, #28]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005058:	b29b      	uxth	r3, r3
 800505a:	461a      	mov	r2, r3
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	4413      	add	r3, r2
 8005060:	61fb      	str	r3, [r7, #28]
 8005062:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	00da      	lsls	r2, r3, #3
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	4413      	add	r3, r2
 800506c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005070:	61bb      	str	r3, [r7, #24]
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	2200      	movs	r2, #0
 8005076:	801a      	strh	r2, [r3, #0]
 8005078:	e045      	b.n	8005106 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005080:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005082:	785b      	ldrb	r3, [r3, #1]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d126      	bne.n	80050d6 <PCD_EP_ISR_Handler+0x59e>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	627b      	str	r3, [r7, #36]	@ 0x24
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005096:	b29b      	uxth	r3, r3
 8005098:	461a      	mov	r2, r3
 800509a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509c:	4413      	add	r3, r2
 800509e:	627b      	str	r3, [r7, #36]	@ 0x24
 80050a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	00da      	lsls	r2, r3, #3
 80050a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a8:	4413      	add	r3, r2
 80050aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80050ae:	623b      	str	r3, [r7, #32]
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	801a      	strh	r2, [r3, #0]
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	881b      	ldrh	r3, [r3, #0]
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	6a3b      	ldr	r3, [r7, #32]
 80050d2:	801a      	strh	r2, [r3, #0]
 80050d4:	e017      	b.n	8005106 <PCD_EP_ISR_Handler+0x5ce>
 80050d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050d8:	785b      	ldrb	r3, [r3, #1]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d113      	bne.n	8005106 <PCD_EP_ISR_Handler+0x5ce>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	461a      	mov	r2, r3
 80050ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ec:	4413      	add	r3, r2
 80050ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	00da      	lsls	r2, r3, #3
 80050f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050f8:	4413      	add	r3, r2
 80050fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80050fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005102:	2200      	movs	r2, #0
 8005104:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005106:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	4619      	mov	r1, r3
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f007 fa60 	bl	800c5d2 <HAL_PCD_DataInStageCallback>
 8005112:	e04a      	b.n	80051aa <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005114:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800511a:	2b00      	cmp	r3, #0
 800511c:	d13f      	bne.n	800519e <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005126:	b29b      	uxth	r3, r3
 8005128:	461a      	mov	r2, r3
 800512a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	4413      	add	r3, r2
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6812      	ldr	r2, [r2, #0]
 8005136:	4413      	add	r3, r2
 8005138:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800513c:	881b      	ldrh	r3, [r3, #0]
 800513e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005142:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8005144:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005146:	699a      	ldr	r2, [r3, #24]
 8005148:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800514a:	429a      	cmp	r2, r3
 800514c:	d906      	bls.n	800515c <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800514e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005150:	699a      	ldr	r2, [r3, #24]
 8005152:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005154:	1ad2      	subs	r2, r2, r3
 8005156:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005158:	619a      	str	r2, [r3, #24]
 800515a:	e002      	b.n	8005162 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800515c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800515e:	2200      	movs	r2, #0
 8005160:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005162:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800516a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	4619      	mov	r1, r3
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f007 fa2e 	bl	800c5d2 <HAL_PCD_DataInStageCallback>
 8005176:	e018      	b.n	80051aa <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800517a:	695a      	ldr	r2, [r3, #20]
 800517c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800517e:	441a      	add	r2, r3
 8005180:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005182:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005186:	69da      	ldr	r2, [r3, #28]
 8005188:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800518a:	441a      	add	r2, r3
 800518c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800518e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005196:	4618      	mov	r0, r3
 8005198:	f004 fc35 	bl	8009a06 <USB_EPStartXfer>
 800519c:	e005      	b.n	80051aa <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800519e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80051a0:	461a      	mov	r2, r3
 80051a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f917 	bl	80053d8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	b21b      	sxth	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f6ff acc3 	blt.w	8004b42 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3748      	adds	r7, #72	@ 0x48
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b088      	sub	sp, #32
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	60f8      	str	r0, [r7, #12]
 80051ce:	60b9      	str	r1, [r7, #8]
 80051d0:	4613      	mov	r3, r2
 80051d2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80051d4:	88fb      	ldrh	r3, [r7, #6]
 80051d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d07c      	beq.n	80052d8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	461a      	mov	r2, r3
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	00db      	lsls	r3, r3, #3
 80051f0:	4413      	add	r3, r2
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	6812      	ldr	r2, [r2, #0]
 80051f6:	4413      	add	r3, r2
 80051f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005202:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	699a      	ldr	r2, [r3, #24]
 8005208:	8b7b      	ldrh	r3, [r7, #26]
 800520a:	429a      	cmp	r2, r3
 800520c:	d306      	bcc.n	800521c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	8b7b      	ldrh	r3, [r7, #26]
 8005214:	1ad2      	subs	r2, r2, r3
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	619a      	str	r2, [r3, #24]
 800521a:	e002      	b.n	8005222 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2200      	movs	r2, #0
 8005220:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d123      	bne.n	8005272 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	461a      	mov	r2, r3
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	b29b      	uxth	r3, r3
 800523c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005240:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005244:	833b      	strh	r3, [r7, #24]
 8005246:	8b3b      	ldrh	r3, [r7, #24]
 8005248:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800524c:	833b      	strh	r3, [r7, #24]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	461a      	mov	r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	441a      	add	r2, r3
 800525c:	8b3b      	ldrh	r3, [r7, #24]
 800525e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005262:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005266:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800526a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800526e:	b29b      	uxth	r3, r3
 8005270:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005272:	88fb      	ldrh	r3, [r7, #6]
 8005274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005278:	2b00      	cmp	r3, #0
 800527a:	d01f      	beq.n	80052bc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	461a      	mov	r2, r3
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	b29b      	uxth	r3, r3
 800528e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005296:	82fb      	strh	r3, [r7, #22]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	461a      	mov	r2, r3
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	441a      	add	r2, r3
 80052a6:	8afb      	ldrh	r3, [r7, #22]
 80052a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80052bc:	8b7b      	ldrh	r3, [r7, #26]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 8085 	beq.w	80053ce <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6818      	ldr	r0, [r3, #0]
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	6959      	ldr	r1, [r3, #20]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	891a      	ldrh	r2, [r3, #8]
 80052d0:	8b7b      	ldrh	r3, [r7, #26]
 80052d2:	f005 fabf 	bl	800a854 <USB_ReadPMA>
 80052d6:	e07a      	b.n	80053ce <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	461a      	mov	r2, r3
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	00db      	lsls	r3, r3, #3
 80052ea:	4413      	add	r3, r2
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	6812      	ldr	r2, [r2, #0]
 80052f0:	4413      	add	r3, r2
 80052f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80052f6:	881b      	ldrh	r3, [r3, #0]
 80052f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052fc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	699a      	ldr	r2, [r3, #24]
 8005302:	8b7b      	ldrh	r3, [r7, #26]
 8005304:	429a      	cmp	r2, r3
 8005306:	d306      	bcc.n	8005316 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	699a      	ldr	r2, [r3, #24]
 800530c:	8b7b      	ldrh	r3, [r7, #26]
 800530e:	1ad2      	subs	r2, r2, r3
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	619a      	str	r2, [r3, #24]
 8005314:	e002      	b.n	800531c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2200      	movs	r2, #0
 800531a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d123      	bne.n	800536c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	b29b      	uxth	r3, r3
 8005336:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800533a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800533e:	83fb      	strh	r3, [r7, #30]
 8005340:	8bfb      	ldrh	r3, [r7, #30]
 8005342:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005346:	83fb      	strh	r3, [r7, #30]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	461a      	mov	r2, r3
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	441a      	add	r2, r3
 8005356:	8bfb      	ldrh	r3, [r7, #30]
 8005358:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800535c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005360:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005368:	b29b      	uxth	r3, r3
 800536a:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800536c:	88fb      	ldrh	r3, [r7, #6]
 800536e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005372:	2b00      	cmp	r3, #0
 8005374:	d11f      	bne.n	80053b6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	461a      	mov	r2, r3
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	b29b      	uxth	r3, r3
 8005388:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800538c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005390:	83bb      	strh	r3, [r7, #28]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	461a      	mov	r2, r3
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	441a      	add	r2, r3
 80053a0:	8bbb      	ldrh	r3, [r7, #28]
 80053a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80053b6:	8b7b      	ldrh	r3, [r7, #26]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d008      	beq.n	80053ce <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6818      	ldr	r0, [r3, #0]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	6959      	ldr	r1, [r3, #20]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	895a      	ldrh	r2, [r3, #10]
 80053c8:	8b7b      	ldrh	r3, [r7, #26]
 80053ca:	f005 fa43 	bl	800a854 <USB_ReadPMA>
    }
  }

  return count;
 80053ce:	8b7b      	ldrh	r3, [r7, #26]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3720      	adds	r7, #32
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b0a6      	sub	sp, #152	@ 0x98
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	4613      	mov	r3, r2
 80053e4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80053e6:	88fb      	ldrh	r3, [r7, #6]
 80053e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 81f7 	beq.w	80057e0 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	461a      	mov	r2, r3
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	4413      	add	r3, r2
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	6812      	ldr	r2, [r2, #0]
 800540a:	4413      	add	r3, r2
 800540c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005410:	881b      	ldrh	r3, [r3, #0]
 8005412:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005416:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	699a      	ldr	r2, [r3, #24]
 800541e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005422:	429a      	cmp	r2, r3
 8005424:	d907      	bls.n	8005436 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	699a      	ldr	r2, [r3, #24]
 800542a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800542e:	1ad2      	subs	r2, r2, r3
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	619a      	str	r2, [r3, #24]
 8005434:	e002      	b.n	800543c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	2200      	movs	r2, #0
 800543a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	2b00      	cmp	r3, #0
 8005442:	f040 80e1 	bne.w	8005608 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	785b      	ldrb	r3, [r3, #1]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d126      	bne.n	800549c <HAL_PCD_EP_DB_Transmit+0xc4>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	633b      	str	r3, [r7, #48]	@ 0x30
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800545c:	b29b      	uxth	r3, r3
 800545e:	461a      	mov	r2, r3
 8005460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005462:	4413      	add	r3, r2
 8005464:	633b      	str	r3, [r7, #48]	@ 0x30
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	00da      	lsls	r2, r3, #3
 800546c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546e:	4413      	add	r3, r2
 8005470:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005474:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	b29b      	uxth	r3, r3
 800547c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005480:	b29a      	uxth	r2, r3
 8005482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005484:	801a      	strh	r2, [r3, #0]
 8005486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005488:	881b      	ldrh	r3, [r3, #0]
 800548a:	b29b      	uxth	r3, r3
 800548c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005494:	b29a      	uxth	r2, r3
 8005496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005498:	801a      	strh	r2, [r3, #0]
 800549a:	e01a      	b.n	80054d2 <HAL_PCD_EP_DB_Transmit+0xfa>
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	785b      	ldrb	r3, [r3, #1]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d116      	bne.n	80054d2 <HAL_PCD_EP_DB_Transmit+0xfa>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	461a      	mov	r2, r3
 80054b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b8:	4413      	add	r3, r2
 80054ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	00da      	lsls	r2, r3, #3
 80054c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c4:	4413      	add	r3, r2
 80054c6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80054ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80054cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ce:	2200      	movs	r2, #0
 80054d0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	785b      	ldrb	r3, [r3, #1]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d126      	bne.n	800552e <HAL_PCD_EP_DB_Transmit+0x156>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	623b      	str	r3, [r7, #32]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	461a      	mov	r2, r3
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	4413      	add	r3, r2
 80054f6:	623b      	str	r3, [r7, #32]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	00da      	lsls	r2, r3, #3
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	4413      	add	r3, r2
 8005502:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005506:	61fb      	str	r3, [r7, #28]
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	881b      	ldrh	r3, [r3, #0]
 800550c:	b29b      	uxth	r3, r3
 800550e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005512:	b29a      	uxth	r2, r3
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	801a      	strh	r2, [r3, #0]
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	b29b      	uxth	r3, r3
 800551e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005526:	b29a      	uxth	r2, r3
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	801a      	strh	r2, [r3, #0]
 800552c:	e017      	b.n	800555e <HAL_PCD_EP_DB_Transmit+0x186>
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	785b      	ldrb	r3, [r3, #1]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d113      	bne.n	800555e <HAL_PCD_EP_DB_Transmit+0x186>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800553e:	b29b      	uxth	r3, r3
 8005540:	461a      	mov	r2, r3
 8005542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005544:	4413      	add	r3, r2
 8005546:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	00da      	lsls	r2, r3, #3
 800554e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005550:	4413      	add	r3, r2
 8005552:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005556:	627b      	str	r3, [r7, #36]	@ 0x24
 8005558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555a:	2200      	movs	r2, #0
 800555c:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	78db      	ldrb	r3, [r3, #3]
 8005562:	2b02      	cmp	r3, #2
 8005564:	d123      	bne.n	80055ae <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	b29b      	uxth	r3, r3
 8005578:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800557c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005580:	837b      	strh	r3, [r7, #26]
 8005582:	8b7b      	ldrh	r3, [r7, #26]
 8005584:	f083 0320 	eor.w	r3, r3, #32
 8005588:	837b      	strh	r3, [r7, #26]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	461a      	mov	r2, r3
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	441a      	add	r2, r3
 8005598:	8b7b      	ldrh	r3, [r7, #26]
 800559a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800559e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	4619      	mov	r1, r3
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f007 f80c 	bl	800c5d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d01f      	beq.n	8005604 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	461a      	mov	r2, r3
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055de:	833b      	strh	r3, [r7, #24]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	461a      	mov	r2, r3
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	441a      	add	r2, r3
 80055ee:	8b3b      	ldrh	r3, [r7, #24]
 80055f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80055fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005600:	b29b      	uxth	r3, r3
 8005602:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8005604:	2300      	movs	r3, #0
 8005606:	e31f      	b.n	8005c48 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005608:	88fb      	ldrh	r3, [r7, #6]
 800560a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d021      	beq.n	8005656 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	461a      	mov	r2, r3
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	b29b      	uxth	r3, r3
 8005624:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005628:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800562c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	461a      	mov	r2, r3
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	441a      	add	r2, r3
 800563e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005642:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005646:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800564a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800564e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005652:	b29b      	uxth	r3, r3
 8005654:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800565c:	2b01      	cmp	r3, #1
 800565e:	f040 82ca 	bne.w	8005bf6 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	695a      	ldr	r2, [r3, #20]
 8005666:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800566a:	441a      	add	r2, r3
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	69da      	ldr	r2, [r3, #28]
 8005674:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005678:	441a      	add	r2, r3
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	6a1a      	ldr	r2, [r3, #32]
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	429a      	cmp	r2, r3
 8005688:	d309      	bcc.n	800569e <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	6a1a      	ldr	r2, [r3, #32]
 8005694:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005696:	1ad2      	subs	r2, r2, r3
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	621a      	str	r2, [r3, #32]
 800569c:	e015      	b.n	80056ca <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d107      	bne.n	80056b6 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 80056a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80056aa:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80056b4:	e009      	b.n	80056ca <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2200      	movs	r2, #0
 80056c8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	785b      	ldrb	r3, [r3, #1]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d15f      	bne.n	8005792 <HAL_PCD_EP_DB_Transmit+0x3ba>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	461a      	mov	r2, r3
 80056e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056e6:	4413      	add	r3, r2
 80056e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	00da      	lsls	r2, r3, #3
 80056f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056f2:	4413      	add	r3, r2
 80056f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80056f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	b29b      	uxth	r3, r3
 8005700:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005704:	b29a      	uxth	r2, r3
 8005706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005708:	801a      	strh	r2, [r3, #0]
 800570a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10a      	bne.n	8005726 <HAL_PCD_EP_DB_Transmit+0x34e>
 8005710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	b29b      	uxth	r3, r3
 8005716:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800571a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800571e:	b29a      	uxth	r2, r3
 8005720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005722:	801a      	strh	r2, [r3, #0]
 8005724:	e051      	b.n	80057ca <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005726:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005728:	2b3e      	cmp	r3, #62	@ 0x3e
 800572a:	d816      	bhi.n	800575a <HAL_PCD_EP_DB_Transmit+0x382>
 800572c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800572e:	085b      	lsrs	r3, r3, #1
 8005730:	653b      	str	r3, [r7, #80]	@ 0x50
 8005732:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	2b00      	cmp	r3, #0
 800573a:	d002      	beq.n	8005742 <HAL_PCD_EP_DB_Transmit+0x36a>
 800573c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800573e:	3301      	adds	r3, #1
 8005740:	653b      	str	r3, [r7, #80]	@ 0x50
 8005742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005744:	881b      	ldrh	r3, [r3, #0]
 8005746:	b29a      	uxth	r2, r3
 8005748:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800574a:	b29b      	uxth	r3, r3
 800574c:	029b      	lsls	r3, r3, #10
 800574e:	b29b      	uxth	r3, r3
 8005750:	4313      	orrs	r3, r2
 8005752:	b29a      	uxth	r2, r3
 8005754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005756:	801a      	strh	r2, [r3, #0]
 8005758:	e037      	b.n	80057ca <HAL_PCD_EP_DB_Transmit+0x3f2>
 800575a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800575c:	095b      	lsrs	r3, r3, #5
 800575e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005760:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005762:	f003 031f 	and.w	r3, r3, #31
 8005766:	2b00      	cmp	r3, #0
 8005768:	d102      	bne.n	8005770 <HAL_PCD_EP_DB_Transmit+0x398>
 800576a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800576c:	3b01      	subs	r3, #1
 800576e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	b29a      	uxth	r2, r3
 8005776:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005778:	b29b      	uxth	r3, r3
 800577a:	029b      	lsls	r3, r3, #10
 800577c:	b29b      	uxth	r3, r3
 800577e:	4313      	orrs	r3, r2
 8005780:	b29b      	uxth	r3, r3
 8005782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800578a:	b29a      	uxth	r2, r3
 800578c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800578e:	801a      	strh	r2, [r3, #0]
 8005790:	e01b      	b.n	80057ca <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	785b      	ldrb	r3, [r3, #1]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d117      	bne.n	80057ca <HAL_PCD_EP_DB_Transmit+0x3f2>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	461a      	mov	r2, r3
 80057ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057ae:	4413      	add	r3, r2
 80057b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	00da      	lsls	r2, r3, #3
 80057b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057ba:	4413      	add	r3, r2
 80057bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80057c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80057c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057c8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	6959      	ldr	r1, [r3, #20]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	891a      	ldrh	r2, [r3, #8]
 80057d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057d8:	b29b      	uxth	r3, r3
 80057da:	f004 fff8 	bl	800a7ce <USB_WritePMA>
 80057de:	e20a      	b.n	8005bf6 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	461a      	mov	r2, r3
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	00db      	lsls	r3, r3, #3
 80057f2:	4413      	add	r3, r2
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	6812      	ldr	r2, [r2, #0]
 80057f8:	4413      	add	r3, r2
 80057fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005804:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	699a      	ldr	r2, [r3, #24]
 800580c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005810:	429a      	cmp	r2, r3
 8005812:	d307      	bcc.n	8005824 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	699a      	ldr	r2, [r3, #24]
 8005818:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800581c:	1ad2      	subs	r2, r2, r3
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	619a      	str	r2, [r3, #24]
 8005822:	e002      	b.n	800582a <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	2200      	movs	r2, #0
 8005828:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	2b00      	cmp	r3, #0
 8005830:	f040 80f6 	bne.w	8005a20 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	785b      	ldrb	r3, [r3, #1]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d126      	bne.n	800588a <HAL_PCD_EP_DB_Transmit+0x4b2>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	677b      	str	r3, [r7, #116]	@ 0x74
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800584a:	b29b      	uxth	r3, r3
 800584c:	461a      	mov	r2, r3
 800584e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005850:	4413      	add	r3, r2
 8005852:	677b      	str	r3, [r7, #116]	@ 0x74
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	00da      	lsls	r2, r3, #3
 800585a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800585c:	4413      	add	r3, r2
 800585e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005862:	673b      	str	r3, [r7, #112]	@ 0x70
 8005864:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	b29b      	uxth	r3, r3
 800586a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800586e:	b29a      	uxth	r2, r3
 8005870:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005872:	801a      	strh	r2, [r3, #0]
 8005874:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005876:	881b      	ldrh	r3, [r3, #0]
 8005878:	b29b      	uxth	r3, r3
 800587a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800587e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005882:	b29a      	uxth	r2, r3
 8005884:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005886:	801a      	strh	r2, [r3, #0]
 8005888:	e01a      	b.n	80058c0 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	785b      	ldrb	r3, [r3, #1]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d116      	bne.n	80058c0 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	461a      	mov	r2, r3
 80058a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80058a6:	4413      	add	r3, r2
 80058a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	00da      	lsls	r2, r3, #3
 80058b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80058b2:	4413      	add	r3, r2
 80058b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80058b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058bc:	2200      	movs	r2, #0
 80058be:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	785b      	ldrb	r3, [r3, #1]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d12f      	bne.n	8005930 <HAL_PCD_EP_DB_Transmit+0x558>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	461a      	mov	r2, r3
 80058e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058e8:	4413      	add	r3, r2
 80058ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	00da      	lsls	r2, r3, #3
 80058f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058f8:	4413      	add	r3, r2
 80058fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80058fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005902:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	b29b      	uxth	r3, r3
 800590a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800590e:	b29a      	uxth	r2, r3
 8005910:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005914:	801a      	strh	r2, [r3, #0]
 8005916:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	b29b      	uxth	r3, r3
 800591e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005926:	b29a      	uxth	r2, r3
 8005928:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800592c:	801a      	strh	r2, [r3, #0]
 800592e:	e01c      	b.n	800596a <HAL_PCD_EP_DB_Transmit+0x592>
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	785b      	ldrb	r3, [r3, #1]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d118      	bne.n	800596a <HAL_PCD_EP_DB_Transmit+0x592>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005940:	b29b      	uxth	r3, r3
 8005942:	461a      	mov	r2, r3
 8005944:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005948:	4413      	add	r3, r2
 800594a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	00da      	lsls	r2, r3, #3
 8005954:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005958:	4413      	add	r3, r2
 800595a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800595e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005962:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005966:	2200      	movs	r2, #0
 8005968:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	78db      	ldrb	r3, [r3, #3]
 800596e:	2b02      	cmp	r3, #2
 8005970:	d127      	bne.n	80059c2 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	461a      	mov	r2, r3
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	b29b      	uxth	r3, r3
 8005984:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005988:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800598c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005990:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005994:	f083 0320 	eor.w	r3, r3, #32
 8005998:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	461a      	mov	r2, r3
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	441a      	add	r2, r3
 80059aa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80059ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059be:	b29b      	uxth	r3, r3
 80059c0:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	4619      	mov	r1, r3
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f006 fe02 	bl	800c5d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80059ce:	88fb      	ldrh	r3, [r7, #6]
 80059d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d121      	bne.n	8005a1c <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	461a      	mov	r2, r3
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059f2:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	441a      	add	r2, r3
 8005a04:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8005a08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	e113      	b.n	8005c48 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005a20:	88fb      	ldrh	r3, [r7, #6]
 8005a22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d121      	bne.n	8005a6e <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a44:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	441a      	add	r2, r3
 8005a56:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005a5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	f040 80be 	bne.w	8005bf6 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	695a      	ldr	r2, [r3, #20]
 8005a7e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005a82:	441a      	add	r2, r3
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	69da      	ldr	r2, [r3, #28]
 8005a8c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005a90:	441a      	add	r2, r3
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	6a1a      	ldr	r2, [r3, #32]
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d309      	bcc.n	8005ab6 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	6a1a      	ldr	r2, [r3, #32]
 8005aac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005aae:	1ad2      	subs	r2, r2, r3
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	621a      	str	r2, [r3, #32]
 8005ab4:	e015      	b.n	8005ae2 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d107      	bne.n	8005ace <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8005abe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005ac2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005acc:	e009      	b.n	8005ae2 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	785b      	ldrb	r3, [r3, #1]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d15f      	bne.n	8005bb0 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	461a      	mov	r2, r3
 8005b02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b04:	4413      	add	r3, r2
 8005b06:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	00da      	lsls	r2, r3, #3
 8005b0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b10:	4413      	add	r3, r2
 8005b12:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005b16:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b26:	801a      	strh	r2, [r3, #0]
 8005b28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10a      	bne.n	8005b44 <HAL_PCD_EP_DB_Transmit+0x76c>
 8005b2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b30:	881b      	ldrh	r3, [r3, #0]
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b40:	801a      	strh	r2, [r3, #0]
 8005b42:	e04e      	b.n	8005be2 <HAL_PCD_EP_DB_Transmit+0x80a>
 8005b44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b46:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b48:	d816      	bhi.n	8005b78 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005b4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b4c:	085b      	lsrs	r3, r3, #1
 8005b4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <HAL_PCD_EP_DB_Transmit+0x788>
 8005b5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	029b      	lsls	r3, r3, #10
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b74:	801a      	strh	r2, [r3, #0]
 8005b76:	e034      	b.n	8005be2 <HAL_PCD_EP_DB_Transmit+0x80a>
 8005b78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b7a:	095b      	lsrs	r3, r3, #5
 8005b7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b80:	f003 031f 	and.w	r3, r3, #31
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d102      	bne.n	8005b8e <HAL_PCD_EP_DB_Transmit+0x7b6>
 8005b88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	029b      	lsls	r3, r3, #10
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bac:	801a      	strh	r2, [r3, #0]
 8005bae:	e018      	b.n	8005be2 <HAL_PCD_EP_DB_Transmit+0x80a>
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	785b      	ldrb	r3, [r3, #1]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d114      	bne.n	8005be2 <HAL_PCD_EP_DB_Transmit+0x80a>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bc6:	4413      	add	r3, r2
 8005bc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	00da      	lsls	r2, r3, #3
 8005bd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005bd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005bda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005be0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6818      	ldr	r0, [r3, #0]
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	6959      	ldr	r1, [r3, #20]
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	895a      	ldrh	r2, [r3, #10]
 8005bee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	f004 fdec 	bl	800a7ce <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4413      	add	r3, r2
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c10:	82fb      	strh	r3, [r7, #22]
 8005c12:	8afb      	ldrh	r3, [r7, #22]
 8005c14:	f083 0310 	eor.w	r3, r3, #16
 8005c18:	82fb      	strh	r3, [r7, #22]
 8005c1a:	8afb      	ldrh	r3, [r7, #22]
 8005c1c:	f083 0320 	eor.w	r3, r3, #32
 8005c20:	82fb      	strh	r3, [r7, #22]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	461a      	mov	r2, r3
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	441a      	add	r2, r3
 8005c30:	8afb      	ldrh	r3, [r7, #22]
 8005c32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3798      	adds	r7, #152	@ 0x98
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	607b      	str	r3, [r7, #4]
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	817b      	strh	r3, [r7, #10]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005c62:	897b      	ldrh	r3, [r7, #10]
 8005c64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00b      	beq.n	8005c86 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c6e:	897b      	ldrh	r3, [r7, #10]
 8005c70:	f003 0207 	and.w	r2, r3, #7
 8005c74:	4613      	mov	r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4413      	add	r3, r2
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	3310      	adds	r3, #16
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	4413      	add	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	e009      	b.n	8005c9a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c86:	897a      	ldrh	r2, [r7, #10]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005c9a:	893b      	ldrh	r3, [r7, #8]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d107      	bne.n	8005cb0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	80da      	strh	r2, [r3, #6]
 8005cae:	e00b      	b.n	8005cc8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	0c1b      	lsrs	r3, r3, #16
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	371c      	adds	r7, #28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b085      	sub	sp, #20
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	f043 0301 	orr.w	r3, r3, #1
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	f043 0302 	orr.w	r3, r3, #2
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
	...

08005d2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d141      	bne.n	8005dbe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d3a:	4b4b      	ldr	r3, [pc, #300]	@ (8005e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d46:	d131      	bne.n	8005dac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d48:	4b47      	ldr	r3, [pc, #284]	@ (8005e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d4e:	4a46      	ldr	r2, [pc, #280]	@ (8005e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d58:	4b43      	ldr	r3, [pc, #268]	@ (8005e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d60:	4a41      	ldr	r2, [pc, #260]	@ (8005e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d68:	4b40      	ldr	r3, [pc, #256]	@ (8005e6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2232      	movs	r2, #50	@ 0x32
 8005d6e:	fb02 f303 	mul.w	r3, r2, r3
 8005d72:	4a3f      	ldr	r2, [pc, #252]	@ (8005e70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d74:	fba2 2303 	umull	r2, r3, r2, r3
 8005d78:	0c9b      	lsrs	r3, r3, #18
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d7e:	e002      	b.n	8005d86 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	3b01      	subs	r3, #1
 8005d84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d86:	4b38      	ldr	r3, [pc, #224]	@ (8005e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d92:	d102      	bne.n	8005d9a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1f2      	bne.n	8005d80 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d9a:	4b33      	ldr	r3, [pc, #204]	@ (8005e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005da2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005da6:	d158      	bne.n	8005e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e057      	b.n	8005e5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005dac:	4b2e      	ldr	r3, [pc, #184]	@ (8005e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005db2:	4a2d      	ldr	r2, [pc, #180]	@ (8005e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005db4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005db8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005dbc:	e04d      	b.n	8005e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dc4:	d141      	bne.n	8005e4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005dc6:	4b28      	ldr	r3, [pc, #160]	@ (8005e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dd2:	d131      	bne.n	8005e38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005dd4:	4b24      	ldr	r3, [pc, #144]	@ (8005e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dda:	4a23      	ldr	r2, [pc, #140]	@ (8005e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ddc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005de0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005de4:	4b20      	ldr	r3, [pc, #128]	@ (8005e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005dec:	4a1e      	ldr	r2, [pc, #120]	@ (8005e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005df2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005df4:	4b1d      	ldr	r3, [pc, #116]	@ (8005e6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2232      	movs	r2, #50	@ 0x32
 8005dfa:	fb02 f303 	mul.w	r3, r2, r3
 8005dfe:	4a1c      	ldr	r2, [pc, #112]	@ (8005e70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005e00:	fba2 2303 	umull	r2, r3, r2, r3
 8005e04:	0c9b      	lsrs	r3, r3, #18
 8005e06:	3301      	adds	r3, #1
 8005e08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e0a:	e002      	b.n	8005e12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e12:	4b15      	ldr	r3, [pc, #84]	@ (8005e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e1e:	d102      	bne.n	8005e26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1f2      	bne.n	8005e0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e26:	4b10      	ldr	r3, [pc, #64]	@ (8005e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e32:	d112      	bne.n	8005e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e011      	b.n	8005e5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e38:	4b0b      	ldr	r3, [pc, #44]	@ (8005e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8005e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005e48:	e007      	b.n	8005e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e4a:	4b07      	ldr	r3, [pc, #28]	@ (8005e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e52:	4a05      	ldr	r2, [pc, #20]	@ (8005e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005e58:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr
 8005e68:	40007000 	.word	0x40007000
 8005e6c:	20000000 	.word	0x20000000
 8005e70:	431bde83 	.word	0x431bde83

08005e74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b088      	sub	sp, #32
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e2fe      	b.n	8006484 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d075      	beq.n	8005f7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e92:	4b97      	ldr	r3, [pc, #604]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f003 030c 	and.w	r3, r3, #12
 8005e9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e9c:	4b94      	ldr	r3, [pc, #592]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	f003 0303 	and.w	r3, r3, #3
 8005ea4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	2b0c      	cmp	r3, #12
 8005eaa:	d102      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x3e>
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d002      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x44>
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	2b08      	cmp	r3, #8
 8005eb6:	d10b      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eb8:	4b8d      	ldr	r3, [pc, #564]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d05b      	beq.n	8005f7c <HAL_RCC_OscConfig+0x108>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d157      	bne.n	8005f7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e2d9      	b.n	8006484 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ed8:	d106      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x74>
 8005eda:	4b85      	ldr	r3, [pc, #532]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a84      	ldr	r2, [pc, #528]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 8005ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	e01d      	b.n	8005f24 <HAL_RCC_OscConfig+0xb0>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ef0:	d10c      	bne.n	8005f0c <HAL_RCC_OscConfig+0x98>
 8005ef2:	4b7f      	ldr	r3, [pc, #508]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a7e      	ldr	r2, [pc, #504]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 8005ef8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005efc:	6013      	str	r3, [r2, #0]
 8005efe:	4b7c      	ldr	r3, [pc, #496]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a7b      	ldr	r2, [pc, #492]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 8005f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f08:	6013      	str	r3, [r2, #0]
 8005f0a:	e00b      	b.n	8005f24 <HAL_RCC_OscConfig+0xb0>
 8005f0c:	4b78      	ldr	r3, [pc, #480]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a77      	ldr	r2, [pc, #476]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 8005f12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f16:	6013      	str	r3, [r2, #0]
 8005f18:	4b75      	ldr	r3, [pc, #468]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a74      	ldr	r2, [pc, #464]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 8005f1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d013      	beq.n	8005f54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f2c:	f7fc fd86 	bl	8002a3c <HAL_GetTick>
 8005f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f32:	e008      	b.n	8005f46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f34:	f7fc fd82 	bl	8002a3c <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	2b64      	cmp	r3, #100	@ 0x64
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e29e      	b.n	8006484 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f46:	4b6a      	ldr	r3, [pc, #424]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d0f0      	beq.n	8005f34 <HAL_RCC_OscConfig+0xc0>
 8005f52:	e014      	b.n	8005f7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f54:	f7fc fd72 	bl	8002a3c <HAL_GetTick>
 8005f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f5a:	e008      	b.n	8005f6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f5c:	f7fc fd6e 	bl	8002a3c <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b64      	cmp	r3, #100	@ 0x64
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e28a      	b.n	8006484 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f6e:	4b60      	ldr	r3, [pc, #384]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1f0      	bne.n	8005f5c <HAL_RCC_OscConfig+0xe8>
 8005f7a:	e000      	b.n	8005f7e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d075      	beq.n	8006076 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f8a:	4b59      	ldr	r3, [pc, #356]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f003 030c 	and.w	r3, r3, #12
 8005f92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f94:	4b56      	ldr	r3, [pc, #344]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f003 0303 	and.w	r3, r3, #3
 8005f9c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	2b0c      	cmp	r3, #12
 8005fa2:	d102      	bne.n	8005faa <HAL_RCC_OscConfig+0x136>
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d002      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x13c>
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	2b04      	cmp	r3, #4
 8005fae:	d11f      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fb0:	4b4f      	ldr	r3, [pc, #316]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d005      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x154>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e25d      	b.n	8006484 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fc8:	4b49      	ldr	r3, [pc, #292]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	061b      	lsls	r3, r3, #24
 8005fd6:	4946      	ldr	r1, [pc, #280]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005fdc:	4b45      	ldr	r3, [pc, #276]	@ (80060f4 <HAL_RCC_OscConfig+0x280>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7fc fcdf 	bl	80029a4 <HAL_InitTick>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d043      	beq.n	8006074 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e249      	b.n	8006484 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d023      	beq.n	8006040 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ff8:	4b3d      	ldr	r3, [pc, #244]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a3c      	ldr	r2, [pc, #240]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 8005ffe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006004:	f7fc fd1a 	bl	8002a3c <HAL_GetTick>
 8006008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800600a:	e008      	b.n	800601e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800600c:	f7fc fd16 	bl	8002a3c <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e232      	b.n	8006484 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800601e:	4b34      	ldr	r3, [pc, #208]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0f0      	beq.n	800600c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800602a:	4b31      	ldr	r3, [pc, #196]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	061b      	lsls	r3, r3, #24
 8006038:	492d      	ldr	r1, [pc, #180]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 800603a:	4313      	orrs	r3, r2
 800603c:	604b      	str	r3, [r1, #4]
 800603e:	e01a      	b.n	8006076 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006040:	4b2b      	ldr	r3, [pc, #172]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a2a      	ldr	r2, [pc, #168]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 8006046:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800604a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800604c:	f7fc fcf6 	bl	8002a3c <HAL_GetTick>
 8006050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006052:	e008      	b.n	8006066 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006054:	f7fc fcf2 	bl	8002a3c <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b02      	cmp	r3, #2
 8006060:	d901      	bls.n	8006066 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e20e      	b.n	8006484 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006066:	4b22      	ldr	r3, [pc, #136]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1f0      	bne.n	8006054 <HAL_RCC_OscConfig+0x1e0>
 8006072:	e000      	b.n	8006076 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006074:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0308 	and.w	r3, r3, #8
 800607e:	2b00      	cmp	r3, #0
 8006080:	d041      	beq.n	8006106 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d01c      	beq.n	80060c4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800608a:	4b19      	ldr	r3, [pc, #100]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 800608c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006090:	4a17      	ldr	r2, [pc, #92]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 8006092:	f043 0301 	orr.w	r3, r3, #1
 8006096:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800609a:	f7fc fccf 	bl	8002a3c <HAL_GetTick>
 800609e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060a0:	e008      	b.n	80060b4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060a2:	f7fc fccb 	bl	8002a3c <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d901      	bls.n	80060b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e1e7      	b.n	8006484 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060b4:	4b0e      	ldr	r3, [pc, #56]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 80060b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0ef      	beq.n	80060a2 <HAL_RCC_OscConfig+0x22e>
 80060c2:	e020      	b.n	8006106 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060c4:	4b0a      	ldr	r3, [pc, #40]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 80060c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060ca:	4a09      	ldr	r2, [pc, #36]	@ (80060f0 <HAL_RCC_OscConfig+0x27c>)
 80060cc:	f023 0301 	bic.w	r3, r3, #1
 80060d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d4:	f7fc fcb2 	bl	8002a3c <HAL_GetTick>
 80060d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80060da:	e00d      	b.n	80060f8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060dc:	f7fc fcae 	bl	8002a3c <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d906      	bls.n	80060f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e1ca      	b.n	8006484 <HAL_RCC_OscConfig+0x610>
 80060ee:	bf00      	nop
 80060f0:	40021000 	.word	0x40021000
 80060f4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80060f8:	4b8c      	ldr	r3, [pc, #560]	@ (800632c <HAL_RCC_OscConfig+0x4b8>)
 80060fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1ea      	bne.n	80060dc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0304 	and.w	r3, r3, #4
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 80a6 	beq.w	8006260 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006114:	2300      	movs	r3, #0
 8006116:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006118:	4b84      	ldr	r3, [pc, #528]	@ (800632c <HAL_RCC_OscConfig+0x4b8>)
 800611a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800611c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <HAL_RCC_OscConfig+0x2b4>
 8006124:	2301      	movs	r3, #1
 8006126:	e000      	b.n	800612a <HAL_RCC_OscConfig+0x2b6>
 8006128:	2300      	movs	r3, #0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00d      	beq.n	800614a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800612e:	4b7f      	ldr	r3, [pc, #508]	@ (800632c <HAL_RCC_OscConfig+0x4b8>)
 8006130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006132:	4a7e      	ldr	r2, [pc, #504]	@ (800632c <HAL_RCC_OscConfig+0x4b8>)
 8006134:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006138:	6593      	str	r3, [r2, #88]	@ 0x58
 800613a:	4b7c      	ldr	r3, [pc, #496]	@ (800632c <HAL_RCC_OscConfig+0x4b8>)
 800613c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800613e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006146:	2301      	movs	r3, #1
 8006148:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800614a:	4b79      	ldr	r3, [pc, #484]	@ (8006330 <HAL_RCC_OscConfig+0x4bc>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006152:	2b00      	cmp	r3, #0
 8006154:	d118      	bne.n	8006188 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006156:	4b76      	ldr	r3, [pc, #472]	@ (8006330 <HAL_RCC_OscConfig+0x4bc>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a75      	ldr	r2, [pc, #468]	@ (8006330 <HAL_RCC_OscConfig+0x4bc>)
 800615c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006162:	f7fc fc6b 	bl	8002a3c <HAL_GetTick>
 8006166:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006168:	e008      	b.n	800617c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800616a:	f7fc fc67 	bl	8002a3c <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b02      	cmp	r3, #2
 8006176:	d901      	bls.n	800617c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e183      	b.n	8006484 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800617c:	4b6c      	ldr	r3, [pc, #432]	@ (8006330 <HAL_RCC_OscConfig+0x4bc>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0f0      	beq.n	800616a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d108      	bne.n	80061a2 <HAL_RCC_OscConfig+0x32e>
 8006190:	4b66      	ldr	r3, [pc, #408]	@ (800632c <HAL_RCC_OscConfig+0x4b8>)
 8006192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006196:	4a65      	ldr	r2, [pc, #404]	@ (800632c <HAL_RCC_OscConfig+0x4b8>)
 8006198:	f043 0301 	orr.w	r3, r3, #1
 800619c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80061a0:	e024      	b.n	80061ec <HAL_RCC_OscConfig+0x378>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	2b05      	cmp	r3, #5
 80061a8:	d110      	bne.n	80061cc <HAL_RCC_OscConfig+0x358>
 80061aa:	4b60      	ldr	r3, [pc, #384]	@ (800632c <HAL_RCC_OscConfig+0x4b8>)
 80061ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b0:	4a5e      	ldr	r2, [pc, #376]	@ (800632c <HAL_RCC_OscConfig+0x4b8>)
 80061b2:	f043 0304 	orr.w	r3, r3, #4
 80061b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80061ba:	4b5c      	ldr	r3, [pc, #368]	@ (800632c <HAL_RCC_OscConfig+0x4b8>)
 80061bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061c0:	4a5a      	ldr	r2, [pc, #360]	@ (800632c <HAL_RCC_OscConfig+0x4b8>)
 80061c2:	f043 0301 	orr.w	r3, r3, #1
 80061c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80061ca:	e00f      	b.n	80061ec <HAL_RCC_OscConfig+0x378>
 80061cc:	4b57      	ldr	r3, [pc, #348]	@ (800632c <HAL_RCC_OscConfig+0x4b8>)
 80061ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061d2:	4a56      	ldr	r2, [pc, #344]	@ (800632c <HAL_RCC_OscConfig+0x4b8>)
 80061d4:	f023 0301 	bic.w	r3, r3, #1
 80061d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80061dc:	4b53      	ldr	r3, [pc, #332]	@ (800632c <HAL_RCC_OscConfig+0x4b8>)
 80061de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061e2:	4a52      	ldr	r2, [pc, #328]	@ (800632c <HAL_RCC_OscConfig+0x4b8>)
 80061e4:	f023 0304 	bic.w	r3, r3, #4
 80061e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d016      	beq.n	8006222 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f4:	f7fc fc22 	bl	8002a3c <HAL_GetTick>
 80061f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061fa:	e00a      	b.n	8006212 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061fc:	f7fc fc1e 	bl	8002a3c <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800620a:	4293      	cmp	r3, r2
 800620c:	d901      	bls.n	8006212 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e138      	b.n	8006484 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006212:	4b46      	ldr	r3, [pc, #280]	@ (800632c <HAL_RCC_OscConfig+0x4b8>)
 8006214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0ed      	beq.n	80061fc <HAL_RCC_OscConfig+0x388>
 8006220:	e015      	b.n	800624e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006222:	f7fc fc0b 	bl	8002a3c <HAL_GetTick>
 8006226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006228:	e00a      	b.n	8006240 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800622a:	f7fc fc07 	bl	8002a3c <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006238:	4293      	cmp	r3, r2
 800623a:	d901      	bls.n	8006240 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e121      	b.n	8006484 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006240:	4b3a      	ldr	r3, [pc, #232]	@ (800632c <HAL_RCC_OscConfig+0x4b8>)
 8006242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1ed      	bne.n	800622a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800624e:	7ffb      	ldrb	r3, [r7, #31]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d105      	bne.n	8006260 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006254:	4b35      	ldr	r3, [pc, #212]	@ (800632c <HAL_RCC_OscConfig+0x4b8>)
 8006256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006258:	4a34      	ldr	r2, [pc, #208]	@ (800632c <HAL_RCC_OscConfig+0x4b8>)
 800625a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800625e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0320 	and.w	r3, r3, #32
 8006268:	2b00      	cmp	r3, #0
 800626a:	d03c      	beq.n	80062e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d01c      	beq.n	80062ae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006274:	4b2d      	ldr	r3, [pc, #180]	@ (800632c <HAL_RCC_OscConfig+0x4b8>)
 8006276:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800627a:	4a2c      	ldr	r2, [pc, #176]	@ (800632c <HAL_RCC_OscConfig+0x4b8>)
 800627c:	f043 0301 	orr.w	r3, r3, #1
 8006280:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006284:	f7fc fbda 	bl	8002a3c <HAL_GetTick>
 8006288:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800628a:	e008      	b.n	800629e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800628c:	f7fc fbd6 	bl	8002a3c <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	2b02      	cmp	r3, #2
 8006298:	d901      	bls.n	800629e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e0f2      	b.n	8006484 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800629e:	4b23      	ldr	r3, [pc, #140]	@ (800632c <HAL_RCC_OscConfig+0x4b8>)
 80062a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062a4:	f003 0302 	and.w	r3, r3, #2
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d0ef      	beq.n	800628c <HAL_RCC_OscConfig+0x418>
 80062ac:	e01b      	b.n	80062e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80062ae:	4b1f      	ldr	r3, [pc, #124]	@ (800632c <HAL_RCC_OscConfig+0x4b8>)
 80062b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062b4:	4a1d      	ldr	r2, [pc, #116]	@ (800632c <HAL_RCC_OscConfig+0x4b8>)
 80062b6:	f023 0301 	bic.w	r3, r3, #1
 80062ba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062be:	f7fc fbbd 	bl	8002a3c <HAL_GetTick>
 80062c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80062c4:	e008      	b.n	80062d8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062c6:	f7fc fbb9 	bl	8002a3c <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d901      	bls.n	80062d8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e0d5      	b.n	8006484 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80062d8:	4b14      	ldr	r3, [pc, #80]	@ (800632c <HAL_RCC_OscConfig+0x4b8>)
 80062da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1ef      	bne.n	80062c6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 80c9 	beq.w	8006482 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062f0:	4b0e      	ldr	r3, [pc, #56]	@ (800632c <HAL_RCC_OscConfig+0x4b8>)
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f003 030c 	and.w	r3, r3, #12
 80062f8:	2b0c      	cmp	r3, #12
 80062fa:	f000 8083 	beq.w	8006404 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	2b02      	cmp	r3, #2
 8006304:	d15e      	bne.n	80063c4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006306:	4b09      	ldr	r3, [pc, #36]	@ (800632c <HAL_RCC_OscConfig+0x4b8>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a08      	ldr	r2, [pc, #32]	@ (800632c <HAL_RCC_OscConfig+0x4b8>)
 800630c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006312:	f7fc fb93 	bl	8002a3c <HAL_GetTick>
 8006316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006318:	e00c      	b.n	8006334 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800631a:	f7fc fb8f 	bl	8002a3c <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	2b02      	cmp	r3, #2
 8006326:	d905      	bls.n	8006334 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e0ab      	b.n	8006484 <HAL_RCC_OscConfig+0x610>
 800632c:	40021000 	.word	0x40021000
 8006330:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006334:	4b55      	ldr	r3, [pc, #340]	@ (800648c <HAL_RCC_OscConfig+0x618>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1ec      	bne.n	800631a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006340:	4b52      	ldr	r3, [pc, #328]	@ (800648c <HAL_RCC_OscConfig+0x618>)
 8006342:	68da      	ldr	r2, [r3, #12]
 8006344:	4b52      	ldr	r3, [pc, #328]	@ (8006490 <HAL_RCC_OscConfig+0x61c>)
 8006346:	4013      	ands	r3, r2
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	6a11      	ldr	r1, [r2, #32]
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006350:	3a01      	subs	r2, #1
 8006352:	0112      	lsls	r2, r2, #4
 8006354:	4311      	orrs	r1, r2
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800635a:	0212      	lsls	r2, r2, #8
 800635c:	4311      	orrs	r1, r2
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006362:	0852      	lsrs	r2, r2, #1
 8006364:	3a01      	subs	r2, #1
 8006366:	0552      	lsls	r2, r2, #21
 8006368:	4311      	orrs	r1, r2
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800636e:	0852      	lsrs	r2, r2, #1
 8006370:	3a01      	subs	r2, #1
 8006372:	0652      	lsls	r2, r2, #25
 8006374:	4311      	orrs	r1, r2
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800637a:	06d2      	lsls	r2, r2, #27
 800637c:	430a      	orrs	r2, r1
 800637e:	4943      	ldr	r1, [pc, #268]	@ (800648c <HAL_RCC_OscConfig+0x618>)
 8006380:	4313      	orrs	r3, r2
 8006382:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006384:	4b41      	ldr	r3, [pc, #260]	@ (800648c <HAL_RCC_OscConfig+0x618>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a40      	ldr	r2, [pc, #256]	@ (800648c <HAL_RCC_OscConfig+0x618>)
 800638a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800638e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006390:	4b3e      	ldr	r3, [pc, #248]	@ (800648c <HAL_RCC_OscConfig+0x618>)
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	4a3d      	ldr	r2, [pc, #244]	@ (800648c <HAL_RCC_OscConfig+0x618>)
 8006396:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800639a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800639c:	f7fc fb4e 	bl	8002a3c <HAL_GetTick>
 80063a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063a2:	e008      	b.n	80063b6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063a4:	f7fc fb4a 	bl	8002a3c <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d901      	bls.n	80063b6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e066      	b.n	8006484 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063b6:	4b35      	ldr	r3, [pc, #212]	@ (800648c <HAL_RCC_OscConfig+0x618>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d0f0      	beq.n	80063a4 <HAL_RCC_OscConfig+0x530>
 80063c2:	e05e      	b.n	8006482 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063c4:	4b31      	ldr	r3, [pc, #196]	@ (800648c <HAL_RCC_OscConfig+0x618>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a30      	ldr	r2, [pc, #192]	@ (800648c <HAL_RCC_OscConfig+0x618>)
 80063ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d0:	f7fc fb34 	bl	8002a3c <HAL_GetTick>
 80063d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063d6:	e008      	b.n	80063ea <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063d8:	f7fc fb30 	bl	8002a3c <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d901      	bls.n	80063ea <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e04c      	b.n	8006484 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063ea:	4b28      	ldr	r3, [pc, #160]	@ (800648c <HAL_RCC_OscConfig+0x618>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1f0      	bne.n	80063d8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80063f6:	4b25      	ldr	r3, [pc, #148]	@ (800648c <HAL_RCC_OscConfig+0x618>)
 80063f8:	68da      	ldr	r2, [r3, #12]
 80063fa:	4924      	ldr	r1, [pc, #144]	@ (800648c <HAL_RCC_OscConfig+0x618>)
 80063fc:	4b25      	ldr	r3, [pc, #148]	@ (8006494 <HAL_RCC_OscConfig+0x620>)
 80063fe:	4013      	ands	r3, r2
 8006400:	60cb      	str	r3, [r1, #12]
 8006402:	e03e      	b.n	8006482 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	69db      	ldr	r3, [r3, #28]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d101      	bne.n	8006410 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e039      	b.n	8006484 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006410:	4b1e      	ldr	r3, [pc, #120]	@ (800648c <HAL_RCC_OscConfig+0x618>)
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f003 0203 	and.w	r2, r3, #3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	429a      	cmp	r2, r3
 8006422:	d12c      	bne.n	800647e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642e:	3b01      	subs	r3, #1
 8006430:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006432:	429a      	cmp	r2, r3
 8006434:	d123      	bne.n	800647e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006440:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006442:	429a      	cmp	r2, r3
 8006444:	d11b      	bne.n	800647e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006450:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006452:	429a      	cmp	r2, r3
 8006454:	d113      	bne.n	800647e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006460:	085b      	lsrs	r3, r3, #1
 8006462:	3b01      	subs	r3, #1
 8006464:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006466:	429a      	cmp	r2, r3
 8006468:	d109      	bne.n	800647e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006474:	085b      	lsrs	r3, r3, #1
 8006476:	3b01      	subs	r3, #1
 8006478:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800647a:	429a      	cmp	r2, r3
 800647c:	d001      	beq.n	8006482 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e000      	b.n	8006484 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3720      	adds	r7, #32
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	40021000 	.word	0x40021000
 8006490:	019f800c 	.word	0x019f800c
 8006494:	feeefffc 	.word	0xfeeefffc

08006498 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80064a2:	2300      	movs	r3, #0
 80064a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e11e      	b.n	80066ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064b0:	4b91      	ldr	r3, [pc, #580]	@ (80066f8 <HAL_RCC_ClockConfig+0x260>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 030f 	and.w	r3, r3, #15
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d910      	bls.n	80064e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064be:	4b8e      	ldr	r3, [pc, #568]	@ (80066f8 <HAL_RCC_ClockConfig+0x260>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f023 020f 	bic.w	r2, r3, #15
 80064c6:	498c      	ldr	r1, [pc, #560]	@ (80066f8 <HAL_RCC_ClockConfig+0x260>)
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ce:	4b8a      	ldr	r3, [pc, #552]	@ (80066f8 <HAL_RCC_ClockConfig+0x260>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 030f 	and.w	r3, r3, #15
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d001      	beq.n	80064e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e106      	b.n	80066ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d073      	beq.n	80065d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	2b03      	cmp	r3, #3
 80064f2:	d129      	bne.n	8006548 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064f4:	4b81      	ldr	r3, [pc, #516]	@ (80066fc <HAL_RCC_ClockConfig+0x264>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e0f4      	b.n	80066ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006504:	f000 f99e 	bl	8006844 <RCC_GetSysClockFreqFromPLLSource>
 8006508:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	4a7c      	ldr	r2, [pc, #496]	@ (8006700 <HAL_RCC_ClockConfig+0x268>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d93f      	bls.n	8006592 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006512:	4b7a      	ldr	r3, [pc, #488]	@ (80066fc <HAL_RCC_ClockConfig+0x264>)
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d009      	beq.n	8006532 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006526:	2b00      	cmp	r3, #0
 8006528:	d033      	beq.n	8006592 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800652e:	2b00      	cmp	r3, #0
 8006530:	d12f      	bne.n	8006592 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006532:	4b72      	ldr	r3, [pc, #456]	@ (80066fc <HAL_RCC_ClockConfig+0x264>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800653a:	4a70      	ldr	r2, [pc, #448]	@ (80066fc <HAL_RCC_ClockConfig+0x264>)
 800653c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006540:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006542:	2380      	movs	r3, #128	@ 0x80
 8006544:	617b      	str	r3, [r7, #20]
 8006546:	e024      	b.n	8006592 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	2b02      	cmp	r3, #2
 800654e:	d107      	bne.n	8006560 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006550:	4b6a      	ldr	r3, [pc, #424]	@ (80066fc <HAL_RCC_ClockConfig+0x264>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d109      	bne.n	8006570 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e0c6      	b.n	80066ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006560:	4b66      	ldr	r3, [pc, #408]	@ (80066fc <HAL_RCC_ClockConfig+0x264>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e0be      	b.n	80066ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006570:	f000 f8ce 	bl	8006710 <HAL_RCC_GetSysClockFreq>
 8006574:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	4a61      	ldr	r2, [pc, #388]	@ (8006700 <HAL_RCC_ClockConfig+0x268>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d909      	bls.n	8006592 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800657e:	4b5f      	ldr	r3, [pc, #380]	@ (80066fc <HAL_RCC_ClockConfig+0x264>)
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006586:	4a5d      	ldr	r2, [pc, #372]	@ (80066fc <HAL_RCC_ClockConfig+0x264>)
 8006588:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800658c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800658e:	2380      	movs	r3, #128	@ 0x80
 8006590:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006592:	4b5a      	ldr	r3, [pc, #360]	@ (80066fc <HAL_RCC_ClockConfig+0x264>)
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f023 0203 	bic.w	r2, r3, #3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	4957      	ldr	r1, [pc, #348]	@ (80066fc <HAL_RCC_ClockConfig+0x264>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065a4:	f7fc fa4a 	bl	8002a3c <HAL_GetTick>
 80065a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065aa:	e00a      	b.n	80065c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065ac:	f7fc fa46 	bl	8002a3c <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e095      	b.n	80066ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065c2:	4b4e      	ldr	r3, [pc, #312]	@ (80066fc <HAL_RCC_ClockConfig+0x264>)
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f003 020c 	and.w	r2, r3, #12
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d1eb      	bne.n	80065ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d023      	beq.n	8006628 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0304 	and.w	r3, r3, #4
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d005      	beq.n	80065f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065ec:	4b43      	ldr	r3, [pc, #268]	@ (80066fc <HAL_RCC_ClockConfig+0x264>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	4a42      	ldr	r2, [pc, #264]	@ (80066fc <HAL_RCC_ClockConfig+0x264>)
 80065f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80065f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0308 	and.w	r3, r3, #8
 8006600:	2b00      	cmp	r3, #0
 8006602:	d007      	beq.n	8006614 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006604:	4b3d      	ldr	r3, [pc, #244]	@ (80066fc <HAL_RCC_ClockConfig+0x264>)
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800660c:	4a3b      	ldr	r2, [pc, #236]	@ (80066fc <HAL_RCC_ClockConfig+0x264>)
 800660e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006612:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006614:	4b39      	ldr	r3, [pc, #228]	@ (80066fc <HAL_RCC_ClockConfig+0x264>)
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	4936      	ldr	r1, [pc, #216]	@ (80066fc <HAL_RCC_ClockConfig+0x264>)
 8006622:	4313      	orrs	r3, r2
 8006624:	608b      	str	r3, [r1, #8]
 8006626:	e008      	b.n	800663a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	2b80      	cmp	r3, #128	@ 0x80
 800662c:	d105      	bne.n	800663a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800662e:	4b33      	ldr	r3, [pc, #204]	@ (80066fc <HAL_RCC_ClockConfig+0x264>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	4a32      	ldr	r2, [pc, #200]	@ (80066fc <HAL_RCC_ClockConfig+0x264>)
 8006634:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006638:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800663a:	4b2f      	ldr	r3, [pc, #188]	@ (80066f8 <HAL_RCC_ClockConfig+0x260>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 030f 	and.w	r3, r3, #15
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	429a      	cmp	r2, r3
 8006646:	d21d      	bcs.n	8006684 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006648:	4b2b      	ldr	r3, [pc, #172]	@ (80066f8 <HAL_RCC_ClockConfig+0x260>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f023 020f 	bic.w	r2, r3, #15
 8006650:	4929      	ldr	r1, [pc, #164]	@ (80066f8 <HAL_RCC_ClockConfig+0x260>)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	4313      	orrs	r3, r2
 8006656:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006658:	f7fc f9f0 	bl	8002a3c <HAL_GetTick>
 800665c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800665e:	e00a      	b.n	8006676 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006660:	f7fc f9ec 	bl	8002a3c <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800666e:	4293      	cmp	r3, r2
 8006670:	d901      	bls.n	8006676 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e03b      	b.n	80066ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006676:	4b20      	ldr	r3, [pc, #128]	@ (80066f8 <HAL_RCC_ClockConfig+0x260>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 030f 	and.w	r3, r3, #15
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	429a      	cmp	r2, r3
 8006682:	d1ed      	bne.n	8006660 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0304 	and.w	r3, r3, #4
 800668c:	2b00      	cmp	r3, #0
 800668e:	d008      	beq.n	80066a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006690:	4b1a      	ldr	r3, [pc, #104]	@ (80066fc <HAL_RCC_ClockConfig+0x264>)
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	4917      	ldr	r1, [pc, #92]	@ (80066fc <HAL_RCC_ClockConfig+0x264>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0308 	and.w	r3, r3, #8
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d009      	beq.n	80066c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066ae:	4b13      	ldr	r3, [pc, #76]	@ (80066fc <HAL_RCC_ClockConfig+0x264>)
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	490f      	ldr	r1, [pc, #60]	@ (80066fc <HAL_RCC_ClockConfig+0x264>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80066c2:	f000 f825 	bl	8006710 <HAL_RCC_GetSysClockFreq>
 80066c6:	4602      	mov	r2, r0
 80066c8:	4b0c      	ldr	r3, [pc, #48]	@ (80066fc <HAL_RCC_ClockConfig+0x264>)
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	091b      	lsrs	r3, r3, #4
 80066ce:	f003 030f 	and.w	r3, r3, #15
 80066d2:	490c      	ldr	r1, [pc, #48]	@ (8006704 <HAL_RCC_ClockConfig+0x26c>)
 80066d4:	5ccb      	ldrb	r3, [r1, r3]
 80066d6:	f003 031f 	and.w	r3, r3, #31
 80066da:	fa22 f303 	lsr.w	r3, r2, r3
 80066de:	4a0a      	ldr	r2, [pc, #40]	@ (8006708 <HAL_RCC_ClockConfig+0x270>)
 80066e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80066e2:	4b0a      	ldr	r3, [pc, #40]	@ (800670c <HAL_RCC_ClockConfig+0x274>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fc f95c 	bl	80029a4 <HAL_InitTick>
 80066ec:	4603      	mov	r3, r0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3718      	adds	r7, #24
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	40022000 	.word	0x40022000
 80066fc:	40021000 	.word	0x40021000
 8006700:	04c4b400 	.word	0x04c4b400
 8006704:	08011264 	.word	0x08011264
 8006708:	20000000 	.word	0x20000000
 800670c:	20000004 	.word	0x20000004

08006710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006716:	4b2c      	ldr	r3, [pc, #176]	@ (80067c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f003 030c 	and.w	r3, r3, #12
 800671e:	2b04      	cmp	r3, #4
 8006720:	d102      	bne.n	8006728 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006722:	4b2a      	ldr	r3, [pc, #168]	@ (80067cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006724:	613b      	str	r3, [r7, #16]
 8006726:	e047      	b.n	80067b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006728:	4b27      	ldr	r3, [pc, #156]	@ (80067c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f003 030c 	and.w	r3, r3, #12
 8006730:	2b08      	cmp	r3, #8
 8006732:	d102      	bne.n	800673a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006734:	4b26      	ldr	r3, [pc, #152]	@ (80067d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006736:	613b      	str	r3, [r7, #16]
 8006738:	e03e      	b.n	80067b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800673a:	4b23      	ldr	r3, [pc, #140]	@ (80067c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f003 030c 	and.w	r3, r3, #12
 8006742:	2b0c      	cmp	r3, #12
 8006744:	d136      	bne.n	80067b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006746:	4b20      	ldr	r3, [pc, #128]	@ (80067c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	f003 0303 	and.w	r3, r3, #3
 800674e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006750:	4b1d      	ldr	r3, [pc, #116]	@ (80067c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	091b      	lsrs	r3, r3, #4
 8006756:	f003 030f 	and.w	r3, r3, #15
 800675a:	3301      	adds	r3, #1
 800675c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2b03      	cmp	r3, #3
 8006762:	d10c      	bne.n	800677e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006764:	4a1a      	ldr	r2, [pc, #104]	@ (80067d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	fbb2 f3f3 	udiv	r3, r2, r3
 800676c:	4a16      	ldr	r2, [pc, #88]	@ (80067c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800676e:	68d2      	ldr	r2, [r2, #12]
 8006770:	0a12      	lsrs	r2, r2, #8
 8006772:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006776:	fb02 f303 	mul.w	r3, r2, r3
 800677a:	617b      	str	r3, [r7, #20]
      break;
 800677c:	e00c      	b.n	8006798 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800677e:	4a13      	ldr	r2, [pc, #76]	@ (80067cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	fbb2 f3f3 	udiv	r3, r2, r3
 8006786:	4a10      	ldr	r2, [pc, #64]	@ (80067c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006788:	68d2      	ldr	r2, [r2, #12]
 800678a:	0a12      	lsrs	r2, r2, #8
 800678c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006790:	fb02 f303 	mul.w	r3, r2, r3
 8006794:	617b      	str	r3, [r7, #20]
      break;
 8006796:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006798:	4b0b      	ldr	r3, [pc, #44]	@ (80067c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	0e5b      	lsrs	r3, r3, #25
 800679e:	f003 0303 	and.w	r3, r3, #3
 80067a2:	3301      	adds	r3, #1
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b0:	613b      	str	r3, [r7, #16]
 80067b2:	e001      	b.n	80067b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80067b8:	693b      	ldr	r3, [r7, #16]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	371c      	adds	r7, #28
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	40021000 	.word	0x40021000
 80067cc:	00f42400 	.word	0x00f42400
 80067d0:	02dc6c00 	.word	0x02dc6c00

080067d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067d4:	b480      	push	{r7}
 80067d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067d8:	4b03      	ldr	r3, [pc, #12]	@ (80067e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80067da:	681b      	ldr	r3, [r3, #0]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	20000000 	.word	0x20000000

080067ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80067f0:	f7ff fff0 	bl	80067d4 <HAL_RCC_GetHCLKFreq>
 80067f4:	4602      	mov	r2, r0
 80067f6:	4b06      	ldr	r3, [pc, #24]	@ (8006810 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	0a1b      	lsrs	r3, r3, #8
 80067fc:	f003 0307 	and.w	r3, r3, #7
 8006800:	4904      	ldr	r1, [pc, #16]	@ (8006814 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006802:	5ccb      	ldrb	r3, [r1, r3]
 8006804:	f003 031f 	and.w	r3, r3, #31
 8006808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800680c:	4618      	mov	r0, r3
 800680e:	bd80      	pop	{r7, pc}
 8006810:	40021000 	.word	0x40021000
 8006814:	08011274 	.word	0x08011274

08006818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800681c:	f7ff ffda 	bl	80067d4 <HAL_RCC_GetHCLKFreq>
 8006820:	4602      	mov	r2, r0
 8006822:	4b06      	ldr	r3, [pc, #24]	@ (800683c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	0adb      	lsrs	r3, r3, #11
 8006828:	f003 0307 	and.w	r3, r3, #7
 800682c:	4904      	ldr	r1, [pc, #16]	@ (8006840 <HAL_RCC_GetPCLK2Freq+0x28>)
 800682e:	5ccb      	ldrb	r3, [r1, r3]
 8006830:	f003 031f 	and.w	r3, r3, #31
 8006834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006838:	4618      	mov	r0, r3
 800683a:	bd80      	pop	{r7, pc}
 800683c:	40021000 	.word	0x40021000
 8006840:	08011274 	.word	0x08011274

08006844 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800684a:	4b1e      	ldr	r3, [pc, #120]	@ (80068c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f003 0303 	and.w	r3, r3, #3
 8006852:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006854:	4b1b      	ldr	r3, [pc, #108]	@ (80068c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	091b      	lsrs	r3, r3, #4
 800685a:	f003 030f 	and.w	r3, r3, #15
 800685e:	3301      	adds	r3, #1
 8006860:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	2b03      	cmp	r3, #3
 8006866:	d10c      	bne.n	8006882 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006868:	4a17      	ldr	r2, [pc, #92]	@ (80068c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006870:	4a14      	ldr	r2, [pc, #80]	@ (80068c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006872:	68d2      	ldr	r2, [r2, #12]
 8006874:	0a12      	lsrs	r2, r2, #8
 8006876:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800687a:	fb02 f303 	mul.w	r3, r2, r3
 800687e:	617b      	str	r3, [r7, #20]
    break;
 8006880:	e00c      	b.n	800689c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006882:	4a12      	ldr	r2, [pc, #72]	@ (80068cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	fbb2 f3f3 	udiv	r3, r2, r3
 800688a:	4a0e      	ldr	r2, [pc, #56]	@ (80068c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800688c:	68d2      	ldr	r2, [r2, #12]
 800688e:	0a12      	lsrs	r2, r2, #8
 8006890:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006894:	fb02 f303 	mul.w	r3, r2, r3
 8006898:	617b      	str	r3, [r7, #20]
    break;
 800689a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800689c:	4b09      	ldr	r3, [pc, #36]	@ (80068c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	0e5b      	lsrs	r3, r3, #25
 80068a2:	f003 0303 	and.w	r3, r3, #3
 80068a6:	3301      	adds	r3, #1
 80068a8:	005b      	lsls	r3, r3, #1
 80068aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80068b6:	687b      	ldr	r3, [r7, #4]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	371c      	adds	r7, #28
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	40021000 	.word	0x40021000
 80068c8:	02dc6c00 	.word	0x02dc6c00
 80068cc:	00f42400 	.word	0x00f42400

080068d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80068d8:	2300      	movs	r3, #0
 80068da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80068dc:	2300      	movs	r3, #0
 80068de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f000 8098 	beq.w	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068ee:	2300      	movs	r3, #0
 80068f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068f2:	4b43      	ldr	r3, [pc, #268]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10d      	bne.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068fe:	4b40      	ldr	r3, [pc, #256]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006902:	4a3f      	ldr	r2, [pc, #252]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006908:	6593      	str	r3, [r2, #88]	@ 0x58
 800690a:	4b3d      	ldr	r3, [pc, #244]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800690c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800690e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006912:	60bb      	str	r3, [r7, #8]
 8006914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006916:	2301      	movs	r3, #1
 8006918:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800691a:	4b3a      	ldr	r3, [pc, #232]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a39      	ldr	r2, [pc, #228]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006920:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006924:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006926:	f7fc f889 	bl	8002a3c <HAL_GetTick>
 800692a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800692c:	e009      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800692e:	f7fc f885 	bl	8002a3c <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	2b02      	cmp	r3, #2
 800693a:	d902      	bls.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	74fb      	strb	r3, [r7, #19]
        break;
 8006940:	e005      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006942:	4b30      	ldr	r3, [pc, #192]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800694a:	2b00      	cmp	r3, #0
 800694c:	d0ef      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800694e:	7cfb      	ldrb	r3, [r7, #19]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d159      	bne.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006954:	4b2a      	ldr	r3, [pc, #168]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800695a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800695e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d01e      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	429a      	cmp	r2, r3
 800696e:	d019      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006970:	4b23      	ldr	r3, [pc, #140]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006976:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800697a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800697c:	4b20      	ldr	r3, [pc, #128]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800697e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006982:	4a1f      	ldr	r2, [pc, #124]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006988:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800698c:	4b1c      	ldr	r3, [pc, #112]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800698e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006992:	4a1b      	ldr	r2, [pc, #108]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006994:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006998:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800699c:	4a18      	ldr	r2, [pc, #96]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d016      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ae:	f7fc f845 	bl	8002a3c <HAL_GetTick>
 80069b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069b4:	e00b      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069b6:	f7fc f841 	bl	8002a3c <HAL_GetTick>
 80069ba:	4602      	mov	r2, r0
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d902      	bls.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	74fb      	strb	r3, [r7, #19]
            break;
 80069cc:	e006      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069d4:	f003 0302 	and.w	r3, r3, #2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d0ec      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80069dc:	7cfb      	ldrb	r3, [r7, #19]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10b      	bne.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069e2:	4b07      	ldr	r3, [pc, #28]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069f0:	4903      	ldr	r1, [pc, #12]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80069f8:	e008      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069fa:	7cfb      	ldrb	r3, [r7, #19]
 80069fc:	74bb      	strb	r3, [r7, #18]
 80069fe:	e005      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006a00:	40021000 	.word	0x40021000
 8006a04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a08:	7cfb      	ldrb	r3, [r7, #19]
 8006a0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a0c:	7c7b      	ldrb	r3, [r7, #17]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d105      	bne.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a12:	4ba7      	ldr	r3, [pc, #668]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a16:	4aa6      	ldr	r2, [pc, #664]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a1c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00a      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a2a:	4ba1      	ldr	r3, [pc, #644]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a30:	f023 0203 	bic.w	r2, r3, #3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	499d      	ldr	r1, [pc, #628]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0302 	and.w	r3, r3, #2
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00a      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a4c:	4b98      	ldr	r3, [pc, #608]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a52:	f023 020c 	bic.w	r2, r3, #12
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	4995      	ldr	r1, [pc, #596]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0304 	and.w	r3, r3, #4
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00a      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a6e:	4b90      	ldr	r3, [pc, #576]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a74:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	498c      	ldr	r1, [pc, #560]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0308 	and.w	r3, r3, #8
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00a      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a90:	4b87      	ldr	r3, [pc, #540]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a96:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	4984      	ldr	r1, [pc, #528]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0310 	and.w	r3, r3, #16
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00a      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006ab2:	4b7f      	ldr	r3, [pc, #508]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ab8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	497b      	ldr	r1, [pc, #492]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0320 	and.w	r3, r3, #32
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00a      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ad4:	4b76      	ldr	r3, [pc, #472]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ada:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	4973      	ldr	r1, [pc, #460]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00a      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006af6:	4b6e      	ldr	r3, [pc, #440]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006afc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	496a      	ldr	r1, [pc, #424]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00a      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b18:	4b65      	ldr	r3, [pc, #404]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b1e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	4962      	ldr	r1, [pc, #392]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00a      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b3a:	4b5d      	ldr	r3, [pc, #372]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b40:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b48:	4959      	ldr	r1, [pc, #356]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00a      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b5c:	4b54      	ldr	r3, [pc, #336]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b62:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b6a:	4951      	ldr	r1, [pc, #324]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d015      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b7e:	4b4c      	ldr	r3, [pc, #304]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b84:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b8c:	4948      	ldr	r1, [pc, #288]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b9c:	d105      	bne.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b9e:	4b44      	ldr	r3, [pc, #272]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	4a43      	ldr	r2, [pc, #268]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ba4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ba8:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d015      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bbc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc4:	493a      	ldr	r1, [pc, #232]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bd4:	d105      	bne.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bd6:	4b36      	ldr	r3, [pc, #216]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	4a35      	ldr	r2, [pc, #212]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bdc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006be0:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d015      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006bee:	4b30      	ldr	r3, [pc, #192]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bf4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bfc:	492c      	ldr	r1, [pc, #176]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c0c:	d105      	bne.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c0e:	4b28      	ldr	r3, [pc, #160]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	4a27      	ldr	r2, [pc, #156]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c14:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c18:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d015      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c26:	4b22      	ldr	r3, [pc, #136]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c2c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c34:	491e      	ldr	r1, [pc, #120]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c36:	4313      	orrs	r3, r2
 8006c38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c44:	d105      	bne.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c46:	4b1a      	ldr	r3, [pc, #104]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	4a19      	ldr	r2, [pc, #100]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c50:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d015      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c5e:	4b14      	ldr	r3, [pc, #80]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c64:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c6c:	4910      	ldr	r1, [pc, #64]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c7c:	d105      	bne.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	4a0b      	ldr	r2, [pc, #44]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c88:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d018      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006c96:	4b06      	ldr	r3, [pc, #24]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c9c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca4:	4902      	ldr	r1, [pc, #8]	@ (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	e001      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006cb0:	40021000 	.word	0x40021000
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cba:	d105      	bne.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006cbc:	4b21      	ldr	r3, [pc, #132]	@ (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	4a20      	ldr	r2, [pc, #128]	@ (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006cc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cc6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d015      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cda:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ce2:	4918      	ldr	r1, [pc, #96]	@ (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cf2:	d105      	bne.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006cf4:	4b13      	ldr	r3, [pc, #76]	@ (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	4a12      	ldr	r2, [pc, #72]	@ (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006cfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cfe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d015      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006d0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d1a:	490a      	ldr	r1, [pc, #40]	@ (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d2a:	d105      	bne.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d2c:	4b05      	ldr	r3, [pc, #20]	@ (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	4a04      	ldr	r2, [pc, #16]	@ (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006d32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d36:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006d38:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	40021000 	.word	0x40021000

08006d48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d101      	bne.n	8006d5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e09d      	b.n	8006e96 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d108      	bne.n	8006d74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d6a:	d009      	beq.n	8006d80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	61da      	str	r2, [r3, #28]
 8006d72:	e005      	b.n	8006d80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d106      	bne.n	8006da0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7fb f938 	bl	8002010 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006db6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006dc0:	d902      	bls.n	8006dc8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60fb      	str	r3, [r7, #12]
 8006dc6:	e002      	b.n	8006dce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006dc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006dcc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006dd6:	d007      	beq.n	8006de8 <HAL_SPI_Init+0xa0>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006de0:	d002      	beq.n	8006de8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006df8:	431a      	orrs	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	431a      	orrs	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e16:	431a      	orrs	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e20:	431a      	orrs	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e2a:	ea42 0103 	orr.w	r1, r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e32:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	0c1b      	lsrs	r3, r3, #16
 8006e44:	f003 0204 	and.w	r2, r3, #4
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4c:	f003 0310 	and.w	r3, r3, #16
 8006e50:	431a      	orrs	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e56:	f003 0308 	and.w	r3, r3, #8
 8006e5a:	431a      	orrs	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006e64:	ea42 0103 	orr.w	r1, r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	69da      	ldr	r2, [r3, #28]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b082      	sub	sp, #8
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e049      	b.n	8006f44 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d106      	bne.n	8006eca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f7fb f8e7 	bl	8002098 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2202      	movs	r2, #2
 8006ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	3304      	adds	r3, #4
 8006eda:	4619      	mov	r1, r3
 8006edc:	4610      	mov	r0, r2
 8006ede:	f000 fa55 	bl	800738c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d109      	bne.n	8006f70 <HAL_TIM_PWM_Start+0x24>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	bf14      	ite	ne
 8006f68:	2301      	movne	r3, #1
 8006f6a:	2300      	moveq	r3, #0
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	e03c      	b.n	8006fea <HAL_TIM_PWM_Start+0x9e>
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	2b04      	cmp	r3, #4
 8006f74:	d109      	bne.n	8006f8a <HAL_TIM_PWM_Start+0x3e>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	bf14      	ite	ne
 8006f82:	2301      	movne	r3, #1
 8006f84:	2300      	moveq	r3, #0
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	e02f      	b.n	8006fea <HAL_TIM_PWM_Start+0x9e>
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2b08      	cmp	r3, #8
 8006f8e:	d109      	bne.n	8006fa4 <HAL_TIM_PWM_Start+0x58>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	bf14      	ite	ne
 8006f9c:	2301      	movne	r3, #1
 8006f9e:	2300      	moveq	r3, #0
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	e022      	b.n	8006fea <HAL_TIM_PWM_Start+0x9e>
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	2b0c      	cmp	r3, #12
 8006fa8:	d109      	bne.n	8006fbe <HAL_TIM_PWM_Start+0x72>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	bf14      	ite	ne
 8006fb6:	2301      	movne	r3, #1
 8006fb8:	2300      	moveq	r3, #0
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	e015      	b.n	8006fea <HAL_TIM_PWM_Start+0x9e>
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	2b10      	cmp	r3, #16
 8006fc2:	d109      	bne.n	8006fd8 <HAL_TIM_PWM_Start+0x8c>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	bf14      	ite	ne
 8006fd0:	2301      	movne	r3, #1
 8006fd2:	2300      	moveq	r3, #0
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	e008      	b.n	8006fea <HAL_TIM_PWM_Start+0x9e>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	bf14      	ite	ne
 8006fe4:	2301      	movne	r3, #1
 8006fe6:	2300      	moveq	r3, #0
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d001      	beq.n	8006ff2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e0a1      	b.n	8007136 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d104      	bne.n	8007002 <HAL_TIM_PWM_Start+0xb6>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007000:	e023      	b.n	800704a <HAL_TIM_PWM_Start+0xfe>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b04      	cmp	r3, #4
 8007006:	d104      	bne.n	8007012 <HAL_TIM_PWM_Start+0xc6>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2202      	movs	r2, #2
 800700c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007010:	e01b      	b.n	800704a <HAL_TIM_PWM_Start+0xfe>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b08      	cmp	r3, #8
 8007016:	d104      	bne.n	8007022 <HAL_TIM_PWM_Start+0xd6>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007020:	e013      	b.n	800704a <HAL_TIM_PWM_Start+0xfe>
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	2b0c      	cmp	r3, #12
 8007026:	d104      	bne.n	8007032 <HAL_TIM_PWM_Start+0xe6>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2202      	movs	r2, #2
 800702c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007030:	e00b      	b.n	800704a <HAL_TIM_PWM_Start+0xfe>
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b10      	cmp	r3, #16
 8007036:	d104      	bne.n	8007042 <HAL_TIM_PWM_Start+0xf6>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2202      	movs	r2, #2
 800703c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007040:	e003      	b.n	800704a <HAL_TIM_PWM_Start+0xfe>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2202      	movs	r2, #2
 8007046:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2201      	movs	r2, #1
 8007050:	6839      	ldr	r1, [r7, #0]
 8007052:	4618      	mov	r0, r3
 8007054:	f000 fd6e 	bl	8007b34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a38      	ldr	r2, [pc, #224]	@ (8007140 <HAL_TIM_PWM_Start+0x1f4>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d018      	beq.n	8007094 <HAL_TIM_PWM_Start+0x148>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a37      	ldr	r2, [pc, #220]	@ (8007144 <HAL_TIM_PWM_Start+0x1f8>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d013      	beq.n	8007094 <HAL_TIM_PWM_Start+0x148>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a35      	ldr	r2, [pc, #212]	@ (8007148 <HAL_TIM_PWM_Start+0x1fc>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d00e      	beq.n	8007094 <HAL_TIM_PWM_Start+0x148>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a34      	ldr	r2, [pc, #208]	@ (800714c <HAL_TIM_PWM_Start+0x200>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d009      	beq.n	8007094 <HAL_TIM_PWM_Start+0x148>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a32      	ldr	r2, [pc, #200]	@ (8007150 <HAL_TIM_PWM_Start+0x204>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d004      	beq.n	8007094 <HAL_TIM_PWM_Start+0x148>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a31      	ldr	r2, [pc, #196]	@ (8007154 <HAL_TIM_PWM_Start+0x208>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d101      	bne.n	8007098 <HAL_TIM_PWM_Start+0x14c>
 8007094:	2301      	movs	r3, #1
 8007096:	e000      	b.n	800709a <HAL_TIM_PWM_Start+0x14e>
 8007098:	2300      	movs	r3, #0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d007      	beq.n	80070ae <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80070ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a23      	ldr	r2, [pc, #140]	@ (8007140 <HAL_TIM_PWM_Start+0x1f4>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d01d      	beq.n	80070f4 <HAL_TIM_PWM_Start+0x1a8>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070c0:	d018      	beq.n	80070f4 <HAL_TIM_PWM_Start+0x1a8>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a24      	ldr	r2, [pc, #144]	@ (8007158 <HAL_TIM_PWM_Start+0x20c>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d013      	beq.n	80070f4 <HAL_TIM_PWM_Start+0x1a8>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a22      	ldr	r2, [pc, #136]	@ (800715c <HAL_TIM_PWM_Start+0x210>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d00e      	beq.n	80070f4 <HAL_TIM_PWM_Start+0x1a8>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a1a      	ldr	r2, [pc, #104]	@ (8007144 <HAL_TIM_PWM_Start+0x1f8>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d009      	beq.n	80070f4 <HAL_TIM_PWM_Start+0x1a8>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a18      	ldr	r2, [pc, #96]	@ (8007148 <HAL_TIM_PWM_Start+0x1fc>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d004      	beq.n	80070f4 <HAL_TIM_PWM_Start+0x1a8>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a19      	ldr	r2, [pc, #100]	@ (8007154 <HAL_TIM_PWM_Start+0x208>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d115      	bne.n	8007120 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689a      	ldr	r2, [r3, #8]
 80070fa:	4b19      	ldr	r3, [pc, #100]	@ (8007160 <HAL_TIM_PWM_Start+0x214>)
 80070fc:	4013      	ands	r3, r2
 80070fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2b06      	cmp	r3, #6
 8007104:	d015      	beq.n	8007132 <HAL_TIM_PWM_Start+0x1e6>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800710c:	d011      	beq.n	8007132 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f042 0201 	orr.w	r2, r2, #1
 800711c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800711e:	e008      	b.n	8007132 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f042 0201 	orr.w	r2, r2, #1
 800712e:	601a      	str	r2, [r3, #0]
 8007130:	e000      	b.n	8007134 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007132:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	40012c00 	.word	0x40012c00
 8007144:	40013400 	.word	0x40013400
 8007148:	40014000 	.word	0x40014000
 800714c:	40014400 	.word	0x40014400
 8007150:	40014800 	.word	0x40014800
 8007154:	40015000 	.word	0x40015000
 8007158:	40000400 	.word	0x40000400
 800715c:	40000800 	.word	0x40000800
 8007160:	00010007 	.word	0x00010007

08007164 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007170:	2300      	movs	r3, #0
 8007172:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800717a:	2b01      	cmp	r3, #1
 800717c:	d101      	bne.n	8007182 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800717e:	2302      	movs	r3, #2
 8007180:	e0ff      	b.n	8007382 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b14      	cmp	r3, #20
 800718e:	f200 80f0 	bhi.w	8007372 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007192:	a201      	add	r2, pc, #4	@ (adr r2, 8007198 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007198:	080071ed 	.word	0x080071ed
 800719c:	08007373 	.word	0x08007373
 80071a0:	08007373 	.word	0x08007373
 80071a4:	08007373 	.word	0x08007373
 80071a8:	0800722d 	.word	0x0800722d
 80071ac:	08007373 	.word	0x08007373
 80071b0:	08007373 	.word	0x08007373
 80071b4:	08007373 	.word	0x08007373
 80071b8:	0800726f 	.word	0x0800726f
 80071bc:	08007373 	.word	0x08007373
 80071c0:	08007373 	.word	0x08007373
 80071c4:	08007373 	.word	0x08007373
 80071c8:	080072af 	.word	0x080072af
 80071cc:	08007373 	.word	0x08007373
 80071d0:	08007373 	.word	0x08007373
 80071d4:	08007373 	.word	0x08007373
 80071d8:	080072f1 	.word	0x080072f1
 80071dc:	08007373 	.word	0x08007373
 80071e0:	08007373 	.word	0x08007373
 80071e4:	08007373 	.word	0x08007373
 80071e8:	08007331 	.word	0x08007331
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68b9      	ldr	r1, [r7, #8]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f000 f974 	bl	80074e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699a      	ldr	r2, [r3, #24]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f042 0208 	orr.w	r2, r2, #8
 8007206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	699a      	ldr	r2, [r3, #24]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f022 0204 	bic.w	r2, r2, #4
 8007216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6999      	ldr	r1, [r3, #24]
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	691a      	ldr	r2, [r3, #16]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	619a      	str	r2, [r3, #24]
      break;
 800722a:	e0a5      	b.n	8007378 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68b9      	ldr	r1, [r7, #8]
 8007232:	4618      	mov	r0, r3
 8007234:	f000 f9ee 	bl	8007614 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	699a      	ldr	r2, [r3, #24]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	699a      	ldr	r2, [r3, #24]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6999      	ldr	r1, [r3, #24]
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	021a      	lsls	r2, r3, #8
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	430a      	orrs	r2, r1
 800726a:	619a      	str	r2, [r3, #24]
      break;
 800726c:	e084      	b.n	8007378 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68b9      	ldr	r1, [r7, #8]
 8007274:	4618      	mov	r0, r3
 8007276:	f000 fa61 	bl	800773c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	69da      	ldr	r2, [r3, #28]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f042 0208 	orr.w	r2, r2, #8
 8007288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	69da      	ldr	r2, [r3, #28]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 0204 	bic.w	r2, r2, #4
 8007298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	69d9      	ldr	r1, [r3, #28]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	691a      	ldr	r2, [r3, #16]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	430a      	orrs	r2, r1
 80072aa:	61da      	str	r2, [r3, #28]
      break;
 80072ac:	e064      	b.n	8007378 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68b9      	ldr	r1, [r7, #8]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 fad3 	bl	8007860 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	69da      	ldr	r2, [r3, #28]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	69da      	ldr	r2, [r3, #28]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	69d9      	ldr	r1, [r3, #28]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	021a      	lsls	r2, r3, #8
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	61da      	str	r2, [r3, #28]
      break;
 80072ee:	e043      	b.n	8007378 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68b9      	ldr	r1, [r7, #8]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 fb46 	bl	8007988 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f042 0208 	orr.w	r2, r2, #8
 800730a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f022 0204 	bic.w	r2, r2, #4
 800731a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	691a      	ldr	r2, [r3, #16]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	430a      	orrs	r2, r1
 800732c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800732e:	e023      	b.n	8007378 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68b9      	ldr	r1, [r7, #8]
 8007336:	4618      	mov	r0, r3
 8007338:	f000 fb90 	bl	8007a5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800734a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800735a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	021a      	lsls	r2, r3, #8
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	430a      	orrs	r2, r1
 800736e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007370:	e002      	b.n	8007378 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	75fb      	strb	r3, [r7, #23]
      break;
 8007376:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007380:	7dfb      	ldrb	r3, [r7, #23]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3718      	adds	r7, #24
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop

0800738c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a48      	ldr	r2, [pc, #288]	@ (80074c0 <TIM_Base_SetConfig+0x134>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d013      	beq.n	80073cc <TIM_Base_SetConfig+0x40>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073aa:	d00f      	beq.n	80073cc <TIM_Base_SetConfig+0x40>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a45      	ldr	r2, [pc, #276]	@ (80074c4 <TIM_Base_SetConfig+0x138>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d00b      	beq.n	80073cc <TIM_Base_SetConfig+0x40>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a44      	ldr	r2, [pc, #272]	@ (80074c8 <TIM_Base_SetConfig+0x13c>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d007      	beq.n	80073cc <TIM_Base_SetConfig+0x40>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a43      	ldr	r2, [pc, #268]	@ (80074cc <TIM_Base_SetConfig+0x140>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d003      	beq.n	80073cc <TIM_Base_SetConfig+0x40>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a42      	ldr	r2, [pc, #264]	@ (80074d0 <TIM_Base_SetConfig+0x144>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d108      	bne.n	80073de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	4313      	orrs	r3, r2
 80073dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a37      	ldr	r2, [pc, #220]	@ (80074c0 <TIM_Base_SetConfig+0x134>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d01f      	beq.n	8007426 <TIM_Base_SetConfig+0x9a>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073ec:	d01b      	beq.n	8007426 <TIM_Base_SetConfig+0x9a>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a34      	ldr	r2, [pc, #208]	@ (80074c4 <TIM_Base_SetConfig+0x138>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d017      	beq.n	8007426 <TIM_Base_SetConfig+0x9a>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a33      	ldr	r2, [pc, #204]	@ (80074c8 <TIM_Base_SetConfig+0x13c>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d013      	beq.n	8007426 <TIM_Base_SetConfig+0x9a>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a32      	ldr	r2, [pc, #200]	@ (80074cc <TIM_Base_SetConfig+0x140>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d00f      	beq.n	8007426 <TIM_Base_SetConfig+0x9a>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a32      	ldr	r2, [pc, #200]	@ (80074d4 <TIM_Base_SetConfig+0x148>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d00b      	beq.n	8007426 <TIM_Base_SetConfig+0x9a>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a31      	ldr	r2, [pc, #196]	@ (80074d8 <TIM_Base_SetConfig+0x14c>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d007      	beq.n	8007426 <TIM_Base_SetConfig+0x9a>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a30      	ldr	r2, [pc, #192]	@ (80074dc <TIM_Base_SetConfig+0x150>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d003      	beq.n	8007426 <TIM_Base_SetConfig+0x9a>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a2b      	ldr	r2, [pc, #172]	@ (80074d0 <TIM_Base_SetConfig+0x144>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d108      	bne.n	8007438 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800742c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	4313      	orrs	r3, r2
 8007436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	4313      	orrs	r3, r2
 8007444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	689a      	ldr	r2, [r3, #8]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a18      	ldr	r2, [pc, #96]	@ (80074c0 <TIM_Base_SetConfig+0x134>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d013      	beq.n	800748c <TIM_Base_SetConfig+0x100>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a19      	ldr	r2, [pc, #100]	@ (80074cc <TIM_Base_SetConfig+0x140>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d00f      	beq.n	800748c <TIM_Base_SetConfig+0x100>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a19      	ldr	r2, [pc, #100]	@ (80074d4 <TIM_Base_SetConfig+0x148>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d00b      	beq.n	800748c <TIM_Base_SetConfig+0x100>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a18      	ldr	r2, [pc, #96]	@ (80074d8 <TIM_Base_SetConfig+0x14c>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d007      	beq.n	800748c <TIM_Base_SetConfig+0x100>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a17      	ldr	r2, [pc, #92]	@ (80074dc <TIM_Base_SetConfig+0x150>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d003      	beq.n	800748c <TIM_Base_SetConfig+0x100>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a12      	ldr	r2, [pc, #72]	@ (80074d0 <TIM_Base_SetConfig+0x144>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d103      	bne.n	8007494 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	691a      	ldr	r2, [r3, #16]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d105      	bne.n	80074b2 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	f023 0201 	bic.w	r2, r3, #1
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	611a      	str	r2, [r3, #16]
  }
}
 80074b2:	bf00      	nop
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	40012c00 	.word	0x40012c00
 80074c4:	40000400 	.word	0x40000400
 80074c8:	40000800 	.word	0x40000800
 80074cc:	40013400 	.word	0x40013400
 80074d0:	40015000 	.word	0x40015000
 80074d4:	40014000 	.word	0x40014000
 80074d8:	40014400 	.word	0x40014400
 80074dc:	40014800 	.word	0x40014800

080074e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b087      	sub	sp, #28
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a1b      	ldr	r3, [r3, #32]
 80074ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a1b      	ldr	r3, [r3, #32]
 80074f4:	f023 0201 	bic.w	r2, r3, #1
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800750e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f023 0303 	bic.w	r3, r3, #3
 800751a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	4313      	orrs	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f023 0302 	bic.w	r3, r3, #2
 800752c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	4313      	orrs	r3, r2
 8007536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a30      	ldr	r2, [pc, #192]	@ (80075fc <TIM_OC1_SetConfig+0x11c>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d013      	beq.n	8007568 <TIM_OC1_SetConfig+0x88>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a2f      	ldr	r2, [pc, #188]	@ (8007600 <TIM_OC1_SetConfig+0x120>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d00f      	beq.n	8007568 <TIM_OC1_SetConfig+0x88>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a2e      	ldr	r2, [pc, #184]	@ (8007604 <TIM_OC1_SetConfig+0x124>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d00b      	beq.n	8007568 <TIM_OC1_SetConfig+0x88>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a2d      	ldr	r2, [pc, #180]	@ (8007608 <TIM_OC1_SetConfig+0x128>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d007      	beq.n	8007568 <TIM_OC1_SetConfig+0x88>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a2c      	ldr	r2, [pc, #176]	@ (800760c <TIM_OC1_SetConfig+0x12c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d003      	beq.n	8007568 <TIM_OC1_SetConfig+0x88>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a2b      	ldr	r2, [pc, #172]	@ (8007610 <TIM_OC1_SetConfig+0x130>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d10c      	bne.n	8007582 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f023 0308 	bic.w	r3, r3, #8
 800756e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	4313      	orrs	r3, r2
 8007578:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	f023 0304 	bic.w	r3, r3, #4
 8007580:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a1d      	ldr	r2, [pc, #116]	@ (80075fc <TIM_OC1_SetConfig+0x11c>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d013      	beq.n	80075b2 <TIM_OC1_SetConfig+0xd2>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a1c      	ldr	r2, [pc, #112]	@ (8007600 <TIM_OC1_SetConfig+0x120>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d00f      	beq.n	80075b2 <TIM_OC1_SetConfig+0xd2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a1b      	ldr	r2, [pc, #108]	@ (8007604 <TIM_OC1_SetConfig+0x124>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d00b      	beq.n	80075b2 <TIM_OC1_SetConfig+0xd2>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a1a      	ldr	r2, [pc, #104]	@ (8007608 <TIM_OC1_SetConfig+0x128>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d007      	beq.n	80075b2 <TIM_OC1_SetConfig+0xd2>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a19      	ldr	r2, [pc, #100]	@ (800760c <TIM_OC1_SetConfig+0x12c>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d003      	beq.n	80075b2 <TIM_OC1_SetConfig+0xd2>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a18      	ldr	r2, [pc, #96]	@ (8007610 <TIM_OC1_SetConfig+0x130>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d111      	bne.n	80075d6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80075c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	693a      	ldr	r2, [r7, #16]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	685a      	ldr	r2, [r3, #4]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	697a      	ldr	r2, [r7, #20]
 80075ee:	621a      	str	r2, [r3, #32]
}
 80075f0:	bf00      	nop
 80075f2:	371c      	adds	r7, #28
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr
 80075fc:	40012c00 	.word	0x40012c00
 8007600:	40013400 	.word	0x40013400
 8007604:	40014000 	.word	0x40014000
 8007608:	40014400 	.word	0x40014400
 800760c:	40014800 	.word	0x40014800
 8007610:	40015000 	.word	0x40015000

08007614 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007614:	b480      	push	{r7}
 8007616:	b087      	sub	sp, #28
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a1b      	ldr	r3, [r3, #32]
 8007628:	f023 0210 	bic.w	r2, r3, #16
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007642:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800764e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	021b      	lsls	r3, r3, #8
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	4313      	orrs	r3, r2
 800765a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	f023 0320 	bic.w	r3, r3, #32
 8007662:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	011b      	lsls	r3, r3, #4
 800766a:	697a      	ldr	r2, [r7, #20]
 800766c:	4313      	orrs	r3, r2
 800766e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a2c      	ldr	r2, [pc, #176]	@ (8007724 <TIM_OC2_SetConfig+0x110>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d007      	beq.n	8007688 <TIM_OC2_SetConfig+0x74>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a2b      	ldr	r2, [pc, #172]	@ (8007728 <TIM_OC2_SetConfig+0x114>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d003      	beq.n	8007688 <TIM_OC2_SetConfig+0x74>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a2a      	ldr	r2, [pc, #168]	@ (800772c <TIM_OC2_SetConfig+0x118>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d10d      	bne.n	80076a4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800768e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	011b      	lsls	r3, r3, #4
 8007696:	697a      	ldr	r2, [r7, #20]
 8007698:	4313      	orrs	r3, r2
 800769a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a1f      	ldr	r2, [pc, #124]	@ (8007724 <TIM_OC2_SetConfig+0x110>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d013      	beq.n	80076d4 <TIM_OC2_SetConfig+0xc0>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a1e      	ldr	r2, [pc, #120]	@ (8007728 <TIM_OC2_SetConfig+0x114>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d00f      	beq.n	80076d4 <TIM_OC2_SetConfig+0xc0>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a1e      	ldr	r2, [pc, #120]	@ (8007730 <TIM_OC2_SetConfig+0x11c>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d00b      	beq.n	80076d4 <TIM_OC2_SetConfig+0xc0>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a1d      	ldr	r2, [pc, #116]	@ (8007734 <TIM_OC2_SetConfig+0x120>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d007      	beq.n	80076d4 <TIM_OC2_SetConfig+0xc0>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a1c      	ldr	r2, [pc, #112]	@ (8007738 <TIM_OC2_SetConfig+0x124>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d003      	beq.n	80076d4 <TIM_OC2_SetConfig+0xc0>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a17      	ldr	r2, [pc, #92]	@ (800772c <TIM_OC2_SetConfig+0x118>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d113      	bne.n	80076fc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80076da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80076e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	695b      	ldr	r3, [r3, #20]
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	621a      	str	r2, [r3, #32]
}
 8007716:	bf00      	nop
 8007718:	371c      	adds	r7, #28
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	40012c00 	.word	0x40012c00
 8007728:	40013400 	.word	0x40013400
 800772c:	40015000 	.word	0x40015000
 8007730:	40014000 	.word	0x40014000
 8007734:	40014400 	.word	0x40014400
 8007738:	40014800 	.word	0x40014800

0800773c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800773c:	b480      	push	{r7}
 800773e:	b087      	sub	sp, #28
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a1b      	ldr	r3, [r3, #32]
 8007750:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800776a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800776e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f023 0303 	bic.w	r3, r3, #3
 8007776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	4313      	orrs	r3, r2
 8007780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	021b      	lsls	r3, r3, #8
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	4313      	orrs	r3, r2
 8007794:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a2b      	ldr	r2, [pc, #172]	@ (8007848 <TIM_OC3_SetConfig+0x10c>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d007      	beq.n	80077ae <TIM_OC3_SetConfig+0x72>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a2a      	ldr	r2, [pc, #168]	@ (800784c <TIM_OC3_SetConfig+0x110>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d003      	beq.n	80077ae <TIM_OC3_SetConfig+0x72>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a29      	ldr	r2, [pc, #164]	@ (8007850 <TIM_OC3_SetConfig+0x114>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d10d      	bne.n	80077ca <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80077b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	021b      	lsls	r3, r3, #8
 80077bc:	697a      	ldr	r2, [r7, #20]
 80077be:	4313      	orrs	r3, r2
 80077c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80077c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a1e      	ldr	r2, [pc, #120]	@ (8007848 <TIM_OC3_SetConfig+0x10c>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d013      	beq.n	80077fa <TIM_OC3_SetConfig+0xbe>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a1d      	ldr	r2, [pc, #116]	@ (800784c <TIM_OC3_SetConfig+0x110>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d00f      	beq.n	80077fa <TIM_OC3_SetConfig+0xbe>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a1d      	ldr	r2, [pc, #116]	@ (8007854 <TIM_OC3_SetConfig+0x118>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d00b      	beq.n	80077fa <TIM_OC3_SetConfig+0xbe>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a1c      	ldr	r2, [pc, #112]	@ (8007858 <TIM_OC3_SetConfig+0x11c>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d007      	beq.n	80077fa <TIM_OC3_SetConfig+0xbe>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a1b      	ldr	r2, [pc, #108]	@ (800785c <TIM_OC3_SetConfig+0x120>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d003      	beq.n	80077fa <TIM_OC3_SetConfig+0xbe>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a16      	ldr	r2, [pc, #88]	@ (8007850 <TIM_OC3_SetConfig+0x114>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d113      	bne.n	8007822 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007800:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007808:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	011b      	lsls	r3, r3, #4
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	4313      	orrs	r3, r2
 8007814:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	011b      	lsls	r3, r3, #4
 800781c:	693a      	ldr	r2, [r7, #16]
 800781e:	4313      	orrs	r3, r2
 8007820:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	693a      	ldr	r2, [r7, #16]
 8007826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	621a      	str	r2, [r3, #32]
}
 800783c:	bf00      	nop
 800783e:	371c      	adds	r7, #28
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr
 8007848:	40012c00 	.word	0x40012c00
 800784c:	40013400 	.word	0x40013400
 8007850:	40015000 	.word	0x40015000
 8007854:	40014000 	.word	0x40014000
 8007858:	40014400 	.word	0x40014400
 800785c:	40014800 	.word	0x40014800

08007860 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007860:	b480      	push	{r7}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a1b      	ldr	r3, [r3, #32]
 8007874:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800788e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800789a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	021b      	lsls	r3, r3, #8
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80078ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	031b      	lsls	r3, r3, #12
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a2c      	ldr	r2, [pc, #176]	@ (8007970 <TIM_OC4_SetConfig+0x110>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d007      	beq.n	80078d4 <TIM_OC4_SetConfig+0x74>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a2b      	ldr	r2, [pc, #172]	@ (8007974 <TIM_OC4_SetConfig+0x114>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d003      	beq.n	80078d4 <TIM_OC4_SetConfig+0x74>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a2a      	ldr	r2, [pc, #168]	@ (8007978 <TIM_OC4_SetConfig+0x118>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d10d      	bne.n	80078f0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80078da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	031b      	lsls	r3, r3, #12
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a1f      	ldr	r2, [pc, #124]	@ (8007970 <TIM_OC4_SetConfig+0x110>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d013      	beq.n	8007920 <TIM_OC4_SetConfig+0xc0>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a1e      	ldr	r2, [pc, #120]	@ (8007974 <TIM_OC4_SetConfig+0x114>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d00f      	beq.n	8007920 <TIM_OC4_SetConfig+0xc0>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a1e      	ldr	r2, [pc, #120]	@ (800797c <TIM_OC4_SetConfig+0x11c>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d00b      	beq.n	8007920 <TIM_OC4_SetConfig+0xc0>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a1d      	ldr	r2, [pc, #116]	@ (8007980 <TIM_OC4_SetConfig+0x120>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d007      	beq.n	8007920 <TIM_OC4_SetConfig+0xc0>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a1c      	ldr	r2, [pc, #112]	@ (8007984 <TIM_OC4_SetConfig+0x124>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d003      	beq.n	8007920 <TIM_OC4_SetConfig+0xc0>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a17      	ldr	r2, [pc, #92]	@ (8007978 <TIM_OC4_SetConfig+0x118>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d113      	bne.n	8007948 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007926:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800792e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	695b      	ldr	r3, [r3, #20]
 8007934:	019b      	lsls	r3, r3, #6
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	4313      	orrs	r3, r2
 800793a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	019b      	lsls	r3, r3, #6
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	4313      	orrs	r3, r2
 8007946:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	685a      	ldr	r2, [r3, #4]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	621a      	str	r2, [r3, #32]
}
 8007962:	bf00      	nop
 8007964:	371c      	adds	r7, #28
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	40012c00 	.word	0x40012c00
 8007974:	40013400 	.word	0x40013400
 8007978:	40015000 	.word	0x40015000
 800797c:	40014000 	.word	0x40014000
 8007980:	40014400 	.word	0x40014400
 8007984:	40014800 	.word	0x40014800

08007988 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007988:	b480      	push	{r7}
 800798a:	b087      	sub	sp, #28
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a1b      	ldr	r3, [r3, #32]
 8007996:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a1b      	ldr	r3, [r3, #32]
 800799c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80079cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	041b      	lsls	r3, r3, #16
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a19      	ldr	r2, [pc, #100]	@ (8007a44 <TIM_OC5_SetConfig+0xbc>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d013      	beq.n	8007a0a <TIM_OC5_SetConfig+0x82>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a18      	ldr	r2, [pc, #96]	@ (8007a48 <TIM_OC5_SetConfig+0xc0>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d00f      	beq.n	8007a0a <TIM_OC5_SetConfig+0x82>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a17      	ldr	r2, [pc, #92]	@ (8007a4c <TIM_OC5_SetConfig+0xc4>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d00b      	beq.n	8007a0a <TIM_OC5_SetConfig+0x82>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a16      	ldr	r2, [pc, #88]	@ (8007a50 <TIM_OC5_SetConfig+0xc8>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d007      	beq.n	8007a0a <TIM_OC5_SetConfig+0x82>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a15      	ldr	r2, [pc, #84]	@ (8007a54 <TIM_OC5_SetConfig+0xcc>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d003      	beq.n	8007a0a <TIM_OC5_SetConfig+0x82>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a14      	ldr	r2, [pc, #80]	@ (8007a58 <TIM_OC5_SetConfig+0xd0>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d109      	bne.n	8007a1e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	021b      	lsls	r3, r3, #8
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	685a      	ldr	r2, [r3, #4]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	621a      	str	r2, [r3, #32]
}
 8007a38:	bf00      	nop
 8007a3a:	371c      	adds	r7, #28
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr
 8007a44:	40012c00 	.word	0x40012c00
 8007a48:	40013400 	.word	0x40013400
 8007a4c:	40014000 	.word	0x40014000
 8007a50:	40014400 	.word	0x40014400
 8007a54:	40014800 	.word	0x40014800
 8007a58:	40015000 	.word	0x40015000

08007a5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b087      	sub	sp, #28
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a1b      	ldr	r3, [r3, #32]
 8007a70:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	021b      	lsls	r3, r3, #8
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007aa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	051b      	lsls	r3, r3, #20
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a1a      	ldr	r2, [pc, #104]	@ (8007b1c <TIM_OC6_SetConfig+0xc0>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d013      	beq.n	8007ae0 <TIM_OC6_SetConfig+0x84>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a19      	ldr	r2, [pc, #100]	@ (8007b20 <TIM_OC6_SetConfig+0xc4>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d00f      	beq.n	8007ae0 <TIM_OC6_SetConfig+0x84>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a18      	ldr	r2, [pc, #96]	@ (8007b24 <TIM_OC6_SetConfig+0xc8>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d00b      	beq.n	8007ae0 <TIM_OC6_SetConfig+0x84>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a17      	ldr	r2, [pc, #92]	@ (8007b28 <TIM_OC6_SetConfig+0xcc>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d007      	beq.n	8007ae0 <TIM_OC6_SetConfig+0x84>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a16      	ldr	r2, [pc, #88]	@ (8007b2c <TIM_OC6_SetConfig+0xd0>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d003      	beq.n	8007ae0 <TIM_OC6_SetConfig+0x84>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4a15      	ldr	r2, [pc, #84]	@ (8007b30 <TIM_OC6_SetConfig+0xd4>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d109      	bne.n	8007af4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	695b      	ldr	r3, [r3, #20]
 8007aec:	029b      	lsls	r3, r3, #10
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	685a      	ldr	r2, [r3, #4]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	621a      	str	r2, [r3, #32]
}
 8007b0e:	bf00      	nop
 8007b10:	371c      	adds	r7, #28
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	40012c00 	.word	0x40012c00
 8007b20:	40013400 	.word	0x40013400
 8007b24:	40014000 	.word	0x40014000
 8007b28:	40014400 	.word	0x40014400
 8007b2c:	40014800 	.word	0x40014800
 8007b30:	40015000 	.word	0x40015000

08007b34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b087      	sub	sp, #28
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	f003 031f 	and.w	r3, r3, #31
 8007b46:	2201      	movs	r2, #1
 8007b48:	fa02 f303 	lsl.w	r3, r2, r3
 8007b4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6a1a      	ldr	r2, [r3, #32]
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	43db      	mvns	r3, r3
 8007b56:	401a      	ands	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6a1a      	ldr	r2, [r3, #32]
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	f003 031f 	and.w	r3, r3, #31
 8007b66:	6879      	ldr	r1, [r7, #4]
 8007b68:	fa01 f303 	lsl.w	r3, r1, r3
 8007b6c:	431a      	orrs	r2, r3
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	621a      	str	r2, [r3, #32]
}
 8007b72:	bf00      	nop
 8007b74:	371c      	adds	r7, #28
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
	...

08007b80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d101      	bne.n	8007b98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b94:	2302      	movs	r3, #2
 8007b96:	e06f      	b.n	8007c78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a31      	ldr	r2, [pc, #196]	@ (8007c84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d009      	beq.n	8007bd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a30      	ldr	r2, [pc, #192]	@ (8007c88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d004      	beq.n	8007bd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a2e      	ldr	r2, [pc, #184]	@ (8007c8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d108      	bne.n	8007be8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007bdc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a1e      	ldr	r2, [pc, #120]	@ (8007c84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d01d      	beq.n	8007c4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c18:	d018      	beq.n	8007c4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8007c90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d013      	beq.n	8007c4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a1a      	ldr	r2, [pc, #104]	@ (8007c94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d00e      	beq.n	8007c4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a15      	ldr	r2, [pc, #84]	@ (8007c88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d009      	beq.n	8007c4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a16      	ldr	r2, [pc, #88]	@ (8007c98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d004      	beq.n	8007c4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a11      	ldr	r2, [pc, #68]	@ (8007c8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d10c      	bne.n	8007c66 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3714      	adds	r7, #20
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr
 8007c84:	40012c00 	.word	0x40012c00
 8007c88:	40013400 	.word	0x40013400
 8007c8c:	40015000 	.word	0x40015000
 8007c90:	40000400 	.word	0x40000400
 8007c94:	40000800 	.word	0x40000800
 8007c98:	40014000 	.word	0x40014000

08007c9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d101      	bne.n	8007cb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	e078      	b.n	8007daa <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	695b      	ldr	r3, [r3, #20]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	041b      	lsls	r3, r3, #16
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	69db      	ldr	r3, [r3, #28]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a1c      	ldr	r2, [pc, #112]	@ (8007db8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d009      	beq.n	8007d5e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a1b      	ldr	r2, [pc, #108]	@ (8007dbc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d004      	beq.n	8007d5e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a19      	ldr	r2, [pc, #100]	@ (8007dc0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d11c      	bne.n	8007d98 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d68:	051b      	lsls	r3, r3, #20
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	6a1b      	ldr	r3, [r3, #32]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d86:	4313      	orrs	r3, r2
 8007d88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d94:	4313      	orrs	r3, r2
 8007d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	40012c00 	.word	0x40012c00
 8007dbc:	40013400 	.word	0x40013400
 8007dc0:	40015000 	.word	0x40015000

08007dc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d101      	bne.n	8007dd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e042      	b.n	8007e5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d106      	bne.n	8007dee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7fa fa1d 	bl	8002228 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2224      	movs	r2, #36	@ 0x24
 8007df2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f022 0201 	bic.w	r2, r2, #1
 8007e04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d002      	beq.n	8007e14 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fbb2 	bl	8008578 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f8b3 	bl	8007f80 <UART_SetConfig>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d101      	bne.n	8007e24 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e01b      	b.n	8007e5c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	685a      	ldr	r2, [r3, #4]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007e32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	689a      	ldr	r2, [r3, #8]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007e42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f042 0201 	orr.w	r2, r2, #1
 8007e52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fc31 	bl	80086bc <UART_CheckIdleState>
 8007e5a:	4603      	mov	r3, r0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b08a      	sub	sp, #40	@ 0x28
 8007e68:	af02      	add	r7, sp, #8
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	603b      	str	r3, [r7, #0]
 8007e70:	4613      	mov	r3, r2
 8007e72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e7a:	2b20      	cmp	r3, #32
 8007e7c:	d17b      	bne.n	8007f76 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d002      	beq.n	8007e8a <HAL_UART_Transmit+0x26>
 8007e84:	88fb      	ldrh	r3, [r7, #6]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d101      	bne.n	8007e8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e074      	b.n	8007f78 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2221      	movs	r2, #33	@ 0x21
 8007e9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e9e:	f7fa fdcd 	bl	8002a3c <HAL_GetTick>
 8007ea2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	88fa      	ldrh	r2, [r7, #6]
 8007ea8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	88fa      	ldrh	r2, [r7, #6]
 8007eb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ebc:	d108      	bne.n	8007ed0 <HAL_UART_Transmit+0x6c>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d104      	bne.n	8007ed0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	61bb      	str	r3, [r7, #24]
 8007ece:	e003      	b.n	8007ed8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007ed8:	e030      	b.n	8007f3c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2180      	movs	r1, #128	@ 0x80
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f000 fc93 	bl	8008810 <UART_WaitOnFlagUntilTimeout>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d005      	beq.n	8007efc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2220      	movs	r2, #32
 8007ef4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e03d      	b.n	8007f78 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10b      	bne.n	8007f1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	881b      	ldrh	r3, [r3, #0]
 8007f06:	461a      	mov	r2, r3
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f10:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	3302      	adds	r3, #2
 8007f16:	61bb      	str	r3, [r7, #24]
 8007f18:	e007      	b.n	8007f2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	781a      	ldrb	r2, [r3, #0]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	3301      	adds	r3, #1
 8007f28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	3b01      	subs	r3, #1
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d1c8      	bne.n	8007eda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	2140      	movs	r1, #64	@ 0x40
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f000 fc5c 	bl	8008810 <UART_WaitOnFlagUntilTimeout>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d005      	beq.n	8007f6a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2220      	movs	r2, #32
 8007f62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e006      	b.n	8007f78 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2220      	movs	r2, #32
 8007f6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	e000      	b.n	8007f78 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007f76:	2302      	movs	r3, #2
  }
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3720      	adds	r7, #32
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f84:	b08c      	sub	sp, #48	@ 0x30
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	689a      	ldr	r2, [r3, #8]
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	431a      	orrs	r2, r3
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	431a      	orrs	r2, r3
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	69db      	ldr	r3, [r3, #28]
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	4baa      	ldr	r3, [pc, #680]	@ (8008258 <UART_SetConfig+0x2d8>)
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	697a      	ldr	r2, [r7, #20]
 8007fb4:	6812      	ldr	r2, [r2, #0]
 8007fb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fb8:	430b      	orrs	r3, r1
 8007fba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	68da      	ldr	r2, [r3, #12]
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a9f      	ldr	r2, [pc, #636]	@ (800825c <UART_SetConfig+0x2dc>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d004      	beq.n	8007fec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
 8007fe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007ff6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007ffa:	697a      	ldr	r2, [r7, #20]
 8007ffc:	6812      	ldr	r2, [r2, #0]
 8007ffe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008000:	430b      	orrs	r3, r1
 8008002:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800800a:	f023 010f 	bic.w	r1, r3, #15
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	430a      	orrs	r2, r1
 8008018:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a90      	ldr	r2, [pc, #576]	@ (8008260 <UART_SetConfig+0x2e0>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d125      	bne.n	8008070 <UART_SetConfig+0xf0>
 8008024:	4b8f      	ldr	r3, [pc, #572]	@ (8008264 <UART_SetConfig+0x2e4>)
 8008026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800802a:	f003 0303 	and.w	r3, r3, #3
 800802e:	2b03      	cmp	r3, #3
 8008030:	d81a      	bhi.n	8008068 <UART_SetConfig+0xe8>
 8008032:	a201      	add	r2, pc, #4	@ (adr r2, 8008038 <UART_SetConfig+0xb8>)
 8008034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008038:	08008049 	.word	0x08008049
 800803c:	08008059 	.word	0x08008059
 8008040:	08008051 	.word	0x08008051
 8008044:	08008061 	.word	0x08008061
 8008048:	2301      	movs	r3, #1
 800804a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800804e:	e116      	b.n	800827e <UART_SetConfig+0x2fe>
 8008050:	2302      	movs	r3, #2
 8008052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008056:	e112      	b.n	800827e <UART_SetConfig+0x2fe>
 8008058:	2304      	movs	r3, #4
 800805a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800805e:	e10e      	b.n	800827e <UART_SetConfig+0x2fe>
 8008060:	2308      	movs	r3, #8
 8008062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008066:	e10a      	b.n	800827e <UART_SetConfig+0x2fe>
 8008068:	2310      	movs	r3, #16
 800806a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800806e:	e106      	b.n	800827e <UART_SetConfig+0x2fe>
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a7c      	ldr	r2, [pc, #496]	@ (8008268 <UART_SetConfig+0x2e8>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d138      	bne.n	80080ec <UART_SetConfig+0x16c>
 800807a:	4b7a      	ldr	r3, [pc, #488]	@ (8008264 <UART_SetConfig+0x2e4>)
 800807c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008080:	f003 030c 	and.w	r3, r3, #12
 8008084:	2b0c      	cmp	r3, #12
 8008086:	d82d      	bhi.n	80080e4 <UART_SetConfig+0x164>
 8008088:	a201      	add	r2, pc, #4	@ (adr r2, 8008090 <UART_SetConfig+0x110>)
 800808a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800808e:	bf00      	nop
 8008090:	080080c5 	.word	0x080080c5
 8008094:	080080e5 	.word	0x080080e5
 8008098:	080080e5 	.word	0x080080e5
 800809c:	080080e5 	.word	0x080080e5
 80080a0:	080080d5 	.word	0x080080d5
 80080a4:	080080e5 	.word	0x080080e5
 80080a8:	080080e5 	.word	0x080080e5
 80080ac:	080080e5 	.word	0x080080e5
 80080b0:	080080cd 	.word	0x080080cd
 80080b4:	080080e5 	.word	0x080080e5
 80080b8:	080080e5 	.word	0x080080e5
 80080bc:	080080e5 	.word	0x080080e5
 80080c0:	080080dd 	.word	0x080080dd
 80080c4:	2300      	movs	r3, #0
 80080c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ca:	e0d8      	b.n	800827e <UART_SetConfig+0x2fe>
 80080cc:	2302      	movs	r3, #2
 80080ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080d2:	e0d4      	b.n	800827e <UART_SetConfig+0x2fe>
 80080d4:	2304      	movs	r3, #4
 80080d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080da:	e0d0      	b.n	800827e <UART_SetConfig+0x2fe>
 80080dc:	2308      	movs	r3, #8
 80080de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080e2:	e0cc      	b.n	800827e <UART_SetConfig+0x2fe>
 80080e4:	2310      	movs	r3, #16
 80080e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ea:	e0c8      	b.n	800827e <UART_SetConfig+0x2fe>
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a5e      	ldr	r2, [pc, #376]	@ (800826c <UART_SetConfig+0x2ec>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d125      	bne.n	8008142 <UART_SetConfig+0x1c2>
 80080f6:	4b5b      	ldr	r3, [pc, #364]	@ (8008264 <UART_SetConfig+0x2e4>)
 80080f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008100:	2b30      	cmp	r3, #48	@ 0x30
 8008102:	d016      	beq.n	8008132 <UART_SetConfig+0x1b2>
 8008104:	2b30      	cmp	r3, #48	@ 0x30
 8008106:	d818      	bhi.n	800813a <UART_SetConfig+0x1ba>
 8008108:	2b20      	cmp	r3, #32
 800810a:	d00a      	beq.n	8008122 <UART_SetConfig+0x1a2>
 800810c:	2b20      	cmp	r3, #32
 800810e:	d814      	bhi.n	800813a <UART_SetConfig+0x1ba>
 8008110:	2b00      	cmp	r3, #0
 8008112:	d002      	beq.n	800811a <UART_SetConfig+0x19a>
 8008114:	2b10      	cmp	r3, #16
 8008116:	d008      	beq.n	800812a <UART_SetConfig+0x1aa>
 8008118:	e00f      	b.n	800813a <UART_SetConfig+0x1ba>
 800811a:	2300      	movs	r3, #0
 800811c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008120:	e0ad      	b.n	800827e <UART_SetConfig+0x2fe>
 8008122:	2302      	movs	r3, #2
 8008124:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008128:	e0a9      	b.n	800827e <UART_SetConfig+0x2fe>
 800812a:	2304      	movs	r3, #4
 800812c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008130:	e0a5      	b.n	800827e <UART_SetConfig+0x2fe>
 8008132:	2308      	movs	r3, #8
 8008134:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008138:	e0a1      	b.n	800827e <UART_SetConfig+0x2fe>
 800813a:	2310      	movs	r3, #16
 800813c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008140:	e09d      	b.n	800827e <UART_SetConfig+0x2fe>
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a4a      	ldr	r2, [pc, #296]	@ (8008270 <UART_SetConfig+0x2f0>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d125      	bne.n	8008198 <UART_SetConfig+0x218>
 800814c:	4b45      	ldr	r3, [pc, #276]	@ (8008264 <UART_SetConfig+0x2e4>)
 800814e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008152:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008156:	2bc0      	cmp	r3, #192	@ 0xc0
 8008158:	d016      	beq.n	8008188 <UART_SetConfig+0x208>
 800815a:	2bc0      	cmp	r3, #192	@ 0xc0
 800815c:	d818      	bhi.n	8008190 <UART_SetConfig+0x210>
 800815e:	2b80      	cmp	r3, #128	@ 0x80
 8008160:	d00a      	beq.n	8008178 <UART_SetConfig+0x1f8>
 8008162:	2b80      	cmp	r3, #128	@ 0x80
 8008164:	d814      	bhi.n	8008190 <UART_SetConfig+0x210>
 8008166:	2b00      	cmp	r3, #0
 8008168:	d002      	beq.n	8008170 <UART_SetConfig+0x1f0>
 800816a:	2b40      	cmp	r3, #64	@ 0x40
 800816c:	d008      	beq.n	8008180 <UART_SetConfig+0x200>
 800816e:	e00f      	b.n	8008190 <UART_SetConfig+0x210>
 8008170:	2300      	movs	r3, #0
 8008172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008176:	e082      	b.n	800827e <UART_SetConfig+0x2fe>
 8008178:	2302      	movs	r3, #2
 800817a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800817e:	e07e      	b.n	800827e <UART_SetConfig+0x2fe>
 8008180:	2304      	movs	r3, #4
 8008182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008186:	e07a      	b.n	800827e <UART_SetConfig+0x2fe>
 8008188:	2308      	movs	r3, #8
 800818a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800818e:	e076      	b.n	800827e <UART_SetConfig+0x2fe>
 8008190:	2310      	movs	r3, #16
 8008192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008196:	e072      	b.n	800827e <UART_SetConfig+0x2fe>
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a35      	ldr	r2, [pc, #212]	@ (8008274 <UART_SetConfig+0x2f4>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d12a      	bne.n	80081f8 <UART_SetConfig+0x278>
 80081a2:	4b30      	ldr	r3, [pc, #192]	@ (8008264 <UART_SetConfig+0x2e4>)
 80081a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081b0:	d01a      	beq.n	80081e8 <UART_SetConfig+0x268>
 80081b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081b6:	d81b      	bhi.n	80081f0 <UART_SetConfig+0x270>
 80081b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081bc:	d00c      	beq.n	80081d8 <UART_SetConfig+0x258>
 80081be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081c2:	d815      	bhi.n	80081f0 <UART_SetConfig+0x270>
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d003      	beq.n	80081d0 <UART_SetConfig+0x250>
 80081c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081cc:	d008      	beq.n	80081e0 <UART_SetConfig+0x260>
 80081ce:	e00f      	b.n	80081f0 <UART_SetConfig+0x270>
 80081d0:	2300      	movs	r3, #0
 80081d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081d6:	e052      	b.n	800827e <UART_SetConfig+0x2fe>
 80081d8:	2302      	movs	r3, #2
 80081da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081de:	e04e      	b.n	800827e <UART_SetConfig+0x2fe>
 80081e0:	2304      	movs	r3, #4
 80081e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081e6:	e04a      	b.n	800827e <UART_SetConfig+0x2fe>
 80081e8:	2308      	movs	r3, #8
 80081ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081ee:	e046      	b.n	800827e <UART_SetConfig+0x2fe>
 80081f0:	2310      	movs	r3, #16
 80081f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081f6:	e042      	b.n	800827e <UART_SetConfig+0x2fe>
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a17      	ldr	r2, [pc, #92]	@ (800825c <UART_SetConfig+0x2dc>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d13a      	bne.n	8008278 <UART_SetConfig+0x2f8>
 8008202:	4b18      	ldr	r3, [pc, #96]	@ (8008264 <UART_SetConfig+0x2e4>)
 8008204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008208:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800820c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008210:	d01a      	beq.n	8008248 <UART_SetConfig+0x2c8>
 8008212:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008216:	d81b      	bhi.n	8008250 <UART_SetConfig+0x2d0>
 8008218:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800821c:	d00c      	beq.n	8008238 <UART_SetConfig+0x2b8>
 800821e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008222:	d815      	bhi.n	8008250 <UART_SetConfig+0x2d0>
 8008224:	2b00      	cmp	r3, #0
 8008226:	d003      	beq.n	8008230 <UART_SetConfig+0x2b0>
 8008228:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800822c:	d008      	beq.n	8008240 <UART_SetConfig+0x2c0>
 800822e:	e00f      	b.n	8008250 <UART_SetConfig+0x2d0>
 8008230:	2300      	movs	r3, #0
 8008232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008236:	e022      	b.n	800827e <UART_SetConfig+0x2fe>
 8008238:	2302      	movs	r3, #2
 800823a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800823e:	e01e      	b.n	800827e <UART_SetConfig+0x2fe>
 8008240:	2304      	movs	r3, #4
 8008242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008246:	e01a      	b.n	800827e <UART_SetConfig+0x2fe>
 8008248:	2308      	movs	r3, #8
 800824a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800824e:	e016      	b.n	800827e <UART_SetConfig+0x2fe>
 8008250:	2310      	movs	r3, #16
 8008252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008256:	e012      	b.n	800827e <UART_SetConfig+0x2fe>
 8008258:	cfff69f3 	.word	0xcfff69f3
 800825c:	40008000 	.word	0x40008000
 8008260:	40013800 	.word	0x40013800
 8008264:	40021000 	.word	0x40021000
 8008268:	40004400 	.word	0x40004400
 800826c:	40004800 	.word	0x40004800
 8008270:	40004c00 	.word	0x40004c00
 8008274:	40005000 	.word	0x40005000
 8008278:	2310      	movs	r3, #16
 800827a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4aae      	ldr	r2, [pc, #696]	@ (800853c <UART_SetConfig+0x5bc>)
 8008284:	4293      	cmp	r3, r2
 8008286:	f040 8097 	bne.w	80083b8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800828a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800828e:	2b08      	cmp	r3, #8
 8008290:	d823      	bhi.n	80082da <UART_SetConfig+0x35a>
 8008292:	a201      	add	r2, pc, #4	@ (adr r2, 8008298 <UART_SetConfig+0x318>)
 8008294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008298:	080082bd 	.word	0x080082bd
 800829c:	080082db 	.word	0x080082db
 80082a0:	080082c5 	.word	0x080082c5
 80082a4:	080082db 	.word	0x080082db
 80082a8:	080082cb 	.word	0x080082cb
 80082ac:	080082db 	.word	0x080082db
 80082b0:	080082db 	.word	0x080082db
 80082b4:	080082db 	.word	0x080082db
 80082b8:	080082d3 	.word	0x080082d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082bc:	f7fe fa96 	bl	80067ec <HAL_RCC_GetPCLK1Freq>
 80082c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082c2:	e010      	b.n	80082e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082c4:	4b9e      	ldr	r3, [pc, #632]	@ (8008540 <UART_SetConfig+0x5c0>)
 80082c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082c8:	e00d      	b.n	80082e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082ca:	f7fe fa21 	bl	8006710 <HAL_RCC_GetSysClockFreq>
 80082ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082d0:	e009      	b.n	80082e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082d8:	e005      	b.n	80082e6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80082da:	2300      	movs	r3, #0
 80082dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80082e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80082e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f000 8130 	beq.w	800854e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082f2:	4a94      	ldr	r2, [pc, #592]	@ (8008544 <UART_SetConfig+0x5c4>)
 80082f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082f8:	461a      	mov	r2, r3
 80082fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008300:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	685a      	ldr	r2, [r3, #4]
 8008306:	4613      	mov	r3, r2
 8008308:	005b      	lsls	r3, r3, #1
 800830a:	4413      	add	r3, r2
 800830c:	69ba      	ldr	r2, [r7, #24]
 800830e:	429a      	cmp	r2, r3
 8008310:	d305      	bcc.n	800831e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008318:	69ba      	ldr	r2, [r7, #24]
 800831a:	429a      	cmp	r2, r3
 800831c:	d903      	bls.n	8008326 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008324:	e113      	b.n	800854e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008328:	2200      	movs	r2, #0
 800832a:	60bb      	str	r3, [r7, #8]
 800832c:	60fa      	str	r2, [r7, #12]
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008332:	4a84      	ldr	r2, [pc, #528]	@ (8008544 <UART_SetConfig+0x5c4>)
 8008334:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008338:	b29b      	uxth	r3, r3
 800833a:	2200      	movs	r2, #0
 800833c:	603b      	str	r3, [r7, #0]
 800833e:	607a      	str	r2, [r7, #4]
 8008340:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008344:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008348:	f7f8 fcc6 	bl	8000cd8 <__aeabi_uldivmod>
 800834c:	4602      	mov	r2, r0
 800834e:	460b      	mov	r3, r1
 8008350:	4610      	mov	r0, r2
 8008352:	4619      	mov	r1, r3
 8008354:	f04f 0200 	mov.w	r2, #0
 8008358:	f04f 0300 	mov.w	r3, #0
 800835c:	020b      	lsls	r3, r1, #8
 800835e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008362:	0202      	lsls	r2, r0, #8
 8008364:	6979      	ldr	r1, [r7, #20]
 8008366:	6849      	ldr	r1, [r1, #4]
 8008368:	0849      	lsrs	r1, r1, #1
 800836a:	2000      	movs	r0, #0
 800836c:	460c      	mov	r4, r1
 800836e:	4605      	mov	r5, r0
 8008370:	eb12 0804 	adds.w	r8, r2, r4
 8008374:	eb43 0905 	adc.w	r9, r3, r5
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	469a      	mov	sl, r3
 8008380:	4693      	mov	fp, r2
 8008382:	4652      	mov	r2, sl
 8008384:	465b      	mov	r3, fp
 8008386:	4640      	mov	r0, r8
 8008388:	4649      	mov	r1, r9
 800838a:	f7f8 fca5 	bl	8000cd8 <__aeabi_uldivmod>
 800838e:	4602      	mov	r2, r0
 8008390:	460b      	mov	r3, r1
 8008392:	4613      	mov	r3, r2
 8008394:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008396:	6a3b      	ldr	r3, [r7, #32]
 8008398:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800839c:	d308      	bcc.n	80083b0 <UART_SetConfig+0x430>
 800839e:	6a3b      	ldr	r3, [r7, #32]
 80083a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083a4:	d204      	bcs.n	80083b0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	6a3a      	ldr	r2, [r7, #32]
 80083ac:	60da      	str	r2, [r3, #12]
 80083ae:	e0ce      	b.n	800854e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80083b6:	e0ca      	b.n	800854e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	69db      	ldr	r3, [r3, #28]
 80083bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083c0:	d166      	bne.n	8008490 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80083c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80083c6:	2b08      	cmp	r3, #8
 80083c8:	d827      	bhi.n	800841a <UART_SetConfig+0x49a>
 80083ca:	a201      	add	r2, pc, #4	@ (adr r2, 80083d0 <UART_SetConfig+0x450>)
 80083cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d0:	080083f5 	.word	0x080083f5
 80083d4:	080083fd 	.word	0x080083fd
 80083d8:	08008405 	.word	0x08008405
 80083dc:	0800841b 	.word	0x0800841b
 80083e0:	0800840b 	.word	0x0800840b
 80083e4:	0800841b 	.word	0x0800841b
 80083e8:	0800841b 	.word	0x0800841b
 80083ec:	0800841b 	.word	0x0800841b
 80083f0:	08008413 	.word	0x08008413
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083f4:	f7fe f9fa 	bl	80067ec <HAL_RCC_GetPCLK1Freq>
 80083f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083fa:	e014      	b.n	8008426 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083fc:	f7fe fa0c 	bl	8006818 <HAL_RCC_GetPCLK2Freq>
 8008400:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008402:	e010      	b.n	8008426 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008404:	4b4e      	ldr	r3, [pc, #312]	@ (8008540 <UART_SetConfig+0x5c0>)
 8008406:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008408:	e00d      	b.n	8008426 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800840a:	f7fe f981 	bl	8006710 <HAL_RCC_GetSysClockFreq>
 800840e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008410:	e009      	b.n	8008426 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008412:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008416:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008418:	e005      	b.n	8008426 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800841a:	2300      	movs	r3, #0
 800841c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008424:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008428:	2b00      	cmp	r3, #0
 800842a:	f000 8090 	beq.w	800854e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008432:	4a44      	ldr	r2, [pc, #272]	@ (8008544 <UART_SetConfig+0x5c4>)
 8008434:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008438:	461a      	mov	r2, r3
 800843a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008440:	005a      	lsls	r2, r3, #1
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	085b      	lsrs	r3, r3, #1
 8008448:	441a      	add	r2, r3
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008452:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008454:	6a3b      	ldr	r3, [r7, #32]
 8008456:	2b0f      	cmp	r3, #15
 8008458:	d916      	bls.n	8008488 <UART_SetConfig+0x508>
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008460:	d212      	bcs.n	8008488 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008462:	6a3b      	ldr	r3, [r7, #32]
 8008464:	b29b      	uxth	r3, r3
 8008466:	f023 030f 	bic.w	r3, r3, #15
 800846a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800846c:	6a3b      	ldr	r3, [r7, #32]
 800846e:	085b      	lsrs	r3, r3, #1
 8008470:	b29b      	uxth	r3, r3
 8008472:	f003 0307 	and.w	r3, r3, #7
 8008476:	b29a      	uxth	r2, r3
 8008478:	8bfb      	ldrh	r3, [r7, #30]
 800847a:	4313      	orrs	r3, r2
 800847c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	8bfa      	ldrh	r2, [r7, #30]
 8008484:	60da      	str	r2, [r3, #12]
 8008486:	e062      	b.n	800854e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800848e:	e05e      	b.n	800854e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008490:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008494:	2b08      	cmp	r3, #8
 8008496:	d828      	bhi.n	80084ea <UART_SetConfig+0x56a>
 8008498:	a201      	add	r2, pc, #4	@ (adr r2, 80084a0 <UART_SetConfig+0x520>)
 800849a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800849e:	bf00      	nop
 80084a0:	080084c5 	.word	0x080084c5
 80084a4:	080084cd 	.word	0x080084cd
 80084a8:	080084d5 	.word	0x080084d5
 80084ac:	080084eb 	.word	0x080084eb
 80084b0:	080084db 	.word	0x080084db
 80084b4:	080084eb 	.word	0x080084eb
 80084b8:	080084eb 	.word	0x080084eb
 80084bc:	080084eb 	.word	0x080084eb
 80084c0:	080084e3 	.word	0x080084e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084c4:	f7fe f992 	bl	80067ec <HAL_RCC_GetPCLK1Freq>
 80084c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80084ca:	e014      	b.n	80084f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084cc:	f7fe f9a4 	bl	8006818 <HAL_RCC_GetPCLK2Freq>
 80084d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80084d2:	e010      	b.n	80084f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084d4:	4b1a      	ldr	r3, [pc, #104]	@ (8008540 <UART_SetConfig+0x5c0>)
 80084d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80084d8:	e00d      	b.n	80084f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084da:	f7fe f919 	bl	8006710 <HAL_RCC_GetSysClockFreq>
 80084de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80084e0:	e009      	b.n	80084f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80084e8:	e005      	b.n	80084f6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80084ea:	2300      	movs	r3, #0
 80084ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80084f4:	bf00      	nop
    }

    if (pclk != 0U)
 80084f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d028      	beq.n	800854e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008500:	4a10      	ldr	r2, [pc, #64]	@ (8008544 <UART_SetConfig+0x5c4>)
 8008502:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008506:	461a      	mov	r2, r3
 8008508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850a:	fbb3 f2f2 	udiv	r2, r3, r2
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	085b      	lsrs	r3, r3, #1
 8008514:	441a      	add	r2, r3
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	fbb2 f3f3 	udiv	r3, r2, r3
 800851e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008520:	6a3b      	ldr	r3, [r7, #32]
 8008522:	2b0f      	cmp	r3, #15
 8008524:	d910      	bls.n	8008548 <UART_SetConfig+0x5c8>
 8008526:	6a3b      	ldr	r3, [r7, #32]
 8008528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800852c:	d20c      	bcs.n	8008548 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	b29a      	uxth	r2, r3
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	60da      	str	r2, [r3, #12]
 8008538:	e009      	b.n	800854e <UART_SetConfig+0x5ce>
 800853a:	bf00      	nop
 800853c:	40008000 	.word	0x40008000
 8008540:	00f42400 	.word	0x00f42400
 8008544:	0801127c 	.word	0x0801127c
      }
      else
      {
        ret = HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	2201      	movs	r2, #1
 8008552:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	2201      	movs	r2, #1
 800855a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	2200      	movs	r2, #0
 8008562:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	2200      	movs	r2, #0
 8008568:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800856a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800856e:	4618      	mov	r0, r3
 8008570:	3730      	adds	r7, #48	@ 0x30
 8008572:	46bd      	mov	sp, r7
 8008574:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008578 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008584:	f003 0308 	and.w	r3, r3, #8
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00a      	beq.n	80085a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	430a      	orrs	r2, r1
 80085a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a6:	f003 0301 	and.w	r3, r3, #1
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00a      	beq.n	80085c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	430a      	orrs	r2, r1
 80085c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c8:	f003 0302 	and.w	r3, r3, #2
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00a      	beq.n	80085e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	430a      	orrs	r2, r1
 80085e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ea:	f003 0304 	and.w	r3, r3, #4
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00a      	beq.n	8008608 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	430a      	orrs	r2, r1
 8008606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800860c:	f003 0310 	and.w	r3, r3, #16
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00a      	beq.n	800862a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	430a      	orrs	r2, r1
 8008628:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800862e:	f003 0320 	and.w	r3, r3, #32
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00a      	beq.n	800864c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	430a      	orrs	r2, r1
 800864a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008654:	2b00      	cmp	r3, #0
 8008656:	d01a      	beq.n	800868e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	430a      	orrs	r2, r1
 800866c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008672:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008676:	d10a      	bne.n	800868e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	430a      	orrs	r2, r1
 800868c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00a      	beq.n	80086b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	430a      	orrs	r2, r1
 80086ae:	605a      	str	r2, [r3, #4]
  }
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b098      	sub	sp, #96	@ 0x60
 80086c0:	af02      	add	r7, sp, #8
 80086c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086cc:	f7fa f9b6 	bl	8002a3c <HAL_GetTick>
 80086d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0308 	and.w	r3, r3, #8
 80086dc:	2b08      	cmp	r3, #8
 80086de:	d12f      	bne.n	8008740 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086e8:	2200      	movs	r2, #0
 80086ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f88e 	bl	8008810 <UART_WaitOnFlagUntilTimeout>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d022      	beq.n	8008740 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008702:	e853 3f00 	ldrex	r3, [r3]
 8008706:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800870a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800870e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	461a      	mov	r2, r3
 8008716:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008718:	647b      	str	r3, [r7, #68]	@ 0x44
 800871a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800871e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008720:	e841 2300 	strex	r3, r2, [r1]
 8008724:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1e6      	bne.n	80086fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2220      	movs	r2, #32
 8008730:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800873c:	2303      	movs	r3, #3
 800873e:	e063      	b.n	8008808 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f003 0304 	and.w	r3, r3, #4
 800874a:	2b04      	cmp	r3, #4
 800874c:	d149      	bne.n	80087e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800874e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008756:	2200      	movs	r2, #0
 8008758:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 f857 	bl	8008810 <UART_WaitOnFlagUntilTimeout>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d03c      	beq.n	80087e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008770:	e853 3f00 	ldrex	r3, [r3]
 8008774:	623b      	str	r3, [r7, #32]
   return(result);
 8008776:	6a3b      	ldr	r3, [r7, #32]
 8008778:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800877c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	461a      	mov	r2, r3
 8008784:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008786:	633b      	str	r3, [r7, #48]	@ 0x30
 8008788:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800878c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800878e:	e841 2300 	strex	r3, r2, [r1]
 8008792:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1e6      	bne.n	8008768 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	3308      	adds	r3, #8
 80087a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	e853 3f00 	ldrex	r3, [r3]
 80087a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f023 0301 	bic.w	r3, r3, #1
 80087b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	3308      	adds	r3, #8
 80087b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087ba:	61fa      	str	r2, [r7, #28]
 80087bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087be:	69b9      	ldr	r1, [r7, #24]
 80087c0:	69fa      	ldr	r2, [r7, #28]
 80087c2:	e841 2300 	strex	r3, r2, [r1]
 80087c6:	617b      	str	r3, [r7, #20]
   return(result);
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1e5      	bne.n	800879a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2220      	movs	r2, #32
 80087d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087de:	2303      	movs	r3, #3
 80087e0:	e012      	b.n	8008808 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2220      	movs	r2, #32
 80087e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2220      	movs	r2, #32
 80087ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3758      	adds	r7, #88	@ 0x58
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	603b      	str	r3, [r7, #0]
 800881c:	4613      	mov	r3, r2
 800881e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008820:	e04f      	b.n	80088c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008828:	d04b      	beq.n	80088c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800882a:	f7fa f907 	bl	8002a3c <HAL_GetTick>
 800882e:	4602      	mov	r2, r0
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	69ba      	ldr	r2, [r7, #24]
 8008836:	429a      	cmp	r2, r3
 8008838:	d302      	bcc.n	8008840 <UART_WaitOnFlagUntilTimeout+0x30>
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d101      	bne.n	8008844 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008840:	2303      	movs	r3, #3
 8008842:	e04e      	b.n	80088e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 0304 	and.w	r3, r3, #4
 800884e:	2b00      	cmp	r3, #0
 8008850:	d037      	beq.n	80088c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	2b80      	cmp	r3, #128	@ 0x80
 8008856:	d034      	beq.n	80088c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	2b40      	cmp	r3, #64	@ 0x40
 800885c:	d031      	beq.n	80088c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	69db      	ldr	r3, [r3, #28]
 8008864:	f003 0308 	and.w	r3, r3, #8
 8008868:	2b08      	cmp	r3, #8
 800886a:	d110      	bne.n	800888e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2208      	movs	r2, #8
 8008872:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f000 f838 	bl	80088ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2208      	movs	r2, #8
 800887e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	e029      	b.n	80088e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	69db      	ldr	r3, [r3, #28]
 8008894:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008898:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800889c:	d111      	bne.n	80088c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80088a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f000 f81e 	bl	80088ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2220      	movs	r2, #32
 80088b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80088be:	2303      	movs	r3, #3
 80088c0:	e00f      	b.n	80088e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	69da      	ldr	r2, [r3, #28]
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	4013      	ands	r3, r2
 80088cc:	68ba      	ldr	r2, [r7, #8]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	bf0c      	ite	eq
 80088d2:	2301      	moveq	r3, #1
 80088d4:	2300      	movne	r3, #0
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	461a      	mov	r2, r3
 80088da:	79fb      	ldrb	r3, [r7, #7]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d0a0      	beq.n	8008822 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088ea:	b480      	push	{r7}
 80088ec:	b095      	sub	sp, #84	@ 0x54
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088fa:	e853 3f00 	ldrex	r3, [r3]
 80088fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008902:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008906:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	461a      	mov	r2, r3
 800890e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008910:	643b      	str	r3, [r7, #64]	@ 0x40
 8008912:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008914:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008916:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008918:	e841 2300 	strex	r3, r2, [r1]
 800891c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800891e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1e6      	bne.n	80088f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	3308      	adds	r3, #8
 800892a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892c:	6a3b      	ldr	r3, [r7, #32]
 800892e:	e853 3f00 	ldrex	r3, [r3]
 8008932:	61fb      	str	r3, [r7, #28]
   return(result);
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800893a:	f023 0301 	bic.w	r3, r3, #1
 800893e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	3308      	adds	r3, #8
 8008946:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008948:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800894a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800894e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008950:	e841 2300 	strex	r3, r2, [r1]
 8008954:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1e3      	bne.n	8008924 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008960:	2b01      	cmp	r3, #1
 8008962:	d118      	bne.n	8008996 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	e853 3f00 	ldrex	r3, [r3]
 8008970:	60bb      	str	r3, [r7, #8]
   return(result);
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	f023 0310 	bic.w	r3, r3, #16
 8008978:	647b      	str	r3, [r7, #68]	@ 0x44
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	461a      	mov	r2, r3
 8008980:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008982:	61bb      	str	r3, [r7, #24]
 8008984:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008986:	6979      	ldr	r1, [r7, #20]
 8008988:	69ba      	ldr	r2, [r7, #24]
 800898a:	e841 2300 	strex	r3, r2, [r1]
 800898e:	613b      	str	r3, [r7, #16]
   return(result);
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1e6      	bne.n	8008964 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2220      	movs	r2, #32
 800899a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80089aa:	bf00      	nop
 80089ac:	3754      	adds	r7, #84	@ 0x54
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr

080089b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80089b6:	b480      	push	{r7}
 80089b8:	b085      	sub	sp, #20
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d101      	bne.n	80089cc <HAL_UARTEx_DisableFifoMode+0x16>
 80089c8:	2302      	movs	r3, #2
 80089ca:	e027      	b.n	8008a1c <HAL_UARTEx_DisableFifoMode+0x66>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2224      	movs	r2, #36	@ 0x24
 80089d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f022 0201 	bic.w	r2, r2, #1
 80089f2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80089fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2220      	movs	r2, #32
 8008a0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d101      	bne.n	8008a40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a3c:	2302      	movs	r3, #2
 8008a3e:	e02d      	b.n	8008a9c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2224      	movs	r2, #36	@ 0x24
 8008a4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f022 0201 	bic.w	r2, r2, #1
 8008a66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	683a      	ldr	r2, [r7, #0]
 8008a78:	430a      	orrs	r2, r1
 8008a7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f84f 	bl	8008b20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2220      	movs	r2, #32
 8008a8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d101      	bne.n	8008abc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ab8:	2302      	movs	r3, #2
 8008aba:	e02d      	b.n	8008b18 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2224      	movs	r2, #36	@ 0x24
 8008ac8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f022 0201 	bic.w	r2, r2, #1
 8008ae2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	683a      	ldr	r2, [r7, #0]
 8008af4:	430a      	orrs	r2, r1
 8008af6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 f811 	bl	8008b20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2220      	movs	r2, #32
 8008b0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d108      	bne.n	8008b42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b40:	e031      	b.n	8008ba6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b42:	2308      	movs	r3, #8
 8008b44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b46:	2308      	movs	r3, #8
 8008b48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	0e5b      	lsrs	r3, r3, #25
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	f003 0307 	and.w	r3, r3, #7
 8008b58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	0f5b      	lsrs	r3, r3, #29
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	f003 0307 	and.w	r3, r3, #7
 8008b68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b6a:	7bbb      	ldrb	r3, [r7, #14]
 8008b6c:	7b3a      	ldrb	r2, [r7, #12]
 8008b6e:	4911      	ldr	r1, [pc, #68]	@ (8008bb4 <UARTEx_SetNbDataToProcess+0x94>)
 8008b70:	5c8a      	ldrb	r2, [r1, r2]
 8008b72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b76:	7b3a      	ldrb	r2, [r7, #12]
 8008b78:	490f      	ldr	r1, [pc, #60]	@ (8008bb8 <UARTEx_SetNbDataToProcess+0x98>)
 8008b7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
 8008b8a:	7b7a      	ldrb	r2, [r7, #13]
 8008b8c:	4909      	ldr	r1, [pc, #36]	@ (8008bb4 <UARTEx_SetNbDataToProcess+0x94>)
 8008b8e:	5c8a      	ldrb	r2, [r1, r2]
 8008b90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008b94:	7b7a      	ldrb	r2, [r7, #13]
 8008b96:	4908      	ldr	r1, [pc, #32]	@ (8008bb8 <UARTEx_SetNbDataToProcess+0x98>)
 8008b98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008ba6:	bf00      	nop
 8008ba8:	3714      	adds	r7, #20
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	08011294 	.word	0x08011294
 8008bb8:	0801129c 	.word	0x0801129c

08008bbc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008bcc:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008bd0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	b29a      	uxth	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b085      	sub	sp, #20
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008bf2:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008bf6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008bfe:	b29a      	uxth	r2, r3
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	43db      	mvns	r3, r3
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	4013      	ands	r3, r2
 8008c0a:	b29a      	uxth	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3714      	adds	r7, #20
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	1d3b      	adds	r3, r7, #4
 8008c2a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2201      	movs	r2, #1
 8008c32:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3714      	adds	r7, #20
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b0a7      	sub	sp, #156	@ 0x9c
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c66:	2300      	movs	r3, #0
 8008c68:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	4413      	add	r3, r2
 8008c76:	881b      	ldrh	r3, [r3, #0]
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8008c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c82:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	78db      	ldrb	r3, [r3, #3]
 8008c8a:	2b03      	cmp	r3, #3
 8008c8c:	d81f      	bhi.n	8008cce <USB_ActivateEndpoint+0x72>
 8008c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c94 <USB_ActivateEndpoint+0x38>)
 8008c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c94:	08008ca5 	.word	0x08008ca5
 8008c98:	08008cc1 	.word	0x08008cc1
 8008c9c:	08008cd7 	.word	0x08008cd7
 8008ca0:	08008cb3 	.word	0x08008cb3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008ca4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008ca8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008cac:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8008cb0:	e012      	b.n	8008cd8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008cb2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008cb6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008cba:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8008cbe:	e00b      	b.n	8008cd8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008cc0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008cc4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008cc8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8008ccc:	e004      	b.n	8008cd8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8008cd4:	e000      	b.n	8008cd8 <USB_ActivateEndpoint+0x7c>
      break;
 8008cd6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	441a      	add	r2, r3
 8008ce2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008ce6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	4413      	add	r3, r2
 8008d04:	881b      	ldrh	r3, [r3, #0]
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	b21b      	sxth	r3, r3
 8008d0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d12:	b21a      	sxth	r2, r3
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	b21b      	sxth	r3, r3
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	b21b      	sxth	r3, r3
 8008d1e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	441a      	add	r2, r3
 8008d2c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008d30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	7b1b      	ldrb	r3, [r3, #12]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	f040 8180 	bne.w	800904e <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	785b      	ldrb	r3, [r3, #1]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f000 8084 	beq.w	8008e60 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	61bb      	str	r3, [r7, #24]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	461a      	mov	r2, r3
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	4413      	add	r3, r2
 8008d6a:	61bb      	str	r3, [r7, #24]
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	00da      	lsls	r2, r3, #3
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	4413      	add	r3, r2
 8008d76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d7a:	617b      	str	r3, [r7, #20]
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	88db      	ldrh	r3, [r3, #6]
 8008d80:	085b      	lsrs	r3, r3, #1
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	005b      	lsls	r3, r3, #1
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	881b      	ldrh	r3, [r3, #0]
 8008d98:	827b      	strh	r3, [r7, #18]
 8008d9a:	8a7b      	ldrh	r3, [r7, #18]
 8008d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d01b      	beq.n	8008ddc <USB_ActivateEndpoint+0x180>
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	4413      	add	r3, r2
 8008dae:	881b      	ldrh	r3, [r3, #0]
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dba:	823b      	strh	r3, [r7, #16]
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	441a      	add	r2, r3
 8008dc6:	8a3b      	ldrh	r3, [r7, #16]
 8008dc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dd4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	78db      	ldrb	r3, [r3, #3]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d020      	beq.n	8008e26 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	4413      	add	r3, r2
 8008dee:	881b      	ldrh	r3, [r3, #0]
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008df6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008dfa:	81bb      	strh	r3, [r7, #12]
 8008dfc:	89bb      	ldrh	r3, [r7, #12]
 8008dfe:	f083 0320 	eor.w	r3, r3, #32
 8008e02:	81bb      	strh	r3, [r7, #12]
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	441a      	add	r2, r3
 8008e0e:	89bb      	ldrh	r3, [r7, #12]
 8008e10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	8013      	strh	r3, [r2, #0]
 8008e24:	e3f9      	b.n	800961a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	4413      	add	r3, r2
 8008e30:	881b      	ldrh	r3, [r3, #0]
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e3c:	81fb      	strh	r3, [r7, #14]
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	441a      	add	r2, r3
 8008e48:	89fb      	ldrh	r3, [r7, #14]
 8008e4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	8013      	strh	r3, [r2, #0]
 8008e5e:	e3dc      	b.n	800961a <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e70:	4413      	add	r3, r2
 8008e72:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	00da      	lsls	r2, r3, #3
 8008e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e7c:	4413      	add	r3, r2
 8008e7e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	88db      	ldrh	r3, [r3, #6]
 8008e88:	085b      	lsrs	r3, r3, #1
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	005b      	lsls	r3, r3, #1
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e92:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea4:	4413      	add	r3, r2
 8008ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	00da      	lsls	r2, r3, #3
 8008eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008eb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eba:	881b      	ldrh	r3, [r3, #0]
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec6:	801a      	strh	r2, [r3, #0]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d10a      	bne.n	8008ee6 <USB_ActivateEndpoint+0x28a>
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed2:	881b      	ldrh	r3, [r3, #0]
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee2:	801a      	strh	r2, [r3, #0]
 8008ee4:	e041      	b.n	8008f6a <USB_ActivateEndpoint+0x30e>
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	2b3e      	cmp	r3, #62	@ 0x3e
 8008eec:	d81c      	bhi.n	8008f28 <USB_ActivateEndpoint+0x2cc>
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	085b      	lsrs	r3, r3, #1
 8008ef4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	f003 0301 	and.w	r3, r3, #1
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d004      	beq.n	8008f0e <USB_ActivateEndpoint+0x2b2>
 8008f04:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008f08:	3301      	adds	r3, #1
 8008f0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f10:	881b      	ldrh	r3, [r3, #0]
 8008f12:	b29a      	uxth	r2, r3
 8008f14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	029b      	lsls	r3, r3, #10
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f24:	801a      	strh	r2, [r3, #0]
 8008f26:	e020      	b.n	8008f6a <USB_ActivateEndpoint+0x30e>
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	095b      	lsrs	r3, r3, #5
 8008f2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	f003 031f 	and.w	r3, r3, #31
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d104      	bne.n	8008f48 <USB_ActivateEndpoint+0x2ec>
 8008f3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008f42:	3b01      	subs	r3, #1
 8008f44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f4a:	881b      	ldrh	r3, [r3, #0]
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	029b      	lsls	r3, r3, #10
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f68:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	4413      	add	r3, r2
 8008f74:	881b      	ldrh	r3, [r3, #0]
 8008f76:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008f78:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008f7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d01b      	beq.n	8008fba <USB_ActivateEndpoint+0x35e>
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	4413      	add	r3, r2
 8008f8c:	881b      	ldrh	r3, [r3, #0]
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f98:	843b      	strh	r3, [r7, #32]
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	441a      	add	r2, r3
 8008fa4:	8c3b      	ldrh	r3, [r7, #32]
 8008fa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008faa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008fb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d124      	bne.n	800900c <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	4413      	add	r3, r2
 8008fcc:	881b      	ldrh	r3, [r3, #0]
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008fd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fd8:	83bb      	strh	r3, [r7, #28]
 8008fda:	8bbb      	ldrh	r3, [r7, #28]
 8008fdc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008fe0:	83bb      	strh	r3, [r7, #28]
 8008fe2:	8bbb      	ldrh	r3, [r7, #28]
 8008fe4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008fe8:	83bb      	strh	r3, [r7, #28]
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	441a      	add	r2, r3
 8008ff4:	8bbb      	ldrh	r3, [r7, #28]
 8008ff6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ffa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ffe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009006:	b29b      	uxth	r3, r3
 8009008:	8013      	strh	r3, [r2, #0]
 800900a:	e306      	b.n	800961a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	4413      	add	r3, r2
 8009016:	881b      	ldrh	r3, [r3, #0]
 8009018:	b29b      	uxth	r3, r3
 800901a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800901e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009022:	83fb      	strh	r3, [r7, #30]
 8009024:	8bfb      	ldrh	r3, [r7, #30]
 8009026:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800902a:	83fb      	strh	r3, [r7, #30]
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	441a      	add	r2, r3
 8009036:	8bfb      	ldrh	r3, [r7, #30]
 8009038:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800903c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009040:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009048:	b29b      	uxth	r3, r3
 800904a:	8013      	strh	r3, [r2, #0]
 800904c:	e2e5      	b.n	800961a <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	78db      	ldrb	r3, [r3, #3]
 8009052:	2b02      	cmp	r3, #2
 8009054:	d11e      	bne.n	8009094 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	4413      	add	r3, r2
 8009060:	881b      	ldrh	r3, [r3, #0]
 8009062:	b29b      	uxth	r3, r3
 8009064:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009068:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800906c:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	441a      	add	r2, r3
 800907a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800907e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009082:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009086:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800908a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800908e:	b29b      	uxth	r3, r3
 8009090:	8013      	strh	r3, [r2, #0]
 8009092:	e01d      	b.n	80090d0 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	4413      	add	r3, r2
 800909e:	881b      	ldrh	r3, [r3, #0]
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80090a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090aa:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	441a      	add	r2, r3
 80090b8:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80090bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80090da:	b29b      	uxth	r3, r3
 80090dc:	461a      	mov	r2, r3
 80090de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80090e0:	4413      	add	r3, r2
 80090e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	00da      	lsls	r2, r3, #3
 80090ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80090ec:	4413      	add	r3, r2
 80090ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80090f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	891b      	ldrh	r3, [r3, #8]
 80090f8:	085b      	lsrs	r3, r3, #1
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	005b      	lsls	r3, r3, #1
 80090fe:	b29a      	uxth	r2, r3
 8009100:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009102:	801a      	strh	r2, [r3, #0]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	677b      	str	r3, [r7, #116]	@ 0x74
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800910e:	b29b      	uxth	r3, r3
 8009110:	461a      	mov	r2, r3
 8009112:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009114:	4413      	add	r3, r2
 8009116:	677b      	str	r3, [r7, #116]	@ 0x74
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	00da      	lsls	r2, r3, #3
 800911e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009120:	4413      	add	r3, r2
 8009122:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009126:	673b      	str	r3, [r7, #112]	@ 0x70
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	895b      	ldrh	r3, [r3, #10]
 800912c:	085b      	lsrs	r3, r3, #1
 800912e:	b29b      	uxth	r3, r3
 8009130:	005b      	lsls	r3, r3, #1
 8009132:	b29a      	uxth	r2, r3
 8009134:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009136:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	785b      	ldrb	r3, [r3, #1]
 800913c:	2b00      	cmp	r3, #0
 800913e:	f040 81af 	bne.w	80094a0 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	4413      	add	r3, r2
 800914c:	881b      	ldrh	r3, [r3, #0]
 800914e:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8009152:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8009156:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800915a:	2b00      	cmp	r3, #0
 800915c:	d01d      	beq.n	800919a <USB_ActivateEndpoint+0x53e>
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	4413      	add	r3, r2
 8009168:	881b      	ldrh	r3, [r3, #0]
 800916a:	b29b      	uxth	r3, r3
 800916c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009170:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009174:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	441a      	add	r2, r3
 8009182:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8009186:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800918a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800918e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009196:	b29b      	uxth	r3, r3
 8009198:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	4413      	add	r3, r2
 80091a4:	881b      	ldrh	r3, [r3, #0]
 80091a6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80091aa:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80091ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d01d      	beq.n	80091f2 <USB_ActivateEndpoint+0x596>
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	4413      	add	r3, r2
 80091c0:	881b      	ldrh	r3, [r3, #0]
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091cc:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	441a      	add	r2, r3
 80091da:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80091de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	785b      	ldrb	r3, [r3, #1]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d16b      	bne.n	80092d2 <USB_ActivateEndpoint+0x676>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009204:	b29b      	uxth	r3, r3
 8009206:	461a      	mov	r2, r3
 8009208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800920a:	4413      	add	r3, r2
 800920c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	00da      	lsls	r2, r3, #3
 8009214:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009216:	4413      	add	r3, r2
 8009218:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800921c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800921e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009220:	881b      	ldrh	r3, [r3, #0]
 8009222:	b29b      	uxth	r3, r3
 8009224:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009228:	b29a      	uxth	r2, r3
 800922a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800922c:	801a      	strh	r2, [r3, #0]
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d10a      	bne.n	800924c <USB_ActivateEndpoint+0x5f0>
 8009236:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009238:	881b      	ldrh	r3, [r3, #0]
 800923a:	b29b      	uxth	r3, r3
 800923c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009244:	b29a      	uxth	r2, r3
 8009246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009248:	801a      	strh	r2, [r3, #0]
 800924a:	e05d      	b.n	8009308 <USB_ActivateEndpoint+0x6ac>
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	2b3e      	cmp	r3, #62	@ 0x3e
 8009252:	d81c      	bhi.n	800928e <USB_ActivateEndpoint+0x632>
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	085b      	lsrs	r3, r3, #1
 800925a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	f003 0301 	and.w	r3, r3, #1
 8009266:	2b00      	cmp	r3, #0
 8009268:	d004      	beq.n	8009274 <USB_ActivateEndpoint+0x618>
 800926a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800926e:	3301      	adds	r3, #1
 8009270:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009276:	881b      	ldrh	r3, [r3, #0]
 8009278:	b29a      	uxth	r2, r3
 800927a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800927e:	b29b      	uxth	r3, r3
 8009280:	029b      	lsls	r3, r3, #10
 8009282:	b29b      	uxth	r3, r3
 8009284:	4313      	orrs	r3, r2
 8009286:	b29a      	uxth	r2, r3
 8009288:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800928a:	801a      	strh	r2, [r3, #0]
 800928c:	e03c      	b.n	8009308 <USB_ActivateEndpoint+0x6ac>
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	095b      	lsrs	r3, r3, #5
 8009294:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	f003 031f 	and.w	r3, r3, #31
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d104      	bne.n	80092ae <USB_ActivateEndpoint+0x652>
 80092a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80092a8:	3b01      	subs	r3, #1
 80092aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80092ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092b0:	881b      	ldrh	r3, [r3, #0]
 80092b2:	b29a      	uxth	r2, r3
 80092b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	029b      	lsls	r3, r3, #10
 80092bc:	b29b      	uxth	r3, r3
 80092be:	4313      	orrs	r3, r2
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092ce:	801a      	strh	r2, [r3, #0]
 80092d0:	e01a      	b.n	8009308 <USB_ActivateEndpoint+0x6ac>
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	785b      	ldrb	r3, [r3, #1]
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d116      	bne.n	8009308 <USB_ActivateEndpoint+0x6ac>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	461a      	mov	r2, r3
 80092e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092ea:	4413      	add	r3, r2
 80092ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	00da      	lsls	r2, r3, #3
 80092f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092f6:	4413      	add	r3, r2
 80092f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80092fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	b29a      	uxth	r2, r3
 8009304:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009306:	801a      	strh	r2, [r3, #0]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	647b      	str	r3, [r7, #68]	@ 0x44
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	785b      	ldrb	r3, [r3, #1]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d16b      	bne.n	80093ec <USB_ActivateEndpoint+0x790>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800931e:	b29b      	uxth	r3, r3
 8009320:	461a      	mov	r2, r3
 8009322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009324:	4413      	add	r3, r2
 8009326:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	00da      	lsls	r2, r3, #3
 800932e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009330:	4413      	add	r3, r2
 8009332:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009336:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800933a:	881b      	ldrh	r3, [r3, #0]
 800933c:	b29b      	uxth	r3, r3
 800933e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009342:	b29a      	uxth	r2, r3
 8009344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009346:	801a      	strh	r2, [r3, #0]
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	691b      	ldr	r3, [r3, #16]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d10a      	bne.n	8009366 <USB_ActivateEndpoint+0x70a>
 8009350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009352:	881b      	ldrh	r3, [r3, #0]
 8009354:	b29b      	uxth	r3, r3
 8009356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800935a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800935e:	b29a      	uxth	r2, r3
 8009360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009362:	801a      	strh	r2, [r3, #0]
 8009364:	e05b      	b.n	800941e <USB_ActivateEndpoint+0x7c2>
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	2b3e      	cmp	r3, #62	@ 0x3e
 800936c:	d81c      	bhi.n	80093a8 <USB_ActivateEndpoint+0x74c>
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	085b      	lsrs	r3, r3, #1
 8009374:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	f003 0301 	and.w	r3, r3, #1
 8009380:	2b00      	cmp	r3, #0
 8009382:	d004      	beq.n	800938e <USB_ActivateEndpoint+0x732>
 8009384:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009388:	3301      	adds	r3, #1
 800938a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800938e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009390:	881b      	ldrh	r3, [r3, #0]
 8009392:	b29a      	uxth	r2, r3
 8009394:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009398:	b29b      	uxth	r3, r3
 800939a:	029b      	lsls	r3, r3, #10
 800939c:	b29b      	uxth	r3, r3
 800939e:	4313      	orrs	r3, r2
 80093a0:	b29a      	uxth	r2, r3
 80093a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a4:	801a      	strh	r2, [r3, #0]
 80093a6:	e03a      	b.n	800941e <USB_ActivateEndpoint+0x7c2>
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	691b      	ldr	r3, [r3, #16]
 80093ac:	095b      	lsrs	r3, r3, #5
 80093ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	f003 031f 	and.w	r3, r3, #31
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d104      	bne.n	80093c8 <USB_ActivateEndpoint+0x76c>
 80093be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80093c2:	3b01      	subs	r3, #1
 80093c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80093c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ca:	881b      	ldrh	r3, [r3, #0]
 80093cc:	b29a      	uxth	r2, r3
 80093ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	029b      	lsls	r3, r3, #10
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	4313      	orrs	r3, r2
 80093da:	b29b      	uxth	r3, r3
 80093dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093e4:	b29a      	uxth	r2, r3
 80093e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e8:	801a      	strh	r2, [r3, #0]
 80093ea:	e018      	b.n	800941e <USB_ActivateEndpoint+0x7c2>
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	785b      	ldrb	r3, [r3, #1]
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d114      	bne.n	800941e <USB_ActivateEndpoint+0x7c2>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	461a      	mov	r2, r3
 80093fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009400:	4413      	add	r3, r2
 8009402:	647b      	str	r3, [r7, #68]	@ 0x44
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	00da      	lsls	r2, r3, #3
 800940a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800940c:	4413      	add	r3, r2
 800940e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009412:	643b      	str	r3, [r7, #64]	@ 0x40
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	b29a      	uxth	r2, r3
 800941a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800941c:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4413      	add	r3, r2
 8009428:	881b      	ldrh	r3, [r3, #0]
 800942a:	b29b      	uxth	r3, r3
 800942c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009430:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009434:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009436:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009438:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800943c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800943e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009440:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009444:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	441a      	add	r2, r3
 8009450:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009452:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009456:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800945a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800945e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009462:	b29b      	uxth	r3, r3
 8009464:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	4413      	add	r3, r2
 8009470:	881b      	ldrh	r3, [r3, #0]
 8009472:	b29b      	uxth	r3, r3
 8009474:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009478:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800947c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	441a      	add	r2, r3
 8009488:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800948a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800948e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800949a:	b29b      	uxth	r3, r3
 800949c:	8013      	strh	r3, [r2, #0]
 800949e:	e0bc      	b.n	800961a <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4413      	add	r3, r2
 80094aa:	881b      	ldrh	r3, [r3, #0]
 80094ac:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80094b0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80094b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d01d      	beq.n	80094f8 <USB_ActivateEndpoint+0x89c>
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	4413      	add	r3, r2
 80094c6:	881b      	ldrh	r3, [r3, #0]
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094d2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	441a      	add	r2, r3
 80094e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80094e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80094f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	4413      	add	r3, r2
 8009502:	881b      	ldrh	r3, [r3, #0]
 8009504:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8009508:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800950c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009510:	2b00      	cmp	r3, #0
 8009512:	d01d      	beq.n	8009550 <USB_ActivateEndpoint+0x8f4>
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	4413      	add	r3, r2
 800951e:	881b      	ldrh	r3, [r3, #0]
 8009520:	b29b      	uxth	r3, r3
 8009522:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800952a:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	441a      	add	r2, r3
 8009538:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800953c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009540:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009544:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009548:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800954c:	b29b      	uxth	r3, r3
 800954e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	78db      	ldrb	r3, [r3, #3]
 8009554:	2b01      	cmp	r3, #1
 8009556:	d024      	beq.n	80095a2 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4413      	add	r3, r2
 8009562:	881b      	ldrh	r3, [r3, #0]
 8009564:	b29b      	uxth	r3, r3
 8009566:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800956a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800956e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8009572:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009576:	f083 0320 	eor.w	r3, r3, #32
 800957a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	441a      	add	r2, r3
 8009588:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800958c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009590:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009594:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009598:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800959c:	b29b      	uxth	r3, r3
 800959e:	8013      	strh	r3, [r2, #0]
 80095a0:	e01d      	b.n	80095de <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	4413      	add	r3, r2
 80095ac:	881b      	ldrh	r3, [r3, #0]
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095b8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	441a      	add	r2, r3
 80095c6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80095ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095da:	b29b      	uxth	r3, r3
 80095dc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	4413      	add	r3, r2
 80095e8:	881b      	ldrh	r3, [r3, #0]
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80095f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095f4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	441a      	add	r2, r3
 8009602:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009606:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800960a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800960e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009616:	b29b      	uxth	r3, r3
 8009618:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800961a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800961e:	4618      	mov	r0, r3
 8009620:	379c      	adds	r7, #156	@ 0x9c
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop

0800962c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800962c:	b480      	push	{r7}
 800962e:	b08d      	sub	sp, #52	@ 0x34
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	7b1b      	ldrb	r3, [r3, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	f040 808e 	bne.w	800975c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	785b      	ldrb	r3, [r3, #1]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d044      	beq.n	80096d2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	4413      	add	r3, r2
 8009652:	881b      	ldrh	r3, [r3, #0]
 8009654:	81bb      	strh	r3, [r7, #12]
 8009656:	89bb      	ldrh	r3, [r7, #12]
 8009658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800965c:	2b00      	cmp	r3, #0
 800965e:	d01b      	beq.n	8009698 <USB_DeactivateEndpoint+0x6c>
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	4413      	add	r3, r2
 800966a:	881b      	ldrh	r3, [r3, #0]
 800966c:	b29b      	uxth	r3, r3
 800966e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009676:	817b      	strh	r3, [r7, #10]
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	441a      	add	r2, r3
 8009682:	897b      	ldrh	r3, [r7, #10]
 8009684:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009688:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800968c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009690:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009694:	b29b      	uxth	r3, r3
 8009696:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	4413      	add	r3, r2
 80096a2:	881b      	ldrh	r3, [r3, #0]
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096ae:	813b      	strh	r3, [r7, #8]
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	441a      	add	r2, r3
 80096ba:	893b      	ldrh	r3, [r7, #8]
 80096bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	8013      	strh	r3, [r2, #0]
 80096d0:	e192      	b.n	80099f8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4413      	add	r3, r2
 80096dc:	881b      	ldrh	r3, [r3, #0]
 80096de:	827b      	strh	r3, [r7, #18]
 80096e0:	8a7b      	ldrh	r3, [r7, #18]
 80096e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d01b      	beq.n	8009722 <USB_DeactivateEndpoint+0xf6>
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	4413      	add	r3, r2
 80096f4:	881b      	ldrh	r3, [r3, #0]
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009700:	823b      	strh	r3, [r7, #16]
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	441a      	add	r2, r3
 800970c:	8a3b      	ldrh	r3, [r7, #16]
 800970e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009712:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009716:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800971a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800971e:	b29b      	uxth	r3, r3
 8009720:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	4413      	add	r3, r2
 800972c:	881b      	ldrh	r3, [r3, #0]
 800972e:	b29b      	uxth	r3, r3
 8009730:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009734:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009738:	81fb      	strh	r3, [r7, #14]
 800973a:	687a      	ldr	r2, [r7, #4]
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	441a      	add	r2, r3
 8009744:	89fb      	ldrh	r3, [r7, #14]
 8009746:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800974a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800974e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009756:	b29b      	uxth	r3, r3
 8009758:	8013      	strh	r3, [r2, #0]
 800975a:	e14d      	b.n	80099f8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	785b      	ldrb	r3, [r3, #1]
 8009760:	2b00      	cmp	r3, #0
 8009762:	f040 80a5 	bne.w	80098b0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	4413      	add	r3, r2
 8009770:	881b      	ldrh	r3, [r3, #0]
 8009772:	843b      	strh	r3, [r7, #32]
 8009774:	8c3b      	ldrh	r3, [r7, #32]
 8009776:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800977a:	2b00      	cmp	r3, #0
 800977c:	d01b      	beq.n	80097b6 <USB_DeactivateEndpoint+0x18a>
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	4413      	add	r3, r2
 8009788:	881b      	ldrh	r3, [r3, #0]
 800978a:	b29b      	uxth	r3, r3
 800978c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009794:	83fb      	strh	r3, [r7, #30]
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	441a      	add	r2, r3
 80097a0:	8bfb      	ldrh	r3, [r7, #30]
 80097a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80097ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4413      	add	r3, r2
 80097c0:	881b      	ldrh	r3, [r3, #0]
 80097c2:	83bb      	strh	r3, [r7, #28]
 80097c4:	8bbb      	ldrh	r3, [r7, #28]
 80097c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d01b      	beq.n	8009806 <USB_DeactivateEndpoint+0x1da>
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	4413      	add	r3, r2
 80097d8:	881b      	ldrh	r3, [r3, #0]
 80097da:	b29b      	uxth	r3, r3
 80097dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097e4:	837b      	strh	r3, [r7, #26]
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	441a      	add	r2, r3
 80097f0:	8b7b      	ldrh	r3, [r7, #26]
 80097f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009802:	b29b      	uxth	r3, r3
 8009804:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	4413      	add	r3, r2
 8009810:	881b      	ldrh	r3, [r3, #0]
 8009812:	b29b      	uxth	r3, r3
 8009814:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800981c:	833b      	strh	r3, [r7, #24]
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	441a      	add	r2, r3
 8009828:	8b3b      	ldrh	r3, [r7, #24]
 800982a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800982e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009832:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009836:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800983a:	b29b      	uxth	r3, r3
 800983c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	4413      	add	r3, r2
 8009848:	881b      	ldrh	r3, [r3, #0]
 800984a:	b29b      	uxth	r3, r3
 800984c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009850:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009854:	82fb      	strh	r3, [r7, #22]
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	441a      	add	r2, r3
 8009860:	8afb      	ldrh	r3, [r7, #22]
 8009862:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009866:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800986a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800986e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009872:	b29b      	uxth	r3, r3
 8009874:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	4413      	add	r3, r2
 8009880:	881b      	ldrh	r3, [r3, #0]
 8009882:	b29b      	uxth	r3, r3
 8009884:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009888:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800988c:	82bb      	strh	r3, [r7, #20]
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	441a      	add	r2, r3
 8009898:	8abb      	ldrh	r3, [r7, #20]
 800989a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800989e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	8013      	strh	r3, [r2, #0]
 80098ae:	e0a3      	b.n	80099f8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	4413      	add	r3, r2
 80098ba:	881b      	ldrh	r3, [r3, #0]
 80098bc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80098be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80098c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d01b      	beq.n	8009900 <USB_DeactivateEndpoint+0x2d4>
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	4413      	add	r3, r2
 80098d2:	881b      	ldrh	r3, [r3, #0]
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098de:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	441a      	add	r2, r3
 80098ea:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80098ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80098f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	4413      	add	r3, r2
 800990a:	881b      	ldrh	r3, [r3, #0]
 800990c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800990e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009914:	2b00      	cmp	r3, #0
 8009916:	d01b      	beq.n	8009950 <USB_DeactivateEndpoint+0x324>
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	4413      	add	r3, r2
 8009922:	881b      	ldrh	r3, [r3, #0]
 8009924:	b29b      	uxth	r3, r3
 8009926:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800992a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800992e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	441a      	add	r2, r3
 800993a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800993c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009940:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009948:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800994c:	b29b      	uxth	r3, r3
 800994e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	4413      	add	r3, r2
 800995a:	881b      	ldrh	r3, [r3, #0]
 800995c:	b29b      	uxth	r3, r3
 800995e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009966:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	441a      	add	r2, r3
 8009972:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009974:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009978:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800997c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009984:	b29b      	uxth	r3, r3
 8009986:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	4413      	add	r3, r2
 8009992:	881b      	ldrh	r3, [r3, #0]
 8009994:	b29b      	uxth	r3, r3
 8009996:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800999a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800999e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	441a      	add	r2, r3
 80099aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80099ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099bc:	b29b      	uxth	r3, r3
 80099be:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	4413      	add	r3, r2
 80099ca:	881b      	ldrh	r3, [r3, #0]
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80099d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099d6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	441a      	add	r2, r3
 80099e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80099e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80099f8:	2300      	movs	r3, #0
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3734      	adds	r7, #52	@ 0x34
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr

08009a06 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b0ac      	sub	sp, #176	@ 0xb0
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
 8009a0e:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	785b      	ldrb	r3, [r3, #1]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	f040 84ca 	bne.w	800a3ae <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	699a      	ldr	r2, [r3, #24]
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d904      	bls.n	8009a30 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	691b      	ldr	r3, [r3, #16]
 8009a2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a2e:	e003      	b.n	8009a38 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	7b1b      	ldrb	r3, [r3, #12]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d122      	bne.n	8009a86 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	6959      	ldr	r1, [r3, #20]
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	88da      	ldrh	r2, [r3, #6]
 8009a48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 febd 	bl	800a7ce <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	613b      	str	r3, [r7, #16]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	461a      	mov	r2, r3
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	4413      	add	r3, r2
 8009a66:	613b      	str	r3, [r7, #16]
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	00da      	lsls	r2, r3, #3
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	4413      	add	r3, r2
 8009a72:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009a76:	60fb      	str	r3, [r7, #12]
 8009a78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	801a      	strh	r2, [r3, #0]
 8009a82:	f000 bc6f 	b.w	800a364 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	78db      	ldrb	r3, [r3, #3]
 8009a8a:	2b02      	cmp	r3, #2
 8009a8c:	f040 831e 	bne.w	800a0cc <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	6a1a      	ldr	r2, [r3, #32]
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	691b      	ldr	r3, [r3, #16]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	f240 82cf 	bls.w	800a03c <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	4413      	add	r3, r2
 8009aa8:	881b      	ldrh	r3, [r3, #0]
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ab0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ab4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	441a      	add	r2, r3
 8009ac2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009ac6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009aca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ace:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009ad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	6a1a      	ldr	r2, [r3, #32]
 8009ade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ae2:	1ad2      	subs	r2, r2, r3
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	4413      	add	r3, r2
 8009af2:	881b      	ldrh	r3, [r3, #0]
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f000 814f 	beq.w	8009d9e <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	785b      	ldrb	r3, [r3, #1]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d16b      	bne.n	8009be4 <USB_EPStartXfer+0x1de>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	461a      	mov	r2, r3
 8009b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b1c:	4413      	add	r3, r2
 8009b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	00da      	lsls	r2, r3, #3
 8009b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b28:	4413      	add	r3, r2
 8009b2a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009b2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b32:	881b      	ldrh	r3, [r3, #0]
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b3e:	801a      	strh	r2, [r3, #0]
 8009b40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10a      	bne.n	8009b5e <USB_EPStartXfer+0x158>
 8009b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b4a:	881b      	ldrh	r3, [r3, #0]
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b56:	b29a      	uxth	r2, r3
 8009b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b5a:	801a      	strh	r2, [r3, #0]
 8009b5c:	e05b      	b.n	8009c16 <USB_EPStartXfer+0x210>
 8009b5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b62:	2b3e      	cmp	r3, #62	@ 0x3e
 8009b64:	d81c      	bhi.n	8009ba0 <USB_EPStartXfer+0x19a>
 8009b66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b6a:	085b      	lsrs	r3, r3, #1
 8009b6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009b70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b74:	f003 0301 	and.w	r3, r3, #1
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d004      	beq.n	8009b86 <USB_EPStartXfer+0x180>
 8009b7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009b80:	3301      	adds	r3, #1
 8009b82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b88:	881b      	ldrh	r3, [r3, #0]
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	029b      	lsls	r3, r3, #10
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	4313      	orrs	r3, r2
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b9c:	801a      	strh	r2, [r3, #0]
 8009b9e:	e03a      	b.n	8009c16 <USB_EPStartXfer+0x210>
 8009ba0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ba4:	095b      	lsrs	r3, r3, #5
 8009ba6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009baa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bae:	f003 031f 	and.w	r3, r3, #31
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d104      	bne.n	8009bc0 <USB_EPStartXfer+0x1ba>
 8009bb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc2:	881b      	ldrh	r3, [r3, #0]
 8009bc4:	b29a      	uxth	r2, r3
 8009bc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	029b      	lsls	r3, r3, #10
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bdc:	b29a      	uxth	r2, r3
 8009bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be0:	801a      	strh	r2, [r3, #0]
 8009be2:	e018      	b.n	8009c16 <USB_EPStartXfer+0x210>
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	785b      	ldrb	r3, [r3, #1]
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d114      	bne.n	8009c16 <USB_EPStartXfer+0x210>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf8:	4413      	add	r3, r2
 8009bfa:	633b      	str	r3, [r7, #48]	@ 0x30
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	00da      	lsls	r2, r3, #3
 8009c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c04:	4413      	add	r3, r2
 8009c06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c14:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	895b      	ldrh	r3, [r3, #10]
 8009c1a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	6959      	ldr	r1, [r3, #20]
 8009c22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 fdce 	bl	800a7ce <USB_WritePMA>
            ep->xfer_buff += len;
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	695a      	ldr	r2, [r3, #20]
 8009c36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c3a:	441a      	add	r2, r3
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	6a1a      	ldr	r2, [r3, #32]
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d907      	bls.n	8009c5c <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	6a1a      	ldr	r2, [r3, #32]
 8009c50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c54:	1ad2      	subs	r2, r2, r3
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	621a      	str	r2, [r3, #32]
 8009c5a:	e006      	b.n	8009c6a <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	6a1b      	ldr	r3, [r3, #32]
 8009c60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	2200      	movs	r2, #0
 8009c68:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	785b      	ldrb	r3, [r3, #1]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d16b      	bne.n	8009d4a <USB_EPStartXfer+0x344>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	61bb      	str	r3, [r7, #24]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	461a      	mov	r2, r3
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	4413      	add	r3, r2
 8009c84:	61bb      	str	r3, [r7, #24]
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	00da      	lsls	r2, r3, #3
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	4413      	add	r3, r2
 8009c90:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009c94:	617b      	str	r3, [r7, #20]
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	881b      	ldrh	r3, [r3, #0]
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ca0:	b29a      	uxth	r2, r3
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	801a      	strh	r2, [r3, #0]
 8009ca6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d10a      	bne.n	8009cc4 <USB_EPStartXfer+0x2be>
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	881b      	ldrh	r3, [r3, #0]
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	801a      	strh	r2, [r3, #0]
 8009cc2:	e05d      	b.n	8009d80 <USB_EPStartXfer+0x37a>
 8009cc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cc8:	2b3e      	cmp	r3, #62	@ 0x3e
 8009cca:	d81c      	bhi.n	8009d06 <USB_EPStartXfer+0x300>
 8009ccc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cd0:	085b      	lsrs	r3, r3, #1
 8009cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009cd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cda:	f003 0301 	and.w	r3, r3, #1
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d004      	beq.n	8009cec <USB_EPStartXfer+0x2e6>
 8009ce2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	881b      	ldrh	r3, [r3, #0]
 8009cf0:	b29a      	uxth	r2, r3
 8009cf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	029b      	lsls	r3, r3, #10
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	801a      	strh	r2, [r3, #0]
 8009d04:	e03c      	b.n	8009d80 <USB_EPStartXfer+0x37a>
 8009d06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d0a:	095b      	lsrs	r3, r3, #5
 8009d0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009d10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d14:	f003 031f 	and.w	r3, r3, #31
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d104      	bne.n	8009d26 <USB_EPStartXfer+0x320>
 8009d1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009d20:	3b01      	subs	r3, #1
 8009d22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	881b      	ldrh	r3, [r3, #0]
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	029b      	lsls	r3, r3, #10
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	4313      	orrs	r3, r2
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	801a      	strh	r2, [r3, #0]
 8009d48:	e01a      	b.n	8009d80 <USB_EPStartXfer+0x37a>
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	785b      	ldrb	r3, [r3, #1]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d116      	bne.n	8009d80 <USB_EPStartXfer+0x37a>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	623b      	str	r3, [r7, #32]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	461a      	mov	r2, r3
 8009d60:	6a3b      	ldr	r3, [r7, #32]
 8009d62:	4413      	add	r3, r2
 8009d64:	623b      	str	r3, [r7, #32]
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	00da      	lsls	r2, r3, #3
 8009d6c:	6a3b      	ldr	r3, [r7, #32]
 8009d6e:	4413      	add	r3, r2
 8009d70:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009d74:	61fb      	str	r3, [r7, #28]
 8009d76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	891b      	ldrh	r3, [r3, #8]
 8009d84:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	6959      	ldr	r1, [r3, #20]
 8009d8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 fd19 	bl	800a7ce <USB_WritePMA>
 8009d9c:	e2e2      	b.n	800a364 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	785b      	ldrb	r3, [r3, #1]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d16b      	bne.n	8009e7e <USB_EPStartXfer+0x478>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	461a      	mov	r2, r3
 8009db4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009db6:	4413      	add	r3, r2
 8009db8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	00da      	lsls	r2, r3, #3
 8009dc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dc2:	4413      	add	r3, r2
 8009dc4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009dc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009dcc:	881b      	ldrh	r3, [r3, #0]
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009dd8:	801a      	strh	r2, [r3, #0]
 8009dda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d10a      	bne.n	8009df8 <USB_EPStartXfer+0x3f2>
 8009de2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009de4:	881b      	ldrh	r3, [r3, #0]
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009df0:	b29a      	uxth	r2, r3
 8009df2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009df4:	801a      	strh	r2, [r3, #0]
 8009df6:	e05d      	b.n	8009eb4 <USB_EPStartXfer+0x4ae>
 8009df8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009dfc:	2b3e      	cmp	r3, #62	@ 0x3e
 8009dfe:	d81c      	bhi.n	8009e3a <USB_EPStartXfer+0x434>
 8009e00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e04:	085b      	lsrs	r3, r3, #1
 8009e06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009e0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e0e:	f003 0301 	and.w	r3, r3, #1
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d004      	beq.n	8009e20 <USB_EPStartXfer+0x41a>
 8009e16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009e20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e22:	881b      	ldrh	r3, [r3, #0]
 8009e24:	b29a      	uxth	r2, r3
 8009e26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	029b      	lsls	r3, r3, #10
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	4313      	orrs	r3, r2
 8009e32:	b29a      	uxth	r2, r3
 8009e34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e36:	801a      	strh	r2, [r3, #0]
 8009e38:	e03c      	b.n	8009eb4 <USB_EPStartXfer+0x4ae>
 8009e3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e3e:	095b      	lsrs	r3, r3, #5
 8009e40:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009e44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e48:	f003 031f 	and.w	r3, r3, #31
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d104      	bne.n	8009e5a <USB_EPStartXfer+0x454>
 8009e50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009e54:	3b01      	subs	r3, #1
 8009e56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009e5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e5c:	881b      	ldrh	r3, [r3, #0]
 8009e5e:	b29a      	uxth	r2, r3
 8009e60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	029b      	lsls	r3, r3, #10
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e76:	b29a      	uxth	r2, r3
 8009e78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e7a:	801a      	strh	r2, [r3, #0]
 8009e7c:	e01a      	b.n	8009eb4 <USB_EPStartXfer+0x4ae>
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	785b      	ldrb	r3, [r3, #1]
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d116      	bne.n	8009eb4 <USB_EPStartXfer+0x4ae>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	461a      	mov	r2, r3
 8009e94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e96:	4413      	add	r3, r2
 8009e98:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	00da      	lsls	r2, r3, #3
 8009ea0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ea2:	4413      	add	r3, r2
 8009ea4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009ea8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009eaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009eae:	b29a      	uxth	r2, r3
 8009eb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009eb2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	891b      	ldrh	r3, [r3, #8]
 8009eb8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	6959      	ldr	r1, [r3, #20]
 8009ec0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 fc7f 	bl	800a7ce <USB_WritePMA>
            ep->xfer_buff += len;
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	695a      	ldr	r2, [r3, #20]
 8009ed4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ed8:	441a      	add	r2, r3
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	6a1a      	ldr	r2, [r3, #32]
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	691b      	ldr	r3, [r3, #16]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d907      	bls.n	8009efa <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	6a1a      	ldr	r2, [r3, #32]
 8009eee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ef2:	1ad2      	subs	r2, r2, r3
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	621a      	str	r2, [r3, #32]
 8009ef8:	e006      	b.n	8009f08 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	6a1b      	ldr	r3, [r3, #32]
 8009efe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	2200      	movs	r2, #0
 8009f06:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	785b      	ldrb	r3, [r3, #1]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d16b      	bne.n	8009fec <USB_EPStartXfer+0x5e6>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	461a      	mov	r2, r3
 8009f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f24:	4413      	add	r3, r2
 8009f26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	00da      	lsls	r2, r3, #3
 8009f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f30:	4413      	add	r3, r2
 8009f32:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009f36:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f3a:	881b      	ldrh	r3, [r3, #0]
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f42:	b29a      	uxth	r2, r3
 8009f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f46:	801a      	strh	r2, [r3, #0]
 8009f48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d10a      	bne.n	8009f66 <USB_EPStartXfer+0x560>
 8009f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f52:	881b      	ldrh	r3, [r3, #0]
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f5e:	b29a      	uxth	r2, r3
 8009f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f62:	801a      	strh	r2, [r3, #0]
 8009f64:	e05b      	b.n	800a01e <USB_EPStartXfer+0x618>
 8009f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f6a:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f6c:	d81c      	bhi.n	8009fa8 <USB_EPStartXfer+0x5a2>
 8009f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f72:	085b      	lsrs	r3, r3, #1
 8009f74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009f78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f7c:	f003 0301 	and.w	r3, r3, #1
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d004      	beq.n	8009f8e <USB_EPStartXfer+0x588>
 8009f84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009f88:	3301      	adds	r3, #1
 8009f8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f90:	881b      	ldrh	r3, [r3, #0]
 8009f92:	b29a      	uxth	r2, r3
 8009f94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	029b      	lsls	r3, r3, #10
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	b29a      	uxth	r2, r3
 8009fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fa4:	801a      	strh	r2, [r3, #0]
 8009fa6:	e03a      	b.n	800a01e <USB_EPStartXfer+0x618>
 8009fa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fac:	095b      	lsrs	r3, r3, #5
 8009fae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009fb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fb6:	f003 031f 	and.w	r3, r3, #31
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d104      	bne.n	8009fc8 <USB_EPStartXfer+0x5c2>
 8009fbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fca:	881b      	ldrh	r3, [r3, #0]
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	029b      	lsls	r3, r3, #10
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fe8:	801a      	strh	r2, [r3, #0]
 8009fea:	e018      	b.n	800a01e <USB_EPStartXfer+0x618>
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	785b      	ldrb	r3, [r3, #1]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d114      	bne.n	800a01e <USB_EPStartXfer+0x618>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a000:	4413      	add	r3, r2
 800a002:	643b      	str	r3, [r7, #64]	@ 0x40
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	00da      	lsls	r2, r3, #3
 800a00a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a00c:	4413      	add	r3, r2
 800a00e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a012:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a014:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a018:	b29a      	uxth	r2, r3
 800a01a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a01c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	895b      	ldrh	r3, [r3, #10]
 800a022:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	6959      	ldr	r1, [r3, #20]
 800a02a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a02e:	b29b      	uxth	r3, r3
 800a030:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 fbca 	bl	800a7ce <USB_WritePMA>
 800a03a:	e193      	b.n	800a364 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	6a1b      	ldr	r3, [r3, #32]
 800a040:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	4413      	add	r3, r2
 800a04e:	881b      	ldrh	r3, [r3, #0]
 800a050:	b29b      	uxth	r3, r3
 800a052:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a05a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	441a      	add	r2, r3
 800a068:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a06c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a070:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a074:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a078:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	461a      	mov	r2, r3
 800a08e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a090:	4413      	add	r3, r2
 800a092:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	00da      	lsls	r2, r3, #3
 800a09a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a09c:	4413      	add	r3, r2
 800a09e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a0a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a0a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0a8:	b29a      	uxth	r2, r3
 800a0aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a0ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	891b      	ldrh	r3, [r3, #8]
 800a0b2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	6959      	ldr	r1, [r3, #20]
 800a0ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 fb82 	bl	800a7ce <USB_WritePMA>
 800a0ca:	e14b      	b.n	800a364 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	6a1a      	ldr	r2, [r3, #32]
 800a0d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0d4:	1ad2      	subs	r2, r2, r3
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	4413      	add	r3, r2
 800a0e4:	881b      	ldrh	r3, [r3, #0]
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f000 809a 	beq.w	800a226 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	673b      	str	r3, [r7, #112]	@ 0x70
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	785b      	ldrb	r3, [r3, #1]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d16b      	bne.n	800a1d6 <USB_EPStartXfer+0x7d0>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a108:	b29b      	uxth	r3, r3
 800a10a:	461a      	mov	r2, r3
 800a10c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a10e:	4413      	add	r3, r2
 800a110:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	00da      	lsls	r2, r3, #3
 800a118:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a11a:	4413      	add	r3, r2
 800a11c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a120:	667b      	str	r3, [r7, #100]	@ 0x64
 800a122:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a124:	881b      	ldrh	r3, [r3, #0]
 800a126:	b29b      	uxth	r3, r3
 800a128:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a12c:	b29a      	uxth	r2, r3
 800a12e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a130:	801a      	strh	r2, [r3, #0]
 800a132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a136:	2b00      	cmp	r3, #0
 800a138:	d10a      	bne.n	800a150 <USB_EPStartXfer+0x74a>
 800a13a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a13c:	881b      	ldrh	r3, [r3, #0]
 800a13e:	b29b      	uxth	r3, r3
 800a140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a148:	b29a      	uxth	r2, r3
 800a14a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a14c:	801a      	strh	r2, [r3, #0]
 800a14e:	e05b      	b.n	800a208 <USB_EPStartXfer+0x802>
 800a150:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a154:	2b3e      	cmp	r3, #62	@ 0x3e
 800a156:	d81c      	bhi.n	800a192 <USB_EPStartXfer+0x78c>
 800a158:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a15c:	085b      	lsrs	r3, r3, #1
 800a15e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a162:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a166:	f003 0301 	and.w	r3, r3, #1
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d004      	beq.n	800a178 <USB_EPStartXfer+0x772>
 800a16e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a172:	3301      	adds	r3, #1
 800a174:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a178:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a17a:	881b      	ldrh	r3, [r3, #0]
 800a17c:	b29a      	uxth	r2, r3
 800a17e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a182:	b29b      	uxth	r3, r3
 800a184:	029b      	lsls	r3, r3, #10
 800a186:	b29b      	uxth	r3, r3
 800a188:	4313      	orrs	r3, r2
 800a18a:	b29a      	uxth	r2, r3
 800a18c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a18e:	801a      	strh	r2, [r3, #0]
 800a190:	e03a      	b.n	800a208 <USB_EPStartXfer+0x802>
 800a192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a196:	095b      	lsrs	r3, r3, #5
 800a198:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a19c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1a0:	f003 031f 	and.w	r3, r3, #31
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d104      	bne.n	800a1b2 <USB_EPStartXfer+0x7ac>
 800a1a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a1b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1b4:	881b      	ldrh	r3, [r3, #0]
 800a1b6:	b29a      	uxth	r2, r3
 800a1b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	029b      	lsls	r3, r3, #10
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1ce:	b29a      	uxth	r2, r3
 800a1d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1d2:	801a      	strh	r2, [r3, #0]
 800a1d4:	e018      	b.n	800a208 <USB_EPStartXfer+0x802>
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	785b      	ldrb	r3, [r3, #1]
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d114      	bne.n	800a208 <USB_EPStartXfer+0x802>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a1ea:	4413      	add	r3, r2
 800a1ec:	673b      	str	r3, [r7, #112]	@ 0x70
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	00da      	lsls	r2, r3, #3
 800a1f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a1f6:	4413      	add	r3, r2
 800a1f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a1fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a1fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a202:	b29a      	uxth	r2, r3
 800a204:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a206:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	895b      	ldrh	r3, [r3, #10]
 800a20c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	6959      	ldr	r1, [r3, #20]
 800a214:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a218:	b29b      	uxth	r3, r3
 800a21a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 fad5 	bl	800a7ce <USB_WritePMA>
 800a224:	e09e      	b.n	800a364 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	785b      	ldrb	r3, [r3, #1]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d16b      	bne.n	800a306 <USB_EPStartXfer+0x900>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a238:	b29b      	uxth	r3, r3
 800a23a:	461a      	mov	r2, r3
 800a23c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a23e:	4413      	add	r3, r2
 800a240:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	00da      	lsls	r2, r3, #3
 800a248:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a24a:	4413      	add	r3, r2
 800a24c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a250:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a252:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a254:	881b      	ldrh	r3, [r3, #0]
 800a256:	b29b      	uxth	r3, r3
 800a258:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a25c:	b29a      	uxth	r2, r3
 800a25e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a260:	801a      	strh	r2, [r3, #0]
 800a262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10a      	bne.n	800a280 <USB_EPStartXfer+0x87a>
 800a26a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a26c:	881b      	ldrh	r3, [r3, #0]
 800a26e:	b29b      	uxth	r3, r3
 800a270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a278:	b29a      	uxth	r2, r3
 800a27a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a27c:	801a      	strh	r2, [r3, #0]
 800a27e:	e063      	b.n	800a348 <USB_EPStartXfer+0x942>
 800a280:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a284:	2b3e      	cmp	r3, #62	@ 0x3e
 800a286:	d81c      	bhi.n	800a2c2 <USB_EPStartXfer+0x8bc>
 800a288:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a28c:	085b      	lsrs	r3, r3, #1
 800a28e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a296:	f003 0301 	and.w	r3, r3, #1
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d004      	beq.n	800a2a8 <USB_EPStartXfer+0x8a2>
 800a29e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a2a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2aa:	881b      	ldrh	r3, [r3, #0]
 800a2ac:	b29a      	uxth	r2, r3
 800a2ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	029b      	lsls	r3, r3, #10
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	b29a      	uxth	r2, r3
 800a2bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2be:	801a      	strh	r2, [r3, #0]
 800a2c0:	e042      	b.n	800a348 <USB_EPStartXfer+0x942>
 800a2c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2c6:	095b      	lsrs	r3, r3, #5
 800a2c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a2cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2d0:	f003 031f 	and.w	r3, r3, #31
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d104      	bne.n	800a2e2 <USB_EPStartXfer+0x8dc>
 800a2d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a2e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2e4:	881b      	ldrh	r3, [r3, #0]
 800a2e6:	b29a      	uxth	r2, r3
 800a2e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	029b      	lsls	r3, r3, #10
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2fe:	b29a      	uxth	r2, r3
 800a300:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a302:	801a      	strh	r2, [r3, #0]
 800a304:	e020      	b.n	800a348 <USB_EPStartXfer+0x942>
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	785b      	ldrb	r3, [r3, #1]
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d11c      	bne.n	800a348 <USB_EPStartXfer+0x942>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	461a      	mov	r2, r3
 800a31e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a322:	4413      	add	r3, r2
 800a324:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	00da      	lsls	r2, r3, #3
 800a32e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a332:	4413      	add	r3, r2
 800a334:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a338:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a33c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a340:	b29a      	uxth	r2, r3
 800a342:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a346:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	891b      	ldrh	r3, [r3, #8]
 800a34c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	6959      	ldr	r1, [r3, #20]
 800a354:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a358:	b29b      	uxth	r3, r3
 800a35a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 fa35 	bl	800a7ce <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	4413      	add	r3, r2
 800a36e:	881b      	ldrh	r3, [r3, #0]
 800a370:	b29b      	uxth	r3, r3
 800a372:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a376:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a37a:	817b      	strh	r3, [r7, #10]
 800a37c:	897b      	ldrh	r3, [r7, #10]
 800a37e:	f083 0310 	eor.w	r3, r3, #16
 800a382:	817b      	strh	r3, [r7, #10]
 800a384:	897b      	ldrh	r3, [r7, #10]
 800a386:	f083 0320 	eor.w	r3, r3, #32
 800a38a:	817b      	strh	r3, [r7, #10]
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	441a      	add	r2, r3
 800a396:	897b      	ldrh	r3, [r7, #10]
 800a398:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a39c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	8013      	strh	r3, [r2, #0]
 800a3ac:	e0d5      	b.n	800a55a <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	7b1b      	ldrb	r3, [r3, #12]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d156      	bne.n	800a464 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	699b      	ldr	r3, [r3, #24]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d122      	bne.n	800a404 <USB_EPStartXfer+0x9fe>
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	78db      	ldrb	r3, [r3, #3]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d11e      	bne.n	800a404 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	4413      	add	r3, r2
 800a3d0:	881b      	ldrh	r3, [r3, #0]
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3dc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	441a      	add	r2, r3
 800a3ea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a3ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3f6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a3fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	8013      	strh	r3, [r2, #0]
 800a402:	e01d      	b.n	800a440 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	4413      	add	r3, r2
 800a40e:	881b      	ldrh	r3, [r3, #0]
 800a410:	b29b      	uxth	r3, r3
 800a412:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a41a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	441a      	add	r2, r3
 800a428:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800a42c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a430:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a434:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a438:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	699a      	ldr	r2, [r3, #24]
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	691b      	ldr	r3, [r3, #16]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d907      	bls.n	800a45c <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	699a      	ldr	r2, [r3, #24]
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	691b      	ldr	r3, [r3, #16]
 800a454:	1ad2      	subs	r2, r2, r3
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	619a      	str	r2, [r3, #24]
 800a45a:	e054      	b.n	800a506 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	2200      	movs	r2, #0
 800a460:	619a      	str	r2, [r3, #24]
 800a462:	e050      	b.n	800a506 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	78db      	ldrb	r3, [r3, #3]
 800a468:	2b02      	cmp	r3, #2
 800a46a:	d142      	bne.n	800a4f2 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	69db      	ldr	r3, [r3, #28]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d048      	beq.n	800a506 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	4413      	add	r3, r2
 800a47e:	881b      	ldrh	r3, [r3, #0]
 800a480:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a484:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a488:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d005      	beq.n	800a49c <USB_EPStartXfer+0xa96>
 800a490:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d10b      	bne.n	800a4b4 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a49c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a4a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d12e      	bne.n	800a506 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a4a8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a4ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d128      	bne.n	800a506 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a4b4:	687a      	ldr	r2, [r7, #4]
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	4413      	add	r3, r2
 800a4be:	881b      	ldrh	r3, [r3, #0]
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4ca:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	009b      	lsls	r3, r3, #2
 800a4d6:	441a      	add	r2, r3
 800a4d8:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800a4dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	8013      	strh	r3, [r2, #0]
 800a4f0:	e009      	b.n	800a506 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	78db      	ldrb	r3, [r3, #3]
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d103      	bne.n	800a502 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	619a      	str	r2, [r3, #24]
 800a500:	e001      	b.n	800a506 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800a502:	2301      	movs	r3, #1
 800a504:	e02a      	b.n	800a55c <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	4413      	add	r3, r2
 800a510:	881b      	ldrh	r3, [r3, #0]
 800a512:	b29b      	uxth	r3, r3
 800a514:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a518:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a51c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a520:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a524:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a528:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a52c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a530:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a534:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	009b      	lsls	r3, r3, #2
 800a540:	441a      	add	r2, r3
 800a542:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a546:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a54a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a54e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a556:	b29b      	uxth	r3, r3
 800a558:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a55a:	2300      	movs	r3, #0
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	37b0      	adds	r7, #176	@ 0xb0
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	785b      	ldrb	r3, [r3, #1]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d020      	beq.n	800a5b8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	4413      	add	r3, r2
 800a580:	881b      	ldrh	r3, [r3, #0]
 800a582:	b29b      	uxth	r3, r3
 800a584:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a588:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a58c:	81bb      	strh	r3, [r7, #12]
 800a58e:	89bb      	ldrh	r3, [r7, #12]
 800a590:	f083 0310 	eor.w	r3, r3, #16
 800a594:	81bb      	strh	r3, [r7, #12]
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	441a      	add	r2, r3
 800a5a0:	89bb      	ldrh	r3, [r7, #12]
 800a5a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a5a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a5aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	8013      	strh	r3, [r2, #0]
 800a5b6:	e01f      	b.n	800a5f8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	4413      	add	r3, r2
 800a5c2:	881b      	ldrh	r3, [r3, #0]
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a5ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5ce:	81fb      	strh	r3, [r7, #14]
 800a5d0:	89fb      	ldrh	r3, [r7, #14]
 800a5d2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a5d6:	81fb      	strh	r3, [r7, #14]
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	441a      	add	r2, r3
 800a5e2:	89fb      	ldrh	r3, [r7, #14]
 800a5e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a5e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a5ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a5f8:	2300      	movs	r3, #0
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3714      	adds	r7, #20
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr

0800a606 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a606:	b480      	push	{r7}
 800a608:	b087      	sub	sp, #28
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	785b      	ldrb	r3, [r3, #1]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d04c      	beq.n	800a6b2 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4413      	add	r3, r2
 800a622:	881b      	ldrh	r3, [r3, #0]
 800a624:	823b      	strh	r3, [r7, #16]
 800a626:	8a3b      	ldrh	r3, [r7, #16]
 800a628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d01b      	beq.n	800a668 <USB_EPClearStall+0x62>
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	4413      	add	r3, r2
 800a63a:	881b      	ldrh	r3, [r3, #0]
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a646:	81fb      	strh	r3, [r7, #14]
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	441a      	add	r2, r3
 800a652:	89fb      	ldrh	r3, [r7, #14]
 800a654:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a658:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a65c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a660:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a664:	b29b      	uxth	r3, r3
 800a666:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	78db      	ldrb	r3, [r3, #3]
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d06c      	beq.n	800a74a <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	009b      	lsls	r3, r3, #2
 800a678:	4413      	add	r3, r2
 800a67a:	881b      	ldrh	r3, [r3, #0]
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a682:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a686:	81bb      	strh	r3, [r7, #12]
 800a688:	89bb      	ldrh	r3, [r7, #12]
 800a68a:	f083 0320 	eor.w	r3, r3, #32
 800a68e:	81bb      	strh	r3, [r7, #12]
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	441a      	add	r2, r3
 800a69a:	89bb      	ldrh	r3, [r7, #12]
 800a69c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a6a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a6a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	8013      	strh	r3, [r2, #0]
 800a6b0:	e04b      	b.n	800a74a <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	4413      	add	r3, r2
 800a6bc:	881b      	ldrh	r3, [r3, #0]
 800a6be:	82fb      	strh	r3, [r7, #22]
 800a6c0:	8afb      	ldrh	r3, [r7, #22]
 800a6c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d01b      	beq.n	800a702 <USB_EPClearStall+0xfc>
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	4413      	add	r3, r2
 800a6d4:	881b      	ldrh	r3, [r3, #0]
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6e0:	82bb      	strh	r3, [r7, #20]
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	441a      	add	r2, r3
 800a6ec:	8abb      	ldrh	r3, [r7, #20]
 800a6ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a6f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a6fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	4413      	add	r3, r2
 800a70c:	881b      	ldrh	r3, [r3, #0]
 800a70e:	b29b      	uxth	r3, r3
 800a710:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a714:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a718:	827b      	strh	r3, [r7, #18]
 800a71a:	8a7b      	ldrh	r3, [r7, #18]
 800a71c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a720:	827b      	strh	r3, [r7, #18]
 800a722:	8a7b      	ldrh	r3, [r7, #18]
 800a724:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a728:	827b      	strh	r3, [r7, #18]
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	441a      	add	r2, r3
 800a734:	8a7b      	ldrh	r3, [r7, #18]
 800a736:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a73a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a73e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a746:	b29b      	uxth	r3, r3
 800a748:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a74a:	2300      	movs	r3, #0
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	371c      	adds	r7, #28
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	460b      	mov	r3, r1
 800a762:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a764:	78fb      	ldrb	r3, [r7, #3]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d103      	bne.n	800a772 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2280      	movs	r2, #128	@ 0x80
 800a76e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a772:	2300      	movs	r3, #0
}
 800a774:	4618      	mov	r0, r3
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a78e:	b29b      	uxth	r3, r3
 800a790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a798:	b29a      	uxth	r2, r3
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	370c      	adds	r7, #12
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr

0800a7ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a7ae:	b480      	push	{r7}
 800a7b0:	b085      	sub	sp, #20
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3714      	adds	r7, #20
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr

0800a7ce <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a7ce:	b480      	push	{r7}
 800a7d0:	b08b      	sub	sp, #44	@ 0x2c
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	60f8      	str	r0, [r7, #12]
 800a7d6:	60b9      	str	r1, [r7, #8]
 800a7d8:	4611      	mov	r1, r2
 800a7da:	461a      	mov	r2, r3
 800a7dc:	460b      	mov	r3, r1
 800a7de:	80fb      	strh	r3, [r7, #6]
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a7e4:	88bb      	ldrh	r3, [r7, #4]
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	085b      	lsrs	r3, r3, #1
 800a7ea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a7f4:	88fa      	ldrh	r2, [r7, #6]
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a7fe:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a800:	69bb      	ldr	r3, [r7, #24]
 800a802:	627b      	str	r3, [r7, #36]	@ 0x24
 800a804:	e01c      	b.n	800a840 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800a806:	69fb      	ldr	r3, [r7, #28]
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a80c:	69fb      	ldr	r3, [r7, #28]
 800a80e:	3301      	adds	r3, #1
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	b21b      	sxth	r3, r3
 800a814:	021b      	lsls	r3, r3, #8
 800a816:	b21a      	sxth	r2, r3
 800a818:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a81c:	4313      	orrs	r3, r2
 800a81e:	b21b      	sxth	r3, r3
 800a820:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a822:	6a3b      	ldr	r3, [r7, #32]
 800a824:	8a7a      	ldrh	r2, [r7, #18]
 800a826:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a828:	6a3b      	ldr	r3, [r7, #32]
 800a82a:	3302      	adds	r3, #2
 800a82c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	3301      	adds	r3, #1
 800a832:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	3301      	adds	r3, #1
 800a838:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a83c:	3b01      	subs	r3, #1
 800a83e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a842:	2b00      	cmp	r3, #0
 800a844:	d1df      	bne.n	800a806 <USB_WritePMA+0x38>
  }
}
 800a846:	bf00      	nop
 800a848:	bf00      	nop
 800a84a:	372c      	adds	r7, #44	@ 0x2c
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr

0800a854 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a854:	b480      	push	{r7}
 800a856:	b08b      	sub	sp, #44	@ 0x2c
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	4611      	mov	r1, r2
 800a860:	461a      	mov	r2, r3
 800a862:	460b      	mov	r3, r1
 800a864:	80fb      	strh	r3, [r7, #6]
 800a866:	4613      	mov	r3, r2
 800a868:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a86a:	88bb      	ldrh	r3, [r7, #4]
 800a86c:	085b      	lsrs	r3, r3, #1
 800a86e:	b29b      	uxth	r3, r3
 800a870:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a87a:	88fa      	ldrh	r2, [r7, #6]
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	4413      	add	r3, r2
 800a880:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a884:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	627b      	str	r3, [r7, #36]	@ 0x24
 800a88a:	e018      	b.n	800a8be <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a88c:	6a3b      	ldr	r3, [r7, #32]
 800a88e:	881b      	ldrh	r3, [r3, #0]
 800a890:	b29b      	uxth	r3, r3
 800a892:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a894:	6a3b      	ldr	r3, [r7, #32]
 800a896:	3302      	adds	r3, #2
 800a898:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	b2da      	uxtb	r2, r3
 800a89e:	69fb      	ldr	r3, [r7, #28]
 800a8a0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	0a1b      	lsrs	r3, r3, #8
 800a8ac:	b2da      	uxtb	r2, r3
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d1e3      	bne.n	800a88c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a8c4:	88bb      	ldrh	r3, [r7, #4]
 800a8c6:	f003 0301 	and.w	r3, r3, #1
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d007      	beq.n	800a8e0 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a8d0:	6a3b      	ldr	r3, [r7, #32]
 800a8d2:	881b      	ldrh	r3, [r3, #0]
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	b2da      	uxtb	r2, r3
 800a8dc:	69fb      	ldr	r3, [r7, #28]
 800a8de:	701a      	strb	r2, [r3, #0]
  }
}
 800a8e0:	bf00      	nop
 800a8e2:	372c      	adds	r7, #44	@ 0x2c
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr

0800a8ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a8f8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a8fc:	f002 f8ba 	bl	800ca74 <USBD_static_malloc>
 800a900:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d105      	bne.n	800a914 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800a910:	2302      	movs	r3, #2
 800a912:	e066      	b.n	800a9e2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	7c1b      	ldrb	r3, [r3, #16]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d119      	bne.n	800a958 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a924:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a928:	2202      	movs	r2, #2
 800a92a:	2181      	movs	r1, #129	@ 0x81
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f001 ff48 	bl	800c7c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2201      	movs	r2, #1
 800a936:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a938:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a93c:	2202      	movs	r2, #2
 800a93e:	2101      	movs	r1, #1
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f001 ff3e 	bl	800c7c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2201      	movs	r2, #1
 800a94a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2210      	movs	r2, #16
 800a952:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800a956:	e016      	b.n	800a986 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a958:	2340      	movs	r3, #64	@ 0x40
 800a95a:	2202      	movs	r2, #2
 800a95c:	2181      	movs	r1, #129	@ 0x81
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f001 ff2f 	bl	800c7c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2201      	movs	r2, #1
 800a968:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a96a:	2340      	movs	r3, #64	@ 0x40
 800a96c:	2202      	movs	r2, #2
 800a96e:	2101      	movs	r1, #1
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f001 ff26 	bl	800c7c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2201      	movs	r2, #1
 800a97a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2210      	movs	r2, #16
 800a982:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a986:	2308      	movs	r3, #8
 800a988:	2203      	movs	r2, #3
 800a98a:	2182      	movs	r1, #130	@ 0x82
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f001 ff18 	bl	800c7c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2201      	movs	r2, #1
 800a996:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	7c1b      	ldrb	r3, [r3, #16]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d109      	bne.n	800a9d0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a9c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a9c6:	2101      	movs	r1, #1
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f001 ffe9 	bl	800c9a0 <USBD_LL_PrepareReceive>
 800a9ce:	e007      	b.n	800a9e0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a9d6:	2340      	movs	r3, #64	@ 0x40
 800a9d8:	2101      	movs	r1, #1
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f001 ffe0 	bl	800c9a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a9e0:	2300      	movs	r3, #0
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3710      	adds	r7, #16
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b082      	sub	sp, #8
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	460b      	mov	r3, r1
 800a9f4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a9f6:	2181      	movs	r1, #129	@ 0x81
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f001 ff08 	bl	800c80e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800aa04:	2101      	movs	r1, #1
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f001 ff01 	bl	800c80e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800aa14:	2182      	movs	r1, #130	@ 0x82
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f001 fef9 	bl	800c80e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00e      	beq.n	800aa54 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aa46:	4618      	mov	r0, r3
 800aa48:	f002 f822 	bl	800ca90 <USBD_static_free>
    pdev->pClassData = NULL;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aa54:	2300      	movs	r3, #0
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3708      	adds	r7, #8
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
	...

0800aa60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b086      	sub	sp, #24
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aa70:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800aa72:	2300      	movs	r3, #0
 800aa74:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800aa76:	2300      	movs	r3, #0
 800aa78:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d101      	bne.n	800aa88 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800aa84:	2303      	movs	r3, #3
 800aa86:	e0af      	b.n	800abe8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d03f      	beq.n	800ab14 <USBD_CDC_Setup+0xb4>
 800aa94:	2b20      	cmp	r3, #32
 800aa96:	f040 809f 	bne.w	800abd8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	88db      	ldrh	r3, [r3, #6]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d02e      	beq.n	800ab00 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	b25b      	sxtb	r3, r3
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	da16      	bge.n	800aada <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aab2:	689b      	ldr	r3, [r3, #8]
 800aab4:	683a      	ldr	r2, [r7, #0]
 800aab6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800aab8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aaba:	683a      	ldr	r2, [r7, #0]
 800aabc:	88d2      	ldrh	r2, [r2, #6]
 800aabe:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	88db      	ldrh	r3, [r3, #6]
 800aac4:	2b07      	cmp	r3, #7
 800aac6:	bf28      	it	cs
 800aac8:	2307      	movcs	r3, #7
 800aaca:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	89fa      	ldrh	r2, [r7, #14]
 800aad0:	4619      	mov	r1, r3
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f001 fa9f 	bl	800c016 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800aad8:	e085      	b.n	800abe6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	785a      	ldrb	r2, [r3, #1]
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	88db      	ldrh	r3, [r3, #6]
 800aae8:	b2da      	uxtb	r2, r3
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800aaf0:	6939      	ldr	r1, [r7, #16]
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	88db      	ldrh	r3, [r3, #6]
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f001 fab8 	bl	800c06e <USBD_CtlPrepareRx>
      break;
 800aafe:	e072      	b.n	800abe6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	683a      	ldr	r2, [r7, #0]
 800ab0a:	7850      	ldrb	r0, [r2, #1]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	6839      	ldr	r1, [r7, #0]
 800ab10:	4798      	blx	r3
      break;
 800ab12:	e068      	b.n	800abe6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	785b      	ldrb	r3, [r3, #1]
 800ab18:	2b0b      	cmp	r3, #11
 800ab1a:	d852      	bhi.n	800abc2 <USBD_CDC_Setup+0x162>
 800ab1c:	a201      	add	r2, pc, #4	@ (adr r2, 800ab24 <USBD_CDC_Setup+0xc4>)
 800ab1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab22:	bf00      	nop
 800ab24:	0800ab55 	.word	0x0800ab55
 800ab28:	0800abd1 	.word	0x0800abd1
 800ab2c:	0800abc3 	.word	0x0800abc3
 800ab30:	0800abc3 	.word	0x0800abc3
 800ab34:	0800abc3 	.word	0x0800abc3
 800ab38:	0800abc3 	.word	0x0800abc3
 800ab3c:	0800abc3 	.word	0x0800abc3
 800ab40:	0800abc3 	.word	0x0800abc3
 800ab44:	0800abc3 	.word	0x0800abc3
 800ab48:	0800abc3 	.word	0x0800abc3
 800ab4c:	0800ab7f 	.word	0x0800ab7f
 800ab50:	0800aba9 	.word	0x0800aba9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	2b03      	cmp	r3, #3
 800ab5e:	d107      	bne.n	800ab70 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ab60:	f107 030a 	add.w	r3, r7, #10
 800ab64:	2202      	movs	r2, #2
 800ab66:	4619      	mov	r1, r3
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f001 fa54 	bl	800c016 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab6e:	e032      	b.n	800abd6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ab70:	6839      	ldr	r1, [r7, #0]
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f001 f9de 	bl	800bf34 <USBD_CtlError>
            ret = USBD_FAIL;
 800ab78:	2303      	movs	r3, #3
 800ab7a:	75fb      	strb	r3, [r7, #23]
          break;
 800ab7c:	e02b      	b.n	800abd6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	2b03      	cmp	r3, #3
 800ab88:	d107      	bne.n	800ab9a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ab8a:	f107 030d 	add.w	r3, r7, #13
 800ab8e:	2201      	movs	r2, #1
 800ab90:	4619      	mov	r1, r3
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f001 fa3f 	bl	800c016 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab98:	e01d      	b.n	800abd6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ab9a:	6839      	ldr	r1, [r7, #0]
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f001 f9c9 	bl	800bf34 <USBD_CtlError>
            ret = USBD_FAIL;
 800aba2:	2303      	movs	r3, #3
 800aba4:	75fb      	strb	r3, [r7, #23]
          break;
 800aba6:	e016      	b.n	800abd6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	2b03      	cmp	r3, #3
 800abb2:	d00f      	beq.n	800abd4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800abb4:	6839      	ldr	r1, [r7, #0]
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f001 f9bc 	bl	800bf34 <USBD_CtlError>
            ret = USBD_FAIL;
 800abbc:	2303      	movs	r3, #3
 800abbe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800abc0:	e008      	b.n	800abd4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800abc2:	6839      	ldr	r1, [r7, #0]
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f001 f9b5 	bl	800bf34 <USBD_CtlError>
          ret = USBD_FAIL;
 800abca:	2303      	movs	r3, #3
 800abcc:	75fb      	strb	r3, [r7, #23]
          break;
 800abce:	e002      	b.n	800abd6 <USBD_CDC_Setup+0x176>
          break;
 800abd0:	bf00      	nop
 800abd2:	e008      	b.n	800abe6 <USBD_CDC_Setup+0x186>
          break;
 800abd4:	bf00      	nop
      }
      break;
 800abd6:	e006      	b.n	800abe6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800abd8:	6839      	ldr	r1, [r7, #0]
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f001 f9aa 	bl	800bf34 <USBD_CtlError>
      ret = USBD_FAIL;
 800abe0:	2303      	movs	r3, #3
 800abe2:	75fb      	strb	r3, [r7, #23]
      break;
 800abe4:	bf00      	nop
  }

  return (uint8_t)ret;
 800abe6:	7dfb      	ldrb	r3, [r7, #23]
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3718      	adds	r7, #24
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	460b      	mov	r3, r1
 800abfa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ac02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d101      	bne.n	800ac12 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ac0e:	2303      	movs	r3, #3
 800ac10:	e04f      	b.n	800acb2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ac18:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ac1a:	78fa      	ldrb	r2, [r7, #3]
 800ac1c:	6879      	ldr	r1, [r7, #4]
 800ac1e:	4613      	mov	r3, r2
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	4413      	add	r3, r2
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	440b      	add	r3, r1
 800ac28:	3318      	adds	r3, #24
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d029      	beq.n	800ac84 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ac30:	78fa      	ldrb	r2, [r7, #3]
 800ac32:	6879      	ldr	r1, [r7, #4]
 800ac34:	4613      	mov	r3, r2
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	4413      	add	r3, r2
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	440b      	add	r3, r1
 800ac3e:	3318      	adds	r3, #24
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	78f9      	ldrb	r1, [r7, #3]
 800ac44:	68f8      	ldr	r0, [r7, #12]
 800ac46:	460b      	mov	r3, r1
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	440b      	add	r3, r1
 800ac4c:	00db      	lsls	r3, r3, #3
 800ac4e:	4403      	add	r3, r0
 800ac50:	3320      	adds	r3, #32
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	fbb2 f1f3 	udiv	r1, r2, r3
 800ac58:	fb01 f303 	mul.w	r3, r1, r3
 800ac5c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d110      	bne.n	800ac84 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ac62:	78fa      	ldrb	r2, [r7, #3]
 800ac64:	6879      	ldr	r1, [r7, #4]
 800ac66:	4613      	mov	r3, r2
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	4413      	add	r3, r2
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	440b      	add	r3, r1
 800ac70:	3318      	adds	r3, #24
 800ac72:	2200      	movs	r2, #0
 800ac74:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ac76:	78f9      	ldrb	r1, [r7, #3]
 800ac78:	2300      	movs	r3, #0
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f001 fe6e 	bl	800c95e <USBD_LL_Transmit>
 800ac82:	e015      	b.n	800acb0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	2200      	movs	r2, #0
 800ac88:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ac92:	691b      	ldr	r3, [r3, #16]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d00b      	beq.n	800acb0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ac9e:	691b      	ldr	r3, [r3, #16]
 800aca0:	68ba      	ldr	r2, [r7, #8]
 800aca2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800aca6:	68ba      	ldr	r2, [r7, #8]
 800aca8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800acac:	78fa      	ldrb	r2, [r7, #3]
 800acae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3710      	adds	r7, #16
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800acba:	b580      	push	{r7, lr}
 800acbc:	b084      	sub	sp, #16
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
 800acc2:	460b      	mov	r3, r1
 800acc4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800accc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d101      	bne.n	800acdc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800acd8:	2303      	movs	r3, #3
 800acda:	e015      	b.n	800ad08 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800acdc:	78fb      	ldrb	r3, [r7, #3]
 800acde:	4619      	mov	r1, r3
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f001 fe7e 	bl	800c9e2 <USBD_LL_GetRxDataSize>
 800ace6:	4602      	mov	r2, r0
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800acf4:	68db      	ldr	r3, [r3, #12]
 800acf6:	68fa      	ldr	r2, [r7, #12]
 800acf8:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ad02:	4611      	mov	r1, r2
 800ad04:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3710      	adds	r7, #16
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ad1e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d101      	bne.n	800ad2a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800ad26:	2303      	movs	r3, #3
 800ad28:	e01a      	b.n	800ad60 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d014      	beq.n	800ad5e <USBD_CDC_EP0_RxReady+0x4e>
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ad3a:	2bff      	cmp	r3, #255	@ 0xff
 800ad3c:	d00f      	beq.n	800ad5e <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ad44:	689b      	ldr	r3, [r3, #8]
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800ad4c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ad54:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	22ff      	movs	r2, #255	@ 0xff
 800ad5a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ad5e:	2300      	movs	r3, #0
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3710      	adds	r7, #16
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2243      	movs	r2, #67	@ 0x43
 800ad74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ad76:	4b03      	ldr	r3, [pc, #12]	@ (800ad84 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	370c      	adds	r7, #12
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr
 800ad84:	20000094 	.word	0x20000094

0800ad88 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2243      	movs	r2, #67	@ 0x43
 800ad94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ad96:	4b03      	ldr	r3, [pc, #12]	@ (800ada4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	370c      	adds	r7, #12
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr
 800ada4:	20000050 	.word	0x20000050

0800ada8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b083      	sub	sp, #12
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2243      	movs	r2, #67	@ 0x43
 800adb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800adb6:	4b03      	ldr	r3, [pc, #12]	@ (800adc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800adb8:	4618      	mov	r0, r3
 800adba:	370c      	adds	r7, #12
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr
 800adc4:	200000d8 	.word	0x200000d8

0800adc8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800adc8:	b480      	push	{r7}
 800adca:	b083      	sub	sp, #12
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	220a      	movs	r2, #10
 800add4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800add6:	4b03      	ldr	r3, [pc, #12]	@ (800ade4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800add8:	4618      	mov	r0, r3
 800adda:	370c      	adds	r7, #12
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr
 800ade4:	2000000c 	.word	0x2000000c

0800ade8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ade8:	b480      	push	{r7}
 800adea:	b083      	sub	sp, #12
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d101      	bne.n	800adfc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800adf8:	2303      	movs	r3, #3
 800adfa:	e004      	b.n	800ae06 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	683a      	ldr	r2, [r7, #0]
 800ae00:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800ae04:	2300      	movs	r3, #0
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	370c      	adds	r7, #12
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr

0800ae12 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ae12:	b480      	push	{r7}
 800ae14:	b087      	sub	sp, #28
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	60f8      	str	r0, [r7, #12]
 800ae1a:	60b9      	str	r1, [r7, #8]
 800ae1c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ae24:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d101      	bne.n	800ae30 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ae2c:	2303      	movs	r3, #3
 800ae2e:	e008      	b.n	800ae42 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	68ba      	ldr	r2, [r7, #8]
 800ae34:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ae40:	2300      	movs	r3, #0
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	371c      	adds	r7, #28
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr

0800ae4e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ae4e:	b480      	push	{r7}
 800ae50:	b085      	sub	sp, #20
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
 800ae56:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ae5e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d101      	bne.n	800ae6a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800ae66:	2303      	movs	r3, #3
 800ae68:	e004      	b.n	800ae74 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	683a      	ldr	r2, [r7, #0]
 800ae6e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ae72:	2300      	movs	r3, #0
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3714      	adds	r7, #20
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ae8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d101      	bne.n	800ae9e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ae9a:	2303      	movs	r3, #3
 800ae9c:	e016      	b.n	800aecc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	7c1b      	ldrb	r3, [r3, #16]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d109      	bne.n	800aeba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aeac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aeb0:	2101      	movs	r1, #1
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f001 fd74 	bl	800c9a0 <USBD_LL_PrepareReceive>
 800aeb8:	e007      	b.n	800aeca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aec0:	2340      	movs	r3, #64	@ 0x40
 800aec2:	2101      	movs	r1, #1
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f001 fd6b 	bl	800c9a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aeca:	2300      	movs	r3, #0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b086      	sub	sp, #24
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	4613      	mov	r3, r2
 800aee0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d101      	bne.n	800aeec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800aee8:	2303      	movs	r3, #3
 800aeea:	e01f      	b.n	800af2c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2200      	movs	r2, #0
 800aef0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2200      	movs	r2, #0
 800aef8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2200      	movs	r2, #0
 800af00:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d003      	beq.n	800af12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	68ba      	ldr	r2, [r7, #8]
 800af0e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2201      	movs	r2, #1
 800af16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	79fa      	ldrb	r2, [r7, #7]
 800af1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800af20:	68f8      	ldr	r0, [r7, #12]
 800af22:	f001 fbd3 	bl	800c6cc <USBD_LL_Init>
 800af26:	4603      	mov	r3, r0
 800af28:	75fb      	strb	r3, [r7, #23]

  return ret;
 800af2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3718      	adds	r7, #24
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af3e:	2300      	movs	r3, #0
 800af40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d101      	bne.n	800af4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800af48:	2303      	movs	r3, #3
 800af4a:	e016      	b.n	800af7a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	683a      	ldr	r2, [r7, #0]
 800af50:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00b      	beq.n	800af78 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af68:	f107 020e 	add.w	r2, r7, #14
 800af6c:	4610      	mov	r0, r2
 800af6e:	4798      	blx	r3
 800af70:	4602      	mov	r2, r0
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3710      	adds	r7, #16
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b082      	sub	sp, #8
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f001 fbfe 	bl	800c78c <USBD_LL_Start>
 800af90:	4603      	mov	r3, r0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800af9a:	b480      	push	{r7}
 800af9c:	b083      	sub	sp, #12
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800afa2:	2300      	movs	r3, #0
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	370c      	adds	r7, #12
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr

0800afb0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	460b      	mov	r3, r1
 800afba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800afbc:	2303      	movs	r3, #3
 800afbe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d009      	beq.n	800afde <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	78fa      	ldrb	r2, [r7, #3]
 800afd4:	4611      	mov	r1, r2
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	4798      	blx	r3
 800afda:	4603      	mov	r3, r0
 800afdc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800afde:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3710      	adds	r7, #16
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	460b      	mov	r3, r1
 800aff2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800affa:	2b00      	cmp	r3, #0
 800affc:	d007      	beq.n	800b00e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	78fa      	ldrb	r2, [r7, #3]
 800b008:	4611      	mov	r1, r2
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	4798      	blx	r3
  }

  return USBD_OK;
 800b00e:	2300      	movs	r3, #0
}
 800b010:	4618      	mov	r0, r3
 800b012:	3708      	adds	r7, #8
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b084      	sub	sp, #16
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b028:	6839      	ldr	r1, [r7, #0]
 800b02a:	4618      	mov	r0, r3
 800b02c:	f000 ff48 	bl	800bec0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2201      	movs	r2, #1
 800b034:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b03e:	461a      	mov	r2, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b04c:	f003 031f 	and.w	r3, r3, #31
 800b050:	2b02      	cmp	r3, #2
 800b052:	d01a      	beq.n	800b08a <USBD_LL_SetupStage+0x72>
 800b054:	2b02      	cmp	r3, #2
 800b056:	d822      	bhi.n	800b09e <USBD_LL_SetupStage+0x86>
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d002      	beq.n	800b062 <USBD_LL_SetupStage+0x4a>
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d00a      	beq.n	800b076 <USBD_LL_SetupStage+0x5e>
 800b060:	e01d      	b.n	800b09e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b068:	4619      	mov	r1, r3
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 f9f0 	bl	800b450 <USBD_StdDevReq>
 800b070:	4603      	mov	r3, r0
 800b072:	73fb      	strb	r3, [r7, #15]
      break;
 800b074:	e020      	b.n	800b0b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b07c:	4619      	mov	r1, r3
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 fa54 	bl	800b52c <USBD_StdItfReq>
 800b084:	4603      	mov	r3, r0
 800b086:	73fb      	strb	r3, [r7, #15]
      break;
 800b088:	e016      	b.n	800b0b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b090:	4619      	mov	r1, r3
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 fa93 	bl	800b5be <USBD_StdEPReq>
 800b098:	4603      	mov	r3, r0
 800b09a:	73fb      	strb	r3, [r7, #15]
      break;
 800b09c:	e00c      	b.n	800b0b8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b0a4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f001 fbcd 	bl	800c84c <USBD_LL_StallEP>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	73fb      	strb	r3, [r7, #15]
      break;
 800b0b6:	bf00      	nop
  }

  return ret;
 800b0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b0c2:	b580      	push	{r7, lr}
 800b0c4:	b086      	sub	sp, #24
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	60f8      	str	r0, [r7, #12]
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	607a      	str	r2, [r7, #4]
 800b0ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b0d0:	7afb      	ldrb	r3, [r7, #11]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d138      	bne.n	800b148 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b0dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b0e4:	2b03      	cmp	r3, #3
 800b0e6:	d14a      	bne.n	800b17e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	689a      	ldr	r2, [r3, #8]
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	68db      	ldr	r3, [r3, #12]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d913      	bls.n	800b11c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	689a      	ldr	r2, [r3, #8]
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	68db      	ldr	r3, [r3, #12]
 800b0fc:	1ad2      	subs	r2, r2, r3
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	68da      	ldr	r2, [r3, #12]
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	689b      	ldr	r3, [r3, #8]
 800b10a:	4293      	cmp	r3, r2
 800b10c:	bf28      	it	cs
 800b10e:	4613      	movcs	r3, r2
 800b110:	461a      	mov	r2, r3
 800b112:	6879      	ldr	r1, [r7, #4]
 800b114:	68f8      	ldr	r0, [r7, #12]
 800b116:	f000 ffc7 	bl	800c0a8 <USBD_CtlContinueRx>
 800b11a:	e030      	b.n	800b17e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b122:	b2db      	uxtb	r3, r3
 800b124:	2b03      	cmp	r3, #3
 800b126:	d10b      	bne.n	800b140 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b12e:	691b      	ldr	r3, [r3, #16]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d005      	beq.n	800b140 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b13a:	691b      	ldr	r3, [r3, #16]
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b140:	68f8      	ldr	r0, [r7, #12]
 800b142:	f000 ffc2 	bl	800c0ca <USBD_CtlSendStatus>
 800b146:	e01a      	b.n	800b17e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	2b03      	cmp	r3, #3
 800b152:	d114      	bne.n	800b17e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b15a:	699b      	ldr	r3, [r3, #24]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00e      	beq.n	800b17e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b166:	699b      	ldr	r3, [r3, #24]
 800b168:	7afa      	ldrb	r2, [r7, #11]
 800b16a:	4611      	mov	r1, r2
 800b16c:	68f8      	ldr	r0, [r7, #12]
 800b16e:	4798      	blx	r3
 800b170:	4603      	mov	r3, r0
 800b172:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b174:	7dfb      	ldrb	r3, [r7, #23]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d001      	beq.n	800b17e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b17a:	7dfb      	ldrb	r3, [r7, #23]
 800b17c:	e000      	b.n	800b180 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b17e:	2300      	movs	r3, #0
}
 800b180:	4618      	mov	r0, r3
 800b182:	3718      	adds	r7, #24
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b086      	sub	sp, #24
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	460b      	mov	r3, r1
 800b192:	607a      	str	r2, [r7, #4]
 800b194:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b196:	7afb      	ldrb	r3, [r7, #11]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d16b      	bne.n	800b274 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	3314      	adds	r3, #20
 800b1a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b1a8:	2b02      	cmp	r3, #2
 800b1aa:	d156      	bne.n	800b25a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	689a      	ldr	r2, [r3, #8]
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d914      	bls.n	800b1e2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	689a      	ldr	r2, [r3, #8]
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	1ad2      	subs	r2, r2, r3
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	689b      	ldr	r3, [r3, #8]
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	6879      	ldr	r1, [r7, #4]
 800b1ce:	68f8      	ldr	r0, [r7, #12]
 800b1d0:	f000 ff3c 	bl	800c04c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	2100      	movs	r1, #0
 800b1da:	68f8      	ldr	r0, [r7, #12]
 800b1dc:	f001 fbe0 	bl	800c9a0 <USBD_LL_PrepareReceive>
 800b1e0:	e03b      	b.n	800b25a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	68da      	ldr	r2, [r3, #12]
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	689b      	ldr	r3, [r3, #8]
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d11c      	bne.n	800b228 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	685a      	ldr	r2, [r3, #4]
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d316      	bcc.n	800b228 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	685a      	ldr	r2, [r3, #4]
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b204:	429a      	cmp	r2, r3
 800b206:	d20f      	bcs.n	800b228 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b208:	2200      	movs	r2, #0
 800b20a:	2100      	movs	r1, #0
 800b20c:	68f8      	ldr	r0, [r7, #12]
 800b20e:	f000 ff1d 	bl	800c04c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2200      	movs	r2, #0
 800b216:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b21a:	2300      	movs	r3, #0
 800b21c:	2200      	movs	r2, #0
 800b21e:	2100      	movs	r1, #0
 800b220:	68f8      	ldr	r0, [r7, #12]
 800b222:	f001 fbbd 	bl	800c9a0 <USBD_LL_PrepareReceive>
 800b226:	e018      	b.n	800b25a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	2b03      	cmp	r3, #3
 800b232:	d10b      	bne.n	800b24c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d005      	beq.n	800b24c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b246:	68db      	ldr	r3, [r3, #12]
 800b248:	68f8      	ldr	r0, [r7, #12]
 800b24a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b24c:	2180      	movs	r1, #128	@ 0x80
 800b24e:	68f8      	ldr	r0, [r7, #12]
 800b250:	f001 fafc 	bl	800c84c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b254:	68f8      	ldr	r0, [r7, #12]
 800b256:	f000 ff4b 	bl	800c0f0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b260:	2b01      	cmp	r3, #1
 800b262:	d122      	bne.n	800b2aa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	f7ff fe98 	bl	800af9a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2200      	movs	r2, #0
 800b26e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b272:	e01a      	b.n	800b2aa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b27a:	b2db      	uxtb	r3, r3
 800b27c:	2b03      	cmp	r3, #3
 800b27e:	d114      	bne.n	800b2aa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b286:	695b      	ldr	r3, [r3, #20]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d00e      	beq.n	800b2aa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b292:	695b      	ldr	r3, [r3, #20]
 800b294:	7afa      	ldrb	r2, [r7, #11]
 800b296:	4611      	mov	r1, r2
 800b298:	68f8      	ldr	r0, [r7, #12]
 800b29a:	4798      	blx	r3
 800b29c:	4603      	mov	r3, r0
 800b29e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b2a0:	7dfb      	ldrb	r3, [r7, #23]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d001      	beq.n	800b2aa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b2a6:	7dfb      	ldrb	r3, [r7, #23]
 800b2a8:	e000      	b.n	800b2ac <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b2aa:	2300      	movs	r3, #0
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3718      	adds	r7, #24
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d101      	bne.n	800b2e8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b2e4:	2303      	movs	r3, #3
 800b2e6:	e02f      	b.n	800b348 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d00f      	beq.n	800b312 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d009      	beq.n	800b312 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	6852      	ldr	r2, [r2, #4]
 800b30a:	b2d2      	uxtb	r2, r2
 800b30c:	4611      	mov	r1, r2
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b312:	2340      	movs	r3, #64	@ 0x40
 800b314:	2200      	movs	r2, #0
 800b316:	2100      	movs	r1, #0
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f001 fa52 	bl	800c7c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2201      	movs	r2, #1
 800b322:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2240      	movs	r2, #64	@ 0x40
 800b32a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b32e:	2340      	movs	r3, #64	@ 0x40
 800b330:	2200      	movs	r2, #0
 800b332:	2180      	movs	r1, #128	@ 0x80
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f001 fa44 	bl	800c7c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2201      	movs	r2, #1
 800b33e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2240      	movs	r2, #64	@ 0x40
 800b344:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3708      	adds	r7, #8
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	460b      	mov	r3, r1
 800b35a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	78fa      	ldrb	r2, [r7, #3]
 800b360:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b362:	2300      	movs	r3, #0
}
 800b364:	4618      	mov	r0, r3
 800b366:	370c      	adds	r7, #12
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b37e:	b2da      	uxtb	r2, r3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2204      	movs	r2, #4
 800b38a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b38e:	2300      	movs	r3, #0
}
 800b390:	4618      	mov	r0, r3
 800b392:	370c      	adds	r7, #12
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr

0800b39c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b083      	sub	sp, #12
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	2b04      	cmp	r3, #4
 800b3ae:	d106      	bne.n	800b3be <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b3b6:	b2da      	uxtb	r2, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b3be:	2300      	movs	r3, #0
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	370c      	adds	r7, #12
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr

0800b3cc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b082      	sub	sp, #8
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d101      	bne.n	800b3e2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b3de:	2303      	movs	r3, #3
 800b3e0:	e012      	b.n	800b408 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3e8:	b2db      	uxtb	r3, r3
 800b3ea:	2b03      	cmp	r3, #3
 800b3ec:	d10b      	bne.n	800b406 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3f4:	69db      	ldr	r3, [r3, #28]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d005      	beq.n	800b406 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b400:	69db      	ldr	r3, [r3, #28]
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b406:	2300      	movs	r3, #0
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3708      	adds	r7, #8
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}

0800b410 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b410:	b480      	push	{r7}
 800b412:	b087      	sub	sp, #28
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	3301      	adds	r3, #1
 800b426:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b42e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b432:	021b      	lsls	r3, r3, #8
 800b434:	b21a      	sxth	r2, r3
 800b436:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b43a:	4313      	orrs	r3, r2
 800b43c:	b21b      	sxth	r3, r3
 800b43e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b440:	89fb      	ldrh	r3, [r7, #14]
}
 800b442:	4618      	mov	r0, r3
 800b444:	371c      	adds	r7, #28
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr
	...

0800b450 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b084      	sub	sp, #16
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b45a:	2300      	movs	r3, #0
 800b45c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	781b      	ldrb	r3, [r3, #0]
 800b462:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b466:	2b40      	cmp	r3, #64	@ 0x40
 800b468:	d005      	beq.n	800b476 <USBD_StdDevReq+0x26>
 800b46a:	2b40      	cmp	r3, #64	@ 0x40
 800b46c:	d853      	bhi.n	800b516 <USBD_StdDevReq+0xc6>
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d00b      	beq.n	800b48a <USBD_StdDevReq+0x3a>
 800b472:	2b20      	cmp	r3, #32
 800b474:	d14f      	bne.n	800b516 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	6839      	ldr	r1, [r7, #0]
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	4798      	blx	r3
 800b484:	4603      	mov	r3, r0
 800b486:	73fb      	strb	r3, [r7, #15]
      break;
 800b488:	e04a      	b.n	800b520 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	785b      	ldrb	r3, [r3, #1]
 800b48e:	2b09      	cmp	r3, #9
 800b490:	d83b      	bhi.n	800b50a <USBD_StdDevReq+0xba>
 800b492:	a201      	add	r2, pc, #4	@ (adr r2, 800b498 <USBD_StdDevReq+0x48>)
 800b494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b498:	0800b4ed 	.word	0x0800b4ed
 800b49c:	0800b501 	.word	0x0800b501
 800b4a0:	0800b50b 	.word	0x0800b50b
 800b4a4:	0800b4f7 	.word	0x0800b4f7
 800b4a8:	0800b50b 	.word	0x0800b50b
 800b4ac:	0800b4cb 	.word	0x0800b4cb
 800b4b0:	0800b4c1 	.word	0x0800b4c1
 800b4b4:	0800b50b 	.word	0x0800b50b
 800b4b8:	0800b4e3 	.word	0x0800b4e3
 800b4bc:	0800b4d5 	.word	0x0800b4d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b4c0:	6839      	ldr	r1, [r7, #0]
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 f9de 	bl	800b884 <USBD_GetDescriptor>
          break;
 800b4c8:	e024      	b.n	800b514 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b4ca:	6839      	ldr	r1, [r7, #0]
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 fb6d 	bl	800bbac <USBD_SetAddress>
          break;
 800b4d2:	e01f      	b.n	800b514 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b4d4:	6839      	ldr	r1, [r7, #0]
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 fbac 	bl	800bc34 <USBD_SetConfig>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	73fb      	strb	r3, [r7, #15]
          break;
 800b4e0:	e018      	b.n	800b514 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b4e2:	6839      	ldr	r1, [r7, #0]
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 fc4b 	bl	800bd80 <USBD_GetConfig>
          break;
 800b4ea:	e013      	b.n	800b514 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b4ec:	6839      	ldr	r1, [r7, #0]
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 fc7c 	bl	800bdec <USBD_GetStatus>
          break;
 800b4f4:	e00e      	b.n	800b514 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b4f6:	6839      	ldr	r1, [r7, #0]
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f000 fcab 	bl	800be54 <USBD_SetFeature>
          break;
 800b4fe:	e009      	b.n	800b514 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b500:	6839      	ldr	r1, [r7, #0]
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 fcba 	bl	800be7c <USBD_ClrFeature>
          break;
 800b508:	e004      	b.n	800b514 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b50a:	6839      	ldr	r1, [r7, #0]
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f000 fd11 	bl	800bf34 <USBD_CtlError>
          break;
 800b512:	bf00      	nop
      }
      break;
 800b514:	e004      	b.n	800b520 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b516:	6839      	ldr	r1, [r7, #0]
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f000 fd0b 	bl	800bf34 <USBD_CtlError>
      break;
 800b51e:	bf00      	nop
  }

  return ret;
 800b520:	7bfb      	ldrb	r3, [r7, #15]
}
 800b522:	4618      	mov	r0, r3
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop

0800b52c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b536:	2300      	movs	r3, #0
 800b538:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b542:	2b40      	cmp	r3, #64	@ 0x40
 800b544:	d005      	beq.n	800b552 <USBD_StdItfReq+0x26>
 800b546:	2b40      	cmp	r3, #64	@ 0x40
 800b548:	d82f      	bhi.n	800b5aa <USBD_StdItfReq+0x7e>
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d001      	beq.n	800b552 <USBD_StdItfReq+0x26>
 800b54e:	2b20      	cmp	r3, #32
 800b550:	d12b      	bne.n	800b5aa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	3b01      	subs	r3, #1
 800b55c:	2b02      	cmp	r3, #2
 800b55e:	d81d      	bhi.n	800b59c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	889b      	ldrh	r3, [r3, #4]
 800b564:	b2db      	uxtb	r3, r3
 800b566:	2b01      	cmp	r3, #1
 800b568:	d813      	bhi.n	800b592 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b570:	689b      	ldr	r3, [r3, #8]
 800b572:	6839      	ldr	r1, [r7, #0]
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	4798      	blx	r3
 800b578:	4603      	mov	r3, r0
 800b57a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	88db      	ldrh	r3, [r3, #6]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d110      	bne.n	800b5a6 <USBD_StdItfReq+0x7a>
 800b584:	7bfb      	ldrb	r3, [r7, #15]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d10d      	bne.n	800b5a6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 fd9d 	bl	800c0ca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b590:	e009      	b.n	800b5a6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b592:	6839      	ldr	r1, [r7, #0]
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 fccd 	bl	800bf34 <USBD_CtlError>
          break;
 800b59a:	e004      	b.n	800b5a6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b59c:	6839      	ldr	r1, [r7, #0]
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 fcc8 	bl	800bf34 <USBD_CtlError>
          break;
 800b5a4:	e000      	b.n	800b5a8 <USBD_StdItfReq+0x7c>
          break;
 800b5a6:	bf00      	nop
      }
      break;
 800b5a8:	e004      	b.n	800b5b4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b5aa:	6839      	ldr	r1, [r7, #0]
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 fcc1 	bl	800bf34 <USBD_CtlError>
      break;
 800b5b2:	bf00      	nop
  }

  return ret;
 800b5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3710      	adds	r7, #16
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b084      	sub	sp, #16
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
 800b5c6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	889b      	ldrh	r3, [r3, #4]
 800b5d0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b5da:	2b40      	cmp	r3, #64	@ 0x40
 800b5dc:	d007      	beq.n	800b5ee <USBD_StdEPReq+0x30>
 800b5de:	2b40      	cmp	r3, #64	@ 0x40
 800b5e0:	f200 8145 	bhi.w	800b86e <USBD_StdEPReq+0x2b0>
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d00c      	beq.n	800b602 <USBD_StdEPReq+0x44>
 800b5e8:	2b20      	cmp	r3, #32
 800b5ea:	f040 8140 	bne.w	800b86e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5f4:	689b      	ldr	r3, [r3, #8]
 800b5f6:	6839      	ldr	r1, [r7, #0]
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	4798      	blx	r3
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	73fb      	strb	r3, [r7, #15]
      break;
 800b600:	e13a      	b.n	800b878 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	785b      	ldrb	r3, [r3, #1]
 800b606:	2b03      	cmp	r3, #3
 800b608:	d007      	beq.n	800b61a <USBD_StdEPReq+0x5c>
 800b60a:	2b03      	cmp	r3, #3
 800b60c:	f300 8129 	bgt.w	800b862 <USBD_StdEPReq+0x2a4>
 800b610:	2b00      	cmp	r3, #0
 800b612:	d07f      	beq.n	800b714 <USBD_StdEPReq+0x156>
 800b614:	2b01      	cmp	r3, #1
 800b616:	d03c      	beq.n	800b692 <USBD_StdEPReq+0xd4>
 800b618:	e123      	b.n	800b862 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b620:	b2db      	uxtb	r3, r3
 800b622:	2b02      	cmp	r3, #2
 800b624:	d002      	beq.n	800b62c <USBD_StdEPReq+0x6e>
 800b626:	2b03      	cmp	r3, #3
 800b628:	d016      	beq.n	800b658 <USBD_StdEPReq+0x9a>
 800b62a:	e02c      	b.n	800b686 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b62c:	7bbb      	ldrb	r3, [r7, #14]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d00d      	beq.n	800b64e <USBD_StdEPReq+0x90>
 800b632:	7bbb      	ldrb	r3, [r7, #14]
 800b634:	2b80      	cmp	r3, #128	@ 0x80
 800b636:	d00a      	beq.n	800b64e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b638:	7bbb      	ldrb	r3, [r7, #14]
 800b63a:	4619      	mov	r1, r3
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f001 f905 	bl	800c84c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b642:	2180      	movs	r1, #128	@ 0x80
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f001 f901 	bl	800c84c <USBD_LL_StallEP>
 800b64a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b64c:	e020      	b.n	800b690 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b64e:	6839      	ldr	r1, [r7, #0]
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 fc6f 	bl	800bf34 <USBD_CtlError>
              break;
 800b656:	e01b      	b.n	800b690 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	885b      	ldrh	r3, [r3, #2]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d10e      	bne.n	800b67e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b660:	7bbb      	ldrb	r3, [r7, #14]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d00b      	beq.n	800b67e <USBD_StdEPReq+0xc0>
 800b666:	7bbb      	ldrb	r3, [r7, #14]
 800b668:	2b80      	cmp	r3, #128	@ 0x80
 800b66a:	d008      	beq.n	800b67e <USBD_StdEPReq+0xc0>
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	88db      	ldrh	r3, [r3, #6]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d104      	bne.n	800b67e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b674:	7bbb      	ldrb	r3, [r7, #14]
 800b676:	4619      	mov	r1, r3
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f001 f8e7 	bl	800c84c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f000 fd23 	bl	800c0ca <USBD_CtlSendStatus>

              break;
 800b684:	e004      	b.n	800b690 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b686:	6839      	ldr	r1, [r7, #0]
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 fc53 	bl	800bf34 <USBD_CtlError>
              break;
 800b68e:	bf00      	nop
          }
          break;
 800b690:	e0ec      	b.n	800b86c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	2b02      	cmp	r3, #2
 800b69c:	d002      	beq.n	800b6a4 <USBD_StdEPReq+0xe6>
 800b69e:	2b03      	cmp	r3, #3
 800b6a0:	d016      	beq.n	800b6d0 <USBD_StdEPReq+0x112>
 800b6a2:	e030      	b.n	800b706 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b6a4:	7bbb      	ldrb	r3, [r7, #14]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d00d      	beq.n	800b6c6 <USBD_StdEPReq+0x108>
 800b6aa:	7bbb      	ldrb	r3, [r7, #14]
 800b6ac:	2b80      	cmp	r3, #128	@ 0x80
 800b6ae:	d00a      	beq.n	800b6c6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b6b0:	7bbb      	ldrb	r3, [r7, #14]
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f001 f8c9 	bl	800c84c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b6ba:	2180      	movs	r1, #128	@ 0x80
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f001 f8c5 	bl	800c84c <USBD_LL_StallEP>
 800b6c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b6c4:	e025      	b.n	800b712 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b6c6:	6839      	ldr	r1, [r7, #0]
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 fc33 	bl	800bf34 <USBD_CtlError>
              break;
 800b6ce:	e020      	b.n	800b712 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	885b      	ldrh	r3, [r3, #2]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d11b      	bne.n	800b710 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b6d8:	7bbb      	ldrb	r3, [r7, #14]
 800b6da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d004      	beq.n	800b6ec <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b6e2:	7bbb      	ldrb	r3, [r7, #14]
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f001 f8cf 	bl	800c88a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 fcec 	bl	800c0ca <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6f8:	689b      	ldr	r3, [r3, #8]
 800b6fa:	6839      	ldr	r1, [r7, #0]
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	4798      	blx	r3
 800b700:	4603      	mov	r3, r0
 800b702:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b704:	e004      	b.n	800b710 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b706:	6839      	ldr	r1, [r7, #0]
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 fc13 	bl	800bf34 <USBD_CtlError>
              break;
 800b70e:	e000      	b.n	800b712 <USBD_StdEPReq+0x154>
              break;
 800b710:	bf00      	nop
          }
          break;
 800b712:	e0ab      	b.n	800b86c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b71a:	b2db      	uxtb	r3, r3
 800b71c:	2b02      	cmp	r3, #2
 800b71e:	d002      	beq.n	800b726 <USBD_StdEPReq+0x168>
 800b720:	2b03      	cmp	r3, #3
 800b722:	d032      	beq.n	800b78a <USBD_StdEPReq+0x1cc>
 800b724:	e097      	b.n	800b856 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b726:	7bbb      	ldrb	r3, [r7, #14]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d007      	beq.n	800b73c <USBD_StdEPReq+0x17e>
 800b72c:	7bbb      	ldrb	r3, [r7, #14]
 800b72e:	2b80      	cmp	r3, #128	@ 0x80
 800b730:	d004      	beq.n	800b73c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b732:	6839      	ldr	r1, [r7, #0]
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f000 fbfd 	bl	800bf34 <USBD_CtlError>
                break;
 800b73a:	e091      	b.n	800b860 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b73c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b740:	2b00      	cmp	r3, #0
 800b742:	da0b      	bge.n	800b75c <USBD_StdEPReq+0x19e>
 800b744:	7bbb      	ldrb	r3, [r7, #14]
 800b746:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b74a:	4613      	mov	r3, r2
 800b74c:	009b      	lsls	r3, r3, #2
 800b74e:	4413      	add	r3, r2
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	3310      	adds	r3, #16
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	4413      	add	r3, r2
 800b758:	3304      	adds	r3, #4
 800b75a:	e00b      	b.n	800b774 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b75c:	7bbb      	ldrb	r3, [r7, #14]
 800b75e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b762:	4613      	mov	r3, r2
 800b764:	009b      	lsls	r3, r3, #2
 800b766:	4413      	add	r3, r2
 800b768:	009b      	lsls	r3, r3, #2
 800b76a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	4413      	add	r3, r2
 800b772:	3304      	adds	r3, #4
 800b774:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	2200      	movs	r2, #0
 800b77a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	2202      	movs	r2, #2
 800b780:	4619      	mov	r1, r3
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 fc47 	bl	800c016 <USBD_CtlSendData>
              break;
 800b788:	e06a      	b.n	800b860 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b78a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	da11      	bge.n	800b7b6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b792:	7bbb      	ldrb	r3, [r7, #14]
 800b794:	f003 020f 	and.w	r2, r3, #15
 800b798:	6879      	ldr	r1, [r7, #4]
 800b79a:	4613      	mov	r3, r2
 800b79c:	009b      	lsls	r3, r3, #2
 800b79e:	4413      	add	r3, r2
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	440b      	add	r3, r1
 800b7a4:	3324      	adds	r3, #36	@ 0x24
 800b7a6:	881b      	ldrh	r3, [r3, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d117      	bne.n	800b7dc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b7ac:	6839      	ldr	r1, [r7, #0]
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 fbc0 	bl	800bf34 <USBD_CtlError>
                  break;
 800b7b4:	e054      	b.n	800b860 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b7b6:	7bbb      	ldrb	r3, [r7, #14]
 800b7b8:	f003 020f 	and.w	r2, r3, #15
 800b7bc:	6879      	ldr	r1, [r7, #4]
 800b7be:	4613      	mov	r3, r2
 800b7c0:	009b      	lsls	r3, r3, #2
 800b7c2:	4413      	add	r3, r2
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	440b      	add	r3, r1
 800b7c8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b7cc:	881b      	ldrh	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d104      	bne.n	800b7dc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b7d2:	6839      	ldr	r1, [r7, #0]
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 fbad 	bl	800bf34 <USBD_CtlError>
                  break;
 800b7da:	e041      	b.n	800b860 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b7dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	da0b      	bge.n	800b7fc <USBD_StdEPReq+0x23e>
 800b7e4:	7bbb      	ldrb	r3, [r7, #14]
 800b7e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b7ea:	4613      	mov	r3, r2
 800b7ec:	009b      	lsls	r3, r3, #2
 800b7ee:	4413      	add	r3, r2
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	3310      	adds	r3, #16
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	3304      	adds	r3, #4
 800b7fa:	e00b      	b.n	800b814 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b7fc:	7bbb      	ldrb	r3, [r7, #14]
 800b7fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b802:	4613      	mov	r3, r2
 800b804:	009b      	lsls	r3, r3, #2
 800b806:	4413      	add	r3, r2
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	4413      	add	r3, r2
 800b812:	3304      	adds	r3, #4
 800b814:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b816:	7bbb      	ldrb	r3, [r7, #14]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d002      	beq.n	800b822 <USBD_StdEPReq+0x264>
 800b81c:	7bbb      	ldrb	r3, [r7, #14]
 800b81e:	2b80      	cmp	r3, #128	@ 0x80
 800b820:	d103      	bne.n	800b82a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	2200      	movs	r2, #0
 800b826:	601a      	str	r2, [r3, #0]
 800b828:	e00e      	b.n	800b848 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b82a:	7bbb      	ldrb	r3, [r7, #14]
 800b82c:	4619      	mov	r1, r3
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f001 f84a 	bl	800c8c8 <USBD_LL_IsStallEP>
 800b834:	4603      	mov	r3, r0
 800b836:	2b00      	cmp	r3, #0
 800b838:	d003      	beq.n	800b842 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	2201      	movs	r2, #1
 800b83e:	601a      	str	r2, [r3, #0]
 800b840:	e002      	b.n	800b848 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	2200      	movs	r2, #0
 800b846:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	2202      	movs	r2, #2
 800b84c:	4619      	mov	r1, r3
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 fbe1 	bl	800c016 <USBD_CtlSendData>
              break;
 800b854:	e004      	b.n	800b860 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b856:	6839      	ldr	r1, [r7, #0]
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f000 fb6b 	bl	800bf34 <USBD_CtlError>
              break;
 800b85e:	bf00      	nop
          }
          break;
 800b860:	e004      	b.n	800b86c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b862:	6839      	ldr	r1, [r7, #0]
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 fb65 	bl	800bf34 <USBD_CtlError>
          break;
 800b86a:	bf00      	nop
      }
      break;
 800b86c:	e004      	b.n	800b878 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b86e:	6839      	ldr	r1, [r7, #0]
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f000 fb5f 	bl	800bf34 <USBD_CtlError>
      break;
 800b876:	bf00      	nop
  }

  return ret;
 800b878:	7bfb      	ldrb	r3, [r7, #15]
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3710      	adds	r7, #16
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
	...

0800b884 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b88e:	2300      	movs	r3, #0
 800b890:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b892:	2300      	movs	r3, #0
 800b894:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b896:	2300      	movs	r3, #0
 800b898:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	885b      	ldrh	r3, [r3, #2]
 800b89e:	0a1b      	lsrs	r3, r3, #8
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	3b01      	subs	r3, #1
 800b8a4:	2b0e      	cmp	r3, #14
 800b8a6:	f200 8152 	bhi.w	800bb4e <USBD_GetDescriptor+0x2ca>
 800b8aa:	a201      	add	r2, pc, #4	@ (adr r2, 800b8b0 <USBD_GetDescriptor+0x2c>)
 800b8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8b0:	0800b921 	.word	0x0800b921
 800b8b4:	0800b939 	.word	0x0800b939
 800b8b8:	0800b979 	.word	0x0800b979
 800b8bc:	0800bb4f 	.word	0x0800bb4f
 800b8c0:	0800bb4f 	.word	0x0800bb4f
 800b8c4:	0800baef 	.word	0x0800baef
 800b8c8:	0800bb1b 	.word	0x0800bb1b
 800b8cc:	0800bb4f 	.word	0x0800bb4f
 800b8d0:	0800bb4f 	.word	0x0800bb4f
 800b8d4:	0800bb4f 	.word	0x0800bb4f
 800b8d8:	0800bb4f 	.word	0x0800bb4f
 800b8dc:	0800bb4f 	.word	0x0800bb4f
 800b8e0:	0800bb4f 	.word	0x0800bb4f
 800b8e4:	0800bb4f 	.word	0x0800bb4f
 800b8e8:	0800b8ed 	.word	0x0800b8ed
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8f2:	69db      	ldr	r3, [r3, #28]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d00b      	beq.n	800b910 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8fe:	69db      	ldr	r3, [r3, #28]
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	7c12      	ldrb	r2, [r2, #16]
 800b904:	f107 0108 	add.w	r1, r7, #8
 800b908:	4610      	mov	r0, r2
 800b90a:	4798      	blx	r3
 800b90c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b90e:	e126      	b.n	800bb5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b910:	6839      	ldr	r1, [r7, #0]
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 fb0e 	bl	800bf34 <USBD_CtlError>
        err++;
 800b918:	7afb      	ldrb	r3, [r7, #11]
 800b91a:	3301      	adds	r3, #1
 800b91c:	72fb      	strb	r3, [r7, #11]
      break;
 800b91e:	e11e      	b.n	800bb5e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	7c12      	ldrb	r2, [r2, #16]
 800b92c:	f107 0108 	add.w	r1, r7, #8
 800b930:	4610      	mov	r0, r2
 800b932:	4798      	blx	r3
 800b934:	60f8      	str	r0, [r7, #12]
      break;
 800b936:	e112      	b.n	800bb5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	7c1b      	ldrb	r3, [r3, #16]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d10d      	bne.n	800b95c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b948:	f107 0208 	add.w	r2, r7, #8
 800b94c:	4610      	mov	r0, r2
 800b94e:	4798      	blx	r3
 800b950:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	3301      	adds	r3, #1
 800b956:	2202      	movs	r2, #2
 800b958:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b95a:	e100      	b.n	800bb5e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b964:	f107 0208 	add.w	r2, r7, #8
 800b968:	4610      	mov	r0, r2
 800b96a:	4798      	blx	r3
 800b96c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	3301      	adds	r3, #1
 800b972:	2202      	movs	r2, #2
 800b974:	701a      	strb	r2, [r3, #0]
      break;
 800b976:	e0f2      	b.n	800bb5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	885b      	ldrh	r3, [r3, #2]
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	2b05      	cmp	r3, #5
 800b980:	f200 80ac 	bhi.w	800badc <USBD_GetDescriptor+0x258>
 800b984:	a201      	add	r2, pc, #4	@ (adr r2, 800b98c <USBD_GetDescriptor+0x108>)
 800b986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b98a:	bf00      	nop
 800b98c:	0800b9a5 	.word	0x0800b9a5
 800b990:	0800b9d9 	.word	0x0800b9d9
 800b994:	0800ba0d 	.word	0x0800ba0d
 800b998:	0800ba41 	.word	0x0800ba41
 800b99c:	0800ba75 	.word	0x0800ba75
 800b9a0:	0800baa9 	.word	0x0800baa9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d00b      	beq.n	800b9c8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	687a      	ldr	r2, [r7, #4]
 800b9ba:	7c12      	ldrb	r2, [r2, #16]
 800b9bc:	f107 0108 	add.w	r1, r7, #8
 800b9c0:	4610      	mov	r0, r2
 800b9c2:	4798      	blx	r3
 800b9c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9c6:	e091      	b.n	800baec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b9c8:	6839      	ldr	r1, [r7, #0]
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 fab2 	bl	800bf34 <USBD_CtlError>
            err++;
 800b9d0:	7afb      	ldrb	r3, [r7, #11]
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	72fb      	strb	r3, [r7, #11]
          break;
 800b9d6:	e089      	b.n	800baec <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9de:	689b      	ldr	r3, [r3, #8]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d00b      	beq.n	800b9fc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9ea:	689b      	ldr	r3, [r3, #8]
 800b9ec:	687a      	ldr	r2, [r7, #4]
 800b9ee:	7c12      	ldrb	r2, [r2, #16]
 800b9f0:	f107 0108 	add.w	r1, r7, #8
 800b9f4:	4610      	mov	r0, r2
 800b9f6:	4798      	blx	r3
 800b9f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9fa:	e077      	b.n	800baec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b9fc:	6839      	ldr	r1, [r7, #0]
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 fa98 	bl	800bf34 <USBD_CtlError>
            err++;
 800ba04:	7afb      	ldrb	r3, [r7, #11]
 800ba06:	3301      	adds	r3, #1
 800ba08:	72fb      	strb	r3, [r7, #11]
          break;
 800ba0a:	e06f      	b.n	800baec <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d00b      	beq.n	800ba30 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba1e:	68db      	ldr	r3, [r3, #12]
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	7c12      	ldrb	r2, [r2, #16]
 800ba24:	f107 0108 	add.w	r1, r7, #8
 800ba28:	4610      	mov	r0, r2
 800ba2a:	4798      	blx	r3
 800ba2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba2e:	e05d      	b.n	800baec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ba30:	6839      	ldr	r1, [r7, #0]
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 fa7e 	bl	800bf34 <USBD_CtlError>
            err++;
 800ba38:	7afb      	ldrb	r3, [r7, #11]
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	72fb      	strb	r3, [r7, #11]
          break;
 800ba3e:	e055      	b.n	800baec <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba46:	691b      	ldr	r3, [r3, #16]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d00b      	beq.n	800ba64 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba52:	691b      	ldr	r3, [r3, #16]
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	7c12      	ldrb	r2, [r2, #16]
 800ba58:	f107 0108 	add.w	r1, r7, #8
 800ba5c:	4610      	mov	r0, r2
 800ba5e:	4798      	blx	r3
 800ba60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba62:	e043      	b.n	800baec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ba64:	6839      	ldr	r1, [r7, #0]
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 fa64 	bl	800bf34 <USBD_CtlError>
            err++;
 800ba6c:	7afb      	ldrb	r3, [r7, #11]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	72fb      	strb	r3, [r7, #11]
          break;
 800ba72:	e03b      	b.n	800baec <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba7a:	695b      	ldr	r3, [r3, #20]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d00b      	beq.n	800ba98 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba86:	695b      	ldr	r3, [r3, #20]
 800ba88:	687a      	ldr	r2, [r7, #4]
 800ba8a:	7c12      	ldrb	r2, [r2, #16]
 800ba8c:	f107 0108 	add.w	r1, r7, #8
 800ba90:	4610      	mov	r0, r2
 800ba92:	4798      	blx	r3
 800ba94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba96:	e029      	b.n	800baec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ba98:	6839      	ldr	r1, [r7, #0]
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 fa4a 	bl	800bf34 <USBD_CtlError>
            err++;
 800baa0:	7afb      	ldrb	r3, [r7, #11]
 800baa2:	3301      	adds	r3, #1
 800baa4:	72fb      	strb	r3, [r7, #11]
          break;
 800baa6:	e021      	b.n	800baec <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800baae:	699b      	ldr	r3, [r3, #24]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d00b      	beq.n	800bacc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800baba:	699b      	ldr	r3, [r3, #24]
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	7c12      	ldrb	r2, [r2, #16]
 800bac0:	f107 0108 	add.w	r1, r7, #8
 800bac4:	4610      	mov	r0, r2
 800bac6:	4798      	blx	r3
 800bac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800baca:	e00f      	b.n	800baec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bacc:	6839      	ldr	r1, [r7, #0]
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 fa30 	bl	800bf34 <USBD_CtlError>
            err++;
 800bad4:	7afb      	ldrb	r3, [r7, #11]
 800bad6:	3301      	adds	r3, #1
 800bad8:	72fb      	strb	r3, [r7, #11]
          break;
 800bada:	e007      	b.n	800baec <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800badc:	6839      	ldr	r1, [r7, #0]
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 fa28 	bl	800bf34 <USBD_CtlError>
          err++;
 800bae4:	7afb      	ldrb	r3, [r7, #11]
 800bae6:	3301      	adds	r3, #1
 800bae8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800baea:	bf00      	nop
      }
      break;
 800baec:	e037      	b.n	800bb5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	7c1b      	ldrb	r3, [r3, #16]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d109      	bne.n	800bb0a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bafc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bafe:	f107 0208 	add.w	r2, r7, #8
 800bb02:	4610      	mov	r0, r2
 800bb04:	4798      	blx	r3
 800bb06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bb08:	e029      	b.n	800bb5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bb0a:	6839      	ldr	r1, [r7, #0]
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f000 fa11 	bl	800bf34 <USBD_CtlError>
        err++;
 800bb12:	7afb      	ldrb	r3, [r7, #11]
 800bb14:	3301      	adds	r3, #1
 800bb16:	72fb      	strb	r3, [r7, #11]
      break;
 800bb18:	e021      	b.n	800bb5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	7c1b      	ldrb	r3, [r3, #16]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d10d      	bne.n	800bb3e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb2a:	f107 0208 	add.w	r2, r7, #8
 800bb2e:	4610      	mov	r0, r2
 800bb30:	4798      	blx	r3
 800bb32:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	3301      	adds	r3, #1
 800bb38:	2207      	movs	r2, #7
 800bb3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bb3c:	e00f      	b.n	800bb5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bb3e:	6839      	ldr	r1, [r7, #0]
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f000 f9f7 	bl	800bf34 <USBD_CtlError>
        err++;
 800bb46:	7afb      	ldrb	r3, [r7, #11]
 800bb48:	3301      	adds	r3, #1
 800bb4a:	72fb      	strb	r3, [r7, #11]
      break;
 800bb4c:	e007      	b.n	800bb5e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bb4e:	6839      	ldr	r1, [r7, #0]
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 f9ef 	bl	800bf34 <USBD_CtlError>
      err++;
 800bb56:	7afb      	ldrb	r3, [r7, #11]
 800bb58:	3301      	adds	r3, #1
 800bb5a:	72fb      	strb	r3, [r7, #11]
      break;
 800bb5c:	bf00      	nop
  }

  if (err != 0U)
 800bb5e:	7afb      	ldrb	r3, [r7, #11]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d11e      	bne.n	800bba2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	88db      	ldrh	r3, [r3, #6]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d016      	beq.n	800bb9a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bb6c:	893b      	ldrh	r3, [r7, #8]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d00e      	beq.n	800bb90 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	88da      	ldrh	r2, [r3, #6]
 800bb76:	893b      	ldrh	r3, [r7, #8]
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	bf28      	it	cs
 800bb7c:	4613      	movcs	r3, r2
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bb82:	893b      	ldrh	r3, [r7, #8]
 800bb84:	461a      	mov	r2, r3
 800bb86:	68f9      	ldr	r1, [r7, #12]
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f000 fa44 	bl	800c016 <USBD_CtlSendData>
 800bb8e:	e009      	b.n	800bba4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bb90:	6839      	ldr	r1, [r7, #0]
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 f9ce 	bl	800bf34 <USBD_CtlError>
 800bb98:	e004      	b.n	800bba4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f000 fa95 	bl	800c0ca <USBD_CtlSendStatus>
 800bba0:	e000      	b.n	800bba4 <USBD_GetDescriptor+0x320>
    return;
 800bba2:	bf00      	nop
  }
}
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop

0800bbac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	889b      	ldrh	r3, [r3, #4]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d131      	bne.n	800bc22 <USBD_SetAddress+0x76>
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	88db      	ldrh	r3, [r3, #6]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d12d      	bne.n	800bc22 <USBD_SetAddress+0x76>
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	885b      	ldrh	r3, [r3, #2]
 800bbca:	2b7f      	cmp	r3, #127	@ 0x7f
 800bbcc:	d829      	bhi.n	800bc22 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	885b      	ldrh	r3, [r3, #2]
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbd8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbe0:	b2db      	uxtb	r3, r3
 800bbe2:	2b03      	cmp	r3, #3
 800bbe4:	d104      	bne.n	800bbf0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bbe6:	6839      	ldr	r1, [r7, #0]
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 f9a3 	bl	800bf34 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbee:	e01d      	b.n	800bc2c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	7bfa      	ldrb	r2, [r7, #15]
 800bbf4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bbf8:	7bfb      	ldrb	r3, [r7, #15]
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f000 fe8f 	bl	800c920 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 fa61 	bl	800c0ca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bc08:	7bfb      	ldrb	r3, [r7, #15]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d004      	beq.n	800bc18 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2202      	movs	r2, #2
 800bc12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc16:	e009      	b.n	800bc2c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc20:	e004      	b.n	800bc2c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bc22:	6839      	ldr	r1, [r7, #0]
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f000 f985 	bl	800bf34 <USBD_CtlError>
  }
}
 800bc2a:	bf00      	nop
 800bc2c:	bf00      	nop
 800bc2e:	3710      	adds	r7, #16
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}

0800bc34 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	885b      	ldrh	r3, [r3, #2]
 800bc46:	b2da      	uxtb	r2, r3
 800bc48:	4b4c      	ldr	r3, [pc, #304]	@ (800bd7c <USBD_SetConfig+0x148>)
 800bc4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bc4c:	4b4b      	ldr	r3, [pc, #300]	@ (800bd7c <USBD_SetConfig+0x148>)
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d905      	bls.n	800bc60 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bc54:	6839      	ldr	r1, [r7, #0]
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 f96c 	bl	800bf34 <USBD_CtlError>
    return USBD_FAIL;
 800bc5c:	2303      	movs	r3, #3
 800bc5e:	e088      	b.n	800bd72 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	2b02      	cmp	r3, #2
 800bc6a:	d002      	beq.n	800bc72 <USBD_SetConfig+0x3e>
 800bc6c:	2b03      	cmp	r3, #3
 800bc6e:	d025      	beq.n	800bcbc <USBD_SetConfig+0x88>
 800bc70:	e071      	b.n	800bd56 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bc72:	4b42      	ldr	r3, [pc, #264]	@ (800bd7c <USBD_SetConfig+0x148>)
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d01c      	beq.n	800bcb4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800bc7a:	4b40      	ldr	r3, [pc, #256]	@ (800bd7c <USBD_SetConfig+0x148>)
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	461a      	mov	r2, r3
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bc84:	4b3d      	ldr	r3, [pc, #244]	@ (800bd7c <USBD_SetConfig+0x148>)
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	4619      	mov	r1, r3
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f7ff f990 	bl	800afb0 <USBD_SetClassConfig>
 800bc90:	4603      	mov	r3, r0
 800bc92:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bc94:	7bfb      	ldrb	r3, [r7, #15]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d004      	beq.n	800bca4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800bc9a:	6839      	ldr	r1, [r7, #0]
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 f949 	bl	800bf34 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bca2:	e065      	b.n	800bd70 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f000 fa10 	bl	800c0ca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2203      	movs	r2, #3
 800bcae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bcb2:	e05d      	b.n	800bd70 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 fa08 	bl	800c0ca <USBD_CtlSendStatus>
      break;
 800bcba:	e059      	b.n	800bd70 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bcbc:	4b2f      	ldr	r3, [pc, #188]	@ (800bd7c <USBD_SetConfig+0x148>)
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d112      	bne.n	800bcea <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2202      	movs	r2, #2
 800bcc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800bccc:	4b2b      	ldr	r3, [pc, #172]	@ (800bd7c <USBD_SetConfig+0x148>)
 800bcce:	781b      	ldrb	r3, [r3, #0]
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bcd6:	4b29      	ldr	r3, [pc, #164]	@ (800bd7c <USBD_SetConfig+0x148>)
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	4619      	mov	r1, r3
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f7ff f983 	bl	800afe8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 f9f1 	bl	800c0ca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bce8:	e042      	b.n	800bd70 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800bcea:	4b24      	ldr	r3, [pc, #144]	@ (800bd7c <USBD_SetConfig+0x148>)
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	461a      	mov	r2, r3
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	685b      	ldr	r3, [r3, #4]
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d02a      	beq.n	800bd4e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	b2db      	uxtb	r3, r3
 800bcfe:	4619      	mov	r1, r3
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f7ff f971 	bl	800afe8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bd06:	4b1d      	ldr	r3, [pc, #116]	@ (800bd7c <USBD_SetConfig+0x148>)
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bd10:	4b1a      	ldr	r3, [pc, #104]	@ (800bd7c <USBD_SetConfig+0x148>)
 800bd12:	781b      	ldrb	r3, [r3, #0]
 800bd14:	4619      	mov	r1, r3
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f7ff f94a 	bl	800afb0 <USBD_SetClassConfig>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bd20:	7bfb      	ldrb	r3, [r7, #15]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d00f      	beq.n	800bd46 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800bd26:	6839      	ldr	r1, [r7, #0]
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f000 f903 	bl	800bf34 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	4619      	mov	r1, r3
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f7ff f956 	bl	800afe8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2202      	movs	r2, #2
 800bd40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bd44:	e014      	b.n	800bd70 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 f9bf 	bl	800c0ca <USBD_CtlSendStatus>
      break;
 800bd4c:	e010      	b.n	800bd70 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 f9bb 	bl	800c0ca <USBD_CtlSendStatus>
      break;
 800bd54:	e00c      	b.n	800bd70 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800bd56:	6839      	ldr	r1, [r7, #0]
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f000 f8eb 	bl	800bf34 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bd5e:	4b07      	ldr	r3, [pc, #28]	@ (800bd7c <USBD_SetConfig+0x148>)
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	4619      	mov	r1, r3
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f7ff f93f 	bl	800afe8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bd6a:	2303      	movs	r3, #3
 800bd6c:	73fb      	strb	r3, [r7, #15]
      break;
 800bd6e:	bf00      	nop
  }

  return ret;
 800bd70:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3710      	adds	r7, #16
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	20000718 	.word	0x20000718

0800bd80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	88db      	ldrh	r3, [r3, #6]
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	d004      	beq.n	800bd9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bd92:	6839      	ldr	r1, [r7, #0]
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f000 f8cd 	bl	800bf34 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bd9a:	e023      	b.n	800bde4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bda2:	b2db      	uxtb	r3, r3
 800bda4:	2b02      	cmp	r3, #2
 800bda6:	dc02      	bgt.n	800bdae <USBD_GetConfig+0x2e>
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	dc03      	bgt.n	800bdb4 <USBD_GetConfig+0x34>
 800bdac:	e015      	b.n	800bdda <USBD_GetConfig+0x5a>
 800bdae:	2b03      	cmp	r3, #3
 800bdb0:	d00b      	beq.n	800bdca <USBD_GetConfig+0x4a>
 800bdb2:	e012      	b.n	800bdda <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	3308      	adds	r3, #8
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f000 f927 	bl	800c016 <USBD_CtlSendData>
        break;
 800bdc8:	e00c      	b.n	800bde4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	3304      	adds	r3, #4
 800bdce:	2201      	movs	r2, #1
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 f91f 	bl	800c016 <USBD_CtlSendData>
        break;
 800bdd8:	e004      	b.n	800bde4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bdda:	6839      	ldr	r1, [r7, #0]
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f000 f8a9 	bl	800bf34 <USBD_CtlError>
        break;
 800bde2:	bf00      	nop
}
 800bde4:	bf00      	nop
 800bde6:	3708      	adds	r7, #8
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdfc:	b2db      	uxtb	r3, r3
 800bdfe:	3b01      	subs	r3, #1
 800be00:	2b02      	cmp	r3, #2
 800be02:	d81e      	bhi.n	800be42 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	88db      	ldrh	r3, [r3, #6]
 800be08:	2b02      	cmp	r3, #2
 800be0a:	d004      	beq.n	800be16 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800be0c:	6839      	ldr	r1, [r7, #0]
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f000 f890 	bl	800bf34 <USBD_CtlError>
        break;
 800be14:	e01a      	b.n	800be4c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2201      	movs	r2, #1
 800be1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800be22:	2b00      	cmp	r3, #0
 800be24:	d005      	beq.n	800be32 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	68db      	ldr	r3, [r3, #12]
 800be2a:	f043 0202 	orr.w	r2, r3, #2
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	330c      	adds	r3, #12
 800be36:	2202      	movs	r2, #2
 800be38:	4619      	mov	r1, r3
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 f8eb 	bl	800c016 <USBD_CtlSendData>
      break;
 800be40:	e004      	b.n	800be4c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800be42:	6839      	ldr	r1, [r7, #0]
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 f875 	bl	800bf34 <USBD_CtlError>
      break;
 800be4a:	bf00      	nop
  }
}
 800be4c:	bf00      	nop
 800be4e:	3708      	adds	r7, #8
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b082      	sub	sp, #8
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	885b      	ldrh	r3, [r3, #2]
 800be62:	2b01      	cmp	r3, #1
 800be64:	d106      	bne.n	800be74 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2201      	movs	r2, #1
 800be6a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 f92b 	bl	800c0ca <USBD_CtlSendStatus>
  }
}
 800be74:	bf00      	nop
 800be76:	3708      	adds	r7, #8
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b082      	sub	sp, #8
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	3b01      	subs	r3, #1
 800be90:	2b02      	cmp	r3, #2
 800be92:	d80b      	bhi.n	800beac <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	885b      	ldrh	r3, [r3, #2]
 800be98:	2b01      	cmp	r3, #1
 800be9a:	d10c      	bne.n	800beb6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2200      	movs	r2, #0
 800bea0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f000 f910 	bl	800c0ca <USBD_CtlSendStatus>
      }
      break;
 800beaa:	e004      	b.n	800beb6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800beac:	6839      	ldr	r1, [r7, #0]
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f000 f840 	bl	800bf34 <USBD_CtlError>
      break;
 800beb4:	e000      	b.n	800beb8 <USBD_ClrFeature+0x3c>
      break;
 800beb6:	bf00      	nop
  }
}
 800beb8:	bf00      	nop
 800beba:	3708      	adds	r7, #8
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	781a      	ldrb	r2, [r3, #0]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	3301      	adds	r3, #1
 800beda:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	781a      	ldrb	r2, [r3, #0]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	3301      	adds	r3, #1
 800bee8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800beea:	68f8      	ldr	r0, [r7, #12]
 800beec:	f7ff fa90 	bl	800b410 <SWAPBYTE>
 800bef0:	4603      	mov	r3, r0
 800bef2:	461a      	mov	r2, r3
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	3301      	adds	r3, #1
 800befc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	3301      	adds	r3, #1
 800bf02:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bf04:	68f8      	ldr	r0, [r7, #12]
 800bf06:	f7ff fa83 	bl	800b410 <SWAPBYTE>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	461a      	mov	r2, r3
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	3301      	adds	r3, #1
 800bf16:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bf1e:	68f8      	ldr	r0, [r7, #12]
 800bf20:	f7ff fa76 	bl	800b410 <SWAPBYTE>
 800bf24:	4603      	mov	r3, r0
 800bf26:	461a      	mov	r2, r3
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	80da      	strh	r2, [r3, #6]
}
 800bf2c:	bf00      	nop
 800bf2e:	3710      	adds	r7, #16
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b082      	sub	sp, #8
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf3e:	2180      	movs	r1, #128	@ 0x80
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 fc83 	bl	800c84c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bf46:	2100      	movs	r1, #0
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f000 fc7f 	bl	800c84c <USBD_LL_StallEP>
}
 800bf4e:	bf00      	nop
 800bf50:	3708      	adds	r7, #8
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}

0800bf56 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bf56:	b580      	push	{r7, lr}
 800bf58:	b086      	sub	sp, #24
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	60f8      	str	r0, [r7, #12]
 800bf5e:	60b9      	str	r1, [r7, #8]
 800bf60:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bf62:	2300      	movs	r3, #0
 800bf64:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d036      	beq.n	800bfda <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bf70:	6938      	ldr	r0, [r7, #16]
 800bf72:	f000 f836 	bl	800bfe2 <USBD_GetLen>
 800bf76:	4603      	mov	r3, r0
 800bf78:	3301      	adds	r3, #1
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	005b      	lsls	r3, r3, #1
 800bf7e:	b29a      	uxth	r2, r3
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bf84:	7dfb      	ldrb	r3, [r7, #23]
 800bf86:	68ba      	ldr	r2, [r7, #8]
 800bf88:	4413      	add	r3, r2
 800bf8a:	687a      	ldr	r2, [r7, #4]
 800bf8c:	7812      	ldrb	r2, [r2, #0]
 800bf8e:	701a      	strb	r2, [r3, #0]
  idx++;
 800bf90:	7dfb      	ldrb	r3, [r7, #23]
 800bf92:	3301      	adds	r3, #1
 800bf94:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bf96:	7dfb      	ldrb	r3, [r7, #23]
 800bf98:	68ba      	ldr	r2, [r7, #8]
 800bf9a:	4413      	add	r3, r2
 800bf9c:	2203      	movs	r2, #3
 800bf9e:	701a      	strb	r2, [r3, #0]
  idx++;
 800bfa0:	7dfb      	ldrb	r3, [r7, #23]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bfa6:	e013      	b.n	800bfd0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bfa8:	7dfb      	ldrb	r3, [r7, #23]
 800bfaa:	68ba      	ldr	r2, [r7, #8]
 800bfac:	4413      	add	r3, r2
 800bfae:	693a      	ldr	r2, [r7, #16]
 800bfb0:	7812      	ldrb	r2, [r2, #0]
 800bfb2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	613b      	str	r3, [r7, #16]
    idx++;
 800bfba:	7dfb      	ldrb	r3, [r7, #23]
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bfc0:	7dfb      	ldrb	r3, [r7, #23]
 800bfc2:	68ba      	ldr	r2, [r7, #8]
 800bfc4:	4413      	add	r3, r2
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	701a      	strb	r2, [r3, #0]
    idx++;
 800bfca:	7dfb      	ldrb	r3, [r7, #23]
 800bfcc:	3301      	adds	r3, #1
 800bfce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1e7      	bne.n	800bfa8 <USBD_GetString+0x52>
 800bfd8:	e000      	b.n	800bfdc <USBD_GetString+0x86>
    return;
 800bfda:	bf00      	nop
  }
}
 800bfdc:	3718      	adds	r7, #24
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}

0800bfe2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bfe2:	b480      	push	{r7}
 800bfe4:	b085      	sub	sp, #20
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bfea:	2300      	movs	r3, #0
 800bfec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bff2:	e005      	b.n	800c000 <USBD_GetLen+0x1e>
  {
    len++;
 800bff4:	7bfb      	ldrb	r3, [r7, #15]
 800bff6:	3301      	adds	r3, #1
 800bff8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	3301      	adds	r3, #1
 800bffe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d1f5      	bne.n	800bff4 <USBD_GetLen+0x12>
  }

  return len;
 800c008:	7bfb      	ldrb	r3, [r7, #15]
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3714      	adds	r7, #20
 800c00e:	46bd      	mov	sp, r7
 800c010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c014:	4770      	bx	lr

0800c016 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c016:	b580      	push	{r7, lr}
 800c018:	b084      	sub	sp, #16
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	60f8      	str	r0, [r7, #12]
 800c01e:	60b9      	str	r1, [r7, #8]
 800c020:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	2202      	movs	r2, #2
 800c026:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	687a      	ldr	r2, [r7, #4]
 800c02e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	68ba      	ldr	r2, [r7, #8]
 800c03a:	2100      	movs	r1, #0
 800c03c:	68f8      	ldr	r0, [r7, #12]
 800c03e:	f000 fc8e 	bl	800c95e <USBD_LL_Transmit>

  return USBD_OK;
 800c042:	2300      	movs	r3, #0
}
 800c044:	4618      	mov	r0, r3
 800c046:	3710      	adds	r7, #16
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b084      	sub	sp, #16
 800c050:	af00      	add	r7, sp, #0
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	68ba      	ldr	r2, [r7, #8]
 800c05c:	2100      	movs	r1, #0
 800c05e:	68f8      	ldr	r0, [r7, #12]
 800c060:	f000 fc7d 	bl	800c95e <USBD_LL_Transmit>

  return USBD_OK;
 800c064:	2300      	movs	r3, #0
}
 800c066:	4618      	mov	r0, r3
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}

0800c06e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c06e:	b580      	push	{r7, lr}
 800c070:	b084      	sub	sp, #16
 800c072:	af00      	add	r7, sp, #0
 800c074:	60f8      	str	r0, [r7, #12]
 800c076:	60b9      	str	r1, [r7, #8]
 800c078:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	2203      	movs	r2, #3
 800c07e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	687a      	ldr	r2, [r7, #4]
 800c08e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	68ba      	ldr	r2, [r7, #8]
 800c096:	2100      	movs	r1, #0
 800c098:	68f8      	ldr	r0, [r7, #12]
 800c09a:	f000 fc81 	bl	800c9a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c09e:	2300      	movs	r3, #0
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3710      	adds	r7, #16
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	68ba      	ldr	r2, [r7, #8]
 800c0b8:	2100      	movs	r1, #0
 800c0ba:	68f8      	ldr	r0, [r7, #12]
 800c0bc:	f000 fc70 	bl	800c9a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c0c0:	2300      	movs	r3, #0
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3710      	adds	r7, #16
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}

0800c0ca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c0ca:	b580      	push	{r7, lr}
 800c0cc:	b082      	sub	sp, #8
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2204      	movs	r2, #4
 800c0d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c0da:	2300      	movs	r3, #0
 800c0dc:	2200      	movs	r2, #0
 800c0de:	2100      	movs	r1, #0
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f000 fc3c 	bl	800c95e <USBD_LL_Transmit>

  return USBD_OK;
 800c0e6:	2300      	movs	r3, #0
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b082      	sub	sp, #8
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2205      	movs	r2, #5
 800c0fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c100:	2300      	movs	r3, #0
 800c102:	2200      	movs	r2, #0
 800c104:	2100      	movs	r1, #0
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 fc4a 	bl	800c9a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c10c:	2300      	movs	r3, #0
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3708      	adds	r7, #8
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
	...

0800c118 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800c11c:	2200      	movs	r2, #0
 800c11e:	4912      	ldr	r1, [pc, #72]	@ (800c168 <MX_USB_Device_Init+0x50>)
 800c120:	4812      	ldr	r0, [pc, #72]	@ (800c16c <MX_USB_Device_Init+0x54>)
 800c122:	f7fe fed7 	bl	800aed4 <USBD_Init>
 800c126:	4603      	mov	r3, r0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d001      	beq.n	800c130 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800c12c:	f7f5 fdc0 	bl	8001cb0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800c130:	490f      	ldr	r1, [pc, #60]	@ (800c170 <MX_USB_Device_Init+0x58>)
 800c132:	480e      	ldr	r0, [pc, #56]	@ (800c16c <MX_USB_Device_Init+0x54>)
 800c134:	f7fe fefe 	bl	800af34 <USBD_RegisterClass>
 800c138:	4603      	mov	r3, r0
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d001      	beq.n	800c142 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800c13e:	f7f5 fdb7 	bl	8001cb0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800c142:	490c      	ldr	r1, [pc, #48]	@ (800c174 <MX_USB_Device_Init+0x5c>)
 800c144:	4809      	ldr	r0, [pc, #36]	@ (800c16c <MX_USB_Device_Init+0x54>)
 800c146:	f7fe fe4f 	bl	800ade8 <USBD_CDC_RegisterInterface>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d001      	beq.n	800c154 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800c150:	f7f5 fdae 	bl	8001cb0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c154:	4805      	ldr	r0, [pc, #20]	@ (800c16c <MX_USB_Device_Init+0x54>)
 800c156:	f7fe ff14 	bl	800af82 <USBD_Start>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d001      	beq.n	800c164 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800c160:	f7f5 fda6 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c164:	bf00      	nop
 800c166:	bd80      	pop	{r7, pc}
 800c168:	20000130 	.word	0x20000130
 800c16c:	2000071c 	.word	0x2000071c
 800c170:	20000018 	.word	0x20000018
 800c174:	2000011c 	.word	0x2000011c

0800c178 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c17c:	2200      	movs	r2, #0
 800c17e:	4905      	ldr	r1, [pc, #20]	@ (800c194 <CDC_Init_FS+0x1c>)
 800c180:	4805      	ldr	r0, [pc, #20]	@ (800c198 <CDC_Init_FS+0x20>)
 800c182:	f7fe fe46 	bl	800ae12 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c186:	4905      	ldr	r1, [pc, #20]	@ (800c19c <CDC_Init_FS+0x24>)
 800c188:	4803      	ldr	r0, [pc, #12]	@ (800c198 <CDC_Init_FS+0x20>)
 800c18a:	f7fe fe60 	bl	800ae4e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c18e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c190:	4618      	mov	r0, r3
 800c192:	bd80      	pop	{r7, pc}
 800c194:	2000122c 	.word	0x2000122c
 800c198:	2000071c 	.word	0x2000071c
 800c19c:	20000a2c 	.word	0x20000a2c

0800c1a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c1a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr

0800c1b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b083      	sub	sp, #12
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	6039      	str	r1, [r7, #0]
 800c1ba:	71fb      	strb	r3, [r7, #7]
 800c1bc:	4613      	mov	r3, r2
 800c1be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c1c0:	79fb      	ldrb	r3, [r7, #7]
 800c1c2:	2b23      	cmp	r3, #35	@ 0x23
 800c1c4:	d84a      	bhi.n	800c25c <CDC_Control_FS+0xac>
 800c1c6:	a201      	add	r2, pc, #4	@ (adr r2, 800c1cc <CDC_Control_FS+0x1c>)
 800c1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1cc:	0800c25d 	.word	0x0800c25d
 800c1d0:	0800c25d 	.word	0x0800c25d
 800c1d4:	0800c25d 	.word	0x0800c25d
 800c1d8:	0800c25d 	.word	0x0800c25d
 800c1dc:	0800c25d 	.word	0x0800c25d
 800c1e0:	0800c25d 	.word	0x0800c25d
 800c1e4:	0800c25d 	.word	0x0800c25d
 800c1e8:	0800c25d 	.word	0x0800c25d
 800c1ec:	0800c25d 	.word	0x0800c25d
 800c1f0:	0800c25d 	.word	0x0800c25d
 800c1f4:	0800c25d 	.word	0x0800c25d
 800c1f8:	0800c25d 	.word	0x0800c25d
 800c1fc:	0800c25d 	.word	0x0800c25d
 800c200:	0800c25d 	.word	0x0800c25d
 800c204:	0800c25d 	.word	0x0800c25d
 800c208:	0800c25d 	.word	0x0800c25d
 800c20c:	0800c25d 	.word	0x0800c25d
 800c210:	0800c25d 	.word	0x0800c25d
 800c214:	0800c25d 	.word	0x0800c25d
 800c218:	0800c25d 	.word	0x0800c25d
 800c21c:	0800c25d 	.word	0x0800c25d
 800c220:	0800c25d 	.word	0x0800c25d
 800c224:	0800c25d 	.word	0x0800c25d
 800c228:	0800c25d 	.word	0x0800c25d
 800c22c:	0800c25d 	.word	0x0800c25d
 800c230:	0800c25d 	.word	0x0800c25d
 800c234:	0800c25d 	.word	0x0800c25d
 800c238:	0800c25d 	.word	0x0800c25d
 800c23c:	0800c25d 	.word	0x0800c25d
 800c240:	0800c25d 	.word	0x0800c25d
 800c244:	0800c25d 	.word	0x0800c25d
 800c248:	0800c25d 	.word	0x0800c25d
 800c24c:	0800c25d 	.word	0x0800c25d
 800c250:	0800c25d 	.word	0x0800c25d
 800c254:	0800c25d 	.word	0x0800c25d
 800c258:	0800c25d 	.word	0x0800c25d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c25c:	bf00      	nop
  }

  return (USBD_OK);
 800c25e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c260:	4618      	mov	r0, r3
 800c262:	370c      	adds	r7, #12
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr

0800c26c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c276:	6879      	ldr	r1, [r7, #4]
 800c278:	480e      	ldr	r0, [pc, #56]	@ (800c2b4 <CDC_Receive_FS+0x48>)
 800c27a:	f7fe fde8 	bl	800ae4e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c27e:	480d      	ldr	r0, [pc, #52]	@ (800c2b4 <CDC_Receive_FS+0x48>)
 800c280:	f7fe fdfe 	bl	800ae80 <USBD_CDC_ReceivePacket>

  size_t length = (size_t) *Len;
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	60fb      	str	r3, [r7, #12]
  memset(usbRxBuffer, '\0', USB_RX_BUFFER_SIZE); // Clear buffer before setting
 800c28a:	2240      	movs	r2, #64	@ 0x40
 800c28c:	2100      	movs	r1, #0
 800c28e:	480a      	ldr	r0, [pc, #40]	@ (800c2b8 <CDC_Receive_FS+0x4c>)
 800c290:	f001 fbd7 	bl	800da42 <memset>
  memcpy(usbRxBuffer, Buf, length);
 800c294:	68fa      	ldr	r2, [r7, #12]
 800c296:	6879      	ldr	r1, [r7, #4]
 800c298:	4807      	ldr	r0, [pc, #28]	@ (800c2b8 <CDC_Receive_FS+0x4c>)
 800c29a:	f001 fc52 	bl	800db42 <memcpy>
  memset(Buf, '\0', length); // Clear Buf for next read
 800c29e:	68fa      	ldr	r2, [r7, #12]
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f001 fbcd 	bl	800da42 <memset>

//CDC_Transmit_FS(Buf,*Len); // Received characters are echoed to the terminal

  return (USBD_OK);
 800c2a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	2000071c 	.word	0x2000071c
 800c2b8:	200009ec 	.word	0x200009ec

0800c2bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b087      	sub	sp, #28
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	60f8      	str	r0, [r7, #12]
 800c2c4:	60b9      	str	r1, [r7, #8]
 800c2c6:	4613      	mov	r3, r2
 800c2c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c2ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	371c      	adds	r7, #28
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr
	...

0800c2e0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b083      	sub	sp, #12
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	6039      	str	r1, [r7, #0]
 800c2ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	2212      	movs	r2, #18
 800c2f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800c2f2:	4b03      	ldr	r3, [pc, #12]	@ (800c300 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	370c      	adds	r7, #12
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr
 800c300:	20000150 	.word	0x20000150

0800c304 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c304:	b480      	push	{r7}
 800c306:	b083      	sub	sp, #12
 800c308:	af00      	add	r7, sp, #0
 800c30a:	4603      	mov	r3, r0
 800c30c:	6039      	str	r1, [r7, #0]
 800c30e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	2204      	movs	r2, #4
 800c314:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c316:	4b03      	ldr	r3, [pc, #12]	@ (800c324 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800c318:	4618      	mov	r0, r3
 800c31a:	370c      	adds	r7, #12
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr
 800c324:	20000164 	.word	0x20000164

0800c328 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	4603      	mov	r3, r0
 800c330:	6039      	str	r1, [r7, #0]
 800c332:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c334:	79fb      	ldrb	r3, [r7, #7]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d105      	bne.n	800c346 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c33a:	683a      	ldr	r2, [r7, #0]
 800c33c:	4907      	ldr	r1, [pc, #28]	@ (800c35c <USBD_CDC_ProductStrDescriptor+0x34>)
 800c33e:	4808      	ldr	r0, [pc, #32]	@ (800c360 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c340:	f7ff fe09 	bl	800bf56 <USBD_GetString>
 800c344:	e004      	b.n	800c350 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c346:	683a      	ldr	r2, [r7, #0]
 800c348:	4904      	ldr	r1, [pc, #16]	@ (800c35c <USBD_CDC_ProductStrDescriptor+0x34>)
 800c34a:	4805      	ldr	r0, [pc, #20]	@ (800c360 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c34c:	f7ff fe03 	bl	800bf56 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c350:	4b02      	ldr	r3, [pc, #8]	@ (800c35c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800c352:	4618      	mov	r0, r3
 800c354:	3708      	adds	r7, #8
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	20001a2c 	.word	0x20001a2c
 800c360:	08011228 	.word	0x08011228

0800c364 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b082      	sub	sp, #8
 800c368:	af00      	add	r7, sp, #0
 800c36a:	4603      	mov	r3, r0
 800c36c:	6039      	str	r1, [r7, #0]
 800c36e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c370:	683a      	ldr	r2, [r7, #0]
 800c372:	4904      	ldr	r1, [pc, #16]	@ (800c384 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800c374:	4804      	ldr	r0, [pc, #16]	@ (800c388 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800c376:	f7ff fdee 	bl	800bf56 <USBD_GetString>
  return USBD_StrDesc;
 800c37a:	4b02      	ldr	r3, [pc, #8]	@ (800c384 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3708      	adds	r7, #8
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}
 800c384:	20001a2c 	.word	0x20001a2c
 800c388:	08011234 	.word	0x08011234

0800c38c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b082      	sub	sp, #8
 800c390:	af00      	add	r7, sp, #0
 800c392:	4603      	mov	r3, r0
 800c394:	6039      	str	r1, [r7, #0]
 800c396:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	221a      	movs	r2, #26
 800c39c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c39e:	f000 f843 	bl	800c428 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c3a2:	4b02      	ldr	r3, [pc, #8]	@ (800c3ac <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3708      	adds	r7, #8
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	20000168 	.word	0x20000168

0800c3b0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	6039      	str	r1, [r7, #0]
 800c3ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c3bc:	79fb      	ldrb	r3, [r7, #7]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d105      	bne.n	800c3ce <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c3c2:	683a      	ldr	r2, [r7, #0]
 800c3c4:	4907      	ldr	r1, [pc, #28]	@ (800c3e4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c3c6:	4808      	ldr	r0, [pc, #32]	@ (800c3e8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c3c8:	f7ff fdc5 	bl	800bf56 <USBD_GetString>
 800c3cc:	e004      	b.n	800c3d8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c3ce:	683a      	ldr	r2, [r7, #0]
 800c3d0:	4904      	ldr	r1, [pc, #16]	@ (800c3e4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c3d2:	4805      	ldr	r0, [pc, #20]	@ (800c3e8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c3d4:	f7ff fdbf 	bl	800bf56 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c3d8:	4b02      	ldr	r3, [pc, #8]	@ (800c3e4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3708      	adds	r7, #8
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	20001a2c 	.word	0x20001a2c
 800c3e8:	08011248 	.word	0x08011248

0800c3ec <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	6039      	str	r1, [r7, #0]
 800c3f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c3f8:	79fb      	ldrb	r3, [r7, #7]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d105      	bne.n	800c40a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c3fe:	683a      	ldr	r2, [r7, #0]
 800c400:	4907      	ldr	r1, [pc, #28]	@ (800c420 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c402:	4808      	ldr	r0, [pc, #32]	@ (800c424 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c404:	f7ff fda7 	bl	800bf56 <USBD_GetString>
 800c408:	e004      	b.n	800c414 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c40a:	683a      	ldr	r2, [r7, #0]
 800c40c:	4904      	ldr	r1, [pc, #16]	@ (800c420 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c40e:	4805      	ldr	r0, [pc, #20]	@ (800c424 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c410:	f7ff fda1 	bl	800bf56 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c414:	4b02      	ldr	r3, [pc, #8]	@ (800c420 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800c416:	4618      	mov	r0, r3
 800c418:	3708      	adds	r7, #8
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	20001a2c 	.word	0x20001a2c
 800c424:	08011254 	.word	0x08011254

0800c428 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c42e:	4b0f      	ldr	r3, [pc, #60]	@ (800c46c <Get_SerialNum+0x44>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c434:	4b0e      	ldr	r3, [pc, #56]	@ (800c470 <Get_SerialNum+0x48>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c43a:	4b0e      	ldr	r3, [pc, #56]	@ (800c474 <Get_SerialNum+0x4c>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c440:	68fa      	ldr	r2, [r7, #12]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	4413      	add	r3, r2
 800c446:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d009      	beq.n	800c462 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c44e:	2208      	movs	r2, #8
 800c450:	4909      	ldr	r1, [pc, #36]	@ (800c478 <Get_SerialNum+0x50>)
 800c452:	68f8      	ldr	r0, [r7, #12]
 800c454:	f000 f814 	bl	800c480 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c458:	2204      	movs	r2, #4
 800c45a:	4908      	ldr	r1, [pc, #32]	@ (800c47c <Get_SerialNum+0x54>)
 800c45c:	68b8      	ldr	r0, [r7, #8]
 800c45e:	f000 f80f 	bl	800c480 <IntToUnicode>
  }
}
 800c462:	bf00      	nop
 800c464:	3710      	adds	r7, #16
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop
 800c46c:	1fff7590 	.word	0x1fff7590
 800c470:	1fff7594 	.word	0x1fff7594
 800c474:	1fff7598 	.word	0x1fff7598
 800c478:	2000016a 	.word	0x2000016a
 800c47c:	2000017a 	.word	0x2000017a

0800c480 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c480:	b480      	push	{r7}
 800c482:	b087      	sub	sp, #28
 800c484:	af00      	add	r7, sp, #0
 800c486:	60f8      	str	r0, [r7, #12]
 800c488:	60b9      	str	r1, [r7, #8]
 800c48a:	4613      	mov	r3, r2
 800c48c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c48e:	2300      	movs	r3, #0
 800c490:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c492:	2300      	movs	r3, #0
 800c494:	75fb      	strb	r3, [r7, #23]
 800c496:	e027      	b.n	800c4e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	0f1b      	lsrs	r3, r3, #28
 800c49c:	2b09      	cmp	r3, #9
 800c49e:	d80b      	bhi.n	800c4b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	0f1b      	lsrs	r3, r3, #28
 800c4a4:	b2da      	uxtb	r2, r3
 800c4a6:	7dfb      	ldrb	r3, [r7, #23]
 800c4a8:	005b      	lsls	r3, r3, #1
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	440b      	add	r3, r1
 800c4b0:	3230      	adds	r2, #48	@ 0x30
 800c4b2:	b2d2      	uxtb	r2, r2
 800c4b4:	701a      	strb	r2, [r3, #0]
 800c4b6:	e00a      	b.n	800c4ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	0f1b      	lsrs	r3, r3, #28
 800c4bc:	b2da      	uxtb	r2, r3
 800c4be:	7dfb      	ldrb	r3, [r7, #23]
 800c4c0:	005b      	lsls	r3, r3, #1
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	440b      	add	r3, r1
 800c4c8:	3237      	adds	r2, #55	@ 0x37
 800c4ca:	b2d2      	uxtb	r2, r2
 800c4cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	011b      	lsls	r3, r3, #4
 800c4d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c4d4:	7dfb      	ldrb	r3, [r7, #23]
 800c4d6:	005b      	lsls	r3, r3, #1
 800c4d8:	3301      	adds	r3, #1
 800c4da:	68ba      	ldr	r2, [r7, #8]
 800c4dc:	4413      	add	r3, r2
 800c4de:	2200      	movs	r2, #0
 800c4e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c4e2:	7dfb      	ldrb	r3, [r7, #23]
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	75fb      	strb	r3, [r7, #23]
 800c4e8:	7dfa      	ldrb	r2, [r7, #23]
 800c4ea:	79fb      	ldrb	r3, [r7, #7]
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	d3d3      	bcc.n	800c498 <IntToUnicode+0x18>
  }
}
 800c4f0:	bf00      	nop
 800c4f2:	bf00      	nop
 800c4f4:	371c      	adds	r7, #28
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fc:	4770      	bx	lr
	...

0800c500 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b098      	sub	sp, #96	@ 0x60
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c508:	f107 0310 	add.w	r3, r7, #16
 800c50c:	2250      	movs	r2, #80	@ 0x50
 800c50e:	2100      	movs	r1, #0
 800c510:	4618      	mov	r0, r3
 800c512:	f001 fa96 	bl	800da42 <memset>
  if(pcdHandle->Instance==USB)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4a15      	ldr	r2, [pc, #84]	@ (800c570 <HAL_PCD_MspInit+0x70>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d122      	bne.n	800c566 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c520:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c524:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c526:	2300      	movs	r3, #0
 800c528:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c52a:	f107 0310 	add.w	r3, r7, #16
 800c52e:	4618      	mov	r0, r3
 800c530:	f7fa f9ce 	bl	80068d0 <HAL_RCCEx_PeriphCLKConfig>
 800c534:	4603      	mov	r3, r0
 800c536:	2b00      	cmp	r3, #0
 800c538:	d001      	beq.n	800c53e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800c53a:	f7f5 fbb9 	bl	8001cb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c53e:	4b0d      	ldr	r3, [pc, #52]	@ (800c574 <HAL_PCD_MspInit+0x74>)
 800c540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c542:	4a0c      	ldr	r2, [pc, #48]	@ (800c574 <HAL_PCD_MspInit+0x74>)
 800c544:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c548:	6593      	str	r3, [r2, #88]	@ 0x58
 800c54a:	4b0a      	ldr	r3, [pc, #40]	@ (800c574 <HAL_PCD_MspInit+0x74>)
 800c54c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c54e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c552:	60fb      	str	r3, [r7, #12]
 800c554:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800c556:	2200      	movs	r2, #0
 800c558:	2100      	movs	r1, #0
 800c55a:	2014      	movs	r0, #20
 800c55c:	f7f7 fb27 	bl	8003bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c560:	2014      	movs	r0, #20
 800c562:	f7f7 fb3e 	bl	8003be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c566:	bf00      	nop
 800c568:	3760      	adds	r7, #96	@ 0x60
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	40005c00 	.word	0x40005c00
 800c574:	40021000 	.word	0x40021000

0800c578 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800c58c:	4619      	mov	r1, r3
 800c58e:	4610      	mov	r0, r2
 800c590:	f7fe fd42 	bl	800b018 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800c594:	bf00      	nop
 800c596:	3708      	adds	r7, #8
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}

0800c59c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	460b      	mov	r3, r1
 800c5a6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800c5ae:	78fa      	ldrb	r2, [r7, #3]
 800c5b0:	6879      	ldr	r1, [r7, #4]
 800c5b2:	4613      	mov	r3, r2
 800c5b4:	009b      	lsls	r3, r3, #2
 800c5b6:	4413      	add	r3, r2
 800c5b8:	00db      	lsls	r3, r3, #3
 800c5ba:	440b      	add	r3, r1
 800c5bc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c5c0:	681a      	ldr	r2, [r3, #0]
 800c5c2:	78fb      	ldrb	r3, [r7, #3]
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	f7fe fd7c 	bl	800b0c2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800c5ca:	bf00      	nop
 800c5cc:	3708      	adds	r7, #8
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b082      	sub	sp, #8
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
 800c5da:	460b      	mov	r3, r1
 800c5dc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800c5e4:	78fa      	ldrb	r2, [r7, #3]
 800c5e6:	6879      	ldr	r1, [r7, #4]
 800c5e8:	4613      	mov	r3, r2
 800c5ea:	009b      	lsls	r3, r3, #2
 800c5ec:	4413      	add	r3, r2
 800c5ee:	00db      	lsls	r3, r3, #3
 800c5f0:	440b      	add	r3, r1
 800c5f2:	3324      	adds	r3, #36	@ 0x24
 800c5f4:	681a      	ldr	r2, [r3, #0]
 800c5f6:	78fb      	ldrb	r3, [r7, #3]
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	f7fe fdc5 	bl	800b188 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800c5fe:	bf00      	nop
 800c600:	3708      	adds	r7, #8
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}

0800c606 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c606:	b580      	push	{r7, lr}
 800c608:	b082      	sub	sp, #8
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c614:	4618      	mov	r0, r3
 800c616:	f7fe fed9 	bl	800b3cc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800c61a:	bf00      	nop
 800c61c:	3708      	adds	r7, #8
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c622:	b580      	push	{r7, lr}
 800c624:	b084      	sub	sp, #16
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c62a:	2301      	movs	r3, #1
 800c62c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	795b      	ldrb	r3, [r3, #5]
 800c632:	2b02      	cmp	r3, #2
 800c634:	d001      	beq.n	800c63a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c636:	f7f5 fb3b 	bl	8001cb0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c640:	7bfa      	ldrb	r2, [r7, #15]
 800c642:	4611      	mov	r1, r2
 800c644:	4618      	mov	r0, r3
 800c646:	f7fe fe83 	bl	800b350 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c650:	4618      	mov	r0, r3
 800c652:	f7fe fe2f 	bl	800b2b4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800c656:	bf00      	nop
 800c658:	3710      	adds	r7, #16
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
	...

0800c660 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c66e:	4618      	mov	r0, r3
 800c670:	f7fe fe7e 	bl	800b370 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	7a5b      	ldrb	r3, [r3, #9]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d005      	beq.n	800c688 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c67c:	4b04      	ldr	r3, [pc, #16]	@ (800c690 <HAL_PCD_SuspendCallback+0x30>)
 800c67e:	691b      	ldr	r3, [r3, #16]
 800c680:	4a03      	ldr	r2, [pc, #12]	@ (800c690 <HAL_PCD_SuspendCallback+0x30>)
 800c682:	f043 0306 	orr.w	r3, r3, #6
 800c686:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800c688:	bf00      	nop
 800c68a:	3708      	adds	r7, #8
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	e000ed00 	.word	0xe000ed00

0800c694 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b082      	sub	sp, #8
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	7a5b      	ldrb	r3, [r3, #9]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d007      	beq.n	800c6b4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c6a4:	4b08      	ldr	r3, [pc, #32]	@ (800c6c8 <HAL_PCD_ResumeCallback+0x34>)
 800c6a6:	691b      	ldr	r3, [r3, #16]
 800c6a8:	4a07      	ldr	r2, [pc, #28]	@ (800c6c8 <HAL_PCD_ResumeCallback+0x34>)
 800c6aa:	f023 0306 	bic.w	r3, r3, #6
 800c6ae:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c6b0:	f000 f9f8 	bl	800caa4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7fe fe6e 	bl	800b39c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800c6c0:	bf00      	nop
 800c6c2:	3708      	adds	r7, #8
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	e000ed00 	.word	0xe000ed00

0800c6cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800c6d4:	4a2b      	ldr	r2, [pc, #172]	@ (800c784 <USBD_LL_Init+0xb8>)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	4a29      	ldr	r2, [pc, #164]	@ (800c784 <USBD_LL_Init+0xb8>)
 800c6e0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800c6e4:	4b27      	ldr	r3, [pc, #156]	@ (800c784 <USBD_LL_Init+0xb8>)
 800c6e6:	4a28      	ldr	r2, [pc, #160]	@ (800c788 <USBD_LL_Init+0xbc>)
 800c6e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c6ea:	4b26      	ldr	r3, [pc, #152]	@ (800c784 <USBD_LL_Init+0xb8>)
 800c6ec:	2208      	movs	r2, #8
 800c6ee:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c6f0:	4b24      	ldr	r3, [pc, #144]	@ (800c784 <USBD_LL_Init+0xb8>)
 800c6f2:	2202      	movs	r2, #2
 800c6f4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c6f6:	4b23      	ldr	r3, [pc, #140]	@ (800c784 <USBD_LL_Init+0xb8>)
 800c6f8:	2202      	movs	r2, #2
 800c6fa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = ENABLE;
 800c6fc:	4b21      	ldr	r3, [pc, #132]	@ (800c784 <USBD_LL_Init+0xb8>)
 800c6fe:	2201      	movs	r2, #1
 800c700:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c702:	4b20      	ldr	r3, [pc, #128]	@ (800c784 <USBD_LL_Init+0xb8>)
 800c704:	2200      	movs	r2, #0
 800c706:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c708:	4b1e      	ldr	r3, [pc, #120]	@ (800c784 <USBD_LL_Init+0xb8>)
 800c70a:	2200      	movs	r2, #0
 800c70c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c70e:	4b1d      	ldr	r3, [pc, #116]	@ (800c784 <USBD_LL_Init+0xb8>)
 800c710:	2200      	movs	r2, #0
 800c712:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c714:	481b      	ldr	r0, [pc, #108]	@ (800c784 <USBD_LL_Init+0xb8>)
 800c716:	f7f7 fe07 	bl	8004328 <HAL_PCD_Init>
 800c71a:	4603      	mov	r3, r0
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d001      	beq.n	800c724 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800c720:	f7f5 fac6 	bl	8001cb0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c72a:	2318      	movs	r3, #24
 800c72c:	2200      	movs	r2, #0
 800c72e:	2100      	movs	r1, #0
 800c730:	f7f9 fa8e 	bl	8005c50 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c73a:	2358      	movs	r3, #88	@ 0x58
 800c73c:	2200      	movs	r2, #0
 800c73e:	2180      	movs	r1, #128	@ 0x80
 800c740:	f7f9 fa86 	bl	8005c50 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c74a:	23c0      	movs	r3, #192	@ 0xc0
 800c74c:	2200      	movs	r2, #0
 800c74e:	2181      	movs	r1, #129	@ 0x81
 800c750:	f7f9 fa7e 	bl	8005c50 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c75a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800c75e:	2200      	movs	r2, #0
 800c760:	2101      	movs	r1, #1
 800c762:	f7f9 fa75 	bl	8005c50 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c76c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c770:	2200      	movs	r2, #0
 800c772:	2182      	movs	r1, #130	@ 0x82
 800c774:	f7f9 fa6c 	bl	8005c50 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c778:	2300      	movs	r3, #0
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3708      	adds	r7, #8
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
 800c782:	bf00      	nop
 800c784:	20001c2c 	.word	0x20001c2c
 800c788:	40005c00 	.word	0x40005c00

0800c78c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b084      	sub	sp, #16
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c794:	2300      	movs	r3, #0
 800c796:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c798:	2300      	movs	r3, #0
 800c79a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7f7 fe8e 	bl	80044c4 <HAL_PCD_Start>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7ac:	7bfb      	ldrb	r3, [r7, #15]
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f000 f97e 	bl	800cab0 <USBD_Get_USB_Status>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3710      	adds	r7, #16
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}

0800c7c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c7c2:	b580      	push	{r7, lr}
 800c7c4:	b084      	sub	sp, #16
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
 800c7ca:	4608      	mov	r0, r1
 800c7cc:	4611      	mov	r1, r2
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	70fb      	strb	r3, [r7, #3]
 800c7d4:	460b      	mov	r3, r1
 800c7d6:	70bb      	strb	r3, [r7, #2]
 800c7d8:	4613      	mov	r3, r2
 800c7da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c7ea:	78bb      	ldrb	r3, [r7, #2]
 800c7ec:	883a      	ldrh	r2, [r7, #0]
 800c7ee:	78f9      	ldrb	r1, [r7, #3]
 800c7f0:	f7f7 ffd5 	bl	800479e <HAL_PCD_EP_Open>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7f8:	7bfb      	ldrb	r3, [r7, #15]
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f000 f958 	bl	800cab0 <USBD_Get_USB_Status>
 800c800:	4603      	mov	r3, r0
 800c802:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c804:	7bbb      	ldrb	r3, [r7, #14]
}
 800c806:	4618      	mov	r0, r3
 800c808:	3710      	adds	r7, #16
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}

0800c80e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c80e:	b580      	push	{r7, lr}
 800c810:	b084      	sub	sp, #16
 800c812:	af00      	add	r7, sp, #0
 800c814:	6078      	str	r0, [r7, #4]
 800c816:	460b      	mov	r3, r1
 800c818:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c81a:	2300      	movs	r3, #0
 800c81c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c81e:	2300      	movs	r3, #0
 800c820:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c828:	78fa      	ldrb	r2, [r7, #3]
 800c82a:	4611      	mov	r1, r2
 800c82c:	4618      	mov	r0, r3
 800c82e:	f7f8 f815 	bl	800485c <HAL_PCD_EP_Close>
 800c832:	4603      	mov	r3, r0
 800c834:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c836:	7bfb      	ldrb	r3, [r7, #15]
 800c838:	4618      	mov	r0, r3
 800c83a:	f000 f939 	bl	800cab0 <USBD_Get_USB_Status>
 800c83e:	4603      	mov	r3, r0
 800c840:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c842:	7bbb      	ldrb	r3, [r7, #14]
}
 800c844:	4618      	mov	r0, r3
 800c846:	3710      	adds	r7, #16
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b084      	sub	sp, #16
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	460b      	mov	r3, r1
 800c856:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c858:	2300      	movs	r3, #0
 800c85a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c85c:	2300      	movs	r3, #0
 800c85e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c866:	78fa      	ldrb	r2, [r7, #3]
 800c868:	4611      	mov	r1, r2
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7f8 f8be 	bl	80049ec <HAL_PCD_EP_SetStall>
 800c870:	4603      	mov	r3, r0
 800c872:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c874:	7bfb      	ldrb	r3, [r7, #15]
 800c876:	4618      	mov	r0, r3
 800c878:	f000 f91a 	bl	800cab0 <USBD_Get_USB_Status>
 800c87c:	4603      	mov	r3, r0
 800c87e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c880:	7bbb      	ldrb	r3, [r7, #14]
}
 800c882:	4618      	mov	r0, r3
 800c884:	3710      	adds	r7, #16
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}

0800c88a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c88a:	b580      	push	{r7, lr}
 800c88c:	b084      	sub	sp, #16
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
 800c892:	460b      	mov	r3, r1
 800c894:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c896:	2300      	movs	r3, #0
 800c898:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c89a:	2300      	movs	r3, #0
 800c89c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c8a4:	78fa      	ldrb	r2, [r7, #3]
 800c8a6:	4611      	mov	r1, r2
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f7f8 f8f1 	bl	8004a90 <HAL_PCD_EP_ClrStall>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8b2:	7bfb      	ldrb	r3, [r7, #15]
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f000 f8fb 	bl	800cab0 <USBD_Get_USB_Status>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8be:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3710      	adds	r7, #16
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b085      	sub	sp, #20
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	460b      	mov	r3, r1
 800c8d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c8da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c8dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	da0b      	bge.n	800c8fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c8e4:	78fb      	ldrb	r3, [r7, #3]
 800c8e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c8ea:	68f9      	ldr	r1, [r7, #12]
 800c8ec:	4613      	mov	r3, r2
 800c8ee:	009b      	lsls	r3, r3, #2
 800c8f0:	4413      	add	r3, r2
 800c8f2:	00db      	lsls	r3, r3, #3
 800c8f4:	440b      	add	r3, r1
 800c8f6:	3312      	adds	r3, #18
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	e00b      	b.n	800c914 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c8fc:	78fb      	ldrb	r3, [r7, #3]
 800c8fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c902:	68f9      	ldr	r1, [r7, #12]
 800c904:	4613      	mov	r3, r2
 800c906:	009b      	lsls	r3, r3, #2
 800c908:	4413      	add	r3, r2
 800c90a:	00db      	lsls	r3, r3, #3
 800c90c:	440b      	add	r3, r1
 800c90e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800c912:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c914:	4618      	mov	r0, r3
 800c916:	3714      	adds	r7, #20
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr

0800c920 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b084      	sub	sp, #16
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	460b      	mov	r3, r1
 800c92a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c92c:	2300      	movs	r3, #0
 800c92e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c930:	2300      	movs	r3, #0
 800c932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c93a:	78fa      	ldrb	r2, [r7, #3]
 800c93c:	4611      	mov	r1, r2
 800c93e:	4618      	mov	r0, r3
 800c940:	f7f7 ff09 	bl	8004756 <HAL_PCD_SetAddress>
 800c944:	4603      	mov	r3, r0
 800c946:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c948:	7bfb      	ldrb	r3, [r7, #15]
 800c94a:	4618      	mov	r0, r3
 800c94c:	f000 f8b0 	bl	800cab0 <USBD_Get_USB_Status>
 800c950:	4603      	mov	r3, r0
 800c952:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c954:	7bbb      	ldrb	r3, [r7, #14]
}
 800c956:	4618      	mov	r0, r3
 800c958:	3710      	adds	r7, #16
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c95e:	b580      	push	{r7, lr}
 800c960:	b086      	sub	sp, #24
 800c962:	af00      	add	r7, sp, #0
 800c964:	60f8      	str	r0, [r7, #12]
 800c966:	607a      	str	r2, [r7, #4]
 800c968:	603b      	str	r3, [r7, #0]
 800c96a:	460b      	mov	r3, r1
 800c96c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c96e:	2300      	movs	r3, #0
 800c970:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c972:	2300      	movs	r3, #0
 800c974:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c97c:	7af9      	ldrb	r1, [r7, #11]
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	f7f7 fffc 	bl	800497e <HAL_PCD_EP_Transmit>
 800c986:	4603      	mov	r3, r0
 800c988:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c98a:	7dfb      	ldrb	r3, [r7, #23]
 800c98c:	4618      	mov	r0, r3
 800c98e:	f000 f88f 	bl	800cab0 <USBD_Get_USB_Status>
 800c992:	4603      	mov	r3, r0
 800c994:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c996:	7dbb      	ldrb	r3, [r7, #22]
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3718      	adds	r7, #24
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b086      	sub	sp, #24
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	60f8      	str	r0, [r7, #12]
 800c9a8:	607a      	str	r2, [r7, #4]
 800c9aa:	603b      	str	r3, [r7, #0]
 800c9ac:	460b      	mov	r3, r1
 800c9ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c9be:	7af9      	ldrb	r1, [r7, #11]
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	687a      	ldr	r2, [r7, #4]
 800c9c4:	f7f7 ff92 	bl	80048ec <HAL_PCD_EP_Receive>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9cc:	7dfb      	ldrb	r3, [r7, #23]
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f000 f86e 	bl	800cab0 <USBD_Get_USB_Status>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c9d8:	7dbb      	ldrb	r3, [r7, #22]
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3718      	adds	r7, #24
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b082      	sub	sp, #8
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
 800c9ea:	460b      	mov	r3, r1
 800c9ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c9f4:	78fa      	ldrb	r2, [r7, #3]
 800c9f6:	4611      	mov	r1, r2
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f7f7 ffa8 	bl	800494e <HAL_PCD_EP_GetRxCount>
 800c9fe:	4603      	mov	r3, r0
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3708      	adds	r7, #8
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}

0800ca08 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	460b      	mov	r3, r1
 800ca12:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800ca14:	78fb      	ldrb	r3, [r7, #3]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d002      	beq.n	800ca20 <HAL_PCDEx_LPM_Callback+0x18>
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	d013      	beq.n	800ca46 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800ca1e:	e023      	b.n	800ca68 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	7a5b      	ldrb	r3, [r3, #9]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d007      	beq.n	800ca38 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ca28:	f000 f83c 	bl	800caa4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca2c:	4b10      	ldr	r3, [pc, #64]	@ (800ca70 <HAL_PCDEx_LPM_Callback+0x68>)
 800ca2e:	691b      	ldr	r3, [r3, #16]
 800ca30:	4a0f      	ldr	r2, [pc, #60]	@ (800ca70 <HAL_PCDEx_LPM_Callback+0x68>)
 800ca32:	f023 0306 	bic.w	r3, r3, #6
 800ca36:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7fe fcac 	bl	800b39c <USBD_LL_Resume>
    break;
 800ca44:	e010      	b.n	800ca68 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f7fe fc8f 	bl	800b370 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	7a5b      	ldrb	r3, [r3, #9]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d005      	beq.n	800ca66 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca5a:	4b05      	ldr	r3, [pc, #20]	@ (800ca70 <HAL_PCDEx_LPM_Callback+0x68>)
 800ca5c:	691b      	ldr	r3, [r3, #16]
 800ca5e:	4a04      	ldr	r2, [pc, #16]	@ (800ca70 <HAL_PCDEx_LPM_Callback+0x68>)
 800ca60:	f043 0306 	orr.w	r3, r3, #6
 800ca64:	6113      	str	r3, [r2, #16]
    break;
 800ca66:	bf00      	nop
}
 800ca68:	bf00      	nop
 800ca6a:	3708      	adds	r7, #8
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}
 800ca70:	e000ed00 	.word	0xe000ed00

0800ca74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b083      	sub	sp, #12
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ca7c:	4b03      	ldr	r3, [pc, #12]	@ (800ca8c <USBD_static_malloc+0x18>)
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	370c      	adds	r7, #12
 800ca82:	46bd      	mov	sp, r7
 800ca84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca88:	4770      	bx	lr
 800ca8a:	bf00      	nop
 800ca8c:	20001f08 	.word	0x20001f08

0800ca90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b083      	sub	sp, #12
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]

}
 800ca98:	bf00      	nop
 800ca9a:	370c      	adds	r7, #12
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr

0800caa4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800caa8:	f7f4 fc7e 	bl	80013a8 <SystemClock_Config>
}
 800caac:	bf00      	nop
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b085      	sub	sp, #20
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	4603      	mov	r3, r0
 800cab8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800caba:	2300      	movs	r3, #0
 800cabc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cabe:	79fb      	ldrb	r3, [r7, #7]
 800cac0:	2b03      	cmp	r3, #3
 800cac2:	d817      	bhi.n	800caf4 <USBD_Get_USB_Status+0x44>
 800cac4:	a201      	add	r2, pc, #4	@ (adr r2, 800cacc <USBD_Get_USB_Status+0x1c>)
 800cac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caca:	bf00      	nop
 800cacc:	0800cadd 	.word	0x0800cadd
 800cad0:	0800cae3 	.word	0x0800cae3
 800cad4:	0800cae9 	.word	0x0800cae9
 800cad8:	0800caef 	.word	0x0800caef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cadc:	2300      	movs	r3, #0
 800cade:	73fb      	strb	r3, [r7, #15]
    break;
 800cae0:	e00b      	b.n	800cafa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cae2:	2303      	movs	r3, #3
 800cae4:	73fb      	strb	r3, [r7, #15]
    break;
 800cae6:	e008      	b.n	800cafa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cae8:	2301      	movs	r3, #1
 800caea:	73fb      	strb	r3, [r7, #15]
    break;
 800caec:	e005      	b.n	800cafa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800caee:	2303      	movs	r3, #3
 800caf0:	73fb      	strb	r3, [r7, #15]
    break;
 800caf2:	e002      	b.n	800cafa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800caf4:	2303      	movs	r3, #3
 800caf6:	73fb      	strb	r3, [r7, #15]
    break;
 800caf8:	bf00      	nop
  }
  return usb_status;
 800cafa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3714      	adds	r7, #20
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr

0800cb08 <__cvt>:
 800cb08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb0c:	ec57 6b10 	vmov	r6, r7, d0
 800cb10:	2f00      	cmp	r7, #0
 800cb12:	460c      	mov	r4, r1
 800cb14:	4619      	mov	r1, r3
 800cb16:	463b      	mov	r3, r7
 800cb18:	bfbb      	ittet	lt
 800cb1a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cb1e:	461f      	movlt	r7, r3
 800cb20:	2300      	movge	r3, #0
 800cb22:	232d      	movlt	r3, #45	@ 0x2d
 800cb24:	700b      	strb	r3, [r1, #0]
 800cb26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb28:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cb2c:	4691      	mov	r9, r2
 800cb2e:	f023 0820 	bic.w	r8, r3, #32
 800cb32:	bfbc      	itt	lt
 800cb34:	4632      	movlt	r2, r6
 800cb36:	4616      	movlt	r6, r2
 800cb38:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cb3c:	d005      	beq.n	800cb4a <__cvt+0x42>
 800cb3e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cb42:	d100      	bne.n	800cb46 <__cvt+0x3e>
 800cb44:	3401      	adds	r4, #1
 800cb46:	2102      	movs	r1, #2
 800cb48:	e000      	b.n	800cb4c <__cvt+0x44>
 800cb4a:	2103      	movs	r1, #3
 800cb4c:	ab03      	add	r3, sp, #12
 800cb4e:	9301      	str	r3, [sp, #4]
 800cb50:	ab02      	add	r3, sp, #8
 800cb52:	9300      	str	r3, [sp, #0]
 800cb54:	ec47 6b10 	vmov	d0, r6, r7
 800cb58:	4653      	mov	r3, sl
 800cb5a:	4622      	mov	r2, r4
 800cb5c:	f001 f890 	bl	800dc80 <_dtoa_r>
 800cb60:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cb64:	4605      	mov	r5, r0
 800cb66:	d119      	bne.n	800cb9c <__cvt+0x94>
 800cb68:	f019 0f01 	tst.w	r9, #1
 800cb6c:	d00e      	beq.n	800cb8c <__cvt+0x84>
 800cb6e:	eb00 0904 	add.w	r9, r0, r4
 800cb72:	2200      	movs	r2, #0
 800cb74:	2300      	movs	r3, #0
 800cb76:	4630      	mov	r0, r6
 800cb78:	4639      	mov	r1, r7
 800cb7a:	f7f3 ffcd 	bl	8000b18 <__aeabi_dcmpeq>
 800cb7e:	b108      	cbz	r0, 800cb84 <__cvt+0x7c>
 800cb80:	f8cd 900c 	str.w	r9, [sp, #12]
 800cb84:	2230      	movs	r2, #48	@ 0x30
 800cb86:	9b03      	ldr	r3, [sp, #12]
 800cb88:	454b      	cmp	r3, r9
 800cb8a:	d31e      	bcc.n	800cbca <__cvt+0xc2>
 800cb8c:	9b03      	ldr	r3, [sp, #12]
 800cb8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb90:	1b5b      	subs	r3, r3, r5
 800cb92:	4628      	mov	r0, r5
 800cb94:	6013      	str	r3, [r2, #0]
 800cb96:	b004      	add	sp, #16
 800cb98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cba0:	eb00 0904 	add.w	r9, r0, r4
 800cba4:	d1e5      	bne.n	800cb72 <__cvt+0x6a>
 800cba6:	7803      	ldrb	r3, [r0, #0]
 800cba8:	2b30      	cmp	r3, #48	@ 0x30
 800cbaa:	d10a      	bne.n	800cbc2 <__cvt+0xba>
 800cbac:	2200      	movs	r2, #0
 800cbae:	2300      	movs	r3, #0
 800cbb0:	4630      	mov	r0, r6
 800cbb2:	4639      	mov	r1, r7
 800cbb4:	f7f3 ffb0 	bl	8000b18 <__aeabi_dcmpeq>
 800cbb8:	b918      	cbnz	r0, 800cbc2 <__cvt+0xba>
 800cbba:	f1c4 0401 	rsb	r4, r4, #1
 800cbbe:	f8ca 4000 	str.w	r4, [sl]
 800cbc2:	f8da 3000 	ldr.w	r3, [sl]
 800cbc6:	4499      	add	r9, r3
 800cbc8:	e7d3      	b.n	800cb72 <__cvt+0x6a>
 800cbca:	1c59      	adds	r1, r3, #1
 800cbcc:	9103      	str	r1, [sp, #12]
 800cbce:	701a      	strb	r2, [r3, #0]
 800cbd0:	e7d9      	b.n	800cb86 <__cvt+0x7e>

0800cbd2 <__exponent>:
 800cbd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbd4:	2900      	cmp	r1, #0
 800cbd6:	bfba      	itte	lt
 800cbd8:	4249      	neglt	r1, r1
 800cbda:	232d      	movlt	r3, #45	@ 0x2d
 800cbdc:	232b      	movge	r3, #43	@ 0x2b
 800cbde:	2909      	cmp	r1, #9
 800cbe0:	7002      	strb	r2, [r0, #0]
 800cbe2:	7043      	strb	r3, [r0, #1]
 800cbe4:	dd29      	ble.n	800cc3a <__exponent+0x68>
 800cbe6:	f10d 0307 	add.w	r3, sp, #7
 800cbea:	461d      	mov	r5, r3
 800cbec:	270a      	movs	r7, #10
 800cbee:	461a      	mov	r2, r3
 800cbf0:	fbb1 f6f7 	udiv	r6, r1, r7
 800cbf4:	fb07 1416 	mls	r4, r7, r6, r1
 800cbf8:	3430      	adds	r4, #48	@ 0x30
 800cbfa:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cbfe:	460c      	mov	r4, r1
 800cc00:	2c63      	cmp	r4, #99	@ 0x63
 800cc02:	f103 33ff 	add.w	r3, r3, #4294967295
 800cc06:	4631      	mov	r1, r6
 800cc08:	dcf1      	bgt.n	800cbee <__exponent+0x1c>
 800cc0a:	3130      	adds	r1, #48	@ 0x30
 800cc0c:	1e94      	subs	r4, r2, #2
 800cc0e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cc12:	1c41      	adds	r1, r0, #1
 800cc14:	4623      	mov	r3, r4
 800cc16:	42ab      	cmp	r3, r5
 800cc18:	d30a      	bcc.n	800cc30 <__exponent+0x5e>
 800cc1a:	f10d 0309 	add.w	r3, sp, #9
 800cc1e:	1a9b      	subs	r3, r3, r2
 800cc20:	42ac      	cmp	r4, r5
 800cc22:	bf88      	it	hi
 800cc24:	2300      	movhi	r3, #0
 800cc26:	3302      	adds	r3, #2
 800cc28:	4403      	add	r3, r0
 800cc2a:	1a18      	subs	r0, r3, r0
 800cc2c:	b003      	add	sp, #12
 800cc2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc30:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cc34:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cc38:	e7ed      	b.n	800cc16 <__exponent+0x44>
 800cc3a:	2330      	movs	r3, #48	@ 0x30
 800cc3c:	3130      	adds	r1, #48	@ 0x30
 800cc3e:	7083      	strb	r3, [r0, #2]
 800cc40:	70c1      	strb	r1, [r0, #3]
 800cc42:	1d03      	adds	r3, r0, #4
 800cc44:	e7f1      	b.n	800cc2a <__exponent+0x58>
	...

0800cc48 <_printf_float>:
 800cc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc4c:	b08d      	sub	sp, #52	@ 0x34
 800cc4e:	460c      	mov	r4, r1
 800cc50:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cc54:	4616      	mov	r6, r2
 800cc56:	461f      	mov	r7, r3
 800cc58:	4605      	mov	r5, r0
 800cc5a:	f000 fefb 	bl	800da54 <_localeconv_r>
 800cc5e:	6803      	ldr	r3, [r0, #0]
 800cc60:	9304      	str	r3, [sp, #16]
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7f3 fb2c 	bl	80002c0 <strlen>
 800cc68:	2300      	movs	r3, #0
 800cc6a:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc6c:	f8d8 3000 	ldr.w	r3, [r8]
 800cc70:	9005      	str	r0, [sp, #20]
 800cc72:	3307      	adds	r3, #7
 800cc74:	f023 0307 	bic.w	r3, r3, #7
 800cc78:	f103 0208 	add.w	r2, r3, #8
 800cc7c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cc80:	f8d4 b000 	ldr.w	fp, [r4]
 800cc84:	f8c8 2000 	str.w	r2, [r8]
 800cc88:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc8c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cc90:	9307      	str	r3, [sp, #28]
 800cc92:	f8cd 8018 	str.w	r8, [sp, #24]
 800cc96:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cc9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc9e:	4b9c      	ldr	r3, [pc, #624]	@ (800cf10 <_printf_float+0x2c8>)
 800cca0:	f04f 32ff 	mov.w	r2, #4294967295
 800cca4:	f7f3 ff6a 	bl	8000b7c <__aeabi_dcmpun>
 800cca8:	bb70      	cbnz	r0, 800cd08 <_printf_float+0xc0>
 800ccaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ccae:	4b98      	ldr	r3, [pc, #608]	@ (800cf10 <_printf_float+0x2c8>)
 800ccb0:	f04f 32ff 	mov.w	r2, #4294967295
 800ccb4:	f7f3 ff44 	bl	8000b40 <__aeabi_dcmple>
 800ccb8:	bb30      	cbnz	r0, 800cd08 <_printf_float+0xc0>
 800ccba:	2200      	movs	r2, #0
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	4640      	mov	r0, r8
 800ccc0:	4649      	mov	r1, r9
 800ccc2:	f7f3 ff33 	bl	8000b2c <__aeabi_dcmplt>
 800ccc6:	b110      	cbz	r0, 800ccce <_printf_float+0x86>
 800ccc8:	232d      	movs	r3, #45	@ 0x2d
 800ccca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccce:	4a91      	ldr	r2, [pc, #580]	@ (800cf14 <_printf_float+0x2cc>)
 800ccd0:	4b91      	ldr	r3, [pc, #580]	@ (800cf18 <_printf_float+0x2d0>)
 800ccd2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ccd6:	bf8c      	ite	hi
 800ccd8:	4690      	movhi	r8, r2
 800ccda:	4698      	movls	r8, r3
 800ccdc:	2303      	movs	r3, #3
 800ccde:	6123      	str	r3, [r4, #16]
 800cce0:	f02b 0304 	bic.w	r3, fp, #4
 800cce4:	6023      	str	r3, [r4, #0]
 800cce6:	f04f 0900 	mov.w	r9, #0
 800ccea:	9700      	str	r7, [sp, #0]
 800ccec:	4633      	mov	r3, r6
 800ccee:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ccf0:	4621      	mov	r1, r4
 800ccf2:	4628      	mov	r0, r5
 800ccf4:	f000 f9d2 	bl	800d09c <_printf_common>
 800ccf8:	3001      	adds	r0, #1
 800ccfa:	f040 808d 	bne.w	800ce18 <_printf_float+0x1d0>
 800ccfe:	f04f 30ff 	mov.w	r0, #4294967295
 800cd02:	b00d      	add	sp, #52	@ 0x34
 800cd04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd08:	4642      	mov	r2, r8
 800cd0a:	464b      	mov	r3, r9
 800cd0c:	4640      	mov	r0, r8
 800cd0e:	4649      	mov	r1, r9
 800cd10:	f7f3 ff34 	bl	8000b7c <__aeabi_dcmpun>
 800cd14:	b140      	cbz	r0, 800cd28 <_printf_float+0xe0>
 800cd16:	464b      	mov	r3, r9
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	bfbc      	itt	lt
 800cd1c:	232d      	movlt	r3, #45	@ 0x2d
 800cd1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cd22:	4a7e      	ldr	r2, [pc, #504]	@ (800cf1c <_printf_float+0x2d4>)
 800cd24:	4b7e      	ldr	r3, [pc, #504]	@ (800cf20 <_printf_float+0x2d8>)
 800cd26:	e7d4      	b.n	800ccd2 <_printf_float+0x8a>
 800cd28:	6863      	ldr	r3, [r4, #4]
 800cd2a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cd2e:	9206      	str	r2, [sp, #24]
 800cd30:	1c5a      	adds	r2, r3, #1
 800cd32:	d13b      	bne.n	800cdac <_printf_float+0x164>
 800cd34:	2306      	movs	r3, #6
 800cd36:	6063      	str	r3, [r4, #4]
 800cd38:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	6022      	str	r2, [r4, #0]
 800cd40:	9303      	str	r3, [sp, #12]
 800cd42:	ab0a      	add	r3, sp, #40	@ 0x28
 800cd44:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cd48:	ab09      	add	r3, sp, #36	@ 0x24
 800cd4a:	9300      	str	r3, [sp, #0]
 800cd4c:	6861      	ldr	r1, [r4, #4]
 800cd4e:	ec49 8b10 	vmov	d0, r8, r9
 800cd52:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cd56:	4628      	mov	r0, r5
 800cd58:	f7ff fed6 	bl	800cb08 <__cvt>
 800cd5c:	9b06      	ldr	r3, [sp, #24]
 800cd5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cd60:	2b47      	cmp	r3, #71	@ 0x47
 800cd62:	4680      	mov	r8, r0
 800cd64:	d129      	bne.n	800cdba <_printf_float+0x172>
 800cd66:	1cc8      	adds	r0, r1, #3
 800cd68:	db02      	blt.n	800cd70 <_printf_float+0x128>
 800cd6a:	6863      	ldr	r3, [r4, #4]
 800cd6c:	4299      	cmp	r1, r3
 800cd6e:	dd41      	ble.n	800cdf4 <_printf_float+0x1ac>
 800cd70:	f1aa 0a02 	sub.w	sl, sl, #2
 800cd74:	fa5f fa8a 	uxtb.w	sl, sl
 800cd78:	3901      	subs	r1, #1
 800cd7a:	4652      	mov	r2, sl
 800cd7c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cd80:	9109      	str	r1, [sp, #36]	@ 0x24
 800cd82:	f7ff ff26 	bl	800cbd2 <__exponent>
 800cd86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cd88:	1813      	adds	r3, r2, r0
 800cd8a:	2a01      	cmp	r2, #1
 800cd8c:	4681      	mov	r9, r0
 800cd8e:	6123      	str	r3, [r4, #16]
 800cd90:	dc02      	bgt.n	800cd98 <_printf_float+0x150>
 800cd92:	6822      	ldr	r2, [r4, #0]
 800cd94:	07d2      	lsls	r2, r2, #31
 800cd96:	d501      	bpl.n	800cd9c <_printf_float+0x154>
 800cd98:	3301      	adds	r3, #1
 800cd9a:	6123      	str	r3, [r4, #16]
 800cd9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d0a2      	beq.n	800ccea <_printf_float+0xa2>
 800cda4:	232d      	movs	r3, #45	@ 0x2d
 800cda6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cdaa:	e79e      	b.n	800ccea <_printf_float+0xa2>
 800cdac:	9a06      	ldr	r2, [sp, #24]
 800cdae:	2a47      	cmp	r2, #71	@ 0x47
 800cdb0:	d1c2      	bne.n	800cd38 <_printf_float+0xf0>
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d1c0      	bne.n	800cd38 <_printf_float+0xf0>
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	e7bd      	b.n	800cd36 <_printf_float+0xee>
 800cdba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cdbe:	d9db      	bls.n	800cd78 <_printf_float+0x130>
 800cdc0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cdc4:	d118      	bne.n	800cdf8 <_printf_float+0x1b0>
 800cdc6:	2900      	cmp	r1, #0
 800cdc8:	6863      	ldr	r3, [r4, #4]
 800cdca:	dd0b      	ble.n	800cde4 <_printf_float+0x19c>
 800cdcc:	6121      	str	r1, [r4, #16]
 800cdce:	b913      	cbnz	r3, 800cdd6 <_printf_float+0x18e>
 800cdd0:	6822      	ldr	r2, [r4, #0]
 800cdd2:	07d0      	lsls	r0, r2, #31
 800cdd4:	d502      	bpl.n	800cddc <_printf_float+0x194>
 800cdd6:	3301      	adds	r3, #1
 800cdd8:	440b      	add	r3, r1
 800cdda:	6123      	str	r3, [r4, #16]
 800cddc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cdde:	f04f 0900 	mov.w	r9, #0
 800cde2:	e7db      	b.n	800cd9c <_printf_float+0x154>
 800cde4:	b913      	cbnz	r3, 800cdec <_printf_float+0x1a4>
 800cde6:	6822      	ldr	r2, [r4, #0]
 800cde8:	07d2      	lsls	r2, r2, #31
 800cdea:	d501      	bpl.n	800cdf0 <_printf_float+0x1a8>
 800cdec:	3302      	adds	r3, #2
 800cdee:	e7f4      	b.n	800cdda <_printf_float+0x192>
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	e7f2      	b.n	800cdda <_printf_float+0x192>
 800cdf4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cdf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdfa:	4299      	cmp	r1, r3
 800cdfc:	db05      	blt.n	800ce0a <_printf_float+0x1c2>
 800cdfe:	6823      	ldr	r3, [r4, #0]
 800ce00:	6121      	str	r1, [r4, #16]
 800ce02:	07d8      	lsls	r0, r3, #31
 800ce04:	d5ea      	bpl.n	800cddc <_printf_float+0x194>
 800ce06:	1c4b      	adds	r3, r1, #1
 800ce08:	e7e7      	b.n	800cdda <_printf_float+0x192>
 800ce0a:	2900      	cmp	r1, #0
 800ce0c:	bfd4      	ite	le
 800ce0e:	f1c1 0202 	rsble	r2, r1, #2
 800ce12:	2201      	movgt	r2, #1
 800ce14:	4413      	add	r3, r2
 800ce16:	e7e0      	b.n	800cdda <_printf_float+0x192>
 800ce18:	6823      	ldr	r3, [r4, #0]
 800ce1a:	055a      	lsls	r2, r3, #21
 800ce1c:	d407      	bmi.n	800ce2e <_printf_float+0x1e6>
 800ce1e:	6923      	ldr	r3, [r4, #16]
 800ce20:	4642      	mov	r2, r8
 800ce22:	4631      	mov	r1, r6
 800ce24:	4628      	mov	r0, r5
 800ce26:	47b8      	blx	r7
 800ce28:	3001      	adds	r0, #1
 800ce2a:	d12b      	bne.n	800ce84 <_printf_float+0x23c>
 800ce2c:	e767      	b.n	800ccfe <_printf_float+0xb6>
 800ce2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ce32:	f240 80dd 	bls.w	800cff0 <_printf_float+0x3a8>
 800ce36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	f7f3 fe6b 	bl	8000b18 <__aeabi_dcmpeq>
 800ce42:	2800      	cmp	r0, #0
 800ce44:	d033      	beq.n	800ceae <_printf_float+0x266>
 800ce46:	4a37      	ldr	r2, [pc, #220]	@ (800cf24 <_printf_float+0x2dc>)
 800ce48:	2301      	movs	r3, #1
 800ce4a:	4631      	mov	r1, r6
 800ce4c:	4628      	mov	r0, r5
 800ce4e:	47b8      	blx	r7
 800ce50:	3001      	adds	r0, #1
 800ce52:	f43f af54 	beq.w	800ccfe <_printf_float+0xb6>
 800ce56:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ce5a:	4543      	cmp	r3, r8
 800ce5c:	db02      	blt.n	800ce64 <_printf_float+0x21c>
 800ce5e:	6823      	ldr	r3, [r4, #0]
 800ce60:	07d8      	lsls	r0, r3, #31
 800ce62:	d50f      	bpl.n	800ce84 <_printf_float+0x23c>
 800ce64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce68:	4631      	mov	r1, r6
 800ce6a:	4628      	mov	r0, r5
 800ce6c:	47b8      	blx	r7
 800ce6e:	3001      	adds	r0, #1
 800ce70:	f43f af45 	beq.w	800ccfe <_printf_float+0xb6>
 800ce74:	f04f 0900 	mov.w	r9, #0
 800ce78:	f108 38ff 	add.w	r8, r8, #4294967295
 800ce7c:	f104 0a1a 	add.w	sl, r4, #26
 800ce80:	45c8      	cmp	r8, r9
 800ce82:	dc09      	bgt.n	800ce98 <_printf_float+0x250>
 800ce84:	6823      	ldr	r3, [r4, #0]
 800ce86:	079b      	lsls	r3, r3, #30
 800ce88:	f100 8103 	bmi.w	800d092 <_printf_float+0x44a>
 800ce8c:	68e0      	ldr	r0, [r4, #12]
 800ce8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce90:	4298      	cmp	r0, r3
 800ce92:	bfb8      	it	lt
 800ce94:	4618      	movlt	r0, r3
 800ce96:	e734      	b.n	800cd02 <_printf_float+0xba>
 800ce98:	2301      	movs	r3, #1
 800ce9a:	4652      	mov	r2, sl
 800ce9c:	4631      	mov	r1, r6
 800ce9e:	4628      	mov	r0, r5
 800cea0:	47b8      	blx	r7
 800cea2:	3001      	adds	r0, #1
 800cea4:	f43f af2b 	beq.w	800ccfe <_printf_float+0xb6>
 800cea8:	f109 0901 	add.w	r9, r9, #1
 800ceac:	e7e8      	b.n	800ce80 <_printf_float+0x238>
 800ceae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	dc39      	bgt.n	800cf28 <_printf_float+0x2e0>
 800ceb4:	4a1b      	ldr	r2, [pc, #108]	@ (800cf24 <_printf_float+0x2dc>)
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	4631      	mov	r1, r6
 800ceba:	4628      	mov	r0, r5
 800cebc:	47b8      	blx	r7
 800cebe:	3001      	adds	r0, #1
 800cec0:	f43f af1d 	beq.w	800ccfe <_printf_float+0xb6>
 800cec4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cec8:	ea59 0303 	orrs.w	r3, r9, r3
 800cecc:	d102      	bne.n	800ced4 <_printf_float+0x28c>
 800cece:	6823      	ldr	r3, [r4, #0]
 800ced0:	07d9      	lsls	r1, r3, #31
 800ced2:	d5d7      	bpl.n	800ce84 <_printf_float+0x23c>
 800ced4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ced8:	4631      	mov	r1, r6
 800ceda:	4628      	mov	r0, r5
 800cedc:	47b8      	blx	r7
 800cede:	3001      	adds	r0, #1
 800cee0:	f43f af0d 	beq.w	800ccfe <_printf_float+0xb6>
 800cee4:	f04f 0a00 	mov.w	sl, #0
 800cee8:	f104 0b1a 	add.w	fp, r4, #26
 800ceec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceee:	425b      	negs	r3, r3
 800cef0:	4553      	cmp	r3, sl
 800cef2:	dc01      	bgt.n	800cef8 <_printf_float+0x2b0>
 800cef4:	464b      	mov	r3, r9
 800cef6:	e793      	b.n	800ce20 <_printf_float+0x1d8>
 800cef8:	2301      	movs	r3, #1
 800cefa:	465a      	mov	r2, fp
 800cefc:	4631      	mov	r1, r6
 800cefe:	4628      	mov	r0, r5
 800cf00:	47b8      	blx	r7
 800cf02:	3001      	adds	r0, #1
 800cf04:	f43f aefb 	beq.w	800ccfe <_printf_float+0xb6>
 800cf08:	f10a 0a01 	add.w	sl, sl, #1
 800cf0c:	e7ee      	b.n	800ceec <_printf_float+0x2a4>
 800cf0e:	bf00      	nop
 800cf10:	7fefffff 	.word	0x7fefffff
 800cf14:	080113a9 	.word	0x080113a9
 800cf18:	080113a5 	.word	0x080113a5
 800cf1c:	080113b1 	.word	0x080113b1
 800cf20:	080113ad 	.word	0x080113ad
 800cf24:	080113b5 	.word	0x080113b5
 800cf28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cf2a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cf2e:	4553      	cmp	r3, sl
 800cf30:	bfa8      	it	ge
 800cf32:	4653      	movge	r3, sl
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	4699      	mov	r9, r3
 800cf38:	dc36      	bgt.n	800cfa8 <_printf_float+0x360>
 800cf3a:	f04f 0b00 	mov.w	fp, #0
 800cf3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf42:	f104 021a 	add.w	r2, r4, #26
 800cf46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cf48:	9306      	str	r3, [sp, #24]
 800cf4a:	eba3 0309 	sub.w	r3, r3, r9
 800cf4e:	455b      	cmp	r3, fp
 800cf50:	dc31      	bgt.n	800cfb6 <_printf_float+0x36e>
 800cf52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf54:	459a      	cmp	sl, r3
 800cf56:	dc3a      	bgt.n	800cfce <_printf_float+0x386>
 800cf58:	6823      	ldr	r3, [r4, #0]
 800cf5a:	07da      	lsls	r2, r3, #31
 800cf5c:	d437      	bmi.n	800cfce <_printf_float+0x386>
 800cf5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf60:	ebaa 0903 	sub.w	r9, sl, r3
 800cf64:	9b06      	ldr	r3, [sp, #24]
 800cf66:	ebaa 0303 	sub.w	r3, sl, r3
 800cf6a:	4599      	cmp	r9, r3
 800cf6c:	bfa8      	it	ge
 800cf6e:	4699      	movge	r9, r3
 800cf70:	f1b9 0f00 	cmp.w	r9, #0
 800cf74:	dc33      	bgt.n	800cfde <_printf_float+0x396>
 800cf76:	f04f 0800 	mov.w	r8, #0
 800cf7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf7e:	f104 0b1a 	add.w	fp, r4, #26
 800cf82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf84:	ebaa 0303 	sub.w	r3, sl, r3
 800cf88:	eba3 0309 	sub.w	r3, r3, r9
 800cf8c:	4543      	cmp	r3, r8
 800cf8e:	f77f af79 	ble.w	800ce84 <_printf_float+0x23c>
 800cf92:	2301      	movs	r3, #1
 800cf94:	465a      	mov	r2, fp
 800cf96:	4631      	mov	r1, r6
 800cf98:	4628      	mov	r0, r5
 800cf9a:	47b8      	blx	r7
 800cf9c:	3001      	adds	r0, #1
 800cf9e:	f43f aeae 	beq.w	800ccfe <_printf_float+0xb6>
 800cfa2:	f108 0801 	add.w	r8, r8, #1
 800cfa6:	e7ec      	b.n	800cf82 <_printf_float+0x33a>
 800cfa8:	4642      	mov	r2, r8
 800cfaa:	4631      	mov	r1, r6
 800cfac:	4628      	mov	r0, r5
 800cfae:	47b8      	blx	r7
 800cfb0:	3001      	adds	r0, #1
 800cfb2:	d1c2      	bne.n	800cf3a <_printf_float+0x2f2>
 800cfb4:	e6a3      	b.n	800ccfe <_printf_float+0xb6>
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	4631      	mov	r1, r6
 800cfba:	4628      	mov	r0, r5
 800cfbc:	9206      	str	r2, [sp, #24]
 800cfbe:	47b8      	blx	r7
 800cfc0:	3001      	adds	r0, #1
 800cfc2:	f43f ae9c 	beq.w	800ccfe <_printf_float+0xb6>
 800cfc6:	9a06      	ldr	r2, [sp, #24]
 800cfc8:	f10b 0b01 	add.w	fp, fp, #1
 800cfcc:	e7bb      	b.n	800cf46 <_printf_float+0x2fe>
 800cfce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cfd2:	4631      	mov	r1, r6
 800cfd4:	4628      	mov	r0, r5
 800cfd6:	47b8      	blx	r7
 800cfd8:	3001      	adds	r0, #1
 800cfda:	d1c0      	bne.n	800cf5e <_printf_float+0x316>
 800cfdc:	e68f      	b.n	800ccfe <_printf_float+0xb6>
 800cfde:	9a06      	ldr	r2, [sp, #24]
 800cfe0:	464b      	mov	r3, r9
 800cfe2:	4442      	add	r2, r8
 800cfe4:	4631      	mov	r1, r6
 800cfe6:	4628      	mov	r0, r5
 800cfe8:	47b8      	blx	r7
 800cfea:	3001      	adds	r0, #1
 800cfec:	d1c3      	bne.n	800cf76 <_printf_float+0x32e>
 800cfee:	e686      	b.n	800ccfe <_printf_float+0xb6>
 800cff0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cff4:	f1ba 0f01 	cmp.w	sl, #1
 800cff8:	dc01      	bgt.n	800cffe <_printf_float+0x3b6>
 800cffa:	07db      	lsls	r3, r3, #31
 800cffc:	d536      	bpl.n	800d06c <_printf_float+0x424>
 800cffe:	2301      	movs	r3, #1
 800d000:	4642      	mov	r2, r8
 800d002:	4631      	mov	r1, r6
 800d004:	4628      	mov	r0, r5
 800d006:	47b8      	blx	r7
 800d008:	3001      	adds	r0, #1
 800d00a:	f43f ae78 	beq.w	800ccfe <_printf_float+0xb6>
 800d00e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d012:	4631      	mov	r1, r6
 800d014:	4628      	mov	r0, r5
 800d016:	47b8      	blx	r7
 800d018:	3001      	adds	r0, #1
 800d01a:	f43f ae70 	beq.w	800ccfe <_printf_float+0xb6>
 800d01e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d022:	2200      	movs	r2, #0
 800d024:	2300      	movs	r3, #0
 800d026:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d02a:	f7f3 fd75 	bl	8000b18 <__aeabi_dcmpeq>
 800d02e:	b9c0      	cbnz	r0, 800d062 <_printf_float+0x41a>
 800d030:	4653      	mov	r3, sl
 800d032:	f108 0201 	add.w	r2, r8, #1
 800d036:	4631      	mov	r1, r6
 800d038:	4628      	mov	r0, r5
 800d03a:	47b8      	blx	r7
 800d03c:	3001      	adds	r0, #1
 800d03e:	d10c      	bne.n	800d05a <_printf_float+0x412>
 800d040:	e65d      	b.n	800ccfe <_printf_float+0xb6>
 800d042:	2301      	movs	r3, #1
 800d044:	465a      	mov	r2, fp
 800d046:	4631      	mov	r1, r6
 800d048:	4628      	mov	r0, r5
 800d04a:	47b8      	blx	r7
 800d04c:	3001      	adds	r0, #1
 800d04e:	f43f ae56 	beq.w	800ccfe <_printf_float+0xb6>
 800d052:	f108 0801 	add.w	r8, r8, #1
 800d056:	45d0      	cmp	r8, sl
 800d058:	dbf3      	blt.n	800d042 <_printf_float+0x3fa>
 800d05a:	464b      	mov	r3, r9
 800d05c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d060:	e6df      	b.n	800ce22 <_printf_float+0x1da>
 800d062:	f04f 0800 	mov.w	r8, #0
 800d066:	f104 0b1a 	add.w	fp, r4, #26
 800d06a:	e7f4      	b.n	800d056 <_printf_float+0x40e>
 800d06c:	2301      	movs	r3, #1
 800d06e:	4642      	mov	r2, r8
 800d070:	e7e1      	b.n	800d036 <_printf_float+0x3ee>
 800d072:	2301      	movs	r3, #1
 800d074:	464a      	mov	r2, r9
 800d076:	4631      	mov	r1, r6
 800d078:	4628      	mov	r0, r5
 800d07a:	47b8      	blx	r7
 800d07c:	3001      	adds	r0, #1
 800d07e:	f43f ae3e 	beq.w	800ccfe <_printf_float+0xb6>
 800d082:	f108 0801 	add.w	r8, r8, #1
 800d086:	68e3      	ldr	r3, [r4, #12]
 800d088:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d08a:	1a5b      	subs	r3, r3, r1
 800d08c:	4543      	cmp	r3, r8
 800d08e:	dcf0      	bgt.n	800d072 <_printf_float+0x42a>
 800d090:	e6fc      	b.n	800ce8c <_printf_float+0x244>
 800d092:	f04f 0800 	mov.w	r8, #0
 800d096:	f104 0919 	add.w	r9, r4, #25
 800d09a:	e7f4      	b.n	800d086 <_printf_float+0x43e>

0800d09c <_printf_common>:
 800d09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0a0:	4616      	mov	r6, r2
 800d0a2:	4698      	mov	r8, r3
 800d0a4:	688a      	ldr	r2, [r1, #8]
 800d0a6:	690b      	ldr	r3, [r1, #16]
 800d0a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	bfb8      	it	lt
 800d0b0:	4613      	movlt	r3, r2
 800d0b2:	6033      	str	r3, [r6, #0]
 800d0b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d0b8:	4607      	mov	r7, r0
 800d0ba:	460c      	mov	r4, r1
 800d0bc:	b10a      	cbz	r2, 800d0c2 <_printf_common+0x26>
 800d0be:	3301      	adds	r3, #1
 800d0c0:	6033      	str	r3, [r6, #0]
 800d0c2:	6823      	ldr	r3, [r4, #0]
 800d0c4:	0699      	lsls	r1, r3, #26
 800d0c6:	bf42      	ittt	mi
 800d0c8:	6833      	ldrmi	r3, [r6, #0]
 800d0ca:	3302      	addmi	r3, #2
 800d0cc:	6033      	strmi	r3, [r6, #0]
 800d0ce:	6825      	ldr	r5, [r4, #0]
 800d0d0:	f015 0506 	ands.w	r5, r5, #6
 800d0d4:	d106      	bne.n	800d0e4 <_printf_common+0x48>
 800d0d6:	f104 0a19 	add.w	sl, r4, #25
 800d0da:	68e3      	ldr	r3, [r4, #12]
 800d0dc:	6832      	ldr	r2, [r6, #0]
 800d0de:	1a9b      	subs	r3, r3, r2
 800d0e0:	42ab      	cmp	r3, r5
 800d0e2:	dc26      	bgt.n	800d132 <_printf_common+0x96>
 800d0e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d0e8:	6822      	ldr	r2, [r4, #0]
 800d0ea:	3b00      	subs	r3, #0
 800d0ec:	bf18      	it	ne
 800d0ee:	2301      	movne	r3, #1
 800d0f0:	0692      	lsls	r2, r2, #26
 800d0f2:	d42b      	bmi.n	800d14c <_printf_common+0xb0>
 800d0f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d0f8:	4641      	mov	r1, r8
 800d0fa:	4638      	mov	r0, r7
 800d0fc:	47c8      	blx	r9
 800d0fe:	3001      	adds	r0, #1
 800d100:	d01e      	beq.n	800d140 <_printf_common+0xa4>
 800d102:	6823      	ldr	r3, [r4, #0]
 800d104:	6922      	ldr	r2, [r4, #16]
 800d106:	f003 0306 	and.w	r3, r3, #6
 800d10a:	2b04      	cmp	r3, #4
 800d10c:	bf02      	ittt	eq
 800d10e:	68e5      	ldreq	r5, [r4, #12]
 800d110:	6833      	ldreq	r3, [r6, #0]
 800d112:	1aed      	subeq	r5, r5, r3
 800d114:	68a3      	ldr	r3, [r4, #8]
 800d116:	bf0c      	ite	eq
 800d118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d11c:	2500      	movne	r5, #0
 800d11e:	4293      	cmp	r3, r2
 800d120:	bfc4      	itt	gt
 800d122:	1a9b      	subgt	r3, r3, r2
 800d124:	18ed      	addgt	r5, r5, r3
 800d126:	2600      	movs	r6, #0
 800d128:	341a      	adds	r4, #26
 800d12a:	42b5      	cmp	r5, r6
 800d12c:	d11a      	bne.n	800d164 <_printf_common+0xc8>
 800d12e:	2000      	movs	r0, #0
 800d130:	e008      	b.n	800d144 <_printf_common+0xa8>
 800d132:	2301      	movs	r3, #1
 800d134:	4652      	mov	r2, sl
 800d136:	4641      	mov	r1, r8
 800d138:	4638      	mov	r0, r7
 800d13a:	47c8      	blx	r9
 800d13c:	3001      	adds	r0, #1
 800d13e:	d103      	bne.n	800d148 <_printf_common+0xac>
 800d140:	f04f 30ff 	mov.w	r0, #4294967295
 800d144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d148:	3501      	adds	r5, #1
 800d14a:	e7c6      	b.n	800d0da <_printf_common+0x3e>
 800d14c:	18e1      	adds	r1, r4, r3
 800d14e:	1c5a      	adds	r2, r3, #1
 800d150:	2030      	movs	r0, #48	@ 0x30
 800d152:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d156:	4422      	add	r2, r4
 800d158:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d15c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d160:	3302      	adds	r3, #2
 800d162:	e7c7      	b.n	800d0f4 <_printf_common+0x58>
 800d164:	2301      	movs	r3, #1
 800d166:	4622      	mov	r2, r4
 800d168:	4641      	mov	r1, r8
 800d16a:	4638      	mov	r0, r7
 800d16c:	47c8      	blx	r9
 800d16e:	3001      	adds	r0, #1
 800d170:	d0e6      	beq.n	800d140 <_printf_common+0xa4>
 800d172:	3601      	adds	r6, #1
 800d174:	e7d9      	b.n	800d12a <_printf_common+0x8e>
	...

0800d178 <_printf_i>:
 800d178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d17c:	7e0f      	ldrb	r7, [r1, #24]
 800d17e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d180:	2f78      	cmp	r7, #120	@ 0x78
 800d182:	4691      	mov	r9, r2
 800d184:	4680      	mov	r8, r0
 800d186:	460c      	mov	r4, r1
 800d188:	469a      	mov	sl, r3
 800d18a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d18e:	d807      	bhi.n	800d1a0 <_printf_i+0x28>
 800d190:	2f62      	cmp	r7, #98	@ 0x62
 800d192:	d80a      	bhi.n	800d1aa <_printf_i+0x32>
 800d194:	2f00      	cmp	r7, #0
 800d196:	f000 80d1 	beq.w	800d33c <_printf_i+0x1c4>
 800d19a:	2f58      	cmp	r7, #88	@ 0x58
 800d19c:	f000 80b8 	beq.w	800d310 <_printf_i+0x198>
 800d1a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d1a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d1a8:	e03a      	b.n	800d220 <_printf_i+0xa8>
 800d1aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d1ae:	2b15      	cmp	r3, #21
 800d1b0:	d8f6      	bhi.n	800d1a0 <_printf_i+0x28>
 800d1b2:	a101      	add	r1, pc, #4	@ (adr r1, 800d1b8 <_printf_i+0x40>)
 800d1b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d1b8:	0800d211 	.word	0x0800d211
 800d1bc:	0800d225 	.word	0x0800d225
 800d1c0:	0800d1a1 	.word	0x0800d1a1
 800d1c4:	0800d1a1 	.word	0x0800d1a1
 800d1c8:	0800d1a1 	.word	0x0800d1a1
 800d1cc:	0800d1a1 	.word	0x0800d1a1
 800d1d0:	0800d225 	.word	0x0800d225
 800d1d4:	0800d1a1 	.word	0x0800d1a1
 800d1d8:	0800d1a1 	.word	0x0800d1a1
 800d1dc:	0800d1a1 	.word	0x0800d1a1
 800d1e0:	0800d1a1 	.word	0x0800d1a1
 800d1e4:	0800d323 	.word	0x0800d323
 800d1e8:	0800d24f 	.word	0x0800d24f
 800d1ec:	0800d2dd 	.word	0x0800d2dd
 800d1f0:	0800d1a1 	.word	0x0800d1a1
 800d1f4:	0800d1a1 	.word	0x0800d1a1
 800d1f8:	0800d345 	.word	0x0800d345
 800d1fc:	0800d1a1 	.word	0x0800d1a1
 800d200:	0800d24f 	.word	0x0800d24f
 800d204:	0800d1a1 	.word	0x0800d1a1
 800d208:	0800d1a1 	.word	0x0800d1a1
 800d20c:	0800d2e5 	.word	0x0800d2e5
 800d210:	6833      	ldr	r3, [r6, #0]
 800d212:	1d1a      	adds	r2, r3, #4
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	6032      	str	r2, [r6, #0]
 800d218:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d21c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d220:	2301      	movs	r3, #1
 800d222:	e09c      	b.n	800d35e <_printf_i+0x1e6>
 800d224:	6833      	ldr	r3, [r6, #0]
 800d226:	6820      	ldr	r0, [r4, #0]
 800d228:	1d19      	adds	r1, r3, #4
 800d22a:	6031      	str	r1, [r6, #0]
 800d22c:	0606      	lsls	r6, r0, #24
 800d22e:	d501      	bpl.n	800d234 <_printf_i+0xbc>
 800d230:	681d      	ldr	r5, [r3, #0]
 800d232:	e003      	b.n	800d23c <_printf_i+0xc4>
 800d234:	0645      	lsls	r5, r0, #25
 800d236:	d5fb      	bpl.n	800d230 <_printf_i+0xb8>
 800d238:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d23c:	2d00      	cmp	r5, #0
 800d23e:	da03      	bge.n	800d248 <_printf_i+0xd0>
 800d240:	232d      	movs	r3, #45	@ 0x2d
 800d242:	426d      	negs	r5, r5
 800d244:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d248:	4858      	ldr	r0, [pc, #352]	@ (800d3ac <_printf_i+0x234>)
 800d24a:	230a      	movs	r3, #10
 800d24c:	e011      	b.n	800d272 <_printf_i+0xfa>
 800d24e:	6821      	ldr	r1, [r4, #0]
 800d250:	6833      	ldr	r3, [r6, #0]
 800d252:	0608      	lsls	r0, r1, #24
 800d254:	f853 5b04 	ldr.w	r5, [r3], #4
 800d258:	d402      	bmi.n	800d260 <_printf_i+0xe8>
 800d25a:	0649      	lsls	r1, r1, #25
 800d25c:	bf48      	it	mi
 800d25e:	b2ad      	uxthmi	r5, r5
 800d260:	2f6f      	cmp	r7, #111	@ 0x6f
 800d262:	4852      	ldr	r0, [pc, #328]	@ (800d3ac <_printf_i+0x234>)
 800d264:	6033      	str	r3, [r6, #0]
 800d266:	bf14      	ite	ne
 800d268:	230a      	movne	r3, #10
 800d26a:	2308      	moveq	r3, #8
 800d26c:	2100      	movs	r1, #0
 800d26e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d272:	6866      	ldr	r6, [r4, #4]
 800d274:	60a6      	str	r6, [r4, #8]
 800d276:	2e00      	cmp	r6, #0
 800d278:	db05      	blt.n	800d286 <_printf_i+0x10e>
 800d27a:	6821      	ldr	r1, [r4, #0]
 800d27c:	432e      	orrs	r6, r5
 800d27e:	f021 0104 	bic.w	r1, r1, #4
 800d282:	6021      	str	r1, [r4, #0]
 800d284:	d04b      	beq.n	800d31e <_printf_i+0x1a6>
 800d286:	4616      	mov	r6, r2
 800d288:	fbb5 f1f3 	udiv	r1, r5, r3
 800d28c:	fb03 5711 	mls	r7, r3, r1, r5
 800d290:	5dc7      	ldrb	r7, [r0, r7]
 800d292:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d296:	462f      	mov	r7, r5
 800d298:	42bb      	cmp	r3, r7
 800d29a:	460d      	mov	r5, r1
 800d29c:	d9f4      	bls.n	800d288 <_printf_i+0x110>
 800d29e:	2b08      	cmp	r3, #8
 800d2a0:	d10b      	bne.n	800d2ba <_printf_i+0x142>
 800d2a2:	6823      	ldr	r3, [r4, #0]
 800d2a4:	07df      	lsls	r7, r3, #31
 800d2a6:	d508      	bpl.n	800d2ba <_printf_i+0x142>
 800d2a8:	6923      	ldr	r3, [r4, #16]
 800d2aa:	6861      	ldr	r1, [r4, #4]
 800d2ac:	4299      	cmp	r1, r3
 800d2ae:	bfde      	ittt	le
 800d2b0:	2330      	movle	r3, #48	@ 0x30
 800d2b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d2b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d2ba:	1b92      	subs	r2, r2, r6
 800d2bc:	6122      	str	r2, [r4, #16]
 800d2be:	f8cd a000 	str.w	sl, [sp]
 800d2c2:	464b      	mov	r3, r9
 800d2c4:	aa03      	add	r2, sp, #12
 800d2c6:	4621      	mov	r1, r4
 800d2c8:	4640      	mov	r0, r8
 800d2ca:	f7ff fee7 	bl	800d09c <_printf_common>
 800d2ce:	3001      	adds	r0, #1
 800d2d0:	d14a      	bne.n	800d368 <_printf_i+0x1f0>
 800d2d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d2d6:	b004      	add	sp, #16
 800d2d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2dc:	6823      	ldr	r3, [r4, #0]
 800d2de:	f043 0320 	orr.w	r3, r3, #32
 800d2e2:	6023      	str	r3, [r4, #0]
 800d2e4:	4832      	ldr	r0, [pc, #200]	@ (800d3b0 <_printf_i+0x238>)
 800d2e6:	2778      	movs	r7, #120	@ 0x78
 800d2e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d2ec:	6823      	ldr	r3, [r4, #0]
 800d2ee:	6831      	ldr	r1, [r6, #0]
 800d2f0:	061f      	lsls	r7, r3, #24
 800d2f2:	f851 5b04 	ldr.w	r5, [r1], #4
 800d2f6:	d402      	bmi.n	800d2fe <_printf_i+0x186>
 800d2f8:	065f      	lsls	r7, r3, #25
 800d2fa:	bf48      	it	mi
 800d2fc:	b2ad      	uxthmi	r5, r5
 800d2fe:	6031      	str	r1, [r6, #0]
 800d300:	07d9      	lsls	r1, r3, #31
 800d302:	bf44      	itt	mi
 800d304:	f043 0320 	orrmi.w	r3, r3, #32
 800d308:	6023      	strmi	r3, [r4, #0]
 800d30a:	b11d      	cbz	r5, 800d314 <_printf_i+0x19c>
 800d30c:	2310      	movs	r3, #16
 800d30e:	e7ad      	b.n	800d26c <_printf_i+0xf4>
 800d310:	4826      	ldr	r0, [pc, #152]	@ (800d3ac <_printf_i+0x234>)
 800d312:	e7e9      	b.n	800d2e8 <_printf_i+0x170>
 800d314:	6823      	ldr	r3, [r4, #0]
 800d316:	f023 0320 	bic.w	r3, r3, #32
 800d31a:	6023      	str	r3, [r4, #0]
 800d31c:	e7f6      	b.n	800d30c <_printf_i+0x194>
 800d31e:	4616      	mov	r6, r2
 800d320:	e7bd      	b.n	800d29e <_printf_i+0x126>
 800d322:	6833      	ldr	r3, [r6, #0]
 800d324:	6825      	ldr	r5, [r4, #0]
 800d326:	6961      	ldr	r1, [r4, #20]
 800d328:	1d18      	adds	r0, r3, #4
 800d32a:	6030      	str	r0, [r6, #0]
 800d32c:	062e      	lsls	r6, r5, #24
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	d501      	bpl.n	800d336 <_printf_i+0x1be>
 800d332:	6019      	str	r1, [r3, #0]
 800d334:	e002      	b.n	800d33c <_printf_i+0x1c4>
 800d336:	0668      	lsls	r0, r5, #25
 800d338:	d5fb      	bpl.n	800d332 <_printf_i+0x1ba>
 800d33a:	8019      	strh	r1, [r3, #0]
 800d33c:	2300      	movs	r3, #0
 800d33e:	6123      	str	r3, [r4, #16]
 800d340:	4616      	mov	r6, r2
 800d342:	e7bc      	b.n	800d2be <_printf_i+0x146>
 800d344:	6833      	ldr	r3, [r6, #0]
 800d346:	1d1a      	adds	r2, r3, #4
 800d348:	6032      	str	r2, [r6, #0]
 800d34a:	681e      	ldr	r6, [r3, #0]
 800d34c:	6862      	ldr	r2, [r4, #4]
 800d34e:	2100      	movs	r1, #0
 800d350:	4630      	mov	r0, r6
 800d352:	f7f2 ff65 	bl	8000220 <memchr>
 800d356:	b108      	cbz	r0, 800d35c <_printf_i+0x1e4>
 800d358:	1b80      	subs	r0, r0, r6
 800d35a:	6060      	str	r0, [r4, #4]
 800d35c:	6863      	ldr	r3, [r4, #4]
 800d35e:	6123      	str	r3, [r4, #16]
 800d360:	2300      	movs	r3, #0
 800d362:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d366:	e7aa      	b.n	800d2be <_printf_i+0x146>
 800d368:	6923      	ldr	r3, [r4, #16]
 800d36a:	4632      	mov	r2, r6
 800d36c:	4649      	mov	r1, r9
 800d36e:	4640      	mov	r0, r8
 800d370:	47d0      	blx	sl
 800d372:	3001      	adds	r0, #1
 800d374:	d0ad      	beq.n	800d2d2 <_printf_i+0x15a>
 800d376:	6823      	ldr	r3, [r4, #0]
 800d378:	079b      	lsls	r3, r3, #30
 800d37a:	d413      	bmi.n	800d3a4 <_printf_i+0x22c>
 800d37c:	68e0      	ldr	r0, [r4, #12]
 800d37e:	9b03      	ldr	r3, [sp, #12]
 800d380:	4298      	cmp	r0, r3
 800d382:	bfb8      	it	lt
 800d384:	4618      	movlt	r0, r3
 800d386:	e7a6      	b.n	800d2d6 <_printf_i+0x15e>
 800d388:	2301      	movs	r3, #1
 800d38a:	4632      	mov	r2, r6
 800d38c:	4649      	mov	r1, r9
 800d38e:	4640      	mov	r0, r8
 800d390:	47d0      	blx	sl
 800d392:	3001      	adds	r0, #1
 800d394:	d09d      	beq.n	800d2d2 <_printf_i+0x15a>
 800d396:	3501      	adds	r5, #1
 800d398:	68e3      	ldr	r3, [r4, #12]
 800d39a:	9903      	ldr	r1, [sp, #12]
 800d39c:	1a5b      	subs	r3, r3, r1
 800d39e:	42ab      	cmp	r3, r5
 800d3a0:	dcf2      	bgt.n	800d388 <_printf_i+0x210>
 800d3a2:	e7eb      	b.n	800d37c <_printf_i+0x204>
 800d3a4:	2500      	movs	r5, #0
 800d3a6:	f104 0619 	add.w	r6, r4, #25
 800d3aa:	e7f5      	b.n	800d398 <_printf_i+0x220>
 800d3ac:	080113b7 	.word	0x080113b7
 800d3b0:	080113c8 	.word	0x080113c8

0800d3b4 <_scanf_float>:
 800d3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3b8:	b087      	sub	sp, #28
 800d3ba:	4691      	mov	r9, r2
 800d3bc:	9303      	str	r3, [sp, #12]
 800d3be:	688b      	ldr	r3, [r1, #8]
 800d3c0:	1e5a      	subs	r2, r3, #1
 800d3c2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d3c6:	bf81      	itttt	hi
 800d3c8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d3cc:	eb03 0b05 	addhi.w	fp, r3, r5
 800d3d0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d3d4:	608b      	strhi	r3, [r1, #8]
 800d3d6:	680b      	ldr	r3, [r1, #0]
 800d3d8:	460a      	mov	r2, r1
 800d3da:	f04f 0500 	mov.w	r5, #0
 800d3de:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d3e2:	f842 3b1c 	str.w	r3, [r2], #28
 800d3e6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d3ea:	4680      	mov	r8, r0
 800d3ec:	460c      	mov	r4, r1
 800d3ee:	bf98      	it	ls
 800d3f0:	f04f 0b00 	movls.w	fp, #0
 800d3f4:	9201      	str	r2, [sp, #4]
 800d3f6:	4616      	mov	r6, r2
 800d3f8:	46aa      	mov	sl, r5
 800d3fa:	462f      	mov	r7, r5
 800d3fc:	9502      	str	r5, [sp, #8]
 800d3fe:	68a2      	ldr	r2, [r4, #8]
 800d400:	b15a      	cbz	r2, 800d41a <_scanf_float+0x66>
 800d402:	f8d9 3000 	ldr.w	r3, [r9]
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	2b4e      	cmp	r3, #78	@ 0x4e
 800d40a:	d863      	bhi.n	800d4d4 <_scanf_float+0x120>
 800d40c:	2b40      	cmp	r3, #64	@ 0x40
 800d40e:	d83b      	bhi.n	800d488 <_scanf_float+0xd4>
 800d410:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d414:	b2c8      	uxtb	r0, r1
 800d416:	280e      	cmp	r0, #14
 800d418:	d939      	bls.n	800d48e <_scanf_float+0xda>
 800d41a:	b11f      	cbz	r7, 800d424 <_scanf_float+0x70>
 800d41c:	6823      	ldr	r3, [r4, #0]
 800d41e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d422:	6023      	str	r3, [r4, #0]
 800d424:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d428:	f1ba 0f01 	cmp.w	sl, #1
 800d42c:	f200 8114 	bhi.w	800d658 <_scanf_float+0x2a4>
 800d430:	9b01      	ldr	r3, [sp, #4]
 800d432:	429e      	cmp	r6, r3
 800d434:	f200 8105 	bhi.w	800d642 <_scanf_float+0x28e>
 800d438:	2001      	movs	r0, #1
 800d43a:	b007      	add	sp, #28
 800d43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d440:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d444:	2a0d      	cmp	r2, #13
 800d446:	d8e8      	bhi.n	800d41a <_scanf_float+0x66>
 800d448:	a101      	add	r1, pc, #4	@ (adr r1, 800d450 <_scanf_float+0x9c>)
 800d44a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d44e:	bf00      	nop
 800d450:	0800d599 	.word	0x0800d599
 800d454:	0800d41b 	.word	0x0800d41b
 800d458:	0800d41b 	.word	0x0800d41b
 800d45c:	0800d41b 	.word	0x0800d41b
 800d460:	0800d5f5 	.word	0x0800d5f5
 800d464:	0800d5cf 	.word	0x0800d5cf
 800d468:	0800d41b 	.word	0x0800d41b
 800d46c:	0800d41b 	.word	0x0800d41b
 800d470:	0800d5a7 	.word	0x0800d5a7
 800d474:	0800d41b 	.word	0x0800d41b
 800d478:	0800d41b 	.word	0x0800d41b
 800d47c:	0800d41b 	.word	0x0800d41b
 800d480:	0800d41b 	.word	0x0800d41b
 800d484:	0800d563 	.word	0x0800d563
 800d488:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d48c:	e7da      	b.n	800d444 <_scanf_float+0x90>
 800d48e:	290e      	cmp	r1, #14
 800d490:	d8c3      	bhi.n	800d41a <_scanf_float+0x66>
 800d492:	a001      	add	r0, pc, #4	@ (adr r0, 800d498 <_scanf_float+0xe4>)
 800d494:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d498:	0800d553 	.word	0x0800d553
 800d49c:	0800d41b 	.word	0x0800d41b
 800d4a0:	0800d553 	.word	0x0800d553
 800d4a4:	0800d5e3 	.word	0x0800d5e3
 800d4a8:	0800d41b 	.word	0x0800d41b
 800d4ac:	0800d4f5 	.word	0x0800d4f5
 800d4b0:	0800d539 	.word	0x0800d539
 800d4b4:	0800d539 	.word	0x0800d539
 800d4b8:	0800d539 	.word	0x0800d539
 800d4bc:	0800d539 	.word	0x0800d539
 800d4c0:	0800d539 	.word	0x0800d539
 800d4c4:	0800d539 	.word	0x0800d539
 800d4c8:	0800d539 	.word	0x0800d539
 800d4cc:	0800d539 	.word	0x0800d539
 800d4d0:	0800d539 	.word	0x0800d539
 800d4d4:	2b6e      	cmp	r3, #110	@ 0x6e
 800d4d6:	d809      	bhi.n	800d4ec <_scanf_float+0x138>
 800d4d8:	2b60      	cmp	r3, #96	@ 0x60
 800d4da:	d8b1      	bhi.n	800d440 <_scanf_float+0x8c>
 800d4dc:	2b54      	cmp	r3, #84	@ 0x54
 800d4de:	d07b      	beq.n	800d5d8 <_scanf_float+0x224>
 800d4e0:	2b59      	cmp	r3, #89	@ 0x59
 800d4e2:	d19a      	bne.n	800d41a <_scanf_float+0x66>
 800d4e4:	2d07      	cmp	r5, #7
 800d4e6:	d198      	bne.n	800d41a <_scanf_float+0x66>
 800d4e8:	2508      	movs	r5, #8
 800d4ea:	e02f      	b.n	800d54c <_scanf_float+0x198>
 800d4ec:	2b74      	cmp	r3, #116	@ 0x74
 800d4ee:	d073      	beq.n	800d5d8 <_scanf_float+0x224>
 800d4f0:	2b79      	cmp	r3, #121	@ 0x79
 800d4f2:	e7f6      	b.n	800d4e2 <_scanf_float+0x12e>
 800d4f4:	6821      	ldr	r1, [r4, #0]
 800d4f6:	05c8      	lsls	r0, r1, #23
 800d4f8:	d51e      	bpl.n	800d538 <_scanf_float+0x184>
 800d4fa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d4fe:	6021      	str	r1, [r4, #0]
 800d500:	3701      	adds	r7, #1
 800d502:	f1bb 0f00 	cmp.w	fp, #0
 800d506:	d003      	beq.n	800d510 <_scanf_float+0x15c>
 800d508:	3201      	adds	r2, #1
 800d50a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d50e:	60a2      	str	r2, [r4, #8]
 800d510:	68a3      	ldr	r3, [r4, #8]
 800d512:	3b01      	subs	r3, #1
 800d514:	60a3      	str	r3, [r4, #8]
 800d516:	6923      	ldr	r3, [r4, #16]
 800d518:	3301      	adds	r3, #1
 800d51a:	6123      	str	r3, [r4, #16]
 800d51c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d520:	3b01      	subs	r3, #1
 800d522:	2b00      	cmp	r3, #0
 800d524:	f8c9 3004 	str.w	r3, [r9, #4]
 800d528:	f340 8082 	ble.w	800d630 <_scanf_float+0x27c>
 800d52c:	f8d9 3000 	ldr.w	r3, [r9]
 800d530:	3301      	adds	r3, #1
 800d532:	f8c9 3000 	str.w	r3, [r9]
 800d536:	e762      	b.n	800d3fe <_scanf_float+0x4a>
 800d538:	eb1a 0105 	adds.w	r1, sl, r5
 800d53c:	f47f af6d 	bne.w	800d41a <_scanf_float+0x66>
 800d540:	6822      	ldr	r2, [r4, #0]
 800d542:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d546:	6022      	str	r2, [r4, #0]
 800d548:	460d      	mov	r5, r1
 800d54a:	468a      	mov	sl, r1
 800d54c:	f806 3b01 	strb.w	r3, [r6], #1
 800d550:	e7de      	b.n	800d510 <_scanf_float+0x15c>
 800d552:	6822      	ldr	r2, [r4, #0]
 800d554:	0610      	lsls	r0, r2, #24
 800d556:	f57f af60 	bpl.w	800d41a <_scanf_float+0x66>
 800d55a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d55e:	6022      	str	r2, [r4, #0]
 800d560:	e7f4      	b.n	800d54c <_scanf_float+0x198>
 800d562:	f1ba 0f00 	cmp.w	sl, #0
 800d566:	d10c      	bne.n	800d582 <_scanf_float+0x1ce>
 800d568:	b977      	cbnz	r7, 800d588 <_scanf_float+0x1d4>
 800d56a:	6822      	ldr	r2, [r4, #0]
 800d56c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d570:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d574:	d108      	bne.n	800d588 <_scanf_float+0x1d4>
 800d576:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d57a:	6022      	str	r2, [r4, #0]
 800d57c:	f04f 0a01 	mov.w	sl, #1
 800d580:	e7e4      	b.n	800d54c <_scanf_float+0x198>
 800d582:	f1ba 0f02 	cmp.w	sl, #2
 800d586:	d050      	beq.n	800d62a <_scanf_float+0x276>
 800d588:	2d01      	cmp	r5, #1
 800d58a:	d002      	beq.n	800d592 <_scanf_float+0x1de>
 800d58c:	2d04      	cmp	r5, #4
 800d58e:	f47f af44 	bne.w	800d41a <_scanf_float+0x66>
 800d592:	3501      	adds	r5, #1
 800d594:	b2ed      	uxtb	r5, r5
 800d596:	e7d9      	b.n	800d54c <_scanf_float+0x198>
 800d598:	f1ba 0f01 	cmp.w	sl, #1
 800d59c:	f47f af3d 	bne.w	800d41a <_scanf_float+0x66>
 800d5a0:	f04f 0a02 	mov.w	sl, #2
 800d5a4:	e7d2      	b.n	800d54c <_scanf_float+0x198>
 800d5a6:	b975      	cbnz	r5, 800d5c6 <_scanf_float+0x212>
 800d5a8:	2f00      	cmp	r7, #0
 800d5aa:	f47f af37 	bne.w	800d41c <_scanf_float+0x68>
 800d5ae:	6822      	ldr	r2, [r4, #0]
 800d5b0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d5b4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d5b8:	f040 8103 	bne.w	800d7c2 <_scanf_float+0x40e>
 800d5bc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d5c0:	6022      	str	r2, [r4, #0]
 800d5c2:	2501      	movs	r5, #1
 800d5c4:	e7c2      	b.n	800d54c <_scanf_float+0x198>
 800d5c6:	2d03      	cmp	r5, #3
 800d5c8:	d0e3      	beq.n	800d592 <_scanf_float+0x1de>
 800d5ca:	2d05      	cmp	r5, #5
 800d5cc:	e7df      	b.n	800d58e <_scanf_float+0x1da>
 800d5ce:	2d02      	cmp	r5, #2
 800d5d0:	f47f af23 	bne.w	800d41a <_scanf_float+0x66>
 800d5d4:	2503      	movs	r5, #3
 800d5d6:	e7b9      	b.n	800d54c <_scanf_float+0x198>
 800d5d8:	2d06      	cmp	r5, #6
 800d5da:	f47f af1e 	bne.w	800d41a <_scanf_float+0x66>
 800d5de:	2507      	movs	r5, #7
 800d5e0:	e7b4      	b.n	800d54c <_scanf_float+0x198>
 800d5e2:	6822      	ldr	r2, [r4, #0]
 800d5e4:	0591      	lsls	r1, r2, #22
 800d5e6:	f57f af18 	bpl.w	800d41a <_scanf_float+0x66>
 800d5ea:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d5ee:	6022      	str	r2, [r4, #0]
 800d5f0:	9702      	str	r7, [sp, #8]
 800d5f2:	e7ab      	b.n	800d54c <_scanf_float+0x198>
 800d5f4:	6822      	ldr	r2, [r4, #0]
 800d5f6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d5fa:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d5fe:	d005      	beq.n	800d60c <_scanf_float+0x258>
 800d600:	0550      	lsls	r0, r2, #21
 800d602:	f57f af0a 	bpl.w	800d41a <_scanf_float+0x66>
 800d606:	2f00      	cmp	r7, #0
 800d608:	f000 80db 	beq.w	800d7c2 <_scanf_float+0x40e>
 800d60c:	0591      	lsls	r1, r2, #22
 800d60e:	bf58      	it	pl
 800d610:	9902      	ldrpl	r1, [sp, #8]
 800d612:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d616:	bf58      	it	pl
 800d618:	1a79      	subpl	r1, r7, r1
 800d61a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d61e:	bf58      	it	pl
 800d620:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d624:	6022      	str	r2, [r4, #0]
 800d626:	2700      	movs	r7, #0
 800d628:	e790      	b.n	800d54c <_scanf_float+0x198>
 800d62a:	f04f 0a03 	mov.w	sl, #3
 800d62e:	e78d      	b.n	800d54c <_scanf_float+0x198>
 800d630:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d634:	4649      	mov	r1, r9
 800d636:	4640      	mov	r0, r8
 800d638:	4798      	blx	r3
 800d63a:	2800      	cmp	r0, #0
 800d63c:	f43f aedf 	beq.w	800d3fe <_scanf_float+0x4a>
 800d640:	e6eb      	b.n	800d41a <_scanf_float+0x66>
 800d642:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d646:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d64a:	464a      	mov	r2, r9
 800d64c:	4640      	mov	r0, r8
 800d64e:	4798      	blx	r3
 800d650:	6923      	ldr	r3, [r4, #16]
 800d652:	3b01      	subs	r3, #1
 800d654:	6123      	str	r3, [r4, #16]
 800d656:	e6eb      	b.n	800d430 <_scanf_float+0x7c>
 800d658:	1e6b      	subs	r3, r5, #1
 800d65a:	2b06      	cmp	r3, #6
 800d65c:	d824      	bhi.n	800d6a8 <_scanf_float+0x2f4>
 800d65e:	2d02      	cmp	r5, #2
 800d660:	d836      	bhi.n	800d6d0 <_scanf_float+0x31c>
 800d662:	9b01      	ldr	r3, [sp, #4]
 800d664:	429e      	cmp	r6, r3
 800d666:	f67f aee7 	bls.w	800d438 <_scanf_float+0x84>
 800d66a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d66e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d672:	464a      	mov	r2, r9
 800d674:	4640      	mov	r0, r8
 800d676:	4798      	blx	r3
 800d678:	6923      	ldr	r3, [r4, #16]
 800d67a:	3b01      	subs	r3, #1
 800d67c:	6123      	str	r3, [r4, #16]
 800d67e:	e7f0      	b.n	800d662 <_scanf_float+0x2ae>
 800d680:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d684:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d688:	464a      	mov	r2, r9
 800d68a:	4640      	mov	r0, r8
 800d68c:	4798      	blx	r3
 800d68e:	6923      	ldr	r3, [r4, #16]
 800d690:	3b01      	subs	r3, #1
 800d692:	6123      	str	r3, [r4, #16]
 800d694:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d698:	fa5f fa8a 	uxtb.w	sl, sl
 800d69c:	f1ba 0f02 	cmp.w	sl, #2
 800d6a0:	d1ee      	bne.n	800d680 <_scanf_float+0x2cc>
 800d6a2:	3d03      	subs	r5, #3
 800d6a4:	b2ed      	uxtb	r5, r5
 800d6a6:	1b76      	subs	r6, r6, r5
 800d6a8:	6823      	ldr	r3, [r4, #0]
 800d6aa:	05da      	lsls	r2, r3, #23
 800d6ac:	d530      	bpl.n	800d710 <_scanf_float+0x35c>
 800d6ae:	055b      	lsls	r3, r3, #21
 800d6b0:	d511      	bpl.n	800d6d6 <_scanf_float+0x322>
 800d6b2:	9b01      	ldr	r3, [sp, #4]
 800d6b4:	429e      	cmp	r6, r3
 800d6b6:	f67f aebf 	bls.w	800d438 <_scanf_float+0x84>
 800d6ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d6be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d6c2:	464a      	mov	r2, r9
 800d6c4:	4640      	mov	r0, r8
 800d6c6:	4798      	blx	r3
 800d6c8:	6923      	ldr	r3, [r4, #16]
 800d6ca:	3b01      	subs	r3, #1
 800d6cc:	6123      	str	r3, [r4, #16]
 800d6ce:	e7f0      	b.n	800d6b2 <_scanf_float+0x2fe>
 800d6d0:	46aa      	mov	sl, r5
 800d6d2:	46b3      	mov	fp, r6
 800d6d4:	e7de      	b.n	800d694 <_scanf_float+0x2e0>
 800d6d6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d6da:	6923      	ldr	r3, [r4, #16]
 800d6dc:	2965      	cmp	r1, #101	@ 0x65
 800d6de:	f103 33ff 	add.w	r3, r3, #4294967295
 800d6e2:	f106 35ff 	add.w	r5, r6, #4294967295
 800d6e6:	6123      	str	r3, [r4, #16]
 800d6e8:	d00c      	beq.n	800d704 <_scanf_float+0x350>
 800d6ea:	2945      	cmp	r1, #69	@ 0x45
 800d6ec:	d00a      	beq.n	800d704 <_scanf_float+0x350>
 800d6ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d6f2:	464a      	mov	r2, r9
 800d6f4:	4640      	mov	r0, r8
 800d6f6:	4798      	blx	r3
 800d6f8:	6923      	ldr	r3, [r4, #16]
 800d6fa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d6fe:	3b01      	subs	r3, #1
 800d700:	1eb5      	subs	r5, r6, #2
 800d702:	6123      	str	r3, [r4, #16]
 800d704:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d708:	464a      	mov	r2, r9
 800d70a:	4640      	mov	r0, r8
 800d70c:	4798      	blx	r3
 800d70e:	462e      	mov	r6, r5
 800d710:	6822      	ldr	r2, [r4, #0]
 800d712:	f012 0210 	ands.w	r2, r2, #16
 800d716:	d001      	beq.n	800d71c <_scanf_float+0x368>
 800d718:	2000      	movs	r0, #0
 800d71a:	e68e      	b.n	800d43a <_scanf_float+0x86>
 800d71c:	7032      	strb	r2, [r6, #0]
 800d71e:	6823      	ldr	r3, [r4, #0]
 800d720:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d724:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d728:	d125      	bne.n	800d776 <_scanf_float+0x3c2>
 800d72a:	9b02      	ldr	r3, [sp, #8]
 800d72c:	429f      	cmp	r7, r3
 800d72e:	d00a      	beq.n	800d746 <_scanf_float+0x392>
 800d730:	1bda      	subs	r2, r3, r7
 800d732:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d736:	429e      	cmp	r6, r3
 800d738:	bf28      	it	cs
 800d73a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d73e:	4922      	ldr	r1, [pc, #136]	@ (800d7c8 <_scanf_float+0x414>)
 800d740:	4630      	mov	r0, r6
 800d742:	f000 f919 	bl	800d978 <siprintf>
 800d746:	9901      	ldr	r1, [sp, #4]
 800d748:	2200      	movs	r2, #0
 800d74a:	4640      	mov	r0, r8
 800d74c:	f002 fc14 	bl	800ff78 <_strtod_r>
 800d750:	9b03      	ldr	r3, [sp, #12]
 800d752:	6821      	ldr	r1, [r4, #0]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f011 0f02 	tst.w	r1, #2
 800d75a:	ec57 6b10 	vmov	r6, r7, d0
 800d75e:	f103 0204 	add.w	r2, r3, #4
 800d762:	d015      	beq.n	800d790 <_scanf_float+0x3dc>
 800d764:	9903      	ldr	r1, [sp, #12]
 800d766:	600a      	str	r2, [r1, #0]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	e9c3 6700 	strd	r6, r7, [r3]
 800d76e:	68e3      	ldr	r3, [r4, #12]
 800d770:	3301      	adds	r3, #1
 800d772:	60e3      	str	r3, [r4, #12]
 800d774:	e7d0      	b.n	800d718 <_scanf_float+0x364>
 800d776:	9b04      	ldr	r3, [sp, #16]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d0e4      	beq.n	800d746 <_scanf_float+0x392>
 800d77c:	9905      	ldr	r1, [sp, #20]
 800d77e:	230a      	movs	r3, #10
 800d780:	3101      	adds	r1, #1
 800d782:	4640      	mov	r0, r8
 800d784:	f002 fc78 	bl	8010078 <_strtol_r>
 800d788:	9b04      	ldr	r3, [sp, #16]
 800d78a:	9e05      	ldr	r6, [sp, #20]
 800d78c:	1ac2      	subs	r2, r0, r3
 800d78e:	e7d0      	b.n	800d732 <_scanf_float+0x37e>
 800d790:	f011 0f04 	tst.w	r1, #4
 800d794:	9903      	ldr	r1, [sp, #12]
 800d796:	600a      	str	r2, [r1, #0]
 800d798:	d1e6      	bne.n	800d768 <_scanf_float+0x3b4>
 800d79a:	681d      	ldr	r5, [r3, #0]
 800d79c:	4632      	mov	r2, r6
 800d79e:	463b      	mov	r3, r7
 800d7a0:	4630      	mov	r0, r6
 800d7a2:	4639      	mov	r1, r7
 800d7a4:	f7f3 f9ea 	bl	8000b7c <__aeabi_dcmpun>
 800d7a8:	b128      	cbz	r0, 800d7b6 <_scanf_float+0x402>
 800d7aa:	4808      	ldr	r0, [pc, #32]	@ (800d7cc <_scanf_float+0x418>)
 800d7ac:	f000 f9d8 	bl	800db60 <nanf>
 800d7b0:	ed85 0a00 	vstr	s0, [r5]
 800d7b4:	e7db      	b.n	800d76e <_scanf_float+0x3ba>
 800d7b6:	4630      	mov	r0, r6
 800d7b8:	4639      	mov	r1, r7
 800d7ba:	f7f3 fa3d 	bl	8000c38 <__aeabi_d2f>
 800d7be:	6028      	str	r0, [r5, #0]
 800d7c0:	e7d5      	b.n	800d76e <_scanf_float+0x3ba>
 800d7c2:	2700      	movs	r7, #0
 800d7c4:	e62e      	b.n	800d424 <_scanf_float+0x70>
 800d7c6:	bf00      	nop
 800d7c8:	080113d9 	.word	0x080113d9
 800d7cc:	0801151a 	.word	0x0801151a

0800d7d0 <std>:
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	b510      	push	{r4, lr}
 800d7d4:	4604      	mov	r4, r0
 800d7d6:	e9c0 3300 	strd	r3, r3, [r0]
 800d7da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d7de:	6083      	str	r3, [r0, #8]
 800d7e0:	8181      	strh	r1, [r0, #12]
 800d7e2:	6643      	str	r3, [r0, #100]	@ 0x64
 800d7e4:	81c2      	strh	r2, [r0, #14]
 800d7e6:	6183      	str	r3, [r0, #24]
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	2208      	movs	r2, #8
 800d7ec:	305c      	adds	r0, #92	@ 0x5c
 800d7ee:	f000 f928 	bl	800da42 <memset>
 800d7f2:	4b0d      	ldr	r3, [pc, #52]	@ (800d828 <std+0x58>)
 800d7f4:	6263      	str	r3, [r4, #36]	@ 0x24
 800d7f6:	4b0d      	ldr	r3, [pc, #52]	@ (800d82c <std+0x5c>)
 800d7f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d7fa:	4b0d      	ldr	r3, [pc, #52]	@ (800d830 <std+0x60>)
 800d7fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d7fe:	4b0d      	ldr	r3, [pc, #52]	@ (800d834 <std+0x64>)
 800d800:	6323      	str	r3, [r4, #48]	@ 0x30
 800d802:	4b0d      	ldr	r3, [pc, #52]	@ (800d838 <std+0x68>)
 800d804:	6224      	str	r4, [r4, #32]
 800d806:	429c      	cmp	r4, r3
 800d808:	d006      	beq.n	800d818 <std+0x48>
 800d80a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d80e:	4294      	cmp	r4, r2
 800d810:	d002      	beq.n	800d818 <std+0x48>
 800d812:	33d0      	adds	r3, #208	@ 0xd0
 800d814:	429c      	cmp	r4, r3
 800d816:	d105      	bne.n	800d824 <std+0x54>
 800d818:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d81c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d820:	f000 b98c 	b.w	800db3c <__retarget_lock_init_recursive>
 800d824:	bd10      	pop	{r4, pc}
 800d826:	bf00      	nop
 800d828:	0800d9bd 	.word	0x0800d9bd
 800d82c:	0800d9df 	.word	0x0800d9df
 800d830:	0800da17 	.word	0x0800da17
 800d834:	0800da3b 	.word	0x0800da3b
 800d838:	20002128 	.word	0x20002128

0800d83c <stdio_exit_handler>:
 800d83c:	4a02      	ldr	r2, [pc, #8]	@ (800d848 <stdio_exit_handler+0xc>)
 800d83e:	4903      	ldr	r1, [pc, #12]	@ (800d84c <stdio_exit_handler+0x10>)
 800d840:	4803      	ldr	r0, [pc, #12]	@ (800d850 <stdio_exit_handler+0x14>)
 800d842:	f000 b87b 	b.w	800d93c <_fwalk_sglue>
 800d846:	bf00      	nop
 800d848:	20000184 	.word	0x20000184
 800d84c:	080106b9 	.word	0x080106b9
 800d850:	20000194 	.word	0x20000194

0800d854 <cleanup_stdio>:
 800d854:	6841      	ldr	r1, [r0, #4]
 800d856:	4b0c      	ldr	r3, [pc, #48]	@ (800d888 <cleanup_stdio+0x34>)
 800d858:	4299      	cmp	r1, r3
 800d85a:	b510      	push	{r4, lr}
 800d85c:	4604      	mov	r4, r0
 800d85e:	d001      	beq.n	800d864 <cleanup_stdio+0x10>
 800d860:	f002 ff2a 	bl	80106b8 <_fflush_r>
 800d864:	68a1      	ldr	r1, [r4, #8]
 800d866:	4b09      	ldr	r3, [pc, #36]	@ (800d88c <cleanup_stdio+0x38>)
 800d868:	4299      	cmp	r1, r3
 800d86a:	d002      	beq.n	800d872 <cleanup_stdio+0x1e>
 800d86c:	4620      	mov	r0, r4
 800d86e:	f002 ff23 	bl	80106b8 <_fflush_r>
 800d872:	68e1      	ldr	r1, [r4, #12]
 800d874:	4b06      	ldr	r3, [pc, #24]	@ (800d890 <cleanup_stdio+0x3c>)
 800d876:	4299      	cmp	r1, r3
 800d878:	d004      	beq.n	800d884 <cleanup_stdio+0x30>
 800d87a:	4620      	mov	r0, r4
 800d87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d880:	f002 bf1a 	b.w	80106b8 <_fflush_r>
 800d884:	bd10      	pop	{r4, pc}
 800d886:	bf00      	nop
 800d888:	20002128 	.word	0x20002128
 800d88c:	20002190 	.word	0x20002190
 800d890:	200021f8 	.word	0x200021f8

0800d894 <global_stdio_init.part.0>:
 800d894:	b510      	push	{r4, lr}
 800d896:	4b0b      	ldr	r3, [pc, #44]	@ (800d8c4 <global_stdio_init.part.0+0x30>)
 800d898:	4c0b      	ldr	r4, [pc, #44]	@ (800d8c8 <global_stdio_init.part.0+0x34>)
 800d89a:	4a0c      	ldr	r2, [pc, #48]	@ (800d8cc <global_stdio_init.part.0+0x38>)
 800d89c:	601a      	str	r2, [r3, #0]
 800d89e:	4620      	mov	r0, r4
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	2104      	movs	r1, #4
 800d8a4:	f7ff ff94 	bl	800d7d0 <std>
 800d8a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d8ac:	2201      	movs	r2, #1
 800d8ae:	2109      	movs	r1, #9
 800d8b0:	f7ff ff8e 	bl	800d7d0 <std>
 800d8b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d8b8:	2202      	movs	r2, #2
 800d8ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8be:	2112      	movs	r1, #18
 800d8c0:	f7ff bf86 	b.w	800d7d0 <std>
 800d8c4:	20002260 	.word	0x20002260
 800d8c8:	20002128 	.word	0x20002128
 800d8cc:	0800d83d 	.word	0x0800d83d

0800d8d0 <__sfp_lock_acquire>:
 800d8d0:	4801      	ldr	r0, [pc, #4]	@ (800d8d8 <__sfp_lock_acquire+0x8>)
 800d8d2:	f000 b934 	b.w	800db3e <__retarget_lock_acquire_recursive>
 800d8d6:	bf00      	nop
 800d8d8:	20002269 	.word	0x20002269

0800d8dc <__sfp_lock_release>:
 800d8dc:	4801      	ldr	r0, [pc, #4]	@ (800d8e4 <__sfp_lock_release+0x8>)
 800d8de:	f000 b92f 	b.w	800db40 <__retarget_lock_release_recursive>
 800d8e2:	bf00      	nop
 800d8e4:	20002269 	.word	0x20002269

0800d8e8 <__sinit>:
 800d8e8:	b510      	push	{r4, lr}
 800d8ea:	4604      	mov	r4, r0
 800d8ec:	f7ff fff0 	bl	800d8d0 <__sfp_lock_acquire>
 800d8f0:	6a23      	ldr	r3, [r4, #32]
 800d8f2:	b11b      	cbz	r3, 800d8fc <__sinit+0x14>
 800d8f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8f8:	f7ff bff0 	b.w	800d8dc <__sfp_lock_release>
 800d8fc:	4b04      	ldr	r3, [pc, #16]	@ (800d910 <__sinit+0x28>)
 800d8fe:	6223      	str	r3, [r4, #32]
 800d900:	4b04      	ldr	r3, [pc, #16]	@ (800d914 <__sinit+0x2c>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d1f5      	bne.n	800d8f4 <__sinit+0xc>
 800d908:	f7ff ffc4 	bl	800d894 <global_stdio_init.part.0>
 800d90c:	e7f2      	b.n	800d8f4 <__sinit+0xc>
 800d90e:	bf00      	nop
 800d910:	0800d855 	.word	0x0800d855
 800d914:	20002260 	.word	0x20002260

0800d918 <fiprintf>:
 800d918:	b40e      	push	{r1, r2, r3}
 800d91a:	b503      	push	{r0, r1, lr}
 800d91c:	4601      	mov	r1, r0
 800d91e:	ab03      	add	r3, sp, #12
 800d920:	4805      	ldr	r0, [pc, #20]	@ (800d938 <fiprintf+0x20>)
 800d922:	f853 2b04 	ldr.w	r2, [r3], #4
 800d926:	6800      	ldr	r0, [r0, #0]
 800d928:	9301      	str	r3, [sp, #4]
 800d92a:	f002 fd29 	bl	8010380 <_vfiprintf_r>
 800d92e:	b002      	add	sp, #8
 800d930:	f85d eb04 	ldr.w	lr, [sp], #4
 800d934:	b003      	add	sp, #12
 800d936:	4770      	bx	lr
 800d938:	20000190 	.word	0x20000190

0800d93c <_fwalk_sglue>:
 800d93c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d940:	4607      	mov	r7, r0
 800d942:	4688      	mov	r8, r1
 800d944:	4614      	mov	r4, r2
 800d946:	2600      	movs	r6, #0
 800d948:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d94c:	f1b9 0901 	subs.w	r9, r9, #1
 800d950:	d505      	bpl.n	800d95e <_fwalk_sglue+0x22>
 800d952:	6824      	ldr	r4, [r4, #0]
 800d954:	2c00      	cmp	r4, #0
 800d956:	d1f7      	bne.n	800d948 <_fwalk_sglue+0xc>
 800d958:	4630      	mov	r0, r6
 800d95a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d95e:	89ab      	ldrh	r3, [r5, #12]
 800d960:	2b01      	cmp	r3, #1
 800d962:	d907      	bls.n	800d974 <_fwalk_sglue+0x38>
 800d964:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d968:	3301      	adds	r3, #1
 800d96a:	d003      	beq.n	800d974 <_fwalk_sglue+0x38>
 800d96c:	4629      	mov	r1, r5
 800d96e:	4638      	mov	r0, r7
 800d970:	47c0      	blx	r8
 800d972:	4306      	orrs	r6, r0
 800d974:	3568      	adds	r5, #104	@ 0x68
 800d976:	e7e9      	b.n	800d94c <_fwalk_sglue+0x10>

0800d978 <siprintf>:
 800d978:	b40e      	push	{r1, r2, r3}
 800d97a:	b510      	push	{r4, lr}
 800d97c:	b09d      	sub	sp, #116	@ 0x74
 800d97e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d980:	9002      	str	r0, [sp, #8]
 800d982:	9006      	str	r0, [sp, #24]
 800d984:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d988:	480a      	ldr	r0, [pc, #40]	@ (800d9b4 <siprintf+0x3c>)
 800d98a:	9107      	str	r1, [sp, #28]
 800d98c:	9104      	str	r1, [sp, #16]
 800d98e:	490a      	ldr	r1, [pc, #40]	@ (800d9b8 <siprintf+0x40>)
 800d990:	f853 2b04 	ldr.w	r2, [r3], #4
 800d994:	9105      	str	r1, [sp, #20]
 800d996:	2400      	movs	r4, #0
 800d998:	a902      	add	r1, sp, #8
 800d99a:	6800      	ldr	r0, [r0, #0]
 800d99c:	9301      	str	r3, [sp, #4]
 800d99e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d9a0:	f002 fbc8 	bl	8010134 <_svfiprintf_r>
 800d9a4:	9b02      	ldr	r3, [sp, #8]
 800d9a6:	701c      	strb	r4, [r3, #0]
 800d9a8:	b01d      	add	sp, #116	@ 0x74
 800d9aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9ae:	b003      	add	sp, #12
 800d9b0:	4770      	bx	lr
 800d9b2:	bf00      	nop
 800d9b4:	20000190 	.word	0x20000190
 800d9b8:	ffff0208 	.word	0xffff0208

0800d9bc <__sread>:
 800d9bc:	b510      	push	{r4, lr}
 800d9be:	460c      	mov	r4, r1
 800d9c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9c4:	f000 f86c 	bl	800daa0 <_read_r>
 800d9c8:	2800      	cmp	r0, #0
 800d9ca:	bfab      	itete	ge
 800d9cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d9ce:	89a3      	ldrhlt	r3, [r4, #12]
 800d9d0:	181b      	addge	r3, r3, r0
 800d9d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d9d6:	bfac      	ite	ge
 800d9d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d9da:	81a3      	strhlt	r3, [r4, #12]
 800d9dc:	bd10      	pop	{r4, pc}

0800d9de <__swrite>:
 800d9de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9e2:	461f      	mov	r7, r3
 800d9e4:	898b      	ldrh	r3, [r1, #12]
 800d9e6:	05db      	lsls	r3, r3, #23
 800d9e8:	4605      	mov	r5, r0
 800d9ea:	460c      	mov	r4, r1
 800d9ec:	4616      	mov	r6, r2
 800d9ee:	d505      	bpl.n	800d9fc <__swrite+0x1e>
 800d9f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9f4:	2302      	movs	r3, #2
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	f000 f840 	bl	800da7c <_lseek_r>
 800d9fc:	89a3      	ldrh	r3, [r4, #12]
 800d9fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800da06:	81a3      	strh	r3, [r4, #12]
 800da08:	4632      	mov	r2, r6
 800da0a:	463b      	mov	r3, r7
 800da0c:	4628      	mov	r0, r5
 800da0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da12:	f000 b857 	b.w	800dac4 <_write_r>

0800da16 <__sseek>:
 800da16:	b510      	push	{r4, lr}
 800da18:	460c      	mov	r4, r1
 800da1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da1e:	f000 f82d 	bl	800da7c <_lseek_r>
 800da22:	1c43      	adds	r3, r0, #1
 800da24:	89a3      	ldrh	r3, [r4, #12]
 800da26:	bf15      	itete	ne
 800da28:	6560      	strne	r0, [r4, #84]	@ 0x54
 800da2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800da2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800da32:	81a3      	strheq	r3, [r4, #12]
 800da34:	bf18      	it	ne
 800da36:	81a3      	strhne	r3, [r4, #12]
 800da38:	bd10      	pop	{r4, pc}

0800da3a <__sclose>:
 800da3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da3e:	f000 b80d 	b.w	800da5c <_close_r>

0800da42 <memset>:
 800da42:	4402      	add	r2, r0
 800da44:	4603      	mov	r3, r0
 800da46:	4293      	cmp	r3, r2
 800da48:	d100      	bne.n	800da4c <memset+0xa>
 800da4a:	4770      	bx	lr
 800da4c:	f803 1b01 	strb.w	r1, [r3], #1
 800da50:	e7f9      	b.n	800da46 <memset+0x4>
	...

0800da54 <_localeconv_r>:
 800da54:	4800      	ldr	r0, [pc, #0]	@ (800da58 <_localeconv_r+0x4>)
 800da56:	4770      	bx	lr
 800da58:	200002d0 	.word	0x200002d0

0800da5c <_close_r>:
 800da5c:	b538      	push	{r3, r4, r5, lr}
 800da5e:	4d06      	ldr	r5, [pc, #24]	@ (800da78 <_close_r+0x1c>)
 800da60:	2300      	movs	r3, #0
 800da62:	4604      	mov	r4, r0
 800da64:	4608      	mov	r0, r1
 800da66:	602b      	str	r3, [r5, #0]
 800da68:	f7f4 fd0c 	bl	8002484 <_close>
 800da6c:	1c43      	adds	r3, r0, #1
 800da6e:	d102      	bne.n	800da76 <_close_r+0x1a>
 800da70:	682b      	ldr	r3, [r5, #0]
 800da72:	b103      	cbz	r3, 800da76 <_close_r+0x1a>
 800da74:	6023      	str	r3, [r4, #0]
 800da76:	bd38      	pop	{r3, r4, r5, pc}
 800da78:	20002264 	.word	0x20002264

0800da7c <_lseek_r>:
 800da7c:	b538      	push	{r3, r4, r5, lr}
 800da7e:	4d07      	ldr	r5, [pc, #28]	@ (800da9c <_lseek_r+0x20>)
 800da80:	4604      	mov	r4, r0
 800da82:	4608      	mov	r0, r1
 800da84:	4611      	mov	r1, r2
 800da86:	2200      	movs	r2, #0
 800da88:	602a      	str	r2, [r5, #0]
 800da8a:	461a      	mov	r2, r3
 800da8c:	f7f4 fd21 	bl	80024d2 <_lseek>
 800da90:	1c43      	adds	r3, r0, #1
 800da92:	d102      	bne.n	800da9a <_lseek_r+0x1e>
 800da94:	682b      	ldr	r3, [r5, #0]
 800da96:	b103      	cbz	r3, 800da9a <_lseek_r+0x1e>
 800da98:	6023      	str	r3, [r4, #0]
 800da9a:	bd38      	pop	{r3, r4, r5, pc}
 800da9c:	20002264 	.word	0x20002264

0800daa0 <_read_r>:
 800daa0:	b538      	push	{r3, r4, r5, lr}
 800daa2:	4d07      	ldr	r5, [pc, #28]	@ (800dac0 <_read_r+0x20>)
 800daa4:	4604      	mov	r4, r0
 800daa6:	4608      	mov	r0, r1
 800daa8:	4611      	mov	r1, r2
 800daaa:	2200      	movs	r2, #0
 800daac:	602a      	str	r2, [r5, #0]
 800daae:	461a      	mov	r2, r3
 800dab0:	f7f4 fcaf 	bl	8002412 <_read>
 800dab4:	1c43      	adds	r3, r0, #1
 800dab6:	d102      	bne.n	800dabe <_read_r+0x1e>
 800dab8:	682b      	ldr	r3, [r5, #0]
 800daba:	b103      	cbz	r3, 800dabe <_read_r+0x1e>
 800dabc:	6023      	str	r3, [r4, #0]
 800dabe:	bd38      	pop	{r3, r4, r5, pc}
 800dac0:	20002264 	.word	0x20002264

0800dac4 <_write_r>:
 800dac4:	b538      	push	{r3, r4, r5, lr}
 800dac6:	4d07      	ldr	r5, [pc, #28]	@ (800dae4 <_write_r+0x20>)
 800dac8:	4604      	mov	r4, r0
 800daca:	4608      	mov	r0, r1
 800dacc:	4611      	mov	r1, r2
 800dace:	2200      	movs	r2, #0
 800dad0:	602a      	str	r2, [r5, #0]
 800dad2:	461a      	mov	r2, r3
 800dad4:	f7f4 fcba 	bl	800244c <_write>
 800dad8:	1c43      	adds	r3, r0, #1
 800dada:	d102      	bne.n	800dae2 <_write_r+0x1e>
 800dadc:	682b      	ldr	r3, [r5, #0]
 800dade:	b103      	cbz	r3, 800dae2 <_write_r+0x1e>
 800dae0:	6023      	str	r3, [r4, #0]
 800dae2:	bd38      	pop	{r3, r4, r5, pc}
 800dae4:	20002264 	.word	0x20002264

0800dae8 <__errno>:
 800dae8:	4b01      	ldr	r3, [pc, #4]	@ (800daf0 <__errno+0x8>)
 800daea:	6818      	ldr	r0, [r3, #0]
 800daec:	4770      	bx	lr
 800daee:	bf00      	nop
 800daf0:	20000190 	.word	0x20000190

0800daf4 <__libc_init_array>:
 800daf4:	b570      	push	{r4, r5, r6, lr}
 800daf6:	4d0d      	ldr	r5, [pc, #52]	@ (800db2c <__libc_init_array+0x38>)
 800daf8:	4c0d      	ldr	r4, [pc, #52]	@ (800db30 <__libc_init_array+0x3c>)
 800dafa:	1b64      	subs	r4, r4, r5
 800dafc:	10a4      	asrs	r4, r4, #2
 800dafe:	2600      	movs	r6, #0
 800db00:	42a6      	cmp	r6, r4
 800db02:	d109      	bne.n	800db18 <__libc_init_array+0x24>
 800db04:	4d0b      	ldr	r5, [pc, #44]	@ (800db34 <__libc_init_array+0x40>)
 800db06:	4c0c      	ldr	r4, [pc, #48]	@ (800db38 <__libc_init_array+0x44>)
 800db08:	f003 fb66 	bl	80111d8 <_init>
 800db0c:	1b64      	subs	r4, r4, r5
 800db0e:	10a4      	asrs	r4, r4, #2
 800db10:	2600      	movs	r6, #0
 800db12:	42a6      	cmp	r6, r4
 800db14:	d105      	bne.n	800db22 <__libc_init_array+0x2e>
 800db16:	bd70      	pop	{r4, r5, r6, pc}
 800db18:	f855 3b04 	ldr.w	r3, [r5], #4
 800db1c:	4798      	blx	r3
 800db1e:	3601      	adds	r6, #1
 800db20:	e7ee      	b.n	800db00 <__libc_init_array+0xc>
 800db22:	f855 3b04 	ldr.w	r3, [r5], #4
 800db26:	4798      	blx	r3
 800db28:	3601      	adds	r6, #1
 800db2a:	e7f2      	b.n	800db12 <__libc_init_array+0x1e>
 800db2c:	080116d0 	.word	0x080116d0
 800db30:	080116d0 	.word	0x080116d0
 800db34:	080116d0 	.word	0x080116d0
 800db38:	080116d4 	.word	0x080116d4

0800db3c <__retarget_lock_init_recursive>:
 800db3c:	4770      	bx	lr

0800db3e <__retarget_lock_acquire_recursive>:
 800db3e:	4770      	bx	lr

0800db40 <__retarget_lock_release_recursive>:
 800db40:	4770      	bx	lr

0800db42 <memcpy>:
 800db42:	440a      	add	r2, r1
 800db44:	4291      	cmp	r1, r2
 800db46:	f100 33ff 	add.w	r3, r0, #4294967295
 800db4a:	d100      	bne.n	800db4e <memcpy+0xc>
 800db4c:	4770      	bx	lr
 800db4e:	b510      	push	{r4, lr}
 800db50:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db54:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db58:	4291      	cmp	r1, r2
 800db5a:	d1f9      	bne.n	800db50 <memcpy+0xe>
 800db5c:	bd10      	pop	{r4, pc}
	...

0800db60 <nanf>:
 800db60:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800db68 <nanf+0x8>
 800db64:	4770      	bx	lr
 800db66:	bf00      	nop
 800db68:	7fc00000 	.word	0x7fc00000

0800db6c <quorem>:
 800db6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db70:	6903      	ldr	r3, [r0, #16]
 800db72:	690c      	ldr	r4, [r1, #16]
 800db74:	42a3      	cmp	r3, r4
 800db76:	4607      	mov	r7, r0
 800db78:	db7e      	blt.n	800dc78 <quorem+0x10c>
 800db7a:	3c01      	subs	r4, #1
 800db7c:	f101 0814 	add.w	r8, r1, #20
 800db80:	00a3      	lsls	r3, r4, #2
 800db82:	f100 0514 	add.w	r5, r0, #20
 800db86:	9300      	str	r3, [sp, #0]
 800db88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800db8c:	9301      	str	r3, [sp, #4]
 800db8e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800db92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800db96:	3301      	adds	r3, #1
 800db98:	429a      	cmp	r2, r3
 800db9a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800db9e:	fbb2 f6f3 	udiv	r6, r2, r3
 800dba2:	d32e      	bcc.n	800dc02 <quorem+0x96>
 800dba4:	f04f 0a00 	mov.w	sl, #0
 800dba8:	46c4      	mov	ip, r8
 800dbaa:	46ae      	mov	lr, r5
 800dbac:	46d3      	mov	fp, sl
 800dbae:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dbb2:	b298      	uxth	r0, r3
 800dbb4:	fb06 a000 	mla	r0, r6, r0, sl
 800dbb8:	0c02      	lsrs	r2, r0, #16
 800dbba:	0c1b      	lsrs	r3, r3, #16
 800dbbc:	fb06 2303 	mla	r3, r6, r3, r2
 800dbc0:	f8de 2000 	ldr.w	r2, [lr]
 800dbc4:	b280      	uxth	r0, r0
 800dbc6:	b292      	uxth	r2, r2
 800dbc8:	1a12      	subs	r2, r2, r0
 800dbca:	445a      	add	r2, fp
 800dbcc:	f8de 0000 	ldr.w	r0, [lr]
 800dbd0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dbd4:	b29b      	uxth	r3, r3
 800dbd6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800dbda:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dbde:	b292      	uxth	r2, r2
 800dbe0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dbe4:	45e1      	cmp	r9, ip
 800dbe6:	f84e 2b04 	str.w	r2, [lr], #4
 800dbea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dbee:	d2de      	bcs.n	800dbae <quorem+0x42>
 800dbf0:	9b00      	ldr	r3, [sp, #0]
 800dbf2:	58eb      	ldr	r3, [r5, r3]
 800dbf4:	b92b      	cbnz	r3, 800dc02 <quorem+0x96>
 800dbf6:	9b01      	ldr	r3, [sp, #4]
 800dbf8:	3b04      	subs	r3, #4
 800dbfa:	429d      	cmp	r5, r3
 800dbfc:	461a      	mov	r2, r3
 800dbfe:	d32f      	bcc.n	800dc60 <quorem+0xf4>
 800dc00:	613c      	str	r4, [r7, #16]
 800dc02:	4638      	mov	r0, r7
 800dc04:	f001 f9c8 	bl	800ef98 <__mcmp>
 800dc08:	2800      	cmp	r0, #0
 800dc0a:	db25      	blt.n	800dc58 <quorem+0xec>
 800dc0c:	4629      	mov	r1, r5
 800dc0e:	2000      	movs	r0, #0
 800dc10:	f858 2b04 	ldr.w	r2, [r8], #4
 800dc14:	f8d1 c000 	ldr.w	ip, [r1]
 800dc18:	fa1f fe82 	uxth.w	lr, r2
 800dc1c:	fa1f f38c 	uxth.w	r3, ip
 800dc20:	eba3 030e 	sub.w	r3, r3, lr
 800dc24:	4403      	add	r3, r0
 800dc26:	0c12      	lsrs	r2, r2, #16
 800dc28:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dc2c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dc30:	b29b      	uxth	r3, r3
 800dc32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc36:	45c1      	cmp	r9, r8
 800dc38:	f841 3b04 	str.w	r3, [r1], #4
 800dc3c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dc40:	d2e6      	bcs.n	800dc10 <quorem+0xa4>
 800dc42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc4a:	b922      	cbnz	r2, 800dc56 <quorem+0xea>
 800dc4c:	3b04      	subs	r3, #4
 800dc4e:	429d      	cmp	r5, r3
 800dc50:	461a      	mov	r2, r3
 800dc52:	d30b      	bcc.n	800dc6c <quorem+0x100>
 800dc54:	613c      	str	r4, [r7, #16]
 800dc56:	3601      	adds	r6, #1
 800dc58:	4630      	mov	r0, r6
 800dc5a:	b003      	add	sp, #12
 800dc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc60:	6812      	ldr	r2, [r2, #0]
 800dc62:	3b04      	subs	r3, #4
 800dc64:	2a00      	cmp	r2, #0
 800dc66:	d1cb      	bne.n	800dc00 <quorem+0x94>
 800dc68:	3c01      	subs	r4, #1
 800dc6a:	e7c6      	b.n	800dbfa <quorem+0x8e>
 800dc6c:	6812      	ldr	r2, [r2, #0]
 800dc6e:	3b04      	subs	r3, #4
 800dc70:	2a00      	cmp	r2, #0
 800dc72:	d1ef      	bne.n	800dc54 <quorem+0xe8>
 800dc74:	3c01      	subs	r4, #1
 800dc76:	e7ea      	b.n	800dc4e <quorem+0xe2>
 800dc78:	2000      	movs	r0, #0
 800dc7a:	e7ee      	b.n	800dc5a <quorem+0xee>
 800dc7c:	0000      	movs	r0, r0
	...

0800dc80 <_dtoa_r>:
 800dc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc84:	69c7      	ldr	r7, [r0, #28]
 800dc86:	b097      	sub	sp, #92	@ 0x5c
 800dc88:	ed8d 0b04 	vstr	d0, [sp, #16]
 800dc8c:	ec55 4b10 	vmov	r4, r5, d0
 800dc90:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800dc92:	9107      	str	r1, [sp, #28]
 800dc94:	4681      	mov	r9, r0
 800dc96:	920c      	str	r2, [sp, #48]	@ 0x30
 800dc98:	9311      	str	r3, [sp, #68]	@ 0x44
 800dc9a:	b97f      	cbnz	r7, 800dcbc <_dtoa_r+0x3c>
 800dc9c:	2010      	movs	r0, #16
 800dc9e:	f000 fe09 	bl	800e8b4 <malloc>
 800dca2:	4602      	mov	r2, r0
 800dca4:	f8c9 001c 	str.w	r0, [r9, #28]
 800dca8:	b920      	cbnz	r0, 800dcb4 <_dtoa_r+0x34>
 800dcaa:	4ba9      	ldr	r3, [pc, #676]	@ (800df50 <_dtoa_r+0x2d0>)
 800dcac:	21ef      	movs	r1, #239	@ 0xef
 800dcae:	48a9      	ldr	r0, [pc, #676]	@ (800df54 <_dtoa_r+0x2d4>)
 800dcb0:	f002 fe02 	bl	80108b8 <__assert_func>
 800dcb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dcb8:	6007      	str	r7, [r0, #0]
 800dcba:	60c7      	str	r7, [r0, #12]
 800dcbc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dcc0:	6819      	ldr	r1, [r3, #0]
 800dcc2:	b159      	cbz	r1, 800dcdc <_dtoa_r+0x5c>
 800dcc4:	685a      	ldr	r2, [r3, #4]
 800dcc6:	604a      	str	r2, [r1, #4]
 800dcc8:	2301      	movs	r3, #1
 800dcca:	4093      	lsls	r3, r2
 800dccc:	608b      	str	r3, [r1, #8]
 800dcce:	4648      	mov	r0, r9
 800dcd0:	f000 fee6 	bl	800eaa0 <_Bfree>
 800dcd4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	601a      	str	r2, [r3, #0]
 800dcdc:	1e2b      	subs	r3, r5, #0
 800dcde:	bfb9      	ittee	lt
 800dce0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dce4:	9305      	strlt	r3, [sp, #20]
 800dce6:	2300      	movge	r3, #0
 800dce8:	6033      	strge	r3, [r6, #0]
 800dcea:	9f05      	ldr	r7, [sp, #20]
 800dcec:	4b9a      	ldr	r3, [pc, #616]	@ (800df58 <_dtoa_r+0x2d8>)
 800dcee:	bfbc      	itt	lt
 800dcf0:	2201      	movlt	r2, #1
 800dcf2:	6032      	strlt	r2, [r6, #0]
 800dcf4:	43bb      	bics	r3, r7
 800dcf6:	d112      	bne.n	800dd1e <_dtoa_r+0x9e>
 800dcf8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dcfa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dcfe:	6013      	str	r3, [r2, #0]
 800dd00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dd04:	4323      	orrs	r3, r4
 800dd06:	f000 855a 	beq.w	800e7be <_dtoa_r+0xb3e>
 800dd0a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dd0c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800df6c <_dtoa_r+0x2ec>
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	f000 855c 	beq.w	800e7ce <_dtoa_r+0xb4e>
 800dd16:	f10a 0303 	add.w	r3, sl, #3
 800dd1a:	f000 bd56 	b.w	800e7ca <_dtoa_r+0xb4a>
 800dd1e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800dd22:	2200      	movs	r2, #0
 800dd24:	ec51 0b17 	vmov	r0, r1, d7
 800dd28:	2300      	movs	r3, #0
 800dd2a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800dd2e:	f7f2 fef3 	bl	8000b18 <__aeabi_dcmpeq>
 800dd32:	4680      	mov	r8, r0
 800dd34:	b158      	cbz	r0, 800dd4e <_dtoa_r+0xce>
 800dd36:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dd38:	2301      	movs	r3, #1
 800dd3a:	6013      	str	r3, [r2, #0]
 800dd3c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dd3e:	b113      	cbz	r3, 800dd46 <_dtoa_r+0xc6>
 800dd40:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800dd42:	4b86      	ldr	r3, [pc, #536]	@ (800df5c <_dtoa_r+0x2dc>)
 800dd44:	6013      	str	r3, [r2, #0]
 800dd46:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800df70 <_dtoa_r+0x2f0>
 800dd4a:	f000 bd40 	b.w	800e7ce <_dtoa_r+0xb4e>
 800dd4e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800dd52:	aa14      	add	r2, sp, #80	@ 0x50
 800dd54:	a915      	add	r1, sp, #84	@ 0x54
 800dd56:	4648      	mov	r0, r9
 800dd58:	f001 fa3e 	bl	800f1d8 <__d2b>
 800dd5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800dd60:	9002      	str	r0, [sp, #8]
 800dd62:	2e00      	cmp	r6, #0
 800dd64:	d078      	beq.n	800de58 <_dtoa_r+0x1d8>
 800dd66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd68:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800dd6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dd74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800dd78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800dd7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dd80:	4619      	mov	r1, r3
 800dd82:	2200      	movs	r2, #0
 800dd84:	4b76      	ldr	r3, [pc, #472]	@ (800df60 <_dtoa_r+0x2e0>)
 800dd86:	f7f2 faa7 	bl	80002d8 <__aeabi_dsub>
 800dd8a:	a36b      	add	r3, pc, #428	@ (adr r3, 800df38 <_dtoa_r+0x2b8>)
 800dd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd90:	f7f2 fc5a 	bl	8000648 <__aeabi_dmul>
 800dd94:	a36a      	add	r3, pc, #424	@ (adr r3, 800df40 <_dtoa_r+0x2c0>)
 800dd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd9a:	f7f2 fa9f 	bl	80002dc <__adddf3>
 800dd9e:	4604      	mov	r4, r0
 800dda0:	4630      	mov	r0, r6
 800dda2:	460d      	mov	r5, r1
 800dda4:	f7f2 fbe6 	bl	8000574 <__aeabi_i2d>
 800dda8:	a367      	add	r3, pc, #412	@ (adr r3, 800df48 <_dtoa_r+0x2c8>)
 800ddaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddae:	f7f2 fc4b 	bl	8000648 <__aeabi_dmul>
 800ddb2:	4602      	mov	r2, r0
 800ddb4:	460b      	mov	r3, r1
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	4629      	mov	r1, r5
 800ddba:	f7f2 fa8f 	bl	80002dc <__adddf3>
 800ddbe:	4604      	mov	r4, r0
 800ddc0:	460d      	mov	r5, r1
 800ddc2:	f7f2 fef1 	bl	8000ba8 <__aeabi_d2iz>
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	4607      	mov	r7, r0
 800ddca:	2300      	movs	r3, #0
 800ddcc:	4620      	mov	r0, r4
 800ddce:	4629      	mov	r1, r5
 800ddd0:	f7f2 feac 	bl	8000b2c <__aeabi_dcmplt>
 800ddd4:	b140      	cbz	r0, 800dde8 <_dtoa_r+0x168>
 800ddd6:	4638      	mov	r0, r7
 800ddd8:	f7f2 fbcc 	bl	8000574 <__aeabi_i2d>
 800dddc:	4622      	mov	r2, r4
 800ddde:	462b      	mov	r3, r5
 800dde0:	f7f2 fe9a 	bl	8000b18 <__aeabi_dcmpeq>
 800dde4:	b900      	cbnz	r0, 800dde8 <_dtoa_r+0x168>
 800dde6:	3f01      	subs	r7, #1
 800dde8:	2f16      	cmp	r7, #22
 800ddea:	d852      	bhi.n	800de92 <_dtoa_r+0x212>
 800ddec:	4b5d      	ldr	r3, [pc, #372]	@ (800df64 <_dtoa_r+0x2e4>)
 800ddee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ddf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ddfa:	f7f2 fe97 	bl	8000b2c <__aeabi_dcmplt>
 800ddfe:	2800      	cmp	r0, #0
 800de00:	d049      	beq.n	800de96 <_dtoa_r+0x216>
 800de02:	3f01      	subs	r7, #1
 800de04:	2300      	movs	r3, #0
 800de06:	9310      	str	r3, [sp, #64]	@ 0x40
 800de08:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800de0a:	1b9b      	subs	r3, r3, r6
 800de0c:	1e5a      	subs	r2, r3, #1
 800de0e:	bf45      	ittet	mi
 800de10:	f1c3 0301 	rsbmi	r3, r3, #1
 800de14:	9300      	strmi	r3, [sp, #0]
 800de16:	2300      	movpl	r3, #0
 800de18:	2300      	movmi	r3, #0
 800de1a:	9206      	str	r2, [sp, #24]
 800de1c:	bf54      	ite	pl
 800de1e:	9300      	strpl	r3, [sp, #0]
 800de20:	9306      	strmi	r3, [sp, #24]
 800de22:	2f00      	cmp	r7, #0
 800de24:	db39      	blt.n	800de9a <_dtoa_r+0x21a>
 800de26:	9b06      	ldr	r3, [sp, #24]
 800de28:	970d      	str	r7, [sp, #52]	@ 0x34
 800de2a:	443b      	add	r3, r7
 800de2c:	9306      	str	r3, [sp, #24]
 800de2e:	2300      	movs	r3, #0
 800de30:	9308      	str	r3, [sp, #32]
 800de32:	9b07      	ldr	r3, [sp, #28]
 800de34:	2b09      	cmp	r3, #9
 800de36:	d863      	bhi.n	800df00 <_dtoa_r+0x280>
 800de38:	2b05      	cmp	r3, #5
 800de3a:	bfc4      	itt	gt
 800de3c:	3b04      	subgt	r3, #4
 800de3e:	9307      	strgt	r3, [sp, #28]
 800de40:	9b07      	ldr	r3, [sp, #28]
 800de42:	f1a3 0302 	sub.w	r3, r3, #2
 800de46:	bfcc      	ite	gt
 800de48:	2400      	movgt	r4, #0
 800de4a:	2401      	movle	r4, #1
 800de4c:	2b03      	cmp	r3, #3
 800de4e:	d863      	bhi.n	800df18 <_dtoa_r+0x298>
 800de50:	e8df f003 	tbb	[pc, r3]
 800de54:	2b375452 	.word	0x2b375452
 800de58:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800de5c:	441e      	add	r6, r3
 800de5e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800de62:	2b20      	cmp	r3, #32
 800de64:	bfc1      	itttt	gt
 800de66:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800de6a:	409f      	lslgt	r7, r3
 800de6c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800de70:	fa24 f303 	lsrgt.w	r3, r4, r3
 800de74:	bfd6      	itet	le
 800de76:	f1c3 0320 	rsble	r3, r3, #32
 800de7a:	ea47 0003 	orrgt.w	r0, r7, r3
 800de7e:	fa04 f003 	lslle.w	r0, r4, r3
 800de82:	f7f2 fb67 	bl	8000554 <__aeabi_ui2d>
 800de86:	2201      	movs	r2, #1
 800de88:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800de8c:	3e01      	subs	r6, #1
 800de8e:	9212      	str	r2, [sp, #72]	@ 0x48
 800de90:	e776      	b.n	800dd80 <_dtoa_r+0x100>
 800de92:	2301      	movs	r3, #1
 800de94:	e7b7      	b.n	800de06 <_dtoa_r+0x186>
 800de96:	9010      	str	r0, [sp, #64]	@ 0x40
 800de98:	e7b6      	b.n	800de08 <_dtoa_r+0x188>
 800de9a:	9b00      	ldr	r3, [sp, #0]
 800de9c:	1bdb      	subs	r3, r3, r7
 800de9e:	9300      	str	r3, [sp, #0]
 800dea0:	427b      	negs	r3, r7
 800dea2:	9308      	str	r3, [sp, #32]
 800dea4:	2300      	movs	r3, #0
 800dea6:	930d      	str	r3, [sp, #52]	@ 0x34
 800dea8:	e7c3      	b.n	800de32 <_dtoa_r+0x1b2>
 800deaa:	2301      	movs	r3, #1
 800deac:	9309      	str	r3, [sp, #36]	@ 0x24
 800deae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800deb0:	eb07 0b03 	add.w	fp, r7, r3
 800deb4:	f10b 0301 	add.w	r3, fp, #1
 800deb8:	2b01      	cmp	r3, #1
 800deba:	9303      	str	r3, [sp, #12]
 800debc:	bfb8      	it	lt
 800debe:	2301      	movlt	r3, #1
 800dec0:	e006      	b.n	800ded0 <_dtoa_r+0x250>
 800dec2:	2301      	movs	r3, #1
 800dec4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dec6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dec8:	2b00      	cmp	r3, #0
 800deca:	dd28      	ble.n	800df1e <_dtoa_r+0x29e>
 800decc:	469b      	mov	fp, r3
 800dece:	9303      	str	r3, [sp, #12]
 800ded0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ded4:	2100      	movs	r1, #0
 800ded6:	2204      	movs	r2, #4
 800ded8:	f102 0514 	add.w	r5, r2, #20
 800dedc:	429d      	cmp	r5, r3
 800dede:	d926      	bls.n	800df2e <_dtoa_r+0x2ae>
 800dee0:	6041      	str	r1, [r0, #4]
 800dee2:	4648      	mov	r0, r9
 800dee4:	f000 fd9c 	bl	800ea20 <_Balloc>
 800dee8:	4682      	mov	sl, r0
 800deea:	2800      	cmp	r0, #0
 800deec:	d142      	bne.n	800df74 <_dtoa_r+0x2f4>
 800deee:	4b1e      	ldr	r3, [pc, #120]	@ (800df68 <_dtoa_r+0x2e8>)
 800def0:	4602      	mov	r2, r0
 800def2:	f240 11af 	movw	r1, #431	@ 0x1af
 800def6:	e6da      	b.n	800dcae <_dtoa_r+0x2e>
 800def8:	2300      	movs	r3, #0
 800defa:	e7e3      	b.n	800dec4 <_dtoa_r+0x244>
 800defc:	2300      	movs	r3, #0
 800defe:	e7d5      	b.n	800deac <_dtoa_r+0x22c>
 800df00:	2401      	movs	r4, #1
 800df02:	2300      	movs	r3, #0
 800df04:	9307      	str	r3, [sp, #28]
 800df06:	9409      	str	r4, [sp, #36]	@ 0x24
 800df08:	f04f 3bff 	mov.w	fp, #4294967295
 800df0c:	2200      	movs	r2, #0
 800df0e:	f8cd b00c 	str.w	fp, [sp, #12]
 800df12:	2312      	movs	r3, #18
 800df14:	920c      	str	r2, [sp, #48]	@ 0x30
 800df16:	e7db      	b.n	800ded0 <_dtoa_r+0x250>
 800df18:	2301      	movs	r3, #1
 800df1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800df1c:	e7f4      	b.n	800df08 <_dtoa_r+0x288>
 800df1e:	f04f 0b01 	mov.w	fp, #1
 800df22:	f8cd b00c 	str.w	fp, [sp, #12]
 800df26:	465b      	mov	r3, fp
 800df28:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800df2c:	e7d0      	b.n	800ded0 <_dtoa_r+0x250>
 800df2e:	3101      	adds	r1, #1
 800df30:	0052      	lsls	r2, r2, #1
 800df32:	e7d1      	b.n	800ded8 <_dtoa_r+0x258>
 800df34:	f3af 8000 	nop.w
 800df38:	636f4361 	.word	0x636f4361
 800df3c:	3fd287a7 	.word	0x3fd287a7
 800df40:	8b60c8b3 	.word	0x8b60c8b3
 800df44:	3fc68a28 	.word	0x3fc68a28
 800df48:	509f79fb 	.word	0x509f79fb
 800df4c:	3fd34413 	.word	0x3fd34413
 800df50:	080113eb 	.word	0x080113eb
 800df54:	08011402 	.word	0x08011402
 800df58:	7ff00000 	.word	0x7ff00000
 800df5c:	080113b6 	.word	0x080113b6
 800df60:	3ff80000 	.word	0x3ff80000
 800df64:	080115b0 	.word	0x080115b0
 800df68:	0801145a 	.word	0x0801145a
 800df6c:	080113e7 	.word	0x080113e7
 800df70:	080113b5 	.word	0x080113b5
 800df74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800df78:	6018      	str	r0, [r3, #0]
 800df7a:	9b03      	ldr	r3, [sp, #12]
 800df7c:	2b0e      	cmp	r3, #14
 800df7e:	f200 80a1 	bhi.w	800e0c4 <_dtoa_r+0x444>
 800df82:	2c00      	cmp	r4, #0
 800df84:	f000 809e 	beq.w	800e0c4 <_dtoa_r+0x444>
 800df88:	2f00      	cmp	r7, #0
 800df8a:	dd33      	ble.n	800dff4 <_dtoa_r+0x374>
 800df8c:	4b9c      	ldr	r3, [pc, #624]	@ (800e200 <_dtoa_r+0x580>)
 800df8e:	f007 020f 	and.w	r2, r7, #15
 800df92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df96:	ed93 7b00 	vldr	d7, [r3]
 800df9a:	05f8      	lsls	r0, r7, #23
 800df9c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800dfa0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800dfa4:	d516      	bpl.n	800dfd4 <_dtoa_r+0x354>
 800dfa6:	4b97      	ldr	r3, [pc, #604]	@ (800e204 <_dtoa_r+0x584>)
 800dfa8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dfac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dfb0:	f7f2 fc74 	bl	800089c <__aeabi_ddiv>
 800dfb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dfb8:	f004 040f 	and.w	r4, r4, #15
 800dfbc:	2603      	movs	r6, #3
 800dfbe:	4d91      	ldr	r5, [pc, #580]	@ (800e204 <_dtoa_r+0x584>)
 800dfc0:	b954      	cbnz	r4, 800dfd8 <_dtoa_r+0x358>
 800dfc2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dfc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dfca:	f7f2 fc67 	bl	800089c <__aeabi_ddiv>
 800dfce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dfd2:	e028      	b.n	800e026 <_dtoa_r+0x3a6>
 800dfd4:	2602      	movs	r6, #2
 800dfd6:	e7f2      	b.n	800dfbe <_dtoa_r+0x33e>
 800dfd8:	07e1      	lsls	r1, r4, #31
 800dfda:	d508      	bpl.n	800dfee <_dtoa_r+0x36e>
 800dfdc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dfe0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dfe4:	f7f2 fb30 	bl	8000648 <__aeabi_dmul>
 800dfe8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dfec:	3601      	adds	r6, #1
 800dfee:	1064      	asrs	r4, r4, #1
 800dff0:	3508      	adds	r5, #8
 800dff2:	e7e5      	b.n	800dfc0 <_dtoa_r+0x340>
 800dff4:	f000 80af 	beq.w	800e156 <_dtoa_r+0x4d6>
 800dff8:	427c      	negs	r4, r7
 800dffa:	4b81      	ldr	r3, [pc, #516]	@ (800e200 <_dtoa_r+0x580>)
 800dffc:	4d81      	ldr	r5, [pc, #516]	@ (800e204 <_dtoa_r+0x584>)
 800dffe:	f004 020f 	and.w	r2, r4, #15
 800e002:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e00a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e00e:	f7f2 fb1b 	bl	8000648 <__aeabi_dmul>
 800e012:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e016:	1124      	asrs	r4, r4, #4
 800e018:	2300      	movs	r3, #0
 800e01a:	2602      	movs	r6, #2
 800e01c:	2c00      	cmp	r4, #0
 800e01e:	f040 808f 	bne.w	800e140 <_dtoa_r+0x4c0>
 800e022:	2b00      	cmp	r3, #0
 800e024:	d1d3      	bne.n	800dfce <_dtoa_r+0x34e>
 800e026:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e028:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	f000 8094 	beq.w	800e15a <_dtoa_r+0x4da>
 800e032:	4b75      	ldr	r3, [pc, #468]	@ (800e208 <_dtoa_r+0x588>)
 800e034:	2200      	movs	r2, #0
 800e036:	4620      	mov	r0, r4
 800e038:	4629      	mov	r1, r5
 800e03a:	f7f2 fd77 	bl	8000b2c <__aeabi_dcmplt>
 800e03e:	2800      	cmp	r0, #0
 800e040:	f000 808b 	beq.w	800e15a <_dtoa_r+0x4da>
 800e044:	9b03      	ldr	r3, [sp, #12]
 800e046:	2b00      	cmp	r3, #0
 800e048:	f000 8087 	beq.w	800e15a <_dtoa_r+0x4da>
 800e04c:	f1bb 0f00 	cmp.w	fp, #0
 800e050:	dd34      	ble.n	800e0bc <_dtoa_r+0x43c>
 800e052:	4620      	mov	r0, r4
 800e054:	4b6d      	ldr	r3, [pc, #436]	@ (800e20c <_dtoa_r+0x58c>)
 800e056:	2200      	movs	r2, #0
 800e058:	4629      	mov	r1, r5
 800e05a:	f7f2 faf5 	bl	8000648 <__aeabi_dmul>
 800e05e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e062:	f107 38ff 	add.w	r8, r7, #4294967295
 800e066:	3601      	adds	r6, #1
 800e068:	465c      	mov	r4, fp
 800e06a:	4630      	mov	r0, r6
 800e06c:	f7f2 fa82 	bl	8000574 <__aeabi_i2d>
 800e070:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e074:	f7f2 fae8 	bl	8000648 <__aeabi_dmul>
 800e078:	4b65      	ldr	r3, [pc, #404]	@ (800e210 <_dtoa_r+0x590>)
 800e07a:	2200      	movs	r2, #0
 800e07c:	f7f2 f92e 	bl	80002dc <__adddf3>
 800e080:	4605      	mov	r5, r0
 800e082:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e086:	2c00      	cmp	r4, #0
 800e088:	d16a      	bne.n	800e160 <_dtoa_r+0x4e0>
 800e08a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e08e:	4b61      	ldr	r3, [pc, #388]	@ (800e214 <_dtoa_r+0x594>)
 800e090:	2200      	movs	r2, #0
 800e092:	f7f2 f921 	bl	80002d8 <__aeabi_dsub>
 800e096:	4602      	mov	r2, r0
 800e098:	460b      	mov	r3, r1
 800e09a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e09e:	462a      	mov	r2, r5
 800e0a0:	4633      	mov	r3, r6
 800e0a2:	f7f2 fd61 	bl	8000b68 <__aeabi_dcmpgt>
 800e0a6:	2800      	cmp	r0, #0
 800e0a8:	f040 8298 	bne.w	800e5dc <_dtoa_r+0x95c>
 800e0ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e0b0:	462a      	mov	r2, r5
 800e0b2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e0b6:	f7f2 fd39 	bl	8000b2c <__aeabi_dcmplt>
 800e0ba:	bb38      	cbnz	r0, 800e10c <_dtoa_r+0x48c>
 800e0bc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e0c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e0c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	f2c0 8157 	blt.w	800e37a <_dtoa_r+0x6fa>
 800e0cc:	2f0e      	cmp	r7, #14
 800e0ce:	f300 8154 	bgt.w	800e37a <_dtoa_r+0x6fa>
 800e0d2:	4b4b      	ldr	r3, [pc, #300]	@ (800e200 <_dtoa_r+0x580>)
 800e0d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e0d8:	ed93 7b00 	vldr	d7, [r3]
 800e0dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	ed8d 7b00 	vstr	d7, [sp]
 800e0e4:	f280 80e5 	bge.w	800e2b2 <_dtoa_r+0x632>
 800e0e8:	9b03      	ldr	r3, [sp, #12]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	f300 80e1 	bgt.w	800e2b2 <_dtoa_r+0x632>
 800e0f0:	d10c      	bne.n	800e10c <_dtoa_r+0x48c>
 800e0f2:	4b48      	ldr	r3, [pc, #288]	@ (800e214 <_dtoa_r+0x594>)
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	ec51 0b17 	vmov	r0, r1, d7
 800e0fa:	f7f2 faa5 	bl	8000648 <__aeabi_dmul>
 800e0fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e102:	f7f2 fd27 	bl	8000b54 <__aeabi_dcmpge>
 800e106:	2800      	cmp	r0, #0
 800e108:	f000 8266 	beq.w	800e5d8 <_dtoa_r+0x958>
 800e10c:	2400      	movs	r4, #0
 800e10e:	4625      	mov	r5, r4
 800e110:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e112:	4656      	mov	r6, sl
 800e114:	ea6f 0803 	mvn.w	r8, r3
 800e118:	2700      	movs	r7, #0
 800e11a:	4621      	mov	r1, r4
 800e11c:	4648      	mov	r0, r9
 800e11e:	f000 fcbf 	bl	800eaa0 <_Bfree>
 800e122:	2d00      	cmp	r5, #0
 800e124:	f000 80bd 	beq.w	800e2a2 <_dtoa_r+0x622>
 800e128:	b12f      	cbz	r7, 800e136 <_dtoa_r+0x4b6>
 800e12a:	42af      	cmp	r7, r5
 800e12c:	d003      	beq.n	800e136 <_dtoa_r+0x4b6>
 800e12e:	4639      	mov	r1, r7
 800e130:	4648      	mov	r0, r9
 800e132:	f000 fcb5 	bl	800eaa0 <_Bfree>
 800e136:	4629      	mov	r1, r5
 800e138:	4648      	mov	r0, r9
 800e13a:	f000 fcb1 	bl	800eaa0 <_Bfree>
 800e13e:	e0b0      	b.n	800e2a2 <_dtoa_r+0x622>
 800e140:	07e2      	lsls	r2, r4, #31
 800e142:	d505      	bpl.n	800e150 <_dtoa_r+0x4d0>
 800e144:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e148:	f7f2 fa7e 	bl	8000648 <__aeabi_dmul>
 800e14c:	3601      	adds	r6, #1
 800e14e:	2301      	movs	r3, #1
 800e150:	1064      	asrs	r4, r4, #1
 800e152:	3508      	adds	r5, #8
 800e154:	e762      	b.n	800e01c <_dtoa_r+0x39c>
 800e156:	2602      	movs	r6, #2
 800e158:	e765      	b.n	800e026 <_dtoa_r+0x3a6>
 800e15a:	9c03      	ldr	r4, [sp, #12]
 800e15c:	46b8      	mov	r8, r7
 800e15e:	e784      	b.n	800e06a <_dtoa_r+0x3ea>
 800e160:	4b27      	ldr	r3, [pc, #156]	@ (800e200 <_dtoa_r+0x580>)
 800e162:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e164:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e168:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e16c:	4454      	add	r4, sl
 800e16e:	2900      	cmp	r1, #0
 800e170:	d054      	beq.n	800e21c <_dtoa_r+0x59c>
 800e172:	4929      	ldr	r1, [pc, #164]	@ (800e218 <_dtoa_r+0x598>)
 800e174:	2000      	movs	r0, #0
 800e176:	f7f2 fb91 	bl	800089c <__aeabi_ddiv>
 800e17a:	4633      	mov	r3, r6
 800e17c:	462a      	mov	r2, r5
 800e17e:	f7f2 f8ab 	bl	80002d8 <__aeabi_dsub>
 800e182:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e186:	4656      	mov	r6, sl
 800e188:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e18c:	f7f2 fd0c 	bl	8000ba8 <__aeabi_d2iz>
 800e190:	4605      	mov	r5, r0
 800e192:	f7f2 f9ef 	bl	8000574 <__aeabi_i2d>
 800e196:	4602      	mov	r2, r0
 800e198:	460b      	mov	r3, r1
 800e19a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e19e:	f7f2 f89b 	bl	80002d8 <__aeabi_dsub>
 800e1a2:	3530      	adds	r5, #48	@ 0x30
 800e1a4:	4602      	mov	r2, r0
 800e1a6:	460b      	mov	r3, r1
 800e1a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e1ac:	f806 5b01 	strb.w	r5, [r6], #1
 800e1b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e1b4:	f7f2 fcba 	bl	8000b2c <__aeabi_dcmplt>
 800e1b8:	2800      	cmp	r0, #0
 800e1ba:	d172      	bne.n	800e2a2 <_dtoa_r+0x622>
 800e1bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e1c0:	4911      	ldr	r1, [pc, #68]	@ (800e208 <_dtoa_r+0x588>)
 800e1c2:	2000      	movs	r0, #0
 800e1c4:	f7f2 f888 	bl	80002d8 <__aeabi_dsub>
 800e1c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e1cc:	f7f2 fcae 	bl	8000b2c <__aeabi_dcmplt>
 800e1d0:	2800      	cmp	r0, #0
 800e1d2:	f040 80b4 	bne.w	800e33e <_dtoa_r+0x6be>
 800e1d6:	42a6      	cmp	r6, r4
 800e1d8:	f43f af70 	beq.w	800e0bc <_dtoa_r+0x43c>
 800e1dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e1e0:	4b0a      	ldr	r3, [pc, #40]	@ (800e20c <_dtoa_r+0x58c>)
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	f7f2 fa30 	bl	8000648 <__aeabi_dmul>
 800e1e8:	4b08      	ldr	r3, [pc, #32]	@ (800e20c <_dtoa_r+0x58c>)
 800e1ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e1f4:	f7f2 fa28 	bl	8000648 <__aeabi_dmul>
 800e1f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e1fc:	e7c4      	b.n	800e188 <_dtoa_r+0x508>
 800e1fe:	bf00      	nop
 800e200:	080115b0 	.word	0x080115b0
 800e204:	08011588 	.word	0x08011588
 800e208:	3ff00000 	.word	0x3ff00000
 800e20c:	40240000 	.word	0x40240000
 800e210:	401c0000 	.word	0x401c0000
 800e214:	40140000 	.word	0x40140000
 800e218:	3fe00000 	.word	0x3fe00000
 800e21c:	4631      	mov	r1, r6
 800e21e:	4628      	mov	r0, r5
 800e220:	f7f2 fa12 	bl	8000648 <__aeabi_dmul>
 800e224:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e228:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e22a:	4656      	mov	r6, sl
 800e22c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e230:	f7f2 fcba 	bl	8000ba8 <__aeabi_d2iz>
 800e234:	4605      	mov	r5, r0
 800e236:	f7f2 f99d 	bl	8000574 <__aeabi_i2d>
 800e23a:	4602      	mov	r2, r0
 800e23c:	460b      	mov	r3, r1
 800e23e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e242:	f7f2 f849 	bl	80002d8 <__aeabi_dsub>
 800e246:	3530      	adds	r5, #48	@ 0x30
 800e248:	f806 5b01 	strb.w	r5, [r6], #1
 800e24c:	4602      	mov	r2, r0
 800e24e:	460b      	mov	r3, r1
 800e250:	42a6      	cmp	r6, r4
 800e252:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e256:	f04f 0200 	mov.w	r2, #0
 800e25a:	d124      	bne.n	800e2a6 <_dtoa_r+0x626>
 800e25c:	4baf      	ldr	r3, [pc, #700]	@ (800e51c <_dtoa_r+0x89c>)
 800e25e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e262:	f7f2 f83b 	bl	80002dc <__adddf3>
 800e266:	4602      	mov	r2, r0
 800e268:	460b      	mov	r3, r1
 800e26a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e26e:	f7f2 fc7b 	bl	8000b68 <__aeabi_dcmpgt>
 800e272:	2800      	cmp	r0, #0
 800e274:	d163      	bne.n	800e33e <_dtoa_r+0x6be>
 800e276:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e27a:	49a8      	ldr	r1, [pc, #672]	@ (800e51c <_dtoa_r+0x89c>)
 800e27c:	2000      	movs	r0, #0
 800e27e:	f7f2 f82b 	bl	80002d8 <__aeabi_dsub>
 800e282:	4602      	mov	r2, r0
 800e284:	460b      	mov	r3, r1
 800e286:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e28a:	f7f2 fc4f 	bl	8000b2c <__aeabi_dcmplt>
 800e28e:	2800      	cmp	r0, #0
 800e290:	f43f af14 	beq.w	800e0bc <_dtoa_r+0x43c>
 800e294:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e296:	1e73      	subs	r3, r6, #1
 800e298:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e29a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e29e:	2b30      	cmp	r3, #48	@ 0x30
 800e2a0:	d0f8      	beq.n	800e294 <_dtoa_r+0x614>
 800e2a2:	4647      	mov	r7, r8
 800e2a4:	e03b      	b.n	800e31e <_dtoa_r+0x69e>
 800e2a6:	4b9e      	ldr	r3, [pc, #632]	@ (800e520 <_dtoa_r+0x8a0>)
 800e2a8:	f7f2 f9ce 	bl	8000648 <__aeabi_dmul>
 800e2ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e2b0:	e7bc      	b.n	800e22c <_dtoa_r+0x5ac>
 800e2b2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e2b6:	4656      	mov	r6, sl
 800e2b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2bc:	4620      	mov	r0, r4
 800e2be:	4629      	mov	r1, r5
 800e2c0:	f7f2 faec 	bl	800089c <__aeabi_ddiv>
 800e2c4:	f7f2 fc70 	bl	8000ba8 <__aeabi_d2iz>
 800e2c8:	4680      	mov	r8, r0
 800e2ca:	f7f2 f953 	bl	8000574 <__aeabi_i2d>
 800e2ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2d2:	f7f2 f9b9 	bl	8000648 <__aeabi_dmul>
 800e2d6:	4602      	mov	r2, r0
 800e2d8:	460b      	mov	r3, r1
 800e2da:	4620      	mov	r0, r4
 800e2dc:	4629      	mov	r1, r5
 800e2de:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e2e2:	f7f1 fff9 	bl	80002d8 <__aeabi_dsub>
 800e2e6:	f806 4b01 	strb.w	r4, [r6], #1
 800e2ea:	9d03      	ldr	r5, [sp, #12]
 800e2ec:	eba6 040a 	sub.w	r4, r6, sl
 800e2f0:	42a5      	cmp	r5, r4
 800e2f2:	4602      	mov	r2, r0
 800e2f4:	460b      	mov	r3, r1
 800e2f6:	d133      	bne.n	800e360 <_dtoa_r+0x6e0>
 800e2f8:	f7f1 fff0 	bl	80002dc <__adddf3>
 800e2fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e300:	4604      	mov	r4, r0
 800e302:	460d      	mov	r5, r1
 800e304:	f7f2 fc30 	bl	8000b68 <__aeabi_dcmpgt>
 800e308:	b9c0      	cbnz	r0, 800e33c <_dtoa_r+0x6bc>
 800e30a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e30e:	4620      	mov	r0, r4
 800e310:	4629      	mov	r1, r5
 800e312:	f7f2 fc01 	bl	8000b18 <__aeabi_dcmpeq>
 800e316:	b110      	cbz	r0, 800e31e <_dtoa_r+0x69e>
 800e318:	f018 0f01 	tst.w	r8, #1
 800e31c:	d10e      	bne.n	800e33c <_dtoa_r+0x6bc>
 800e31e:	9902      	ldr	r1, [sp, #8]
 800e320:	4648      	mov	r0, r9
 800e322:	f000 fbbd 	bl	800eaa0 <_Bfree>
 800e326:	2300      	movs	r3, #0
 800e328:	7033      	strb	r3, [r6, #0]
 800e32a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e32c:	3701      	adds	r7, #1
 800e32e:	601f      	str	r7, [r3, #0]
 800e330:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e332:	2b00      	cmp	r3, #0
 800e334:	f000 824b 	beq.w	800e7ce <_dtoa_r+0xb4e>
 800e338:	601e      	str	r6, [r3, #0]
 800e33a:	e248      	b.n	800e7ce <_dtoa_r+0xb4e>
 800e33c:	46b8      	mov	r8, r7
 800e33e:	4633      	mov	r3, r6
 800e340:	461e      	mov	r6, r3
 800e342:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e346:	2a39      	cmp	r2, #57	@ 0x39
 800e348:	d106      	bne.n	800e358 <_dtoa_r+0x6d8>
 800e34a:	459a      	cmp	sl, r3
 800e34c:	d1f8      	bne.n	800e340 <_dtoa_r+0x6c0>
 800e34e:	2230      	movs	r2, #48	@ 0x30
 800e350:	f108 0801 	add.w	r8, r8, #1
 800e354:	f88a 2000 	strb.w	r2, [sl]
 800e358:	781a      	ldrb	r2, [r3, #0]
 800e35a:	3201      	adds	r2, #1
 800e35c:	701a      	strb	r2, [r3, #0]
 800e35e:	e7a0      	b.n	800e2a2 <_dtoa_r+0x622>
 800e360:	4b6f      	ldr	r3, [pc, #444]	@ (800e520 <_dtoa_r+0x8a0>)
 800e362:	2200      	movs	r2, #0
 800e364:	f7f2 f970 	bl	8000648 <__aeabi_dmul>
 800e368:	2200      	movs	r2, #0
 800e36a:	2300      	movs	r3, #0
 800e36c:	4604      	mov	r4, r0
 800e36e:	460d      	mov	r5, r1
 800e370:	f7f2 fbd2 	bl	8000b18 <__aeabi_dcmpeq>
 800e374:	2800      	cmp	r0, #0
 800e376:	d09f      	beq.n	800e2b8 <_dtoa_r+0x638>
 800e378:	e7d1      	b.n	800e31e <_dtoa_r+0x69e>
 800e37a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e37c:	2a00      	cmp	r2, #0
 800e37e:	f000 80ea 	beq.w	800e556 <_dtoa_r+0x8d6>
 800e382:	9a07      	ldr	r2, [sp, #28]
 800e384:	2a01      	cmp	r2, #1
 800e386:	f300 80cd 	bgt.w	800e524 <_dtoa_r+0x8a4>
 800e38a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e38c:	2a00      	cmp	r2, #0
 800e38e:	f000 80c1 	beq.w	800e514 <_dtoa_r+0x894>
 800e392:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e396:	9c08      	ldr	r4, [sp, #32]
 800e398:	9e00      	ldr	r6, [sp, #0]
 800e39a:	9a00      	ldr	r2, [sp, #0]
 800e39c:	441a      	add	r2, r3
 800e39e:	9200      	str	r2, [sp, #0]
 800e3a0:	9a06      	ldr	r2, [sp, #24]
 800e3a2:	2101      	movs	r1, #1
 800e3a4:	441a      	add	r2, r3
 800e3a6:	4648      	mov	r0, r9
 800e3a8:	9206      	str	r2, [sp, #24]
 800e3aa:	f000 fc77 	bl	800ec9c <__i2b>
 800e3ae:	4605      	mov	r5, r0
 800e3b0:	b166      	cbz	r6, 800e3cc <_dtoa_r+0x74c>
 800e3b2:	9b06      	ldr	r3, [sp, #24]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	dd09      	ble.n	800e3cc <_dtoa_r+0x74c>
 800e3b8:	42b3      	cmp	r3, r6
 800e3ba:	9a00      	ldr	r2, [sp, #0]
 800e3bc:	bfa8      	it	ge
 800e3be:	4633      	movge	r3, r6
 800e3c0:	1ad2      	subs	r2, r2, r3
 800e3c2:	9200      	str	r2, [sp, #0]
 800e3c4:	9a06      	ldr	r2, [sp, #24]
 800e3c6:	1af6      	subs	r6, r6, r3
 800e3c8:	1ad3      	subs	r3, r2, r3
 800e3ca:	9306      	str	r3, [sp, #24]
 800e3cc:	9b08      	ldr	r3, [sp, #32]
 800e3ce:	b30b      	cbz	r3, 800e414 <_dtoa_r+0x794>
 800e3d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	f000 80c6 	beq.w	800e564 <_dtoa_r+0x8e4>
 800e3d8:	2c00      	cmp	r4, #0
 800e3da:	f000 80c0 	beq.w	800e55e <_dtoa_r+0x8de>
 800e3de:	4629      	mov	r1, r5
 800e3e0:	4622      	mov	r2, r4
 800e3e2:	4648      	mov	r0, r9
 800e3e4:	f000 fd12 	bl	800ee0c <__pow5mult>
 800e3e8:	9a02      	ldr	r2, [sp, #8]
 800e3ea:	4601      	mov	r1, r0
 800e3ec:	4605      	mov	r5, r0
 800e3ee:	4648      	mov	r0, r9
 800e3f0:	f000 fc6a 	bl	800ecc8 <__multiply>
 800e3f4:	9902      	ldr	r1, [sp, #8]
 800e3f6:	4680      	mov	r8, r0
 800e3f8:	4648      	mov	r0, r9
 800e3fa:	f000 fb51 	bl	800eaa0 <_Bfree>
 800e3fe:	9b08      	ldr	r3, [sp, #32]
 800e400:	1b1b      	subs	r3, r3, r4
 800e402:	9308      	str	r3, [sp, #32]
 800e404:	f000 80b1 	beq.w	800e56a <_dtoa_r+0x8ea>
 800e408:	9a08      	ldr	r2, [sp, #32]
 800e40a:	4641      	mov	r1, r8
 800e40c:	4648      	mov	r0, r9
 800e40e:	f000 fcfd 	bl	800ee0c <__pow5mult>
 800e412:	9002      	str	r0, [sp, #8]
 800e414:	2101      	movs	r1, #1
 800e416:	4648      	mov	r0, r9
 800e418:	f000 fc40 	bl	800ec9c <__i2b>
 800e41c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e41e:	4604      	mov	r4, r0
 800e420:	2b00      	cmp	r3, #0
 800e422:	f000 81d8 	beq.w	800e7d6 <_dtoa_r+0xb56>
 800e426:	461a      	mov	r2, r3
 800e428:	4601      	mov	r1, r0
 800e42a:	4648      	mov	r0, r9
 800e42c:	f000 fcee 	bl	800ee0c <__pow5mult>
 800e430:	9b07      	ldr	r3, [sp, #28]
 800e432:	2b01      	cmp	r3, #1
 800e434:	4604      	mov	r4, r0
 800e436:	f300 809f 	bgt.w	800e578 <_dtoa_r+0x8f8>
 800e43a:	9b04      	ldr	r3, [sp, #16]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	f040 8097 	bne.w	800e570 <_dtoa_r+0x8f0>
 800e442:	9b05      	ldr	r3, [sp, #20]
 800e444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e448:	2b00      	cmp	r3, #0
 800e44a:	f040 8093 	bne.w	800e574 <_dtoa_r+0x8f4>
 800e44e:	9b05      	ldr	r3, [sp, #20]
 800e450:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e454:	0d1b      	lsrs	r3, r3, #20
 800e456:	051b      	lsls	r3, r3, #20
 800e458:	b133      	cbz	r3, 800e468 <_dtoa_r+0x7e8>
 800e45a:	9b00      	ldr	r3, [sp, #0]
 800e45c:	3301      	adds	r3, #1
 800e45e:	9300      	str	r3, [sp, #0]
 800e460:	9b06      	ldr	r3, [sp, #24]
 800e462:	3301      	adds	r3, #1
 800e464:	9306      	str	r3, [sp, #24]
 800e466:	2301      	movs	r3, #1
 800e468:	9308      	str	r3, [sp, #32]
 800e46a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	f000 81b8 	beq.w	800e7e2 <_dtoa_r+0xb62>
 800e472:	6923      	ldr	r3, [r4, #16]
 800e474:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e478:	6918      	ldr	r0, [r3, #16]
 800e47a:	f000 fbc3 	bl	800ec04 <__hi0bits>
 800e47e:	f1c0 0020 	rsb	r0, r0, #32
 800e482:	9b06      	ldr	r3, [sp, #24]
 800e484:	4418      	add	r0, r3
 800e486:	f010 001f 	ands.w	r0, r0, #31
 800e48a:	f000 8082 	beq.w	800e592 <_dtoa_r+0x912>
 800e48e:	f1c0 0320 	rsb	r3, r0, #32
 800e492:	2b04      	cmp	r3, #4
 800e494:	dd73      	ble.n	800e57e <_dtoa_r+0x8fe>
 800e496:	9b00      	ldr	r3, [sp, #0]
 800e498:	f1c0 001c 	rsb	r0, r0, #28
 800e49c:	4403      	add	r3, r0
 800e49e:	9300      	str	r3, [sp, #0]
 800e4a0:	9b06      	ldr	r3, [sp, #24]
 800e4a2:	4403      	add	r3, r0
 800e4a4:	4406      	add	r6, r0
 800e4a6:	9306      	str	r3, [sp, #24]
 800e4a8:	9b00      	ldr	r3, [sp, #0]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	dd05      	ble.n	800e4ba <_dtoa_r+0x83a>
 800e4ae:	9902      	ldr	r1, [sp, #8]
 800e4b0:	461a      	mov	r2, r3
 800e4b2:	4648      	mov	r0, r9
 800e4b4:	f000 fd04 	bl	800eec0 <__lshift>
 800e4b8:	9002      	str	r0, [sp, #8]
 800e4ba:	9b06      	ldr	r3, [sp, #24]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	dd05      	ble.n	800e4cc <_dtoa_r+0x84c>
 800e4c0:	4621      	mov	r1, r4
 800e4c2:	461a      	mov	r2, r3
 800e4c4:	4648      	mov	r0, r9
 800e4c6:	f000 fcfb 	bl	800eec0 <__lshift>
 800e4ca:	4604      	mov	r4, r0
 800e4cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d061      	beq.n	800e596 <_dtoa_r+0x916>
 800e4d2:	9802      	ldr	r0, [sp, #8]
 800e4d4:	4621      	mov	r1, r4
 800e4d6:	f000 fd5f 	bl	800ef98 <__mcmp>
 800e4da:	2800      	cmp	r0, #0
 800e4dc:	da5b      	bge.n	800e596 <_dtoa_r+0x916>
 800e4de:	2300      	movs	r3, #0
 800e4e0:	9902      	ldr	r1, [sp, #8]
 800e4e2:	220a      	movs	r2, #10
 800e4e4:	4648      	mov	r0, r9
 800e4e6:	f000 fafd 	bl	800eae4 <__multadd>
 800e4ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4ec:	9002      	str	r0, [sp, #8]
 800e4ee:	f107 38ff 	add.w	r8, r7, #4294967295
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	f000 8177 	beq.w	800e7e6 <_dtoa_r+0xb66>
 800e4f8:	4629      	mov	r1, r5
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	220a      	movs	r2, #10
 800e4fe:	4648      	mov	r0, r9
 800e500:	f000 faf0 	bl	800eae4 <__multadd>
 800e504:	f1bb 0f00 	cmp.w	fp, #0
 800e508:	4605      	mov	r5, r0
 800e50a:	dc6f      	bgt.n	800e5ec <_dtoa_r+0x96c>
 800e50c:	9b07      	ldr	r3, [sp, #28]
 800e50e:	2b02      	cmp	r3, #2
 800e510:	dc49      	bgt.n	800e5a6 <_dtoa_r+0x926>
 800e512:	e06b      	b.n	800e5ec <_dtoa_r+0x96c>
 800e514:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e516:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e51a:	e73c      	b.n	800e396 <_dtoa_r+0x716>
 800e51c:	3fe00000 	.word	0x3fe00000
 800e520:	40240000 	.word	0x40240000
 800e524:	9b03      	ldr	r3, [sp, #12]
 800e526:	1e5c      	subs	r4, r3, #1
 800e528:	9b08      	ldr	r3, [sp, #32]
 800e52a:	42a3      	cmp	r3, r4
 800e52c:	db09      	blt.n	800e542 <_dtoa_r+0x8c2>
 800e52e:	1b1c      	subs	r4, r3, r4
 800e530:	9b03      	ldr	r3, [sp, #12]
 800e532:	2b00      	cmp	r3, #0
 800e534:	f6bf af30 	bge.w	800e398 <_dtoa_r+0x718>
 800e538:	9b00      	ldr	r3, [sp, #0]
 800e53a:	9a03      	ldr	r2, [sp, #12]
 800e53c:	1a9e      	subs	r6, r3, r2
 800e53e:	2300      	movs	r3, #0
 800e540:	e72b      	b.n	800e39a <_dtoa_r+0x71a>
 800e542:	9b08      	ldr	r3, [sp, #32]
 800e544:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e546:	9408      	str	r4, [sp, #32]
 800e548:	1ae3      	subs	r3, r4, r3
 800e54a:	441a      	add	r2, r3
 800e54c:	9e00      	ldr	r6, [sp, #0]
 800e54e:	9b03      	ldr	r3, [sp, #12]
 800e550:	920d      	str	r2, [sp, #52]	@ 0x34
 800e552:	2400      	movs	r4, #0
 800e554:	e721      	b.n	800e39a <_dtoa_r+0x71a>
 800e556:	9c08      	ldr	r4, [sp, #32]
 800e558:	9e00      	ldr	r6, [sp, #0]
 800e55a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e55c:	e728      	b.n	800e3b0 <_dtoa_r+0x730>
 800e55e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e562:	e751      	b.n	800e408 <_dtoa_r+0x788>
 800e564:	9a08      	ldr	r2, [sp, #32]
 800e566:	9902      	ldr	r1, [sp, #8]
 800e568:	e750      	b.n	800e40c <_dtoa_r+0x78c>
 800e56a:	f8cd 8008 	str.w	r8, [sp, #8]
 800e56e:	e751      	b.n	800e414 <_dtoa_r+0x794>
 800e570:	2300      	movs	r3, #0
 800e572:	e779      	b.n	800e468 <_dtoa_r+0x7e8>
 800e574:	9b04      	ldr	r3, [sp, #16]
 800e576:	e777      	b.n	800e468 <_dtoa_r+0x7e8>
 800e578:	2300      	movs	r3, #0
 800e57a:	9308      	str	r3, [sp, #32]
 800e57c:	e779      	b.n	800e472 <_dtoa_r+0x7f2>
 800e57e:	d093      	beq.n	800e4a8 <_dtoa_r+0x828>
 800e580:	9a00      	ldr	r2, [sp, #0]
 800e582:	331c      	adds	r3, #28
 800e584:	441a      	add	r2, r3
 800e586:	9200      	str	r2, [sp, #0]
 800e588:	9a06      	ldr	r2, [sp, #24]
 800e58a:	441a      	add	r2, r3
 800e58c:	441e      	add	r6, r3
 800e58e:	9206      	str	r2, [sp, #24]
 800e590:	e78a      	b.n	800e4a8 <_dtoa_r+0x828>
 800e592:	4603      	mov	r3, r0
 800e594:	e7f4      	b.n	800e580 <_dtoa_r+0x900>
 800e596:	9b03      	ldr	r3, [sp, #12]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	46b8      	mov	r8, r7
 800e59c:	dc20      	bgt.n	800e5e0 <_dtoa_r+0x960>
 800e59e:	469b      	mov	fp, r3
 800e5a0:	9b07      	ldr	r3, [sp, #28]
 800e5a2:	2b02      	cmp	r3, #2
 800e5a4:	dd1e      	ble.n	800e5e4 <_dtoa_r+0x964>
 800e5a6:	f1bb 0f00 	cmp.w	fp, #0
 800e5aa:	f47f adb1 	bne.w	800e110 <_dtoa_r+0x490>
 800e5ae:	4621      	mov	r1, r4
 800e5b0:	465b      	mov	r3, fp
 800e5b2:	2205      	movs	r2, #5
 800e5b4:	4648      	mov	r0, r9
 800e5b6:	f000 fa95 	bl	800eae4 <__multadd>
 800e5ba:	4601      	mov	r1, r0
 800e5bc:	4604      	mov	r4, r0
 800e5be:	9802      	ldr	r0, [sp, #8]
 800e5c0:	f000 fcea 	bl	800ef98 <__mcmp>
 800e5c4:	2800      	cmp	r0, #0
 800e5c6:	f77f ada3 	ble.w	800e110 <_dtoa_r+0x490>
 800e5ca:	4656      	mov	r6, sl
 800e5cc:	2331      	movs	r3, #49	@ 0x31
 800e5ce:	f806 3b01 	strb.w	r3, [r6], #1
 800e5d2:	f108 0801 	add.w	r8, r8, #1
 800e5d6:	e59f      	b.n	800e118 <_dtoa_r+0x498>
 800e5d8:	9c03      	ldr	r4, [sp, #12]
 800e5da:	46b8      	mov	r8, r7
 800e5dc:	4625      	mov	r5, r4
 800e5de:	e7f4      	b.n	800e5ca <_dtoa_r+0x94a>
 800e5e0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e5e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	f000 8101 	beq.w	800e7ee <_dtoa_r+0xb6e>
 800e5ec:	2e00      	cmp	r6, #0
 800e5ee:	dd05      	ble.n	800e5fc <_dtoa_r+0x97c>
 800e5f0:	4629      	mov	r1, r5
 800e5f2:	4632      	mov	r2, r6
 800e5f4:	4648      	mov	r0, r9
 800e5f6:	f000 fc63 	bl	800eec0 <__lshift>
 800e5fa:	4605      	mov	r5, r0
 800e5fc:	9b08      	ldr	r3, [sp, #32]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d05c      	beq.n	800e6bc <_dtoa_r+0xa3c>
 800e602:	6869      	ldr	r1, [r5, #4]
 800e604:	4648      	mov	r0, r9
 800e606:	f000 fa0b 	bl	800ea20 <_Balloc>
 800e60a:	4606      	mov	r6, r0
 800e60c:	b928      	cbnz	r0, 800e61a <_dtoa_r+0x99a>
 800e60e:	4b82      	ldr	r3, [pc, #520]	@ (800e818 <_dtoa_r+0xb98>)
 800e610:	4602      	mov	r2, r0
 800e612:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e616:	f7ff bb4a 	b.w	800dcae <_dtoa_r+0x2e>
 800e61a:	692a      	ldr	r2, [r5, #16]
 800e61c:	3202      	adds	r2, #2
 800e61e:	0092      	lsls	r2, r2, #2
 800e620:	f105 010c 	add.w	r1, r5, #12
 800e624:	300c      	adds	r0, #12
 800e626:	f7ff fa8c 	bl	800db42 <memcpy>
 800e62a:	2201      	movs	r2, #1
 800e62c:	4631      	mov	r1, r6
 800e62e:	4648      	mov	r0, r9
 800e630:	f000 fc46 	bl	800eec0 <__lshift>
 800e634:	f10a 0301 	add.w	r3, sl, #1
 800e638:	9300      	str	r3, [sp, #0]
 800e63a:	eb0a 030b 	add.w	r3, sl, fp
 800e63e:	9308      	str	r3, [sp, #32]
 800e640:	9b04      	ldr	r3, [sp, #16]
 800e642:	f003 0301 	and.w	r3, r3, #1
 800e646:	462f      	mov	r7, r5
 800e648:	9306      	str	r3, [sp, #24]
 800e64a:	4605      	mov	r5, r0
 800e64c:	9b00      	ldr	r3, [sp, #0]
 800e64e:	9802      	ldr	r0, [sp, #8]
 800e650:	4621      	mov	r1, r4
 800e652:	f103 3bff 	add.w	fp, r3, #4294967295
 800e656:	f7ff fa89 	bl	800db6c <quorem>
 800e65a:	4603      	mov	r3, r0
 800e65c:	3330      	adds	r3, #48	@ 0x30
 800e65e:	9003      	str	r0, [sp, #12]
 800e660:	4639      	mov	r1, r7
 800e662:	9802      	ldr	r0, [sp, #8]
 800e664:	9309      	str	r3, [sp, #36]	@ 0x24
 800e666:	f000 fc97 	bl	800ef98 <__mcmp>
 800e66a:	462a      	mov	r2, r5
 800e66c:	9004      	str	r0, [sp, #16]
 800e66e:	4621      	mov	r1, r4
 800e670:	4648      	mov	r0, r9
 800e672:	f000 fcad 	bl	800efd0 <__mdiff>
 800e676:	68c2      	ldr	r2, [r0, #12]
 800e678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e67a:	4606      	mov	r6, r0
 800e67c:	bb02      	cbnz	r2, 800e6c0 <_dtoa_r+0xa40>
 800e67e:	4601      	mov	r1, r0
 800e680:	9802      	ldr	r0, [sp, #8]
 800e682:	f000 fc89 	bl	800ef98 <__mcmp>
 800e686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e688:	4602      	mov	r2, r0
 800e68a:	4631      	mov	r1, r6
 800e68c:	4648      	mov	r0, r9
 800e68e:	920c      	str	r2, [sp, #48]	@ 0x30
 800e690:	9309      	str	r3, [sp, #36]	@ 0x24
 800e692:	f000 fa05 	bl	800eaa0 <_Bfree>
 800e696:	9b07      	ldr	r3, [sp, #28]
 800e698:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e69a:	9e00      	ldr	r6, [sp, #0]
 800e69c:	ea42 0103 	orr.w	r1, r2, r3
 800e6a0:	9b06      	ldr	r3, [sp, #24]
 800e6a2:	4319      	orrs	r1, r3
 800e6a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6a6:	d10d      	bne.n	800e6c4 <_dtoa_r+0xa44>
 800e6a8:	2b39      	cmp	r3, #57	@ 0x39
 800e6aa:	d027      	beq.n	800e6fc <_dtoa_r+0xa7c>
 800e6ac:	9a04      	ldr	r2, [sp, #16]
 800e6ae:	2a00      	cmp	r2, #0
 800e6b0:	dd01      	ble.n	800e6b6 <_dtoa_r+0xa36>
 800e6b2:	9b03      	ldr	r3, [sp, #12]
 800e6b4:	3331      	adds	r3, #49	@ 0x31
 800e6b6:	f88b 3000 	strb.w	r3, [fp]
 800e6ba:	e52e      	b.n	800e11a <_dtoa_r+0x49a>
 800e6bc:	4628      	mov	r0, r5
 800e6be:	e7b9      	b.n	800e634 <_dtoa_r+0x9b4>
 800e6c0:	2201      	movs	r2, #1
 800e6c2:	e7e2      	b.n	800e68a <_dtoa_r+0xa0a>
 800e6c4:	9904      	ldr	r1, [sp, #16]
 800e6c6:	2900      	cmp	r1, #0
 800e6c8:	db04      	blt.n	800e6d4 <_dtoa_r+0xa54>
 800e6ca:	9807      	ldr	r0, [sp, #28]
 800e6cc:	4301      	orrs	r1, r0
 800e6ce:	9806      	ldr	r0, [sp, #24]
 800e6d0:	4301      	orrs	r1, r0
 800e6d2:	d120      	bne.n	800e716 <_dtoa_r+0xa96>
 800e6d4:	2a00      	cmp	r2, #0
 800e6d6:	ddee      	ble.n	800e6b6 <_dtoa_r+0xa36>
 800e6d8:	9902      	ldr	r1, [sp, #8]
 800e6da:	9300      	str	r3, [sp, #0]
 800e6dc:	2201      	movs	r2, #1
 800e6de:	4648      	mov	r0, r9
 800e6e0:	f000 fbee 	bl	800eec0 <__lshift>
 800e6e4:	4621      	mov	r1, r4
 800e6e6:	9002      	str	r0, [sp, #8]
 800e6e8:	f000 fc56 	bl	800ef98 <__mcmp>
 800e6ec:	2800      	cmp	r0, #0
 800e6ee:	9b00      	ldr	r3, [sp, #0]
 800e6f0:	dc02      	bgt.n	800e6f8 <_dtoa_r+0xa78>
 800e6f2:	d1e0      	bne.n	800e6b6 <_dtoa_r+0xa36>
 800e6f4:	07da      	lsls	r2, r3, #31
 800e6f6:	d5de      	bpl.n	800e6b6 <_dtoa_r+0xa36>
 800e6f8:	2b39      	cmp	r3, #57	@ 0x39
 800e6fa:	d1da      	bne.n	800e6b2 <_dtoa_r+0xa32>
 800e6fc:	2339      	movs	r3, #57	@ 0x39
 800e6fe:	f88b 3000 	strb.w	r3, [fp]
 800e702:	4633      	mov	r3, r6
 800e704:	461e      	mov	r6, r3
 800e706:	3b01      	subs	r3, #1
 800e708:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e70c:	2a39      	cmp	r2, #57	@ 0x39
 800e70e:	d04e      	beq.n	800e7ae <_dtoa_r+0xb2e>
 800e710:	3201      	adds	r2, #1
 800e712:	701a      	strb	r2, [r3, #0]
 800e714:	e501      	b.n	800e11a <_dtoa_r+0x49a>
 800e716:	2a00      	cmp	r2, #0
 800e718:	dd03      	ble.n	800e722 <_dtoa_r+0xaa2>
 800e71a:	2b39      	cmp	r3, #57	@ 0x39
 800e71c:	d0ee      	beq.n	800e6fc <_dtoa_r+0xa7c>
 800e71e:	3301      	adds	r3, #1
 800e720:	e7c9      	b.n	800e6b6 <_dtoa_r+0xa36>
 800e722:	9a00      	ldr	r2, [sp, #0]
 800e724:	9908      	ldr	r1, [sp, #32]
 800e726:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e72a:	428a      	cmp	r2, r1
 800e72c:	d028      	beq.n	800e780 <_dtoa_r+0xb00>
 800e72e:	9902      	ldr	r1, [sp, #8]
 800e730:	2300      	movs	r3, #0
 800e732:	220a      	movs	r2, #10
 800e734:	4648      	mov	r0, r9
 800e736:	f000 f9d5 	bl	800eae4 <__multadd>
 800e73a:	42af      	cmp	r7, r5
 800e73c:	9002      	str	r0, [sp, #8]
 800e73e:	f04f 0300 	mov.w	r3, #0
 800e742:	f04f 020a 	mov.w	r2, #10
 800e746:	4639      	mov	r1, r7
 800e748:	4648      	mov	r0, r9
 800e74a:	d107      	bne.n	800e75c <_dtoa_r+0xadc>
 800e74c:	f000 f9ca 	bl	800eae4 <__multadd>
 800e750:	4607      	mov	r7, r0
 800e752:	4605      	mov	r5, r0
 800e754:	9b00      	ldr	r3, [sp, #0]
 800e756:	3301      	adds	r3, #1
 800e758:	9300      	str	r3, [sp, #0]
 800e75a:	e777      	b.n	800e64c <_dtoa_r+0x9cc>
 800e75c:	f000 f9c2 	bl	800eae4 <__multadd>
 800e760:	4629      	mov	r1, r5
 800e762:	4607      	mov	r7, r0
 800e764:	2300      	movs	r3, #0
 800e766:	220a      	movs	r2, #10
 800e768:	4648      	mov	r0, r9
 800e76a:	f000 f9bb 	bl	800eae4 <__multadd>
 800e76e:	4605      	mov	r5, r0
 800e770:	e7f0      	b.n	800e754 <_dtoa_r+0xad4>
 800e772:	f1bb 0f00 	cmp.w	fp, #0
 800e776:	bfcc      	ite	gt
 800e778:	465e      	movgt	r6, fp
 800e77a:	2601      	movle	r6, #1
 800e77c:	4456      	add	r6, sl
 800e77e:	2700      	movs	r7, #0
 800e780:	9902      	ldr	r1, [sp, #8]
 800e782:	9300      	str	r3, [sp, #0]
 800e784:	2201      	movs	r2, #1
 800e786:	4648      	mov	r0, r9
 800e788:	f000 fb9a 	bl	800eec0 <__lshift>
 800e78c:	4621      	mov	r1, r4
 800e78e:	9002      	str	r0, [sp, #8]
 800e790:	f000 fc02 	bl	800ef98 <__mcmp>
 800e794:	2800      	cmp	r0, #0
 800e796:	dcb4      	bgt.n	800e702 <_dtoa_r+0xa82>
 800e798:	d102      	bne.n	800e7a0 <_dtoa_r+0xb20>
 800e79a:	9b00      	ldr	r3, [sp, #0]
 800e79c:	07db      	lsls	r3, r3, #31
 800e79e:	d4b0      	bmi.n	800e702 <_dtoa_r+0xa82>
 800e7a0:	4633      	mov	r3, r6
 800e7a2:	461e      	mov	r6, r3
 800e7a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e7a8:	2a30      	cmp	r2, #48	@ 0x30
 800e7aa:	d0fa      	beq.n	800e7a2 <_dtoa_r+0xb22>
 800e7ac:	e4b5      	b.n	800e11a <_dtoa_r+0x49a>
 800e7ae:	459a      	cmp	sl, r3
 800e7b0:	d1a8      	bne.n	800e704 <_dtoa_r+0xa84>
 800e7b2:	2331      	movs	r3, #49	@ 0x31
 800e7b4:	f108 0801 	add.w	r8, r8, #1
 800e7b8:	f88a 3000 	strb.w	r3, [sl]
 800e7bc:	e4ad      	b.n	800e11a <_dtoa_r+0x49a>
 800e7be:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e7c0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e81c <_dtoa_r+0xb9c>
 800e7c4:	b11b      	cbz	r3, 800e7ce <_dtoa_r+0xb4e>
 800e7c6:	f10a 0308 	add.w	r3, sl, #8
 800e7ca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e7cc:	6013      	str	r3, [r2, #0]
 800e7ce:	4650      	mov	r0, sl
 800e7d0:	b017      	add	sp, #92	@ 0x5c
 800e7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7d6:	9b07      	ldr	r3, [sp, #28]
 800e7d8:	2b01      	cmp	r3, #1
 800e7da:	f77f ae2e 	ble.w	800e43a <_dtoa_r+0x7ba>
 800e7de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e7e0:	9308      	str	r3, [sp, #32]
 800e7e2:	2001      	movs	r0, #1
 800e7e4:	e64d      	b.n	800e482 <_dtoa_r+0x802>
 800e7e6:	f1bb 0f00 	cmp.w	fp, #0
 800e7ea:	f77f aed9 	ble.w	800e5a0 <_dtoa_r+0x920>
 800e7ee:	4656      	mov	r6, sl
 800e7f0:	9802      	ldr	r0, [sp, #8]
 800e7f2:	4621      	mov	r1, r4
 800e7f4:	f7ff f9ba 	bl	800db6c <quorem>
 800e7f8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e7fc:	f806 3b01 	strb.w	r3, [r6], #1
 800e800:	eba6 020a 	sub.w	r2, r6, sl
 800e804:	4593      	cmp	fp, r2
 800e806:	ddb4      	ble.n	800e772 <_dtoa_r+0xaf2>
 800e808:	9902      	ldr	r1, [sp, #8]
 800e80a:	2300      	movs	r3, #0
 800e80c:	220a      	movs	r2, #10
 800e80e:	4648      	mov	r0, r9
 800e810:	f000 f968 	bl	800eae4 <__multadd>
 800e814:	9002      	str	r0, [sp, #8]
 800e816:	e7eb      	b.n	800e7f0 <_dtoa_r+0xb70>
 800e818:	0801145a 	.word	0x0801145a
 800e81c:	080113de 	.word	0x080113de

0800e820 <_free_r>:
 800e820:	b538      	push	{r3, r4, r5, lr}
 800e822:	4605      	mov	r5, r0
 800e824:	2900      	cmp	r1, #0
 800e826:	d041      	beq.n	800e8ac <_free_r+0x8c>
 800e828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e82c:	1f0c      	subs	r4, r1, #4
 800e82e:	2b00      	cmp	r3, #0
 800e830:	bfb8      	it	lt
 800e832:	18e4      	addlt	r4, r4, r3
 800e834:	f000 f8e8 	bl	800ea08 <__malloc_lock>
 800e838:	4a1d      	ldr	r2, [pc, #116]	@ (800e8b0 <_free_r+0x90>)
 800e83a:	6813      	ldr	r3, [r2, #0]
 800e83c:	b933      	cbnz	r3, 800e84c <_free_r+0x2c>
 800e83e:	6063      	str	r3, [r4, #4]
 800e840:	6014      	str	r4, [r2, #0]
 800e842:	4628      	mov	r0, r5
 800e844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e848:	f000 b8e4 	b.w	800ea14 <__malloc_unlock>
 800e84c:	42a3      	cmp	r3, r4
 800e84e:	d908      	bls.n	800e862 <_free_r+0x42>
 800e850:	6820      	ldr	r0, [r4, #0]
 800e852:	1821      	adds	r1, r4, r0
 800e854:	428b      	cmp	r3, r1
 800e856:	bf01      	itttt	eq
 800e858:	6819      	ldreq	r1, [r3, #0]
 800e85a:	685b      	ldreq	r3, [r3, #4]
 800e85c:	1809      	addeq	r1, r1, r0
 800e85e:	6021      	streq	r1, [r4, #0]
 800e860:	e7ed      	b.n	800e83e <_free_r+0x1e>
 800e862:	461a      	mov	r2, r3
 800e864:	685b      	ldr	r3, [r3, #4]
 800e866:	b10b      	cbz	r3, 800e86c <_free_r+0x4c>
 800e868:	42a3      	cmp	r3, r4
 800e86a:	d9fa      	bls.n	800e862 <_free_r+0x42>
 800e86c:	6811      	ldr	r1, [r2, #0]
 800e86e:	1850      	adds	r0, r2, r1
 800e870:	42a0      	cmp	r0, r4
 800e872:	d10b      	bne.n	800e88c <_free_r+0x6c>
 800e874:	6820      	ldr	r0, [r4, #0]
 800e876:	4401      	add	r1, r0
 800e878:	1850      	adds	r0, r2, r1
 800e87a:	4283      	cmp	r3, r0
 800e87c:	6011      	str	r1, [r2, #0]
 800e87e:	d1e0      	bne.n	800e842 <_free_r+0x22>
 800e880:	6818      	ldr	r0, [r3, #0]
 800e882:	685b      	ldr	r3, [r3, #4]
 800e884:	6053      	str	r3, [r2, #4]
 800e886:	4408      	add	r0, r1
 800e888:	6010      	str	r0, [r2, #0]
 800e88a:	e7da      	b.n	800e842 <_free_r+0x22>
 800e88c:	d902      	bls.n	800e894 <_free_r+0x74>
 800e88e:	230c      	movs	r3, #12
 800e890:	602b      	str	r3, [r5, #0]
 800e892:	e7d6      	b.n	800e842 <_free_r+0x22>
 800e894:	6820      	ldr	r0, [r4, #0]
 800e896:	1821      	adds	r1, r4, r0
 800e898:	428b      	cmp	r3, r1
 800e89a:	bf04      	itt	eq
 800e89c:	6819      	ldreq	r1, [r3, #0]
 800e89e:	685b      	ldreq	r3, [r3, #4]
 800e8a0:	6063      	str	r3, [r4, #4]
 800e8a2:	bf04      	itt	eq
 800e8a4:	1809      	addeq	r1, r1, r0
 800e8a6:	6021      	streq	r1, [r4, #0]
 800e8a8:	6054      	str	r4, [r2, #4]
 800e8aa:	e7ca      	b.n	800e842 <_free_r+0x22>
 800e8ac:	bd38      	pop	{r3, r4, r5, pc}
 800e8ae:	bf00      	nop
 800e8b0:	20002270 	.word	0x20002270

0800e8b4 <malloc>:
 800e8b4:	4b02      	ldr	r3, [pc, #8]	@ (800e8c0 <malloc+0xc>)
 800e8b6:	4601      	mov	r1, r0
 800e8b8:	6818      	ldr	r0, [r3, #0]
 800e8ba:	f000 b825 	b.w	800e908 <_malloc_r>
 800e8be:	bf00      	nop
 800e8c0:	20000190 	.word	0x20000190

0800e8c4 <sbrk_aligned>:
 800e8c4:	b570      	push	{r4, r5, r6, lr}
 800e8c6:	4e0f      	ldr	r6, [pc, #60]	@ (800e904 <sbrk_aligned+0x40>)
 800e8c8:	460c      	mov	r4, r1
 800e8ca:	6831      	ldr	r1, [r6, #0]
 800e8cc:	4605      	mov	r5, r0
 800e8ce:	b911      	cbnz	r1, 800e8d6 <sbrk_aligned+0x12>
 800e8d0:	f001 ffda 	bl	8010888 <_sbrk_r>
 800e8d4:	6030      	str	r0, [r6, #0]
 800e8d6:	4621      	mov	r1, r4
 800e8d8:	4628      	mov	r0, r5
 800e8da:	f001 ffd5 	bl	8010888 <_sbrk_r>
 800e8de:	1c43      	adds	r3, r0, #1
 800e8e0:	d103      	bne.n	800e8ea <sbrk_aligned+0x26>
 800e8e2:	f04f 34ff 	mov.w	r4, #4294967295
 800e8e6:	4620      	mov	r0, r4
 800e8e8:	bd70      	pop	{r4, r5, r6, pc}
 800e8ea:	1cc4      	adds	r4, r0, #3
 800e8ec:	f024 0403 	bic.w	r4, r4, #3
 800e8f0:	42a0      	cmp	r0, r4
 800e8f2:	d0f8      	beq.n	800e8e6 <sbrk_aligned+0x22>
 800e8f4:	1a21      	subs	r1, r4, r0
 800e8f6:	4628      	mov	r0, r5
 800e8f8:	f001 ffc6 	bl	8010888 <_sbrk_r>
 800e8fc:	3001      	adds	r0, #1
 800e8fe:	d1f2      	bne.n	800e8e6 <sbrk_aligned+0x22>
 800e900:	e7ef      	b.n	800e8e2 <sbrk_aligned+0x1e>
 800e902:	bf00      	nop
 800e904:	2000226c 	.word	0x2000226c

0800e908 <_malloc_r>:
 800e908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e90c:	1ccd      	adds	r5, r1, #3
 800e90e:	f025 0503 	bic.w	r5, r5, #3
 800e912:	3508      	adds	r5, #8
 800e914:	2d0c      	cmp	r5, #12
 800e916:	bf38      	it	cc
 800e918:	250c      	movcc	r5, #12
 800e91a:	2d00      	cmp	r5, #0
 800e91c:	4606      	mov	r6, r0
 800e91e:	db01      	blt.n	800e924 <_malloc_r+0x1c>
 800e920:	42a9      	cmp	r1, r5
 800e922:	d904      	bls.n	800e92e <_malloc_r+0x26>
 800e924:	230c      	movs	r3, #12
 800e926:	6033      	str	r3, [r6, #0]
 800e928:	2000      	movs	r0, #0
 800e92a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e92e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ea04 <_malloc_r+0xfc>
 800e932:	f000 f869 	bl	800ea08 <__malloc_lock>
 800e936:	f8d8 3000 	ldr.w	r3, [r8]
 800e93a:	461c      	mov	r4, r3
 800e93c:	bb44      	cbnz	r4, 800e990 <_malloc_r+0x88>
 800e93e:	4629      	mov	r1, r5
 800e940:	4630      	mov	r0, r6
 800e942:	f7ff ffbf 	bl	800e8c4 <sbrk_aligned>
 800e946:	1c43      	adds	r3, r0, #1
 800e948:	4604      	mov	r4, r0
 800e94a:	d158      	bne.n	800e9fe <_malloc_r+0xf6>
 800e94c:	f8d8 4000 	ldr.w	r4, [r8]
 800e950:	4627      	mov	r7, r4
 800e952:	2f00      	cmp	r7, #0
 800e954:	d143      	bne.n	800e9de <_malloc_r+0xd6>
 800e956:	2c00      	cmp	r4, #0
 800e958:	d04b      	beq.n	800e9f2 <_malloc_r+0xea>
 800e95a:	6823      	ldr	r3, [r4, #0]
 800e95c:	4639      	mov	r1, r7
 800e95e:	4630      	mov	r0, r6
 800e960:	eb04 0903 	add.w	r9, r4, r3
 800e964:	f001 ff90 	bl	8010888 <_sbrk_r>
 800e968:	4581      	cmp	r9, r0
 800e96a:	d142      	bne.n	800e9f2 <_malloc_r+0xea>
 800e96c:	6821      	ldr	r1, [r4, #0]
 800e96e:	1a6d      	subs	r5, r5, r1
 800e970:	4629      	mov	r1, r5
 800e972:	4630      	mov	r0, r6
 800e974:	f7ff ffa6 	bl	800e8c4 <sbrk_aligned>
 800e978:	3001      	adds	r0, #1
 800e97a:	d03a      	beq.n	800e9f2 <_malloc_r+0xea>
 800e97c:	6823      	ldr	r3, [r4, #0]
 800e97e:	442b      	add	r3, r5
 800e980:	6023      	str	r3, [r4, #0]
 800e982:	f8d8 3000 	ldr.w	r3, [r8]
 800e986:	685a      	ldr	r2, [r3, #4]
 800e988:	bb62      	cbnz	r2, 800e9e4 <_malloc_r+0xdc>
 800e98a:	f8c8 7000 	str.w	r7, [r8]
 800e98e:	e00f      	b.n	800e9b0 <_malloc_r+0xa8>
 800e990:	6822      	ldr	r2, [r4, #0]
 800e992:	1b52      	subs	r2, r2, r5
 800e994:	d420      	bmi.n	800e9d8 <_malloc_r+0xd0>
 800e996:	2a0b      	cmp	r2, #11
 800e998:	d917      	bls.n	800e9ca <_malloc_r+0xc2>
 800e99a:	1961      	adds	r1, r4, r5
 800e99c:	42a3      	cmp	r3, r4
 800e99e:	6025      	str	r5, [r4, #0]
 800e9a0:	bf18      	it	ne
 800e9a2:	6059      	strne	r1, [r3, #4]
 800e9a4:	6863      	ldr	r3, [r4, #4]
 800e9a6:	bf08      	it	eq
 800e9a8:	f8c8 1000 	streq.w	r1, [r8]
 800e9ac:	5162      	str	r2, [r4, r5]
 800e9ae:	604b      	str	r3, [r1, #4]
 800e9b0:	4630      	mov	r0, r6
 800e9b2:	f000 f82f 	bl	800ea14 <__malloc_unlock>
 800e9b6:	f104 000b 	add.w	r0, r4, #11
 800e9ba:	1d23      	adds	r3, r4, #4
 800e9bc:	f020 0007 	bic.w	r0, r0, #7
 800e9c0:	1ac2      	subs	r2, r0, r3
 800e9c2:	bf1c      	itt	ne
 800e9c4:	1a1b      	subne	r3, r3, r0
 800e9c6:	50a3      	strne	r3, [r4, r2]
 800e9c8:	e7af      	b.n	800e92a <_malloc_r+0x22>
 800e9ca:	6862      	ldr	r2, [r4, #4]
 800e9cc:	42a3      	cmp	r3, r4
 800e9ce:	bf0c      	ite	eq
 800e9d0:	f8c8 2000 	streq.w	r2, [r8]
 800e9d4:	605a      	strne	r2, [r3, #4]
 800e9d6:	e7eb      	b.n	800e9b0 <_malloc_r+0xa8>
 800e9d8:	4623      	mov	r3, r4
 800e9da:	6864      	ldr	r4, [r4, #4]
 800e9dc:	e7ae      	b.n	800e93c <_malloc_r+0x34>
 800e9de:	463c      	mov	r4, r7
 800e9e0:	687f      	ldr	r7, [r7, #4]
 800e9e2:	e7b6      	b.n	800e952 <_malloc_r+0x4a>
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	685b      	ldr	r3, [r3, #4]
 800e9e8:	42a3      	cmp	r3, r4
 800e9ea:	d1fb      	bne.n	800e9e4 <_malloc_r+0xdc>
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	6053      	str	r3, [r2, #4]
 800e9f0:	e7de      	b.n	800e9b0 <_malloc_r+0xa8>
 800e9f2:	230c      	movs	r3, #12
 800e9f4:	6033      	str	r3, [r6, #0]
 800e9f6:	4630      	mov	r0, r6
 800e9f8:	f000 f80c 	bl	800ea14 <__malloc_unlock>
 800e9fc:	e794      	b.n	800e928 <_malloc_r+0x20>
 800e9fe:	6005      	str	r5, [r0, #0]
 800ea00:	e7d6      	b.n	800e9b0 <_malloc_r+0xa8>
 800ea02:	bf00      	nop
 800ea04:	20002270 	.word	0x20002270

0800ea08 <__malloc_lock>:
 800ea08:	4801      	ldr	r0, [pc, #4]	@ (800ea10 <__malloc_lock+0x8>)
 800ea0a:	f7ff b898 	b.w	800db3e <__retarget_lock_acquire_recursive>
 800ea0e:	bf00      	nop
 800ea10:	20002268 	.word	0x20002268

0800ea14 <__malloc_unlock>:
 800ea14:	4801      	ldr	r0, [pc, #4]	@ (800ea1c <__malloc_unlock+0x8>)
 800ea16:	f7ff b893 	b.w	800db40 <__retarget_lock_release_recursive>
 800ea1a:	bf00      	nop
 800ea1c:	20002268 	.word	0x20002268

0800ea20 <_Balloc>:
 800ea20:	b570      	push	{r4, r5, r6, lr}
 800ea22:	69c6      	ldr	r6, [r0, #28]
 800ea24:	4604      	mov	r4, r0
 800ea26:	460d      	mov	r5, r1
 800ea28:	b976      	cbnz	r6, 800ea48 <_Balloc+0x28>
 800ea2a:	2010      	movs	r0, #16
 800ea2c:	f7ff ff42 	bl	800e8b4 <malloc>
 800ea30:	4602      	mov	r2, r0
 800ea32:	61e0      	str	r0, [r4, #28]
 800ea34:	b920      	cbnz	r0, 800ea40 <_Balloc+0x20>
 800ea36:	4b18      	ldr	r3, [pc, #96]	@ (800ea98 <_Balloc+0x78>)
 800ea38:	4818      	ldr	r0, [pc, #96]	@ (800ea9c <_Balloc+0x7c>)
 800ea3a:	216b      	movs	r1, #107	@ 0x6b
 800ea3c:	f001 ff3c 	bl	80108b8 <__assert_func>
 800ea40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea44:	6006      	str	r6, [r0, #0]
 800ea46:	60c6      	str	r6, [r0, #12]
 800ea48:	69e6      	ldr	r6, [r4, #28]
 800ea4a:	68f3      	ldr	r3, [r6, #12]
 800ea4c:	b183      	cbz	r3, 800ea70 <_Balloc+0x50>
 800ea4e:	69e3      	ldr	r3, [r4, #28]
 800ea50:	68db      	ldr	r3, [r3, #12]
 800ea52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ea56:	b9b8      	cbnz	r0, 800ea88 <_Balloc+0x68>
 800ea58:	2101      	movs	r1, #1
 800ea5a:	fa01 f605 	lsl.w	r6, r1, r5
 800ea5e:	1d72      	adds	r2, r6, #5
 800ea60:	0092      	lsls	r2, r2, #2
 800ea62:	4620      	mov	r0, r4
 800ea64:	f001 ff46 	bl	80108f4 <_calloc_r>
 800ea68:	b160      	cbz	r0, 800ea84 <_Balloc+0x64>
 800ea6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ea6e:	e00e      	b.n	800ea8e <_Balloc+0x6e>
 800ea70:	2221      	movs	r2, #33	@ 0x21
 800ea72:	2104      	movs	r1, #4
 800ea74:	4620      	mov	r0, r4
 800ea76:	f001 ff3d 	bl	80108f4 <_calloc_r>
 800ea7a:	69e3      	ldr	r3, [r4, #28]
 800ea7c:	60f0      	str	r0, [r6, #12]
 800ea7e:	68db      	ldr	r3, [r3, #12]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d1e4      	bne.n	800ea4e <_Balloc+0x2e>
 800ea84:	2000      	movs	r0, #0
 800ea86:	bd70      	pop	{r4, r5, r6, pc}
 800ea88:	6802      	ldr	r2, [r0, #0]
 800ea8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ea8e:	2300      	movs	r3, #0
 800ea90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ea94:	e7f7      	b.n	800ea86 <_Balloc+0x66>
 800ea96:	bf00      	nop
 800ea98:	080113eb 	.word	0x080113eb
 800ea9c:	0801146b 	.word	0x0801146b

0800eaa0 <_Bfree>:
 800eaa0:	b570      	push	{r4, r5, r6, lr}
 800eaa2:	69c6      	ldr	r6, [r0, #28]
 800eaa4:	4605      	mov	r5, r0
 800eaa6:	460c      	mov	r4, r1
 800eaa8:	b976      	cbnz	r6, 800eac8 <_Bfree+0x28>
 800eaaa:	2010      	movs	r0, #16
 800eaac:	f7ff ff02 	bl	800e8b4 <malloc>
 800eab0:	4602      	mov	r2, r0
 800eab2:	61e8      	str	r0, [r5, #28]
 800eab4:	b920      	cbnz	r0, 800eac0 <_Bfree+0x20>
 800eab6:	4b09      	ldr	r3, [pc, #36]	@ (800eadc <_Bfree+0x3c>)
 800eab8:	4809      	ldr	r0, [pc, #36]	@ (800eae0 <_Bfree+0x40>)
 800eaba:	218f      	movs	r1, #143	@ 0x8f
 800eabc:	f001 fefc 	bl	80108b8 <__assert_func>
 800eac0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eac4:	6006      	str	r6, [r0, #0]
 800eac6:	60c6      	str	r6, [r0, #12]
 800eac8:	b13c      	cbz	r4, 800eada <_Bfree+0x3a>
 800eaca:	69eb      	ldr	r3, [r5, #28]
 800eacc:	6862      	ldr	r2, [r4, #4]
 800eace:	68db      	ldr	r3, [r3, #12]
 800ead0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ead4:	6021      	str	r1, [r4, #0]
 800ead6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eada:	bd70      	pop	{r4, r5, r6, pc}
 800eadc:	080113eb 	.word	0x080113eb
 800eae0:	0801146b 	.word	0x0801146b

0800eae4 <__multadd>:
 800eae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eae8:	690d      	ldr	r5, [r1, #16]
 800eaea:	4607      	mov	r7, r0
 800eaec:	460c      	mov	r4, r1
 800eaee:	461e      	mov	r6, r3
 800eaf0:	f101 0c14 	add.w	ip, r1, #20
 800eaf4:	2000      	movs	r0, #0
 800eaf6:	f8dc 3000 	ldr.w	r3, [ip]
 800eafa:	b299      	uxth	r1, r3
 800eafc:	fb02 6101 	mla	r1, r2, r1, r6
 800eb00:	0c1e      	lsrs	r6, r3, #16
 800eb02:	0c0b      	lsrs	r3, r1, #16
 800eb04:	fb02 3306 	mla	r3, r2, r6, r3
 800eb08:	b289      	uxth	r1, r1
 800eb0a:	3001      	adds	r0, #1
 800eb0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eb10:	4285      	cmp	r5, r0
 800eb12:	f84c 1b04 	str.w	r1, [ip], #4
 800eb16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eb1a:	dcec      	bgt.n	800eaf6 <__multadd+0x12>
 800eb1c:	b30e      	cbz	r6, 800eb62 <__multadd+0x7e>
 800eb1e:	68a3      	ldr	r3, [r4, #8]
 800eb20:	42ab      	cmp	r3, r5
 800eb22:	dc19      	bgt.n	800eb58 <__multadd+0x74>
 800eb24:	6861      	ldr	r1, [r4, #4]
 800eb26:	4638      	mov	r0, r7
 800eb28:	3101      	adds	r1, #1
 800eb2a:	f7ff ff79 	bl	800ea20 <_Balloc>
 800eb2e:	4680      	mov	r8, r0
 800eb30:	b928      	cbnz	r0, 800eb3e <__multadd+0x5a>
 800eb32:	4602      	mov	r2, r0
 800eb34:	4b0c      	ldr	r3, [pc, #48]	@ (800eb68 <__multadd+0x84>)
 800eb36:	480d      	ldr	r0, [pc, #52]	@ (800eb6c <__multadd+0x88>)
 800eb38:	21ba      	movs	r1, #186	@ 0xba
 800eb3a:	f001 febd 	bl	80108b8 <__assert_func>
 800eb3e:	6922      	ldr	r2, [r4, #16]
 800eb40:	3202      	adds	r2, #2
 800eb42:	f104 010c 	add.w	r1, r4, #12
 800eb46:	0092      	lsls	r2, r2, #2
 800eb48:	300c      	adds	r0, #12
 800eb4a:	f7fe fffa 	bl	800db42 <memcpy>
 800eb4e:	4621      	mov	r1, r4
 800eb50:	4638      	mov	r0, r7
 800eb52:	f7ff ffa5 	bl	800eaa0 <_Bfree>
 800eb56:	4644      	mov	r4, r8
 800eb58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eb5c:	3501      	adds	r5, #1
 800eb5e:	615e      	str	r6, [r3, #20]
 800eb60:	6125      	str	r5, [r4, #16]
 800eb62:	4620      	mov	r0, r4
 800eb64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb68:	0801145a 	.word	0x0801145a
 800eb6c:	0801146b 	.word	0x0801146b

0800eb70 <__s2b>:
 800eb70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb74:	460c      	mov	r4, r1
 800eb76:	4615      	mov	r5, r2
 800eb78:	461f      	mov	r7, r3
 800eb7a:	2209      	movs	r2, #9
 800eb7c:	3308      	adds	r3, #8
 800eb7e:	4606      	mov	r6, r0
 800eb80:	fb93 f3f2 	sdiv	r3, r3, r2
 800eb84:	2100      	movs	r1, #0
 800eb86:	2201      	movs	r2, #1
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	db09      	blt.n	800eba0 <__s2b+0x30>
 800eb8c:	4630      	mov	r0, r6
 800eb8e:	f7ff ff47 	bl	800ea20 <_Balloc>
 800eb92:	b940      	cbnz	r0, 800eba6 <__s2b+0x36>
 800eb94:	4602      	mov	r2, r0
 800eb96:	4b19      	ldr	r3, [pc, #100]	@ (800ebfc <__s2b+0x8c>)
 800eb98:	4819      	ldr	r0, [pc, #100]	@ (800ec00 <__s2b+0x90>)
 800eb9a:	21d3      	movs	r1, #211	@ 0xd3
 800eb9c:	f001 fe8c 	bl	80108b8 <__assert_func>
 800eba0:	0052      	lsls	r2, r2, #1
 800eba2:	3101      	adds	r1, #1
 800eba4:	e7f0      	b.n	800eb88 <__s2b+0x18>
 800eba6:	9b08      	ldr	r3, [sp, #32]
 800eba8:	6143      	str	r3, [r0, #20]
 800ebaa:	2d09      	cmp	r5, #9
 800ebac:	f04f 0301 	mov.w	r3, #1
 800ebb0:	6103      	str	r3, [r0, #16]
 800ebb2:	dd16      	ble.n	800ebe2 <__s2b+0x72>
 800ebb4:	f104 0909 	add.w	r9, r4, #9
 800ebb8:	46c8      	mov	r8, r9
 800ebba:	442c      	add	r4, r5
 800ebbc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ebc0:	4601      	mov	r1, r0
 800ebc2:	3b30      	subs	r3, #48	@ 0x30
 800ebc4:	220a      	movs	r2, #10
 800ebc6:	4630      	mov	r0, r6
 800ebc8:	f7ff ff8c 	bl	800eae4 <__multadd>
 800ebcc:	45a0      	cmp	r8, r4
 800ebce:	d1f5      	bne.n	800ebbc <__s2b+0x4c>
 800ebd0:	f1a5 0408 	sub.w	r4, r5, #8
 800ebd4:	444c      	add	r4, r9
 800ebd6:	1b2d      	subs	r5, r5, r4
 800ebd8:	1963      	adds	r3, r4, r5
 800ebda:	42bb      	cmp	r3, r7
 800ebdc:	db04      	blt.n	800ebe8 <__s2b+0x78>
 800ebde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebe2:	340a      	adds	r4, #10
 800ebe4:	2509      	movs	r5, #9
 800ebe6:	e7f6      	b.n	800ebd6 <__s2b+0x66>
 800ebe8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ebec:	4601      	mov	r1, r0
 800ebee:	3b30      	subs	r3, #48	@ 0x30
 800ebf0:	220a      	movs	r2, #10
 800ebf2:	4630      	mov	r0, r6
 800ebf4:	f7ff ff76 	bl	800eae4 <__multadd>
 800ebf8:	e7ee      	b.n	800ebd8 <__s2b+0x68>
 800ebfa:	bf00      	nop
 800ebfc:	0801145a 	.word	0x0801145a
 800ec00:	0801146b 	.word	0x0801146b

0800ec04 <__hi0bits>:
 800ec04:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ec08:	4603      	mov	r3, r0
 800ec0a:	bf36      	itet	cc
 800ec0c:	0403      	lslcc	r3, r0, #16
 800ec0e:	2000      	movcs	r0, #0
 800ec10:	2010      	movcc	r0, #16
 800ec12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ec16:	bf3c      	itt	cc
 800ec18:	021b      	lslcc	r3, r3, #8
 800ec1a:	3008      	addcc	r0, #8
 800ec1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ec20:	bf3c      	itt	cc
 800ec22:	011b      	lslcc	r3, r3, #4
 800ec24:	3004      	addcc	r0, #4
 800ec26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec2a:	bf3c      	itt	cc
 800ec2c:	009b      	lslcc	r3, r3, #2
 800ec2e:	3002      	addcc	r0, #2
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	db05      	blt.n	800ec40 <__hi0bits+0x3c>
 800ec34:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ec38:	f100 0001 	add.w	r0, r0, #1
 800ec3c:	bf08      	it	eq
 800ec3e:	2020      	moveq	r0, #32
 800ec40:	4770      	bx	lr

0800ec42 <__lo0bits>:
 800ec42:	6803      	ldr	r3, [r0, #0]
 800ec44:	4602      	mov	r2, r0
 800ec46:	f013 0007 	ands.w	r0, r3, #7
 800ec4a:	d00b      	beq.n	800ec64 <__lo0bits+0x22>
 800ec4c:	07d9      	lsls	r1, r3, #31
 800ec4e:	d421      	bmi.n	800ec94 <__lo0bits+0x52>
 800ec50:	0798      	lsls	r0, r3, #30
 800ec52:	bf49      	itett	mi
 800ec54:	085b      	lsrmi	r3, r3, #1
 800ec56:	089b      	lsrpl	r3, r3, #2
 800ec58:	2001      	movmi	r0, #1
 800ec5a:	6013      	strmi	r3, [r2, #0]
 800ec5c:	bf5c      	itt	pl
 800ec5e:	6013      	strpl	r3, [r2, #0]
 800ec60:	2002      	movpl	r0, #2
 800ec62:	4770      	bx	lr
 800ec64:	b299      	uxth	r1, r3
 800ec66:	b909      	cbnz	r1, 800ec6c <__lo0bits+0x2a>
 800ec68:	0c1b      	lsrs	r3, r3, #16
 800ec6a:	2010      	movs	r0, #16
 800ec6c:	b2d9      	uxtb	r1, r3
 800ec6e:	b909      	cbnz	r1, 800ec74 <__lo0bits+0x32>
 800ec70:	3008      	adds	r0, #8
 800ec72:	0a1b      	lsrs	r3, r3, #8
 800ec74:	0719      	lsls	r1, r3, #28
 800ec76:	bf04      	itt	eq
 800ec78:	091b      	lsreq	r3, r3, #4
 800ec7a:	3004      	addeq	r0, #4
 800ec7c:	0799      	lsls	r1, r3, #30
 800ec7e:	bf04      	itt	eq
 800ec80:	089b      	lsreq	r3, r3, #2
 800ec82:	3002      	addeq	r0, #2
 800ec84:	07d9      	lsls	r1, r3, #31
 800ec86:	d403      	bmi.n	800ec90 <__lo0bits+0x4e>
 800ec88:	085b      	lsrs	r3, r3, #1
 800ec8a:	f100 0001 	add.w	r0, r0, #1
 800ec8e:	d003      	beq.n	800ec98 <__lo0bits+0x56>
 800ec90:	6013      	str	r3, [r2, #0]
 800ec92:	4770      	bx	lr
 800ec94:	2000      	movs	r0, #0
 800ec96:	4770      	bx	lr
 800ec98:	2020      	movs	r0, #32
 800ec9a:	4770      	bx	lr

0800ec9c <__i2b>:
 800ec9c:	b510      	push	{r4, lr}
 800ec9e:	460c      	mov	r4, r1
 800eca0:	2101      	movs	r1, #1
 800eca2:	f7ff febd 	bl	800ea20 <_Balloc>
 800eca6:	4602      	mov	r2, r0
 800eca8:	b928      	cbnz	r0, 800ecb6 <__i2b+0x1a>
 800ecaa:	4b05      	ldr	r3, [pc, #20]	@ (800ecc0 <__i2b+0x24>)
 800ecac:	4805      	ldr	r0, [pc, #20]	@ (800ecc4 <__i2b+0x28>)
 800ecae:	f240 1145 	movw	r1, #325	@ 0x145
 800ecb2:	f001 fe01 	bl	80108b8 <__assert_func>
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	6144      	str	r4, [r0, #20]
 800ecba:	6103      	str	r3, [r0, #16]
 800ecbc:	bd10      	pop	{r4, pc}
 800ecbe:	bf00      	nop
 800ecc0:	0801145a 	.word	0x0801145a
 800ecc4:	0801146b 	.word	0x0801146b

0800ecc8 <__multiply>:
 800ecc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eccc:	4617      	mov	r7, r2
 800ecce:	690a      	ldr	r2, [r1, #16]
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	bfa8      	it	ge
 800ecd6:	463b      	movge	r3, r7
 800ecd8:	4689      	mov	r9, r1
 800ecda:	bfa4      	itt	ge
 800ecdc:	460f      	movge	r7, r1
 800ecde:	4699      	movge	r9, r3
 800ece0:	693d      	ldr	r5, [r7, #16]
 800ece2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	6879      	ldr	r1, [r7, #4]
 800ecea:	eb05 060a 	add.w	r6, r5, sl
 800ecee:	42b3      	cmp	r3, r6
 800ecf0:	b085      	sub	sp, #20
 800ecf2:	bfb8      	it	lt
 800ecf4:	3101      	addlt	r1, #1
 800ecf6:	f7ff fe93 	bl	800ea20 <_Balloc>
 800ecfa:	b930      	cbnz	r0, 800ed0a <__multiply+0x42>
 800ecfc:	4602      	mov	r2, r0
 800ecfe:	4b41      	ldr	r3, [pc, #260]	@ (800ee04 <__multiply+0x13c>)
 800ed00:	4841      	ldr	r0, [pc, #260]	@ (800ee08 <__multiply+0x140>)
 800ed02:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ed06:	f001 fdd7 	bl	80108b8 <__assert_func>
 800ed0a:	f100 0414 	add.w	r4, r0, #20
 800ed0e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ed12:	4623      	mov	r3, r4
 800ed14:	2200      	movs	r2, #0
 800ed16:	4573      	cmp	r3, lr
 800ed18:	d320      	bcc.n	800ed5c <__multiply+0x94>
 800ed1a:	f107 0814 	add.w	r8, r7, #20
 800ed1e:	f109 0114 	add.w	r1, r9, #20
 800ed22:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ed26:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ed2a:	9302      	str	r3, [sp, #8]
 800ed2c:	1beb      	subs	r3, r5, r7
 800ed2e:	3b15      	subs	r3, #21
 800ed30:	f023 0303 	bic.w	r3, r3, #3
 800ed34:	3304      	adds	r3, #4
 800ed36:	3715      	adds	r7, #21
 800ed38:	42bd      	cmp	r5, r7
 800ed3a:	bf38      	it	cc
 800ed3c:	2304      	movcc	r3, #4
 800ed3e:	9301      	str	r3, [sp, #4]
 800ed40:	9b02      	ldr	r3, [sp, #8]
 800ed42:	9103      	str	r1, [sp, #12]
 800ed44:	428b      	cmp	r3, r1
 800ed46:	d80c      	bhi.n	800ed62 <__multiply+0x9a>
 800ed48:	2e00      	cmp	r6, #0
 800ed4a:	dd03      	ble.n	800ed54 <__multiply+0x8c>
 800ed4c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d055      	beq.n	800ee00 <__multiply+0x138>
 800ed54:	6106      	str	r6, [r0, #16]
 800ed56:	b005      	add	sp, #20
 800ed58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed5c:	f843 2b04 	str.w	r2, [r3], #4
 800ed60:	e7d9      	b.n	800ed16 <__multiply+0x4e>
 800ed62:	f8b1 a000 	ldrh.w	sl, [r1]
 800ed66:	f1ba 0f00 	cmp.w	sl, #0
 800ed6a:	d01f      	beq.n	800edac <__multiply+0xe4>
 800ed6c:	46c4      	mov	ip, r8
 800ed6e:	46a1      	mov	r9, r4
 800ed70:	2700      	movs	r7, #0
 800ed72:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ed76:	f8d9 3000 	ldr.w	r3, [r9]
 800ed7a:	fa1f fb82 	uxth.w	fp, r2
 800ed7e:	b29b      	uxth	r3, r3
 800ed80:	fb0a 330b 	mla	r3, sl, fp, r3
 800ed84:	443b      	add	r3, r7
 800ed86:	f8d9 7000 	ldr.w	r7, [r9]
 800ed8a:	0c12      	lsrs	r2, r2, #16
 800ed8c:	0c3f      	lsrs	r7, r7, #16
 800ed8e:	fb0a 7202 	mla	r2, sl, r2, r7
 800ed92:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ed96:	b29b      	uxth	r3, r3
 800ed98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed9c:	4565      	cmp	r5, ip
 800ed9e:	f849 3b04 	str.w	r3, [r9], #4
 800eda2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800eda6:	d8e4      	bhi.n	800ed72 <__multiply+0xaa>
 800eda8:	9b01      	ldr	r3, [sp, #4]
 800edaa:	50e7      	str	r7, [r4, r3]
 800edac:	9b03      	ldr	r3, [sp, #12]
 800edae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800edb2:	3104      	adds	r1, #4
 800edb4:	f1b9 0f00 	cmp.w	r9, #0
 800edb8:	d020      	beq.n	800edfc <__multiply+0x134>
 800edba:	6823      	ldr	r3, [r4, #0]
 800edbc:	4647      	mov	r7, r8
 800edbe:	46a4      	mov	ip, r4
 800edc0:	f04f 0a00 	mov.w	sl, #0
 800edc4:	f8b7 b000 	ldrh.w	fp, [r7]
 800edc8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800edcc:	fb09 220b 	mla	r2, r9, fp, r2
 800edd0:	4452      	add	r2, sl
 800edd2:	b29b      	uxth	r3, r3
 800edd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800edd8:	f84c 3b04 	str.w	r3, [ip], #4
 800eddc:	f857 3b04 	ldr.w	r3, [r7], #4
 800ede0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ede4:	f8bc 3000 	ldrh.w	r3, [ip]
 800ede8:	fb09 330a 	mla	r3, r9, sl, r3
 800edec:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800edf0:	42bd      	cmp	r5, r7
 800edf2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800edf6:	d8e5      	bhi.n	800edc4 <__multiply+0xfc>
 800edf8:	9a01      	ldr	r2, [sp, #4]
 800edfa:	50a3      	str	r3, [r4, r2]
 800edfc:	3404      	adds	r4, #4
 800edfe:	e79f      	b.n	800ed40 <__multiply+0x78>
 800ee00:	3e01      	subs	r6, #1
 800ee02:	e7a1      	b.n	800ed48 <__multiply+0x80>
 800ee04:	0801145a 	.word	0x0801145a
 800ee08:	0801146b 	.word	0x0801146b

0800ee0c <__pow5mult>:
 800ee0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee10:	4615      	mov	r5, r2
 800ee12:	f012 0203 	ands.w	r2, r2, #3
 800ee16:	4607      	mov	r7, r0
 800ee18:	460e      	mov	r6, r1
 800ee1a:	d007      	beq.n	800ee2c <__pow5mult+0x20>
 800ee1c:	4c25      	ldr	r4, [pc, #148]	@ (800eeb4 <__pow5mult+0xa8>)
 800ee1e:	3a01      	subs	r2, #1
 800ee20:	2300      	movs	r3, #0
 800ee22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ee26:	f7ff fe5d 	bl	800eae4 <__multadd>
 800ee2a:	4606      	mov	r6, r0
 800ee2c:	10ad      	asrs	r5, r5, #2
 800ee2e:	d03d      	beq.n	800eeac <__pow5mult+0xa0>
 800ee30:	69fc      	ldr	r4, [r7, #28]
 800ee32:	b97c      	cbnz	r4, 800ee54 <__pow5mult+0x48>
 800ee34:	2010      	movs	r0, #16
 800ee36:	f7ff fd3d 	bl	800e8b4 <malloc>
 800ee3a:	4602      	mov	r2, r0
 800ee3c:	61f8      	str	r0, [r7, #28]
 800ee3e:	b928      	cbnz	r0, 800ee4c <__pow5mult+0x40>
 800ee40:	4b1d      	ldr	r3, [pc, #116]	@ (800eeb8 <__pow5mult+0xac>)
 800ee42:	481e      	ldr	r0, [pc, #120]	@ (800eebc <__pow5mult+0xb0>)
 800ee44:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ee48:	f001 fd36 	bl	80108b8 <__assert_func>
 800ee4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ee50:	6004      	str	r4, [r0, #0]
 800ee52:	60c4      	str	r4, [r0, #12]
 800ee54:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ee58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ee5c:	b94c      	cbnz	r4, 800ee72 <__pow5mult+0x66>
 800ee5e:	f240 2171 	movw	r1, #625	@ 0x271
 800ee62:	4638      	mov	r0, r7
 800ee64:	f7ff ff1a 	bl	800ec9c <__i2b>
 800ee68:	2300      	movs	r3, #0
 800ee6a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ee6e:	4604      	mov	r4, r0
 800ee70:	6003      	str	r3, [r0, #0]
 800ee72:	f04f 0900 	mov.w	r9, #0
 800ee76:	07eb      	lsls	r3, r5, #31
 800ee78:	d50a      	bpl.n	800ee90 <__pow5mult+0x84>
 800ee7a:	4631      	mov	r1, r6
 800ee7c:	4622      	mov	r2, r4
 800ee7e:	4638      	mov	r0, r7
 800ee80:	f7ff ff22 	bl	800ecc8 <__multiply>
 800ee84:	4631      	mov	r1, r6
 800ee86:	4680      	mov	r8, r0
 800ee88:	4638      	mov	r0, r7
 800ee8a:	f7ff fe09 	bl	800eaa0 <_Bfree>
 800ee8e:	4646      	mov	r6, r8
 800ee90:	106d      	asrs	r5, r5, #1
 800ee92:	d00b      	beq.n	800eeac <__pow5mult+0xa0>
 800ee94:	6820      	ldr	r0, [r4, #0]
 800ee96:	b938      	cbnz	r0, 800eea8 <__pow5mult+0x9c>
 800ee98:	4622      	mov	r2, r4
 800ee9a:	4621      	mov	r1, r4
 800ee9c:	4638      	mov	r0, r7
 800ee9e:	f7ff ff13 	bl	800ecc8 <__multiply>
 800eea2:	6020      	str	r0, [r4, #0]
 800eea4:	f8c0 9000 	str.w	r9, [r0]
 800eea8:	4604      	mov	r4, r0
 800eeaa:	e7e4      	b.n	800ee76 <__pow5mult+0x6a>
 800eeac:	4630      	mov	r0, r6
 800eeae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eeb2:	bf00      	nop
 800eeb4:	0801157c 	.word	0x0801157c
 800eeb8:	080113eb 	.word	0x080113eb
 800eebc:	0801146b 	.word	0x0801146b

0800eec0 <__lshift>:
 800eec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eec4:	460c      	mov	r4, r1
 800eec6:	6849      	ldr	r1, [r1, #4]
 800eec8:	6923      	ldr	r3, [r4, #16]
 800eeca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eece:	68a3      	ldr	r3, [r4, #8]
 800eed0:	4607      	mov	r7, r0
 800eed2:	4691      	mov	r9, r2
 800eed4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eed8:	f108 0601 	add.w	r6, r8, #1
 800eedc:	42b3      	cmp	r3, r6
 800eede:	db0b      	blt.n	800eef8 <__lshift+0x38>
 800eee0:	4638      	mov	r0, r7
 800eee2:	f7ff fd9d 	bl	800ea20 <_Balloc>
 800eee6:	4605      	mov	r5, r0
 800eee8:	b948      	cbnz	r0, 800eefe <__lshift+0x3e>
 800eeea:	4602      	mov	r2, r0
 800eeec:	4b28      	ldr	r3, [pc, #160]	@ (800ef90 <__lshift+0xd0>)
 800eeee:	4829      	ldr	r0, [pc, #164]	@ (800ef94 <__lshift+0xd4>)
 800eef0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800eef4:	f001 fce0 	bl	80108b8 <__assert_func>
 800eef8:	3101      	adds	r1, #1
 800eefa:	005b      	lsls	r3, r3, #1
 800eefc:	e7ee      	b.n	800eedc <__lshift+0x1c>
 800eefe:	2300      	movs	r3, #0
 800ef00:	f100 0114 	add.w	r1, r0, #20
 800ef04:	f100 0210 	add.w	r2, r0, #16
 800ef08:	4618      	mov	r0, r3
 800ef0a:	4553      	cmp	r3, sl
 800ef0c:	db33      	blt.n	800ef76 <__lshift+0xb6>
 800ef0e:	6920      	ldr	r0, [r4, #16]
 800ef10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ef14:	f104 0314 	add.w	r3, r4, #20
 800ef18:	f019 091f 	ands.w	r9, r9, #31
 800ef1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ef20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ef24:	d02b      	beq.n	800ef7e <__lshift+0xbe>
 800ef26:	f1c9 0e20 	rsb	lr, r9, #32
 800ef2a:	468a      	mov	sl, r1
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	6818      	ldr	r0, [r3, #0]
 800ef30:	fa00 f009 	lsl.w	r0, r0, r9
 800ef34:	4310      	orrs	r0, r2
 800ef36:	f84a 0b04 	str.w	r0, [sl], #4
 800ef3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef3e:	459c      	cmp	ip, r3
 800ef40:	fa22 f20e 	lsr.w	r2, r2, lr
 800ef44:	d8f3      	bhi.n	800ef2e <__lshift+0x6e>
 800ef46:	ebac 0304 	sub.w	r3, ip, r4
 800ef4a:	3b15      	subs	r3, #21
 800ef4c:	f023 0303 	bic.w	r3, r3, #3
 800ef50:	3304      	adds	r3, #4
 800ef52:	f104 0015 	add.w	r0, r4, #21
 800ef56:	4560      	cmp	r0, ip
 800ef58:	bf88      	it	hi
 800ef5a:	2304      	movhi	r3, #4
 800ef5c:	50ca      	str	r2, [r1, r3]
 800ef5e:	b10a      	cbz	r2, 800ef64 <__lshift+0xa4>
 800ef60:	f108 0602 	add.w	r6, r8, #2
 800ef64:	3e01      	subs	r6, #1
 800ef66:	4638      	mov	r0, r7
 800ef68:	612e      	str	r6, [r5, #16]
 800ef6a:	4621      	mov	r1, r4
 800ef6c:	f7ff fd98 	bl	800eaa0 <_Bfree>
 800ef70:	4628      	mov	r0, r5
 800ef72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef76:	f842 0f04 	str.w	r0, [r2, #4]!
 800ef7a:	3301      	adds	r3, #1
 800ef7c:	e7c5      	b.n	800ef0a <__lshift+0x4a>
 800ef7e:	3904      	subs	r1, #4
 800ef80:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef84:	f841 2f04 	str.w	r2, [r1, #4]!
 800ef88:	459c      	cmp	ip, r3
 800ef8a:	d8f9      	bhi.n	800ef80 <__lshift+0xc0>
 800ef8c:	e7ea      	b.n	800ef64 <__lshift+0xa4>
 800ef8e:	bf00      	nop
 800ef90:	0801145a 	.word	0x0801145a
 800ef94:	0801146b 	.word	0x0801146b

0800ef98 <__mcmp>:
 800ef98:	690a      	ldr	r2, [r1, #16]
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	6900      	ldr	r0, [r0, #16]
 800ef9e:	1a80      	subs	r0, r0, r2
 800efa0:	b530      	push	{r4, r5, lr}
 800efa2:	d10e      	bne.n	800efc2 <__mcmp+0x2a>
 800efa4:	3314      	adds	r3, #20
 800efa6:	3114      	adds	r1, #20
 800efa8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800efac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800efb0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800efb4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800efb8:	4295      	cmp	r5, r2
 800efba:	d003      	beq.n	800efc4 <__mcmp+0x2c>
 800efbc:	d205      	bcs.n	800efca <__mcmp+0x32>
 800efbe:	f04f 30ff 	mov.w	r0, #4294967295
 800efc2:	bd30      	pop	{r4, r5, pc}
 800efc4:	42a3      	cmp	r3, r4
 800efc6:	d3f3      	bcc.n	800efb0 <__mcmp+0x18>
 800efc8:	e7fb      	b.n	800efc2 <__mcmp+0x2a>
 800efca:	2001      	movs	r0, #1
 800efcc:	e7f9      	b.n	800efc2 <__mcmp+0x2a>
	...

0800efd0 <__mdiff>:
 800efd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efd4:	4689      	mov	r9, r1
 800efd6:	4606      	mov	r6, r0
 800efd8:	4611      	mov	r1, r2
 800efda:	4648      	mov	r0, r9
 800efdc:	4614      	mov	r4, r2
 800efde:	f7ff ffdb 	bl	800ef98 <__mcmp>
 800efe2:	1e05      	subs	r5, r0, #0
 800efe4:	d112      	bne.n	800f00c <__mdiff+0x3c>
 800efe6:	4629      	mov	r1, r5
 800efe8:	4630      	mov	r0, r6
 800efea:	f7ff fd19 	bl	800ea20 <_Balloc>
 800efee:	4602      	mov	r2, r0
 800eff0:	b928      	cbnz	r0, 800effe <__mdiff+0x2e>
 800eff2:	4b3f      	ldr	r3, [pc, #252]	@ (800f0f0 <__mdiff+0x120>)
 800eff4:	f240 2137 	movw	r1, #567	@ 0x237
 800eff8:	483e      	ldr	r0, [pc, #248]	@ (800f0f4 <__mdiff+0x124>)
 800effa:	f001 fc5d 	bl	80108b8 <__assert_func>
 800effe:	2301      	movs	r3, #1
 800f000:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f004:	4610      	mov	r0, r2
 800f006:	b003      	add	sp, #12
 800f008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f00c:	bfbc      	itt	lt
 800f00e:	464b      	movlt	r3, r9
 800f010:	46a1      	movlt	r9, r4
 800f012:	4630      	mov	r0, r6
 800f014:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f018:	bfba      	itte	lt
 800f01a:	461c      	movlt	r4, r3
 800f01c:	2501      	movlt	r5, #1
 800f01e:	2500      	movge	r5, #0
 800f020:	f7ff fcfe 	bl	800ea20 <_Balloc>
 800f024:	4602      	mov	r2, r0
 800f026:	b918      	cbnz	r0, 800f030 <__mdiff+0x60>
 800f028:	4b31      	ldr	r3, [pc, #196]	@ (800f0f0 <__mdiff+0x120>)
 800f02a:	f240 2145 	movw	r1, #581	@ 0x245
 800f02e:	e7e3      	b.n	800eff8 <__mdiff+0x28>
 800f030:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f034:	6926      	ldr	r6, [r4, #16]
 800f036:	60c5      	str	r5, [r0, #12]
 800f038:	f109 0310 	add.w	r3, r9, #16
 800f03c:	f109 0514 	add.w	r5, r9, #20
 800f040:	f104 0e14 	add.w	lr, r4, #20
 800f044:	f100 0b14 	add.w	fp, r0, #20
 800f048:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f04c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f050:	9301      	str	r3, [sp, #4]
 800f052:	46d9      	mov	r9, fp
 800f054:	f04f 0c00 	mov.w	ip, #0
 800f058:	9b01      	ldr	r3, [sp, #4]
 800f05a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f05e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f062:	9301      	str	r3, [sp, #4]
 800f064:	fa1f f38a 	uxth.w	r3, sl
 800f068:	4619      	mov	r1, r3
 800f06a:	b283      	uxth	r3, r0
 800f06c:	1acb      	subs	r3, r1, r3
 800f06e:	0c00      	lsrs	r0, r0, #16
 800f070:	4463      	add	r3, ip
 800f072:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f076:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f080:	4576      	cmp	r6, lr
 800f082:	f849 3b04 	str.w	r3, [r9], #4
 800f086:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f08a:	d8e5      	bhi.n	800f058 <__mdiff+0x88>
 800f08c:	1b33      	subs	r3, r6, r4
 800f08e:	3b15      	subs	r3, #21
 800f090:	f023 0303 	bic.w	r3, r3, #3
 800f094:	3415      	adds	r4, #21
 800f096:	3304      	adds	r3, #4
 800f098:	42a6      	cmp	r6, r4
 800f09a:	bf38      	it	cc
 800f09c:	2304      	movcc	r3, #4
 800f09e:	441d      	add	r5, r3
 800f0a0:	445b      	add	r3, fp
 800f0a2:	461e      	mov	r6, r3
 800f0a4:	462c      	mov	r4, r5
 800f0a6:	4544      	cmp	r4, r8
 800f0a8:	d30e      	bcc.n	800f0c8 <__mdiff+0xf8>
 800f0aa:	f108 0103 	add.w	r1, r8, #3
 800f0ae:	1b49      	subs	r1, r1, r5
 800f0b0:	f021 0103 	bic.w	r1, r1, #3
 800f0b4:	3d03      	subs	r5, #3
 800f0b6:	45a8      	cmp	r8, r5
 800f0b8:	bf38      	it	cc
 800f0ba:	2100      	movcc	r1, #0
 800f0bc:	440b      	add	r3, r1
 800f0be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f0c2:	b191      	cbz	r1, 800f0ea <__mdiff+0x11a>
 800f0c4:	6117      	str	r7, [r2, #16]
 800f0c6:	e79d      	b.n	800f004 <__mdiff+0x34>
 800f0c8:	f854 1b04 	ldr.w	r1, [r4], #4
 800f0cc:	46e6      	mov	lr, ip
 800f0ce:	0c08      	lsrs	r0, r1, #16
 800f0d0:	fa1c fc81 	uxtah	ip, ip, r1
 800f0d4:	4471      	add	r1, lr
 800f0d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f0da:	b289      	uxth	r1, r1
 800f0dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f0e0:	f846 1b04 	str.w	r1, [r6], #4
 800f0e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f0e8:	e7dd      	b.n	800f0a6 <__mdiff+0xd6>
 800f0ea:	3f01      	subs	r7, #1
 800f0ec:	e7e7      	b.n	800f0be <__mdiff+0xee>
 800f0ee:	bf00      	nop
 800f0f0:	0801145a 	.word	0x0801145a
 800f0f4:	0801146b 	.word	0x0801146b

0800f0f8 <__ulp>:
 800f0f8:	b082      	sub	sp, #8
 800f0fa:	ed8d 0b00 	vstr	d0, [sp]
 800f0fe:	9a01      	ldr	r2, [sp, #4]
 800f100:	4b0f      	ldr	r3, [pc, #60]	@ (800f140 <__ulp+0x48>)
 800f102:	4013      	ands	r3, r2
 800f104:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f108:	2b00      	cmp	r3, #0
 800f10a:	dc08      	bgt.n	800f11e <__ulp+0x26>
 800f10c:	425b      	negs	r3, r3
 800f10e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f112:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f116:	da04      	bge.n	800f122 <__ulp+0x2a>
 800f118:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f11c:	4113      	asrs	r3, r2
 800f11e:	2200      	movs	r2, #0
 800f120:	e008      	b.n	800f134 <__ulp+0x3c>
 800f122:	f1a2 0314 	sub.w	r3, r2, #20
 800f126:	2b1e      	cmp	r3, #30
 800f128:	bfda      	itte	le
 800f12a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f12e:	40da      	lsrle	r2, r3
 800f130:	2201      	movgt	r2, #1
 800f132:	2300      	movs	r3, #0
 800f134:	4619      	mov	r1, r3
 800f136:	4610      	mov	r0, r2
 800f138:	ec41 0b10 	vmov	d0, r0, r1
 800f13c:	b002      	add	sp, #8
 800f13e:	4770      	bx	lr
 800f140:	7ff00000 	.word	0x7ff00000

0800f144 <__b2d>:
 800f144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f148:	6906      	ldr	r6, [r0, #16]
 800f14a:	f100 0814 	add.w	r8, r0, #20
 800f14e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f152:	1f37      	subs	r7, r6, #4
 800f154:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f158:	4610      	mov	r0, r2
 800f15a:	f7ff fd53 	bl	800ec04 <__hi0bits>
 800f15e:	f1c0 0320 	rsb	r3, r0, #32
 800f162:	280a      	cmp	r0, #10
 800f164:	600b      	str	r3, [r1, #0]
 800f166:	491b      	ldr	r1, [pc, #108]	@ (800f1d4 <__b2d+0x90>)
 800f168:	dc15      	bgt.n	800f196 <__b2d+0x52>
 800f16a:	f1c0 0c0b 	rsb	ip, r0, #11
 800f16e:	fa22 f30c 	lsr.w	r3, r2, ip
 800f172:	45b8      	cmp	r8, r7
 800f174:	ea43 0501 	orr.w	r5, r3, r1
 800f178:	bf34      	ite	cc
 800f17a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f17e:	2300      	movcs	r3, #0
 800f180:	3015      	adds	r0, #21
 800f182:	fa02 f000 	lsl.w	r0, r2, r0
 800f186:	fa23 f30c 	lsr.w	r3, r3, ip
 800f18a:	4303      	orrs	r3, r0
 800f18c:	461c      	mov	r4, r3
 800f18e:	ec45 4b10 	vmov	d0, r4, r5
 800f192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f196:	45b8      	cmp	r8, r7
 800f198:	bf3a      	itte	cc
 800f19a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f19e:	f1a6 0708 	subcc.w	r7, r6, #8
 800f1a2:	2300      	movcs	r3, #0
 800f1a4:	380b      	subs	r0, #11
 800f1a6:	d012      	beq.n	800f1ce <__b2d+0x8a>
 800f1a8:	f1c0 0120 	rsb	r1, r0, #32
 800f1ac:	fa23 f401 	lsr.w	r4, r3, r1
 800f1b0:	4082      	lsls	r2, r0
 800f1b2:	4322      	orrs	r2, r4
 800f1b4:	4547      	cmp	r7, r8
 800f1b6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f1ba:	bf8c      	ite	hi
 800f1bc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f1c0:	2200      	movls	r2, #0
 800f1c2:	4083      	lsls	r3, r0
 800f1c4:	40ca      	lsrs	r2, r1
 800f1c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f1ca:	4313      	orrs	r3, r2
 800f1cc:	e7de      	b.n	800f18c <__b2d+0x48>
 800f1ce:	ea42 0501 	orr.w	r5, r2, r1
 800f1d2:	e7db      	b.n	800f18c <__b2d+0x48>
 800f1d4:	3ff00000 	.word	0x3ff00000

0800f1d8 <__d2b>:
 800f1d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f1dc:	460f      	mov	r7, r1
 800f1de:	2101      	movs	r1, #1
 800f1e0:	ec59 8b10 	vmov	r8, r9, d0
 800f1e4:	4616      	mov	r6, r2
 800f1e6:	f7ff fc1b 	bl	800ea20 <_Balloc>
 800f1ea:	4604      	mov	r4, r0
 800f1ec:	b930      	cbnz	r0, 800f1fc <__d2b+0x24>
 800f1ee:	4602      	mov	r2, r0
 800f1f0:	4b23      	ldr	r3, [pc, #140]	@ (800f280 <__d2b+0xa8>)
 800f1f2:	4824      	ldr	r0, [pc, #144]	@ (800f284 <__d2b+0xac>)
 800f1f4:	f240 310f 	movw	r1, #783	@ 0x30f
 800f1f8:	f001 fb5e 	bl	80108b8 <__assert_func>
 800f1fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f200:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f204:	b10d      	cbz	r5, 800f20a <__d2b+0x32>
 800f206:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f20a:	9301      	str	r3, [sp, #4]
 800f20c:	f1b8 0300 	subs.w	r3, r8, #0
 800f210:	d023      	beq.n	800f25a <__d2b+0x82>
 800f212:	4668      	mov	r0, sp
 800f214:	9300      	str	r3, [sp, #0]
 800f216:	f7ff fd14 	bl	800ec42 <__lo0bits>
 800f21a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f21e:	b1d0      	cbz	r0, 800f256 <__d2b+0x7e>
 800f220:	f1c0 0320 	rsb	r3, r0, #32
 800f224:	fa02 f303 	lsl.w	r3, r2, r3
 800f228:	430b      	orrs	r3, r1
 800f22a:	40c2      	lsrs	r2, r0
 800f22c:	6163      	str	r3, [r4, #20]
 800f22e:	9201      	str	r2, [sp, #4]
 800f230:	9b01      	ldr	r3, [sp, #4]
 800f232:	61a3      	str	r3, [r4, #24]
 800f234:	2b00      	cmp	r3, #0
 800f236:	bf0c      	ite	eq
 800f238:	2201      	moveq	r2, #1
 800f23a:	2202      	movne	r2, #2
 800f23c:	6122      	str	r2, [r4, #16]
 800f23e:	b1a5      	cbz	r5, 800f26a <__d2b+0x92>
 800f240:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f244:	4405      	add	r5, r0
 800f246:	603d      	str	r5, [r7, #0]
 800f248:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f24c:	6030      	str	r0, [r6, #0]
 800f24e:	4620      	mov	r0, r4
 800f250:	b003      	add	sp, #12
 800f252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f256:	6161      	str	r1, [r4, #20]
 800f258:	e7ea      	b.n	800f230 <__d2b+0x58>
 800f25a:	a801      	add	r0, sp, #4
 800f25c:	f7ff fcf1 	bl	800ec42 <__lo0bits>
 800f260:	9b01      	ldr	r3, [sp, #4]
 800f262:	6163      	str	r3, [r4, #20]
 800f264:	3020      	adds	r0, #32
 800f266:	2201      	movs	r2, #1
 800f268:	e7e8      	b.n	800f23c <__d2b+0x64>
 800f26a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f26e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f272:	6038      	str	r0, [r7, #0]
 800f274:	6918      	ldr	r0, [r3, #16]
 800f276:	f7ff fcc5 	bl	800ec04 <__hi0bits>
 800f27a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f27e:	e7e5      	b.n	800f24c <__d2b+0x74>
 800f280:	0801145a 	.word	0x0801145a
 800f284:	0801146b 	.word	0x0801146b

0800f288 <__ratio>:
 800f288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f28c:	b085      	sub	sp, #20
 800f28e:	e9cd 1000 	strd	r1, r0, [sp]
 800f292:	a902      	add	r1, sp, #8
 800f294:	f7ff ff56 	bl	800f144 <__b2d>
 800f298:	9800      	ldr	r0, [sp, #0]
 800f29a:	a903      	add	r1, sp, #12
 800f29c:	ec55 4b10 	vmov	r4, r5, d0
 800f2a0:	f7ff ff50 	bl	800f144 <__b2d>
 800f2a4:	9b01      	ldr	r3, [sp, #4]
 800f2a6:	6919      	ldr	r1, [r3, #16]
 800f2a8:	9b00      	ldr	r3, [sp, #0]
 800f2aa:	691b      	ldr	r3, [r3, #16]
 800f2ac:	1ac9      	subs	r1, r1, r3
 800f2ae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f2b2:	1a9b      	subs	r3, r3, r2
 800f2b4:	ec5b ab10 	vmov	sl, fp, d0
 800f2b8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	bfce      	itee	gt
 800f2c0:	462a      	movgt	r2, r5
 800f2c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f2c6:	465a      	movle	r2, fp
 800f2c8:	462f      	mov	r7, r5
 800f2ca:	46d9      	mov	r9, fp
 800f2cc:	bfcc      	ite	gt
 800f2ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f2d2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f2d6:	464b      	mov	r3, r9
 800f2d8:	4652      	mov	r2, sl
 800f2da:	4620      	mov	r0, r4
 800f2dc:	4639      	mov	r1, r7
 800f2de:	f7f1 fadd 	bl	800089c <__aeabi_ddiv>
 800f2e2:	ec41 0b10 	vmov	d0, r0, r1
 800f2e6:	b005      	add	sp, #20
 800f2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f2ec <__copybits>:
 800f2ec:	3901      	subs	r1, #1
 800f2ee:	b570      	push	{r4, r5, r6, lr}
 800f2f0:	1149      	asrs	r1, r1, #5
 800f2f2:	6914      	ldr	r4, [r2, #16]
 800f2f4:	3101      	adds	r1, #1
 800f2f6:	f102 0314 	add.w	r3, r2, #20
 800f2fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f2fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f302:	1f05      	subs	r5, r0, #4
 800f304:	42a3      	cmp	r3, r4
 800f306:	d30c      	bcc.n	800f322 <__copybits+0x36>
 800f308:	1aa3      	subs	r3, r4, r2
 800f30a:	3b11      	subs	r3, #17
 800f30c:	f023 0303 	bic.w	r3, r3, #3
 800f310:	3211      	adds	r2, #17
 800f312:	42a2      	cmp	r2, r4
 800f314:	bf88      	it	hi
 800f316:	2300      	movhi	r3, #0
 800f318:	4418      	add	r0, r3
 800f31a:	2300      	movs	r3, #0
 800f31c:	4288      	cmp	r0, r1
 800f31e:	d305      	bcc.n	800f32c <__copybits+0x40>
 800f320:	bd70      	pop	{r4, r5, r6, pc}
 800f322:	f853 6b04 	ldr.w	r6, [r3], #4
 800f326:	f845 6f04 	str.w	r6, [r5, #4]!
 800f32a:	e7eb      	b.n	800f304 <__copybits+0x18>
 800f32c:	f840 3b04 	str.w	r3, [r0], #4
 800f330:	e7f4      	b.n	800f31c <__copybits+0x30>

0800f332 <__any_on>:
 800f332:	f100 0214 	add.w	r2, r0, #20
 800f336:	6900      	ldr	r0, [r0, #16]
 800f338:	114b      	asrs	r3, r1, #5
 800f33a:	4298      	cmp	r0, r3
 800f33c:	b510      	push	{r4, lr}
 800f33e:	db11      	blt.n	800f364 <__any_on+0x32>
 800f340:	dd0a      	ble.n	800f358 <__any_on+0x26>
 800f342:	f011 011f 	ands.w	r1, r1, #31
 800f346:	d007      	beq.n	800f358 <__any_on+0x26>
 800f348:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f34c:	fa24 f001 	lsr.w	r0, r4, r1
 800f350:	fa00 f101 	lsl.w	r1, r0, r1
 800f354:	428c      	cmp	r4, r1
 800f356:	d10b      	bne.n	800f370 <__any_on+0x3e>
 800f358:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f35c:	4293      	cmp	r3, r2
 800f35e:	d803      	bhi.n	800f368 <__any_on+0x36>
 800f360:	2000      	movs	r0, #0
 800f362:	bd10      	pop	{r4, pc}
 800f364:	4603      	mov	r3, r0
 800f366:	e7f7      	b.n	800f358 <__any_on+0x26>
 800f368:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f36c:	2900      	cmp	r1, #0
 800f36e:	d0f5      	beq.n	800f35c <__any_on+0x2a>
 800f370:	2001      	movs	r0, #1
 800f372:	e7f6      	b.n	800f362 <__any_on+0x30>

0800f374 <sulp>:
 800f374:	b570      	push	{r4, r5, r6, lr}
 800f376:	4604      	mov	r4, r0
 800f378:	460d      	mov	r5, r1
 800f37a:	ec45 4b10 	vmov	d0, r4, r5
 800f37e:	4616      	mov	r6, r2
 800f380:	f7ff feba 	bl	800f0f8 <__ulp>
 800f384:	ec51 0b10 	vmov	r0, r1, d0
 800f388:	b17e      	cbz	r6, 800f3aa <sulp+0x36>
 800f38a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f38e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f392:	2b00      	cmp	r3, #0
 800f394:	dd09      	ble.n	800f3aa <sulp+0x36>
 800f396:	051b      	lsls	r3, r3, #20
 800f398:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f39c:	2400      	movs	r4, #0
 800f39e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f3a2:	4622      	mov	r2, r4
 800f3a4:	462b      	mov	r3, r5
 800f3a6:	f7f1 f94f 	bl	8000648 <__aeabi_dmul>
 800f3aa:	ec41 0b10 	vmov	d0, r0, r1
 800f3ae:	bd70      	pop	{r4, r5, r6, pc}

0800f3b0 <_strtod_l>:
 800f3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3b4:	b09f      	sub	sp, #124	@ 0x7c
 800f3b6:	460c      	mov	r4, r1
 800f3b8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	921a      	str	r2, [sp, #104]	@ 0x68
 800f3be:	9005      	str	r0, [sp, #20]
 800f3c0:	f04f 0a00 	mov.w	sl, #0
 800f3c4:	f04f 0b00 	mov.w	fp, #0
 800f3c8:	460a      	mov	r2, r1
 800f3ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800f3cc:	7811      	ldrb	r1, [r2, #0]
 800f3ce:	292b      	cmp	r1, #43	@ 0x2b
 800f3d0:	d04a      	beq.n	800f468 <_strtod_l+0xb8>
 800f3d2:	d838      	bhi.n	800f446 <_strtod_l+0x96>
 800f3d4:	290d      	cmp	r1, #13
 800f3d6:	d832      	bhi.n	800f43e <_strtod_l+0x8e>
 800f3d8:	2908      	cmp	r1, #8
 800f3da:	d832      	bhi.n	800f442 <_strtod_l+0x92>
 800f3dc:	2900      	cmp	r1, #0
 800f3de:	d03b      	beq.n	800f458 <_strtod_l+0xa8>
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	920e      	str	r2, [sp, #56]	@ 0x38
 800f3e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f3e6:	782a      	ldrb	r2, [r5, #0]
 800f3e8:	2a30      	cmp	r2, #48	@ 0x30
 800f3ea:	f040 80b2 	bne.w	800f552 <_strtod_l+0x1a2>
 800f3ee:	786a      	ldrb	r2, [r5, #1]
 800f3f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f3f4:	2a58      	cmp	r2, #88	@ 0x58
 800f3f6:	d16e      	bne.n	800f4d6 <_strtod_l+0x126>
 800f3f8:	9302      	str	r3, [sp, #8]
 800f3fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f3fc:	9301      	str	r3, [sp, #4]
 800f3fe:	ab1a      	add	r3, sp, #104	@ 0x68
 800f400:	9300      	str	r3, [sp, #0]
 800f402:	4a8f      	ldr	r2, [pc, #572]	@ (800f640 <_strtod_l+0x290>)
 800f404:	9805      	ldr	r0, [sp, #20]
 800f406:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f408:	a919      	add	r1, sp, #100	@ 0x64
 800f40a:	f001 faef 	bl	80109ec <__gethex>
 800f40e:	f010 060f 	ands.w	r6, r0, #15
 800f412:	4604      	mov	r4, r0
 800f414:	d005      	beq.n	800f422 <_strtod_l+0x72>
 800f416:	2e06      	cmp	r6, #6
 800f418:	d128      	bne.n	800f46c <_strtod_l+0xbc>
 800f41a:	3501      	adds	r5, #1
 800f41c:	2300      	movs	r3, #0
 800f41e:	9519      	str	r5, [sp, #100]	@ 0x64
 800f420:	930e      	str	r3, [sp, #56]	@ 0x38
 800f422:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f424:	2b00      	cmp	r3, #0
 800f426:	f040 858e 	bne.w	800ff46 <_strtod_l+0xb96>
 800f42a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f42c:	b1cb      	cbz	r3, 800f462 <_strtod_l+0xb2>
 800f42e:	4652      	mov	r2, sl
 800f430:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f434:	ec43 2b10 	vmov	d0, r2, r3
 800f438:	b01f      	add	sp, #124	@ 0x7c
 800f43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f43e:	2920      	cmp	r1, #32
 800f440:	d1ce      	bne.n	800f3e0 <_strtod_l+0x30>
 800f442:	3201      	adds	r2, #1
 800f444:	e7c1      	b.n	800f3ca <_strtod_l+0x1a>
 800f446:	292d      	cmp	r1, #45	@ 0x2d
 800f448:	d1ca      	bne.n	800f3e0 <_strtod_l+0x30>
 800f44a:	2101      	movs	r1, #1
 800f44c:	910e      	str	r1, [sp, #56]	@ 0x38
 800f44e:	1c51      	adds	r1, r2, #1
 800f450:	9119      	str	r1, [sp, #100]	@ 0x64
 800f452:	7852      	ldrb	r2, [r2, #1]
 800f454:	2a00      	cmp	r2, #0
 800f456:	d1c5      	bne.n	800f3e4 <_strtod_l+0x34>
 800f458:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f45a:	9419      	str	r4, [sp, #100]	@ 0x64
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	f040 8570 	bne.w	800ff42 <_strtod_l+0xb92>
 800f462:	4652      	mov	r2, sl
 800f464:	465b      	mov	r3, fp
 800f466:	e7e5      	b.n	800f434 <_strtod_l+0x84>
 800f468:	2100      	movs	r1, #0
 800f46a:	e7ef      	b.n	800f44c <_strtod_l+0x9c>
 800f46c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f46e:	b13a      	cbz	r2, 800f480 <_strtod_l+0xd0>
 800f470:	2135      	movs	r1, #53	@ 0x35
 800f472:	a81c      	add	r0, sp, #112	@ 0x70
 800f474:	f7ff ff3a 	bl	800f2ec <__copybits>
 800f478:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f47a:	9805      	ldr	r0, [sp, #20]
 800f47c:	f7ff fb10 	bl	800eaa0 <_Bfree>
 800f480:	3e01      	subs	r6, #1
 800f482:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f484:	2e04      	cmp	r6, #4
 800f486:	d806      	bhi.n	800f496 <_strtod_l+0xe6>
 800f488:	e8df f006 	tbb	[pc, r6]
 800f48c:	201d0314 	.word	0x201d0314
 800f490:	14          	.byte	0x14
 800f491:	00          	.byte	0x00
 800f492:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f496:	05e1      	lsls	r1, r4, #23
 800f498:	bf48      	it	mi
 800f49a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f49e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f4a2:	0d1b      	lsrs	r3, r3, #20
 800f4a4:	051b      	lsls	r3, r3, #20
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d1bb      	bne.n	800f422 <_strtod_l+0x72>
 800f4aa:	f7fe fb1d 	bl	800dae8 <__errno>
 800f4ae:	2322      	movs	r3, #34	@ 0x22
 800f4b0:	6003      	str	r3, [r0, #0]
 800f4b2:	e7b6      	b.n	800f422 <_strtod_l+0x72>
 800f4b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f4b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f4bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f4c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f4c4:	e7e7      	b.n	800f496 <_strtod_l+0xe6>
 800f4c6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800f648 <_strtod_l+0x298>
 800f4ca:	e7e4      	b.n	800f496 <_strtod_l+0xe6>
 800f4cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f4d0:	f04f 3aff 	mov.w	sl, #4294967295
 800f4d4:	e7df      	b.n	800f496 <_strtod_l+0xe6>
 800f4d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f4d8:	1c5a      	adds	r2, r3, #1
 800f4da:	9219      	str	r2, [sp, #100]	@ 0x64
 800f4dc:	785b      	ldrb	r3, [r3, #1]
 800f4de:	2b30      	cmp	r3, #48	@ 0x30
 800f4e0:	d0f9      	beq.n	800f4d6 <_strtod_l+0x126>
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d09d      	beq.n	800f422 <_strtod_l+0x72>
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	2700      	movs	r7, #0
 800f4ea:	9308      	str	r3, [sp, #32]
 800f4ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f4ee:	930c      	str	r3, [sp, #48]	@ 0x30
 800f4f0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800f4f2:	46b9      	mov	r9, r7
 800f4f4:	220a      	movs	r2, #10
 800f4f6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f4f8:	7805      	ldrb	r5, [r0, #0]
 800f4fa:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f4fe:	b2d9      	uxtb	r1, r3
 800f500:	2909      	cmp	r1, #9
 800f502:	d928      	bls.n	800f556 <_strtod_l+0x1a6>
 800f504:	494f      	ldr	r1, [pc, #316]	@ (800f644 <_strtod_l+0x294>)
 800f506:	2201      	movs	r2, #1
 800f508:	f001 f9ac 	bl	8010864 <strncmp>
 800f50c:	2800      	cmp	r0, #0
 800f50e:	d032      	beq.n	800f576 <_strtod_l+0x1c6>
 800f510:	2000      	movs	r0, #0
 800f512:	462a      	mov	r2, r5
 800f514:	900a      	str	r0, [sp, #40]	@ 0x28
 800f516:	464d      	mov	r5, r9
 800f518:	4603      	mov	r3, r0
 800f51a:	2a65      	cmp	r2, #101	@ 0x65
 800f51c:	d001      	beq.n	800f522 <_strtod_l+0x172>
 800f51e:	2a45      	cmp	r2, #69	@ 0x45
 800f520:	d114      	bne.n	800f54c <_strtod_l+0x19c>
 800f522:	b91d      	cbnz	r5, 800f52c <_strtod_l+0x17c>
 800f524:	9a08      	ldr	r2, [sp, #32]
 800f526:	4302      	orrs	r2, r0
 800f528:	d096      	beq.n	800f458 <_strtod_l+0xa8>
 800f52a:	2500      	movs	r5, #0
 800f52c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f52e:	1c62      	adds	r2, r4, #1
 800f530:	9219      	str	r2, [sp, #100]	@ 0x64
 800f532:	7862      	ldrb	r2, [r4, #1]
 800f534:	2a2b      	cmp	r2, #43	@ 0x2b
 800f536:	d07a      	beq.n	800f62e <_strtod_l+0x27e>
 800f538:	2a2d      	cmp	r2, #45	@ 0x2d
 800f53a:	d07e      	beq.n	800f63a <_strtod_l+0x28a>
 800f53c:	f04f 0c00 	mov.w	ip, #0
 800f540:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f544:	2909      	cmp	r1, #9
 800f546:	f240 8085 	bls.w	800f654 <_strtod_l+0x2a4>
 800f54a:	9419      	str	r4, [sp, #100]	@ 0x64
 800f54c:	f04f 0800 	mov.w	r8, #0
 800f550:	e0a5      	b.n	800f69e <_strtod_l+0x2ee>
 800f552:	2300      	movs	r3, #0
 800f554:	e7c8      	b.n	800f4e8 <_strtod_l+0x138>
 800f556:	f1b9 0f08 	cmp.w	r9, #8
 800f55a:	bfd8      	it	le
 800f55c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800f55e:	f100 0001 	add.w	r0, r0, #1
 800f562:	bfda      	itte	le
 800f564:	fb02 3301 	mlale	r3, r2, r1, r3
 800f568:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800f56a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800f56e:	f109 0901 	add.w	r9, r9, #1
 800f572:	9019      	str	r0, [sp, #100]	@ 0x64
 800f574:	e7bf      	b.n	800f4f6 <_strtod_l+0x146>
 800f576:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f578:	1c5a      	adds	r2, r3, #1
 800f57a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f57c:	785a      	ldrb	r2, [r3, #1]
 800f57e:	f1b9 0f00 	cmp.w	r9, #0
 800f582:	d03b      	beq.n	800f5fc <_strtod_l+0x24c>
 800f584:	900a      	str	r0, [sp, #40]	@ 0x28
 800f586:	464d      	mov	r5, r9
 800f588:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f58c:	2b09      	cmp	r3, #9
 800f58e:	d912      	bls.n	800f5b6 <_strtod_l+0x206>
 800f590:	2301      	movs	r3, #1
 800f592:	e7c2      	b.n	800f51a <_strtod_l+0x16a>
 800f594:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f596:	1c5a      	adds	r2, r3, #1
 800f598:	9219      	str	r2, [sp, #100]	@ 0x64
 800f59a:	785a      	ldrb	r2, [r3, #1]
 800f59c:	3001      	adds	r0, #1
 800f59e:	2a30      	cmp	r2, #48	@ 0x30
 800f5a0:	d0f8      	beq.n	800f594 <_strtod_l+0x1e4>
 800f5a2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f5a6:	2b08      	cmp	r3, #8
 800f5a8:	f200 84d2 	bhi.w	800ff50 <_strtod_l+0xba0>
 800f5ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f5ae:	900a      	str	r0, [sp, #40]	@ 0x28
 800f5b0:	2000      	movs	r0, #0
 800f5b2:	930c      	str	r3, [sp, #48]	@ 0x30
 800f5b4:	4605      	mov	r5, r0
 800f5b6:	3a30      	subs	r2, #48	@ 0x30
 800f5b8:	f100 0301 	add.w	r3, r0, #1
 800f5bc:	d018      	beq.n	800f5f0 <_strtod_l+0x240>
 800f5be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f5c0:	4419      	add	r1, r3
 800f5c2:	910a      	str	r1, [sp, #40]	@ 0x28
 800f5c4:	462e      	mov	r6, r5
 800f5c6:	f04f 0e0a 	mov.w	lr, #10
 800f5ca:	1c71      	adds	r1, r6, #1
 800f5cc:	eba1 0c05 	sub.w	ip, r1, r5
 800f5d0:	4563      	cmp	r3, ip
 800f5d2:	dc15      	bgt.n	800f600 <_strtod_l+0x250>
 800f5d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800f5d8:	182b      	adds	r3, r5, r0
 800f5da:	2b08      	cmp	r3, #8
 800f5dc:	f105 0501 	add.w	r5, r5, #1
 800f5e0:	4405      	add	r5, r0
 800f5e2:	dc1a      	bgt.n	800f61a <_strtod_l+0x26a>
 800f5e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f5e6:	230a      	movs	r3, #10
 800f5e8:	fb03 2301 	mla	r3, r3, r1, r2
 800f5ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f5f2:	1c51      	adds	r1, r2, #1
 800f5f4:	9119      	str	r1, [sp, #100]	@ 0x64
 800f5f6:	7852      	ldrb	r2, [r2, #1]
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	e7c5      	b.n	800f588 <_strtod_l+0x1d8>
 800f5fc:	4648      	mov	r0, r9
 800f5fe:	e7ce      	b.n	800f59e <_strtod_l+0x1ee>
 800f600:	2e08      	cmp	r6, #8
 800f602:	dc05      	bgt.n	800f610 <_strtod_l+0x260>
 800f604:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f606:	fb0e f606 	mul.w	r6, lr, r6
 800f60a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800f60c:	460e      	mov	r6, r1
 800f60e:	e7dc      	b.n	800f5ca <_strtod_l+0x21a>
 800f610:	2910      	cmp	r1, #16
 800f612:	bfd8      	it	le
 800f614:	fb0e f707 	mulle.w	r7, lr, r7
 800f618:	e7f8      	b.n	800f60c <_strtod_l+0x25c>
 800f61a:	2b0f      	cmp	r3, #15
 800f61c:	bfdc      	itt	le
 800f61e:	230a      	movle	r3, #10
 800f620:	fb03 2707 	mlale	r7, r3, r7, r2
 800f624:	e7e3      	b.n	800f5ee <_strtod_l+0x23e>
 800f626:	2300      	movs	r3, #0
 800f628:	930a      	str	r3, [sp, #40]	@ 0x28
 800f62a:	2301      	movs	r3, #1
 800f62c:	e77a      	b.n	800f524 <_strtod_l+0x174>
 800f62e:	f04f 0c00 	mov.w	ip, #0
 800f632:	1ca2      	adds	r2, r4, #2
 800f634:	9219      	str	r2, [sp, #100]	@ 0x64
 800f636:	78a2      	ldrb	r2, [r4, #2]
 800f638:	e782      	b.n	800f540 <_strtod_l+0x190>
 800f63a:	f04f 0c01 	mov.w	ip, #1
 800f63e:	e7f8      	b.n	800f632 <_strtod_l+0x282>
 800f640:	0801168c 	.word	0x0801168c
 800f644:	080114c4 	.word	0x080114c4
 800f648:	7ff00000 	.word	0x7ff00000
 800f64c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f64e:	1c51      	adds	r1, r2, #1
 800f650:	9119      	str	r1, [sp, #100]	@ 0x64
 800f652:	7852      	ldrb	r2, [r2, #1]
 800f654:	2a30      	cmp	r2, #48	@ 0x30
 800f656:	d0f9      	beq.n	800f64c <_strtod_l+0x29c>
 800f658:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f65c:	2908      	cmp	r1, #8
 800f65e:	f63f af75 	bhi.w	800f54c <_strtod_l+0x19c>
 800f662:	3a30      	subs	r2, #48	@ 0x30
 800f664:	9209      	str	r2, [sp, #36]	@ 0x24
 800f666:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f668:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f66a:	f04f 080a 	mov.w	r8, #10
 800f66e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f670:	1c56      	adds	r6, r2, #1
 800f672:	9619      	str	r6, [sp, #100]	@ 0x64
 800f674:	7852      	ldrb	r2, [r2, #1]
 800f676:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f67a:	f1be 0f09 	cmp.w	lr, #9
 800f67e:	d939      	bls.n	800f6f4 <_strtod_l+0x344>
 800f680:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f682:	1a76      	subs	r6, r6, r1
 800f684:	2e08      	cmp	r6, #8
 800f686:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f68a:	dc03      	bgt.n	800f694 <_strtod_l+0x2e4>
 800f68c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f68e:	4588      	cmp	r8, r1
 800f690:	bfa8      	it	ge
 800f692:	4688      	movge	r8, r1
 800f694:	f1bc 0f00 	cmp.w	ip, #0
 800f698:	d001      	beq.n	800f69e <_strtod_l+0x2ee>
 800f69a:	f1c8 0800 	rsb	r8, r8, #0
 800f69e:	2d00      	cmp	r5, #0
 800f6a0:	d14e      	bne.n	800f740 <_strtod_l+0x390>
 800f6a2:	9908      	ldr	r1, [sp, #32]
 800f6a4:	4308      	orrs	r0, r1
 800f6a6:	f47f aebc 	bne.w	800f422 <_strtod_l+0x72>
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	f47f aed4 	bne.w	800f458 <_strtod_l+0xa8>
 800f6b0:	2a69      	cmp	r2, #105	@ 0x69
 800f6b2:	d028      	beq.n	800f706 <_strtod_l+0x356>
 800f6b4:	dc25      	bgt.n	800f702 <_strtod_l+0x352>
 800f6b6:	2a49      	cmp	r2, #73	@ 0x49
 800f6b8:	d025      	beq.n	800f706 <_strtod_l+0x356>
 800f6ba:	2a4e      	cmp	r2, #78	@ 0x4e
 800f6bc:	f47f aecc 	bne.w	800f458 <_strtod_l+0xa8>
 800f6c0:	499a      	ldr	r1, [pc, #616]	@ (800f92c <_strtod_l+0x57c>)
 800f6c2:	a819      	add	r0, sp, #100	@ 0x64
 800f6c4:	f001 fbb4 	bl	8010e30 <__match>
 800f6c8:	2800      	cmp	r0, #0
 800f6ca:	f43f aec5 	beq.w	800f458 <_strtod_l+0xa8>
 800f6ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f6d0:	781b      	ldrb	r3, [r3, #0]
 800f6d2:	2b28      	cmp	r3, #40	@ 0x28
 800f6d4:	d12e      	bne.n	800f734 <_strtod_l+0x384>
 800f6d6:	4996      	ldr	r1, [pc, #600]	@ (800f930 <_strtod_l+0x580>)
 800f6d8:	aa1c      	add	r2, sp, #112	@ 0x70
 800f6da:	a819      	add	r0, sp, #100	@ 0x64
 800f6dc:	f001 fbbc 	bl	8010e58 <__hexnan>
 800f6e0:	2805      	cmp	r0, #5
 800f6e2:	d127      	bne.n	800f734 <_strtod_l+0x384>
 800f6e4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f6e6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f6ea:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f6ee:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f6f2:	e696      	b.n	800f422 <_strtod_l+0x72>
 800f6f4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f6f6:	fb08 2101 	mla	r1, r8, r1, r2
 800f6fa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f6fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800f700:	e7b5      	b.n	800f66e <_strtod_l+0x2be>
 800f702:	2a6e      	cmp	r2, #110	@ 0x6e
 800f704:	e7da      	b.n	800f6bc <_strtod_l+0x30c>
 800f706:	498b      	ldr	r1, [pc, #556]	@ (800f934 <_strtod_l+0x584>)
 800f708:	a819      	add	r0, sp, #100	@ 0x64
 800f70a:	f001 fb91 	bl	8010e30 <__match>
 800f70e:	2800      	cmp	r0, #0
 800f710:	f43f aea2 	beq.w	800f458 <_strtod_l+0xa8>
 800f714:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f716:	4988      	ldr	r1, [pc, #544]	@ (800f938 <_strtod_l+0x588>)
 800f718:	3b01      	subs	r3, #1
 800f71a:	a819      	add	r0, sp, #100	@ 0x64
 800f71c:	9319      	str	r3, [sp, #100]	@ 0x64
 800f71e:	f001 fb87 	bl	8010e30 <__match>
 800f722:	b910      	cbnz	r0, 800f72a <_strtod_l+0x37a>
 800f724:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f726:	3301      	adds	r3, #1
 800f728:	9319      	str	r3, [sp, #100]	@ 0x64
 800f72a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800f948 <_strtod_l+0x598>
 800f72e:	f04f 0a00 	mov.w	sl, #0
 800f732:	e676      	b.n	800f422 <_strtod_l+0x72>
 800f734:	4881      	ldr	r0, [pc, #516]	@ (800f93c <_strtod_l+0x58c>)
 800f736:	f001 f8b7 	bl	80108a8 <nan>
 800f73a:	ec5b ab10 	vmov	sl, fp, d0
 800f73e:	e670      	b.n	800f422 <_strtod_l+0x72>
 800f740:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f742:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800f744:	eba8 0303 	sub.w	r3, r8, r3
 800f748:	f1b9 0f00 	cmp.w	r9, #0
 800f74c:	bf08      	it	eq
 800f74e:	46a9      	moveq	r9, r5
 800f750:	2d10      	cmp	r5, #16
 800f752:	9309      	str	r3, [sp, #36]	@ 0x24
 800f754:	462c      	mov	r4, r5
 800f756:	bfa8      	it	ge
 800f758:	2410      	movge	r4, #16
 800f75a:	f7f0 fefb 	bl	8000554 <__aeabi_ui2d>
 800f75e:	2d09      	cmp	r5, #9
 800f760:	4682      	mov	sl, r0
 800f762:	468b      	mov	fp, r1
 800f764:	dc13      	bgt.n	800f78e <_strtod_l+0x3de>
 800f766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f768:	2b00      	cmp	r3, #0
 800f76a:	f43f ae5a 	beq.w	800f422 <_strtod_l+0x72>
 800f76e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f770:	dd78      	ble.n	800f864 <_strtod_l+0x4b4>
 800f772:	2b16      	cmp	r3, #22
 800f774:	dc5f      	bgt.n	800f836 <_strtod_l+0x486>
 800f776:	4972      	ldr	r1, [pc, #456]	@ (800f940 <_strtod_l+0x590>)
 800f778:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f77c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f780:	4652      	mov	r2, sl
 800f782:	465b      	mov	r3, fp
 800f784:	f7f0 ff60 	bl	8000648 <__aeabi_dmul>
 800f788:	4682      	mov	sl, r0
 800f78a:	468b      	mov	fp, r1
 800f78c:	e649      	b.n	800f422 <_strtod_l+0x72>
 800f78e:	4b6c      	ldr	r3, [pc, #432]	@ (800f940 <_strtod_l+0x590>)
 800f790:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f794:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f798:	f7f0 ff56 	bl	8000648 <__aeabi_dmul>
 800f79c:	4682      	mov	sl, r0
 800f79e:	4638      	mov	r0, r7
 800f7a0:	468b      	mov	fp, r1
 800f7a2:	f7f0 fed7 	bl	8000554 <__aeabi_ui2d>
 800f7a6:	4602      	mov	r2, r0
 800f7a8:	460b      	mov	r3, r1
 800f7aa:	4650      	mov	r0, sl
 800f7ac:	4659      	mov	r1, fp
 800f7ae:	f7f0 fd95 	bl	80002dc <__adddf3>
 800f7b2:	2d0f      	cmp	r5, #15
 800f7b4:	4682      	mov	sl, r0
 800f7b6:	468b      	mov	fp, r1
 800f7b8:	ddd5      	ble.n	800f766 <_strtod_l+0x3b6>
 800f7ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7bc:	1b2c      	subs	r4, r5, r4
 800f7be:	441c      	add	r4, r3
 800f7c0:	2c00      	cmp	r4, #0
 800f7c2:	f340 8093 	ble.w	800f8ec <_strtod_l+0x53c>
 800f7c6:	f014 030f 	ands.w	r3, r4, #15
 800f7ca:	d00a      	beq.n	800f7e2 <_strtod_l+0x432>
 800f7cc:	495c      	ldr	r1, [pc, #368]	@ (800f940 <_strtod_l+0x590>)
 800f7ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f7d2:	4652      	mov	r2, sl
 800f7d4:	465b      	mov	r3, fp
 800f7d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f7da:	f7f0 ff35 	bl	8000648 <__aeabi_dmul>
 800f7de:	4682      	mov	sl, r0
 800f7e0:	468b      	mov	fp, r1
 800f7e2:	f034 040f 	bics.w	r4, r4, #15
 800f7e6:	d073      	beq.n	800f8d0 <_strtod_l+0x520>
 800f7e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f7ec:	dd49      	ble.n	800f882 <_strtod_l+0x4d2>
 800f7ee:	2400      	movs	r4, #0
 800f7f0:	46a0      	mov	r8, r4
 800f7f2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f7f4:	46a1      	mov	r9, r4
 800f7f6:	9a05      	ldr	r2, [sp, #20]
 800f7f8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800f948 <_strtod_l+0x598>
 800f7fc:	2322      	movs	r3, #34	@ 0x22
 800f7fe:	6013      	str	r3, [r2, #0]
 800f800:	f04f 0a00 	mov.w	sl, #0
 800f804:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f806:	2b00      	cmp	r3, #0
 800f808:	f43f ae0b 	beq.w	800f422 <_strtod_l+0x72>
 800f80c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f80e:	9805      	ldr	r0, [sp, #20]
 800f810:	f7ff f946 	bl	800eaa0 <_Bfree>
 800f814:	9805      	ldr	r0, [sp, #20]
 800f816:	4649      	mov	r1, r9
 800f818:	f7ff f942 	bl	800eaa0 <_Bfree>
 800f81c:	9805      	ldr	r0, [sp, #20]
 800f81e:	4641      	mov	r1, r8
 800f820:	f7ff f93e 	bl	800eaa0 <_Bfree>
 800f824:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f826:	9805      	ldr	r0, [sp, #20]
 800f828:	f7ff f93a 	bl	800eaa0 <_Bfree>
 800f82c:	9805      	ldr	r0, [sp, #20]
 800f82e:	4621      	mov	r1, r4
 800f830:	f7ff f936 	bl	800eaa0 <_Bfree>
 800f834:	e5f5      	b.n	800f422 <_strtod_l+0x72>
 800f836:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f838:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f83c:	4293      	cmp	r3, r2
 800f83e:	dbbc      	blt.n	800f7ba <_strtod_l+0x40a>
 800f840:	4c3f      	ldr	r4, [pc, #252]	@ (800f940 <_strtod_l+0x590>)
 800f842:	f1c5 050f 	rsb	r5, r5, #15
 800f846:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f84a:	4652      	mov	r2, sl
 800f84c:	465b      	mov	r3, fp
 800f84e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f852:	f7f0 fef9 	bl	8000648 <__aeabi_dmul>
 800f856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f858:	1b5d      	subs	r5, r3, r5
 800f85a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f85e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f862:	e78f      	b.n	800f784 <_strtod_l+0x3d4>
 800f864:	3316      	adds	r3, #22
 800f866:	dba8      	blt.n	800f7ba <_strtod_l+0x40a>
 800f868:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f86a:	eba3 0808 	sub.w	r8, r3, r8
 800f86e:	4b34      	ldr	r3, [pc, #208]	@ (800f940 <_strtod_l+0x590>)
 800f870:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f874:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f878:	4650      	mov	r0, sl
 800f87a:	4659      	mov	r1, fp
 800f87c:	f7f1 f80e 	bl	800089c <__aeabi_ddiv>
 800f880:	e782      	b.n	800f788 <_strtod_l+0x3d8>
 800f882:	2300      	movs	r3, #0
 800f884:	4f2f      	ldr	r7, [pc, #188]	@ (800f944 <_strtod_l+0x594>)
 800f886:	1124      	asrs	r4, r4, #4
 800f888:	4650      	mov	r0, sl
 800f88a:	4659      	mov	r1, fp
 800f88c:	461e      	mov	r6, r3
 800f88e:	2c01      	cmp	r4, #1
 800f890:	dc21      	bgt.n	800f8d6 <_strtod_l+0x526>
 800f892:	b10b      	cbz	r3, 800f898 <_strtod_l+0x4e8>
 800f894:	4682      	mov	sl, r0
 800f896:	468b      	mov	fp, r1
 800f898:	492a      	ldr	r1, [pc, #168]	@ (800f944 <_strtod_l+0x594>)
 800f89a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f89e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f8a2:	4652      	mov	r2, sl
 800f8a4:	465b      	mov	r3, fp
 800f8a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8aa:	f7f0 fecd 	bl	8000648 <__aeabi_dmul>
 800f8ae:	4b26      	ldr	r3, [pc, #152]	@ (800f948 <_strtod_l+0x598>)
 800f8b0:	460a      	mov	r2, r1
 800f8b2:	400b      	ands	r3, r1
 800f8b4:	4925      	ldr	r1, [pc, #148]	@ (800f94c <_strtod_l+0x59c>)
 800f8b6:	428b      	cmp	r3, r1
 800f8b8:	4682      	mov	sl, r0
 800f8ba:	d898      	bhi.n	800f7ee <_strtod_l+0x43e>
 800f8bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f8c0:	428b      	cmp	r3, r1
 800f8c2:	bf86      	itte	hi
 800f8c4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800f950 <_strtod_l+0x5a0>
 800f8c8:	f04f 3aff 	movhi.w	sl, #4294967295
 800f8cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	9308      	str	r3, [sp, #32]
 800f8d4:	e076      	b.n	800f9c4 <_strtod_l+0x614>
 800f8d6:	07e2      	lsls	r2, r4, #31
 800f8d8:	d504      	bpl.n	800f8e4 <_strtod_l+0x534>
 800f8da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8de:	f7f0 feb3 	bl	8000648 <__aeabi_dmul>
 800f8e2:	2301      	movs	r3, #1
 800f8e4:	3601      	adds	r6, #1
 800f8e6:	1064      	asrs	r4, r4, #1
 800f8e8:	3708      	adds	r7, #8
 800f8ea:	e7d0      	b.n	800f88e <_strtod_l+0x4de>
 800f8ec:	d0f0      	beq.n	800f8d0 <_strtod_l+0x520>
 800f8ee:	4264      	negs	r4, r4
 800f8f0:	f014 020f 	ands.w	r2, r4, #15
 800f8f4:	d00a      	beq.n	800f90c <_strtod_l+0x55c>
 800f8f6:	4b12      	ldr	r3, [pc, #72]	@ (800f940 <_strtod_l+0x590>)
 800f8f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f8fc:	4650      	mov	r0, sl
 800f8fe:	4659      	mov	r1, fp
 800f900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f904:	f7f0 ffca 	bl	800089c <__aeabi_ddiv>
 800f908:	4682      	mov	sl, r0
 800f90a:	468b      	mov	fp, r1
 800f90c:	1124      	asrs	r4, r4, #4
 800f90e:	d0df      	beq.n	800f8d0 <_strtod_l+0x520>
 800f910:	2c1f      	cmp	r4, #31
 800f912:	dd1f      	ble.n	800f954 <_strtod_l+0x5a4>
 800f914:	2400      	movs	r4, #0
 800f916:	46a0      	mov	r8, r4
 800f918:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f91a:	46a1      	mov	r9, r4
 800f91c:	9a05      	ldr	r2, [sp, #20]
 800f91e:	2322      	movs	r3, #34	@ 0x22
 800f920:	f04f 0a00 	mov.w	sl, #0
 800f924:	f04f 0b00 	mov.w	fp, #0
 800f928:	6013      	str	r3, [r2, #0]
 800f92a:	e76b      	b.n	800f804 <_strtod_l+0x454>
 800f92c:	080113b2 	.word	0x080113b2
 800f930:	08011678 	.word	0x08011678
 800f934:	080113aa 	.word	0x080113aa
 800f938:	080113e1 	.word	0x080113e1
 800f93c:	0801151a 	.word	0x0801151a
 800f940:	080115b0 	.word	0x080115b0
 800f944:	08011588 	.word	0x08011588
 800f948:	7ff00000 	.word	0x7ff00000
 800f94c:	7ca00000 	.word	0x7ca00000
 800f950:	7fefffff 	.word	0x7fefffff
 800f954:	f014 0310 	ands.w	r3, r4, #16
 800f958:	bf18      	it	ne
 800f95a:	236a      	movne	r3, #106	@ 0x6a
 800f95c:	4ea9      	ldr	r6, [pc, #676]	@ (800fc04 <_strtod_l+0x854>)
 800f95e:	9308      	str	r3, [sp, #32]
 800f960:	4650      	mov	r0, sl
 800f962:	4659      	mov	r1, fp
 800f964:	2300      	movs	r3, #0
 800f966:	07e7      	lsls	r7, r4, #31
 800f968:	d504      	bpl.n	800f974 <_strtod_l+0x5c4>
 800f96a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f96e:	f7f0 fe6b 	bl	8000648 <__aeabi_dmul>
 800f972:	2301      	movs	r3, #1
 800f974:	1064      	asrs	r4, r4, #1
 800f976:	f106 0608 	add.w	r6, r6, #8
 800f97a:	d1f4      	bne.n	800f966 <_strtod_l+0x5b6>
 800f97c:	b10b      	cbz	r3, 800f982 <_strtod_l+0x5d2>
 800f97e:	4682      	mov	sl, r0
 800f980:	468b      	mov	fp, r1
 800f982:	9b08      	ldr	r3, [sp, #32]
 800f984:	b1b3      	cbz	r3, 800f9b4 <_strtod_l+0x604>
 800f986:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f98a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f98e:	2b00      	cmp	r3, #0
 800f990:	4659      	mov	r1, fp
 800f992:	dd0f      	ble.n	800f9b4 <_strtod_l+0x604>
 800f994:	2b1f      	cmp	r3, #31
 800f996:	dd56      	ble.n	800fa46 <_strtod_l+0x696>
 800f998:	2b34      	cmp	r3, #52	@ 0x34
 800f99a:	bfde      	ittt	le
 800f99c:	f04f 33ff 	movle.w	r3, #4294967295
 800f9a0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f9a4:	4093      	lslle	r3, r2
 800f9a6:	f04f 0a00 	mov.w	sl, #0
 800f9aa:	bfcc      	ite	gt
 800f9ac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f9b0:	ea03 0b01 	andle.w	fp, r3, r1
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	4650      	mov	r0, sl
 800f9ba:	4659      	mov	r1, fp
 800f9bc:	f7f1 f8ac 	bl	8000b18 <__aeabi_dcmpeq>
 800f9c0:	2800      	cmp	r0, #0
 800f9c2:	d1a7      	bne.n	800f914 <_strtod_l+0x564>
 800f9c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f9c6:	9300      	str	r3, [sp, #0]
 800f9c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f9ca:	9805      	ldr	r0, [sp, #20]
 800f9cc:	462b      	mov	r3, r5
 800f9ce:	464a      	mov	r2, r9
 800f9d0:	f7ff f8ce 	bl	800eb70 <__s2b>
 800f9d4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f9d6:	2800      	cmp	r0, #0
 800f9d8:	f43f af09 	beq.w	800f7ee <_strtod_l+0x43e>
 800f9dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f9de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9e0:	2a00      	cmp	r2, #0
 800f9e2:	eba3 0308 	sub.w	r3, r3, r8
 800f9e6:	bfa8      	it	ge
 800f9e8:	2300      	movge	r3, #0
 800f9ea:	9312      	str	r3, [sp, #72]	@ 0x48
 800f9ec:	2400      	movs	r4, #0
 800f9ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f9f2:	9316      	str	r3, [sp, #88]	@ 0x58
 800f9f4:	46a0      	mov	r8, r4
 800f9f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f9f8:	9805      	ldr	r0, [sp, #20]
 800f9fa:	6859      	ldr	r1, [r3, #4]
 800f9fc:	f7ff f810 	bl	800ea20 <_Balloc>
 800fa00:	4681      	mov	r9, r0
 800fa02:	2800      	cmp	r0, #0
 800fa04:	f43f aef7 	beq.w	800f7f6 <_strtod_l+0x446>
 800fa08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa0a:	691a      	ldr	r2, [r3, #16]
 800fa0c:	3202      	adds	r2, #2
 800fa0e:	f103 010c 	add.w	r1, r3, #12
 800fa12:	0092      	lsls	r2, r2, #2
 800fa14:	300c      	adds	r0, #12
 800fa16:	f7fe f894 	bl	800db42 <memcpy>
 800fa1a:	ec4b ab10 	vmov	d0, sl, fp
 800fa1e:	9805      	ldr	r0, [sp, #20]
 800fa20:	aa1c      	add	r2, sp, #112	@ 0x70
 800fa22:	a91b      	add	r1, sp, #108	@ 0x6c
 800fa24:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800fa28:	f7ff fbd6 	bl	800f1d8 <__d2b>
 800fa2c:	901a      	str	r0, [sp, #104]	@ 0x68
 800fa2e:	2800      	cmp	r0, #0
 800fa30:	f43f aee1 	beq.w	800f7f6 <_strtod_l+0x446>
 800fa34:	9805      	ldr	r0, [sp, #20]
 800fa36:	2101      	movs	r1, #1
 800fa38:	f7ff f930 	bl	800ec9c <__i2b>
 800fa3c:	4680      	mov	r8, r0
 800fa3e:	b948      	cbnz	r0, 800fa54 <_strtod_l+0x6a4>
 800fa40:	f04f 0800 	mov.w	r8, #0
 800fa44:	e6d7      	b.n	800f7f6 <_strtod_l+0x446>
 800fa46:	f04f 32ff 	mov.w	r2, #4294967295
 800fa4a:	fa02 f303 	lsl.w	r3, r2, r3
 800fa4e:	ea03 0a0a 	and.w	sl, r3, sl
 800fa52:	e7af      	b.n	800f9b4 <_strtod_l+0x604>
 800fa54:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800fa56:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800fa58:	2d00      	cmp	r5, #0
 800fa5a:	bfab      	itete	ge
 800fa5c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800fa5e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800fa60:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800fa62:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800fa64:	bfac      	ite	ge
 800fa66:	18ef      	addge	r7, r5, r3
 800fa68:	1b5e      	sublt	r6, r3, r5
 800fa6a:	9b08      	ldr	r3, [sp, #32]
 800fa6c:	1aed      	subs	r5, r5, r3
 800fa6e:	4415      	add	r5, r2
 800fa70:	4b65      	ldr	r3, [pc, #404]	@ (800fc08 <_strtod_l+0x858>)
 800fa72:	3d01      	subs	r5, #1
 800fa74:	429d      	cmp	r5, r3
 800fa76:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800fa7a:	da50      	bge.n	800fb1e <_strtod_l+0x76e>
 800fa7c:	1b5b      	subs	r3, r3, r5
 800fa7e:	2b1f      	cmp	r3, #31
 800fa80:	eba2 0203 	sub.w	r2, r2, r3
 800fa84:	f04f 0101 	mov.w	r1, #1
 800fa88:	dc3d      	bgt.n	800fb06 <_strtod_l+0x756>
 800fa8a:	fa01 f303 	lsl.w	r3, r1, r3
 800fa8e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fa90:	2300      	movs	r3, #0
 800fa92:	9310      	str	r3, [sp, #64]	@ 0x40
 800fa94:	18bd      	adds	r5, r7, r2
 800fa96:	9b08      	ldr	r3, [sp, #32]
 800fa98:	42af      	cmp	r7, r5
 800fa9a:	4416      	add	r6, r2
 800fa9c:	441e      	add	r6, r3
 800fa9e:	463b      	mov	r3, r7
 800faa0:	bfa8      	it	ge
 800faa2:	462b      	movge	r3, r5
 800faa4:	42b3      	cmp	r3, r6
 800faa6:	bfa8      	it	ge
 800faa8:	4633      	movge	r3, r6
 800faaa:	2b00      	cmp	r3, #0
 800faac:	bfc2      	ittt	gt
 800faae:	1aed      	subgt	r5, r5, r3
 800fab0:	1af6      	subgt	r6, r6, r3
 800fab2:	1aff      	subgt	r7, r7, r3
 800fab4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	dd16      	ble.n	800fae8 <_strtod_l+0x738>
 800faba:	4641      	mov	r1, r8
 800fabc:	9805      	ldr	r0, [sp, #20]
 800fabe:	461a      	mov	r2, r3
 800fac0:	f7ff f9a4 	bl	800ee0c <__pow5mult>
 800fac4:	4680      	mov	r8, r0
 800fac6:	2800      	cmp	r0, #0
 800fac8:	d0ba      	beq.n	800fa40 <_strtod_l+0x690>
 800faca:	4601      	mov	r1, r0
 800facc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800face:	9805      	ldr	r0, [sp, #20]
 800fad0:	f7ff f8fa 	bl	800ecc8 <__multiply>
 800fad4:	900a      	str	r0, [sp, #40]	@ 0x28
 800fad6:	2800      	cmp	r0, #0
 800fad8:	f43f ae8d 	beq.w	800f7f6 <_strtod_l+0x446>
 800fadc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fade:	9805      	ldr	r0, [sp, #20]
 800fae0:	f7fe ffde 	bl	800eaa0 <_Bfree>
 800fae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fae6:	931a      	str	r3, [sp, #104]	@ 0x68
 800fae8:	2d00      	cmp	r5, #0
 800faea:	dc1d      	bgt.n	800fb28 <_strtod_l+0x778>
 800faec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800faee:	2b00      	cmp	r3, #0
 800faf0:	dd23      	ble.n	800fb3a <_strtod_l+0x78a>
 800faf2:	4649      	mov	r1, r9
 800faf4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800faf6:	9805      	ldr	r0, [sp, #20]
 800faf8:	f7ff f988 	bl	800ee0c <__pow5mult>
 800fafc:	4681      	mov	r9, r0
 800fafe:	b9e0      	cbnz	r0, 800fb3a <_strtod_l+0x78a>
 800fb00:	f04f 0900 	mov.w	r9, #0
 800fb04:	e677      	b.n	800f7f6 <_strtod_l+0x446>
 800fb06:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800fb0a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800fb0e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800fb12:	35e2      	adds	r5, #226	@ 0xe2
 800fb14:	fa01 f305 	lsl.w	r3, r1, r5
 800fb18:	9310      	str	r3, [sp, #64]	@ 0x40
 800fb1a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800fb1c:	e7ba      	b.n	800fa94 <_strtod_l+0x6e4>
 800fb1e:	2300      	movs	r3, #0
 800fb20:	9310      	str	r3, [sp, #64]	@ 0x40
 800fb22:	2301      	movs	r3, #1
 800fb24:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fb26:	e7b5      	b.n	800fa94 <_strtod_l+0x6e4>
 800fb28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fb2a:	9805      	ldr	r0, [sp, #20]
 800fb2c:	462a      	mov	r2, r5
 800fb2e:	f7ff f9c7 	bl	800eec0 <__lshift>
 800fb32:	901a      	str	r0, [sp, #104]	@ 0x68
 800fb34:	2800      	cmp	r0, #0
 800fb36:	d1d9      	bne.n	800faec <_strtod_l+0x73c>
 800fb38:	e65d      	b.n	800f7f6 <_strtod_l+0x446>
 800fb3a:	2e00      	cmp	r6, #0
 800fb3c:	dd07      	ble.n	800fb4e <_strtod_l+0x79e>
 800fb3e:	4649      	mov	r1, r9
 800fb40:	9805      	ldr	r0, [sp, #20]
 800fb42:	4632      	mov	r2, r6
 800fb44:	f7ff f9bc 	bl	800eec0 <__lshift>
 800fb48:	4681      	mov	r9, r0
 800fb4a:	2800      	cmp	r0, #0
 800fb4c:	d0d8      	beq.n	800fb00 <_strtod_l+0x750>
 800fb4e:	2f00      	cmp	r7, #0
 800fb50:	dd08      	ble.n	800fb64 <_strtod_l+0x7b4>
 800fb52:	4641      	mov	r1, r8
 800fb54:	9805      	ldr	r0, [sp, #20]
 800fb56:	463a      	mov	r2, r7
 800fb58:	f7ff f9b2 	bl	800eec0 <__lshift>
 800fb5c:	4680      	mov	r8, r0
 800fb5e:	2800      	cmp	r0, #0
 800fb60:	f43f ae49 	beq.w	800f7f6 <_strtod_l+0x446>
 800fb64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fb66:	9805      	ldr	r0, [sp, #20]
 800fb68:	464a      	mov	r2, r9
 800fb6a:	f7ff fa31 	bl	800efd0 <__mdiff>
 800fb6e:	4604      	mov	r4, r0
 800fb70:	2800      	cmp	r0, #0
 800fb72:	f43f ae40 	beq.w	800f7f6 <_strtod_l+0x446>
 800fb76:	68c3      	ldr	r3, [r0, #12]
 800fb78:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	60c3      	str	r3, [r0, #12]
 800fb7e:	4641      	mov	r1, r8
 800fb80:	f7ff fa0a 	bl	800ef98 <__mcmp>
 800fb84:	2800      	cmp	r0, #0
 800fb86:	da45      	bge.n	800fc14 <_strtod_l+0x864>
 800fb88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb8a:	ea53 030a 	orrs.w	r3, r3, sl
 800fb8e:	d16b      	bne.n	800fc68 <_strtod_l+0x8b8>
 800fb90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d167      	bne.n	800fc68 <_strtod_l+0x8b8>
 800fb98:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fb9c:	0d1b      	lsrs	r3, r3, #20
 800fb9e:	051b      	lsls	r3, r3, #20
 800fba0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fba4:	d960      	bls.n	800fc68 <_strtod_l+0x8b8>
 800fba6:	6963      	ldr	r3, [r4, #20]
 800fba8:	b913      	cbnz	r3, 800fbb0 <_strtod_l+0x800>
 800fbaa:	6923      	ldr	r3, [r4, #16]
 800fbac:	2b01      	cmp	r3, #1
 800fbae:	dd5b      	ble.n	800fc68 <_strtod_l+0x8b8>
 800fbb0:	4621      	mov	r1, r4
 800fbb2:	2201      	movs	r2, #1
 800fbb4:	9805      	ldr	r0, [sp, #20]
 800fbb6:	f7ff f983 	bl	800eec0 <__lshift>
 800fbba:	4641      	mov	r1, r8
 800fbbc:	4604      	mov	r4, r0
 800fbbe:	f7ff f9eb 	bl	800ef98 <__mcmp>
 800fbc2:	2800      	cmp	r0, #0
 800fbc4:	dd50      	ble.n	800fc68 <_strtod_l+0x8b8>
 800fbc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fbca:	9a08      	ldr	r2, [sp, #32]
 800fbcc:	0d1b      	lsrs	r3, r3, #20
 800fbce:	051b      	lsls	r3, r3, #20
 800fbd0:	2a00      	cmp	r2, #0
 800fbd2:	d06a      	beq.n	800fcaa <_strtod_l+0x8fa>
 800fbd4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fbd8:	d867      	bhi.n	800fcaa <_strtod_l+0x8fa>
 800fbda:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800fbde:	f67f ae9d 	bls.w	800f91c <_strtod_l+0x56c>
 800fbe2:	4b0a      	ldr	r3, [pc, #40]	@ (800fc0c <_strtod_l+0x85c>)
 800fbe4:	4650      	mov	r0, sl
 800fbe6:	4659      	mov	r1, fp
 800fbe8:	2200      	movs	r2, #0
 800fbea:	f7f0 fd2d 	bl	8000648 <__aeabi_dmul>
 800fbee:	4b08      	ldr	r3, [pc, #32]	@ (800fc10 <_strtod_l+0x860>)
 800fbf0:	400b      	ands	r3, r1
 800fbf2:	4682      	mov	sl, r0
 800fbf4:	468b      	mov	fp, r1
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	f47f ae08 	bne.w	800f80c <_strtod_l+0x45c>
 800fbfc:	9a05      	ldr	r2, [sp, #20]
 800fbfe:	2322      	movs	r3, #34	@ 0x22
 800fc00:	6013      	str	r3, [r2, #0]
 800fc02:	e603      	b.n	800f80c <_strtod_l+0x45c>
 800fc04:	080116a0 	.word	0x080116a0
 800fc08:	fffffc02 	.word	0xfffffc02
 800fc0c:	39500000 	.word	0x39500000
 800fc10:	7ff00000 	.word	0x7ff00000
 800fc14:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800fc18:	d165      	bne.n	800fce6 <_strtod_l+0x936>
 800fc1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fc1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fc20:	b35a      	cbz	r2, 800fc7a <_strtod_l+0x8ca>
 800fc22:	4a9f      	ldr	r2, [pc, #636]	@ (800fea0 <_strtod_l+0xaf0>)
 800fc24:	4293      	cmp	r3, r2
 800fc26:	d12b      	bne.n	800fc80 <_strtod_l+0x8d0>
 800fc28:	9b08      	ldr	r3, [sp, #32]
 800fc2a:	4651      	mov	r1, sl
 800fc2c:	b303      	cbz	r3, 800fc70 <_strtod_l+0x8c0>
 800fc2e:	4b9d      	ldr	r3, [pc, #628]	@ (800fea4 <_strtod_l+0xaf4>)
 800fc30:	465a      	mov	r2, fp
 800fc32:	4013      	ands	r3, r2
 800fc34:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800fc38:	f04f 32ff 	mov.w	r2, #4294967295
 800fc3c:	d81b      	bhi.n	800fc76 <_strtod_l+0x8c6>
 800fc3e:	0d1b      	lsrs	r3, r3, #20
 800fc40:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fc44:	fa02 f303 	lsl.w	r3, r2, r3
 800fc48:	4299      	cmp	r1, r3
 800fc4a:	d119      	bne.n	800fc80 <_strtod_l+0x8d0>
 800fc4c:	4b96      	ldr	r3, [pc, #600]	@ (800fea8 <_strtod_l+0xaf8>)
 800fc4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fc50:	429a      	cmp	r2, r3
 800fc52:	d102      	bne.n	800fc5a <_strtod_l+0x8aa>
 800fc54:	3101      	adds	r1, #1
 800fc56:	f43f adce 	beq.w	800f7f6 <_strtod_l+0x446>
 800fc5a:	4b92      	ldr	r3, [pc, #584]	@ (800fea4 <_strtod_l+0xaf4>)
 800fc5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fc5e:	401a      	ands	r2, r3
 800fc60:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800fc64:	f04f 0a00 	mov.w	sl, #0
 800fc68:	9b08      	ldr	r3, [sp, #32]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d1b9      	bne.n	800fbe2 <_strtod_l+0x832>
 800fc6e:	e5cd      	b.n	800f80c <_strtod_l+0x45c>
 800fc70:	f04f 33ff 	mov.w	r3, #4294967295
 800fc74:	e7e8      	b.n	800fc48 <_strtod_l+0x898>
 800fc76:	4613      	mov	r3, r2
 800fc78:	e7e6      	b.n	800fc48 <_strtod_l+0x898>
 800fc7a:	ea53 030a 	orrs.w	r3, r3, sl
 800fc7e:	d0a2      	beq.n	800fbc6 <_strtod_l+0x816>
 800fc80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fc82:	b1db      	cbz	r3, 800fcbc <_strtod_l+0x90c>
 800fc84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fc86:	4213      	tst	r3, r2
 800fc88:	d0ee      	beq.n	800fc68 <_strtod_l+0x8b8>
 800fc8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc8c:	9a08      	ldr	r2, [sp, #32]
 800fc8e:	4650      	mov	r0, sl
 800fc90:	4659      	mov	r1, fp
 800fc92:	b1bb      	cbz	r3, 800fcc4 <_strtod_l+0x914>
 800fc94:	f7ff fb6e 	bl	800f374 <sulp>
 800fc98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fc9c:	ec53 2b10 	vmov	r2, r3, d0
 800fca0:	f7f0 fb1c 	bl	80002dc <__adddf3>
 800fca4:	4682      	mov	sl, r0
 800fca6:	468b      	mov	fp, r1
 800fca8:	e7de      	b.n	800fc68 <_strtod_l+0x8b8>
 800fcaa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800fcae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fcb2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fcb6:	f04f 3aff 	mov.w	sl, #4294967295
 800fcba:	e7d5      	b.n	800fc68 <_strtod_l+0x8b8>
 800fcbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fcbe:	ea13 0f0a 	tst.w	r3, sl
 800fcc2:	e7e1      	b.n	800fc88 <_strtod_l+0x8d8>
 800fcc4:	f7ff fb56 	bl	800f374 <sulp>
 800fcc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fccc:	ec53 2b10 	vmov	r2, r3, d0
 800fcd0:	f7f0 fb02 	bl	80002d8 <__aeabi_dsub>
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	4682      	mov	sl, r0
 800fcda:	468b      	mov	fp, r1
 800fcdc:	f7f0 ff1c 	bl	8000b18 <__aeabi_dcmpeq>
 800fce0:	2800      	cmp	r0, #0
 800fce2:	d0c1      	beq.n	800fc68 <_strtod_l+0x8b8>
 800fce4:	e61a      	b.n	800f91c <_strtod_l+0x56c>
 800fce6:	4641      	mov	r1, r8
 800fce8:	4620      	mov	r0, r4
 800fcea:	f7ff facd 	bl	800f288 <__ratio>
 800fcee:	ec57 6b10 	vmov	r6, r7, d0
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fcf8:	4630      	mov	r0, r6
 800fcfa:	4639      	mov	r1, r7
 800fcfc:	f7f0 ff20 	bl	8000b40 <__aeabi_dcmple>
 800fd00:	2800      	cmp	r0, #0
 800fd02:	d06f      	beq.n	800fde4 <_strtod_l+0xa34>
 800fd04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d17a      	bne.n	800fe00 <_strtod_l+0xa50>
 800fd0a:	f1ba 0f00 	cmp.w	sl, #0
 800fd0e:	d158      	bne.n	800fdc2 <_strtod_l+0xa12>
 800fd10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d15a      	bne.n	800fdd0 <_strtod_l+0xa20>
 800fd1a:	4b64      	ldr	r3, [pc, #400]	@ (800feac <_strtod_l+0xafc>)
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	4630      	mov	r0, r6
 800fd20:	4639      	mov	r1, r7
 800fd22:	f7f0 ff03 	bl	8000b2c <__aeabi_dcmplt>
 800fd26:	2800      	cmp	r0, #0
 800fd28:	d159      	bne.n	800fdde <_strtod_l+0xa2e>
 800fd2a:	4630      	mov	r0, r6
 800fd2c:	4639      	mov	r1, r7
 800fd2e:	4b60      	ldr	r3, [pc, #384]	@ (800feb0 <_strtod_l+0xb00>)
 800fd30:	2200      	movs	r2, #0
 800fd32:	f7f0 fc89 	bl	8000648 <__aeabi_dmul>
 800fd36:	4606      	mov	r6, r0
 800fd38:	460f      	mov	r7, r1
 800fd3a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800fd3e:	9606      	str	r6, [sp, #24]
 800fd40:	9307      	str	r3, [sp, #28]
 800fd42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fd46:	4d57      	ldr	r5, [pc, #348]	@ (800fea4 <_strtod_l+0xaf4>)
 800fd48:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fd4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd4e:	401d      	ands	r5, r3
 800fd50:	4b58      	ldr	r3, [pc, #352]	@ (800feb4 <_strtod_l+0xb04>)
 800fd52:	429d      	cmp	r5, r3
 800fd54:	f040 80b2 	bne.w	800febc <_strtod_l+0xb0c>
 800fd58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd5a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800fd5e:	ec4b ab10 	vmov	d0, sl, fp
 800fd62:	f7ff f9c9 	bl	800f0f8 <__ulp>
 800fd66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fd6a:	ec51 0b10 	vmov	r0, r1, d0
 800fd6e:	f7f0 fc6b 	bl	8000648 <__aeabi_dmul>
 800fd72:	4652      	mov	r2, sl
 800fd74:	465b      	mov	r3, fp
 800fd76:	f7f0 fab1 	bl	80002dc <__adddf3>
 800fd7a:	460b      	mov	r3, r1
 800fd7c:	4949      	ldr	r1, [pc, #292]	@ (800fea4 <_strtod_l+0xaf4>)
 800fd7e:	4a4e      	ldr	r2, [pc, #312]	@ (800feb8 <_strtod_l+0xb08>)
 800fd80:	4019      	ands	r1, r3
 800fd82:	4291      	cmp	r1, r2
 800fd84:	4682      	mov	sl, r0
 800fd86:	d942      	bls.n	800fe0e <_strtod_l+0xa5e>
 800fd88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fd8a:	4b47      	ldr	r3, [pc, #284]	@ (800fea8 <_strtod_l+0xaf8>)
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d103      	bne.n	800fd98 <_strtod_l+0x9e8>
 800fd90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd92:	3301      	adds	r3, #1
 800fd94:	f43f ad2f 	beq.w	800f7f6 <_strtod_l+0x446>
 800fd98:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800fea8 <_strtod_l+0xaf8>
 800fd9c:	f04f 3aff 	mov.w	sl, #4294967295
 800fda0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fda2:	9805      	ldr	r0, [sp, #20]
 800fda4:	f7fe fe7c 	bl	800eaa0 <_Bfree>
 800fda8:	9805      	ldr	r0, [sp, #20]
 800fdaa:	4649      	mov	r1, r9
 800fdac:	f7fe fe78 	bl	800eaa0 <_Bfree>
 800fdb0:	9805      	ldr	r0, [sp, #20]
 800fdb2:	4641      	mov	r1, r8
 800fdb4:	f7fe fe74 	bl	800eaa0 <_Bfree>
 800fdb8:	9805      	ldr	r0, [sp, #20]
 800fdba:	4621      	mov	r1, r4
 800fdbc:	f7fe fe70 	bl	800eaa0 <_Bfree>
 800fdc0:	e619      	b.n	800f9f6 <_strtod_l+0x646>
 800fdc2:	f1ba 0f01 	cmp.w	sl, #1
 800fdc6:	d103      	bne.n	800fdd0 <_strtod_l+0xa20>
 800fdc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	f43f ada6 	beq.w	800f91c <_strtod_l+0x56c>
 800fdd0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800fe80 <_strtod_l+0xad0>
 800fdd4:	4f35      	ldr	r7, [pc, #212]	@ (800feac <_strtod_l+0xafc>)
 800fdd6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fdda:	2600      	movs	r6, #0
 800fddc:	e7b1      	b.n	800fd42 <_strtod_l+0x992>
 800fdde:	4f34      	ldr	r7, [pc, #208]	@ (800feb0 <_strtod_l+0xb00>)
 800fde0:	2600      	movs	r6, #0
 800fde2:	e7aa      	b.n	800fd3a <_strtod_l+0x98a>
 800fde4:	4b32      	ldr	r3, [pc, #200]	@ (800feb0 <_strtod_l+0xb00>)
 800fde6:	4630      	mov	r0, r6
 800fde8:	4639      	mov	r1, r7
 800fdea:	2200      	movs	r2, #0
 800fdec:	f7f0 fc2c 	bl	8000648 <__aeabi_dmul>
 800fdf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fdf2:	4606      	mov	r6, r0
 800fdf4:	460f      	mov	r7, r1
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d09f      	beq.n	800fd3a <_strtod_l+0x98a>
 800fdfa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800fdfe:	e7a0      	b.n	800fd42 <_strtod_l+0x992>
 800fe00:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800fe88 <_strtod_l+0xad8>
 800fe04:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fe08:	ec57 6b17 	vmov	r6, r7, d7
 800fe0c:	e799      	b.n	800fd42 <_strtod_l+0x992>
 800fe0e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800fe12:	9b08      	ldr	r3, [sp, #32]
 800fe14:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d1c1      	bne.n	800fda0 <_strtod_l+0x9f0>
 800fe1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fe20:	0d1b      	lsrs	r3, r3, #20
 800fe22:	051b      	lsls	r3, r3, #20
 800fe24:	429d      	cmp	r5, r3
 800fe26:	d1bb      	bne.n	800fda0 <_strtod_l+0x9f0>
 800fe28:	4630      	mov	r0, r6
 800fe2a:	4639      	mov	r1, r7
 800fe2c:	f7f0 ff6c 	bl	8000d08 <__aeabi_d2lz>
 800fe30:	f7f0 fbdc 	bl	80005ec <__aeabi_l2d>
 800fe34:	4602      	mov	r2, r0
 800fe36:	460b      	mov	r3, r1
 800fe38:	4630      	mov	r0, r6
 800fe3a:	4639      	mov	r1, r7
 800fe3c:	f7f0 fa4c 	bl	80002d8 <__aeabi_dsub>
 800fe40:	460b      	mov	r3, r1
 800fe42:	4602      	mov	r2, r0
 800fe44:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800fe48:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800fe4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe4e:	ea46 060a 	orr.w	r6, r6, sl
 800fe52:	431e      	orrs	r6, r3
 800fe54:	d06f      	beq.n	800ff36 <_strtod_l+0xb86>
 800fe56:	a30e      	add	r3, pc, #56	@ (adr r3, 800fe90 <_strtod_l+0xae0>)
 800fe58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe5c:	f7f0 fe66 	bl	8000b2c <__aeabi_dcmplt>
 800fe60:	2800      	cmp	r0, #0
 800fe62:	f47f acd3 	bne.w	800f80c <_strtod_l+0x45c>
 800fe66:	a30c      	add	r3, pc, #48	@ (adr r3, 800fe98 <_strtod_l+0xae8>)
 800fe68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fe70:	f7f0 fe7a 	bl	8000b68 <__aeabi_dcmpgt>
 800fe74:	2800      	cmp	r0, #0
 800fe76:	d093      	beq.n	800fda0 <_strtod_l+0x9f0>
 800fe78:	e4c8      	b.n	800f80c <_strtod_l+0x45c>
 800fe7a:	bf00      	nop
 800fe7c:	f3af 8000 	nop.w
 800fe80:	00000000 	.word	0x00000000
 800fe84:	bff00000 	.word	0xbff00000
 800fe88:	00000000 	.word	0x00000000
 800fe8c:	3ff00000 	.word	0x3ff00000
 800fe90:	94a03595 	.word	0x94a03595
 800fe94:	3fdfffff 	.word	0x3fdfffff
 800fe98:	35afe535 	.word	0x35afe535
 800fe9c:	3fe00000 	.word	0x3fe00000
 800fea0:	000fffff 	.word	0x000fffff
 800fea4:	7ff00000 	.word	0x7ff00000
 800fea8:	7fefffff 	.word	0x7fefffff
 800feac:	3ff00000 	.word	0x3ff00000
 800feb0:	3fe00000 	.word	0x3fe00000
 800feb4:	7fe00000 	.word	0x7fe00000
 800feb8:	7c9fffff 	.word	0x7c9fffff
 800febc:	9b08      	ldr	r3, [sp, #32]
 800febe:	b323      	cbz	r3, 800ff0a <_strtod_l+0xb5a>
 800fec0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800fec4:	d821      	bhi.n	800ff0a <_strtod_l+0xb5a>
 800fec6:	a328      	add	r3, pc, #160	@ (adr r3, 800ff68 <_strtod_l+0xbb8>)
 800fec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fecc:	4630      	mov	r0, r6
 800fece:	4639      	mov	r1, r7
 800fed0:	f7f0 fe36 	bl	8000b40 <__aeabi_dcmple>
 800fed4:	b1a0      	cbz	r0, 800ff00 <_strtod_l+0xb50>
 800fed6:	4639      	mov	r1, r7
 800fed8:	4630      	mov	r0, r6
 800feda:	f7f0 fe8d 	bl	8000bf8 <__aeabi_d2uiz>
 800fede:	2801      	cmp	r0, #1
 800fee0:	bf38      	it	cc
 800fee2:	2001      	movcc	r0, #1
 800fee4:	f7f0 fb36 	bl	8000554 <__aeabi_ui2d>
 800fee8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800feea:	4606      	mov	r6, r0
 800feec:	460f      	mov	r7, r1
 800feee:	b9fb      	cbnz	r3, 800ff30 <_strtod_l+0xb80>
 800fef0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fef4:	9014      	str	r0, [sp, #80]	@ 0x50
 800fef6:	9315      	str	r3, [sp, #84]	@ 0x54
 800fef8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800fefc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ff00:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ff02:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ff06:	1b5b      	subs	r3, r3, r5
 800ff08:	9311      	str	r3, [sp, #68]	@ 0x44
 800ff0a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ff0e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ff12:	f7ff f8f1 	bl	800f0f8 <__ulp>
 800ff16:	4650      	mov	r0, sl
 800ff18:	ec53 2b10 	vmov	r2, r3, d0
 800ff1c:	4659      	mov	r1, fp
 800ff1e:	f7f0 fb93 	bl	8000648 <__aeabi_dmul>
 800ff22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ff26:	f7f0 f9d9 	bl	80002dc <__adddf3>
 800ff2a:	4682      	mov	sl, r0
 800ff2c:	468b      	mov	fp, r1
 800ff2e:	e770      	b.n	800fe12 <_strtod_l+0xa62>
 800ff30:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ff34:	e7e0      	b.n	800fef8 <_strtod_l+0xb48>
 800ff36:	a30e      	add	r3, pc, #56	@ (adr r3, 800ff70 <_strtod_l+0xbc0>)
 800ff38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff3c:	f7f0 fdf6 	bl	8000b2c <__aeabi_dcmplt>
 800ff40:	e798      	b.n	800fe74 <_strtod_l+0xac4>
 800ff42:	2300      	movs	r3, #0
 800ff44:	930e      	str	r3, [sp, #56]	@ 0x38
 800ff46:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ff48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ff4a:	6013      	str	r3, [r2, #0]
 800ff4c:	f7ff ba6d 	b.w	800f42a <_strtod_l+0x7a>
 800ff50:	2a65      	cmp	r2, #101	@ 0x65
 800ff52:	f43f ab68 	beq.w	800f626 <_strtod_l+0x276>
 800ff56:	2a45      	cmp	r2, #69	@ 0x45
 800ff58:	f43f ab65 	beq.w	800f626 <_strtod_l+0x276>
 800ff5c:	2301      	movs	r3, #1
 800ff5e:	f7ff bba0 	b.w	800f6a2 <_strtod_l+0x2f2>
 800ff62:	bf00      	nop
 800ff64:	f3af 8000 	nop.w
 800ff68:	ffc00000 	.word	0xffc00000
 800ff6c:	41dfffff 	.word	0x41dfffff
 800ff70:	94a03595 	.word	0x94a03595
 800ff74:	3fcfffff 	.word	0x3fcfffff

0800ff78 <_strtod_r>:
 800ff78:	4b01      	ldr	r3, [pc, #4]	@ (800ff80 <_strtod_r+0x8>)
 800ff7a:	f7ff ba19 	b.w	800f3b0 <_strtod_l>
 800ff7e:	bf00      	nop
 800ff80:	200001e0 	.word	0x200001e0

0800ff84 <_strtol_l.isra.0>:
 800ff84:	2b24      	cmp	r3, #36	@ 0x24
 800ff86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff8a:	4686      	mov	lr, r0
 800ff8c:	4690      	mov	r8, r2
 800ff8e:	d801      	bhi.n	800ff94 <_strtol_l.isra.0+0x10>
 800ff90:	2b01      	cmp	r3, #1
 800ff92:	d106      	bne.n	800ffa2 <_strtol_l.isra.0+0x1e>
 800ff94:	f7fd fda8 	bl	800dae8 <__errno>
 800ff98:	2316      	movs	r3, #22
 800ff9a:	6003      	str	r3, [r0, #0]
 800ff9c:	2000      	movs	r0, #0
 800ff9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffa2:	4834      	ldr	r0, [pc, #208]	@ (8010074 <_strtol_l.isra.0+0xf0>)
 800ffa4:	460d      	mov	r5, r1
 800ffa6:	462a      	mov	r2, r5
 800ffa8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ffac:	5d06      	ldrb	r6, [r0, r4]
 800ffae:	f016 0608 	ands.w	r6, r6, #8
 800ffb2:	d1f8      	bne.n	800ffa6 <_strtol_l.isra.0+0x22>
 800ffb4:	2c2d      	cmp	r4, #45	@ 0x2d
 800ffb6:	d110      	bne.n	800ffda <_strtol_l.isra.0+0x56>
 800ffb8:	782c      	ldrb	r4, [r5, #0]
 800ffba:	2601      	movs	r6, #1
 800ffbc:	1c95      	adds	r5, r2, #2
 800ffbe:	f033 0210 	bics.w	r2, r3, #16
 800ffc2:	d115      	bne.n	800fff0 <_strtol_l.isra.0+0x6c>
 800ffc4:	2c30      	cmp	r4, #48	@ 0x30
 800ffc6:	d10d      	bne.n	800ffe4 <_strtol_l.isra.0+0x60>
 800ffc8:	782a      	ldrb	r2, [r5, #0]
 800ffca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ffce:	2a58      	cmp	r2, #88	@ 0x58
 800ffd0:	d108      	bne.n	800ffe4 <_strtol_l.isra.0+0x60>
 800ffd2:	786c      	ldrb	r4, [r5, #1]
 800ffd4:	3502      	adds	r5, #2
 800ffd6:	2310      	movs	r3, #16
 800ffd8:	e00a      	b.n	800fff0 <_strtol_l.isra.0+0x6c>
 800ffda:	2c2b      	cmp	r4, #43	@ 0x2b
 800ffdc:	bf04      	itt	eq
 800ffde:	782c      	ldrbeq	r4, [r5, #0]
 800ffe0:	1c95      	addeq	r5, r2, #2
 800ffe2:	e7ec      	b.n	800ffbe <_strtol_l.isra.0+0x3a>
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d1f6      	bne.n	800ffd6 <_strtol_l.isra.0+0x52>
 800ffe8:	2c30      	cmp	r4, #48	@ 0x30
 800ffea:	bf14      	ite	ne
 800ffec:	230a      	movne	r3, #10
 800ffee:	2308      	moveq	r3, #8
 800fff0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800fff4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fff8:	2200      	movs	r2, #0
 800fffa:	fbbc f9f3 	udiv	r9, ip, r3
 800fffe:	4610      	mov	r0, r2
 8010000:	fb03 ca19 	mls	sl, r3, r9, ip
 8010004:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010008:	2f09      	cmp	r7, #9
 801000a:	d80f      	bhi.n	801002c <_strtol_l.isra.0+0xa8>
 801000c:	463c      	mov	r4, r7
 801000e:	42a3      	cmp	r3, r4
 8010010:	dd1b      	ble.n	801004a <_strtol_l.isra.0+0xc6>
 8010012:	1c57      	adds	r7, r2, #1
 8010014:	d007      	beq.n	8010026 <_strtol_l.isra.0+0xa2>
 8010016:	4581      	cmp	r9, r0
 8010018:	d314      	bcc.n	8010044 <_strtol_l.isra.0+0xc0>
 801001a:	d101      	bne.n	8010020 <_strtol_l.isra.0+0x9c>
 801001c:	45a2      	cmp	sl, r4
 801001e:	db11      	blt.n	8010044 <_strtol_l.isra.0+0xc0>
 8010020:	fb00 4003 	mla	r0, r0, r3, r4
 8010024:	2201      	movs	r2, #1
 8010026:	f815 4b01 	ldrb.w	r4, [r5], #1
 801002a:	e7eb      	b.n	8010004 <_strtol_l.isra.0+0x80>
 801002c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010030:	2f19      	cmp	r7, #25
 8010032:	d801      	bhi.n	8010038 <_strtol_l.isra.0+0xb4>
 8010034:	3c37      	subs	r4, #55	@ 0x37
 8010036:	e7ea      	b.n	801000e <_strtol_l.isra.0+0x8a>
 8010038:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801003c:	2f19      	cmp	r7, #25
 801003e:	d804      	bhi.n	801004a <_strtol_l.isra.0+0xc6>
 8010040:	3c57      	subs	r4, #87	@ 0x57
 8010042:	e7e4      	b.n	801000e <_strtol_l.isra.0+0x8a>
 8010044:	f04f 32ff 	mov.w	r2, #4294967295
 8010048:	e7ed      	b.n	8010026 <_strtol_l.isra.0+0xa2>
 801004a:	1c53      	adds	r3, r2, #1
 801004c:	d108      	bne.n	8010060 <_strtol_l.isra.0+0xdc>
 801004e:	2322      	movs	r3, #34	@ 0x22
 8010050:	f8ce 3000 	str.w	r3, [lr]
 8010054:	4660      	mov	r0, ip
 8010056:	f1b8 0f00 	cmp.w	r8, #0
 801005a:	d0a0      	beq.n	800ff9e <_strtol_l.isra.0+0x1a>
 801005c:	1e69      	subs	r1, r5, #1
 801005e:	e006      	b.n	801006e <_strtol_l.isra.0+0xea>
 8010060:	b106      	cbz	r6, 8010064 <_strtol_l.isra.0+0xe0>
 8010062:	4240      	negs	r0, r0
 8010064:	f1b8 0f00 	cmp.w	r8, #0
 8010068:	d099      	beq.n	800ff9e <_strtol_l.isra.0+0x1a>
 801006a:	2a00      	cmp	r2, #0
 801006c:	d1f6      	bne.n	801005c <_strtol_l.isra.0+0xd8>
 801006e:	f8c8 1000 	str.w	r1, [r8]
 8010072:	e794      	b.n	800ff9e <_strtol_l.isra.0+0x1a>
 8010074:	080112a5 	.word	0x080112a5

08010078 <_strtol_r>:
 8010078:	f7ff bf84 	b.w	800ff84 <_strtol_l.isra.0>

0801007c <__ssputs_r>:
 801007c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010080:	688e      	ldr	r6, [r1, #8]
 8010082:	461f      	mov	r7, r3
 8010084:	42be      	cmp	r6, r7
 8010086:	680b      	ldr	r3, [r1, #0]
 8010088:	4682      	mov	sl, r0
 801008a:	460c      	mov	r4, r1
 801008c:	4690      	mov	r8, r2
 801008e:	d82d      	bhi.n	80100ec <__ssputs_r+0x70>
 8010090:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010094:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010098:	d026      	beq.n	80100e8 <__ssputs_r+0x6c>
 801009a:	6965      	ldr	r5, [r4, #20]
 801009c:	6909      	ldr	r1, [r1, #16]
 801009e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80100a2:	eba3 0901 	sub.w	r9, r3, r1
 80100a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80100aa:	1c7b      	adds	r3, r7, #1
 80100ac:	444b      	add	r3, r9
 80100ae:	106d      	asrs	r5, r5, #1
 80100b0:	429d      	cmp	r5, r3
 80100b2:	bf38      	it	cc
 80100b4:	461d      	movcc	r5, r3
 80100b6:	0553      	lsls	r3, r2, #21
 80100b8:	d527      	bpl.n	801010a <__ssputs_r+0x8e>
 80100ba:	4629      	mov	r1, r5
 80100bc:	f7fe fc24 	bl	800e908 <_malloc_r>
 80100c0:	4606      	mov	r6, r0
 80100c2:	b360      	cbz	r0, 801011e <__ssputs_r+0xa2>
 80100c4:	6921      	ldr	r1, [r4, #16]
 80100c6:	464a      	mov	r2, r9
 80100c8:	f7fd fd3b 	bl	800db42 <memcpy>
 80100cc:	89a3      	ldrh	r3, [r4, #12]
 80100ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80100d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80100d6:	81a3      	strh	r3, [r4, #12]
 80100d8:	6126      	str	r6, [r4, #16]
 80100da:	6165      	str	r5, [r4, #20]
 80100dc:	444e      	add	r6, r9
 80100de:	eba5 0509 	sub.w	r5, r5, r9
 80100e2:	6026      	str	r6, [r4, #0]
 80100e4:	60a5      	str	r5, [r4, #8]
 80100e6:	463e      	mov	r6, r7
 80100e8:	42be      	cmp	r6, r7
 80100ea:	d900      	bls.n	80100ee <__ssputs_r+0x72>
 80100ec:	463e      	mov	r6, r7
 80100ee:	6820      	ldr	r0, [r4, #0]
 80100f0:	4632      	mov	r2, r6
 80100f2:	4641      	mov	r1, r8
 80100f4:	f000 fb9c 	bl	8010830 <memmove>
 80100f8:	68a3      	ldr	r3, [r4, #8]
 80100fa:	1b9b      	subs	r3, r3, r6
 80100fc:	60a3      	str	r3, [r4, #8]
 80100fe:	6823      	ldr	r3, [r4, #0]
 8010100:	4433      	add	r3, r6
 8010102:	6023      	str	r3, [r4, #0]
 8010104:	2000      	movs	r0, #0
 8010106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801010a:	462a      	mov	r2, r5
 801010c:	f000 ff51 	bl	8010fb2 <_realloc_r>
 8010110:	4606      	mov	r6, r0
 8010112:	2800      	cmp	r0, #0
 8010114:	d1e0      	bne.n	80100d8 <__ssputs_r+0x5c>
 8010116:	6921      	ldr	r1, [r4, #16]
 8010118:	4650      	mov	r0, sl
 801011a:	f7fe fb81 	bl	800e820 <_free_r>
 801011e:	230c      	movs	r3, #12
 8010120:	f8ca 3000 	str.w	r3, [sl]
 8010124:	89a3      	ldrh	r3, [r4, #12]
 8010126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801012a:	81a3      	strh	r3, [r4, #12]
 801012c:	f04f 30ff 	mov.w	r0, #4294967295
 8010130:	e7e9      	b.n	8010106 <__ssputs_r+0x8a>
	...

08010134 <_svfiprintf_r>:
 8010134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010138:	4698      	mov	r8, r3
 801013a:	898b      	ldrh	r3, [r1, #12]
 801013c:	061b      	lsls	r3, r3, #24
 801013e:	b09d      	sub	sp, #116	@ 0x74
 8010140:	4607      	mov	r7, r0
 8010142:	460d      	mov	r5, r1
 8010144:	4614      	mov	r4, r2
 8010146:	d510      	bpl.n	801016a <_svfiprintf_r+0x36>
 8010148:	690b      	ldr	r3, [r1, #16]
 801014a:	b973      	cbnz	r3, 801016a <_svfiprintf_r+0x36>
 801014c:	2140      	movs	r1, #64	@ 0x40
 801014e:	f7fe fbdb 	bl	800e908 <_malloc_r>
 8010152:	6028      	str	r0, [r5, #0]
 8010154:	6128      	str	r0, [r5, #16]
 8010156:	b930      	cbnz	r0, 8010166 <_svfiprintf_r+0x32>
 8010158:	230c      	movs	r3, #12
 801015a:	603b      	str	r3, [r7, #0]
 801015c:	f04f 30ff 	mov.w	r0, #4294967295
 8010160:	b01d      	add	sp, #116	@ 0x74
 8010162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010166:	2340      	movs	r3, #64	@ 0x40
 8010168:	616b      	str	r3, [r5, #20]
 801016a:	2300      	movs	r3, #0
 801016c:	9309      	str	r3, [sp, #36]	@ 0x24
 801016e:	2320      	movs	r3, #32
 8010170:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010174:	f8cd 800c 	str.w	r8, [sp, #12]
 8010178:	2330      	movs	r3, #48	@ 0x30
 801017a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010318 <_svfiprintf_r+0x1e4>
 801017e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010182:	f04f 0901 	mov.w	r9, #1
 8010186:	4623      	mov	r3, r4
 8010188:	469a      	mov	sl, r3
 801018a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801018e:	b10a      	cbz	r2, 8010194 <_svfiprintf_r+0x60>
 8010190:	2a25      	cmp	r2, #37	@ 0x25
 8010192:	d1f9      	bne.n	8010188 <_svfiprintf_r+0x54>
 8010194:	ebba 0b04 	subs.w	fp, sl, r4
 8010198:	d00b      	beq.n	80101b2 <_svfiprintf_r+0x7e>
 801019a:	465b      	mov	r3, fp
 801019c:	4622      	mov	r2, r4
 801019e:	4629      	mov	r1, r5
 80101a0:	4638      	mov	r0, r7
 80101a2:	f7ff ff6b 	bl	801007c <__ssputs_r>
 80101a6:	3001      	adds	r0, #1
 80101a8:	f000 80a7 	beq.w	80102fa <_svfiprintf_r+0x1c6>
 80101ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80101ae:	445a      	add	r2, fp
 80101b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80101b2:	f89a 3000 	ldrb.w	r3, [sl]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	f000 809f 	beq.w	80102fa <_svfiprintf_r+0x1c6>
 80101bc:	2300      	movs	r3, #0
 80101be:	f04f 32ff 	mov.w	r2, #4294967295
 80101c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80101c6:	f10a 0a01 	add.w	sl, sl, #1
 80101ca:	9304      	str	r3, [sp, #16]
 80101cc:	9307      	str	r3, [sp, #28]
 80101ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80101d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80101d4:	4654      	mov	r4, sl
 80101d6:	2205      	movs	r2, #5
 80101d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101dc:	484e      	ldr	r0, [pc, #312]	@ (8010318 <_svfiprintf_r+0x1e4>)
 80101de:	f7f0 f81f 	bl	8000220 <memchr>
 80101e2:	9a04      	ldr	r2, [sp, #16]
 80101e4:	b9d8      	cbnz	r0, 801021e <_svfiprintf_r+0xea>
 80101e6:	06d0      	lsls	r0, r2, #27
 80101e8:	bf44      	itt	mi
 80101ea:	2320      	movmi	r3, #32
 80101ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80101f0:	0711      	lsls	r1, r2, #28
 80101f2:	bf44      	itt	mi
 80101f4:	232b      	movmi	r3, #43	@ 0x2b
 80101f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80101fa:	f89a 3000 	ldrb.w	r3, [sl]
 80101fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8010200:	d015      	beq.n	801022e <_svfiprintf_r+0xfa>
 8010202:	9a07      	ldr	r2, [sp, #28]
 8010204:	4654      	mov	r4, sl
 8010206:	2000      	movs	r0, #0
 8010208:	f04f 0c0a 	mov.w	ip, #10
 801020c:	4621      	mov	r1, r4
 801020e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010212:	3b30      	subs	r3, #48	@ 0x30
 8010214:	2b09      	cmp	r3, #9
 8010216:	d94b      	bls.n	80102b0 <_svfiprintf_r+0x17c>
 8010218:	b1b0      	cbz	r0, 8010248 <_svfiprintf_r+0x114>
 801021a:	9207      	str	r2, [sp, #28]
 801021c:	e014      	b.n	8010248 <_svfiprintf_r+0x114>
 801021e:	eba0 0308 	sub.w	r3, r0, r8
 8010222:	fa09 f303 	lsl.w	r3, r9, r3
 8010226:	4313      	orrs	r3, r2
 8010228:	9304      	str	r3, [sp, #16]
 801022a:	46a2      	mov	sl, r4
 801022c:	e7d2      	b.n	80101d4 <_svfiprintf_r+0xa0>
 801022e:	9b03      	ldr	r3, [sp, #12]
 8010230:	1d19      	adds	r1, r3, #4
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	9103      	str	r1, [sp, #12]
 8010236:	2b00      	cmp	r3, #0
 8010238:	bfbb      	ittet	lt
 801023a:	425b      	neglt	r3, r3
 801023c:	f042 0202 	orrlt.w	r2, r2, #2
 8010240:	9307      	strge	r3, [sp, #28]
 8010242:	9307      	strlt	r3, [sp, #28]
 8010244:	bfb8      	it	lt
 8010246:	9204      	strlt	r2, [sp, #16]
 8010248:	7823      	ldrb	r3, [r4, #0]
 801024a:	2b2e      	cmp	r3, #46	@ 0x2e
 801024c:	d10a      	bne.n	8010264 <_svfiprintf_r+0x130>
 801024e:	7863      	ldrb	r3, [r4, #1]
 8010250:	2b2a      	cmp	r3, #42	@ 0x2a
 8010252:	d132      	bne.n	80102ba <_svfiprintf_r+0x186>
 8010254:	9b03      	ldr	r3, [sp, #12]
 8010256:	1d1a      	adds	r2, r3, #4
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	9203      	str	r2, [sp, #12]
 801025c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010260:	3402      	adds	r4, #2
 8010262:	9305      	str	r3, [sp, #20]
 8010264:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010328 <_svfiprintf_r+0x1f4>
 8010268:	7821      	ldrb	r1, [r4, #0]
 801026a:	2203      	movs	r2, #3
 801026c:	4650      	mov	r0, sl
 801026e:	f7ef ffd7 	bl	8000220 <memchr>
 8010272:	b138      	cbz	r0, 8010284 <_svfiprintf_r+0x150>
 8010274:	9b04      	ldr	r3, [sp, #16]
 8010276:	eba0 000a 	sub.w	r0, r0, sl
 801027a:	2240      	movs	r2, #64	@ 0x40
 801027c:	4082      	lsls	r2, r0
 801027e:	4313      	orrs	r3, r2
 8010280:	3401      	adds	r4, #1
 8010282:	9304      	str	r3, [sp, #16]
 8010284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010288:	4824      	ldr	r0, [pc, #144]	@ (801031c <_svfiprintf_r+0x1e8>)
 801028a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801028e:	2206      	movs	r2, #6
 8010290:	f7ef ffc6 	bl	8000220 <memchr>
 8010294:	2800      	cmp	r0, #0
 8010296:	d036      	beq.n	8010306 <_svfiprintf_r+0x1d2>
 8010298:	4b21      	ldr	r3, [pc, #132]	@ (8010320 <_svfiprintf_r+0x1ec>)
 801029a:	bb1b      	cbnz	r3, 80102e4 <_svfiprintf_r+0x1b0>
 801029c:	9b03      	ldr	r3, [sp, #12]
 801029e:	3307      	adds	r3, #7
 80102a0:	f023 0307 	bic.w	r3, r3, #7
 80102a4:	3308      	adds	r3, #8
 80102a6:	9303      	str	r3, [sp, #12]
 80102a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102aa:	4433      	add	r3, r6
 80102ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80102ae:	e76a      	b.n	8010186 <_svfiprintf_r+0x52>
 80102b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80102b4:	460c      	mov	r4, r1
 80102b6:	2001      	movs	r0, #1
 80102b8:	e7a8      	b.n	801020c <_svfiprintf_r+0xd8>
 80102ba:	2300      	movs	r3, #0
 80102bc:	3401      	adds	r4, #1
 80102be:	9305      	str	r3, [sp, #20]
 80102c0:	4619      	mov	r1, r3
 80102c2:	f04f 0c0a 	mov.w	ip, #10
 80102c6:	4620      	mov	r0, r4
 80102c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102cc:	3a30      	subs	r2, #48	@ 0x30
 80102ce:	2a09      	cmp	r2, #9
 80102d0:	d903      	bls.n	80102da <_svfiprintf_r+0x1a6>
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d0c6      	beq.n	8010264 <_svfiprintf_r+0x130>
 80102d6:	9105      	str	r1, [sp, #20]
 80102d8:	e7c4      	b.n	8010264 <_svfiprintf_r+0x130>
 80102da:	fb0c 2101 	mla	r1, ip, r1, r2
 80102de:	4604      	mov	r4, r0
 80102e0:	2301      	movs	r3, #1
 80102e2:	e7f0      	b.n	80102c6 <_svfiprintf_r+0x192>
 80102e4:	ab03      	add	r3, sp, #12
 80102e6:	9300      	str	r3, [sp, #0]
 80102e8:	462a      	mov	r2, r5
 80102ea:	4b0e      	ldr	r3, [pc, #56]	@ (8010324 <_svfiprintf_r+0x1f0>)
 80102ec:	a904      	add	r1, sp, #16
 80102ee:	4638      	mov	r0, r7
 80102f0:	f7fc fcaa 	bl	800cc48 <_printf_float>
 80102f4:	1c42      	adds	r2, r0, #1
 80102f6:	4606      	mov	r6, r0
 80102f8:	d1d6      	bne.n	80102a8 <_svfiprintf_r+0x174>
 80102fa:	89ab      	ldrh	r3, [r5, #12]
 80102fc:	065b      	lsls	r3, r3, #25
 80102fe:	f53f af2d 	bmi.w	801015c <_svfiprintf_r+0x28>
 8010302:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010304:	e72c      	b.n	8010160 <_svfiprintf_r+0x2c>
 8010306:	ab03      	add	r3, sp, #12
 8010308:	9300      	str	r3, [sp, #0]
 801030a:	462a      	mov	r2, r5
 801030c:	4b05      	ldr	r3, [pc, #20]	@ (8010324 <_svfiprintf_r+0x1f0>)
 801030e:	a904      	add	r1, sp, #16
 8010310:	4638      	mov	r0, r7
 8010312:	f7fc ff31 	bl	800d178 <_printf_i>
 8010316:	e7ed      	b.n	80102f4 <_svfiprintf_r+0x1c0>
 8010318:	080114c6 	.word	0x080114c6
 801031c:	080114d0 	.word	0x080114d0
 8010320:	0800cc49 	.word	0x0800cc49
 8010324:	0801007d 	.word	0x0801007d
 8010328:	080114cc 	.word	0x080114cc

0801032c <__sfputc_r>:
 801032c:	6893      	ldr	r3, [r2, #8]
 801032e:	3b01      	subs	r3, #1
 8010330:	2b00      	cmp	r3, #0
 8010332:	b410      	push	{r4}
 8010334:	6093      	str	r3, [r2, #8]
 8010336:	da08      	bge.n	801034a <__sfputc_r+0x1e>
 8010338:	6994      	ldr	r4, [r2, #24]
 801033a:	42a3      	cmp	r3, r4
 801033c:	db01      	blt.n	8010342 <__sfputc_r+0x16>
 801033e:	290a      	cmp	r1, #10
 8010340:	d103      	bne.n	801034a <__sfputc_r+0x1e>
 8010342:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010346:	f000 b9df 	b.w	8010708 <__swbuf_r>
 801034a:	6813      	ldr	r3, [r2, #0]
 801034c:	1c58      	adds	r0, r3, #1
 801034e:	6010      	str	r0, [r2, #0]
 8010350:	7019      	strb	r1, [r3, #0]
 8010352:	4608      	mov	r0, r1
 8010354:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010358:	4770      	bx	lr

0801035a <__sfputs_r>:
 801035a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801035c:	4606      	mov	r6, r0
 801035e:	460f      	mov	r7, r1
 8010360:	4614      	mov	r4, r2
 8010362:	18d5      	adds	r5, r2, r3
 8010364:	42ac      	cmp	r4, r5
 8010366:	d101      	bne.n	801036c <__sfputs_r+0x12>
 8010368:	2000      	movs	r0, #0
 801036a:	e007      	b.n	801037c <__sfputs_r+0x22>
 801036c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010370:	463a      	mov	r2, r7
 8010372:	4630      	mov	r0, r6
 8010374:	f7ff ffda 	bl	801032c <__sfputc_r>
 8010378:	1c43      	adds	r3, r0, #1
 801037a:	d1f3      	bne.n	8010364 <__sfputs_r+0xa>
 801037c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010380 <_vfiprintf_r>:
 8010380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010384:	460d      	mov	r5, r1
 8010386:	b09d      	sub	sp, #116	@ 0x74
 8010388:	4614      	mov	r4, r2
 801038a:	4698      	mov	r8, r3
 801038c:	4606      	mov	r6, r0
 801038e:	b118      	cbz	r0, 8010398 <_vfiprintf_r+0x18>
 8010390:	6a03      	ldr	r3, [r0, #32]
 8010392:	b90b      	cbnz	r3, 8010398 <_vfiprintf_r+0x18>
 8010394:	f7fd faa8 	bl	800d8e8 <__sinit>
 8010398:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801039a:	07d9      	lsls	r1, r3, #31
 801039c:	d405      	bmi.n	80103aa <_vfiprintf_r+0x2a>
 801039e:	89ab      	ldrh	r3, [r5, #12]
 80103a0:	059a      	lsls	r2, r3, #22
 80103a2:	d402      	bmi.n	80103aa <_vfiprintf_r+0x2a>
 80103a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80103a6:	f7fd fbca 	bl	800db3e <__retarget_lock_acquire_recursive>
 80103aa:	89ab      	ldrh	r3, [r5, #12]
 80103ac:	071b      	lsls	r3, r3, #28
 80103ae:	d501      	bpl.n	80103b4 <_vfiprintf_r+0x34>
 80103b0:	692b      	ldr	r3, [r5, #16]
 80103b2:	b99b      	cbnz	r3, 80103dc <_vfiprintf_r+0x5c>
 80103b4:	4629      	mov	r1, r5
 80103b6:	4630      	mov	r0, r6
 80103b8:	f000 f9e4 	bl	8010784 <__swsetup_r>
 80103bc:	b170      	cbz	r0, 80103dc <_vfiprintf_r+0x5c>
 80103be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80103c0:	07dc      	lsls	r4, r3, #31
 80103c2:	d504      	bpl.n	80103ce <_vfiprintf_r+0x4e>
 80103c4:	f04f 30ff 	mov.w	r0, #4294967295
 80103c8:	b01d      	add	sp, #116	@ 0x74
 80103ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103ce:	89ab      	ldrh	r3, [r5, #12]
 80103d0:	0598      	lsls	r0, r3, #22
 80103d2:	d4f7      	bmi.n	80103c4 <_vfiprintf_r+0x44>
 80103d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80103d6:	f7fd fbb3 	bl	800db40 <__retarget_lock_release_recursive>
 80103da:	e7f3      	b.n	80103c4 <_vfiprintf_r+0x44>
 80103dc:	2300      	movs	r3, #0
 80103de:	9309      	str	r3, [sp, #36]	@ 0x24
 80103e0:	2320      	movs	r3, #32
 80103e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80103e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80103ea:	2330      	movs	r3, #48	@ 0x30
 80103ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801059c <_vfiprintf_r+0x21c>
 80103f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80103f4:	f04f 0901 	mov.w	r9, #1
 80103f8:	4623      	mov	r3, r4
 80103fa:	469a      	mov	sl, r3
 80103fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010400:	b10a      	cbz	r2, 8010406 <_vfiprintf_r+0x86>
 8010402:	2a25      	cmp	r2, #37	@ 0x25
 8010404:	d1f9      	bne.n	80103fa <_vfiprintf_r+0x7a>
 8010406:	ebba 0b04 	subs.w	fp, sl, r4
 801040a:	d00b      	beq.n	8010424 <_vfiprintf_r+0xa4>
 801040c:	465b      	mov	r3, fp
 801040e:	4622      	mov	r2, r4
 8010410:	4629      	mov	r1, r5
 8010412:	4630      	mov	r0, r6
 8010414:	f7ff ffa1 	bl	801035a <__sfputs_r>
 8010418:	3001      	adds	r0, #1
 801041a:	f000 80a7 	beq.w	801056c <_vfiprintf_r+0x1ec>
 801041e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010420:	445a      	add	r2, fp
 8010422:	9209      	str	r2, [sp, #36]	@ 0x24
 8010424:	f89a 3000 	ldrb.w	r3, [sl]
 8010428:	2b00      	cmp	r3, #0
 801042a:	f000 809f 	beq.w	801056c <_vfiprintf_r+0x1ec>
 801042e:	2300      	movs	r3, #0
 8010430:	f04f 32ff 	mov.w	r2, #4294967295
 8010434:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010438:	f10a 0a01 	add.w	sl, sl, #1
 801043c:	9304      	str	r3, [sp, #16]
 801043e:	9307      	str	r3, [sp, #28]
 8010440:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010444:	931a      	str	r3, [sp, #104]	@ 0x68
 8010446:	4654      	mov	r4, sl
 8010448:	2205      	movs	r2, #5
 801044a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801044e:	4853      	ldr	r0, [pc, #332]	@ (801059c <_vfiprintf_r+0x21c>)
 8010450:	f7ef fee6 	bl	8000220 <memchr>
 8010454:	9a04      	ldr	r2, [sp, #16]
 8010456:	b9d8      	cbnz	r0, 8010490 <_vfiprintf_r+0x110>
 8010458:	06d1      	lsls	r1, r2, #27
 801045a:	bf44      	itt	mi
 801045c:	2320      	movmi	r3, #32
 801045e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010462:	0713      	lsls	r3, r2, #28
 8010464:	bf44      	itt	mi
 8010466:	232b      	movmi	r3, #43	@ 0x2b
 8010468:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801046c:	f89a 3000 	ldrb.w	r3, [sl]
 8010470:	2b2a      	cmp	r3, #42	@ 0x2a
 8010472:	d015      	beq.n	80104a0 <_vfiprintf_r+0x120>
 8010474:	9a07      	ldr	r2, [sp, #28]
 8010476:	4654      	mov	r4, sl
 8010478:	2000      	movs	r0, #0
 801047a:	f04f 0c0a 	mov.w	ip, #10
 801047e:	4621      	mov	r1, r4
 8010480:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010484:	3b30      	subs	r3, #48	@ 0x30
 8010486:	2b09      	cmp	r3, #9
 8010488:	d94b      	bls.n	8010522 <_vfiprintf_r+0x1a2>
 801048a:	b1b0      	cbz	r0, 80104ba <_vfiprintf_r+0x13a>
 801048c:	9207      	str	r2, [sp, #28]
 801048e:	e014      	b.n	80104ba <_vfiprintf_r+0x13a>
 8010490:	eba0 0308 	sub.w	r3, r0, r8
 8010494:	fa09 f303 	lsl.w	r3, r9, r3
 8010498:	4313      	orrs	r3, r2
 801049a:	9304      	str	r3, [sp, #16]
 801049c:	46a2      	mov	sl, r4
 801049e:	e7d2      	b.n	8010446 <_vfiprintf_r+0xc6>
 80104a0:	9b03      	ldr	r3, [sp, #12]
 80104a2:	1d19      	adds	r1, r3, #4
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	9103      	str	r1, [sp, #12]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	bfbb      	ittet	lt
 80104ac:	425b      	neglt	r3, r3
 80104ae:	f042 0202 	orrlt.w	r2, r2, #2
 80104b2:	9307      	strge	r3, [sp, #28]
 80104b4:	9307      	strlt	r3, [sp, #28]
 80104b6:	bfb8      	it	lt
 80104b8:	9204      	strlt	r2, [sp, #16]
 80104ba:	7823      	ldrb	r3, [r4, #0]
 80104bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80104be:	d10a      	bne.n	80104d6 <_vfiprintf_r+0x156>
 80104c0:	7863      	ldrb	r3, [r4, #1]
 80104c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80104c4:	d132      	bne.n	801052c <_vfiprintf_r+0x1ac>
 80104c6:	9b03      	ldr	r3, [sp, #12]
 80104c8:	1d1a      	adds	r2, r3, #4
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	9203      	str	r2, [sp, #12]
 80104ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80104d2:	3402      	adds	r4, #2
 80104d4:	9305      	str	r3, [sp, #20]
 80104d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80105ac <_vfiprintf_r+0x22c>
 80104da:	7821      	ldrb	r1, [r4, #0]
 80104dc:	2203      	movs	r2, #3
 80104de:	4650      	mov	r0, sl
 80104e0:	f7ef fe9e 	bl	8000220 <memchr>
 80104e4:	b138      	cbz	r0, 80104f6 <_vfiprintf_r+0x176>
 80104e6:	9b04      	ldr	r3, [sp, #16]
 80104e8:	eba0 000a 	sub.w	r0, r0, sl
 80104ec:	2240      	movs	r2, #64	@ 0x40
 80104ee:	4082      	lsls	r2, r0
 80104f0:	4313      	orrs	r3, r2
 80104f2:	3401      	adds	r4, #1
 80104f4:	9304      	str	r3, [sp, #16]
 80104f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104fa:	4829      	ldr	r0, [pc, #164]	@ (80105a0 <_vfiprintf_r+0x220>)
 80104fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010500:	2206      	movs	r2, #6
 8010502:	f7ef fe8d 	bl	8000220 <memchr>
 8010506:	2800      	cmp	r0, #0
 8010508:	d03f      	beq.n	801058a <_vfiprintf_r+0x20a>
 801050a:	4b26      	ldr	r3, [pc, #152]	@ (80105a4 <_vfiprintf_r+0x224>)
 801050c:	bb1b      	cbnz	r3, 8010556 <_vfiprintf_r+0x1d6>
 801050e:	9b03      	ldr	r3, [sp, #12]
 8010510:	3307      	adds	r3, #7
 8010512:	f023 0307 	bic.w	r3, r3, #7
 8010516:	3308      	adds	r3, #8
 8010518:	9303      	str	r3, [sp, #12]
 801051a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801051c:	443b      	add	r3, r7
 801051e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010520:	e76a      	b.n	80103f8 <_vfiprintf_r+0x78>
 8010522:	fb0c 3202 	mla	r2, ip, r2, r3
 8010526:	460c      	mov	r4, r1
 8010528:	2001      	movs	r0, #1
 801052a:	e7a8      	b.n	801047e <_vfiprintf_r+0xfe>
 801052c:	2300      	movs	r3, #0
 801052e:	3401      	adds	r4, #1
 8010530:	9305      	str	r3, [sp, #20]
 8010532:	4619      	mov	r1, r3
 8010534:	f04f 0c0a 	mov.w	ip, #10
 8010538:	4620      	mov	r0, r4
 801053a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801053e:	3a30      	subs	r2, #48	@ 0x30
 8010540:	2a09      	cmp	r2, #9
 8010542:	d903      	bls.n	801054c <_vfiprintf_r+0x1cc>
 8010544:	2b00      	cmp	r3, #0
 8010546:	d0c6      	beq.n	80104d6 <_vfiprintf_r+0x156>
 8010548:	9105      	str	r1, [sp, #20]
 801054a:	e7c4      	b.n	80104d6 <_vfiprintf_r+0x156>
 801054c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010550:	4604      	mov	r4, r0
 8010552:	2301      	movs	r3, #1
 8010554:	e7f0      	b.n	8010538 <_vfiprintf_r+0x1b8>
 8010556:	ab03      	add	r3, sp, #12
 8010558:	9300      	str	r3, [sp, #0]
 801055a:	462a      	mov	r2, r5
 801055c:	4b12      	ldr	r3, [pc, #72]	@ (80105a8 <_vfiprintf_r+0x228>)
 801055e:	a904      	add	r1, sp, #16
 8010560:	4630      	mov	r0, r6
 8010562:	f7fc fb71 	bl	800cc48 <_printf_float>
 8010566:	4607      	mov	r7, r0
 8010568:	1c78      	adds	r0, r7, #1
 801056a:	d1d6      	bne.n	801051a <_vfiprintf_r+0x19a>
 801056c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801056e:	07d9      	lsls	r1, r3, #31
 8010570:	d405      	bmi.n	801057e <_vfiprintf_r+0x1fe>
 8010572:	89ab      	ldrh	r3, [r5, #12]
 8010574:	059a      	lsls	r2, r3, #22
 8010576:	d402      	bmi.n	801057e <_vfiprintf_r+0x1fe>
 8010578:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801057a:	f7fd fae1 	bl	800db40 <__retarget_lock_release_recursive>
 801057e:	89ab      	ldrh	r3, [r5, #12]
 8010580:	065b      	lsls	r3, r3, #25
 8010582:	f53f af1f 	bmi.w	80103c4 <_vfiprintf_r+0x44>
 8010586:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010588:	e71e      	b.n	80103c8 <_vfiprintf_r+0x48>
 801058a:	ab03      	add	r3, sp, #12
 801058c:	9300      	str	r3, [sp, #0]
 801058e:	462a      	mov	r2, r5
 8010590:	4b05      	ldr	r3, [pc, #20]	@ (80105a8 <_vfiprintf_r+0x228>)
 8010592:	a904      	add	r1, sp, #16
 8010594:	4630      	mov	r0, r6
 8010596:	f7fc fdef 	bl	800d178 <_printf_i>
 801059a:	e7e4      	b.n	8010566 <_vfiprintf_r+0x1e6>
 801059c:	080114c6 	.word	0x080114c6
 80105a0:	080114d0 	.word	0x080114d0
 80105a4:	0800cc49 	.word	0x0800cc49
 80105a8:	0801035b 	.word	0x0801035b
 80105ac:	080114cc 	.word	0x080114cc

080105b0 <__sflush_r>:
 80105b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80105b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105b8:	0716      	lsls	r6, r2, #28
 80105ba:	4605      	mov	r5, r0
 80105bc:	460c      	mov	r4, r1
 80105be:	d454      	bmi.n	801066a <__sflush_r+0xba>
 80105c0:	684b      	ldr	r3, [r1, #4]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	dc02      	bgt.n	80105cc <__sflush_r+0x1c>
 80105c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	dd48      	ble.n	801065e <__sflush_r+0xae>
 80105cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80105ce:	2e00      	cmp	r6, #0
 80105d0:	d045      	beq.n	801065e <__sflush_r+0xae>
 80105d2:	2300      	movs	r3, #0
 80105d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80105d8:	682f      	ldr	r7, [r5, #0]
 80105da:	6a21      	ldr	r1, [r4, #32]
 80105dc:	602b      	str	r3, [r5, #0]
 80105de:	d030      	beq.n	8010642 <__sflush_r+0x92>
 80105e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80105e2:	89a3      	ldrh	r3, [r4, #12]
 80105e4:	0759      	lsls	r1, r3, #29
 80105e6:	d505      	bpl.n	80105f4 <__sflush_r+0x44>
 80105e8:	6863      	ldr	r3, [r4, #4]
 80105ea:	1ad2      	subs	r2, r2, r3
 80105ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80105ee:	b10b      	cbz	r3, 80105f4 <__sflush_r+0x44>
 80105f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80105f2:	1ad2      	subs	r2, r2, r3
 80105f4:	2300      	movs	r3, #0
 80105f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80105f8:	6a21      	ldr	r1, [r4, #32]
 80105fa:	4628      	mov	r0, r5
 80105fc:	47b0      	blx	r6
 80105fe:	1c43      	adds	r3, r0, #1
 8010600:	89a3      	ldrh	r3, [r4, #12]
 8010602:	d106      	bne.n	8010612 <__sflush_r+0x62>
 8010604:	6829      	ldr	r1, [r5, #0]
 8010606:	291d      	cmp	r1, #29
 8010608:	d82b      	bhi.n	8010662 <__sflush_r+0xb2>
 801060a:	4a2a      	ldr	r2, [pc, #168]	@ (80106b4 <__sflush_r+0x104>)
 801060c:	40ca      	lsrs	r2, r1
 801060e:	07d6      	lsls	r6, r2, #31
 8010610:	d527      	bpl.n	8010662 <__sflush_r+0xb2>
 8010612:	2200      	movs	r2, #0
 8010614:	6062      	str	r2, [r4, #4]
 8010616:	04d9      	lsls	r1, r3, #19
 8010618:	6922      	ldr	r2, [r4, #16]
 801061a:	6022      	str	r2, [r4, #0]
 801061c:	d504      	bpl.n	8010628 <__sflush_r+0x78>
 801061e:	1c42      	adds	r2, r0, #1
 8010620:	d101      	bne.n	8010626 <__sflush_r+0x76>
 8010622:	682b      	ldr	r3, [r5, #0]
 8010624:	b903      	cbnz	r3, 8010628 <__sflush_r+0x78>
 8010626:	6560      	str	r0, [r4, #84]	@ 0x54
 8010628:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801062a:	602f      	str	r7, [r5, #0]
 801062c:	b1b9      	cbz	r1, 801065e <__sflush_r+0xae>
 801062e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010632:	4299      	cmp	r1, r3
 8010634:	d002      	beq.n	801063c <__sflush_r+0x8c>
 8010636:	4628      	mov	r0, r5
 8010638:	f7fe f8f2 	bl	800e820 <_free_r>
 801063c:	2300      	movs	r3, #0
 801063e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010640:	e00d      	b.n	801065e <__sflush_r+0xae>
 8010642:	2301      	movs	r3, #1
 8010644:	4628      	mov	r0, r5
 8010646:	47b0      	blx	r6
 8010648:	4602      	mov	r2, r0
 801064a:	1c50      	adds	r0, r2, #1
 801064c:	d1c9      	bne.n	80105e2 <__sflush_r+0x32>
 801064e:	682b      	ldr	r3, [r5, #0]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d0c6      	beq.n	80105e2 <__sflush_r+0x32>
 8010654:	2b1d      	cmp	r3, #29
 8010656:	d001      	beq.n	801065c <__sflush_r+0xac>
 8010658:	2b16      	cmp	r3, #22
 801065a:	d11e      	bne.n	801069a <__sflush_r+0xea>
 801065c:	602f      	str	r7, [r5, #0]
 801065e:	2000      	movs	r0, #0
 8010660:	e022      	b.n	80106a8 <__sflush_r+0xf8>
 8010662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010666:	b21b      	sxth	r3, r3
 8010668:	e01b      	b.n	80106a2 <__sflush_r+0xf2>
 801066a:	690f      	ldr	r7, [r1, #16]
 801066c:	2f00      	cmp	r7, #0
 801066e:	d0f6      	beq.n	801065e <__sflush_r+0xae>
 8010670:	0793      	lsls	r3, r2, #30
 8010672:	680e      	ldr	r6, [r1, #0]
 8010674:	bf08      	it	eq
 8010676:	694b      	ldreq	r3, [r1, #20]
 8010678:	600f      	str	r7, [r1, #0]
 801067a:	bf18      	it	ne
 801067c:	2300      	movne	r3, #0
 801067e:	eba6 0807 	sub.w	r8, r6, r7
 8010682:	608b      	str	r3, [r1, #8]
 8010684:	f1b8 0f00 	cmp.w	r8, #0
 8010688:	dde9      	ble.n	801065e <__sflush_r+0xae>
 801068a:	6a21      	ldr	r1, [r4, #32]
 801068c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801068e:	4643      	mov	r3, r8
 8010690:	463a      	mov	r2, r7
 8010692:	4628      	mov	r0, r5
 8010694:	47b0      	blx	r6
 8010696:	2800      	cmp	r0, #0
 8010698:	dc08      	bgt.n	80106ac <__sflush_r+0xfc>
 801069a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801069e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80106a2:	81a3      	strh	r3, [r4, #12]
 80106a4:	f04f 30ff 	mov.w	r0, #4294967295
 80106a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106ac:	4407      	add	r7, r0
 80106ae:	eba8 0800 	sub.w	r8, r8, r0
 80106b2:	e7e7      	b.n	8010684 <__sflush_r+0xd4>
 80106b4:	20400001 	.word	0x20400001

080106b8 <_fflush_r>:
 80106b8:	b538      	push	{r3, r4, r5, lr}
 80106ba:	690b      	ldr	r3, [r1, #16]
 80106bc:	4605      	mov	r5, r0
 80106be:	460c      	mov	r4, r1
 80106c0:	b913      	cbnz	r3, 80106c8 <_fflush_r+0x10>
 80106c2:	2500      	movs	r5, #0
 80106c4:	4628      	mov	r0, r5
 80106c6:	bd38      	pop	{r3, r4, r5, pc}
 80106c8:	b118      	cbz	r0, 80106d2 <_fflush_r+0x1a>
 80106ca:	6a03      	ldr	r3, [r0, #32]
 80106cc:	b90b      	cbnz	r3, 80106d2 <_fflush_r+0x1a>
 80106ce:	f7fd f90b 	bl	800d8e8 <__sinit>
 80106d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d0f3      	beq.n	80106c2 <_fflush_r+0xa>
 80106da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80106dc:	07d0      	lsls	r0, r2, #31
 80106de:	d404      	bmi.n	80106ea <_fflush_r+0x32>
 80106e0:	0599      	lsls	r1, r3, #22
 80106e2:	d402      	bmi.n	80106ea <_fflush_r+0x32>
 80106e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80106e6:	f7fd fa2a 	bl	800db3e <__retarget_lock_acquire_recursive>
 80106ea:	4628      	mov	r0, r5
 80106ec:	4621      	mov	r1, r4
 80106ee:	f7ff ff5f 	bl	80105b0 <__sflush_r>
 80106f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80106f4:	07da      	lsls	r2, r3, #31
 80106f6:	4605      	mov	r5, r0
 80106f8:	d4e4      	bmi.n	80106c4 <_fflush_r+0xc>
 80106fa:	89a3      	ldrh	r3, [r4, #12]
 80106fc:	059b      	lsls	r3, r3, #22
 80106fe:	d4e1      	bmi.n	80106c4 <_fflush_r+0xc>
 8010700:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010702:	f7fd fa1d 	bl	800db40 <__retarget_lock_release_recursive>
 8010706:	e7dd      	b.n	80106c4 <_fflush_r+0xc>

08010708 <__swbuf_r>:
 8010708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801070a:	460e      	mov	r6, r1
 801070c:	4614      	mov	r4, r2
 801070e:	4605      	mov	r5, r0
 8010710:	b118      	cbz	r0, 801071a <__swbuf_r+0x12>
 8010712:	6a03      	ldr	r3, [r0, #32]
 8010714:	b90b      	cbnz	r3, 801071a <__swbuf_r+0x12>
 8010716:	f7fd f8e7 	bl	800d8e8 <__sinit>
 801071a:	69a3      	ldr	r3, [r4, #24]
 801071c:	60a3      	str	r3, [r4, #8]
 801071e:	89a3      	ldrh	r3, [r4, #12]
 8010720:	071a      	lsls	r2, r3, #28
 8010722:	d501      	bpl.n	8010728 <__swbuf_r+0x20>
 8010724:	6923      	ldr	r3, [r4, #16]
 8010726:	b943      	cbnz	r3, 801073a <__swbuf_r+0x32>
 8010728:	4621      	mov	r1, r4
 801072a:	4628      	mov	r0, r5
 801072c:	f000 f82a 	bl	8010784 <__swsetup_r>
 8010730:	b118      	cbz	r0, 801073a <__swbuf_r+0x32>
 8010732:	f04f 37ff 	mov.w	r7, #4294967295
 8010736:	4638      	mov	r0, r7
 8010738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801073a:	6823      	ldr	r3, [r4, #0]
 801073c:	6922      	ldr	r2, [r4, #16]
 801073e:	1a98      	subs	r0, r3, r2
 8010740:	6963      	ldr	r3, [r4, #20]
 8010742:	b2f6      	uxtb	r6, r6
 8010744:	4283      	cmp	r3, r0
 8010746:	4637      	mov	r7, r6
 8010748:	dc05      	bgt.n	8010756 <__swbuf_r+0x4e>
 801074a:	4621      	mov	r1, r4
 801074c:	4628      	mov	r0, r5
 801074e:	f7ff ffb3 	bl	80106b8 <_fflush_r>
 8010752:	2800      	cmp	r0, #0
 8010754:	d1ed      	bne.n	8010732 <__swbuf_r+0x2a>
 8010756:	68a3      	ldr	r3, [r4, #8]
 8010758:	3b01      	subs	r3, #1
 801075a:	60a3      	str	r3, [r4, #8]
 801075c:	6823      	ldr	r3, [r4, #0]
 801075e:	1c5a      	adds	r2, r3, #1
 8010760:	6022      	str	r2, [r4, #0]
 8010762:	701e      	strb	r6, [r3, #0]
 8010764:	6962      	ldr	r2, [r4, #20]
 8010766:	1c43      	adds	r3, r0, #1
 8010768:	429a      	cmp	r2, r3
 801076a:	d004      	beq.n	8010776 <__swbuf_r+0x6e>
 801076c:	89a3      	ldrh	r3, [r4, #12]
 801076e:	07db      	lsls	r3, r3, #31
 8010770:	d5e1      	bpl.n	8010736 <__swbuf_r+0x2e>
 8010772:	2e0a      	cmp	r6, #10
 8010774:	d1df      	bne.n	8010736 <__swbuf_r+0x2e>
 8010776:	4621      	mov	r1, r4
 8010778:	4628      	mov	r0, r5
 801077a:	f7ff ff9d 	bl	80106b8 <_fflush_r>
 801077e:	2800      	cmp	r0, #0
 8010780:	d0d9      	beq.n	8010736 <__swbuf_r+0x2e>
 8010782:	e7d6      	b.n	8010732 <__swbuf_r+0x2a>

08010784 <__swsetup_r>:
 8010784:	b538      	push	{r3, r4, r5, lr}
 8010786:	4b29      	ldr	r3, [pc, #164]	@ (801082c <__swsetup_r+0xa8>)
 8010788:	4605      	mov	r5, r0
 801078a:	6818      	ldr	r0, [r3, #0]
 801078c:	460c      	mov	r4, r1
 801078e:	b118      	cbz	r0, 8010798 <__swsetup_r+0x14>
 8010790:	6a03      	ldr	r3, [r0, #32]
 8010792:	b90b      	cbnz	r3, 8010798 <__swsetup_r+0x14>
 8010794:	f7fd f8a8 	bl	800d8e8 <__sinit>
 8010798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801079c:	0719      	lsls	r1, r3, #28
 801079e:	d422      	bmi.n	80107e6 <__swsetup_r+0x62>
 80107a0:	06da      	lsls	r2, r3, #27
 80107a2:	d407      	bmi.n	80107b4 <__swsetup_r+0x30>
 80107a4:	2209      	movs	r2, #9
 80107a6:	602a      	str	r2, [r5, #0]
 80107a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80107ac:	81a3      	strh	r3, [r4, #12]
 80107ae:	f04f 30ff 	mov.w	r0, #4294967295
 80107b2:	e033      	b.n	801081c <__swsetup_r+0x98>
 80107b4:	0758      	lsls	r0, r3, #29
 80107b6:	d512      	bpl.n	80107de <__swsetup_r+0x5a>
 80107b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80107ba:	b141      	cbz	r1, 80107ce <__swsetup_r+0x4a>
 80107bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80107c0:	4299      	cmp	r1, r3
 80107c2:	d002      	beq.n	80107ca <__swsetup_r+0x46>
 80107c4:	4628      	mov	r0, r5
 80107c6:	f7fe f82b 	bl	800e820 <_free_r>
 80107ca:	2300      	movs	r3, #0
 80107cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80107ce:	89a3      	ldrh	r3, [r4, #12]
 80107d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80107d4:	81a3      	strh	r3, [r4, #12]
 80107d6:	2300      	movs	r3, #0
 80107d8:	6063      	str	r3, [r4, #4]
 80107da:	6923      	ldr	r3, [r4, #16]
 80107dc:	6023      	str	r3, [r4, #0]
 80107de:	89a3      	ldrh	r3, [r4, #12]
 80107e0:	f043 0308 	orr.w	r3, r3, #8
 80107e4:	81a3      	strh	r3, [r4, #12]
 80107e6:	6923      	ldr	r3, [r4, #16]
 80107e8:	b94b      	cbnz	r3, 80107fe <__swsetup_r+0x7a>
 80107ea:	89a3      	ldrh	r3, [r4, #12]
 80107ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80107f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80107f4:	d003      	beq.n	80107fe <__swsetup_r+0x7a>
 80107f6:	4621      	mov	r1, r4
 80107f8:	4628      	mov	r0, r5
 80107fa:	f000 fc3b 	bl	8011074 <__smakebuf_r>
 80107fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010802:	f013 0201 	ands.w	r2, r3, #1
 8010806:	d00a      	beq.n	801081e <__swsetup_r+0x9a>
 8010808:	2200      	movs	r2, #0
 801080a:	60a2      	str	r2, [r4, #8]
 801080c:	6962      	ldr	r2, [r4, #20]
 801080e:	4252      	negs	r2, r2
 8010810:	61a2      	str	r2, [r4, #24]
 8010812:	6922      	ldr	r2, [r4, #16]
 8010814:	b942      	cbnz	r2, 8010828 <__swsetup_r+0xa4>
 8010816:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801081a:	d1c5      	bne.n	80107a8 <__swsetup_r+0x24>
 801081c:	bd38      	pop	{r3, r4, r5, pc}
 801081e:	0799      	lsls	r1, r3, #30
 8010820:	bf58      	it	pl
 8010822:	6962      	ldrpl	r2, [r4, #20]
 8010824:	60a2      	str	r2, [r4, #8]
 8010826:	e7f4      	b.n	8010812 <__swsetup_r+0x8e>
 8010828:	2000      	movs	r0, #0
 801082a:	e7f7      	b.n	801081c <__swsetup_r+0x98>
 801082c:	20000190 	.word	0x20000190

08010830 <memmove>:
 8010830:	4288      	cmp	r0, r1
 8010832:	b510      	push	{r4, lr}
 8010834:	eb01 0402 	add.w	r4, r1, r2
 8010838:	d902      	bls.n	8010840 <memmove+0x10>
 801083a:	4284      	cmp	r4, r0
 801083c:	4623      	mov	r3, r4
 801083e:	d807      	bhi.n	8010850 <memmove+0x20>
 8010840:	1e43      	subs	r3, r0, #1
 8010842:	42a1      	cmp	r1, r4
 8010844:	d008      	beq.n	8010858 <memmove+0x28>
 8010846:	f811 2b01 	ldrb.w	r2, [r1], #1
 801084a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801084e:	e7f8      	b.n	8010842 <memmove+0x12>
 8010850:	4402      	add	r2, r0
 8010852:	4601      	mov	r1, r0
 8010854:	428a      	cmp	r2, r1
 8010856:	d100      	bne.n	801085a <memmove+0x2a>
 8010858:	bd10      	pop	{r4, pc}
 801085a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801085e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010862:	e7f7      	b.n	8010854 <memmove+0x24>

08010864 <strncmp>:
 8010864:	b510      	push	{r4, lr}
 8010866:	b16a      	cbz	r2, 8010884 <strncmp+0x20>
 8010868:	3901      	subs	r1, #1
 801086a:	1884      	adds	r4, r0, r2
 801086c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010870:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010874:	429a      	cmp	r2, r3
 8010876:	d103      	bne.n	8010880 <strncmp+0x1c>
 8010878:	42a0      	cmp	r0, r4
 801087a:	d001      	beq.n	8010880 <strncmp+0x1c>
 801087c:	2a00      	cmp	r2, #0
 801087e:	d1f5      	bne.n	801086c <strncmp+0x8>
 8010880:	1ad0      	subs	r0, r2, r3
 8010882:	bd10      	pop	{r4, pc}
 8010884:	4610      	mov	r0, r2
 8010886:	e7fc      	b.n	8010882 <strncmp+0x1e>

08010888 <_sbrk_r>:
 8010888:	b538      	push	{r3, r4, r5, lr}
 801088a:	4d06      	ldr	r5, [pc, #24]	@ (80108a4 <_sbrk_r+0x1c>)
 801088c:	2300      	movs	r3, #0
 801088e:	4604      	mov	r4, r0
 8010890:	4608      	mov	r0, r1
 8010892:	602b      	str	r3, [r5, #0]
 8010894:	f7f1 fe2a 	bl	80024ec <_sbrk>
 8010898:	1c43      	adds	r3, r0, #1
 801089a:	d102      	bne.n	80108a2 <_sbrk_r+0x1a>
 801089c:	682b      	ldr	r3, [r5, #0]
 801089e:	b103      	cbz	r3, 80108a2 <_sbrk_r+0x1a>
 80108a0:	6023      	str	r3, [r4, #0]
 80108a2:	bd38      	pop	{r3, r4, r5, pc}
 80108a4:	20002264 	.word	0x20002264

080108a8 <nan>:
 80108a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80108b0 <nan+0x8>
 80108ac:	4770      	bx	lr
 80108ae:	bf00      	nop
 80108b0:	00000000 	.word	0x00000000
 80108b4:	7ff80000 	.word	0x7ff80000

080108b8 <__assert_func>:
 80108b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80108ba:	4614      	mov	r4, r2
 80108bc:	461a      	mov	r2, r3
 80108be:	4b09      	ldr	r3, [pc, #36]	@ (80108e4 <__assert_func+0x2c>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	4605      	mov	r5, r0
 80108c4:	68d8      	ldr	r0, [r3, #12]
 80108c6:	b14c      	cbz	r4, 80108dc <__assert_func+0x24>
 80108c8:	4b07      	ldr	r3, [pc, #28]	@ (80108e8 <__assert_func+0x30>)
 80108ca:	9100      	str	r1, [sp, #0]
 80108cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80108d0:	4906      	ldr	r1, [pc, #24]	@ (80108ec <__assert_func+0x34>)
 80108d2:	462b      	mov	r3, r5
 80108d4:	f7fd f820 	bl	800d918 <fiprintf>
 80108d8:	f000 fc2a 	bl	8011130 <abort>
 80108dc:	4b04      	ldr	r3, [pc, #16]	@ (80108f0 <__assert_func+0x38>)
 80108de:	461c      	mov	r4, r3
 80108e0:	e7f3      	b.n	80108ca <__assert_func+0x12>
 80108e2:	bf00      	nop
 80108e4:	20000190 	.word	0x20000190
 80108e8:	080114df 	.word	0x080114df
 80108ec:	080114ec 	.word	0x080114ec
 80108f0:	0801151a 	.word	0x0801151a

080108f4 <_calloc_r>:
 80108f4:	b570      	push	{r4, r5, r6, lr}
 80108f6:	fba1 5402 	umull	r5, r4, r1, r2
 80108fa:	b934      	cbnz	r4, 801090a <_calloc_r+0x16>
 80108fc:	4629      	mov	r1, r5
 80108fe:	f7fe f803 	bl	800e908 <_malloc_r>
 8010902:	4606      	mov	r6, r0
 8010904:	b928      	cbnz	r0, 8010912 <_calloc_r+0x1e>
 8010906:	4630      	mov	r0, r6
 8010908:	bd70      	pop	{r4, r5, r6, pc}
 801090a:	220c      	movs	r2, #12
 801090c:	6002      	str	r2, [r0, #0]
 801090e:	2600      	movs	r6, #0
 8010910:	e7f9      	b.n	8010906 <_calloc_r+0x12>
 8010912:	462a      	mov	r2, r5
 8010914:	4621      	mov	r1, r4
 8010916:	f7fd f894 	bl	800da42 <memset>
 801091a:	e7f4      	b.n	8010906 <_calloc_r+0x12>

0801091c <rshift>:
 801091c:	6903      	ldr	r3, [r0, #16]
 801091e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010922:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010926:	ea4f 1261 	mov.w	r2, r1, asr #5
 801092a:	f100 0414 	add.w	r4, r0, #20
 801092e:	dd45      	ble.n	80109bc <rshift+0xa0>
 8010930:	f011 011f 	ands.w	r1, r1, #31
 8010934:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010938:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801093c:	d10c      	bne.n	8010958 <rshift+0x3c>
 801093e:	f100 0710 	add.w	r7, r0, #16
 8010942:	4629      	mov	r1, r5
 8010944:	42b1      	cmp	r1, r6
 8010946:	d334      	bcc.n	80109b2 <rshift+0x96>
 8010948:	1a9b      	subs	r3, r3, r2
 801094a:	009b      	lsls	r3, r3, #2
 801094c:	1eea      	subs	r2, r5, #3
 801094e:	4296      	cmp	r6, r2
 8010950:	bf38      	it	cc
 8010952:	2300      	movcc	r3, #0
 8010954:	4423      	add	r3, r4
 8010956:	e015      	b.n	8010984 <rshift+0x68>
 8010958:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801095c:	f1c1 0820 	rsb	r8, r1, #32
 8010960:	40cf      	lsrs	r7, r1
 8010962:	f105 0e04 	add.w	lr, r5, #4
 8010966:	46a1      	mov	r9, r4
 8010968:	4576      	cmp	r6, lr
 801096a:	46f4      	mov	ip, lr
 801096c:	d815      	bhi.n	801099a <rshift+0x7e>
 801096e:	1a9a      	subs	r2, r3, r2
 8010970:	0092      	lsls	r2, r2, #2
 8010972:	3a04      	subs	r2, #4
 8010974:	3501      	adds	r5, #1
 8010976:	42ae      	cmp	r6, r5
 8010978:	bf38      	it	cc
 801097a:	2200      	movcc	r2, #0
 801097c:	18a3      	adds	r3, r4, r2
 801097e:	50a7      	str	r7, [r4, r2]
 8010980:	b107      	cbz	r7, 8010984 <rshift+0x68>
 8010982:	3304      	adds	r3, #4
 8010984:	1b1a      	subs	r2, r3, r4
 8010986:	42a3      	cmp	r3, r4
 8010988:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801098c:	bf08      	it	eq
 801098e:	2300      	moveq	r3, #0
 8010990:	6102      	str	r2, [r0, #16]
 8010992:	bf08      	it	eq
 8010994:	6143      	streq	r3, [r0, #20]
 8010996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801099a:	f8dc c000 	ldr.w	ip, [ip]
 801099e:	fa0c fc08 	lsl.w	ip, ip, r8
 80109a2:	ea4c 0707 	orr.w	r7, ip, r7
 80109a6:	f849 7b04 	str.w	r7, [r9], #4
 80109aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80109ae:	40cf      	lsrs	r7, r1
 80109b0:	e7da      	b.n	8010968 <rshift+0x4c>
 80109b2:	f851 cb04 	ldr.w	ip, [r1], #4
 80109b6:	f847 cf04 	str.w	ip, [r7, #4]!
 80109ba:	e7c3      	b.n	8010944 <rshift+0x28>
 80109bc:	4623      	mov	r3, r4
 80109be:	e7e1      	b.n	8010984 <rshift+0x68>

080109c0 <__hexdig_fun>:
 80109c0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80109c4:	2b09      	cmp	r3, #9
 80109c6:	d802      	bhi.n	80109ce <__hexdig_fun+0xe>
 80109c8:	3820      	subs	r0, #32
 80109ca:	b2c0      	uxtb	r0, r0
 80109cc:	4770      	bx	lr
 80109ce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80109d2:	2b05      	cmp	r3, #5
 80109d4:	d801      	bhi.n	80109da <__hexdig_fun+0x1a>
 80109d6:	3847      	subs	r0, #71	@ 0x47
 80109d8:	e7f7      	b.n	80109ca <__hexdig_fun+0xa>
 80109da:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80109de:	2b05      	cmp	r3, #5
 80109e0:	d801      	bhi.n	80109e6 <__hexdig_fun+0x26>
 80109e2:	3827      	subs	r0, #39	@ 0x27
 80109e4:	e7f1      	b.n	80109ca <__hexdig_fun+0xa>
 80109e6:	2000      	movs	r0, #0
 80109e8:	4770      	bx	lr
	...

080109ec <__gethex>:
 80109ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109f0:	b085      	sub	sp, #20
 80109f2:	468a      	mov	sl, r1
 80109f4:	9302      	str	r3, [sp, #8]
 80109f6:	680b      	ldr	r3, [r1, #0]
 80109f8:	9001      	str	r0, [sp, #4]
 80109fa:	4690      	mov	r8, r2
 80109fc:	1c9c      	adds	r4, r3, #2
 80109fe:	46a1      	mov	r9, r4
 8010a00:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010a04:	2830      	cmp	r0, #48	@ 0x30
 8010a06:	d0fa      	beq.n	80109fe <__gethex+0x12>
 8010a08:	eba9 0303 	sub.w	r3, r9, r3
 8010a0c:	f1a3 0b02 	sub.w	fp, r3, #2
 8010a10:	f7ff ffd6 	bl	80109c0 <__hexdig_fun>
 8010a14:	4605      	mov	r5, r0
 8010a16:	2800      	cmp	r0, #0
 8010a18:	d168      	bne.n	8010aec <__gethex+0x100>
 8010a1a:	49a0      	ldr	r1, [pc, #640]	@ (8010c9c <__gethex+0x2b0>)
 8010a1c:	2201      	movs	r2, #1
 8010a1e:	4648      	mov	r0, r9
 8010a20:	f7ff ff20 	bl	8010864 <strncmp>
 8010a24:	4607      	mov	r7, r0
 8010a26:	2800      	cmp	r0, #0
 8010a28:	d167      	bne.n	8010afa <__gethex+0x10e>
 8010a2a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010a2e:	4626      	mov	r6, r4
 8010a30:	f7ff ffc6 	bl	80109c0 <__hexdig_fun>
 8010a34:	2800      	cmp	r0, #0
 8010a36:	d062      	beq.n	8010afe <__gethex+0x112>
 8010a38:	4623      	mov	r3, r4
 8010a3a:	7818      	ldrb	r0, [r3, #0]
 8010a3c:	2830      	cmp	r0, #48	@ 0x30
 8010a3e:	4699      	mov	r9, r3
 8010a40:	f103 0301 	add.w	r3, r3, #1
 8010a44:	d0f9      	beq.n	8010a3a <__gethex+0x4e>
 8010a46:	f7ff ffbb 	bl	80109c0 <__hexdig_fun>
 8010a4a:	fab0 f580 	clz	r5, r0
 8010a4e:	096d      	lsrs	r5, r5, #5
 8010a50:	f04f 0b01 	mov.w	fp, #1
 8010a54:	464a      	mov	r2, r9
 8010a56:	4616      	mov	r6, r2
 8010a58:	3201      	adds	r2, #1
 8010a5a:	7830      	ldrb	r0, [r6, #0]
 8010a5c:	f7ff ffb0 	bl	80109c0 <__hexdig_fun>
 8010a60:	2800      	cmp	r0, #0
 8010a62:	d1f8      	bne.n	8010a56 <__gethex+0x6a>
 8010a64:	498d      	ldr	r1, [pc, #564]	@ (8010c9c <__gethex+0x2b0>)
 8010a66:	2201      	movs	r2, #1
 8010a68:	4630      	mov	r0, r6
 8010a6a:	f7ff fefb 	bl	8010864 <strncmp>
 8010a6e:	2800      	cmp	r0, #0
 8010a70:	d13f      	bne.n	8010af2 <__gethex+0x106>
 8010a72:	b944      	cbnz	r4, 8010a86 <__gethex+0x9a>
 8010a74:	1c74      	adds	r4, r6, #1
 8010a76:	4622      	mov	r2, r4
 8010a78:	4616      	mov	r6, r2
 8010a7a:	3201      	adds	r2, #1
 8010a7c:	7830      	ldrb	r0, [r6, #0]
 8010a7e:	f7ff ff9f 	bl	80109c0 <__hexdig_fun>
 8010a82:	2800      	cmp	r0, #0
 8010a84:	d1f8      	bne.n	8010a78 <__gethex+0x8c>
 8010a86:	1ba4      	subs	r4, r4, r6
 8010a88:	00a7      	lsls	r7, r4, #2
 8010a8a:	7833      	ldrb	r3, [r6, #0]
 8010a8c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010a90:	2b50      	cmp	r3, #80	@ 0x50
 8010a92:	d13e      	bne.n	8010b12 <__gethex+0x126>
 8010a94:	7873      	ldrb	r3, [r6, #1]
 8010a96:	2b2b      	cmp	r3, #43	@ 0x2b
 8010a98:	d033      	beq.n	8010b02 <__gethex+0x116>
 8010a9a:	2b2d      	cmp	r3, #45	@ 0x2d
 8010a9c:	d034      	beq.n	8010b08 <__gethex+0x11c>
 8010a9e:	1c71      	adds	r1, r6, #1
 8010aa0:	2400      	movs	r4, #0
 8010aa2:	7808      	ldrb	r0, [r1, #0]
 8010aa4:	f7ff ff8c 	bl	80109c0 <__hexdig_fun>
 8010aa8:	1e43      	subs	r3, r0, #1
 8010aaa:	b2db      	uxtb	r3, r3
 8010aac:	2b18      	cmp	r3, #24
 8010aae:	d830      	bhi.n	8010b12 <__gethex+0x126>
 8010ab0:	f1a0 0210 	sub.w	r2, r0, #16
 8010ab4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010ab8:	f7ff ff82 	bl	80109c0 <__hexdig_fun>
 8010abc:	f100 3cff 	add.w	ip, r0, #4294967295
 8010ac0:	fa5f fc8c 	uxtb.w	ip, ip
 8010ac4:	f1bc 0f18 	cmp.w	ip, #24
 8010ac8:	f04f 030a 	mov.w	r3, #10
 8010acc:	d91e      	bls.n	8010b0c <__gethex+0x120>
 8010ace:	b104      	cbz	r4, 8010ad2 <__gethex+0xe6>
 8010ad0:	4252      	negs	r2, r2
 8010ad2:	4417      	add	r7, r2
 8010ad4:	f8ca 1000 	str.w	r1, [sl]
 8010ad8:	b1ed      	cbz	r5, 8010b16 <__gethex+0x12a>
 8010ada:	f1bb 0f00 	cmp.w	fp, #0
 8010ade:	bf0c      	ite	eq
 8010ae0:	2506      	moveq	r5, #6
 8010ae2:	2500      	movne	r5, #0
 8010ae4:	4628      	mov	r0, r5
 8010ae6:	b005      	add	sp, #20
 8010ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aec:	2500      	movs	r5, #0
 8010aee:	462c      	mov	r4, r5
 8010af0:	e7b0      	b.n	8010a54 <__gethex+0x68>
 8010af2:	2c00      	cmp	r4, #0
 8010af4:	d1c7      	bne.n	8010a86 <__gethex+0x9a>
 8010af6:	4627      	mov	r7, r4
 8010af8:	e7c7      	b.n	8010a8a <__gethex+0x9e>
 8010afa:	464e      	mov	r6, r9
 8010afc:	462f      	mov	r7, r5
 8010afe:	2501      	movs	r5, #1
 8010b00:	e7c3      	b.n	8010a8a <__gethex+0x9e>
 8010b02:	2400      	movs	r4, #0
 8010b04:	1cb1      	adds	r1, r6, #2
 8010b06:	e7cc      	b.n	8010aa2 <__gethex+0xb6>
 8010b08:	2401      	movs	r4, #1
 8010b0a:	e7fb      	b.n	8010b04 <__gethex+0x118>
 8010b0c:	fb03 0002 	mla	r0, r3, r2, r0
 8010b10:	e7ce      	b.n	8010ab0 <__gethex+0xc4>
 8010b12:	4631      	mov	r1, r6
 8010b14:	e7de      	b.n	8010ad4 <__gethex+0xe8>
 8010b16:	eba6 0309 	sub.w	r3, r6, r9
 8010b1a:	3b01      	subs	r3, #1
 8010b1c:	4629      	mov	r1, r5
 8010b1e:	2b07      	cmp	r3, #7
 8010b20:	dc0a      	bgt.n	8010b38 <__gethex+0x14c>
 8010b22:	9801      	ldr	r0, [sp, #4]
 8010b24:	f7fd ff7c 	bl	800ea20 <_Balloc>
 8010b28:	4604      	mov	r4, r0
 8010b2a:	b940      	cbnz	r0, 8010b3e <__gethex+0x152>
 8010b2c:	4b5c      	ldr	r3, [pc, #368]	@ (8010ca0 <__gethex+0x2b4>)
 8010b2e:	4602      	mov	r2, r0
 8010b30:	21e4      	movs	r1, #228	@ 0xe4
 8010b32:	485c      	ldr	r0, [pc, #368]	@ (8010ca4 <__gethex+0x2b8>)
 8010b34:	f7ff fec0 	bl	80108b8 <__assert_func>
 8010b38:	3101      	adds	r1, #1
 8010b3a:	105b      	asrs	r3, r3, #1
 8010b3c:	e7ef      	b.n	8010b1e <__gethex+0x132>
 8010b3e:	f100 0a14 	add.w	sl, r0, #20
 8010b42:	2300      	movs	r3, #0
 8010b44:	4655      	mov	r5, sl
 8010b46:	469b      	mov	fp, r3
 8010b48:	45b1      	cmp	r9, r6
 8010b4a:	d337      	bcc.n	8010bbc <__gethex+0x1d0>
 8010b4c:	f845 bb04 	str.w	fp, [r5], #4
 8010b50:	eba5 050a 	sub.w	r5, r5, sl
 8010b54:	10ad      	asrs	r5, r5, #2
 8010b56:	6125      	str	r5, [r4, #16]
 8010b58:	4658      	mov	r0, fp
 8010b5a:	f7fe f853 	bl	800ec04 <__hi0bits>
 8010b5e:	016d      	lsls	r5, r5, #5
 8010b60:	f8d8 6000 	ldr.w	r6, [r8]
 8010b64:	1a2d      	subs	r5, r5, r0
 8010b66:	42b5      	cmp	r5, r6
 8010b68:	dd54      	ble.n	8010c14 <__gethex+0x228>
 8010b6a:	1bad      	subs	r5, r5, r6
 8010b6c:	4629      	mov	r1, r5
 8010b6e:	4620      	mov	r0, r4
 8010b70:	f7fe fbdf 	bl	800f332 <__any_on>
 8010b74:	4681      	mov	r9, r0
 8010b76:	b178      	cbz	r0, 8010b98 <__gethex+0x1ac>
 8010b78:	1e6b      	subs	r3, r5, #1
 8010b7a:	1159      	asrs	r1, r3, #5
 8010b7c:	f003 021f 	and.w	r2, r3, #31
 8010b80:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010b84:	f04f 0901 	mov.w	r9, #1
 8010b88:	fa09 f202 	lsl.w	r2, r9, r2
 8010b8c:	420a      	tst	r2, r1
 8010b8e:	d003      	beq.n	8010b98 <__gethex+0x1ac>
 8010b90:	454b      	cmp	r3, r9
 8010b92:	dc36      	bgt.n	8010c02 <__gethex+0x216>
 8010b94:	f04f 0902 	mov.w	r9, #2
 8010b98:	4629      	mov	r1, r5
 8010b9a:	4620      	mov	r0, r4
 8010b9c:	f7ff febe 	bl	801091c <rshift>
 8010ba0:	442f      	add	r7, r5
 8010ba2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010ba6:	42bb      	cmp	r3, r7
 8010ba8:	da42      	bge.n	8010c30 <__gethex+0x244>
 8010baa:	9801      	ldr	r0, [sp, #4]
 8010bac:	4621      	mov	r1, r4
 8010bae:	f7fd ff77 	bl	800eaa0 <_Bfree>
 8010bb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	6013      	str	r3, [r2, #0]
 8010bb8:	25a3      	movs	r5, #163	@ 0xa3
 8010bba:	e793      	b.n	8010ae4 <__gethex+0xf8>
 8010bbc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010bc0:	2a2e      	cmp	r2, #46	@ 0x2e
 8010bc2:	d012      	beq.n	8010bea <__gethex+0x1fe>
 8010bc4:	2b20      	cmp	r3, #32
 8010bc6:	d104      	bne.n	8010bd2 <__gethex+0x1e6>
 8010bc8:	f845 bb04 	str.w	fp, [r5], #4
 8010bcc:	f04f 0b00 	mov.w	fp, #0
 8010bd0:	465b      	mov	r3, fp
 8010bd2:	7830      	ldrb	r0, [r6, #0]
 8010bd4:	9303      	str	r3, [sp, #12]
 8010bd6:	f7ff fef3 	bl	80109c0 <__hexdig_fun>
 8010bda:	9b03      	ldr	r3, [sp, #12]
 8010bdc:	f000 000f 	and.w	r0, r0, #15
 8010be0:	4098      	lsls	r0, r3
 8010be2:	ea4b 0b00 	orr.w	fp, fp, r0
 8010be6:	3304      	adds	r3, #4
 8010be8:	e7ae      	b.n	8010b48 <__gethex+0x15c>
 8010bea:	45b1      	cmp	r9, r6
 8010bec:	d8ea      	bhi.n	8010bc4 <__gethex+0x1d8>
 8010bee:	492b      	ldr	r1, [pc, #172]	@ (8010c9c <__gethex+0x2b0>)
 8010bf0:	9303      	str	r3, [sp, #12]
 8010bf2:	2201      	movs	r2, #1
 8010bf4:	4630      	mov	r0, r6
 8010bf6:	f7ff fe35 	bl	8010864 <strncmp>
 8010bfa:	9b03      	ldr	r3, [sp, #12]
 8010bfc:	2800      	cmp	r0, #0
 8010bfe:	d1e1      	bne.n	8010bc4 <__gethex+0x1d8>
 8010c00:	e7a2      	b.n	8010b48 <__gethex+0x15c>
 8010c02:	1ea9      	subs	r1, r5, #2
 8010c04:	4620      	mov	r0, r4
 8010c06:	f7fe fb94 	bl	800f332 <__any_on>
 8010c0a:	2800      	cmp	r0, #0
 8010c0c:	d0c2      	beq.n	8010b94 <__gethex+0x1a8>
 8010c0e:	f04f 0903 	mov.w	r9, #3
 8010c12:	e7c1      	b.n	8010b98 <__gethex+0x1ac>
 8010c14:	da09      	bge.n	8010c2a <__gethex+0x23e>
 8010c16:	1b75      	subs	r5, r6, r5
 8010c18:	4621      	mov	r1, r4
 8010c1a:	9801      	ldr	r0, [sp, #4]
 8010c1c:	462a      	mov	r2, r5
 8010c1e:	f7fe f94f 	bl	800eec0 <__lshift>
 8010c22:	1b7f      	subs	r7, r7, r5
 8010c24:	4604      	mov	r4, r0
 8010c26:	f100 0a14 	add.w	sl, r0, #20
 8010c2a:	f04f 0900 	mov.w	r9, #0
 8010c2e:	e7b8      	b.n	8010ba2 <__gethex+0x1b6>
 8010c30:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010c34:	42bd      	cmp	r5, r7
 8010c36:	dd6f      	ble.n	8010d18 <__gethex+0x32c>
 8010c38:	1bed      	subs	r5, r5, r7
 8010c3a:	42ae      	cmp	r6, r5
 8010c3c:	dc34      	bgt.n	8010ca8 <__gethex+0x2bc>
 8010c3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010c42:	2b02      	cmp	r3, #2
 8010c44:	d022      	beq.n	8010c8c <__gethex+0x2a0>
 8010c46:	2b03      	cmp	r3, #3
 8010c48:	d024      	beq.n	8010c94 <__gethex+0x2a8>
 8010c4a:	2b01      	cmp	r3, #1
 8010c4c:	d115      	bne.n	8010c7a <__gethex+0x28e>
 8010c4e:	42ae      	cmp	r6, r5
 8010c50:	d113      	bne.n	8010c7a <__gethex+0x28e>
 8010c52:	2e01      	cmp	r6, #1
 8010c54:	d10b      	bne.n	8010c6e <__gethex+0x282>
 8010c56:	9a02      	ldr	r2, [sp, #8]
 8010c58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010c5c:	6013      	str	r3, [r2, #0]
 8010c5e:	2301      	movs	r3, #1
 8010c60:	6123      	str	r3, [r4, #16]
 8010c62:	f8ca 3000 	str.w	r3, [sl]
 8010c66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c68:	2562      	movs	r5, #98	@ 0x62
 8010c6a:	601c      	str	r4, [r3, #0]
 8010c6c:	e73a      	b.n	8010ae4 <__gethex+0xf8>
 8010c6e:	1e71      	subs	r1, r6, #1
 8010c70:	4620      	mov	r0, r4
 8010c72:	f7fe fb5e 	bl	800f332 <__any_on>
 8010c76:	2800      	cmp	r0, #0
 8010c78:	d1ed      	bne.n	8010c56 <__gethex+0x26a>
 8010c7a:	9801      	ldr	r0, [sp, #4]
 8010c7c:	4621      	mov	r1, r4
 8010c7e:	f7fd ff0f 	bl	800eaa0 <_Bfree>
 8010c82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c84:	2300      	movs	r3, #0
 8010c86:	6013      	str	r3, [r2, #0]
 8010c88:	2550      	movs	r5, #80	@ 0x50
 8010c8a:	e72b      	b.n	8010ae4 <__gethex+0xf8>
 8010c8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d1f3      	bne.n	8010c7a <__gethex+0x28e>
 8010c92:	e7e0      	b.n	8010c56 <__gethex+0x26a>
 8010c94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d1dd      	bne.n	8010c56 <__gethex+0x26a>
 8010c9a:	e7ee      	b.n	8010c7a <__gethex+0x28e>
 8010c9c:	080114c4 	.word	0x080114c4
 8010ca0:	0801145a 	.word	0x0801145a
 8010ca4:	0801151b 	.word	0x0801151b
 8010ca8:	1e6f      	subs	r7, r5, #1
 8010caa:	f1b9 0f00 	cmp.w	r9, #0
 8010cae:	d130      	bne.n	8010d12 <__gethex+0x326>
 8010cb0:	b127      	cbz	r7, 8010cbc <__gethex+0x2d0>
 8010cb2:	4639      	mov	r1, r7
 8010cb4:	4620      	mov	r0, r4
 8010cb6:	f7fe fb3c 	bl	800f332 <__any_on>
 8010cba:	4681      	mov	r9, r0
 8010cbc:	117a      	asrs	r2, r7, #5
 8010cbe:	2301      	movs	r3, #1
 8010cc0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010cc4:	f007 071f 	and.w	r7, r7, #31
 8010cc8:	40bb      	lsls	r3, r7
 8010cca:	4213      	tst	r3, r2
 8010ccc:	4629      	mov	r1, r5
 8010cce:	4620      	mov	r0, r4
 8010cd0:	bf18      	it	ne
 8010cd2:	f049 0902 	orrne.w	r9, r9, #2
 8010cd6:	f7ff fe21 	bl	801091c <rshift>
 8010cda:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010cde:	1b76      	subs	r6, r6, r5
 8010ce0:	2502      	movs	r5, #2
 8010ce2:	f1b9 0f00 	cmp.w	r9, #0
 8010ce6:	d047      	beq.n	8010d78 <__gethex+0x38c>
 8010ce8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010cec:	2b02      	cmp	r3, #2
 8010cee:	d015      	beq.n	8010d1c <__gethex+0x330>
 8010cf0:	2b03      	cmp	r3, #3
 8010cf2:	d017      	beq.n	8010d24 <__gethex+0x338>
 8010cf4:	2b01      	cmp	r3, #1
 8010cf6:	d109      	bne.n	8010d0c <__gethex+0x320>
 8010cf8:	f019 0f02 	tst.w	r9, #2
 8010cfc:	d006      	beq.n	8010d0c <__gethex+0x320>
 8010cfe:	f8da 3000 	ldr.w	r3, [sl]
 8010d02:	ea49 0903 	orr.w	r9, r9, r3
 8010d06:	f019 0f01 	tst.w	r9, #1
 8010d0a:	d10e      	bne.n	8010d2a <__gethex+0x33e>
 8010d0c:	f045 0510 	orr.w	r5, r5, #16
 8010d10:	e032      	b.n	8010d78 <__gethex+0x38c>
 8010d12:	f04f 0901 	mov.w	r9, #1
 8010d16:	e7d1      	b.n	8010cbc <__gethex+0x2d0>
 8010d18:	2501      	movs	r5, #1
 8010d1a:	e7e2      	b.n	8010ce2 <__gethex+0x2f6>
 8010d1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d1e:	f1c3 0301 	rsb	r3, r3, #1
 8010d22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010d24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d0f0      	beq.n	8010d0c <__gethex+0x320>
 8010d2a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010d2e:	f104 0314 	add.w	r3, r4, #20
 8010d32:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010d36:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010d3a:	f04f 0c00 	mov.w	ip, #0
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d44:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010d48:	d01b      	beq.n	8010d82 <__gethex+0x396>
 8010d4a:	3201      	adds	r2, #1
 8010d4c:	6002      	str	r2, [r0, #0]
 8010d4e:	2d02      	cmp	r5, #2
 8010d50:	f104 0314 	add.w	r3, r4, #20
 8010d54:	d13c      	bne.n	8010dd0 <__gethex+0x3e4>
 8010d56:	f8d8 2000 	ldr.w	r2, [r8]
 8010d5a:	3a01      	subs	r2, #1
 8010d5c:	42b2      	cmp	r2, r6
 8010d5e:	d109      	bne.n	8010d74 <__gethex+0x388>
 8010d60:	1171      	asrs	r1, r6, #5
 8010d62:	2201      	movs	r2, #1
 8010d64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010d68:	f006 061f 	and.w	r6, r6, #31
 8010d6c:	fa02 f606 	lsl.w	r6, r2, r6
 8010d70:	421e      	tst	r6, r3
 8010d72:	d13a      	bne.n	8010dea <__gethex+0x3fe>
 8010d74:	f045 0520 	orr.w	r5, r5, #32
 8010d78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d7a:	601c      	str	r4, [r3, #0]
 8010d7c:	9b02      	ldr	r3, [sp, #8]
 8010d7e:	601f      	str	r7, [r3, #0]
 8010d80:	e6b0      	b.n	8010ae4 <__gethex+0xf8>
 8010d82:	4299      	cmp	r1, r3
 8010d84:	f843 cc04 	str.w	ip, [r3, #-4]
 8010d88:	d8d9      	bhi.n	8010d3e <__gethex+0x352>
 8010d8a:	68a3      	ldr	r3, [r4, #8]
 8010d8c:	459b      	cmp	fp, r3
 8010d8e:	db17      	blt.n	8010dc0 <__gethex+0x3d4>
 8010d90:	6861      	ldr	r1, [r4, #4]
 8010d92:	9801      	ldr	r0, [sp, #4]
 8010d94:	3101      	adds	r1, #1
 8010d96:	f7fd fe43 	bl	800ea20 <_Balloc>
 8010d9a:	4681      	mov	r9, r0
 8010d9c:	b918      	cbnz	r0, 8010da6 <__gethex+0x3ba>
 8010d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8010e08 <__gethex+0x41c>)
 8010da0:	4602      	mov	r2, r0
 8010da2:	2184      	movs	r1, #132	@ 0x84
 8010da4:	e6c5      	b.n	8010b32 <__gethex+0x146>
 8010da6:	6922      	ldr	r2, [r4, #16]
 8010da8:	3202      	adds	r2, #2
 8010daa:	f104 010c 	add.w	r1, r4, #12
 8010dae:	0092      	lsls	r2, r2, #2
 8010db0:	300c      	adds	r0, #12
 8010db2:	f7fc fec6 	bl	800db42 <memcpy>
 8010db6:	4621      	mov	r1, r4
 8010db8:	9801      	ldr	r0, [sp, #4]
 8010dba:	f7fd fe71 	bl	800eaa0 <_Bfree>
 8010dbe:	464c      	mov	r4, r9
 8010dc0:	6923      	ldr	r3, [r4, #16]
 8010dc2:	1c5a      	adds	r2, r3, #1
 8010dc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010dc8:	6122      	str	r2, [r4, #16]
 8010dca:	2201      	movs	r2, #1
 8010dcc:	615a      	str	r2, [r3, #20]
 8010dce:	e7be      	b.n	8010d4e <__gethex+0x362>
 8010dd0:	6922      	ldr	r2, [r4, #16]
 8010dd2:	455a      	cmp	r2, fp
 8010dd4:	dd0b      	ble.n	8010dee <__gethex+0x402>
 8010dd6:	2101      	movs	r1, #1
 8010dd8:	4620      	mov	r0, r4
 8010dda:	f7ff fd9f 	bl	801091c <rshift>
 8010dde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010de2:	3701      	adds	r7, #1
 8010de4:	42bb      	cmp	r3, r7
 8010de6:	f6ff aee0 	blt.w	8010baa <__gethex+0x1be>
 8010dea:	2501      	movs	r5, #1
 8010dec:	e7c2      	b.n	8010d74 <__gethex+0x388>
 8010dee:	f016 061f 	ands.w	r6, r6, #31
 8010df2:	d0fa      	beq.n	8010dea <__gethex+0x3fe>
 8010df4:	4453      	add	r3, sl
 8010df6:	f1c6 0620 	rsb	r6, r6, #32
 8010dfa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010dfe:	f7fd ff01 	bl	800ec04 <__hi0bits>
 8010e02:	42b0      	cmp	r0, r6
 8010e04:	dbe7      	blt.n	8010dd6 <__gethex+0x3ea>
 8010e06:	e7f0      	b.n	8010dea <__gethex+0x3fe>
 8010e08:	0801145a 	.word	0x0801145a

08010e0c <L_shift>:
 8010e0c:	f1c2 0208 	rsb	r2, r2, #8
 8010e10:	0092      	lsls	r2, r2, #2
 8010e12:	b570      	push	{r4, r5, r6, lr}
 8010e14:	f1c2 0620 	rsb	r6, r2, #32
 8010e18:	6843      	ldr	r3, [r0, #4]
 8010e1a:	6804      	ldr	r4, [r0, #0]
 8010e1c:	fa03 f506 	lsl.w	r5, r3, r6
 8010e20:	432c      	orrs	r4, r5
 8010e22:	40d3      	lsrs	r3, r2
 8010e24:	6004      	str	r4, [r0, #0]
 8010e26:	f840 3f04 	str.w	r3, [r0, #4]!
 8010e2a:	4288      	cmp	r0, r1
 8010e2c:	d3f4      	bcc.n	8010e18 <L_shift+0xc>
 8010e2e:	bd70      	pop	{r4, r5, r6, pc}

08010e30 <__match>:
 8010e30:	b530      	push	{r4, r5, lr}
 8010e32:	6803      	ldr	r3, [r0, #0]
 8010e34:	3301      	adds	r3, #1
 8010e36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e3a:	b914      	cbnz	r4, 8010e42 <__match+0x12>
 8010e3c:	6003      	str	r3, [r0, #0]
 8010e3e:	2001      	movs	r0, #1
 8010e40:	bd30      	pop	{r4, r5, pc}
 8010e42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e46:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010e4a:	2d19      	cmp	r5, #25
 8010e4c:	bf98      	it	ls
 8010e4e:	3220      	addls	r2, #32
 8010e50:	42a2      	cmp	r2, r4
 8010e52:	d0f0      	beq.n	8010e36 <__match+0x6>
 8010e54:	2000      	movs	r0, #0
 8010e56:	e7f3      	b.n	8010e40 <__match+0x10>

08010e58 <__hexnan>:
 8010e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e5c:	680b      	ldr	r3, [r1, #0]
 8010e5e:	6801      	ldr	r1, [r0, #0]
 8010e60:	115e      	asrs	r6, r3, #5
 8010e62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010e66:	f013 031f 	ands.w	r3, r3, #31
 8010e6a:	b087      	sub	sp, #28
 8010e6c:	bf18      	it	ne
 8010e6e:	3604      	addne	r6, #4
 8010e70:	2500      	movs	r5, #0
 8010e72:	1f37      	subs	r7, r6, #4
 8010e74:	4682      	mov	sl, r0
 8010e76:	4690      	mov	r8, r2
 8010e78:	9301      	str	r3, [sp, #4]
 8010e7a:	f846 5c04 	str.w	r5, [r6, #-4]
 8010e7e:	46b9      	mov	r9, r7
 8010e80:	463c      	mov	r4, r7
 8010e82:	9502      	str	r5, [sp, #8]
 8010e84:	46ab      	mov	fp, r5
 8010e86:	784a      	ldrb	r2, [r1, #1]
 8010e88:	1c4b      	adds	r3, r1, #1
 8010e8a:	9303      	str	r3, [sp, #12]
 8010e8c:	b342      	cbz	r2, 8010ee0 <__hexnan+0x88>
 8010e8e:	4610      	mov	r0, r2
 8010e90:	9105      	str	r1, [sp, #20]
 8010e92:	9204      	str	r2, [sp, #16]
 8010e94:	f7ff fd94 	bl	80109c0 <__hexdig_fun>
 8010e98:	2800      	cmp	r0, #0
 8010e9a:	d151      	bne.n	8010f40 <__hexnan+0xe8>
 8010e9c:	9a04      	ldr	r2, [sp, #16]
 8010e9e:	9905      	ldr	r1, [sp, #20]
 8010ea0:	2a20      	cmp	r2, #32
 8010ea2:	d818      	bhi.n	8010ed6 <__hexnan+0x7e>
 8010ea4:	9b02      	ldr	r3, [sp, #8]
 8010ea6:	459b      	cmp	fp, r3
 8010ea8:	dd13      	ble.n	8010ed2 <__hexnan+0x7a>
 8010eaa:	454c      	cmp	r4, r9
 8010eac:	d206      	bcs.n	8010ebc <__hexnan+0x64>
 8010eae:	2d07      	cmp	r5, #7
 8010eb0:	dc04      	bgt.n	8010ebc <__hexnan+0x64>
 8010eb2:	462a      	mov	r2, r5
 8010eb4:	4649      	mov	r1, r9
 8010eb6:	4620      	mov	r0, r4
 8010eb8:	f7ff ffa8 	bl	8010e0c <L_shift>
 8010ebc:	4544      	cmp	r4, r8
 8010ebe:	d952      	bls.n	8010f66 <__hexnan+0x10e>
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	f1a4 0904 	sub.w	r9, r4, #4
 8010ec6:	f844 3c04 	str.w	r3, [r4, #-4]
 8010eca:	f8cd b008 	str.w	fp, [sp, #8]
 8010ece:	464c      	mov	r4, r9
 8010ed0:	461d      	mov	r5, r3
 8010ed2:	9903      	ldr	r1, [sp, #12]
 8010ed4:	e7d7      	b.n	8010e86 <__hexnan+0x2e>
 8010ed6:	2a29      	cmp	r2, #41	@ 0x29
 8010ed8:	d157      	bne.n	8010f8a <__hexnan+0x132>
 8010eda:	3102      	adds	r1, #2
 8010edc:	f8ca 1000 	str.w	r1, [sl]
 8010ee0:	f1bb 0f00 	cmp.w	fp, #0
 8010ee4:	d051      	beq.n	8010f8a <__hexnan+0x132>
 8010ee6:	454c      	cmp	r4, r9
 8010ee8:	d206      	bcs.n	8010ef8 <__hexnan+0xa0>
 8010eea:	2d07      	cmp	r5, #7
 8010eec:	dc04      	bgt.n	8010ef8 <__hexnan+0xa0>
 8010eee:	462a      	mov	r2, r5
 8010ef0:	4649      	mov	r1, r9
 8010ef2:	4620      	mov	r0, r4
 8010ef4:	f7ff ff8a 	bl	8010e0c <L_shift>
 8010ef8:	4544      	cmp	r4, r8
 8010efa:	d936      	bls.n	8010f6a <__hexnan+0x112>
 8010efc:	f1a8 0204 	sub.w	r2, r8, #4
 8010f00:	4623      	mov	r3, r4
 8010f02:	f853 1b04 	ldr.w	r1, [r3], #4
 8010f06:	f842 1f04 	str.w	r1, [r2, #4]!
 8010f0a:	429f      	cmp	r7, r3
 8010f0c:	d2f9      	bcs.n	8010f02 <__hexnan+0xaa>
 8010f0e:	1b3b      	subs	r3, r7, r4
 8010f10:	f023 0303 	bic.w	r3, r3, #3
 8010f14:	3304      	adds	r3, #4
 8010f16:	3401      	adds	r4, #1
 8010f18:	3e03      	subs	r6, #3
 8010f1a:	42b4      	cmp	r4, r6
 8010f1c:	bf88      	it	hi
 8010f1e:	2304      	movhi	r3, #4
 8010f20:	4443      	add	r3, r8
 8010f22:	2200      	movs	r2, #0
 8010f24:	f843 2b04 	str.w	r2, [r3], #4
 8010f28:	429f      	cmp	r7, r3
 8010f2a:	d2fb      	bcs.n	8010f24 <__hexnan+0xcc>
 8010f2c:	683b      	ldr	r3, [r7, #0]
 8010f2e:	b91b      	cbnz	r3, 8010f38 <__hexnan+0xe0>
 8010f30:	4547      	cmp	r7, r8
 8010f32:	d128      	bne.n	8010f86 <__hexnan+0x12e>
 8010f34:	2301      	movs	r3, #1
 8010f36:	603b      	str	r3, [r7, #0]
 8010f38:	2005      	movs	r0, #5
 8010f3a:	b007      	add	sp, #28
 8010f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f40:	3501      	adds	r5, #1
 8010f42:	2d08      	cmp	r5, #8
 8010f44:	f10b 0b01 	add.w	fp, fp, #1
 8010f48:	dd06      	ble.n	8010f58 <__hexnan+0x100>
 8010f4a:	4544      	cmp	r4, r8
 8010f4c:	d9c1      	bls.n	8010ed2 <__hexnan+0x7a>
 8010f4e:	2300      	movs	r3, #0
 8010f50:	f844 3c04 	str.w	r3, [r4, #-4]
 8010f54:	2501      	movs	r5, #1
 8010f56:	3c04      	subs	r4, #4
 8010f58:	6822      	ldr	r2, [r4, #0]
 8010f5a:	f000 000f 	and.w	r0, r0, #15
 8010f5e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010f62:	6020      	str	r0, [r4, #0]
 8010f64:	e7b5      	b.n	8010ed2 <__hexnan+0x7a>
 8010f66:	2508      	movs	r5, #8
 8010f68:	e7b3      	b.n	8010ed2 <__hexnan+0x7a>
 8010f6a:	9b01      	ldr	r3, [sp, #4]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d0dd      	beq.n	8010f2c <__hexnan+0xd4>
 8010f70:	f1c3 0320 	rsb	r3, r3, #32
 8010f74:	f04f 32ff 	mov.w	r2, #4294967295
 8010f78:	40da      	lsrs	r2, r3
 8010f7a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010f7e:	4013      	ands	r3, r2
 8010f80:	f846 3c04 	str.w	r3, [r6, #-4]
 8010f84:	e7d2      	b.n	8010f2c <__hexnan+0xd4>
 8010f86:	3f04      	subs	r7, #4
 8010f88:	e7d0      	b.n	8010f2c <__hexnan+0xd4>
 8010f8a:	2004      	movs	r0, #4
 8010f8c:	e7d5      	b.n	8010f3a <__hexnan+0xe2>

08010f8e <__ascii_mbtowc>:
 8010f8e:	b082      	sub	sp, #8
 8010f90:	b901      	cbnz	r1, 8010f94 <__ascii_mbtowc+0x6>
 8010f92:	a901      	add	r1, sp, #4
 8010f94:	b142      	cbz	r2, 8010fa8 <__ascii_mbtowc+0x1a>
 8010f96:	b14b      	cbz	r3, 8010fac <__ascii_mbtowc+0x1e>
 8010f98:	7813      	ldrb	r3, [r2, #0]
 8010f9a:	600b      	str	r3, [r1, #0]
 8010f9c:	7812      	ldrb	r2, [r2, #0]
 8010f9e:	1e10      	subs	r0, r2, #0
 8010fa0:	bf18      	it	ne
 8010fa2:	2001      	movne	r0, #1
 8010fa4:	b002      	add	sp, #8
 8010fa6:	4770      	bx	lr
 8010fa8:	4610      	mov	r0, r2
 8010faa:	e7fb      	b.n	8010fa4 <__ascii_mbtowc+0x16>
 8010fac:	f06f 0001 	mvn.w	r0, #1
 8010fb0:	e7f8      	b.n	8010fa4 <__ascii_mbtowc+0x16>

08010fb2 <_realloc_r>:
 8010fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fb6:	4607      	mov	r7, r0
 8010fb8:	4614      	mov	r4, r2
 8010fba:	460d      	mov	r5, r1
 8010fbc:	b921      	cbnz	r1, 8010fc8 <_realloc_r+0x16>
 8010fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010fc2:	4611      	mov	r1, r2
 8010fc4:	f7fd bca0 	b.w	800e908 <_malloc_r>
 8010fc8:	b92a      	cbnz	r2, 8010fd6 <_realloc_r+0x24>
 8010fca:	f7fd fc29 	bl	800e820 <_free_r>
 8010fce:	4625      	mov	r5, r4
 8010fd0:	4628      	mov	r0, r5
 8010fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fd6:	f000 f8b2 	bl	801113e <_malloc_usable_size_r>
 8010fda:	4284      	cmp	r4, r0
 8010fdc:	4606      	mov	r6, r0
 8010fde:	d802      	bhi.n	8010fe6 <_realloc_r+0x34>
 8010fe0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010fe4:	d8f4      	bhi.n	8010fd0 <_realloc_r+0x1e>
 8010fe6:	4621      	mov	r1, r4
 8010fe8:	4638      	mov	r0, r7
 8010fea:	f7fd fc8d 	bl	800e908 <_malloc_r>
 8010fee:	4680      	mov	r8, r0
 8010ff0:	b908      	cbnz	r0, 8010ff6 <_realloc_r+0x44>
 8010ff2:	4645      	mov	r5, r8
 8010ff4:	e7ec      	b.n	8010fd0 <_realloc_r+0x1e>
 8010ff6:	42b4      	cmp	r4, r6
 8010ff8:	4622      	mov	r2, r4
 8010ffa:	4629      	mov	r1, r5
 8010ffc:	bf28      	it	cs
 8010ffe:	4632      	movcs	r2, r6
 8011000:	f7fc fd9f 	bl	800db42 <memcpy>
 8011004:	4629      	mov	r1, r5
 8011006:	4638      	mov	r0, r7
 8011008:	f7fd fc0a 	bl	800e820 <_free_r>
 801100c:	e7f1      	b.n	8010ff2 <_realloc_r+0x40>

0801100e <__ascii_wctomb>:
 801100e:	4603      	mov	r3, r0
 8011010:	4608      	mov	r0, r1
 8011012:	b141      	cbz	r1, 8011026 <__ascii_wctomb+0x18>
 8011014:	2aff      	cmp	r2, #255	@ 0xff
 8011016:	d904      	bls.n	8011022 <__ascii_wctomb+0x14>
 8011018:	228a      	movs	r2, #138	@ 0x8a
 801101a:	601a      	str	r2, [r3, #0]
 801101c:	f04f 30ff 	mov.w	r0, #4294967295
 8011020:	4770      	bx	lr
 8011022:	700a      	strb	r2, [r1, #0]
 8011024:	2001      	movs	r0, #1
 8011026:	4770      	bx	lr

08011028 <__swhatbuf_r>:
 8011028:	b570      	push	{r4, r5, r6, lr}
 801102a:	460c      	mov	r4, r1
 801102c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011030:	2900      	cmp	r1, #0
 8011032:	b096      	sub	sp, #88	@ 0x58
 8011034:	4615      	mov	r5, r2
 8011036:	461e      	mov	r6, r3
 8011038:	da0d      	bge.n	8011056 <__swhatbuf_r+0x2e>
 801103a:	89a3      	ldrh	r3, [r4, #12]
 801103c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011040:	f04f 0100 	mov.w	r1, #0
 8011044:	bf14      	ite	ne
 8011046:	2340      	movne	r3, #64	@ 0x40
 8011048:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801104c:	2000      	movs	r0, #0
 801104e:	6031      	str	r1, [r6, #0]
 8011050:	602b      	str	r3, [r5, #0]
 8011052:	b016      	add	sp, #88	@ 0x58
 8011054:	bd70      	pop	{r4, r5, r6, pc}
 8011056:	466a      	mov	r2, sp
 8011058:	f000 f848 	bl	80110ec <_fstat_r>
 801105c:	2800      	cmp	r0, #0
 801105e:	dbec      	blt.n	801103a <__swhatbuf_r+0x12>
 8011060:	9901      	ldr	r1, [sp, #4]
 8011062:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011066:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801106a:	4259      	negs	r1, r3
 801106c:	4159      	adcs	r1, r3
 801106e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011072:	e7eb      	b.n	801104c <__swhatbuf_r+0x24>

08011074 <__smakebuf_r>:
 8011074:	898b      	ldrh	r3, [r1, #12]
 8011076:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011078:	079d      	lsls	r5, r3, #30
 801107a:	4606      	mov	r6, r0
 801107c:	460c      	mov	r4, r1
 801107e:	d507      	bpl.n	8011090 <__smakebuf_r+0x1c>
 8011080:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011084:	6023      	str	r3, [r4, #0]
 8011086:	6123      	str	r3, [r4, #16]
 8011088:	2301      	movs	r3, #1
 801108a:	6163      	str	r3, [r4, #20]
 801108c:	b003      	add	sp, #12
 801108e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011090:	ab01      	add	r3, sp, #4
 8011092:	466a      	mov	r2, sp
 8011094:	f7ff ffc8 	bl	8011028 <__swhatbuf_r>
 8011098:	9f00      	ldr	r7, [sp, #0]
 801109a:	4605      	mov	r5, r0
 801109c:	4639      	mov	r1, r7
 801109e:	4630      	mov	r0, r6
 80110a0:	f7fd fc32 	bl	800e908 <_malloc_r>
 80110a4:	b948      	cbnz	r0, 80110ba <__smakebuf_r+0x46>
 80110a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110aa:	059a      	lsls	r2, r3, #22
 80110ac:	d4ee      	bmi.n	801108c <__smakebuf_r+0x18>
 80110ae:	f023 0303 	bic.w	r3, r3, #3
 80110b2:	f043 0302 	orr.w	r3, r3, #2
 80110b6:	81a3      	strh	r3, [r4, #12]
 80110b8:	e7e2      	b.n	8011080 <__smakebuf_r+0xc>
 80110ba:	89a3      	ldrh	r3, [r4, #12]
 80110bc:	6020      	str	r0, [r4, #0]
 80110be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80110c2:	81a3      	strh	r3, [r4, #12]
 80110c4:	9b01      	ldr	r3, [sp, #4]
 80110c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80110ca:	b15b      	cbz	r3, 80110e4 <__smakebuf_r+0x70>
 80110cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80110d0:	4630      	mov	r0, r6
 80110d2:	f000 f81d 	bl	8011110 <_isatty_r>
 80110d6:	b128      	cbz	r0, 80110e4 <__smakebuf_r+0x70>
 80110d8:	89a3      	ldrh	r3, [r4, #12]
 80110da:	f023 0303 	bic.w	r3, r3, #3
 80110de:	f043 0301 	orr.w	r3, r3, #1
 80110e2:	81a3      	strh	r3, [r4, #12]
 80110e4:	89a3      	ldrh	r3, [r4, #12]
 80110e6:	431d      	orrs	r5, r3
 80110e8:	81a5      	strh	r5, [r4, #12]
 80110ea:	e7cf      	b.n	801108c <__smakebuf_r+0x18>

080110ec <_fstat_r>:
 80110ec:	b538      	push	{r3, r4, r5, lr}
 80110ee:	4d07      	ldr	r5, [pc, #28]	@ (801110c <_fstat_r+0x20>)
 80110f0:	2300      	movs	r3, #0
 80110f2:	4604      	mov	r4, r0
 80110f4:	4608      	mov	r0, r1
 80110f6:	4611      	mov	r1, r2
 80110f8:	602b      	str	r3, [r5, #0]
 80110fa:	f7f1 f9cf 	bl	800249c <_fstat>
 80110fe:	1c43      	adds	r3, r0, #1
 8011100:	d102      	bne.n	8011108 <_fstat_r+0x1c>
 8011102:	682b      	ldr	r3, [r5, #0]
 8011104:	b103      	cbz	r3, 8011108 <_fstat_r+0x1c>
 8011106:	6023      	str	r3, [r4, #0]
 8011108:	bd38      	pop	{r3, r4, r5, pc}
 801110a:	bf00      	nop
 801110c:	20002264 	.word	0x20002264

08011110 <_isatty_r>:
 8011110:	b538      	push	{r3, r4, r5, lr}
 8011112:	4d06      	ldr	r5, [pc, #24]	@ (801112c <_isatty_r+0x1c>)
 8011114:	2300      	movs	r3, #0
 8011116:	4604      	mov	r4, r0
 8011118:	4608      	mov	r0, r1
 801111a:	602b      	str	r3, [r5, #0]
 801111c:	f7f1 f9ce 	bl	80024bc <_isatty>
 8011120:	1c43      	adds	r3, r0, #1
 8011122:	d102      	bne.n	801112a <_isatty_r+0x1a>
 8011124:	682b      	ldr	r3, [r5, #0]
 8011126:	b103      	cbz	r3, 801112a <_isatty_r+0x1a>
 8011128:	6023      	str	r3, [r4, #0]
 801112a:	bd38      	pop	{r3, r4, r5, pc}
 801112c:	20002264 	.word	0x20002264

08011130 <abort>:
 8011130:	b508      	push	{r3, lr}
 8011132:	2006      	movs	r0, #6
 8011134:	f000 f834 	bl	80111a0 <raise>
 8011138:	2001      	movs	r0, #1
 801113a:	f7f1 f95f 	bl	80023fc <_exit>

0801113e <_malloc_usable_size_r>:
 801113e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011142:	1f18      	subs	r0, r3, #4
 8011144:	2b00      	cmp	r3, #0
 8011146:	bfbc      	itt	lt
 8011148:	580b      	ldrlt	r3, [r1, r0]
 801114a:	18c0      	addlt	r0, r0, r3
 801114c:	4770      	bx	lr

0801114e <_raise_r>:
 801114e:	291f      	cmp	r1, #31
 8011150:	b538      	push	{r3, r4, r5, lr}
 8011152:	4605      	mov	r5, r0
 8011154:	460c      	mov	r4, r1
 8011156:	d904      	bls.n	8011162 <_raise_r+0x14>
 8011158:	2316      	movs	r3, #22
 801115a:	6003      	str	r3, [r0, #0]
 801115c:	f04f 30ff 	mov.w	r0, #4294967295
 8011160:	bd38      	pop	{r3, r4, r5, pc}
 8011162:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011164:	b112      	cbz	r2, 801116c <_raise_r+0x1e>
 8011166:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801116a:	b94b      	cbnz	r3, 8011180 <_raise_r+0x32>
 801116c:	4628      	mov	r0, r5
 801116e:	f000 f831 	bl	80111d4 <_getpid_r>
 8011172:	4622      	mov	r2, r4
 8011174:	4601      	mov	r1, r0
 8011176:	4628      	mov	r0, r5
 8011178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801117c:	f000 b818 	b.w	80111b0 <_kill_r>
 8011180:	2b01      	cmp	r3, #1
 8011182:	d00a      	beq.n	801119a <_raise_r+0x4c>
 8011184:	1c59      	adds	r1, r3, #1
 8011186:	d103      	bne.n	8011190 <_raise_r+0x42>
 8011188:	2316      	movs	r3, #22
 801118a:	6003      	str	r3, [r0, #0]
 801118c:	2001      	movs	r0, #1
 801118e:	e7e7      	b.n	8011160 <_raise_r+0x12>
 8011190:	2100      	movs	r1, #0
 8011192:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011196:	4620      	mov	r0, r4
 8011198:	4798      	blx	r3
 801119a:	2000      	movs	r0, #0
 801119c:	e7e0      	b.n	8011160 <_raise_r+0x12>
	...

080111a0 <raise>:
 80111a0:	4b02      	ldr	r3, [pc, #8]	@ (80111ac <raise+0xc>)
 80111a2:	4601      	mov	r1, r0
 80111a4:	6818      	ldr	r0, [r3, #0]
 80111a6:	f7ff bfd2 	b.w	801114e <_raise_r>
 80111aa:	bf00      	nop
 80111ac:	20000190 	.word	0x20000190

080111b0 <_kill_r>:
 80111b0:	b538      	push	{r3, r4, r5, lr}
 80111b2:	4d07      	ldr	r5, [pc, #28]	@ (80111d0 <_kill_r+0x20>)
 80111b4:	2300      	movs	r3, #0
 80111b6:	4604      	mov	r4, r0
 80111b8:	4608      	mov	r0, r1
 80111ba:	4611      	mov	r1, r2
 80111bc:	602b      	str	r3, [r5, #0]
 80111be:	f7f1 f90d 	bl	80023dc <_kill>
 80111c2:	1c43      	adds	r3, r0, #1
 80111c4:	d102      	bne.n	80111cc <_kill_r+0x1c>
 80111c6:	682b      	ldr	r3, [r5, #0]
 80111c8:	b103      	cbz	r3, 80111cc <_kill_r+0x1c>
 80111ca:	6023      	str	r3, [r4, #0]
 80111cc:	bd38      	pop	{r3, r4, r5, pc}
 80111ce:	bf00      	nop
 80111d0:	20002264 	.word	0x20002264

080111d4 <_getpid_r>:
 80111d4:	f7f1 b8fa 	b.w	80023cc <_getpid>

080111d8 <_init>:
 80111d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111da:	bf00      	nop
 80111dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111de:	bc08      	pop	{r3}
 80111e0:	469e      	mov	lr, r3
 80111e2:	4770      	bx	lr

080111e4 <_fini>:
 80111e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111e6:	bf00      	nop
 80111e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111ea:	bc08      	pop	{r3}
 80111ec:	469e      	mov	lr, r3
 80111ee:	4770      	bx	lr
