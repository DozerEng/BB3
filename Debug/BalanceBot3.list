
BalanceBot3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000117dc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  080119c0  080119c0  000219c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011ea0  08011ea0  0003034c  2**0
                  CONTENTS
  4 .ARM          00000008  08011ea0  08011ea0  00021ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011ea8  08011ea8  0003034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011ea8  08011ea8  00021ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011eac  08011eac  00021eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  08011eb0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f38  2000034c  080121fc  0003034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  20002284  080121fc  00032284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 12 .comment      00000086  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000239fe  00000000  00000000  00030402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049fa  00000000  00000000  00053e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e10  00000000  00000000  00058800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001726  00000000  00000000  0005a610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006e2b  00000000  00000000  0005bd36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024eb8  00000000  00000000  00062b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2dca  00000000  00000000  00087a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009600  00000000  00000000  0017a7e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00183de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000034c 	.word	0x2000034c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080119a4 	.word	0x080119a4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000350 	.word	0x20000350
 800021c:	080119a4 	.word	0x080119a4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001040:	b5b0      	push	{r4, r5, r7, lr}
 8001042:	b0e6      	sub	sp, #408	; 0x198
 8001044:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001046:	f001 fb40 	bl	80026ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104a:	f000 f903 	bl	8001254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104e:	f000 fcd9 	bl	8001a04 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001052:	f000 fb1d 	bl	8001690 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001056:	f000 fc3d 	bl	80018d4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800105a:	f000 fc87 	bl	800196c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800105e:	f000 fa37 	bl	80014d0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001062:	f000 fa73 	bl	800154c <MX_TIM1_Init>
  MX_TIM8_Init();
 8001066:	f000 fb7d 	bl	8001764 <MX_TIM8_Init>
  MX_FDCAN1_Init();
 800106a:	f000 f9a5 	bl	80013b8 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800106e:	f000 f9e9 	bl	8001444 <MX_FDCAN2_Init>
  MX_ADC2_Init();
 8001072:	f000 f93b 	bl	80012ec <MX_ADC2_Init>
  MX_USB_Device_Init();
 8001076:	f00b fbc3 	bl	800c800 <MX_USB_Device_Init>


  /*
   *  Servo motors
   */
  servo_t servo1 = Servo_newMG90S(&htim1, TIM_CHANNEL_2);
 800107a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800107e:	2204      	movs	r2, #4
 8001080:	496c      	ldr	r1, [pc, #432]	; (8001234 <main+0x1f4>)
 8001082:	4618      	mov	r0, r3
 8001084:	f000 fd74 	bl	8001b70 <Servo_newMG90S>
  servo_t servo2 = Servo_newMG90S(&htim1, TIM_CHANNEL_1);
 8001088:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800108c:	2200      	movs	r2, #0
 800108e:	4969      	ldr	r1, [pc, #420]	; (8001234 <main+0x1f4>)
 8001090:	4618      	mov	r0, r3
 8001092:	f000 fd6d 	bl	8001b70 <Servo_newMG90S>
  servo_t servo3 = Servo_newMG90S(&htim8, TIM_CHANNEL_4);
 8001096:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800109a:	220c      	movs	r2, #12
 800109c:	4966      	ldr	r1, [pc, #408]	; (8001238 <main+0x1f8>)
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 fd66 	bl	8001b70 <Servo_newMG90S>
  servo_t servo4 = Servo_newMG90S(&htim8, TIM_CHANNEL_3);
 80010a4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80010a8:	2208      	movs	r2, #8
 80010aa:	4963      	ldr	r1, [pc, #396]	; (8001238 <main+0x1f8>)
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 fd5f 	bl	8001b70 <Servo_newMG90S>
  servo_t servo5 = Servo_newMG90S(&htim8, TIM_CHANNEL_2);
 80010b2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80010b6:	2204      	movs	r2, #4
 80010b8:	495f      	ldr	r1, [pc, #380]	; (8001238 <main+0x1f8>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 fd58 	bl	8001b70 <Servo_newMG90S>
  servo_t servo6 = Servo_newMG90S(&htim8, TIM_CHANNEL_1);
 80010c0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80010c4:	2200      	movs	r2, #0
 80010c6:	495c      	ldr	r1, [pc, #368]	; (8001238 <main+0x1f8>)
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 fd51 	bl	8001b70 <Servo_newMG90S>

  /**
   *  RGB LEDs
   */
  rgb_t rgb1 = {
 80010ce:	4b5b      	ldr	r3, [pc, #364]	; (800123c <main+0x1fc>)
 80010d0:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 80010d4:	461d      	mov	r5, r3
 80010d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	.b_pin = LED1_B_Pin,
	.b_port = LED1_B_GPIO_Port,
	.currentState = RGB_OFF,
	.activeState = 1
  };
  rgb_t rgb2 = {
 80010e2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80010e6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80010ea:	4a55      	ldr	r2, [pc, #340]	; (8001240 <main+0x200>)
 80010ec:	461c      	mov	r4, r3
 80010ee:	4615      	mov	r5, r2
 80010f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    };

  /**
   * Stepper motor drivers
   */
  tmc2209_t rightMotor = tmc2209_new(
 80010fc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001100:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 8001104:	2301      	movs	r3, #1
 8001106:	9302      	str	r3, [sp, #8]
 8001108:	4b4e      	ldr	r3, [pc, #312]	; (8001244 <main+0x204>)
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2301      	movs	r3, #1
 8001114:	2204      	movs	r2, #4
 8001116:	494c      	ldr	r1, [pc, #304]	; (8001248 <main+0x208>)
 8001118:	f001 f982 	bl	8002420 <tmc2209_new>
		  TIM_CHANNEL_2,
		  RIGHT_DIR_Pin,
		  RIGHT_DIR_GPIO_Port,
		  &huart1,
		  TMC2209_ADDR_1);
  tmc2209_t leftMotor = tmc2209_new(
 800111c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001120:	f5a3 70c4 	sub.w	r0, r3, #392	; 0x188
 8001124:	2302      	movs	r3, #2
 8001126:	9302      	str	r3, [sp, #8]
 8001128:	4b46      	ldr	r3, [pc, #280]	; (8001244 <main+0x204>)
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2340      	movs	r3, #64	; 0x40
 8001134:	2200      	movs	r2, #0
 8001136:	4944      	ldr	r1, [pc, #272]	; (8001248 <main+0x208>)
 8001138:	f001 f972 	bl	8002420 <tmc2209_new>
  /*
   * Amber Status LEDs
   * 	- One LED toggles every iteration of the while loop
   * 	- The other toggles every i_MAX loops
   */
  HAL_GPIO_WritePin(STATUS_LED1_GPIO_Port, STATUS_LED1_Pin, 0);
 800113c:	2200      	movs	r2, #0
 800113e:	2104      	movs	r1, #4
 8001140:	4842      	ldr	r0, [pc, #264]	; (800124c <main+0x20c>)
 8001142:	f002 ff75 	bl	8004030 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STATUS_LED2_GPIO_Port, STATUS_LED2_Pin, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2108      	movs	r1, #8
 800114a:	4840      	ldr	r0, [pc, #256]	; (800124c <main+0x20c>)
 800114c:	f002 ff70 	bl	8004030 <HAL_GPIO_WritePin>
  uint8_t i = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
  uint8_t i_MAX = 100;
 8001156:	2364      	movs	r3, #100	; 0x64
 8001158:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186

  // Delay to wait for USB to be ready
  // TODO wait until USB is ready for transmission, Note: CDC_Transit_FS returns success or failure
  HAL_Delay(250);
 800115c:	20fa      	movs	r0, #250	; 0xfa
 800115e:	f001 fb25 	bl	80027ac <HAL_Delay>
	   */
	  ///* Enable/Disable
	  // Use buttons to test functions
	  // Check buttons
	  uint8_t topPB, botPB, midPB;
	  topPB = HAL_GPIO_ReadPin(TOP_PB_GPIO_Port, TOP_PB_Pin);
 8001162:	2102      	movs	r1, #2
 8001164:	483a      	ldr	r0, [pc, #232]	; (8001250 <main+0x210>)
 8001166:	f002 ff4b 	bl	8004000 <HAL_GPIO_ReadPin>
 800116a:	4603      	mov	r3, r0
 800116c:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	  midPB = HAL_GPIO_ReadPin(MID_PB_GPIO_Port, MID_PB_Pin);
 8001170:	2104      	movs	r1, #4
 8001172:	4837      	ldr	r0, [pc, #220]	; (8001250 <main+0x210>)
 8001174:	f002 ff44 	bl	8004000 <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
	  botPB = HAL_GPIO_ReadPin(BOT_PB_GPIO_Port, BOT_PB_Pin);
 800117e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001182:	4833      	ldr	r0, [pc, #204]	; (8001250 <main+0x210>)
 8001184:	f002 ff3c 	bl	8004000 <HAL_GPIO_ReadPin>
 8001188:	4603      	mov	r3, r0
 800118a:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183

	  if (topPB == PB_PRESSED)
 800118e:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 8001192:	2b00      	cmp	r3, #0
 8001194:	d10c      	bne.n	80011b0 <main+0x170>
//		  uint8_t status;
////		  status = HAL_UART_Transmit(&huart2, msg, 6, 10);
//		  HAL_UART_Transmit(&huart1, msg, 6, 10);


		  tmc2209_on(&rightMotor);
 8001196:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800119a:	4618      	mov	r0, r3
 800119c:	f001 fa10 	bl	80025c0 <tmc2209_on>





		  while(HAL_GPIO_ReadPin(TOP_PB_GPIO_Port, TOP_PB_Pin) == PB_PRESSED);
 80011a0:	bf00      	nop
 80011a2:	2102      	movs	r1, #2
 80011a4:	482a      	ldr	r0, [pc, #168]	; (8001250 <main+0x210>)
 80011a6:	f002 ff2b 	bl	8004000 <HAL_GPIO_ReadPin>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0f8      	beq.n	80011a2 <main+0x162>
	  }
	  if (midPB == PB_PRESSED)
 80011b0:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d10b      	bne.n	80011d0 <main+0x190>
//		  uint8_t status;
//		  status = HAL_UART_Transmit(&huart2, &data, 4, 10);
//		  HAL_UART_Transmit(&huart1, msg, 6, 10);


		  tmc2209_on(&leftMotor);
 80011b8:	463b      	mov	r3, r7
 80011ba:	4618      	mov	r0, r3
 80011bc:	f001 fa00 	bl	80025c0 <tmc2209_on>



		  while(HAL_GPIO_ReadPin(MID_PB_GPIO_Port, MID_PB_Pin) == PB_PRESSED);
 80011c0:	bf00      	nop
 80011c2:	2104      	movs	r1, #4
 80011c4:	4822      	ldr	r0, [pc, #136]	; (8001250 <main+0x210>)
 80011c6:	f002 ff1b 	bl	8004000 <HAL_GPIO_ReadPin>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0f8      	beq.n	80011c2 <main+0x182>
	  }
	  if (botPB == PB_PRESSED)
 80011d0:	f897 3183 	ldrb.w	r3, [r7, #387]	; 0x183
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d111      	bne.n	80011fc <main+0x1bc>
//		  char msg[] = {0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00};
//		  uint8_t status;
//		  status = HAL_UART_Transmit(&huart2, msg, 18, 10);
//		  HAL_UART_Transmit(&huart1, msg, 18, 10);

		  tmc2209_off(&leftMotor);
 80011d8:	463b      	mov	r3, r7
 80011da:	4618      	mov	r0, r3
 80011dc:	f001 f9e0 	bl	80025a0 <tmc2209_off>
		  tmc2209_off(&rightMotor);
 80011e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011e4:	4618      	mov	r0, r3
 80011e6:	f001 f9db 	bl	80025a0 <tmc2209_off>



		  while(HAL_GPIO_ReadPin(BOT_PB_GPIO_Port, BOT_PB_Pin) == PB_PRESSED);
 80011ea:	bf00      	nop
 80011ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011f0:	4817      	ldr	r0, [pc, #92]	; (8001250 <main+0x210>)
 80011f2:	f002 ff05 	bl	8004000 <HAL_GPIO_ReadPin>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0f7      	beq.n	80011ec <main+0x1ac>

	  */ // EO EEZYBOTARM MK2


	  // Toggle system LEDs ever i_MAX iterations
	  if( i < i_MAX) {
 80011fc:	f897 2187 	ldrb.w	r2, [r7, #391]	; 0x187
 8001200:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8001204:	429a      	cmp	r2, r3
 8001206:	d205      	bcs.n	8001214 <main+0x1d4>
		  i++;
 8001208:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800120c:	3301      	adds	r3, #1
 800120e:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8001212:	e006      	b.n	8001222 <main+0x1e2>
	  } else {
		  i = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
		  HAL_GPIO_TogglePin(STATUS_LED2_GPIO_Port, STATUS_LED2_Pin);
 800121a:	2108      	movs	r1, #8
 800121c:	480b      	ldr	r0, [pc, #44]	; (800124c <main+0x20c>)
 800121e:	f002 ff1f 	bl	8004060 <HAL_GPIO_TogglePin>
	  }
	  // Toggle the other system LED every iteration
	  HAL_GPIO_TogglePin(STATUS_LED1_GPIO_Port, STATUS_LED1_Pin);
 8001222:	2104      	movs	r1, #4
 8001224:	4809      	ldr	r0, [pc, #36]	; (800124c <main+0x20c>)
 8001226:	f002 ff1b 	bl	8004060 <HAL_GPIO_TogglePin>
	  HAL_Delay(WAIT_ms);
 800122a:	2001      	movs	r0, #1
 800122c:	f001 fabe 	bl	80027ac <HAL_Delay>
  {
 8001230:	e797      	b.n	8001162 <main+0x122>
 8001232:	bf00      	nop
 8001234:	20000500 	.word	0x20000500
 8001238:	20000598 	.word	0x20000598
 800123c:	080119c0 	.word	0x080119c0
 8001240:	080119dc 	.word	0x080119dc
 8001244:	200005e4 	.word	0x200005e4
 8001248:	2000054c 	.word	0x2000054c
 800124c:	48000800 	.word	0x48000800
 8001250:	48000400 	.word	0x48000400

08001254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b094      	sub	sp, #80	; 0x50
 8001258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125a:	f107 0318 	add.w	r3, r7, #24
 800125e:	2238      	movs	r2, #56	; 0x38
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f00c ff73 	bl	800e14e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001276:	2000      	movs	r0, #0
 8001278:	f004 fc40 	bl	8005afc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800127c:	2321      	movs	r3, #33	; 0x21
 800127e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001280:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001284:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001286:	2301      	movs	r3, #1
 8001288:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128a:	2302      	movs	r3, #2
 800128c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800128e:	2303      	movs	r3, #3
 8001290:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV12;
 8001292:	230c      	movs	r3, #12
 8001294:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001296:	2355      	movs	r3, #85	; 0x55
 8001298:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800129a:	2302      	movs	r3, #2
 800129c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800129e:	2302      	movs	r3, #2
 80012a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012a2:	2302      	movs	r3, #2
 80012a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a6:	f107 0318 	add.w	r3, r7, #24
 80012aa:	4618      	mov	r0, r3
 80012ac:	f004 fcca 	bl	8005c44 <HAL_RCC_OscConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80012b6:	f000 fc55 	bl	8001b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ba:	230f      	movs	r3, #15
 80012bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012be:	2303      	movs	r3, #3
 80012c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	2104      	movs	r1, #4
 80012d2:	4618      	mov	r0, r3
 80012d4:	f004 ffce 	bl	8006274 <HAL_RCC_ClockConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80012de:	f000 fc41 	bl	8001b64 <Error_Handler>
  }
}
 80012e2:	bf00      	nop
 80012e4:	3750      	adds	r7, #80	; 0x50
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012f2:	463b      	mov	r3, r7
 80012f4:	2220      	movs	r2, #32
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f00c ff28 	bl	800e14e <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80012fe:	4b2b      	ldr	r3, [pc, #172]	; (80013ac <MX_ADC2_Init+0xc0>)
 8001300:	4a2b      	ldr	r2, [pc, #172]	; (80013b0 <MX_ADC2_Init+0xc4>)
 8001302:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001304:	4b29      	ldr	r3, [pc, #164]	; (80013ac <MX_ADC2_Init+0xc0>)
 8001306:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800130a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800130c:	4b27      	ldr	r3, [pc, #156]	; (80013ac <MX_ADC2_Init+0xc0>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001312:	4b26      	ldr	r3, [pc, #152]	; (80013ac <MX_ADC2_Init+0xc0>)
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001318:	4b24      	ldr	r3, [pc, #144]	; (80013ac <MX_ADC2_Init+0xc0>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800131e:	4b23      	ldr	r3, [pc, #140]	; (80013ac <MX_ADC2_Init+0xc0>)
 8001320:	2200      	movs	r2, #0
 8001322:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <MX_ADC2_Init+0xc0>)
 8001326:	2204      	movs	r2, #4
 8001328:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <MX_ADC2_Init+0xc0>)
 800132c:	2200      	movs	r2, #0
 800132e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <MX_ADC2_Init+0xc0>)
 8001332:	2200      	movs	r2, #0
 8001334:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001336:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <MX_ADC2_Init+0xc0>)
 8001338:	2201      	movs	r2, #1
 800133a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <MX_ADC2_Init+0xc0>)
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <MX_ADC2_Init+0xc0>)
 8001346:	2200      	movs	r2, #0
 8001348:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <MX_ADC2_Init+0xc0>)
 800134c:	2200      	movs	r2, #0
 800134e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001350:	4b16      	ldr	r3, [pc, #88]	; (80013ac <MX_ADC2_Init+0xc0>)
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_ADC2_Init+0xc0>)
 800135a:	2200      	movs	r2, #0
 800135c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <MX_ADC2_Init+0xc0>)
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001366:	4811      	ldr	r0, [pc, #68]	; (80013ac <MX_ADC2_Init+0xc0>)
 8001368:	f001 fc1c 	bl	8002ba4 <HAL_ADC_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001372:	f000 fbf7 	bl	8001b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001376:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <MX_ADC2_Init+0xc8>)
 8001378:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800137a:	2306      	movs	r3, #6
 800137c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001382:	237f      	movs	r3, #127	; 0x7f
 8001384:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001386:	2304      	movs	r3, #4
 8001388:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800138e:	463b      	mov	r3, r7
 8001390:	4619      	mov	r1, r3
 8001392:	4806      	ldr	r0, [pc, #24]	; (80013ac <MX_ADC2_Init+0xc0>)
 8001394:	f001 fdba 	bl	8002f0c <HAL_ADC_ConfigChannel>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800139e:	f000 fbe1 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	3720      	adds	r7, #32
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000368 	.word	0x20000368
 80013b0:	50000100 	.word	0x50000100
 80013b4:	10c00010 	.word	0x10c00010

080013b8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <MX_FDCAN1_Init+0x84>)
 80013be:	4a20      	ldr	r2, [pc, #128]	; (8001440 <MX_FDCAN1_Init+0x88>)
 80013c0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80013c2:	4b1e      	ldr	r3, [pc, #120]	; (800143c <MX_FDCAN1_Init+0x84>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80013c8:	4b1c      	ldr	r3, [pc, #112]	; (800143c <MX_FDCAN1_Init+0x84>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80013ce:	4b1b      	ldr	r3, [pc, #108]	; (800143c <MX_FDCAN1_Init+0x84>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <MX_FDCAN1_Init+0x84>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80013da:	4b18      	ldr	r3, [pc, #96]	; (800143c <MX_FDCAN1_Init+0x84>)
 80013dc:	2200      	movs	r2, #0
 80013de:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <MX_FDCAN1_Init+0x84>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <MX_FDCAN1_Init+0x84>)
 80013e8:	2210      	movs	r2, #16
 80013ea:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <MX_FDCAN1_Init+0x84>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80013f2:	4b12      	ldr	r3, [pc, #72]	; (800143c <MX_FDCAN1_Init+0x84>)
 80013f4:	2202      	movs	r2, #2
 80013f6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80013f8:	4b10      	ldr	r3, [pc, #64]	; (800143c <MX_FDCAN1_Init+0x84>)
 80013fa:	2202      	movs	r2, #2
 80013fc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80013fe:	4b0f      	ldr	r3, [pc, #60]	; (800143c <MX_FDCAN1_Init+0x84>)
 8001400:	2201      	movs	r2, #1
 8001402:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001404:	4b0d      	ldr	r3, [pc, #52]	; (800143c <MX_FDCAN1_Init+0x84>)
 8001406:	2201      	movs	r2, #1
 8001408:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <MX_FDCAN1_Init+0x84>)
 800140c:	2201      	movs	r2, #1
 800140e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001410:	4b0a      	ldr	r3, [pc, #40]	; (800143c <MX_FDCAN1_Init+0x84>)
 8001412:	2201      	movs	r2, #1
 8001414:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_FDCAN1_Init+0x84>)
 8001418:	2200      	movs	r2, #0
 800141a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <MX_FDCAN1_Init+0x84>)
 800141e:	2200      	movs	r2, #0
 8001420:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <MX_FDCAN1_Init+0x84>)
 8001424:	2200      	movs	r2, #0
 8001426:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001428:	4804      	ldr	r0, [pc, #16]	; (800143c <MX_FDCAN1_Init+0x84>)
 800142a:	f002 faab 	bl	8003984 <HAL_FDCAN_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001434:	f000 fb96 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	200003d4 	.word	0x200003d4
 8001440:	40006400 	.word	0x40006400

08001444 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001448:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <MX_FDCAN2_Init+0x84>)
 800144a:	4a20      	ldr	r2, [pc, #128]	; (80014cc <MX_FDCAN2_Init+0x88>)
 800144c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800144e:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <MX_FDCAN2_Init+0x84>)
 8001450:	2200      	movs	r2, #0
 8001452:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001454:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <MX_FDCAN2_Init+0x84>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800145a:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <MX_FDCAN2_Init+0x84>)
 800145c:	2200      	movs	r2, #0
 800145e:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <MX_FDCAN2_Init+0x84>)
 8001462:	2200      	movs	r2, #0
 8001464:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <MX_FDCAN2_Init+0x84>)
 8001468:	2200      	movs	r2, #0
 800146a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <MX_FDCAN2_Init+0x84>)
 800146e:	2200      	movs	r2, #0
 8001470:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <MX_FDCAN2_Init+0x84>)
 8001474:	2210      	movs	r2, #16
 8001476:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <MX_FDCAN2_Init+0x84>)
 800147a:	2201      	movs	r2, #1
 800147c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <MX_FDCAN2_Init+0x84>)
 8001480:	2202      	movs	r2, #2
 8001482:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <MX_FDCAN2_Init+0x84>)
 8001486:	2202      	movs	r2, #2
 8001488:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <MX_FDCAN2_Init+0x84>)
 800148c:	2201      	movs	r2, #1
 800148e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <MX_FDCAN2_Init+0x84>)
 8001492:	2201      	movs	r2, #1
 8001494:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MX_FDCAN2_Init+0x84>)
 8001498:	2201      	movs	r2, #1
 800149a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <MX_FDCAN2_Init+0x84>)
 800149e:	2201      	movs	r2, #1
 80014a0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_FDCAN2_Init+0x84>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <MX_FDCAN2_Init+0x84>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_FDCAN2_Init+0x84>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80014b4:	4804      	ldr	r0, [pc, #16]	; (80014c8 <MX_FDCAN2_Init+0x84>)
 80014b6:	f002 fa65 	bl	8003984 <HAL_FDCAN_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 80014c0:	f000 fb50 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000438 	.word	0x20000438
 80014cc:	40006800 	.word	0x40006800

080014d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <MX_SPI2_Init+0x74>)
 80014d6:	4a1c      	ldr	r2, [pc, #112]	; (8001548 <MX_SPI2_Init+0x78>)
 80014d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <MX_SPI2_Init+0x74>)
 80014dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <MX_SPI2_Init+0x74>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014e8:	4b16      	ldr	r3, [pc, #88]	; (8001544 <MX_SPI2_Init+0x74>)
 80014ea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014ee:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <MX_SPI2_Init+0x74>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <MX_SPI2_Init+0x74>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_SPI2_Init+0x74>)
 80014fe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001502:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <MX_SPI2_Init+0x74>)
 8001506:	2208      	movs	r2, #8
 8001508:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <MX_SPI2_Init+0x74>)
 800150c:	2200      	movs	r2, #0
 800150e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <MX_SPI2_Init+0x74>)
 8001512:	2200      	movs	r2, #0
 8001514:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <MX_SPI2_Init+0x74>)
 8001518:	2200      	movs	r2, #0
 800151a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <MX_SPI2_Init+0x74>)
 800151e:	2207      	movs	r2, #7
 8001520:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <MX_SPI2_Init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <MX_SPI2_Init+0x74>)
 800152a:	2208      	movs	r2, #8
 800152c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_SPI2_Init+0x74>)
 8001530:	f005 faf8 	bl	8006b24 <HAL_SPI_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800153a:	f000 fb13 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	2000049c 	.word	0x2000049c
 8001548:	40003800 	.word	0x40003800

0800154c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b098      	sub	sp, #96	; 0x60
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001552:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800155e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	611a      	str	r2, [r3, #16]
 800156e:	615a      	str	r2, [r3, #20]
 8001570:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	2234      	movs	r2, #52	; 0x34
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f00c fde8 	bl	800e14e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800157e:	4b42      	ldr	r3, [pc, #264]	; (8001688 <MX_TIM1_Init+0x13c>)
 8001580:	4a42      	ldr	r2, [pc, #264]	; (800168c <MX_TIM1_Init+0x140>)
 8001582:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8001584:	4b40      	ldr	r3, [pc, #256]	; (8001688 <MX_TIM1_Init+0x13c>)
 8001586:	2254      	movs	r2, #84	; 0x54
 8001588:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158a:	4b3f      	ldr	r3, [pc, #252]	; (8001688 <MX_TIM1_Init+0x13c>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39999;
 8001590:	4b3d      	ldr	r3, [pc, #244]	; (8001688 <MX_TIM1_Init+0x13c>)
 8001592:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001596:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001598:	4b3b      	ldr	r3, [pc, #236]	; (8001688 <MX_TIM1_Init+0x13c>)
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800159e:	4b3a      	ldr	r3, [pc, #232]	; (8001688 <MX_TIM1_Init+0x13c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a4:	4b38      	ldr	r3, [pc, #224]	; (8001688 <MX_TIM1_Init+0x13c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015aa:	4837      	ldr	r0, [pc, #220]	; (8001688 <MX_TIM1_Init+0x13c>)
 80015ac:	f005 fb65 	bl	8006c7a <HAL_TIM_PWM_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80015b6:	f000 fad5 	bl	8001b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ba:	2300      	movs	r3, #0
 80015bc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015ca:	4619      	mov	r1, r3
 80015cc:	482e      	ldr	r0, [pc, #184]	; (8001688 <MX_TIM1_Init+0x13c>)
 80015ce:	f006 fa55 	bl	8007a7c <HAL_TIMEx_MasterConfigSynchronization>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80015d8:	f000 fac4 	bl	8001b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015dc:	2360      	movs	r3, #96	; 0x60
 80015de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 200;
 80015e0:	23c8      	movs	r3, #200	; 0xc8
 80015e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e4:	2300      	movs	r3, #0
 80015e6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015e8:	2300      	movs	r3, #0
 80015ea:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015f0:	2300      	movs	r3, #0
 80015f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015f4:	2300      	movs	r3, #0
 80015f6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015fc:	2200      	movs	r2, #0
 80015fe:	4619      	mov	r1, r3
 8001600:	4821      	ldr	r0, [pc, #132]	; (8001688 <MX_TIM1_Init+0x13c>)
 8001602:	f005 fd39 	bl	8007078 <HAL_TIM_PWM_ConfigChannel>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800160c:	f000 faaa 	bl	8001b64 <Error_Handler>
  }
  sConfigOC.Pulse = 150;
 8001610:	2396      	movs	r3, #150	; 0x96
 8001612:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001614:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001618:	2204      	movs	r2, #4
 800161a:	4619      	mov	r1, r3
 800161c:	481a      	ldr	r0, [pc, #104]	; (8001688 <MX_TIM1_Init+0x13c>)
 800161e:	f005 fd2b 	bl	8007078 <HAL_TIM_PWM_ConfigChannel>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 8001628:	f000 fa9c 	bl	8001b64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001640:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001644:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001652:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800165c:	2300      	movs	r3, #0
 800165e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	4619      	mov	r1, r3
 8001668:	4807      	ldr	r0, [pc, #28]	; (8001688 <MX_TIM1_Init+0x13c>)
 800166a:	f006 fa95 	bl	8007b98 <HAL_TIMEx_ConfigBreakDeadTime>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001674:	f000 fa76 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001678:	4803      	ldr	r0, [pc, #12]	; (8001688 <MX_TIM1_Init+0x13c>)
 800167a:	f000 fcab 	bl	8001fd4 <HAL_TIM_MspPostInit>

}
 800167e:	bf00      	nop
 8001680:	3760      	adds	r7, #96	; 0x60
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000500 	.word	0x20000500
 800168c:	40012c00 	.word	0x40012c00

08001690 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016a2:	463b      	mov	r3, r7
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
 80016b0:	615a      	str	r2, [r3, #20]
 80016b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016b4:	4b2a      	ldr	r3, [pc, #168]	; (8001760 <MX_TIM2_Init+0xd0>)
 80016b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8499;
 80016bc:	4b28      	ldr	r3, [pc, #160]	; (8001760 <MX_TIM2_Init+0xd0>)
 80016be:	f242 1233 	movw	r2, #8499	; 0x2133
 80016c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c4:	4b26      	ldr	r3, [pc, #152]	; (8001760 <MX_TIM2_Init+0xd0>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80016ca:	4b25      	ldr	r3, [pc, #148]	; (8001760 <MX_TIM2_Init+0xd0>)
 80016cc:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80016d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d2:	4b23      	ldr	r3, [pc, #140]	; (8001760 <MX_TIM2_Init+0xd0>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d8:	4b21      	ldr	r3, [pc, #132]	; (8001760 <MX_TIM2_Init+0xd0>)
 80016da:	2200      	movs	r2, #0
 80016dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016de:	4820      	ldr	r0, [pc, #128]	; (8001760 <MX_TIM2_Init+0xd0>)
 80016e0:	f005 facb 	bl	8006c7a <HAL_TIM_PWM_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 80016ea:	f000 fa3b 	bl	8001b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016f6:	f107 031c 	add.w	r3, r7, #28
 80016fa:	4619      	mov	r1, r3
 80016fc:	4818      	ldr	r0, [pc, #96]	; (8001760 <MX_TIM2_Init+0xd0>)
 80016fe:	f006 f9bd 	bl	8007a7c <HAL_TIMEx_MasterConfigSynchronization>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001708:	f000 fa2c 	bl	8001b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800170c:	2360      	movs	r3, #96	; 0x60
 800170e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 999;
 8001710:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001714:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800171e:	463b      	mov	r3, r7
 8001720:	2200      	movs	r2, #0
 8001722:	4619      	mov	r1, r3
 8001724:	480e      	ldr	r0, [pc, #56]	; (8001760 <MX_TIM2_Init+0xd0>)
 8001726:	f005 fca7 	bl	8007078 <HAL_TIM_PWM_ConfigChannel>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001730:	f000 fa18 	bl	8001b64 <Error_Handler>
  }
  sConfigOC.Pulse = 9999;
 8001734:	f242 730f 	movw	r3, #9999	; 0x270f
 8001738:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800173a:	463b      	mov	r3, r7
 800173c:	2204      	movs	r2, #4
 800173e:	4619      	mov	r1, r3
 8001740:	4807      	ldr	r0, [pc, #28]	; (8001760 <MX_TIM2_Init+0xd0>)
 8001742:	f005 fc99 	bl	8007078 <HAL_TIM_PWM_ConfigChannel>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 800174c:	f000 fa0a 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001750:	4803      	ldr	r0, [pc, #12]	; (8001760 <MX_TIM2_Init+0xd0>)
 8001752:	f000 fc3f 	bl	8001fd4 <HAL_TIM_MspPostInit>

}
 8001756:	bf00      	nop
 8001758:	3728      	adds	r7, #40	; 0x28
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	2000054c 	.word	0x2000054c

08001764 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b098      	sub	sp, #96	; 0x60
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800176a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001776:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	611a      	str	r2, [r3, #16]
 8001786:	615a      	str	r2, [r3, #20]
 8001788:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	2234      	movs	r2, #52	; 0x34
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f00c fcdc 	bl	800e14e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001796:	4b4d      	ldr	r3, [pc, #308]	; (80018cc <MX_TIM8_Init+0x168>)
 8001798:	4a4d      	ldr	r2, [pc, #308]	; (80018d0 <MX_TIM8_Init+0x16c>)
 800179a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 84;
 800179c:	4b4b      	ldr	r3, [pc, #300]	; (80018cc <MX_TIM8_Init+0x168>)
 800179e:	2254      	movs	r2, #84	; 0x54
 80017a0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a2:	4b4a      	ldr	r3, [pc, #296]	; (80018cc <MX_TIM8_Init+0x168>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 39999;
 80017a8:	4b48      	ldr	r3, [pc, #288]	; (80018cc <MX_TIM8_Init+0x168>)
 80017aa:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80017ae:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b0:	4b46      	ldr	r3, [pc, #280]	; (80018cc <MX_TIM8_Init+0x168>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80017b6:	4b45      	ldr	r3, [pc, #276]	; (80018cc <MX_TIM8_Init+0x168>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017bc:	4b43      	ldr	r3, [pc, #268]	; (80018cc <MX_TIM8_Init+0x168>)
 80017be:	2200      	movs	r2, #0
 80017c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80017c2:	4842      	ldr	r0, [pc, #264]	; (80018cc <MX_TIM8_Init+0x168>)
 80017c4:	f005 fa59 	bl	8006c7a <HAL_TIM_PWM_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80017ce:	f000 f9c9 	bl	8001b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017d6:	2300      	movs	r3, #0
 80017d8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80017de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017e2:	4619      	mov	r1, r3
 80017e4:	4839      	ldr	r0, [pc, #228]	; (80018cc <MX_TIM8_Init+0x168>)
 80017e6:	f006 f949 	bl	8007a7c <HAL_TIMEx_MasterConfigSynchronization>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80017f0:	f000 f9b8 	bl	8001b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017f4:	2360      	movs	r3, #96	; 0x60
 80017f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 150;
 80017f8:	2396      	movs	r3, #150	; 0x96
 80017fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017fc:	2300      	movs	r3, #0
 80017fe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001800:	2300      	movs	r3, #0
 8001802:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001808:	2300      	movs	r3, #0
 800180a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800180c:	2300      	movs	r3, #0
 800180e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001810:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001814:	2200      	movs	r2, #0
 8001816:	4619      	mov	r1, r3
 8001818:	482c      	ldr	r0, [pc, #176]	; (80018cc <MX_TIM8_Init+0x168>)
 800181a:	f005 fc2d 	bl	8007078 <HAL_TIM_PWM_ConfigChannel>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001824:	f000 f99e 	bl	8001b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001828:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800182c:	2204      	movs	r2, #4
 800182e:	4619      	mov	r1, r3
 8001830:	4826      	ldr	r0, [pc, #152]	; (80018cc <MX_TIM8_Init+0x168>)
 8001832:	f005 fc21 	bl	8007078 <HAL_TIM_PWM_ConfigChannel>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 800183c:	f000 f992 	bl	8001b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001840:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001844:	2208      	movs	r2, #8
 8001846:	4619      	mov	r1, r3
 8001848:	4820      	ldr	r0, [pc, #128]	; (80018cc <MX_TIM8_Init+0x168>)
 800184a:	f005 fc15 	bl	8007078 <HAL_TIM_PWM_ConfigChannel>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8001854:	f000 f986 	bl	8001b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001858:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800185c:	220c      	movs	r2, #12
 800185e:	4619      	mov	r1, r3
 8001860:	481a      	ldr	r0, [pc, #104]	; (80018cc <MX_TIM8_Init+0x168>)
 8001862:	f005 fc09 	bl	8007078 <HAL_TIM_PWM_ConfigChannel>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 800186c:	f000 f97a 	bl	8001b64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001888:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001896:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80018a0:	2300      	movs	r3, #0
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	4619      	mov	r1, r3
 80018ac:	4807      	ldr	r0, [pc, #28]	; (80018cc <MX_TIM8_Init+0x168>)
 80018ae:	f006 f973 	bl	8007b98 <HAL_TIMEx_ConfigBreakDeadTime>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM8_Init+0x158>
  {
    Error_Handler();
 80018b8:	f000 f954 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80018bc:	4803      	ldr	r0, [pc, #12]	; (80018cc <MX_TIM8_Init+0x168>)
 80018be:	f000 fb89 	bl	8001fd4 <HAL_TIM_MspPostInit>

}
 80018c2:	bf00      	nop
 80018c4:	3760      	adds	r7, #96	; 0x60
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000598 	.word	0x20000598
 80018d0:	40013400 	.word	0x40013400

080018d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018d8:	4b22      	ldr	r3, [pc, #136]	; (8001964 <MX_USART1_UART_Init+0x90>)
 80018da:	4a23      	ldr	r2, [pc, #140]	; (8001968 <MX_USART1_UART_Init+0x94>)
 80018dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018de:	4b21      	ldr	r3, [pc, #132]	; (8001964 <MX_USART1_UART_Init+0x90>)
 80018e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018e6:	4b1f      	ldr	r3, [pc, #124]	; (8001964 <MX_USART1_UART_Init+0x90>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018ec:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <MX_USART1_UART_Init+0x90>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018f2:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <MX_USART1_UART_Init+0x90>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018f8:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <MX_USART1_UART_Init+0x90>)
 80018fa:	220c      	movs	r2, #12
 80018fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fe:	4b19      	ldr	r3, [pc, #100]	; (8001964 <MX_USART1_UART_Init+0x90>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001904:	4b17      	ldr	r3, [pc, #92]	; (8001964 <MX_USART1_UART_Init+0x90>)
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800190a:	4b16      	ldr	r3, [pc, #88]	; (8001964 <MX_USART1_UART_Init+0x90>)
 800190c:	2200      	movs	r2, #0
 800190e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001910:	4b14      	ldr	r3, [pc, #80]	; (8001964 <MX_USART1_UART_Init+0x90>)
 8001912:	2200      	movs	r2, #0
 8001914:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001916:	4b13      	ldr	r3, [pc, #76]	; (8001964 <MX_USART1_UART_Init+0x90>)
 8001918:	2200      	movs	r2, #0
 800191a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800191c:	4811      	ldr	r0, [pc, #68]	; (8001964 <MX_USART1_UART_Init+0x90>)
 800191e:	f006 f9ed 	bl	8007cfc <HAL_UART_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001928:	f000 f91c 	bl	8001b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800192c:	2100      	movs	r1, #0
 800192e:	480d      	ldr	r0, [pc, #52]	; (8001964 <MX_USART1_UART_Init+0x90>)
 8001930:	f006 ffb4 	bl	800889c <HAL_UARTEx_SetTxFifoThreshold>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800193a:	f000 f913 	bl	8001b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800193e:	2100      	movs	r1, #0
 8001940:	4808      	ldr	r0, [pc, #32]	; (8001964 <MX_USART1_UART_Init+0x90>)
 8001942:	f006 ffe9 	bl	8008918 <HAL_UARTEx_SetRxFifoThreshold>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800194c:	f000 f90a 	bl	8001b64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001950:	4804      	ldr	r0, [pc, #16]	; (8001964 <MX_USART1_UART_Init+0x90>)
 8001952:	f006 ff6a 	bl	800882a <HAL_UARTEx_DisableFifoMode>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800195c:	f000 f902 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}
 8001964:	200005e4 	.word	0x200005e4
 8001968:	40013800 	.word	0x40013800

0800196c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001970:	4b22      	ldr	r3, [pc, #136]	; (80019fc <MX_USART2_UART_Init+0x90>)
 8001972:	4a23      	ldr	r2, [pc, #140]	; (8001a00 <MX_USART2_UART_Init+0x94>)
 8001974:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001976:	4b21      	ldr	r3, [pc, #132]	; (80019fc <MX_USART2_UART_Init+0x90>)
 8001978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800197c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800197e:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <MX_USART2_UART_Init+0x90>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001984:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <MX_USART2_UART_Init+0x90>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800198a:	4b1c      	ldr	r3, [pc, #112]	; (80019fc <MX_USART2_UART_Init+0x90>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001990:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <MX_USART2_UART_Init+0x90>)
 8001992:	220c      	movs	r2, #12
 8001994:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001996:	4b19      	ldr	r3, [pc, #100]	; (80019fc <MX_USART2_UART_Init+0x90>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800199c:	4b17      	ldr	r3, [pc, #92]	; (80019fc <MX_USART2_UART_Init+0x90>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019a2:	4b16      	ldr	r3, [pc, #88]	; (80019fc <MX_USART2_UART_Init+0x90>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019a8:	4b14      	ldr	r3, [pc, #80]	; (80019fc <MX_USART2_UART_Init+0x90>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019ae:	4b13      	ldr	r3, [pc, #76]	; (80019fc <MX_USART2_UART_Init+0x90>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019b4:	4811      	ldr	r0, [pc, #68]	; (80019fc <MX_USART2_UART_Init+0x90>)
 80019b6:	f006 f9a1 	bl	8007cfc <HAL_UART_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80019c0:	f000 f8d0 	bl	8001b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019c4:	2100      	movs	r1, #0
 80019c6:	480d      	ldr	r0, [pc, #52]	; (80019fc <MX_USART2_UART_Init+0x90>)
 80019c8:	f006 ff68 	bl	800889c <HAL_UARTEx_SetTxFifoThreshold>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80019d2:	f000 f8c7 	bl	8001b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019d6:	2100      	movs	r1, #0
 80019d8:	4808      	ldr	r0, [pc, #32]	; (80019fc <MX_USART2_UART_Init+0x90>)
 80019da:	f006 ff9d 	bl	8008918 <HAL_UARTEx_SetRxFifoThreshold>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80019e4:	f000 f8be 	bl	8001b64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80019e8:	4804      	ldr	r0, [pc, #16]	; (80019fc <MX_USART2_UART_Init+0x90>)
 80019ea:	f006 ff1e 	bl	800882a <HAL_UARTEx_DisableFifoMode>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80019f4:	f000 f8b6 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000674 	.word	0x20000674
 8001a00:	40004400 	.word	0x40004400

08001a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08a      	sub	sp, #40	; 0x28
 8001a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0a:	f107 0314 	add.w	r3, r7, #20
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]
 8001a18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1a:	4b4e      	ldr	r3, [pc, #312]	; (8001b54 <MX_GPIO_Init+0x150>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1e:	4a4d      	ldr	r2, [pc, #308]	; (8001b54 <MX_GPIO_Init+0x150>)
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a26:	4b4b      	ldr	r3, [pc, #300]	; (8001b54 <MX_GPIO_Init+0x150>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a32:	4b48      	ldr	r3, [pc, #288]	; (8001b54 <MX_GPIO_Init+0x150>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a36:	4a47      	ldr	r2, [pc, #284]	; (8001b54 <MX_GPIO_Init+0x150>)
 8001a38:	f043 0320 	orr.w	r3, r3, #32
 8001a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a3e:	4b45      	ldr	r3, [pc, #276]	; (8001b54 <MX_GPIO_Init+0x150>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a42:	f003 0320 	and.w	r3, r3, #32
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a4a:	4b42      	ldr	r3, [pc, #264]	; (8001b54 <MX_GPIO_Init+0x150>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4e:	4a41      	ldr	r2, [pc, #260]	; (8001b54 <MX_GPIO_Init+0x150>)
 8001a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a56:	4b3f      	ldr	r3, [pc, #252]	; (8001b54 <MX_GPIO_Init+0x150>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	4b3c      	ldr	r3, [pc, #240]	; (8001b54 <MX_GPIO_Init+0x150>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	4a3b      	ldr	r2, [pc, #236]	; (8001b54 <MX_GPIO_Init+0x150>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a6e:	4b39      	ldr	r3, [pc, #228]	; (8001b54 <MX_GPIO_Init+0x150>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	4b36      	ldr	r3, [pc, #216]	; (8001b54 <MX_GPIO_Init+0x150>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	4a35      	ldr	r2, [pc, #212]	; (8001b54 <MX_GPIO_Init+0x150>)
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a86:	4b33      	ldr	r3, [pc, #204]	; (8001b54 <MX_GPIO_Init+0x150>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	603b      	str	r3, [r7, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_B_Pin|LED2_G_Pin|LED2_R_Pin|STATUS_LED1_Pin
 8001a92:	2200      	movs	r2, #0
 8001a94:	f64f 410c 	movw	r1, #64524	; 0xfc0c
 8001a98:	482f      	ldr	r0, [pc, #188]	; (8001b58 <MX_GPIO_Init+0x154>)
 8001a9a:	f002 fac9 	bl	8004030 <HAL_GPIO_WritePin>
                          |STATUS_LED2_Pin|LED1_R_Pin|LED1_G_Pin|LED1_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RIGHT_DIR_GPIO_Port, RIGHT_DIR_Pin, GPIO_PIN_RESET);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa6:	f002 fac3 	bl	8004030 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_B_Pin LED2_G_Pin LED2_R_Pin STATUS_LED1_Pin
                           STATUS_LED2_Pin LED1_R_Pin LED1_G_Pin LED1_B_Pin */
  GPIO_InitStruct.Pin = LED2_B_Pin|LED2_G_Pin|LED2_R_Pin|STATUS_LED1_Pin
 8001aaa:	f64f 430c 	movw	r3, #64524	; 0xfc0c
 8001aae:	617b      	str	r3, [r7, #20]
                          |STATUS_LED2_Pin|LED1_R_Pin|LED1_G_Pin|LED1_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4825      	ldr	r0, [pc, #148]	; (8001b58 <MX_GPIO_Init+0x154>)
 8001ac4:	f002 f91a 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : nRST_Pin */
  GPIO_InitStruct.Pin = nRST_Pin;
 8001ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nRST_GPIO_Port, &GPIO_InitStruct);
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4619      	mov	r1, r3
 8001adc:	481f      	ldr	r0, [pc, #124]	; (8001b5c <MX_GPIO_Init+0x158>)
 8001ade:	f002 f90d 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN1_FAULT_Pin FDCAN1_S_Pin */
  GPIO_InitStruct.Pin = FDCAN1_FAULT_Pin|FDCAN1_S_Pin;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4619      	mov	r1, r3
 8001af4:	4818      	ldr	r0, [pc, #96]	; (8001b58 <MX_GPIO_Init+0x154>)
 8001af6:	f002 f901 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : RIGHT_DIR_Pin */
  GPIO_InitStruct.Pin = RIGHT_DIR_Pin;
 8001afa:	2301      	movs	r3, #1
 8001afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afe:	2301      	movs	r3, #1
 8001b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	2300      	movs	r3, #0
 8001b08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RIGHT_DIR_GPIO_Port, &GPIO_InitStruct);
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b14:	f002 f8f2 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : LEFT_DIR_Pin */
  GPIO_InitStruct.Pin = LEFT_DIR_Pin;
 8001b18:	2340      	movs	r3, #64	; 0x40
 8001b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEFT_DIR_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b2e:	f002 f8e5 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_SW_Pin TOP_PB_Pin MID_PB_Pin BOT_PB_Pin
                           IMU_INTERRUPT_Pin FDCAN2_FAULT_Pin FDCAN2_S_Pin */
  GPIO_InitStruct.Pin = LIMIT_SW_Pin|TOP_PB_Pin|MID_PB_Pin|BOT_PB_Pin
 8001b32:	f640 4397 	movw	r3, #3223	; 0xc97
 8001b36:	617b      	str	r3, [r7, #20]
                          |IMU_INTERRUPT_Pin|FDCAN2_FAULT_Pin|FDCAN2_S_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4619      	mov	r1, r3
 8001b46:	4806      	ldr	r0, [pc, #24]	; (8001b60 <MX_GPIO_Init+0x15c>)
 8001b48:	f002 f8d8 	bl	8003cfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b4c:	bf00      	nop
 8001b4e:	3728      	adds	r7, #40	; 0x28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40021000 	.word	0x40021000
 8001b58:	48000800 	.word	0x48000800
 8001b5c:	48001800 	.word	0x48001800
 8001b60:	48000400 	.word	0x48000400

08001b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b68:	b672      	cpsid	i
}
 8001b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <Error_Handler+0x8>
	...

08001b70 <Servo_newMG90S>:

/**
 * Create and initialize a new MG90S servo
 */

servo_t Servo_newMG90S(TIM_HandleTypeDef *htim, uint32_t channel) {
 8001b70:	b5b0      	push	{r4, r5, r7, lr}
 8001b72:	b08c      	sub	sp, #48	; 0x30
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
	// TODO: Check for valid values
	servo_t  newServo = {
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	4b37      	ldr	r3, [pc, #220]	; (8001c68 <Servo_newMG90S+0xf8>)
 8001b8a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	4b35      	ldr	r3, [pc, #212]	; (8001c68 <Servo_newMG90S+0xf8>)
 8001b94:	e9c7 2308 	strd	r2, r3, [r7, #32]
			.tim = htim,
			.channel = channel,
			.setPoint = 0.5,
			.home = 0.5,
			// Period x Duty cycle
			.maxPulseWidth = (uint16_t)(htim->Instance->ARR * MG90S_MAX_LIMIT),
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fcd8 	bl	8000554 <__aeabi_ui2d>
 8001ba4:	a32c      	add	r3, pc, #176	; (adr r3, 8001c58 <Servo_newMG90S+0xe8>)
 8001ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001baa:	f7fe fd4d 	bl	8000648 <__aeabi_dmul>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f7ff f81f 	bl	8000bf8 <__aeabi_d2uiz>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	b29b      	uxth	r3, r3
	servo_t  newServo = {
 8001bbe:	853b      	strh	r3, [r7, #40]	; 0x28
			.minPulseWidth = (uint16_t)(htim->Instance->ARR * MG90S_MIN_LIMIT),
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fcc4 	bl	8000554 <__aeabi_ui2d>
 8001bcc:	a324      	add	r3, pc, #144	; (adr r3, 8001c60 <Servo_newMG90S+0xf0>)
 8001bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd2:	f7fe fd39 	bl	8000648 <__aeabi_dmul>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f7ff f80b 	bl	8000bf8 <__aeabi_d2uiz>
 8001be2:	4603      	mov	r3, r0
 8001be4:	b29b      	uxth	r3, r3
	servo_t  newServo = {
 8001be6:	857b      	strh	r3, [r7, #42]	; 0x2a
			.absMaxPulseWidth = (uint16_t)(htim->Instance->ARR * MG90S_MAX_LIMIT),
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fcb0 	bl	8000554 <__aeabi_ui2d>
 8001bf4:	a318      	add	r3, pc, #96	; (adr r3, 8001c58 <Servo_newMG90S+0xe8>)
 8001bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfa:	f7fe fd25 	bl	8000648 <__aeabi_dmul>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4610      	mov	r0, r2
 8001c04:	4619      	mov	r1, r3
 8001c06:	f7fe fff7 	bl	8000bf8 <__aeabi_d2uiz>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	b29b      	uxth	r3, r3
	servo_t  newServo = {
 8001c0e:	85bb      	strh	r3, [r7, #44]	; 0x2c
			.absMinPulseWidth = (uint16_t)(htim->Instance->ARR * MG90S_MIN_LIMIT)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fc9c 	bl	8000554 <__aeabi_ui2d>
 8001c1c:	a310      	add	r3, pc, #64	; (adr r3, 8001c60 <Servo_newMG90S+0xf0>)
 8001c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c22:	f7fe fd11 	bl	8000648 <__aeabi_dmul>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f7fe ffe3 	bl	8000bf8 <__aeabi_d2uiz>
 8001c32:	4603      	mov	r3, r0
 8001c34:	b29b      	uxth	r3, r3
	servo_t  newServo = {
 8001c36:	85fb      	strh	r3, [r7, #46]	; 0x2e
	};
	//Servo_start(&newServo);
	return newServo;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	461d      	mov	r5, r3
 8001c3c:	f107 0410 	add.w	r4, r7, #16
 8001c40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c44:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c48:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	3730      	adds	r7, #48	; 0x30
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bdb0      	pop	{r4, r5, r7, pc}
 8001c54:	f3af 8000 	nop.w
 8001c58:	7ced9168 	.word	0x7ced9168
 8001c5c:	3fbe353f 	.word	0x3fbe353f
 8001c60:	76c8b439 	.word	0x76c8b439
 8001c64:	3f9a9fbe 	.word	0x3f9a9fbe
 8001c68:	3fe00000 	.word	0x3fe00000

08001c6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c72:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <HAL_MspInit+0x44>)
 8001c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c76:	4a0e      	ldr	r2, [pc, #56]	; (8001cb0 <HAL_MspInit+0x44>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <HAL_MspInit+0x44>)
 8001c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_MspInit+0x44>)
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8e:	4a08      	ldr	r2, [pc, #32]	; (8001cb0 <HAL_MspInit+0x44>)
 8001c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c94:	6593      	str	r3, [r2, #88]	; 0x58
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_MspInit+0x44>)
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b09e      	sub	sp, #120	; 0x78
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	2250      	movs	r2, #80	; 0x50
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f00c fa3a 	bl	800e14e <memset>
  if(hadc->Instance==ADC2)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a1e      	ldr	r2, [pc, #120]	; (8001d58 <HAL_ADC_MspInit+0xa4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d134      	bne.n	8001d4e <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001ce4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ce8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001cea:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001cee:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f004 fcd9 	bl	80066ac <HAL_RCCEx_PeriphCLKConfig>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001d00:	f7ff ff30 	bl	8001b64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001d04:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <HAL_ADC_MspInit+0xa8>)
 8001d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d08:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <HAL_ADC_MspInit+0xa8>)
 8001d0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_ADC_MspInit+0xa8>)
 8001d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <HAL_ADC_MspInit+0xa8>)
 8001d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d20:	4a0e      	ldr	r2, [pc, #56]	; (8001d5c <HAL_ADC_MspInit+0xa8>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <HAL_ADC_MspInit+0xa8>)
 8001d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = BAT_MON_Pin;
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BAT_MON_GPIO_Port, &GPIO_InitStruct);
 8001d40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d44:	4619      	mov	r1, r3
 8001d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d4a:	f001 ffd7 	bl	8003cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001d4e:	bf00      	nop
 8001d50:	3778      	adds	r7, #120	; 0x78
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	50000100 	.word	0x50000100
 8001d5c:	40021000 	.word	0x40021000

08001d60 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b0a0      	sub	sp, #128	; 0x80
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d78:	f107 031c 	add.w	r3, r7, #28
 8001d7c:	2250      	movs	r2, #80	; 0x50
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4618      	mov	r0, r3
 8001d82:	f00c f9e4 	bl	800e14e <memset>
  if(hfdcan->Instance==FDCAN1)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a48      	ldr	r2, [pc, #288]	; (8001eac <HAL_FDCAN_MspInit+0x14c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d142      	bne.n	8001e16 <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d94:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001d96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d9a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d9c:	f107 031c 	add.w	r3, r7, #28
 8001da0:	4618      	mov	r0, r3
 8001da2:	f004 fc83 	bl	80066ac <HAL_RCCEx_PeriphCLKConfig>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001dac:	f7ff feda 	bl	8001b64 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001db0:	4b3f      	ldr	r3, [pc, #252]	; (8001eb0 <HAL_FDCAN_MspInit+0x150>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	3301      	adds	r3, #1
 8001db6:	4a3e      	ldr	r2, [pc, #248]	; (8001eb0 <HAL_FDCAN_MspInit+0x150>)
 8001db8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001dba:	4b3d      	ldr	r3, [pc, #244]	; (8001eb0 <HAL_FDCAN_MspInit+0x150>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d10b      	bne.n	8001dda <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001dc2:	4b3c      	ldr	r3, [pc, #240]	; (8001eb4 <HAL_FDCAN_MspInit+0x154>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	4a3b      	ldr	r2, [pc, #236]	; (8001eb4 <HAL_FDCAN_MspInit+0x154>)
 8001dc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dcc:	6593      	str	r3, [r2, #88]	; 0x58
 8001dce:	4b39      	ldr	r3, [pc, #228]	; (8001eb4 <HAL_FDCAN_MspInit+0x154>)
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	61bb      	str	r3, [r7, #24]
 8001dd8:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dda:	4b36      	ldr	r3, [pc, #216]	; (8001eb4 <HAL_FDCAN_MspInit+0x154>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	4a35      	ldr	r2, [pc, #212]	; (8001eb4 <HAL_FDCAN_MspInit+0x154>)
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001de6:	4b33      	ldr	r3, [pc, #204]	; (8001eb4 <HAL_FDCAN_MspInit+0x154>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001df2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001df6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	2300      	movs	r3, #0
 8001e02:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001e04:	2309      	movs	r3, #9
 8001e06:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	482a      	ldr	r0, [pc, #168]	; (8001eb8 <HAL_FDCAN_MspInit+0x158>)
 8001e10:	f001 ff74 	bl	8003cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001e14:	e045      	b.n	8001ea2 <HAL_FDCAN_MspInit+0x142>
  else if(hfdcan->Instance==FDCAN2)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a28      	ldr	r2, [pc, #160]	; (8001ebc <HAL_FDCAN_MspInit+0x15c>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d140      	bne.n	8001ea2 <HAL_FDCAN_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e24:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001e26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e2a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e2c:	f107 031c 	add.w	r3, r7, #28
 8001e30:	4618      	mov	r0, r3
 8001e32:	f004 fc3b 	bl	80066ac <HAL_RCCEx_PeriphCLKConfig>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <HAL_FDCAN_MspInit+0xe0>
      Error_Handler();
 8001e3c:	f7ff fe92 	bl	8001b64 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001e40:	4b1b      	ldr	r3, [pc, #108]	; (8001eb0 <HAL_FDCAN_MspInit+0x150>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	3301      	adds	r3, #1
 8001e46:	4a1a      	ldr	r2, [pc, #104]	; (8001eb0 <HAL_FDCAN_MspInit+0x150>)
 8001e48:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001e4a:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <HAL_FDCAN_MspInit+0x150>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d10b      	bne.n	8001e6a <HAL_FDCAN_MspInit+0x10a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e52:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <HAL_FDCAN_MspInit+0x154>)
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e56:	4a17      	ldr	r2, [pc, #92]	; (8001eb4 <HAL_FDCAN_MspInit+0x154>)
 8001e58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e5c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e5e:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <HAL_FDCAN_MspInit+0x154>)
 8001e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6a:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_FDCAN_MspInit+0x154>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6e:	4a11      	ldr	r2, [pc, #68]	; (8001eb4 <HAL_FDCAN_MspInit+0x154>)
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e76:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <HAL_FDCAN_MspInit+0x154>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e82:	2360      	movs	r3, #96	; 0x60
 8001e84:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001e92:	2309      	movs	r3, #9
 8001e94:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e96:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4806      	ldr	r0, [pc, #24]	; (8001eb8 <HAL_FDCAN_MspInit+0x158>)
 8001e9e:	f001 ff2d 	bl	8003cfc <HAL_GPIO_Init>
}
 8001ea2:	bf00      	nop
 8001ea4:	3780      	adds	r7, #128	; 0x80
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40006400 	.word	0x40006400
 8001eb0:	20000704 	.word	0x20000704
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	48000400 	.word	0x48000400
 8001ebc:	40006800 	.word	0x40006800

08001ec0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	; 0x28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a17      	ldr	r2, [pc, #92]	; (8001f3c <HAL_SPI_MspInit+0x7c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d128      	bne.n	8001f34 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ee2:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <HAL_SPI_MspInit+0x80>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	4a16      	ldr	r2, [pc, #88]	; (8001f40 <HAL_SPI_MspInit+0x80>)
 8001ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eec:	6593      	str	r3, [r2, #88]	; 0x58
 8001eee:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <HAL_SPI_MspInit+0x80>)
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efa:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <HAL_SPI_MspInit+0x80>)
 8001efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efe:	4a10      	ldr	r2, [pc, #64]	; (8001f40 <HAL_SPI_MspInit+0x80>)
 8001f00:	f043 0302 	orr.w	r3, r3, #2
 8001f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <HAL_SPI_MspInit+0x80>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001f12:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	2300      	movs	r3, #0
 8001f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f24:	2305      	movs	r3, #5
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4805      	ldr	r0, [pc, #20]	; (8001f44 <HAL_SPI_MspInit+0x84>)
 8001f30:	f001 fee4 	bl	8003cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001f34:	bf00      	nop
 8001f36:	3728      	adds	r7, #40	; 0x28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40003800 	.word	0x40003800
 8001f40:	40021000 	.word	0x40021000
 8001f44:	48000400 	.word	0x48000400

08001f48 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a1c      	ldr	r2, [pc, #112]	; (8001fc8 <HAL_TIM_PWM_MspInit+0x80>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d10c      	bne.n	8001f74 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f5a:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <HAL_TIM_PWM_MspInit+0x84>)
 8001f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f5e:	4a1b      	ldr	r2, [pc, #108]	; (8001fcc <HAL_TIM_PWM_MspInit+0x84>)
 8001f60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f64:	6613      	str	r3, [r2, #96]	; 0x60
 8001f66:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_TIM_PWM_MspInit+0x84>)
 8001f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001f72:	e022      	b.n	8001fba <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f7c:	d10c      	bne.n	8001f98 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f7e:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <HAL_TIM_PWM_MspInit+0x84>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	4a12      	ldr	r2, [pc, #72]	; (8001fcc <HAL_TIM_PWM_MspInit+0x84>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6593      	str	r3, [r2, #88]	; 0x58
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <HAL_TIM_PWM_MspInit+0x84>)
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]
}
 8001f96:	e010      	b.n	8001fba <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0c      	ldr	r2, [pc, #48]	; (8001fd0 <HAL_TIM_PWM_MspInit+0x88>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d10b      	bne.n	8001fba <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <HAL_TIM_PWM_MspInit+0x84>)
 8001fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa6:	4a09      	ldr	r2, [pc, #36]	; (8001fcc <HAL_TIM_PWM_MspInit+0x84>)
 8001fa8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fac:	6613      	str	r3, [r2, #96]	; 0x60
 8001fae:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <HAL_TIM_PWM_MspInit+0x84>)
 8001fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
}
 8001fba:	bf00      	nop
 8001fbc:	371c      	adds	r7, #28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40012c00 	.word	0x40012c00
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40013400 	.word	0x40013400

08001fd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08a      	sub	sp, #40	; 0x28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a35      	ldr	r2, [pc, #212]	; (80020c8 <HAL_TIM_MspPostInit+0xf4>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d11e      	bne.n	8002034 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff6:	4b35      	ldr	r3, [pc, #212]	; (80020cc <HAL_TIM_MspPostInit+0xf8>)
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffa:	4a34      	ldr	r2, [pc, #208]	; (80020cc <HAL_TIM_MspPostInit+0xf8>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002002:	4b32      	ldr	r3, [pc, #200]	; (80020cc <HAL_TIM_MspPostInit+0xf8>)
 8002004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM2_Pin|PWM1_Pin;
 800200e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201c:	2300      	movs	r3, #0
 800201e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002020:	2306      	movs	r3, #6
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	4619      	mov	r1, r3
 800202a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800202e:	f001 fe65 	bl	8003cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002032:	e044      	b.n	80020be <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800203c:	d11d      	bne.n	800207a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	4b23      	ldr	r3, [pc, #140]	; (80020cc <HAL_TIM_MspPostInit+0xf8>)
 8002040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002042:	4a22      	ldr	r2, [pc, #136]	; (80020cc <HAL_TIM_MspPostInit+0xf8>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800204a:	4b20      	ldr	r3, [pc, #128]	; (80020cc <HAL_TIM_MspPostInit+0xf8>)
 800204c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RIGHT_STEP_Pin|LEFT_STEP_Pin;
 8002056:	2322      	movs	r3, #34	; 0x22
 8002058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205a:	2302      	movs	r3, #2
 800205c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002062:	2300      	movs	r3, #0
 8002064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002066:	2301      	movs	r3, #1
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206a:	f107 0314 	add.w	r3, r7, #20
 800206e:	4619      	mov	r1, r3
 8002070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002074:	f001 fe42 	bl	8003cfc <HAL_GPIO_Init>
}
 8002078:	e021      	b.n	80020be <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM8)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a14      	ldr	r2, [pc, #80]	; (80020d0 <HAL_TIM_MspPostInit+0xfc>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d11c      	bne.n	80020be <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002084:	4b11      	ldr	r3, [pc, #68]	; (80020cc <HAL_TIM_MspPostInit+0xf8>)
 8002086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002088:	4a10      	ldr	r2, [pc, #64]	; (80020cc <HAL_TIM_MspPostInit+0xf8>)
 800208a:	f043 0304 	orr.w	r3, r3, #4
 800208e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002090:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <HAL_TIM_MspPostInit+0xf8>)
 8002092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM6_Pin|PWM5_Pin|PWM4_Pin|PWM3_Pin;
 800209c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80020a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a2:	2302      	movs	r3, #2
 80020a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020aa:	2300      	movs	r3, #0
 80020ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80020ae:	2304      	movs	r3, #4
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b2:	f107 0314 	add.w	r3, r7, #20
 80020b6:	4619      	mov	r1, r3
 80020b8:	4806      	ldr	r0, [pc, #24]	; (80020d4 <HAL_TIM_MspPostInit+0x100>)
 80020ba:	f001 fe1f 	bl	8003cfc <HAL_GPIO_Init>
}
 80020be:	bf00      	nop
 80020c0:	3728      	adds	r7, #40	; 0x28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40012c00 	.word	0x40012c00
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40013400 	.word	0x40013400
 80020d4:	48000800 	.word	0x48000800

080020d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b0a0      	sub	sp, #128	; 0x80
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020f0:	f107 031c 	add.w	r3, r7, #28
 80020f4:	2250      	movs	r2, #80	; 0x50
 80020f6:	2100      	movs	r1, #0
 80020f8:	4618      	mov	r0, r3
 80020fa:	f00c f828 	bl	800e14e <memset>
  if(huart->Instance==USART1)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a3d      	ldr	r2, [pc, #244]	; (80021f8 <HAL_UART_MspInit+0x120>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d136      	bne.n	8002176 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002108:	2301      	movs	r3, #1
 800210a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800210c:	2300      	movs	r3, #0
 800210e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002110:	f107 031c 	add.w	r3, r7, #28
 8002114:	4618      	mov	r0, r3
 8002116:	f004 fac9 	bl	80066ac <HAL_RCCEx_PeriphCLKConfig>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002120:	f7ff fd20 	bl	8001b64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002124:	4b35      	ldr	r3, [pc, #212]	; (80021fc <HAL_UART_MspInit+0x124>)
 8002126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002128:	4a34      	ldr	r2, [pc, #208]	; (80021fc <HAL_UART_MspInit+0x124>)
 800212a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800212e:	6613      	str	r3, [r2, #96]	; 0x60
 8002130:	4b32      	ldr	r3, [pc, #200]	; (80021fc <HAL_UART_MspInit+0x124>)
 8002132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002138:	61bb      	str	r3, [r7, #24]
 800213a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800213c:	4b2f      	ldr	r3, [pc, #188]	; (80021fc <HAL_UART_MspInit+0x124>)
 800213e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002140:	4a2e      	ldr	r2, [pc, #184]	; (80021fc <HAL_UART_MspInit+0x124>)
 8002142:	f043 0304 	orr.w	r3, r3, #4
 8002146:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002148:	4b2c      	ldr	r3, [pc, #176]	; (80021fc <HAL_UART_MspInit+0x124>)
 800214a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STEPPER_TX_Pin|STEPPER_RX_Pin;
 8002154:	2330      	movs	r3, #48	; 0x30
 8002156:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002160:	2300      	movs	r3, #0
 8002162:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002164:	2307      	movs	r3, #7
 8002166:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002168:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800216c:	4619      	mov	r1, r3
 800216e:	4824      	ldr	r0, [pc, #144]	; (8002200 <HAL_UART_MspInit+0x128>)
 8002170:	f001 fdc4 	bl	8003cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002174:	e03b      	b.n	80021ee <HAL_UART_MspInit+0x116>
  else if(huart->Instance==USART2)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a22      	ldr	r2, [pc, #136]	; (8002204 <HAL_UART_MspInit+0x12c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d136      	bne.n	80021ee <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002180:	2302      	movs	r3, #2
 8002182:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002184:	2300      	movs	r3, #0
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002188:	f107 031c 	add.w	r3, r7, #28
 800218c:	4618      	mov	r0, r3
 800218e:	f004 fa8d 	bl	80066ac <HAL_RCCEx_PeriphCLKConfig>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8002198:	f7ff fce4 	bl	8001b64 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800219c:	4b17      	ldr	r3, [pc, #92]	; (80021fc <HAL_UART_MspInit+0x124>)
 800219e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a0:	4a16      	ldr	r2, [pc, #88]	; (80021fc <HAL_UART_MspInit+0x124>)
 80021a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a6:	6593      	str	r3, [r2, #88]	; 0x58
 80021a8:	4b14      	ldr	r3, [pc, #80]	; (80021fc <HAL_UART_MspInit+0x124>)
 80021aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b4:	4b11      	ldr	r3, [pc, #68]	; (80021fc <HAL_UART_MspInit+0x124>)
 80021b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b8:	4a10      	ldr	r2, [pc, #64]	; (80021fc <HAL_UART_MspInit+0x124>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021c0:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <HAL_UART_MspInit+0x124>)
 80021c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 80021cc:	230c      	movs	r3, #12
 80021ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2300      	movs	r3, #0
 80021da:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021dc:	2307      	movs	r3, #7
 80021de:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021e4:	4619      	mov	r1, r3
 80021e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ea:	f001 fd87 	bl	8003cfc <HAL_GPIO_Init>
}
 80021ee:	bf00      	nop
 80021f0:	3780      	adds	r7, #128	; 0x80
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40013800 	.word	0x40013800
 80021fc:	40021000 	.word	0x40021000
 8002200:	48000800 	.word	0x48000800
 8002204:	40004400 	.word	0x40004400

08002208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800220c:	e7fe      	b.n	800220c <NMI_Handler+0x4>

0800220e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002212:	e7fe      	b.n	8002212 <HardFault_Handler+0x4>

08002214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002218:	e7fe      	b.n	8002218 <MemManage_Handler+0x4>

0800221a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800221e:	e7fe      	b.n	800221e <BusFault_Handler+0x4>

08002220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002224:	e7fe      	b.n	8002224 <UsageFault_Handler+0x4>

08002226 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002254:	f000 fa8c 	bl	8002770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}

0800225c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002260:	4802      	ldr	r0, [pc, #8]	; (800226c <USB_LP_IRQHandler+0x10>)
 8002262:	f002 f81e 	bl	80042a2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20001c24 	.word	0x20001c24

08002270 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return 1;
 8002274:	2301      	movs	r3, #1
}
 8002276:	4618      	mov	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <_kill>:

int _kill(int pid, int sig)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800228a:	f00b ffb3 	bl	800e1f4 <__errno>
 800228e:	4603      	mov	r3, r0
 8002290:	2216      	movs	r2, #22
 8002292:	601a      	str	r2, [r3, #0]
  return -1;
 8002294:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002298:	4618      	mov	r0, r3
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <_exit>:

void _exit (int status)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022a8:	f04f 31ff 	mov.w	r1, #4294967295
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff ffe7 	bl	8002280 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022b2:	e7fe      	b.n	80022b2 <_exit+0x12>

080022b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	e00a      	b.n	80022dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022c6:	f3af 8000 	nop.w
 80022ca:	4601      	mov	r1, r0
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	60ba      	str	r2, [r7, #8]
 80022d2:	b2ca      	uxtb	r2, r1
 80022d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	3301      	adds	r3, #1
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	dbf0      	blt.n	80022c6 <_read+0x12>
  }

  return len;
 80022e4:	687b      	ldr	r3, [r7, #4]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b086      	sub	sp, #24
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	60f8      	str	r0, [r7, #12]
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	e009      	b.n	8002314 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	60ba      	str	r2, [r7, #8]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	3301      	adds	r3, #1
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	429a      	cmp	r2, r3
 800231a:	dbf1      	blt.n	8002300 <_write+0x12>
  }
  return len;
 800231c:	687b      	ldr	r3, [r7, #4]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <_close>:

int _close(int file)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800232e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002332:	4618      	mov	r0, r3
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800234e:	605a      	str	r2, [r3, #4]
  return 0;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <_isatty>:

int _isatty(int file)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002366:	2301      	movs	r3, #1
}
 8002368:	4618      	mov	r0, r3
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
	...

08002390 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002398:	4a14      	ldr	r2, [pc, #80]	; (80023ec <_sbrk+0x5c>)
 800239a:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <_sbrk+0x60>)
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023a4:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <_sbrk+0x64>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d102      	bne.n	80023b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023ac:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <_sbrk+0x64>)
 80023ae:	4a12      	ldr	r2, [pc, #72]	; (80023f8 <_sbrk+0x68>)
 80023b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023b2:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <_sbrk+0x64>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d207      	bcs.n	80023d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023c0:	f00b ff18 	bl	800e1f4 <__errno>
 80023c4:	4603      	mov	r3, r0
 80023c6:	220c      	movs	r2, #12
 80023c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ca:	f04f 33ff 	mov.w	r3, #4294967295
 80023ce:	e009      	b.n	80023e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023d0:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <_sbrk+0x64>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023d6:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <_sbrk+0x64>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	4a05      	ldr	r2, [pc, #20]	; (80023f4 <_sbrk+0x64>)
 80023e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023e2:	68fb      	ldr	r3, [r7, #12]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	2001c000 	.word	0x2001c000
 80023f0:	00000400 	.word	0x00000400
 80023f4:	20000708 	.word	0x20000708
 80023f8:	20002288 	.word	0x20002288

080023fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <SystemInit+0x20>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002406:	4a05      	ldr	r2, [pc, #20]	; (800241c <SystemInit+0x20>)
 8002408:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800240c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <tmc2209_new>:
/**
 *
 *
 */

tmc2209_t tmc2209_new(TIM_HandleTypeDef *stepTimer, uint32_t stepTimerChannel, uint16_t dirPin, GPIO_TypeDef *dirPort, UART_HandleTypeDef *uart, uint8_t uartAddr) {
 8002420:	b580      	push	{r7, lr}
 8002422:	b09a      	sub	sp, #104	; 0x68
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
 800242c:	807b      	strh	r3, [r7, #2]
	tmc2209_t newMotor = {
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	887b      	ldrh	r3, [r7, #2]
 8002438:	833b      	strh	r3, [r7, #24]
 800243a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002440:	623b      	str	r3, [r7, #32]
 8002442:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002446:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800244a:	2300      	movs	r3, #0
 800244c:	62bb      	str	r3, [r7, #40]	; 0x28
 800244e:	2300      	movs	r3, #0
 8002450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002452:	2300      	movs	r3, #0
 8002454:	633b      	str	r3, [r7, #48]	; 0x30
 8002456:	2300      	movs	r3, #0
 8002458:	637b      	str	r3, [r7, #52]	; 0x34
 800245a:	2300      	movs	r3, #0
 800245c:	63bb      	str	r3, [r7, #56]	; 0x38
 800245e:	2300      	movs	r3, #0
 8002460:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002462:	2300      	movs	r3, #0
 8002464:	643b      	str	r3, [r7, #64]	; 0x40
 8002466:	2300      	movs	r3, #0
 8002468:	647b      	str	r3, [r7, #68]	; 0x44
 800246a:	2300      	movs	r3, #0
 800246c:	64bb      	str	r3, [r7, #72]	; 0x48
 800246e:	2300      	movs	r3, #0
 8002470:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002472:	2300      	movs	r3, #0
 8002474:	653b      	str	r3, [r7, #80]	; 0x50
	/*
	 * Set initial pin states
	 */
	// Turn off motors
	//HAL_GPIO_WritePin(stepPort, stepPin, 0);
	HAL_GPIO_WritePin(dirPort, dirPin, 0);
 8002476:	887b      	ldrh	r3, [r7, #2]
 8002478:	2200      	movs	r2, #0
 800247a:	4619      	mov	r1, r3
 800247c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800247e:	f001 fdd7 	bl	8004030 <HAL_GPIO_WritePin>


	/*
	 * Set general configuration register
	 */
	uint32_t newGCONF = TMC2209_internal_rsense | TMC2209_pdn_disable | TMC2209_mstep_reg_select;//multistep_filt
 8002482:	23c2      	movs	r3, #194	; 0xc2
 8002484:	667b      	str	r3, [r7, #100]	; 0x64
	tmc2209_setGCONFG(&newMotor, newGCONF);
 8002486:	f107 0310 	add.w	r3, r7, #16
 800248a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800248c:	4618      	mov	r0, r3
 800248e:	f000 f853 	bl	8002538 <tmc2209_setGCONFG>
	/*
	 *  Set currents
	 *  Min: 0
	 *  Max: 31 / 0b00011111
	 */
	uint32_t newHoldCurrent = 0; // Free wheel/passive breaking
 8002492:	2300      	movs	r3, #0
 8002494:	663b      	str	r3, [r7, #96]	; 0x60
	uint32_t newRunCurrent = 10;
 8002496:	230a      	movs	r3, #10
 8002498:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t newHoldDelay = 0; // Auto off
 800249a:	2300      	movs	r3, #0
 800249c:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t newIHOLD_IRUN = newHoldCurrent | (newRunCurrent << 8) | (newHoldDelay << 16);
 800249e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024a0:	021a      	lsls	r2, r3, #8
 80024a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024a4:	431a      	orrs	r2, r3
 80024a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024a8:	041b      	lsls	r3, r3, #16
 80024aa:	4313      	orrs	r3, r2
 80024ac:	657b      	str	r3, [r7, #84]	; 0x54
	tmc2209_setIHOLD_IRUN(&newMotor, newIHOLD_IRUN);
 80024ae:	f107 0310 	add.w	r3, r7, #16
 80024b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 f859 	bl	800256c <tmc2209_setIHOLD_IRUN>

	// Set microstep value
	// See MRES bits in CHOPCONF register - Chopper configuration


	return newMotor;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4618      	mov	r0, r3
 80024be:	f107 0310 	add.w	r3, r7, #16
 80024c2:	2244      	movs	r2, #68	; 0x44
 80024c4:	4619      	mov	r1, r3
 80024c6:	f00b fec2 	bl	800e24e <memcpy>
}
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	3768      	adds	r7, #104	; 0x68
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <tmc2209_write>:
	return dataBuffer[0] | dataBuffer[1] | dataBuffer[2] | dataBuffer[3];
}
/**
 *
 */
void tmc2209_write(tmc2209_t *tmc, tmc2209_write_t writeDatagram) {
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b086      	sub	sp, #24
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	60f8      	str	r0, [r7, #12]
 80024da:	1d3b      	adds	r3, r7, #4
 80024dc:	e883 0006 	stmia.w	r3, {r1, r2}

	uint8_t msg[TMC2209_WRITE_DATAGRAM_LENGTH];

	msg[0] = TMC2209_SYNC_BYTE;
 80024e0:	2305      	movs	r3, #5
 80024e2:	743b      	strb	r3, [r7, #16]
	msg[1] = writeDatagram.slaveAddress;
 80024e4:	793b      	ldrb	r3, [r7, #4]
 80024e6:	747b      	strb	r3, [r7, #17]
	msg[2] = writeDatagram.registerAddress | TMC2209_RW_WRITE;
 80024e8:	797b      	ldrb	r3, [r7, #5]
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	74bb      	strb	r3, [r7, #18]
	msg[3] = (uint8_t)((writeDatagram.data >> 24) & 0x000000ff);
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	0e1b      	lsrs	r3, r3, #24
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	74fb      	strb	r3, [r7, #19]
	msg[4] = (uint8_t)((writeDatagram.data >> 16) & 0x000000ff);
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	0c1b      	lsrs	r3, r3, #16
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	753b      	strb	r3, [r7, #20]
	msg[5] = (uint8_t)((writeDatagram.data >> 8) & 0x000000ff);
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	0a1b      	lsrs	r3, r3, #8
 8002506:	b2db      	uxtb	r3, r3
 8002508:	757b      	strb	r3, [r7, #21]
	msg[6] = (uint8_t)(writeDatagram.data & 0x000000ff);
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	75bb      	strb	r3, [r7, #22]
	msg[7] = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	75fb      	strb	r3, [r7, #23]
	tmc2209_calculateCRC(msg, TMC2209_WRITE_DATAGRAM_LENGTH);
 8002514:	f107 0310 	add.w	r3, r7, #16
 8002518:	2108      	movs	r1, #8
 800251a:	4618      	mov	r0, r3
 800251c:	f000 f860 	bl	80025e0 <tmc2209_calculateCRC>

	HAL_UART_Transmit(tmc->uart, msg, TMC2209_WRITE_DATAGRAM_LENGTH, TMC2209_UART_TIMEOUT);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6918      	ldr	r0, [r3, #16]
 8002524:	f107 0110 	add.w	r1, r7, #16
 8002528:	230a      	movs	r3, #10
 800252a:	2208      	movs	r2, #8
 800252c:	f005 fc36 	bl	8007d9c <HAL_UART_Transmit>
}
 8002530:	bf00      	nop
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <tmc2209_setGCONFG>:
/**
 *	@function tmc2209_setGCONF
 *	@brief programs CGONF register
 */
void tmc2209_setGCONFG(tmc2209_t *tmc, uint32_t data) {
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
	tmc->gconf = data;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	619a      	str	r2, [r3, #24]
	tmc2209_write_t msg = {
		.slaveAddress = tmc->uartAddr,
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	7d1b      	ldrb	r3, [r3, #20]
	tmc2209_write_t msg = {
 800254c:	723b      	strb	r3, [r7, #8]
 800254e:	2300      	movs	r3, #0
 8002550:	727b      	strb	r3, [r7, #9]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	60fb      	str	r3, [r7, #12]
		.registerAddress = TMC2209_GCONF,
		.data = data
  	};
	tmc2209_write(tmc, msg);
 8002556:	f107 0308 	add.w	r3, r7, #8
 800255a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff ffb7 	bl	80024d2 <tmc2209_write>


}
 8002564:	bf00      	nop
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <tmc2209_setIHOLD_IRUN>:

/**
 *	@function tmc2209_setIHOLD_IRUN
 *	@brief Programs holding current, run current, and hold delay time
 */
void tmc2209_setIHOLD_IRUN(tmc2209_t *tmc, uint32_t data) {
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
	tmc->ihold_irun = data;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	639a      	str	r2, [r3, #56]	; 0x38
	tmc2209_write_t msg = {
		.slaveAddress = tmc->uartAddr,
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	7d1b      	ldrb	r3, [r3, #20]
	tmc2209_write_t msg = {
 8002580:	723b      	strb	r3, [r7, #8]
 8002582:	2310      	movs	r3, #16
 8002584:	727b      	strb	r3, [r7, #9]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	60fb      	str	r3, [r7, #12]
		.registerAddress = TMC2209_IHOLD_IRUN,
		.data = data
  	};
	tmc2209_write(tmc, msg);
 800258a:	f107 0308 	add.w	r3, r7, #8
 800258e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ff9d 	bl	80024d2 <tmc2209_write>
}
 8002598:	bf00      	nop
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <tmc2209_off>:

}
/**
 *
 */
void tmc2209_off(tmc2209_t *tmc) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(tmc->stepTimer, tmc->stepTimerChannel);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	4619      	mov	r1, r3
 80025b2:	4610      	mov	r0, r2
 80025b4:	f004 fcc4 	bl	8006f40 <HAL_TIM_PWM_Stop>
}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <tmc2209_on>:
/**
 *
 */
void tmc2209_on(tmc2209_t *tmc) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(tmc->stepTimer, tmc->stepTimerChannel);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	4619      	mov	r1, r3
 80025d2:	4610      	mov	r0, r2
 80025d4:	f004 fba8 	bl	8006d28 <HAL_TIM_PWM_Start>
}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <tmc2209_calculateCRC>:

}
/**
 *
 */
void tmc2209_calculateCRC(uint8_t* datagram, uint8_t datagramLength){
 80025e0:	b480      	push	{r7}
 80025e2:	b087      	sub	sp, #28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	70fb      	strb	r3, [r7, #3]
	int i,j;
	uint8_t* crc = datagram + (datagramLength-1); // CRC located in last byte of message
 80025ec:	78fb      	ldrb	r3, [r7, #3]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	4413      	add	r3, r2
 80025f4:	60bb      	str	r3, [r7, #8]
	uint8_t currentByte;
	*crc = 0;
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
	for (i=0; i<(datagramLength-1); i++) { // Execute for all bytes of a message
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	e02e      	b.n	8002660 <tmc2209_calculateCRC+0x80>
		currentByte = datagram[i]; // Retrieve a byte to be sent from Array
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	4413      	add	r3, r2
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	73fb      	strb	r3, [r7, #15]
		for (j=0; j<8; j++) {
 800260c:	2300      	movs	r3, #0
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	e020      	b.n	8002654 <tmc2209_calculateCRC+0x74>
			if ((*crc >> 7) ^ (currentByte&0x01)) // update CRC based result of XOR operation
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	09db      	lsrs	r3, r3, #7
 8002618:	b2db      	uxtb	r3, r3
 800261a:	461a      	mov	r2, r3
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	429a      	cmp	r2, r3
 8002624:	d00a      	beq.n	800263c <tmc2209_calculateCRC+0x5c>
			{
				*crc = (*crc << 1) ^ 0x07;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	b25b      	sxtb	r3, r3
 800262e:	f083 0307 	eor.w	r3, r3, #7
 8002632:	b25b      	sxtb	r3, r3
 8002634:	b2da      	uxtb	r2, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	701a      	strb	r2, [r3, #0]
 800263a:	e005      	b.n	8002648 <tmc2209_calculateCRC+0x68>
			}
			else
			{
				*crc = (*crc << 1);
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	b2da      	uxtb	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	701a      	strb	r2, [r3, #0]
			}
			currentByte = currentByte >> 1;
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	085b      	lsrs	r3, r3, #1
 800264c:	73fb      	strb	r3, [r7, #15]
		for (j=0; j<8; j++) {
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	3301      	adds	r3, #1
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	2b07      	cmp	r3, #7
 8002658:	dddb      	ble.n	8002612 <tmc2209_calculateCRC+0x32>
	for (i=0; i<(datagramLength-1); i++) { // Execute for all bytes of a message
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	3301      	adds	r3, #1
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	3b01      	subs	r3, #1
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	429a      	cmp	r2, r3
 8002668:	dbcb      	blt.n	8002602 <tmc2209_calculateCRC+0x22>
		} // for CRC bit
	} // for message byte
}
 800266a:	bf00      	nop
 800266c:	bf00      	nop
 800266e:	371c      	adds	r7, #28
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002678:	480d      	ldr	r0, [pc, #52]	; (80026b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800267a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800267c:	480d      	ldr	r0, [pc, #52]	; (80026b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800267e:	490e      	ldr	r1, [pc, #56]	; (80026b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002680:	4a0e      	ldr	r2, [pc, #56]	; (80026bc <LoopForever+0xe>)
  movs r3, #0
 8002682:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002684:	e002      	b.n	800268c <LoopCopyDataInit>

08002686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800268a:	3304      	adds	r3, #4

0800268c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800268c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800268e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002690:	d3f9      	bcc.n	8002686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002692:	4a0b      	ldr	r2, [pc, #44]	; (80026c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002694:	4c0b      	ldr	r4, [pc, #44]	; (80026c4 <LoopForever+0x16>)
  movs r3, #0
 8002696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002698:	e001      	b.n	800269e <LoopFillZerobss>

0800269a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800269a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800269c:	3204      	adds	r2, #4

0800269e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800269e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026a0:	d3fb      	bcc.n	800269a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026a2:	f7ff feab 	bl	80023fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026a6:	f00b fdab 	bl	800e200 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026aa:	f7fe fcc9 	bl	8001040 <main>

080026ae <LoopForever>:

LoopForever:
    b LoopForever
 80026ae:	e7fe      	b.n	80026ae <LoopForever>
  ldr   r0, =_estack
 80026b0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80026b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026b8:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 80026bc:	08011eb0 	.word	0x08011eb0
  ldr r2, =_sbss
 80026c0:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 80026c4:	20002284 	.word	0x20002284

080026c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026c8:	e7fe      	b.n	80026c8 <ADC1_2_IRQHandler>

080026ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026d4:	2003      	movs	r0, #3
 80026d6:	f001 f915 	bl	8003904 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026da:	2000      	movs	r0, #0
 80026dc:	f000 f80e 	bl	80026fc <HAL_InitTick>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	71fb      	strb	r3, [r7, #7]
 80026ea:	e001      	b.n	80026f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026ec:	f7ff fabe 	bl	8001c6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026f0:	79fb      	ldrb	r3, [r7, #7]

}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002708:	4b16      	ldr	r3, [pc, #88]	; (8002764 <HAL_InitTick+0x68>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d022      	beq.n	8002756 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002710:	4b15      	ldr	r3, [pc, #84]	; (8002768 <HAL_InitTick+0x6c>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4b13      	ldr	r3, [pc, #76]	; (8002764 <HAL_InitTick+0x68>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800271c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002720:	fbb2 f3f3 	udiv	r3, r2, r3
 8002724:	4618      	mov	r0, r3
 8002726:	f001 f920 	bl	800396a <HAL_SYSTICK_Config>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10f      	bne.n	8002750 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b0f      	cmp	r3, #15
 8002734:	d809      	bhi.n	800274a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002736:	2200      	movs	r2, #0
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	f04f 30ff 	mov.w	r0, #4294967295
 800273e:	f001 f8ec 	bl	800391a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002742:	4a0a      	ldr	r2, [pc, #40]	; (800276c <HAL_InitTick+0x70>)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	e007      	b.n	800275a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
 800274e:	e004      	b.n	800275a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	73fb      	strb	r3, [r7, #15]
 8002754:	e001      	b.n	800275a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800275a:	7bfb      	ldrb	r3, [r7, #15]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20000008 	.word	0x20000008
 8002768:	20000000 	.word	0x20000000
 800276c:	20000004 	.word	0x20000004

08002770 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <HAL_IncTick+0x1c>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <HAL_IncTick+0x20>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4413      	add	r3, r2
 800277e:	4a03      	ldr	r2, [pc, #12]	; (800278c <HAL_IncTick+0x1c>)
 8002780:	6013      	str	r3, [r2, #0]
}
 8002782:	bf00      	nop
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	2000070c 	.word	0x2000070c
 8002790:	20000008 	.word	0x20000008

08002794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return uwTick;
 8002798:	4b03      	ldr	r3, [pc, #12]	; (80027a8 <HAL_GetTick+0x14>)
 800279a:	681b      	ldr	r3, [r3, #0]
}
 800279c:	4618      	mov	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	2000070c 	.word	0x2000070c

080027ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027b4:	f7ff ffee 	bl	8002794 <HAL_GetTick>
 80027b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c4:	d004      	beq.n	80027d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80027c6:	4b09      	ldr	r3, [pc, #36]	; (80027ec <HAL_Delay+0x40>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	4413      	add	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027d0:	bf00      	nop
 80027d2:	f7ff ffdf 	bl	8002794 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d8f7      	bhi.n	80027d2 <HAL_Delay+0x26>
  {
  }
}
 80027e2:	bf00      	nop
 80027e4:	bf00      	nop
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	20000008 	.word	0x20000008

080027f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	431a      	orrs	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	609a      	str	r2, [r3, #8]
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	609a      	str	r2, [r3, #8]
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
 8002864:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	3360      	adds	r3, #96	; 0x60
 800286a:	461a      	mov	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	4b08      	ldr	r3, [pc, #32]	; (800289c <LL_ADC_SetOffset+0x44>)
 800287a:	4013      	ands	r3, r2
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	4313      	orrs	r3, r2
 8002888:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002890:	bf00      	nop
 8002892:	371c      	adds	r7, #28
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	03fff000 	.word	0x03fff000

080028a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3360      	adds	r3, #96	; 0x60
 80028ae:	461a      	mov	r2, r3
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	3360      	adds	r3, #96	; 0x60
 80028dc:	461a      	mov	r2, r3
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	431a      	orrs	r2, r3
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80028f6:	bf00      	nop
 80028f8:	371c      	adds	r7, #28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002902:	b480      	push	{r7}
 8002904:	b087      	sub	sp, #28
 8002906:	af00      	add	r7, sp, #0
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	3360      	adds	r3, #96	; 0x60
 8002912:	461a      	mov	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	431a      	orrs	r2, r3
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800292c:	bf00      	nop
 800292e:	371c      	adds	r7, #28
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002938:	b480      	push	{r7}
 800293a:	b087      	sub	sp, #28
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	3360      	adds	r3, #96	; 0x60
 8002948:	461a      	mov	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	431a      	orrs	r2, r3
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002962:	bf00      	nop
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	615a      	str	r2, [r3, #20]
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	3330      	adds	r3, #48	; 0x30
 80029a4:	461a      	mov	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	0a1b      	lsrs	r3, r3, #8
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	f003 030c 	and.w	r3, r3, #12
 80029b0:	4413      	add	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	f003 031f 	and.w	r3, r3, #31
 80029be:	211f      	movs	r1, #31
 80029c0:	fa01 f303 	lsl.w	r3, r1, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	401a      	ands	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	0e9b      	lsrs	r3, r3, #26
 80029cc:	f003 011f 	and.w	r1, r3, #31
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f003 031f 	and.w	r3, r3, #31
 80029d6:	fa01 f303 	lsl.w	r3, r1, r3
 80029da:	431a      	orrs	r2, r3
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029e0:	bf00      	nop
 80029e2:	371c      	adds	r7, #28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	3314      	adds	r3, #20
 80029fc:	461a      	mov	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	0e5b      	lsrs	r3, r3, #25
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	4413      	add	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	0d1b      	lsrs	r3, r3, #20
 8002a14:	f003 031f 	and.w	r3, r3, #31
 8002a18:	2107      	movs	r1, #7
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	401a      	ands	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	0d1b      	lsrs	r3, r3, #20
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a30:	431a      	orrs	r2, r3
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a36:	bf00      	nop
 8002a38:	371c      	adds	r7, #28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
	...

08002a44 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a0f      	ldr	r2, [pc, #60]	; (8002a90 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d10a      	bne.n	8002a6e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a64:	431a      	orrs	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002a6c:	e00a      	b.n	8002a84 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	401a      	ands	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002a84:	bf00      	nop
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	407f0000 	.word	0x407f0000

08002a94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002aa4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6093      	str	r3, [r2, #8]
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ac8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002acc:	d101      	bne.n	8002ad2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002af0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002af4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b1c:	d101      	bne.n	8002b22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <LL_ADC_IsEnabled+0x18>
 8002b44:	2301      	movs	r3, #1
 8002b46:	e000      	b.n	8002b4a <LL_ADC_IsEnabled+0x1a>
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d101      	bne.n	8002b6e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	d101      	bne.n	8002b94 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ba4:	b590      	push	{r4, r7, lr}
 8002ba6:	b089      	sub	sp, #36	; 0x24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e1a1      	b.n	8002f02 <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d109      	bne.n	8002be0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7ff f871 	bl	8001cb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ff67 	bl	8002ab8 <LL_ADC_IsDeepPowerDownEnabled>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d004      	beq.n	8002bfa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ff4d 	bl	8002a94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff ff82 	bl	8002b08 <LL_ADC_IsInternalRegulatorEnabled>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d115      	bne.n	8002c36 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff ff66 	bl	8002ae0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c14:	4b9a      	ldr	r3, [pc, #616]	; (8002e80 <HAL_ADC_Init+0x2dc>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	099b      	lsrs	r3, r3, #6
 8002c1a:	4a9a      	ldr	r2, [pc, #616]	; (8002e84 <HAL_ADC_Init+0x2e0>)
 8002c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c20:	099b      	lsrs	r3, r3, #6
 8002c22:	3301      	adds	r3, #1
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c28:	e002      	b.n	8002c30 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f9      	bne.n	8002c2a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff ff64 	bl	8002b08 <LL_ADC_IsInternalRegulatorEnabled>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10d      	bne.n	8002c62 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4a:	f043 0210 	orr.w	r2, r3, #16
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c56:	f043 0201 	orr.w	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff ff75 	bl	8002b56 <LL_ADC_REG_IsConversionOngoing>
 8002c6c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c72:	f003 0310 	and.w	r3, r3, #16
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f040 813a 	bne.w	8002ef0 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f040 8136 	bne.w	8002ef0 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c88:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c8c:	f043 0202 	orr.w	r2, r3, #2
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff ff49 	bl	8002b30 <LL_ADC_IsEnabled>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d137      	bne.n	8002d14 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cac:	d004      	beq.n	8002cb8 <HAL_ADC_Init+0x114>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a75      	ldr	r2, [pc, #468]	; (8002e88 <HAL_ADC_Init+0x2e4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d10f      	bne.n	8002cd8 <HAL_ADC_Init+0x134>
 8002cb8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002cbc:	f7ff ff38 	bl	8002b30 <LL_ADC_IsEnabled>
 8002cc0:	4604      	mov	r4, r0
 8002cc2:	4871      	ldr	r0, [pc, #452]	; (8002e88 <HAL_ADC_Init+0x2e4>)
 8002cc4:	f7ff ff34 	bl	8002b30 <LL_ADC_IsEnabled>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	4323      	orrs	r3, r4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	bf0c      	ite	eq
 8002cd0:	2301      	moveq	r3, #1
 8002cd2:	2300      	movne	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	e008      	b.n	8002cea <HAL_ADC_Init+0x146>
 8002cd8:	486c      	ldr	r0, [pc, #432]	; (8002e8c <HAL_ADC_Init+0x2e8>)
 8002cda:	f7ff ff29 	bl	8002b30 <LL_ADC_IsEnabled>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	bf0c      	ite	eq
 8002ce4:	2301      	moveq	r3, #1
 8002ce6:	2300      	movne	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d012      	beq.n	8002d14 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cf6:	d004      	beq.n	8002d02 <HAL_ADC_Init+0x15e>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a62      	ldr	r2, [pc, #392]	; (8002e88 <HAL_ADC_Init+0x2e4>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d101      	bne.n	8002d06 <HAL_ADC_Init+0x162>
 8002d02:	4a63      	ldr	r2, [pc, #396]	; (8002e90 <HAL_ADC_Init+0x2ec>)
 8002d04:	e000      	b.n	8002d08 <HAL_ADC_Init+0x164>
 8002d06:	4a63      	ldr	r2, [pc, #396]	; (8002e94 <HAL_ADC_Init+0x2f0>)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4610      	mov	r0, r2
 8002d10:	f7ff fd6e 	bl	80027f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	7f5b      	ldrb	r3, [r3, #29]
 8002d18:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d1e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002d24:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002d2a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d32:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d106      	bne.n	8002d50 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d46:	3b01      	subs	r3, #1
 8002d48:	045b      	lsls	r3, r3, #17
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d009      	beq.n	8002d6c <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	4b49      	ldr	r3, [pc, #292]	; (8002e98 <HAL_ADC_Init+0x2f4>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6812      	ldr	r2, [r2, #0]
 8002d7a:	69b9      	ldr	r1, [r7, #24]
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fedb 	bl	8002b56 <LL_ADC_REG_IsConversionOngoing>
 8002da0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff fee8 	bl	8002b7c <LL_ADC_INJ_IsConversionOngoing>
 8002dac:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d17b      	bne.n	8002eac <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d178      	bne.n	8002eac <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dbe:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dc6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dd6:	f023 0302 	bic.w	r3, r3, #2
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	69b9      	ldr	r1, [r7, #24]
 8002de0:	430b      	orrs	r3, r1
 8002de2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d017      	beq.n	8002e1c <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691a      	ldr	r2, [r3, #16]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002dfa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e04:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6911      	ldr	r1, [r2, #16]
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	430b      	orrs	r3, r1
 8002e16:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002e1a:	e013      	b.n	8002e44 <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691a      	ldr	r2, [r3, #16]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e2a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6812      	ldr	r2, [r2, #0]
 8002e38:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e40:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d126      	bne.n	8002e9c <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e58:	f023 0304 	bic.w	r3, r3, #4
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e64:	4311      	orrs	r1, r2
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002e6a:	4311      	orrs	r1, r2
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e70:	430a      	orrs	r2, r1
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f042 0201 	orr.w	r2, r2, #1
 8002e7c:	611a      	str	r2, [r3, #16]
 8002e7e:	e015      	b.n	8002eac <HAL_ADC_Init+0x308>
 8002e80:	20000000 	.word	0x20000000
 8002e84:	053e2d63 	.word	0x053e2d63
 8002e88:	50000100 	.word	0x50000100
 8002e8c:	50000400 	.word	0x50000400
 8002e90:	50000300 	.word	0x50000300
 8002e94:	50000700 	.word	0x50000700
 8002e98:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691a      	ldr	r2, [r3, #16]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0201 	bic.w	r2, r2, #1
 8002eaa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d10c      	bne.n	8002ece <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	f023 010f 	bic.w	r1, r3, #15
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	1e5a      	subs	r2, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	631a      	str	r2, [r3, #48]	; 0x30
 8002ecc:	e007      	b.n	8002ede <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 020f 	bic.w	r2, r2, #15
 8002edc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee2:	f023 0303 	bic.w	r3, r3, #3
 8002ee6:	f043 0201 	orr.w	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	65da      	str	r2, [r3, #92]	; 0x5c
 8002eee:	e007      	b.n	8002f00 <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef4:	f043 0210 	orr.w	r2, r3, #16
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f00:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3724      	adds	r7, #36	; 0x24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd90      	pop	{r4, r7, pc}
 8002f0a:	bf00      	nop

08002f0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b0b6      	sub	sp, #216	; 0xd8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d102      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x24>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	f000 bc04 	b.w	8003738 <HAL_ADC_ConfigChannel+0x82c>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff fe0a 	bl	8002b56 <LL_ADC_REG_IsConversionOngoing>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f040 83e8 	bne.w	800371a <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	6859      	ldr	r1, [r3, #4]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	f7ff fd1c 	bl	8002994 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fdf8 	bl	8002b56 <LL_ADC_REG_IsConversionOngoing>
 8002f66:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff fe04 	bl	8002b7c <LL_ADC_INJ_IsConversionOngoing>
 8002f74:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f78:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f040 81d9 	bne.w	8003334 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f040 81d4 	bne.w	8003334 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f94:	d10f      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6818      	ldr	r0, [r3, #0]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	f7ff fd23 	bl	80029ec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff fcdd 	bl	800296e <LL_ADC_SetSamplingTimeCommonConfig>
 8002fb4:	e00e      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6818      	ldr	r0, [r3, #0]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	6819      	ldr	r1, [r3, #0]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	f7ff fd12 	bl	80029ec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff fccd 	bl	800296e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	695a      	ldr	r2, [r3, #20]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	08db      	lsrs	r3, r3, #3
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d022      	beq.n	800303c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6818      	ldr	r0, [r3, #0]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	6919      	ldr	r1, [r3, #16]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003006:	f7ff fc27 	bl	8002858 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6818      	ldr	r0, [r3, #0]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6919      	ldr	r1, [r3, #16]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	461a      	mov	r2, r3
 8003018:	f7ff fc73 	bl	8002902 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	6919      	ldr	r1, [r3, #16]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	7f1b      	ldrb	r3, [r3, #28]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d102      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x126>
 800302c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003030:	e000      	b.n	8003034 <HAL_ADC_ConfigChannel+0x128>
 8003032:	2300      	movs	r3, #0
 8003034:	461a      	mov	r2, r3
 8003036:	f7ff fc7f 	bl	8002938 <LL_ADC_SetOffsetSaturation>
 800303a:	e17b      	b.n	8003334 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2100      	movs	r1, #0
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fc2c 	bl	80028a0 <LL_ADC_GetOffsetChannel>
 8003048:	4603      	mov	r3, r0
 800304a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10a      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x15c>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2100      	movs	r1, #0
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff fc21 	bl	80028a0 <LL_ADC_GetOffsetChannel>
 800305e:	4603      	mov	r3, r0
 8003060:	0e9b      	lsrs	r3, r3, #26
 8003062:	f003 021f 	and.w	r2, r3, #31
 8003066:	e01e      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x19a>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2100      	movs	r1, #0
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fc16 	bl	80028a0 <LL_ADC_GetOffsetChannel>
 8003074:	4603      	mov	r3, r0
 8003076:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800307e:	fa93 f3a3 	rbit	r3, r3
 8003082:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003086:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800308a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800308e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003096:	2320      	movs	r3, #32
 8003098:	e004      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800309a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d105      	bne.n	80030be <HAL_ADC_ConfigChannel+0x1b2>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	0e9b      	lsrs	r3, r3, #26
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	e018      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x1e4>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80030ca:	fa93 f3a3 	rbit	r3, r3
 80030ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80030d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80030da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80030e2:	2320      	movs	r3, #32
 80030e4:	e004      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80030e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030ea:	fab3 f383 	clz	r3, r3
 80030ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d106      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2200      	movs	r2, #0
 80030fa:	2100      	movs	r1, #0
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff fbe5 	bl	80028cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2101      	movs	r1, #1
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff fbc9 	bl	80028a0 <LL_ADC_GetOffsetChannel>
 800310e:	4603      	mov	r3, r0
 8003110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10a      	bne.n	800312e <HAL_ADC_ConfigChannel+0x222>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2101      	movs	r1, #1
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fbbe 	bl	80028a0 <LL_ADC_GetOffsetChannel>
 8003124:	4603      	mov	r3, r0
 8003126:	0e9b      	lsrs	r3, r3, #26
 8003128:	f003 021f 	and.w	r2, r3, #31
 800312c:	e01e      	b.n	800316c <HAL_ADC_ConfigChannel+0x260>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2101      	movs	r1, #1
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff fbb3 	bl	80028a0 <LL_ADC_GetOffsetChannel>
 800313a:	4603      	mov	r3, r0
 800313c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003140:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003144:	fa93 f3a3 	rbit	r3, r3
 8003148:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800314c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003150:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003154:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800315c:	2320      	movs	r3, #32
 800315e:	e004      	b.n	800316a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003160:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003164:	fab3 f383 	clz	r3, r3
 8003168:	b2db      	uxtb	r3, r3
 800316a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003174:	2b00      	cmp	r3, #0
 8003176:	d105      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x278>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	0e9b      	lsrs	r3, r3, #26
 800317e:	f003 031f 	and.w	r3, r3, #31
 8003182:	e018      	b.n	80031b6 <HAL_ADC_ConfigChannel+0x2aa>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003190:	fa93 f3a3 	rbit	r3, r3
 8003194:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003198:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800319c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80031a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80031a8:	2320      	movs	r3, #32
 80031aa:	e004      	b.n	80031b6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80031ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031b0:	fab3 f383 	clz	r3, r3
 80031b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d106      	bne.n	80031c8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2200      	movs	r2, #0
 80031c0:	2101      	movs	r1, #1
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fb82 	bl	80028cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2102      	movs	r1, #2
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fb66 	bl	80028a0 <LL_ADC_GetOffsetChannel>
 80031d4:	4603      	mov	r3, r0
 80031d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10a      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x2e8>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2102      	movs	r1, #2
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff fb5b 	bl	80028a0 <LL_ADC_GetOffsetChannel>
 80031ea:	4603      	mov	r3, r0
 80031ec:	0e9b      	lsrs	r3, r3, #26
 80031ee:	f003 021f 	and.w	r2, r3, #31
 80031f2:	e01e      	b.n	8003232 <HAL_ADC_ConfigChannel+0x326>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2102      	movs	r1, #2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff fb50 	bl	80028a0 <LL_ADC_GetOffsetChannel>
 8003200:	4603      	mov	r3, r0
 8003202:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003206:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800320a:	fa93 f3a3 	rbit	r3, r3
 800320e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003212:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003216:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800321a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003222:	2320      	movs	r3, #32
 8003224:	e004      	b.n	8003230 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003226:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800322a:	fab3 f383 	clz	r3, r3
 800322e:	b2db      	uxtb	r3, r3
 8003230:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800323a:	2b00      	cmp	r3, #0
 800323c:	d105      	bne.n	800324a <HAL_ADC_ConfigChannel+0x33e>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	0e9b      	lsrs	r3, r3, #26
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	e016      	b.n	8003278 <HAL_ADC_ConfigChannel+0x36c>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003252:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003256:	fa93 f3a3 	rbit	r3, r3
 800325a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800325c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800325e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003262:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800326a:	2320      	movs	r3, #32
 800326c:	e004      	b.n	8003278 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800326e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003272:	fab3 f383 	clz	r3, r3
 8003276:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003278:	429a      	cmp	r2, r3
 800327a:	d106      	bne.n	800328a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2200      	movs	r2, #0
 8003282:	2102      	movs	r1, #2
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff fb21 	bl	80028cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2103      	movs	r1, #3
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff fb05 	bl	80028a0 <LL_ADC_GetOffsetChannel>
 8003296:	4603      	mov	r3, r0
 8003298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10a      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x3aa>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2103      	movs	r1, #3
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fafa 	bl	80028a0 <LL_ADC_GetOffsetChannel>
 80032ac:	4603      	mov	r3, r0
 80032ae:	0e9b      	lsrs	r3, r3, #26
 80032b0:	f003 021f 	and.w	r2, r3, #31
 80032b4:	e017      	b.n	80032e6 <HAL_ADC_ConfigChannel+0x3da>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2103      	movs	r1, #3
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff faef 	bl	80028a0 <LL_ADC_GetOffsetChannel>
 80032c2:	4603      	mov	r3, r0
 80032c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032c8:	fa93 f3a3 	rbit	r3, r3
 80032cc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80032ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032d0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80032d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80032d8:	2320      	movs	r3, #32
 80032da:	e003      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80032dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032de:	fab3 f383 	clz	r3, r3
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d105      	bne.n	80032fe <HAL_ADC_ConfigChannel+0x3f2>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	0e9b      	lsrs	r3, r3, #26
 80032f8:	f003 031f 	and.w	r3, r3, #31
 80032fc:	e011      	b.n	8003322 <HAL_ADC_ConfigChannel+0x416>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003304:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003306:	fa93 f3a3 	rbit	r3, r3
 800330a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800330c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800330e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003316:	2320      	movs	r3, #32
 8003318:	e003      	b.n	8003322 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800331a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800331c:	fab3 f383 	clz	r3, r3
 8003320:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003322:	429a      	cmp	r2, r3
 8003324:	d106      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2200      	movs	r2, #0
 800332c:	2103      	movs	r1, #3
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff facc 	bl	80028cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff fbf9 	bl	8002b30 <LL_ADC_IsEnabled>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	f040 813d 	bne.w	80035c0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6818      	ldr	r0, [r3, #0]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	6819      	ldr	r1, [r3, #0]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	461a      	mov	r2, r3
 8003354:	f7ff fb76 	bl	8002a44 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	4aa2      	ldr	r2, [pc, #648]	; (80035e8 <HAL_ADC_ConfigChannel+0x6dc>)
 800335e:	4293      	cmp	r3, r2
 8003360:	f040 812e 	bne.w	80035c0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10b      	bne.n	800338c <HAL_ADC_ConfigChannel+0x480>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	0e9b      	lsrs	r3, r3, #26
 800337a:	3301      	adds	r3, #1
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	2b09      	cmp	r3, #9
 8003382:	bf94      	ite	ls
 8003384:	2301      	movls	r3, #1
 8003386:	2300      	movhi	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	e019      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x4b4>
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003394:	fa93 f3a3 	rbit	r3, r3
 8003398:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800339a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800339c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800339e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80033a4:	2320      	movs	r3, #32
 80033a6:	e003      	b.n	80033b0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80033a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033aa:	fab3 f383 	clz	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	3301      	adds	r3, #1
 80033b2:	f003 031f 	and.w	r3, r3, #31
 80033b6:	2b09      	cmp	r3, #9
 80033b8:	bf94      	ite	ls
 80033ba:	2301      	movls	r3, #1
 80033bc:	2300      	movhi	r3, #0
 80033be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d079      	beq.n	80034b8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d107      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x4d4>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	0e9b      	lsrs	r3, r3, #26
 80033d6:	3301      	adds	r3, #1
 80033d8:	069b      	lsls	r3, r3, #26
 80033da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033de:	e015      	b.n	800340c <HAL_ADC_ConfigChannel+0x500>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033e8:	fa93 f3a3 	rbit	r3, r3
 80033ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80033ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80033f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80033f8:	2320      	movs	r3, #32
 80033fa:	e003      	b.n	8003404 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80033fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033fe:	fab3 f383 	clz	r3, r3
 8003402:	b2db      	uxtb	r3, r3
 8003404:	3301      	adds	r3, #1
 8003406:	069b      	lsls	r3, r3, #26
 8003408:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003414:	2b00      	cmp	r3, #0
 8003416:	d109      	bne.n	800342c <HAL_ADC_ConfigChannel+0x520>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	0e9b      	lsrs	r3, r3, #26
 800341e:	3301      	adds	r3, #1
 8003420:	f003 031f 	and.w	r3, r3, #31
 8003424:	2101      	movs	r1, #1
 8003426:	fa01 f303 	lsl.w	r3, r1, r3
 800342a:	e017      	b.n	800345c <HAL_ADC_ConfigChannel+0x550>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003434:	fa93 f3a3 	rbit	r3, r3
 8003438:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800343a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800343c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800343e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003444:	2320      	movs	r3, #32
 8003446:	e003      	b.n	8003450 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800344a:	fab3 f383 	clz	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	3301      	adds	r3, #1
 8003452:	f003 031f 	and.w	r3, r3, #31
 8003456:	2101      	movs	r1, #1
 8003458:	fa01 f303 	lsl.w	r3, r1, r3
 800345c:	ea42 0103 	orr.w	r1, r2, r3
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10a      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x576>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	0e9b      	lsrs	r3, r3, #26
 8003472:	3301      	adds	r3, #1
 8003474:	f003 021f 	and.w	r2, r3, #31
 8003478:	4613      	mov	r3, r2
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	4413      	add	r3, r2
 800347e:	051b      	lsls	r3, r3, #20
 8003480:	e018      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x5a8>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348a:	fa93 f3a3 	rbit	r3, r3
 800348e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003492:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800349a:	2320      	movs	r3, #32
 800349c:	e003      	b.n	80034a6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800349e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034a0:	fab3 f383 	clz	r3, r3
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	3301      	adds	r3, #1
 80034a8:	f003 021f 	and.w	r2, r3, #31
 80034ac:	4613      	mov	r3, r2
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	4413      	add	r3, r2
 80034b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034b4:	430b      	orrs	r3, r1
 80034b6:	e07e      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d107      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x5c8>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	0e9b      	lsrs	r3, r3, #26
 80034ca:	3301      	adds	r3, #1
 80034cc:	069b      	lsls	r3, r3, #26
 80034ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034d2:	e015      	b.n	8003500 <HAL_ADC_ConfigChannel+0x5f4>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034dc:	fa93 f3a3 	rbit	r3, r3
 80034e0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80034e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80034e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80034ec:	2320      	movs	r3, #32
 80034ee:	e003      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80034f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f2:	fab3 f383 	clz	r3, r3
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	3301      	adds	r3, #1
 80034fa:	069b      	lsls	r3, r3, #26
 80034fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003508:	2b00      	cmp	r3, #0
 800350a:	d109      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x614>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	0e9b      	lsrs	r3, r3, #26
 8003512:	3301      	adds	r3, #1
 8003514:	f003 031f 	and.w	r3, r3, #31
 8003518:	2101      	movs	r1, #1
 800351a:	fa01 f303 	lsl.w	r3, r1, r3
 800351e:	e017      	b.n	8003550 <HAL_ADC_ConfigChannel+0x644>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	fa93 f3a3 	rbit	r3, r3
 800352c:	61fb      	str	r3, [r7, #28]
  return result;
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003538:	2320      	movs	r3, #32
 800353a:	e003      	b.n	8003544 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	fab3 f383 	clz	r3, r3
 8003542:	b2db      	uxtb	r3, r3
 8003544:	3301      	adds	r3, #1
 8003546:	f003 031f 	and.w	r3, r3, #31
 800354a:	2101      	movs	r1, #1
 800354c:	fa01 f303 	lsl.w	r3, r1, r3
 8003550:	ea42 0103 	orr.w	r1, r2, r3
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10d      	bne.n	800357c <HAL_ADC_ConfigChannel+0x670>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	0e9b      	lsrs	r3, r3, #26
 8003566:	3301      	adds	r3, #1
 8003568:	f003 021f 	and.w	r2, r3, #31
 800356c:	4613      	mov	r3, r2
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	4413      	add	r3, r2
 8003572:	3b1e      	subs	r3, #30
 8003574:	051b      	lsls	r3, r3, #20
 8003576:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800357a:	e01b      	b.n	80035b4 <HAL_ADC_ConfigChannel+0x6a8>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	fa93 f3a3 	rbit	r3, r3
 8003588:	613b      	str	r3, [r7, #16]
  return result;
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003594:	2320      	movs	r3, #32
 8003596:	e003      	b.n	80035a0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	fab3 f383 	clz	r3, r3
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	3301      	adds	r3, #1
 80035a2:	f003 021f 	and.w	r2, r3, #31
 80035a6:	4613      	mov	r3, r2
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	4413      	add	r3, r2
 80035ac:	3b1e      	subs	r3, #30
 80035ae:	051b      	lsls	r3, r3, #20
 80035b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035b4:	430b      	orrs	r3, r1
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	6892      	ldr	r2, [r2, #8]
 80035ba:	4619      	mov	r1, r3
 80035bc:	f7ff fa16 	bl	80029ec <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	4b09      	ldr	r3, [pc, #36]	; (80035ec <HAL_ADC_ConfigChannel+0x6e0>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 80af 	beq.w	800372c <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035d6:	d004      	beq.n	80035e2 <HAL_ADC_ConfigChannel+0x6d6>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a04      	ldr	r2, [pc, #16]	; (80035f0 <HAL_ADC_ConfigChannel+0x6e4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d10a      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x6ec>
 80035e2:	4b04      	ldr	r3, [pc, #16]	; (80035f4 <HAL_ADC_ConfigChannel+0x6e8>)
 80035e4:	e009      	b.n	80035fa <HAL_ADC_ConfigChannel+0x6ee>
 80035e6:	bf00      	nop
 80035e8:	407f0000 	.word	0x407f0000
 80035ec:	80080000 	.word	0x80080000
 80035f0:	50000100 	.word	0x50000100
 80035f4:	50000300 	.word	0x50000300
 80035f8:	4b51      	ldr	r3, [pc, #324]	; (8003740 <HAL_ADC_ConfigChannel+0x834>)
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff f91e 	bl	800283c <LL_ADC_GetCommonPathInternalCh>
 8003600:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a4e      	ldr	r2, [pc, #312]	; (8003744 <HAL_ADC_ConfigChannel+0x838>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d004      	beq.n	8003618 <HAL_ADC_ConfigChannel+0x70c>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a4d      	ldr	r2, [pc, #308]	; (8003748 <HAL_ADC_ConfigChannel+0x83c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d134      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003618:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800361c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d12e      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800362c:	d17e      	bne.n	800372c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003636:	d004      	beq.n	8003642 <HAL_ADC_ConfigChannel+0x736>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a43      	ldr	r2, [pc, #268]	; (800374c <HAL_ADC_ConfigChannel+0x840>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d101      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x73a>
 8003642:	4a43      	ldr	r2, [pc, #268]	; (8003750 <HAL_ADC_ConfigChannel+0x844>)
 8003644:	e000      	b.n	8003648 <HAL_ADC_ConfigChannel+0x73c>
 8003646:	4a3e      	ldr	r2, [pc, #248]	; (8003740 <HAL_ADC_ConfigChannel+0x834>)
 8003648:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800364c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003650:	4619      	mov	r1, r3
 8003652:	4610      	mov	r0, r2
 8003654:	f7ff f8df 	bl	8002816 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003658:	4b3e      	ldr	r3, [pc, #248]	; (8003754 <HAL_ADC_ConfigChannel+0x848>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	099b      	lsrs	r3, r3, #6
 800365e:	4a3e      	ldr	r2, [pc, #248]	; (8003758 <HAL_ADC_ConfigChannel+0x84c>)
 8003660:	fba2 2303 	umull	r2, r3, r2, r3
 8003664:	099b      	lsrs	r3, r3, #6
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	4613      	mov	r3, r2
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003672:	e002      	b.n	800367a <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	3b01      	subs	r3, #1
 8003678:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f9      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003680:	e054      	b.n	800372c <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a35      	ldr	r2, [pc, #212]	; (800375c <HAL_ADC_ConfigChannel+0x850>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d120      	bne.n	80036ce <HAL_ADC_ConfigChannel+0x7c2>
 800368c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d11a      	bne.n	80036ce <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036a0:	d144      	bne.n	800372c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036aa:	d004      	beq.n	80036b6 <HAL_ADC_ConfigChannel+0x7aa>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a26      	ldr	r2, [pc, #152]	; (800374c <HAL_ADC_ConfigChannel+0x840>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d101      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x7ae>
 80036b6:	4a26      	ldr	r2, [pc, #152]	; (8003750 <HAL_ADC_ConfigChannel+0x844>)
 80036b8:	e000      	b.n	80036bc <HAL_ADC_ConfigChannel+0x7b0>
 80036ba:	4a21      	ldr	r2, [pc, #132]	; (8003740 <HAL_ADC_ConfigChannel+0x834>)
 80036bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036c4:	4619      	mov	r1, r3
 80036c6:	4610      	mov	r0, r2
 80036c8:	f7ff f8a5 	bl	8002816 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036cc:	e02e      	b.n	800372c <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a23      	ldr	r2, [pc, #140]	; (8003760 <HAL_ADC_ConfigChannel+0x854>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d129      	bne.n	800372c <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d123      	bne.n	800372c <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a18      	ldr	r2, [pc, #96]	; (800374c <HAL_ADC_ConfigChannel+0x840>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d01e      	beq.n	800372c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036f6:	d004      	beq.n	8003702 <HAL_ADC_ConfigChannel+0x7f6>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a13      	ldr	r2, [pc, #76]	; (800374c <HAL_ADC_ConfigChannel+0x840>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d101      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x7fa>
 8003702:	4a13      	ldr	r2, [pc, #76]	; (8003750 <HAL_ADC_ConfigChannel+0x844>)
 8003704:	e000      	b.n	8003708 <HAL_ADC_ConfigChannel+0x7fc>
 8003706:	4a0e      	ldr	r2, [pc, #56]	; (8003740 <HAL_ADC_ConfigChannel+0x834>)
 8003708:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800370c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003710:	4619      	mov	r1, r3
 8003712:	4610      	mov	r0, r2
 8003714:	f7ff f87f 	bl	8002816 <LL_ADC_SetCommonPathInternalCh>
 8003718:	e008      	b.n	800372c <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371e:	f043 0220 	orr.w	r2, r3, #32
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003734:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003738:	4618      	mov	r0, r3
 800373a:	37d8      	adds	r7, #216	; 0xd8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	50000700 	.word	0x50000700
 8003744:	c3210000 	.word	0xc3210000
 8003748:	90c00010 	.word	0x90c00010
 800374c:	50000100 	.word	0x50000100
 8003750:	50000300 	.word	0x50000300
 8003754:	20000000 	.word	0x20000000
 8003758:	053e2d63 	.word	0x053e2d63
 800375c:	c7520000 	.word	0xc7520000
 8003760:	cb840000 	.word	0xcb840000

08003764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003780:	4013      	ands	r3, r2
 8003782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800378c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003796:	4a04      	ldr	r2, [pc, #16]	; (80037a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	60d3      	str	r3, [r2, #12]
}
 800379c:	bf00      	nop
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	e000ed00 	.word	0xe000ed00

080037ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <__NVIC_GetPriorityGrouping+0x18>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	0a1b      	lsrs	r3, r3, #8
 80037b6:	f003 0307 	and.w	r3, r3, #7
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	e000ed00 	.word	0xe000ed00

080037c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	db0b      	blt.n	80037f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	f003 021f 	and.w	r2, r3, #31
 80037e0:	4907      	ldr	r1, [pc, #28]	; (8003800 <__NVIC_EnableIRQ+0x38>)
 80037e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	2001      	movs	r0, #1
 80037ea:	fa00 f202 	lsl.w	r2, r0, r2
 80037ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	e000e100 	.word	0xe000e100

08003804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	6039      	str	r1, [r7, #0]
 800380e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003814:	2b00      	cmp	r3, #0
 8003816:	db0a      	blt.n	800382e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	b2da      	uxtb	r2, r3
 800381c:	490c      	ldr	r1, [pc, #48]	; (8003850 <__NVIC_SetPriority+0x4c>)
 800381e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003822:	0112      	lsls	r2, r2, #4
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	440b      	add	r3, r1
 8003828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800382c:	e00a      	b.n	8003844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	b2da      	uxtb	r2, r3
 8003832:	4908      	ldr	r1, [pc, #32]	; (8003854 <__NVIC_SetPriority+0x50>)
 8003834:	79fb      	ldrb	r3, [r7, #7]
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	3b04      	subs	r3, #4
 800383c:	0112      	lsls	r2, r2, #4
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	440b      	add	r3, r1
 8003842:	761a      	strb	r2, [r3, #24]
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	e000e100 	.word	0xe000e100
 8003854:	e000ed00 	.word	0xe000ed00

08003858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003858:	b480      	push	{r7}
 800385a:	b089      	sub	sp, #36	; 0x24
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f1c3 0307 	rsb	r3, r3, #7
 8003872:	2b04      	cmp	r3, #4
 8003874:	bf28      	it	cs
 8003876:	2304      	movcs	r3, #4
 8003878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3304      	adds	r3, #4
 800387e:	2b06      	cmp	r3, #6
 8003880:	d902      	bls.n	8003888 <NVIC_EncodePriority+0x30>
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	3b03      	subs	r3, #3
 8003886:	e000      	b.n	800388a <NVIC_EncodePriority+0x32>
 8003888:	2300      	movs	r3, #0
 800388a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800388c:	f04f 32ff 	mov.w	r2, #4294967295
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	43da      	mvns	r2, r3
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	401a      	ands	r2, r3
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038a0:	f04f 31ff 	mov.w	r1, #4294967295
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	fa01 f303 	lsl.w	r3, r1, r3
 80038aa:	43d9      	mvns	r1, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b0:	4313      	orrs	r3, r2
         );
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3724      	adds	r7, #36	; 0x24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
	...

080038c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038d0:	d301      	bcc.n	80038d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038d2:	2301      	movs	r3, #1
 80038d4:	e00f      	b.n	80038f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038d6:	4a0a      	ldr	r2, [pc, #40]	; (8003900 <SysTick_Config+0x40>)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3b01      	subs	r3, #1
 80038dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038de:	210f      	movs	r1, #15
 80038e0:	f04f 30ff 	mov.w	r0, #4294967295
 80038e4:	f7ff ff8e 	bl	8003804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038e8:	4b05      	ldr	r3, [pc, #20]	; (8003900 <SysTick_Config+0x40>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ee:	4b04      	ldr	r3, [pc, #16]	; (8003900 <SysTick_Config+0x40>)
 80038f0:	2207      	movs	r2, #7
 80038f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	e000e010 	.word	0xe000e010

08003904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7ff ff29 	bl	8003764 <__NVIC_SetPriorityGrouping>
}
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b086      	sub	sp, #24
 800391e:	af00      	add	r7, sp, #0
 8003920:	4603      	mov	r3, r0
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
 8003926:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003928:	f7ff ff40 	bl	80037ac <__NVIC_GetPriorityGrouping>
 800392c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	68b9      	ldr	r1, [r7, #8]
 8003932:	6978      	ldr	r0, [r7, #20]
 8003934:	f7ff ff90 	bl	8003858 <NVIC_EncodePriority>
 8003938:	4602      	mov	r2, r0
 800393a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800393e:	4611      	mov	r1, r2
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff ff5f 	bl	8003804 <__NVIC_SetPriority>
}
 8003946:	bf00      	nop
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	4603      	mov	r3, r0
 8003956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff ff33 	bl	80037c8 <__NVIC_EnableIRQ>
}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b082      	sub	sp, #8
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff ffa4 	bl	80038c0 <SysTick_Config>
 8003978:	4603      	mov	r3, r0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
	...

08003984 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e147      	b.n	8003c26 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7fe f9d8 	bl	8001d60 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	699a      	ldr	r2, [r3, #24]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0210 	bic.w	r2, r2, #16
 80039be:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039c0:	f7fe fee8 	bl	8002794 <HAL_GetTick>
 80039c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80039c6:	e012      	b.n	80039ee <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80039c8:	f7fe fee4 	bl	8002794 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b0a      	cmp	r3, #10
 80039d4:	d90b      	bls.n	80039ee <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039da:	f043 0201 	orr.w	r2, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2203      	movs	r2, #3
 80039e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e11b      	b.n	8003c26 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d0e5      	beq.n	80039c8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699a      	ldr	r2, [r3, #24]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a0c:	f7fe fec2 	bl	8002794 <HAL_GetTick>
 8003a10:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a12:	e012      	b.n	8003a3a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003a14:	f7fe febe 	bl	8002794 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b0a      	cmp	r3, #10
 8003a20:	d90b      	bls.n	8003a3a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a26:	f043 0201 	orr.w	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2203      	movs	r2, #3
 8003a32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e0f5      	b.n	8003c26 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0e5      	beq.n	8003a14 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699a      	ldr	r2, [r3, #24]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0202 	orr.w	r2, r2, #2
 8003a56:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a74      	ldr	r2, [pc, #464]	; (8003c30 <HAL_FDCAN_Init+0x2ac>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d103      	bne.n	8003a6a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003a62:	4a74      	ldr	r2, [pc, #464]	; (8003c34 <HAL_FDCAN_Init+0x2b0>)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	7c1b      	ldrb	r3, [r3, #16]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d108      	bne.n	8003a84 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	699a      	ldr	r2, [r3, #24]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a80:	619a      	str	r2, [r3, #24]
 8003a82:	e007      	b.n	8003a94 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a92:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	7c5b      	ldrb	r3, [r3, #17]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d108      	bne.n	8003aae <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699a      	ldr	r2, [r3, #24]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003aaa:	619a      	str	r2, [r3, #24]
 8003aac:	e007      	b.n	8003abe <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699a      	ldr	r2, [r3, #24]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003abc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	7c9b      	ldrb	r3, [r3, #18]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d108      	bne.n	8003ad8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699a      	ldr	r2, [r3, #24]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ad4:	619a      	str	r2, [r3, #24]
 8003ad6:	e007      	b.n	8003ae8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699a      	ldr	r2, [r3, #24]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ae6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	699a      	ldr	r2, [r3, #24]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003b0c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0210 	bic.w	r2, r2, #16
 8003b1c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d108      	bne.n	8003b38 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699a      	ldr	r2, [r3, #24]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0204 	orr.w	r2, r2, #4
 8003b34:	619a      	str	r2, [r3, #24]
 8003b36:	e02c      	b.n	8003b92 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d028      	beq.n	8003b92 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d01c      	beq.n	8003b82 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699a      	ldr	r2, [r3, #24]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b56:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0210 	orr.w	r2, r2, #16
 8003b66:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d110      	bne.n	8003b92 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 0220 	orr.w	r2, r2, #32
 8003b7e:	619a      	str	r2, [r3, #24]
 8003b80:	e007      	b.n	8003b92 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699a      	ldr	r2, [r3, #24]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0220 	orr.w	r2, r2, #32
 8003b90:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ba2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003baa:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003bba:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bbc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bc6:	d115      	bne.n	8003bf4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bcc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003bd6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003be0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	3b01      	subs	r3, #1
 8003bea:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003bf0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003bf2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f814 	bl	8003c38 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	40006400 	.word	0x40006400
 8003c34:	40006500 	.word	0x40006500

08003c38 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003c40:	4b2c      	ldr	r3, [pc, #176]	; (8003cf4 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8003c42:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a2b      	ldr	r2, [pc, #172]	; (8003cf8 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d103      	bne.n	8003c56 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003c54:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c64:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6c:	041a      	lsls	r2, r3, #16
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c8a:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c92:	061a      	lsls	r2, r3, #24
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	e005      	b.n	8003cd8 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d3f3      	bcc.n	8003ccc <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8003ce4:	bf00      	nop
 8003ce6:	bf00      	nop
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	4000a400 	.word	0x4000a400
 8003cf8:	40006800 	.word	0x40006800

08003cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d0a:	e15a      	b.n	8003fc2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	2101      	movs	r1, #1
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	fa01 f303 	lsl.w	r3, r1, r3
 8003d18:	4013      	ands	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 814c 	beq.w	8003fbc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 0303 	and.w	r3, r3, #3
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d005      	beq.n	8003d3c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d130      	bne.n	8003d9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	2203      	movs	r2, #3
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4013      	ands	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d72:	2201      	movs	r2, #1
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	091b      	lsrs	r3, r3, #4
 8003d88:	f003 0201 	and.w	r2, r3, #1
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	2b03      	cmp	r3, #3
 8003da8:	d017      	beq.n	8003dda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	2203      	movs	r2, #3
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d123      	bne.n	8003e2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	08da      	lsrs	r2, r3, #3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3208      	adds	r2, #8
 8003dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003df2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	220f      	movs	r2, #15
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43db      	mvns	r3, r3
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4013      	ands	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	691a      	ldr	r2, [r3, #16]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	08da      	lsrs	r2, r3, #3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3208      	adds	r2, #8
 8003e28:	6939      	ldr	r1, [r7, #16]
 8003e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	2203      	movs	r2, #3
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4013      	ands	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f003 0203 	and.w	r2, r3, #3
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 80a6 	beq.w	8003fbc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e70:	4b5b      	ldr	r3, [pc, #364]	; (8003fe0 <HAL_GPIO_Init+0x2e4>)
 8003e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e74:	4a5a      	ldr	r2, [pc, #360]	; (8003fe0 <HAL_GPIO_Init+0x2e4>)
 8003e76:	f043 0301 	orr.w	r3, r3, #1
 8003e7a:	6613      	str	r3, [r2, #96]	; 0x60
 8003e7c:	4b58      	ldr	r3, [pc, #352]	; (8003fe0 <HAL_GPIO_Init+0x2e4>)
 8003e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	60bb      	str	r3, [r7, #8]
 8003e86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e88:	4a56      	ldr	r2, [pc, #344]	; (8003fe4 <HAL_GPIO_Init+0x2e8>)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	089b      	lsrs	r3, r3, #2
 8003e8e:	3302      	adds	r3, #2
 8003e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f003 0303 	and.w	r3, r3, #3
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	220f      	movs	r2, #15
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003eb2:	d01f      	beq.n	8003ef4 <HAL_GPIO_Init+0x1f8>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a4c      	ldr	r2, [pc, #304]	; (8003fe8 <HAL_GPIO_Init+0x2ec>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d019      	beq.n	8003ef0 <HAL_GPIO_Init+0x1f4>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a4b      	ldr	r2, [pc, #300]	; (8003fec <HAL_GPIO_Init+0x2f0>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d013      	beq.n	8003eec <HAL_GPIO_Init+0x1f0>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a4a      	ldr	r2, [pc, #296]	; (8003ff0 <HAL_GPIO_Init+0x2f4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d00d      	beq.n	8003ee8 <HAL_GPIO_Init+0x1ec>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a49      	ldr	r2, [pc, #292]	; (8003ff4 <HAL_GPIO_Init+0x2f8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d007      	beq.n	8003ee4 <HAL_GPIO_Init+0x1e8>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a48      	ldr	r2, [pc, #288]	; (8003ff8 <HAL_GPIO_Init+0x2fc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d101      	bne.n	8003ee0 <HAL_GPIO_Init+0x1e4>
 8003edc:	2305      	movs	r3, #5
 8003ede:	e00a      	b.n	8003ef6 <HAL_GPIO_Init+0x1fa>
 8003ee0:	2306      	movs	r3, #6
 8003ee2:	e008      	b.n	8003ef6 <HAL_GPIO_Init+0x1fa>
 8003ee4:	2304      	movs	r3, #4
 8003ee6:	e006      	b.n	8003ef6 <HAL_GPIO_Init+0x1fa>
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e004      	b.n	8003ef6 <HAL_GPIO_Init+0x1fa>
 8003eec:	2302      	movs	r3, #2
 8003eee:	e002      	b.n	8003ef6 <HAL_GPIO_Init+0x1fa>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e000      	b.n	8003ef6 <HAL_GPIO_Init+0x1fa>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	f002 0203 	and.w	r2, r2, #3
 8003efc:	0092      	lsls	r2, r2, #2
 8003efe:	4093      	lsls	r3, r2
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f06:	4937      	ldr	r1, [pc, #220]	; (8003fe4 <HAL_GPIO_Init+0x2e8>)
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	089b      	lsrs	r3, r3, #2
 8003f0c:	3302      	adds	r3, #2
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f14:	4b39      	ldr	r3, [pc, #228]	; (8003ffc <HAL_GPIO_Init+0x300>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4013      	ands	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f38:	4a30      	ldr	r2, [pc, #192]	; (8003ffc <HAL_GPIO_Init+0x300>)
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f3e:	4b2f      	ldr	r3, [pc, #188]	; (8003ffc <HAL_GPIO_Init+0x300>)
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	43db      	mvns	r3, r3
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f62:	4a26      	ldr	r2, [pc, #152]	; (8003ffc <HAL_GPIO_Init+0x300>)
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003f68:	4b24      	ldr	r3, [pc, #144]	; (8003ffc <HAL_GPIO_Init+0x300>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	43db      	mvns	r3, r3
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	4013      	ands	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f8c:	4a1b      	ldr	r2, [pc, #108]	; (8003ffc <HAL_GPIO_Init+0x300>)
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f92:	4b1a      	ldr	r3, [pc, #104]	; (8003ffc <HAL_GPIO_Init+0x300>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003fb6:	4a11      	ldr	r2, [pc, #68]	; (8003ffc <HAL_GPIO_Init+0x300>)
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f47f ae9d 	bne.w	8003d0c <HAL_GPIO_Init+0x10>
  }
}
 8003fd2:	bf00      	nop
 8003fd4:	bf00      	nop
 8003fd6:	371c      	adds	r7, #28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	40010000 	.word	0x40010000
 8003fe8:	48000400 	.word	0x48000400
 8003fec:	48000800 	.word	0x48000800
 8003ff0:	48000c00 	.word	0x48000c00
 8003ff4:	48001000 	.word	0x48001000
 8003ff8:	48001400 	.word	0x48001400
 8003ffc:	40010400 	.word	0x40010400

08004000 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	460b      	mov	r3, r1
 800400a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691a      	ldr	r2, [r3, #16]
 8004010:	887b      	ldrh	r3, [r7, #2]
 8004012:	4013      	ands	r3, r2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004018:	2301      	movs	r3, #1
 800401a:	73fb      	strb	r3, [r7, #15]
 800401c:	e001      	b.n	8004022 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800401e:	2300      	movs	r3, #0
 8004020:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004022:	7bfb      	ldrb	r3, [r7, #15]
}
 8004024:	4618      	mov	r0, r3
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	807b      	strh	r3, [r7, #2]
 800403c:	4613      	mov	r3, r2
 800403e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004040:	787b      	ldrb	r3, [r7, #1]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004046:	887a      	ldrh	r2, [r7, #2]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800404c:	e002      	b.n	8004054 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800404e:	887a      	ldrh	r2, [r7, #2]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	460b      	mov	r3, r1
 800406a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004072:	887a      	ldrh	r2, [r7, #2]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4013      	ands	r3, r2
 8004078:	041a      	lsls	r2, r3, #16
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	43d9      	mvns	r1, r3
 800407e:	887b      	ldrh	r3, [r7, #2]
 8004080:	400b      	ands	r3, r1
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	619a      	str	r2, [r3, #24]
}
 8004088:	bf00      	nop
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004096:	b08b      	sub	sp, #44	; 0x2c
 8004098:	af06      	add	r7, sp, #24
 800409a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e0d7      	b.n	8004256 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d106      	bne.n	80040c0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f008 fd94 	bl	800cbe8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2203      	movs	r2, #3
 80040c4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f004 fcc6 	bl	8008a5e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040d2:	2300      	movs	r3, #0
 80040d4:	73fb      	strb	r3, [r7, #15]
 80040d6:	e04c      	b.n	8004172 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	4613      	mov	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	440b      	add	r3, r1
 80040e8:	3301      	adds	r3, #1
 80040ea:	2201      	movs	r2, #1
 80040ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
 80040f0:	6879      	ldr	r1, [r7, #4]
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	4613      	mov	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	440b      	add	r3, r1
 80040fe:	7bfa      	ldrb	r2, [r7, #15]
 8004100:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004102:	7bfa      	ldrb	r2, [r7, #15]
 8004104:	7bfb      	ldrb	r3, [r7, #15]
 8004106:	b298      	uxth	r0, r3
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	4613      	mov	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	440b      	add	r3, r1
 8004114:	3336      	adds	r3, #54	; 0x36
 8004116:	4602      	mov	r2, r0
 8004118:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800411a:	7bfb      	ldrb	r3, [r7, #15]
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	4613      	mov	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	440b      	add	r3, r1
 800412a:	3303      	adds	r3, #3
 800412c:	2200      	movs	r2, #0
 800412e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004130:	7bfa      	ldrb	r2, [r7, #15]
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	440b      	add	r3, r1
 800413e:	3338      	adds	r3, #56	; 0x38
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004144:	7bfa      	ldrb	r2, [r7, #15]
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	4613      	mov	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	440b      	add	r3, r1
 8004152:	333c      	adds	r3, #60	; 0x3c
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004158:	7bfa      	ldrb	r2, [r7, #15]
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	4613      	mov	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	440b      	add	r3, r1
 8004166:	3340      	adds	r3, #64	; 0x40
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	3301      	adds	r3, #1
 8004170:	73fb      	strb	r3, [r7, #15]
 8004172:	7bfa      	ldrb	r2, [r7, #15]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	429a      	cmp	r2, r3
 800417a:	d3ad      	bcc.n	80040d8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800417c:	2300      	movs	r3, #0
 800417e:	73fb      	strb	r3, [r7, #15]
 8004180:	e044      	b.n	800420c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004182:	7bfa      	ldrb	r2, [r7, #15]
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	4613      	mov	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	440b      	add	r3, r1
 8004190:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004194:	2200      	movs	r2, #0
 8004196:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004198:	7bfa      	ldrb	r2, [r7, #15]
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	440b      	add	r3, r1
 80041a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80041aa:	7bfa      	ldrb	r2, [r7, #15]
 80041ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041ae:	7bfa      	ldrb	r2, [r7, #15]
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	440b      	add	r3, r1
 80041bc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80041c0:	2200      	movs	r2, #0
 80041c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041c4:	7bfa      	ldrb	r2, [r7, #15]
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	4613      	mov	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	440b      	add	r3, r1
 80041d2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041da:	7bfa      	ldrb	r2, [r7, #15]
 80041dc:	6879      	ldr	r1, [r7, #4]
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	440b      	add	r3, r1
 80041e8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041f0:	7bfa      	ldrb	r2, [r7, #15]
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	4613      	mov	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	440b      	add	r3, r1
 80041fe:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004206:	7bfb      	ldrb	r3, [r7, #15]
 8004208:	3301      	adds	r3, #1
 800420a:	73fb      	strb	r3, [r7, #15]
 800420c:	7bfa      	ldrb	r2, [r7, #15]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	429a      	cmp	r2, r3
 8004214:	d3b5      	bcc.n	8004182 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	687e      	ldr	r6, [r7, #4]
 800421e:	466d      	mov	r5, sp
 8004220:	f106 0410 	add.w	r4, r6, #16
 8004224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004226:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	602b      	str	r3, [r5, #0]
 800422c:	1d33      	adds	r3, r6, #4
 800422e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004230:	6838      	ldr	r0, [r7, #0]
 8004232:	f004 fc2f 	bl	8008a94 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d102      	bne.n	8004254 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f001 fc29 	bl	8005aa6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800425e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b082      	sub	sp, #8
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800426c:	2b01      	cmp	r3, #1
 800426e:	d101      	bne.n	8004274 <HAL_PCD_Start+0x16>
 8004270:	2302      	movs	r3, #2
 8004272:	e012      	b.n	800429a <HAL_PCD_Start+0x3c>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4618      	mov	r0, r3
 8004282:	f004 fbd5 	bl	8008a30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f006 fdee 	bl	800ae6c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f006 fdf3 	bl	800ae9a <USB_ReadInterrupts>
 80042b4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 fb26 	bl	8004912 <PCD_EP_ISR_Handler>

    return;
 80042c6:	e110      	b.n	80044ea <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d013      	beq.n	80042fa <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042da:	b29a      	uxth	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e4:	b292      	uxth	r2, r2
 80042e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f008 fd0d 	bl	800cd0a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80042f0:	2100      	movs	r1, #0
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f8fc 	bl	80044f0 <HAL_PCD_SetAddress>

    return;
 80042f8:	e0f7      	b.n	80044ea <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00c      	beq.n	800431e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800430c:	b29a      	uxth	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004316:	b292      	uxth	r2, r2
 8004318:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800431c:	e0e5      	b.n	80044ea <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00c      	beq.n	8004342 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004330:	b29a      	uxth	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800433a:	b292      	uxth	r2, r2
 800433c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004340:	e0d3      	b.n	80044ea <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d034      	beq.n	80043b6 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004354:	b29a      	uxth	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0204 	bic.w	r2, r2, #4
 800435e:	b292      	uxth	r2, r2
 8004360:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800436c:	b29a      	uxth	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0208 	bic.w	r2, r2, #8
 8004376:	b292      	uxth	r2, r2
 8004378:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8004382:	2b01      	cmp	r3, #1
 8004384:	d107      	bne.n	8004396 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800438e:	2100      	movs	r1, #0
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f008 feaf 	bl	800d0f4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f008 fcf0 	bl	800cd7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043ae:	b292      	uxth	r2, r2
 80043b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80043b4:	e099      	b.n	80044ea <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d027      	beq.n	8004410 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0208 	orr.w	r2, r2, #8
 80043d2:	b292      	uxth	r2, r2
 80043d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043ea:	b292      	uxth	r2, r2
 80043ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0204 	orr.w	r2, r2, #4
 8004402:	b292      	uxth	r2, r2
 8004404:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f008 fc9d 	bl	800cd48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800440e:	e06c      	b.n	80044ea <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004416:	2b00      	cmp	r3, #0
 8004418:	d040      	beq.n	800449c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004422:	b29a      	uxth	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800442c:	b292      	uxth	r2, r2
 800442e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d12b      	bne.n	8004494 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004444:	b29a      	uxth	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0204 	orr.w	r2, r2, #4
 800444e:	b292      	uxth	r2, r2
 8004450:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800445c:	b29a      	uxth	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0208 	orr.w	r2, r2, #8
 8004466:	b292      	uxth	r2, r2
 8004468:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800447c:	b29b      	uxth	r3, r3
 800447e:	089b      	lsrs	r3, r3, #2
 8004480:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800448a:	2101      	movs	r1, #1
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f008 fe31 	bl	800d0f4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004492:	e02a      	b.n	80044ea <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f008 fc57 	bl	800cd48 <HAL_PCD_SuspendCallback>
    return;
 800449a:	e026      	b.n	80044ea <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00f      	beq.n	80044c6 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80044b8:	b292      	uxth	r2, r2
 80044ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f008 fc15 	bl	800ccee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80044c4:	e011      	b.n	80044ea <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00c      	beq.n	80044ea <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044d8:	b29a      	uxth	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044e2:	b292      	uxth	r2, r2
 80044e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80044e8:	bf00      	nop
  }
}
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	460b      	mov	r3, r1
 80044fa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004502:	2b01      	cmp	r3, #1
 8004504:	d101      	bne.n	800450a <HAL_PCD_SetAddress+0x1a>
 8004506:	2302      	movs	r3, #2
 8004508:	e013      	b.n	8004532 <HAL_PCD_SetAddress+0x42>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	78fa      	ldrb	r2, [r7, #3]
 8004516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	78fa      	ldrb	r2, [r7, #3]
 8004520:	4611      	mov	r1, r2
 8004522:	4618      	mov	r0, r3
 8004524:	f006 fc8e 	bl	800ae44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b084      	sub	sp, #16
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
 8004542:	4608      	mov	r0, r1
 8004544:	4611      	mov	r1, r2
 8004546:	461a      	mov	r2, r3
 8004548:	4603      	mov	r3, r0
 800454a:	70fb      	strb	r3, [r7, #3]
 800454c:	460b      	mov	r3, r1
 800454e:	803b      	strh	r3, [r7, #0]
 8004550:	4613      	mov	r3, r2
 8004552:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004558:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800455c:	2b00      	cmp	r3, #0
 800455e:	da0e      	bge.n	800457e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004560:	78fb      	ldrb	r3, [r7, #3]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	4613      	mov	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	4413      	add	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2201      	movs	r2, #1
 800457a:	705a      	strb	r2, [r3, #1]
 800457c:	e00e      	b.n	800459c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800457e:	78fb      	ldrb	r3, [r7, #3]
 8004580:	f003 0207 	and.w	r2, r3, #7
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	4413      	add	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800459c:	78fb      	ldrb	r3, [r7, #3]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80045a8:	883a      	ldrh	r2, [r7, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	78ba      	ldrb	r2, [r7, #2]
 80045b2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	785b      	ldrb	r3, [r3, #1]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d004      	beq.n	80045c6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80045c6:	78bb      	ldrb	r3, [r7, #2]
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d102      	bne.n	80045d2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_PCD_EP_Open+0xa6>
 80045dc:	2302      	movs	r3, #2
 80045de:	e00e      	b.n	80045fe <HAL_PCD_EP_Open+0xc4>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68f9      	ldr	r1, [r7, #12]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f004 fa72 	bl	8008ad8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80045fc:	7afb      	ldrb	r3, [r7, #11]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b084      	sub	sp, #16
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
 800460e:	460b      	mov	r3, r1
 8004610:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004612:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004616:	2b00      	cmp	r3, #0
 8004618:	da0e      	bge.n	8004638 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800461a:	78fb      	ldrb	r3, [r7, #3]
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	4613      	mov	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	4413      	add	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2201      	movs	r2, #1
 8004634:	705a      	strb	r2, [r3, #1]
 8004636:	e00e      	b.n	8004656 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	f003 0207 	and.w	r2, r3, #7
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	4413      	add	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004656:	78fb      	ldrb	r3, [r7, #3]
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	b2da      	uxtb	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_PCD_EP_Close+0x6a>
 800466c:	2302      	movs	r3, #2
 800466e:	e00e      	b.n	800468e <HAL_PCD_EP_Close+0x88>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68f9      	ldr	r1, [r7, #12]
 800467e:	4618      	mov	r0, r3
 8004680:	f004 fdbe 	bl	8009200 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b086      	sub	sp, #24
 800469a:	af00      	add	r7, sp, #0
 800469c:	60f8      	str	r0, [r7, #12]
 800469e:	607a      	str	r2, [r7, #4]
 80046a0:	603b      	str	r3, [r7, #0]
 80046a2:	460b      	mov	r3, r1
 80046a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046a6:	7afb      	ldrb	r3, [r7, #11]
 80046a8:	f003 0207 	and.w	r2, r3, #7
 80046ac:	4613      	mov	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	4413      	add	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2200      	movs	r2, #0
 80046ce:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2200      	movs	r2, #0
 80046d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046d6:	7afb      	ldrb	r3, [r7, #11]
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046e2:	7afb      	ldrb	r3, [r7, #11]
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d106      	bne.n	80046fa <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6979      	ldr	r1, [r7, #20]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f004 ff71 	bl	80095da <USB_EPStartXfer>
 80046f8:	e005      	b.n	8004706 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6979      	ldr	r1, [r7, #20]
 8004700:	4618      	mov	r0, r3
 8004702:	f004 ff6a 	bl	80095da <USB_EPStartXfer>
  }

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	460b      	mov	r3, r1
 800471a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800471c:	78fb      	ldrb	r3, [r7, #3]
 800471e:	f003 0207 	and.w	r2, r3, #7
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	440b      	add	r3, r1
 800472e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004732:	681b      	ldr	r3, [r3, #0]
}
 8004734:	4618      	mov	r0, r3
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	607a      	str	r2, [r7, #4]
 800474a:	603b      	str	r3, [r7, #0]
 800474c:	460b      	mov	r3, r1
 800474e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004750:	7afb      	ldrb	r3, [r7, #11]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	4613      	mov	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	4413      	add	r3, r2
 8004764:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2200      	movs	r2, #0
 8004784:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2201      	movs	r2, #1
 800478a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800478c:	7afb      	ldrb	r3, [r7, #11]
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	b2da      	uxtb	r2, r3
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004798:	7afb      	ldrb	r3, [r7, #11]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d106      	bne.n	80047b0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6979      	ldr	r1, [r7, #20]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f004 ff16 	bl	80095da <USB_EPStartXfer>
 80047ae:	e005      	b.n	80047bc <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6979      	ldr	r1, [r7, #20]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f004 ff0f 	bl	80095da <USB_EPStartXfer>
  }

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b084      	sub	sp, #16
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	460b      	mov	r3, r1
 80047d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80047d2:	78fb      	ldrb	r3, [r7, #3]
 80047d4:	f003 0207 	and.w	r2, r3, #7
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d901      	bls.n	80047e4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e03e      	b.n	8004862 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80047e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	da0e      	bge.n	800480a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047ec:	78fb      	ldrb	r3, [r7, #3]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	4613      	mov	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	4413      	add	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2201      	movs	r2, #1
 8004806:	705a      	strb	r2, [r3, #1]
 8004808:	e00c      	b.n	8004824 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800480a:	78fa      	ldrb	r2, [r7, #3]
 800480c:	4613      	mov	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	4413      	add	r3, r2
 800481c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2201      	movs	r2, #1
 8004828:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800482a:	78fb      	ldrb	r3, [r7, #3]
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	b2da      	uxtb	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800483c:	2b01      	cmp	r3, #1
 800483e:	d101      	bne.n	8004844 <HAL_PCD_EP_SetStall+0x7e>
 8004840:	2302      	movs	r3, #2
 8004842:	e00e      	b.n	8004862 <HAL_PCD_EP_SetStall+0x9c>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68f9      	ldr	r1, [r7, #12]
 8004852:	4618      	mov	r0, r3
 8004854:	f006 f9f7 	bl	800ac46 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b084      	sub	sp, #16
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
 8004872:	460b      	mov	r3, r1
 8004874:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004876:	78fb      	ldrb	r3, [r7, #3]
 8004878:	f003 020f 	and.w	r2, r3, #15
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	429a      	cmp	r2, r3
 8004882:	d901      	bls.n	8004888 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e040      	b.n	800490a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004888:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800488c:	2b00      	cmp	r3, #0
 800488e:	da0e      	bge.n	80048ae <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004890:	78fb      	ldrb	r3, [r7, #3]
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	4613      	mov	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	4413      	add	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2201      	movs	r2, #1
 80048aa:	705a      	strb	r2, [r3, #1]
 80048ac:	e00e      	b.n	80048cc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048ae:	78fb      	ldrb	r3, [r7, #3]
 80048b0:	f003 0207 	and.w	r2, r3, #7
 80048b4:	4613      	mov	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	4413      	add	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048d2:	78fb      	ldrb	r3, [r7, #3]
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d101      	bne.n	80048ec <HAL_PCD_EP_ClrStall+0x82>
 80048e8:	2302      	movs	r3, #2
 80048ea:	e00e      	b.n	800490a <HAL_PCD_EP_ClrStall+0xa0>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68f9      	ldr	r1, [r7, #12]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f006 f9f4 	bl	800ace8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b096      	sub	sp, #88	; 0x58
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800491a:	e39c      	b.n	8005056 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004924:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004928:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800492c:	b2db      	uxtb	r3, r3
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8004936:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800493a:	2b00      	cmp	r3, #0
 800493c:	f040 815e 	bne.w	8004bfc <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004940:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004944:	f003 0310 	and.w	r3, r3, #16
 8004948:	2b00      	cmp	r3, #0
 800494a:	d150      	bne.n	80049ee <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	b29b      	uxth	r3, r3
 8004954:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495c:	81fb      	strh	r3, [r7, #14]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	89fb      	ldrh	r3, [r7, #14]
 8004964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800496c:	b29b      	uxth	r3, r3
 800496e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3328      	adds	r3, #40	; 0x28
 8004974:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800497e:	b29b      	uxth	r3, r3
 8004980:	461a      	mov	r2, r3
 8004982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	4413      	add	r3, r2
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6812      	ldr	r2, [r2, #0]
 800498e:	4413      	add	r3, r2
 8004990:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800499a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800499c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800499e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a0:	695a      	ldr	r2, [r3, #20]
 80049a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	441a      	add	r2, r3
 80049a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049aa:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80049ac:	2100      	movs	r1, #0
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f008 f983 	bl	800ccba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 834a 	beq.w	8005056 <PCD_EP_ISR_Handler+0x744>
 80049c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f040 8345 	bne.w	8005056 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	b292      	uxth	r2, r2
 80049e0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80049ec:	e333      	b.n	8005056 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049f4:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	881b      	ldrh	r3, [r3, #0]
 80049fc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004a00:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d032      	beq.n	8004a72 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	461a      	mov	r2, r3
 8004a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	4413      	add	r3, r2
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6812      	ldr	r2, [r2, #0]
 8004a24:	4413      	add	r3, r2
 8004a26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a32:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6818      	ldr	r0, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a40:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a44:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	f006 fa79 	bl	800af3e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004a58:	4013      	ands	r3, r2
 8004a5a:	823b      	strh	r3, [r7, #16]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	8a3a      	ldrh	r2, [r7, #16]
 8004a62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a66:	b292      	uxth	r2, r2
 8004a68:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f008 f8f8 	bl	800cc60 <HAL_PCD_SetupStageCallback>
 8004a70:	e2f1      	b.n	8005056 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004a72:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f280 82ed 	bge.w	8005056 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004a88:	4013      	ands	r3, r2
 8004a8a:	83fb      	strh	r3, [r7, #30]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	8bfa      	ldrh	r2, [r7, #30]
 8004a92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a96:	b292      	uxth	r2, r2
 8004a98:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	4413      	add	r3, r2
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6812      	ldr	r2, [r2, #0]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ab8:	881b      	ldrh	r3, [r3, #0]
 8004aba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ac0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d019      	beq.n	8004afe <PCD_EP_ISR_Handler+0x1ec>
 8004aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d015      	beq.n	8004afe <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6818      	ldr	r0, [r3, #0]
 8004ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad8:	6959      	ldr	r1, [r3, #20]
 8004ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004adc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ae0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	f006 fa2b 	bl	800af3e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aea:	695a      	ldr	r2, [r3, #20]
 8004aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	441a      	add	r2, r3
 8004af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004af4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004af6:	2100      	movs	r1, #0
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f008 f8c3 	bl	800cc84 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f040 82a3 	bne.w	8005056 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	61bb      	str	r3, [r7, #24]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	461a      	mov	r2, r3
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	4413      	add	r3, r2
 8004b26:	61bb      	str	r3, [r7, #24]
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	2b3e      	cmp	r3, #62	; 0x3e
 8004b36:	d918      	bls.n	8004b6a <PCD_EP_ISR_Handler+0x258>
 8004b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	095b      	lsrs	r3, r3, #5
 8004b3e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	f003 031f 	and.w	r3, r3, #31
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d102      	bne.n	8004b52 <PCD_EP_ISR_Handler+0x240>
 8004b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	647b      	str	r3, [r7, #68]	; 0x44
 8004b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	029b      	lsls	r3, r3, #10
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	801a      	strh	r2, [r3, #0]
 8004b68:	e029      	b.n	8004bbe <PCD_EP_ISR_Handler+0x2ac>
 8004b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d112      	bne.n	8004b98 <PCD_EP_ISR_Handler+0x286>
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	801a      	strh	r2, [r3, #0]
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	801a      	strh	r2, [r3, #0]
 8004b96:	e012      	b.n	8004bbe <PCD_EP_ISR_Handler+0x2ac>
 8004b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	085b      	lsrs	r3, r3, #1
 8004b9e:	647b      	str	r3, [r7, #68]	; 0x44
 8004ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <PCD_EP_ISR_Handler+0x2a0>
 8004bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bae:	3301      	adds	r3, #1
 8004bb0:	647b      	str	r3, [r7, #68]	; 0x44
 8004bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	029b      	lsls	r3, r3, #10
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	881b      	ldrh	r3, [r3, #0]
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bce:	827b      	strh	r3, [r7, #18]
 8004bd0:	8a7b      	ldrh	r3, [r7, #18]
 8004bd2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004bd6:	827b      	strh	r3, [r7, #18]
 8004bd8:	8a7b      	ldrh	r3, [r7, #18]
 8004bda:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004bde:	827b      	strh	r3, [r7, #18]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	8a7b      	ldrh	r3, [r7, #18]
 8004be6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	8013      	strh	r3, [r2, #0]
 8004bfa:	e22c      	b.n	8005056 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004c10:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f280 80f6 	bge.w	8004e06 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004c30:	4013      	ands	r3, r2
 8004c32:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004c48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c4c:	b292      	uxth	r2, r2
 8004c4e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004c50:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8004c54:	4613      	mov	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	4413      	add	r3, r2
 8004c64:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c68:	7b1b      	ldrb	r3, [r3, #12]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d123      	bne.n	8004cb6 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	461a      	mov	r2, r3
 8004c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	4413      	add	r3, r2
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6812      	ldr	r2, [r2, #0]
 8004c86:	4413      	add	r3, r2
 8004c88:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c92:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8004c96:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 808e 	beq.w	8004dbc <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6818      	ldr	r0, [r3, #0]
 8004ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca6:	6959      	ldr	r1, [r3, #20]
 8004ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004caa:	88da      	ldrh	r2, [r3, #6]
 8004cac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004cb0:	f006 f945 	bl	800af3e <USB_ReadPMA>
 8004cb4:	e082      	b.n	8004dbc <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cb8:	78db      	ldrb	r3, [r3, #3]
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d10a      	bne.n	8004cd4 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004cbe:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f9d3 	bl	8005072 <HAL_PCD_EP_DB_Receive>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004cd2:	e073      	b.n	8004dbc <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cee:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	441a      	add	r2, r3
 8004d00:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004d04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d022      	beq.n	8004d78 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	4413      	add	r3, r2
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	6812      	ldr	r2, [r2, #0]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d56:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8004d5a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d02c      	beq.n	8004dbc <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6818      	ldr	r0, [r3, #0]
 8004d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d68:	6959      	ldr	r1, [r3, #20]
 8004d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d6c:	891a      	ldrh	r2, [r3, #8]
 8004d6e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004d72:	f006 f8e4 	bl	800af3e <USB_ReadPMA>
 8004d76:	e021      	b.n	8004dbc <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	461a      	mov	r2, r3
 8004d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	4413      	add	r3, r2
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6812      	ldr	r2, [r2, #0]
 8004d90:	4413      	add	r3, r2
 8004d92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d9c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8004da0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d009      	beq.n	8004dbc <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6818      	ldr	r0, [r3, #0]
 8004dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dae:	6959      	ldr	r1, [r3, #20]
 8004db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004db2:	895a      	ldrh	r2, [r3, #10]
 8004db4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004db8:	f006 f8c1 	bl	800af3e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dbe:	69da      	ldr	r2, [r3, #28]
 8004dc0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004dc4:	441a      	add	r2, r3
 8004dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dc8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dcc:	695a      	ldr	r2, [r3, #20]
 8004dce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004dd2:	441a      	add	r2, r3
 8004dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dd6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <PCD_EP_ISR_Handler+0x4da>
 8004de0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d206      	bcs.n	8004dfa <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	4619      	mov	r1, r3
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f007 ff46 	bl	800cc84 <HAL_PCD_DataOutStageCallback>
 8004df8:	e005      	b.n	8004e06 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004e00:	4618      	mov	r0, r3
 8004e02:	f004 fbea 	bl	80095da <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004e06:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 8121 	beq.w	8005056 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8004e14:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	4413      	add	r3, r2
 8004e26:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	441a      	add	r2, r3
 8004e54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8004e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e66:	78db      	ldrb	r3, [r3, #3]
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	f000 80a2 	beq.w	8004fb2 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8004e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e70:	2200      	movs	r2, #0
 8004e72:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e76:	7b1b      	ldrb	r3, [r3, #12]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 8093 	beq.w	8004fa4 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004e7e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d046      	beq.n	8004f18 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e8c:	785b      	ldrb	r3, [r3, #1]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d126      	bne.n	8004ee0 <PCD_EP_ISR_Handler+0x5ce>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	627b      	str	r3, [r7, #36]	; 0x24
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	4413      	add	r3, r2
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	00da      	lsls	r2, r3, #3
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004eb8:	623b      	str	r3, [r7, #32]
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	801a      	strh	r2, [r3, #0]
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	801a      	strh	r2, [r3, #0]
 8004ede:	e061      	b.n	8004fa4 <PCD_EP_ISR_Handler+0x692>
 8004ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee2:	785b      	ldrb	r3, [r3, #1]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d15d      	bne.n	8004fa4 <PCD_EP_ISR_Handler+0x692>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	461a      	mov	r2, r3
 8004efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efc:	4413      	add	r3, r2
 8004efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	00da      	lsls	r2, r3, #3
 8004f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f08:	4413      	add	r3, r2
 8004f0a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004f0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f12:	2200      	movs	r2, #0
 8004f14:	801a      	strh	r2, [r3, #0]
 8004f16:	e045      	b.n	8004fa4 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f20:	785b      	ldrb	r3, [r3, #1]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d126      	bne.n	8004f74 <PCD_EP_ISR_Handler+0x662>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	461a      	mov	r2, r3
 8004f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f3a:	4413      	add	r3, r2
 8004f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	00da      	lsls	r2, r3, #3
 8004f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f46:	4413      	add	r3, r2
 8004f48:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f4c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5c:	801a      	strh	r2, [r3, #0]
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f70:	801a      	strh	r2, [r3, #0]
 8004f72:	e017      	b.n	8004fa4 <PCD_EP_ISR_Handler+0x692>
 8004f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f76:	785b      	ldrb	r3, [r3, #1]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d113      	bne.n	8004fa4 <PCD_EP_ISR_Handler+0x692>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	461a      	mov	r2, r3
 8004f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f8a:	4413      	add	r3, r2
 8004f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	00da      	lsls	r2, r3, #3
 8004f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f96:	4413      	add	r3, r2
 8004f98:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	4619      	mov	r1, r3
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f007 fe85 	bl	800ccba <HAL_PCD_DataInStageCallback>
 8004fb0:	e051      	b.n	8005056 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004fb2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d144      	bne.n	8005048 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	461a      	mov	r2, r3
 8004fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	4413      	add	r3, r2
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6812      	ldr	r2, [r2, #0]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fe2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fe8:	699a      	ldr	r2, [r3, #24]
 8004fea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d907      	bls.n	8005002 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8004ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff4:	699a      	ldr	r2, [r3, #24]
 8004ff6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004ffa:	1ad2      	subs	r2, r2, r3
 8004ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ffe:	619a      	str	r2, [r3, #24]
 8005000:	e002      	b.n	8005008 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8005002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005004:	2200      	movs	r2, #0
 8005006:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d106      	bne.n	800501e <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	4619      	mov	r1, r3
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f007 fe4f 	bl	800ccba <HAL_PCD_DataInStageCallback>
 800501c:	e01b      	b.n	8005056 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800501e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005020:	695a      	ldr	r2, [r3, #20]
 8005022:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005026:	441a      	add	r2, r3
 8005028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800502a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800502c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800502e:	69da      	ldr	r2, [r3, #28]
 8005030:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005034:	441a      	add	r2, r3
 8005036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005038:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005040:	4618      	mov	r0, r3
 8005042:	f004 faca 	bl	80095da <USB_EPStartXfer>
 8005046:	e006      	b.n	8005056 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005048:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800504c:	461a      	mov	r2, r3
 800504e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 f917 	bl	8005284 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800505e:	b29b      	uxth	r3, r3
 8005060:	b21b      	sxth	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	f6ff ac5a 	blt.w	800491c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3758      	adds	r7, #88	; 0x58
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b088      	sub	sp, #32
 8005076:	af00      	add	r7, sp, #0
 8005078:	60f8      	str	r0, [r7, #12]
 800507a:	60b9      	str	r1, [r7, #8]
 800507c:	4613      	mov	r3, r2
 800507e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005080:	88fb      	ldrh	r3, [r7, #6]
 8005082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d07c      	beq.n	8005184 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005092:	b29b      	uxth	r3, r3
 8005094:	461a      	mov	r2, r3
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	4413      	add	r3, r2
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	6812      	ldr	r2, [r2, #0]
 80050a2:	4413      	add	r3, r2
 80050a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050ae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	699a      	ldr	r2, [r3, #24]
 80050b4:	8b7b      	ldrh	r3, [r7, #26]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d306      	bcc.n	80050c8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	8b7b      	ldrh	r3, [r7, #26]
 80050c0:	1ad2      	subs	r2, r2, r3
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	619a      	str	r2, [r3, #24]
 80050c6:	e002      	b.n	80050ce <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2200      	movs	r2, #0
 80050cc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d123      	bne.n	800511e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f0:	833b      	strh	r3, [r7, #24]
 80050f2:	8b3b      	ldrh	r3, [r7, #24]
 80050f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050f8:	833b      	strh	r3, [r7, #24]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	441a      	add	r2, r3
 8005108:	8b3b      	ldrh	r3, [r7, #24]
 800510a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800510e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800511a:	b29b      	uxth	r3, r3
 800511c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800511e:	88fb      	ldrh	r3, [r7, #6]
 8005120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005124:	2b00      	cmp	r3, #0
 8005126:	d01f      	beq.n	8005168 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	461a      	mov	r2, r3
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4413      	add	r3, r2
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	b29b      	uxth	r3, r3
 800513a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800513e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005142:	82fb      	strh	r3, [r7, #22]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	461a      	mov	r2, r3
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	441a      	add	r2, r3
 8005152:	8afb      	ldrh	r3, [r7, #22]
 8005154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800515c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005160:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005164:	b29b      	uxth	r3, r3
 8005166:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005168:	8b7b      	ldrh	r3, [r7, #26]
 800516a:	2b00      	cmp	r3, #0
 800516c:	f000 8085 	beq.w	800527a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6818      	ldr	r0, [r3, #0]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	6959      	ldr	r1, [r3, #20]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	891a      	ldrh	r2, [r3, #8]
 800517c:	8b7b      	ldrh	r3, [r7, #26]
 800517e:	f005 fede 	bl	800af3e <USB_ReadPMA>
 8005182:	e07a      	b.n	800527a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800518c:	b29b      	uxth	r3, r3
 800518e:	461a      	mov	r2, r3
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	4413      	add	r3, r2
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	6812      	ldr	r2, [r2, #0]
 800519c:	4413      	add	r3, r2
 800519e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80051a2:	881b      	ldrh	r3, [r3, #0]
 80051a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051a8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	8b7b      	ldrh	r3, [r7, #26]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d306      	bcc.n	80051c2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	699a      	ldr	r2, [r3, #24]
 80051b8:	8b7b      	ldrh	r3, [r7, #26]
 80051ba:	1ad2      	subs	r2, r2, r3
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	619a      	str	r2, [r3, #24]
 80051c0:	e002      	b.n	80051c8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2200      	movs	r2, #0
 80051c6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d123      	bne.n	8005218 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	461a      	mov	r2, r3
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ea:	83fb      	strh	r3, [r7, #30]
 80051ec:	8bfb      	ldrh	r3, [r7, #30]
 80051ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80051f2:	83fb      	strh	r3, [r7, #30]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	461a      	mov	r2, r3
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	441a      	add	r2, r3
 8005202:	8bfb      	ldrh	r3, [r7, #30]
 8005204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800520c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005214:	b29b      	uxth	r3, r3
 8005216:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005218:	88fb      	ldrh	r3, [r7, #6]
 800521a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521e:	2b00      	cmp	r3, #0
 8005220:	d11f      	bne.n	8005262 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	b29b      	uxth	r3, r3
 8005234:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523c:	83bb      	strh	r3, [r7, #28]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	441a      	add	r2, r3
 800524c:	8bbb      	ldrh	r3, [r7, #28]
 800524e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800525a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800525e:	b29b      	uxth	r3, r3
 8005260:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005262:	8b7b      	ldrh	r3, [r7, #26]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d008      	beq.n	800527a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6818      	ldr	r0, [r3, #0]
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	6959      	ldr	r1, [r3, #20]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	895a      	ldrh	r2, [r3, #10]
 8005274:	8b7b      	ldrh	r3, [r7, #26]
 8005276:	f005 fe62 	bl	800af3e <USB_ReadPMA>
    }
  }

  return count;
 800527a:	8b7b      	ldrh	r3, [r7, #26]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3720      	adds	r7, #32
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b0a2      	sub	sp, #136	; 0x88
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	4613      	mov	r3, r2
 8005290:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005292:	88fb      	ldrh	r3, [r7, #6]
 8005294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 81c5 	beq.w	8005628 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	461a      	mov	r2, r3
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	4413      	add	r3, r2
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	6812      	ldr	r2, [r2, #0]
 80052b6:	4413      	add	r3, r2
 80052b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052c2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	699a      	ldr	r2, [r3, #24]
 80052ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d907      	bls.n	80052e2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	699a      	ldr	r2, [r3, #24]
 80052d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80052da:	1ad2      	subs	r2, r2, r3
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	619a      	str	r2, [r3, #24]
 80052e0:	e002      	b.n	80052e8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2200      	movs	r2, #0
 80052e6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f040 80b9 	bne.w	8005464 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	785b      	ldrb	r3, [r3, #1]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d126      	bne.n	8005348 <HAL_PCD_EP_DB_Transmit+0xc4>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005308:	b29b      	uxth	r3, r3
 800530a:	461a      	mov	r2, r3
 800530c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530e:	4413      	add	r3, r2
 8005310:	62bb      	str	r3, [r7, #40]	; 0x28
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	00da      	lsls	r2, r3, #3
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	4413      	add	r3, r2
 800531c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	b29b      	uxth	r3, r3
 8005328:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800532c:	b29a      	uxth	r2, r3
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	801a      	strh	r2, [r3, #0]
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	b29b      	uxth	r3, r3
 8005338:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800533c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005340:	b29a      	uxth	r2, r3
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	801a      	strh	r2, [r3, #0]
 8005346:	e01a      	b.n	800537e <HAL_PCD_EP_DB_Transmit+0xfa>
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	785b      	ldrb	r3, [r3, #1]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d116      	bne.n	800537e <HAL_PCD_EP_DB_Transmit+0xfa>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	633b      	str	r3, [r7, #48]	; 0x30
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800535e:	b29b      	uxth	r3, r3
 8005360:	461a      	mov	r2, r3
 8005362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005364:	4413      	add	r3, r2
 8005366:	633b      	str	r3, [r7, #48]	; 0x30
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	00da      	lsls	r2, r3, #3
 800536e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005370:	4413      	add	r3, r2
 8005372:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005376:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537a:	2200      	movs	r2, #0
 800537c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	623b      	str	r3, [r7, #32]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	785b      	ldrb	r3, [r3, #1]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d126      	bne.n	80053da <HAL_PCD_EP_DB_Transmit+0x156>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	61bb      	str	r3, [r7, #24]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800539a:	b29b      	uxth	r3, r3
 800539c:	461a      	mov	r2, r3
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	4413      	add	r3, r2
 80053a2:	61bb      	str	r3, [r7, #24]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	00da      	lsls	r2, r3, #3
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	4413      	add	r3, r2
 80053ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80053b2:	617b      	str	r3, [r7, #20]
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	881b      	ldrh	r3, [r3, #0]
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053be:	b29a      	uxth	r2, r3
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	801a      	strh	r2, [r3, #0]
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	881b      	ldrh	r3, [r3, #0]
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	801a      	strh	r2, [r3, #0]
 80053d8:	e017      	b.n	800540a <HAL_PCD_EP_DB_Transmit+0x186>
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	785b      	ldrb	r3, [r3, #1]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d113      	bne.n	800540a <HAL_PCD_EP_DB_Transmit+0x186>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	461a      	mov	r2, r3
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	4413      	add	r3, r2
 80053f2:	623b      	str	r3, [r7, #32]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	00da      	lsls	r2, r3, #3
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	4413      	add	r3, r2
 80053fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005402:	61fb      	str	r3, [r7, #28]
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	2200      	movs	r2, #0
 8005408:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	4619      	mov	r1, r3
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f007 fc52 	bl	800ccba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005416:	88fb      	ldrh	r3, [r7, #6]
 8005418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 82d2 	beq.w	80059c6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	b29b      	uxth	r3, r3
 8005434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543c:	827b      	strh	r3, [r7, #18]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	441a      	add	r2, r3
 800544c:	8a7b      	ldrh	r3, [r7, #18]
 800544e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005456:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800545a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800545e:	b29b      	uxth	r3, r3
 8005460:	8013      	strh	r3, [r2, #0]
 8005462:	e2b0      	b.n	80059c6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005464:	88fb      	ldrh	r3, [r7, #6]
 8005466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d021      	beq.n	80054b2 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	b29b      	uxth	r3, r3
 8005480:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005488:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	461a      	mov	r2, r3
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	441a      	add	r2, r3
 800549a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800549e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	f040 8284 	bne.w	80059c6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	695a      	ldr	r2, [r3, #20]
 80054c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80054c6:	441a      	add	r2, r3
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	69da      	ldr	r2, [r3, #28]
 80054d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80054d4:	441a      	add	r2, r3
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	6a1a      	ldr	r2, [r3, #32]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d309      	bcc.n	80054fa <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	6a1a      	ldr	r2, [r3, #32]
 80054f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054f2:	1ad2      	subs	r2, r2, r3
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	621a      	str	r2, [r3, #32]
 80054f8:	e015      	b.n	8005526 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d107      	bne.n	8005512 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8005502:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005506:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005510:	e009      	b.n	8005526 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2200      	movs	r2, #0
 8005524:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	785b      	ldrb	r3, [r3, #1]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d155      	bne.n	80055da <HAL_PCD_EP_DB_Transmit+0x356>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	63bb      	str	r3, [r7, #56]	; 0x38
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800553c:	b29b      	uxth	r3, r3
 800553e:	461a      	mov	r2, r3
 8005540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005542:	4413      	add	r3, r2
 8005544:	63bb      	str	r3, [r7, #56]	; 0x38
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	00da      	lsls	r2, r3, #3
 800554c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554e:	4413      	add	r3, r2
 8005550:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005554:	637b      	str	r3, [r7, #52]	; 0x34
 8005556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005558:	2b3e      	cmp	r3, #62	; 0x3e
 800555a:	d916      	bls.n	800558a <HAL_PCD_EP_DB_Transmit+0x306>
 800555c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800555e:	095b      	lsrs	r3, r3, #5
 8005560:	64bb      	str	r3, [r7, #72]	; 0x48
 8005562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005564:	f003 031f 	and.w	r3, r3, #31
 8005568:	2b00      	cmp	r3, #0
 800556a:	d102      	bne.n	8005572 <HAL_PCD_EP_DB_Transmit+0x2ee>
 800556c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800556e:	3b01      	subs	r3, #1
 8005570:	64bb      	str	r3, [r7, #72]	; 0x48
 8005572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005574:	b29b      	uxth	r3, r3
 8005576:	029b      	lsls	r3, r3, #10
 8005578:	b29b      	uxth	r3, r3
 800557a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800557e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005582:	b29a      	uxth	r2, r3
 8005584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005586:	801a      	strh	r2, [r3, #0]
 8005588:	e043      	b.n	8005612 <HAL_PCD_EP_DB_Transmit+0x38e>
 800558a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800558c:	2b00      	cmp	r3, #0
 800558e:	d112      	bne.n	80055b6 <HAL_PCD_EP_DB_Transmit+0x332>
 8005590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	b29b      	uxth	r3, r3
 8005596:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800559a:	b29a      	uxth	r2, r3
 800559c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559e:	801a      	strh	r2, [r3, #0]
 80055a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b2:	801a      	strh	r2, [r3, #0]
 80055b4:	e02d      	b.n	8005612 <HAL_PCD_EP_DB_Transmit+0x38e>
 80055b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055b8:	085b      	lsrs	r3, r3, #1
 80055ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80055bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d002      	beq.n	80055cc <HAL_PCD_EP_DB_Transmit+0x348>
 80055c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055c8:	3301      	adds	r3, #1
 80055ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80055cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	029b      	lsls	r3, r3, #10
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d6:	801a      	strh	r2, [r3, #0]
 80055d8:	e01b      	b.n	8005612 <HAL_PCD_EP_DB_Transmit+0x38e>
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	785b      	ldrb	r3, [r3, #1]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d117      	bne.n	8005612 <HAL_PCD_EP_DB_Transmit+0x38e>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	643b      	str	r3, [r7, #64]	; 0x40
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	461a      	mov	r2, r3
 80055f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055f6:	4413      	add	r3, r2
 80055f8:	643b      	str	r3, [r7, #64]	; 0x40
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	00da      	lsls	r2, r3, #3
 8005600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005602:	4413      	add	r3, r2
 8005604:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800560a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800560c:	b29a      	uxth	r2, r3
 800560e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005610:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6818      	ldr	r0, [r3, #0]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	6959      	ldr	r1, [r3, #20]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	891a      	ldrh	r2, [r3, #8]
 800561e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005620:	b29b      	uxth	r3, r3
 8005622:	f005 fc4a 	bl	800aeba <USB_WritePMA>
 8005626:	e1ce      	b.n	80059c6 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005630:	b29b      	uxth	r3, r3
 8005632:	461a      	mov	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	4413      	add	r3, r2
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	6812      	ldr	r2, [r2, #0]
 8005640:	4413      	add	r3, r2
 8005642:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005646:	881b      	ldrh	r3, [r3, #0]
 8005648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800564c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	699a      	ldr	r2, [r3, #24]
 8005654:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005658:	429a      	cmp	r2, r3
 800565a:	d307      	bcc.n	800566c <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	699a      	ldr	r2, [r3, #24]
 8005660:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005664:	1ad2      	subs	r2, r2, r3
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	619a      	str	r2, [r3, #24]
 800566a:	e002      	b.n	8005672 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2200      	movs	r2, #0
 8005670:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	2b00      	cmp	r3, #0
 8005678:	f040 80c4 	bne.w	8005804 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	785b      	ldrb	r3, [r3, #1]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d126      	bne.n	80056d2 <HAL_PCD_EP_DB_Transmit+0x44e>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	66bb      	str	r3, [r7, #104]	; 0x68
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005692:	b29b      	uxth	r3, r3
 8005694:	461a      	mov	r2, r3
 8005696:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005698:	4413      	add	r3, r2
 800569a:	66bb      	str	r3, [r7, #104]	; 0x68
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	00da      	lsls	r2, r3, #3
 80056a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056a4:	4413      	add	r3, r2
 80056a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80056aa:	667b      	str	r3, [r7, #100]	; 0x64
 80056ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056ba:	801a      	strh	r2, [r3, #0]
 80056bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056ce:	801a      	strh	r2, [r3, #0]
 80056d0:	e01a      	b.n	8005708 <HAL_PCD_EP_DB_Transmit+0x484>
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	785b      	ldrb	r3, [r3, #1]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d116      	bne.n	8005708 <HAL_PCD_EP_DB_Transmit+0x484>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	673b      	str	r3, [r7, #112]	; 0x70
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	461a      	mov	r2, r3
 80056ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056ee:	4413      	add	r3, r2
 80056f0:	673b      	str	r3, [r7, #112]	; 0x70
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	00da      	lsls	r2, r3, #3
 80056f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056fa:	4413      	add	r3, r2
 80056fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005700:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005704:	2200      	movs	r2, #0
 8005706:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	785b      	ldrb	r3, [r3, #1]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d12f      	bne.n	8005776 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005726:	b29b      	uxth	r3, r3
 8005728:	461a      	mov	r2, r3
 800572a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800572e:	4413      	add	r3, r2
 8005730:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	00da      	lsls	r2, r3, #3
 800573a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800573e:	4413      	add	r3, r2
 8005740:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005744:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005748:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	b29b      	uxth	r3, r3
 8005750:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005754:	b29a      	uxth	r2, r3
 8005756:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800575a:	801a      	strh	r2, [r3, #0]
 800575c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	b29b      	uxth	r3, r3
 8005764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800576c:	b29a      	uxth	r2, r3
 800576e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005772:	801a      	strh	r2, [r3, #0]
 8005774:	e017      	b.n	80057a6 <HAL_PCD_EP_DB_Transmit+0x522>
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	785b      	ldrb	r3, [r3, #1]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d113      	bne.n	80057a6 <HAL_PCD_EP_DB_Transmit+0x522>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005786:	b29b      	uxth	r3, r3
 8005788:	461a      	mov	r2, r3
 800578a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800578c:	4413      	add	r3, r2
 800578e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	00da      	lsls	r2, r3, #3
 8005796:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005798:	4413      	add	r3, r2
 800579a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800579e:	67bb      	str	r3, [r7, #120]	; 0x78
 80057a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057a2:	2200      	movs	r2, #0
 80057a4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	4619      	mov	r1, r3
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f007 fa84 	bl	800ccba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80057b2:	88fb      	ldrh	r3, [r7, #6]
 80057b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f040 8104 	bne.w	80059c6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	461a      	mov	r2, r3
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	461a      	mov	r2, r3
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	441a      	add	r2, r3
 80057ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80057ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057fe:	b29b      	uxth	r3, r3
 8005800:	8013      	strh	r3, [r2, #0]
 8005802:	e0e0      	b.n	80059c6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005804:	88fb      	ldrh	r3, [r7, #6]
 8005806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d121      	bne.n	8005852 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	461a      	mov	r2, r3
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	b29b      	uxth	r3, r3
 8005820:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005828:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	461a      	mov	r2, r3
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	441a      	add	r2, r3
 800583a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800583e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005846:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800584a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800584e:	b29b      	uxth	r3, r3
 8005850:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005858:	2b01      	cmp	r3, #1
 800585a:	f040 80b4 	bne.w	80059c6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	695a      	ldr	r2, [r3, #20]
 8005862:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005866:	441a      	add	r2, r3
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	69da      	ldr	r2, [r3, #28]
 8005870:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005874:	441a      	add	r2, r3
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	6a1a      	ldr	r2, [r3, #32]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	429a      	cmp	r2, r3
 8005884:	d309      	bcc.n	800589a <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	6a1a      	ldr	r2, [r3, #32]
 8005890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005892:	1ad2      	subs	r2, r2, r3
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	621a      	str	r2, [r3, #32]
 8005898:	e015      	b.n	80058c6 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d107      	bne.n	80058b2 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80058a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80058a6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80058b0:	e009      	b.n	80058c6 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2200      	movs	r2, #0
 80058bc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	663b      	str	r3, [r7, #96]	; 0x60
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	785b      	ldrb	r3, [r3, #1]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d155      	bne.n	8005980 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	461a      	mov	r2, r3
 80058e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058e8:	4413      	add	r3, r2
 80058ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	00da      	lsls	r2, r3, #3
 80058f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058f4:	4413      	add	r3, r2
 80058f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058fa:	657b      	str	r3, [r7, #84]	; 0x54
 80058fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058fe:	2b3e      	cmp	r3, #62	; 0x3e
 8005900:	d916      	bls.n	8005930 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005904:	095b      	lsrs	r3, r3, #5
 8005906:	677b      	str	r3, [r7, #116]	; 0x74
 8005908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800590a:	f003 031f 	and.w	r3, r3, #31
 800590e:	2b00      	cmp	r3, #0
 8005910:	d102      	bne.n	8005918 <HAL_PCD_EP_DB_Transmit+0x694>
 8005912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005914:	3b01      	subs	r3, #1
 8005916:	677b      	str	r3, [r7, #116]	; 0x74
 8005918:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800591a:	b29b      	uxth	r3, r3
 800591c:	029b      	lsls	r3, r3, #10
 800591e:	b29b      	uxth	r3, r3
 8005920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005928:	b29a      	uxth	r2, r3
 800592a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800592c:	801a      	strh	r2, [r3, #0]
 800592e:	e040      	b.n	80059b2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005932:	2b00      	cmp	r3, #0
 8005934:	d112      	bne.n	800595c <HAL_PCD_EP_DB_Transmit+0x6d8>
 8005936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	b29b      	uxth	r3, r3
 800593c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005940:	b29a      	uxth	r2, r3
 8005942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005944:	801a      	strh	r2, [r3, #0]
 8005946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	b29b      	uxth	r3, r3
 800594c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005954:	b29a      	uxth	r2, r3
 8005956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005958:	801a      	strh	r2, [r3, #0]
 800595a:	e02a      	b.n	80059b2 <HAL_PCD_EP_DB_Transmit+0x72e>
 800595c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800595e:	085b      	lsrs	r3, r3, #1
 8005960:	677b      	str	r3, [r7, #116]	; 0x74
 8005962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <HAL_PCD_EP_DB_Transmit+0x6ee>
 800596c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800596e:	3301      	adds	r3, #1
 8005970:	677b      	str	r3, [r7, #116]	; 0x74
 8005972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005974:	b29b      	uxth	r3, r3
 8005976:	029b      	lsls	r3, r3, #10
 8005978:	b29a      	uxth	r2, r3
 800597a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800597c:	801a      	strh	r2, [r3, #0]
 800597e:	e018      	b.n	80059b2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	785b      	ldrb	r3, [r3, #1]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d114      	bne.n	80059b2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005990:	b29b      	uxth	r3, r3
 8005992:	461a      	mov	r2, r3
 8005994:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005996:	4413      	add	r3, r2
 8005998:	663b      	str	r3, [r7, #96]	; 0x60
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	00da      	lsls	r2, r3, #3
 80059a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059a2:	4413      	add	r3, r2
 80059a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80059a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059b0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6818      	ldr	r0, [r3, #0]
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	6959      	ldr	r1, [r3, #20]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	895a      	ldrh	r2, [r3, #10]
 80059be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	f005 fa7a 	bl	800aeba <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	461a      	mov	r2, r3
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059e0:	823b      	strh	r3, [r7, #16]
 80059e2:	8a3b      	ldrh	r3, [r7, #16]
 80059e4:	f083 0310 	eor.w	r3, r3, #16
 80059e8:	823b      	strh	r3, [r7, #16]
 80059ea:	8a3b      	ldrh	r3, [r7, #16]
 80059ec:	f083 0320 	eor.w	r3, r3, #32
 80059f0:	823b      	strh	r3, [r7, #16]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	441a      	add	r2, r3
 8005a00:	8a3b      	ldrh	r3, [r7, #16]
 8005a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3788      	adds	r7, #136	; 0x88
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	607b      	str	r3, [r7, #4]
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	817b      	strh	r3, [r7, #10]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005a32:	897b      	ldrh	r3, [r7, #10]
 8005a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00b      	beq.n	8005a56 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a3e:	897b      	ldrh	r3, [r7, #10]
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	1c5a      	adds	r2, r3, #1
 8005a46:	4613      	mov	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4413      	add	r3, r2
 8005a4c:	00db      	lsls	r3, r3, #3
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	4413      	add	r3, r2
 8005a52:	617b      	str	r3, [r7, #20]
 8005a54:	e009      	b.n	8005a6a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a56:	897a      	ldrh	r2, [r7, #10]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	4413      	add	r3, r2
 8005a68:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005a6a:	893b      	ldrh	r3, [r7, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d107      	bne.n	8005a80 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	2200      	movs	r2, #0
 8005a74:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	80da      	strh	r2, [r3, #6]
 8005a7e:	e00b      	b.n	8005a98 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	2201      	movs	r2, #1
 8005a84:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	0c1b      	lsrs	r3, r3, #16
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	371c      	adds	r7, #28
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b085      	sub	sp, #20
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	f043 0301 	orr.w	r3, r3, #1
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	f043 0302 	orr.w	r3, r3, #2
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
	...

08005afc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d141      	bne.n	8005b8e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b0a:	4b4b      	ldr	r3, [pc, #300]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b16:	d131      	bne.n	8005b7c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b18:	4b47      	ldr	r3, [pc, #284]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b1e:	4a46      	ldr	r2, [pc, #280]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b28:	4b43      	ldr	r3, [pc, #268]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b30:	4a41      	ldr	r2, [pc, #260]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b38:	4b40      	ldr	r3, [pc, #256]	; (8005c3c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2232      	movs	r2, #50	; 0x32
 8005b3e:	fb02 f303 	mul.w	r3, r2, r3
 8005b42:	4a3f      	ldr	r2, [pc, #252]	; (8005c40 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005b44:	fba2 2303 	umull	r2, r3, r2, r3
 8005b48:	0c9b      	lsrs	r3, r3, #18
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b4e:	e002      	b.n	8005b56 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b56:	4b38      	ldr	r3, [pc, #224]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b62:	d102      	bne.n	8005b6a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1f2      	bne.n	8005b50 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b6a:	4b33      	ldr	r3, [pc, #204]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b76:	d158      	bne.n	8005c2a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e057      	b.n	8005c2c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b7c:	4b2e      	ldr	r3, [pc, #184]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b82:	4a2d      	ldr	r2, [pc, #180]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005b8c:	e04d      	b.n	8005c2a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b94:	d141      	bne.n	8005c1a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b96:	4b28      	ldr	r3, [pc, #160]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba2:	d131      	bne.n	8005c08 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ba4:	4b24      	ldr	r3, [pc, #144]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005baa:	4a23      	ldr	r2, [pc, #140]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005bb4:	4b20      	ldr	r3, [pc, #128]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005bbc:	4a1e      	ldr	r2, [pc, #120]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bc2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005bc4:	4b1d      	ldr	r3, [pc, #116]	; (8005c3c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2232      	movs	r2, #50	; 0x32
 8005bca:	fb02 f303 	mul.w	r3, r2, r3
 8005bce:	4a1c      	ldr	r2, [pc, #112]	; (8005c40 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd4:	0c9b      	lsrs	r3, r3, #18
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bda:	e002      	b.n	8005be2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005be2:	4b15      	ldr	r3, [pc, #84]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bee:	d102      	bne.n	8005bf6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1f2      	bne.n	8005bdc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005bf6:	4b10      	ldr	r3, [pc, #64]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c02:	d112      	bne.n	8005c2a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e011      	b.n	8005c2c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c08:	4b0b      	ldr	r3, [pc, #44]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c0e:	4a0a      	ldr	r2, [pc, #40]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005c18:	e007      	b.n	8005c2a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005c1a:	4b07      	ldr	r3, [pc, #28]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005c22:	4a05      	ldr	r2, [pc, #20]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c28:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	40007000 	.word	0x40007000
 8005c3c:	20000000 	.word	0x20000000
 8005c40:	431bde83 	.word	0x431bde83

08005c44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e306      	b.n	8006264 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d075      	beq.n	8005d4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c62:	4b97      	ldr	r3, [pc, #604]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f003 030c 	and.w	r3, r3, #12
 8005c6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c6c:	4b94      	ldr	r3, [pc, #592]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f003 0303 	and.w	r3, r3, #3
 8005c74:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	2b0c      	cmp	r3, #12
 8005c7a:	d102      	bne.n	8005c82 <HAL_RCC_OscConfig+0x3e>
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	2b03      	cmp	r3, #3
 8005c80:	d002      	beq.n	8005c88 <HAL_RCC_OscConfig+0x44>
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	2b08      	cmp	r3, #8
 8005c86:	d10b      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c88:	4b8d      	ldr	r3, [pc, #564]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d05b      	beq.n	8005d4c <HAL_RCC_OscConfig+0x108>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d157      	bne.n	8005d4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e2e1      	b.n	8006264 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ca8:	d106      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x74>
 8005caa:	4b85      	ldr	r3, [pc, #532]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a84      	ldr	r2, [pc, #528]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	e01d      	b.n	8005cf4 <HAL_RCC_OscConfig+0xb0>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cc0:	d10c      	bne.n	8005cdc <HAL_RCC_OscConfig+0x98>
 8005cc2:	4b7f      	ldr	r3, [pc, #508]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a7e      	ldr	r2, [pc, #504]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	4b7c      	ldr	r3, [pc, #496]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a7b      	ldr	r2, [pc, #492]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cd8:	6013      	str	r3, [r2, #0]
 8005cda:	e00b      	b.n	8005cf4 <HAL_RCC_OscConfig+0xb0>
 8005cdc:	4b78      	ldr	r3, [pc, #480]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a77      	ldr	r2, [pc, #476]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ce6:	6013      	str	r3, [r2, #0]
 8005ce8:	4b75      	ldr	r3, [pc, #468]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a74      	ldr	r2, [pc, #464]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d013      	beq.n	8005d24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cfc:	f7fc fd4a 	bl	8002794 <HAL_GetTick>
 8005d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d04:	f7fc fd46 	bl	8002794 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b64      	cmp	r3, #100	; 0x64
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e2a6      	b.n	8006264 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d16:	4b6a      	ldr	r3, [pc, #424]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d0f0      	beq.n	8005d04 <HAL_RCC_OscConfig+0xc0>
 8005d22:	e014      	b.n	8005d4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d24:	f7fc fd36 	bl	8002794 <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d2c:	f7fc fd32 	bl	8002794 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b64      	cmp	r3, #100	; 0x64
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e292      	b.n	8006264 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d3e:	4b60      	ldr	r3, [pc, #384]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1f0      	bne.n	8005d2c <HAL_RCC_OscConfig+0xe8>
 8005d4a:	e000      	b.n	8005d4e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d075      	beq.n	8005e46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d5a:	4b59      	ldr	r3, [pc, #356]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f003 030c 	and.w	r3, r3, #12
 8005d62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d64:	4b56      	ldr	r3, [pc, #344]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f003 0303 	and.w	r3, r3, #3
 8005d6c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	2b0c      	cmp	r3, #12
 8005d72:	d102      	bne.n	8005d7a <HAL_RCC_OscConfig+0x136>
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d002      	beq.n	8005d80 <HAL_RCC_OscConfig+0x13c>
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	2b04      	cmp	r3, #4
 8005d7e:	d11f      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d80:	4b4f      	ldr	r3, [pc, #316]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d005      	beq.n	8005d98 <HAL_RCC_OscConfig+0x154>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e265      	b.n	8006264 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d98:	4b49      	ldr	r3, [pc, #292]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	061b      	lsls	r3, r3, #24
 8005da6:	4946      	ldr	r1, [pc, #280]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005dac:	4b45      	ldr	r3, [pc, #276]	; (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7fc fca3 	bl	80026fc <HAL_InitTick>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d043      	beq.n	8005e44 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e251      	b.n	8006264 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d023      	beq.n	8005e10 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dc8:	4b3d      	ldr	r3, [pc, #244]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a3c      	ldr	r2, [pc, #240]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd4:	f7fc fcde 	bl	8002794 <HAL_GetTick>
 8005dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dda:	e008      	b.n	8005dee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ddc:	f7fc fcda 	bl	8002794 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e23a      	b.n	8006264 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dee:	4b34      	ldr	r3, [pc, #208]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d0f0      	beq.n	8005ddc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dfa:	4b31      	ldr	r3, [pc, #196]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	061b      	lsls	r3, r3, #24
 8005e08:	492d      	ldr	r1, [pc, #180]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	604b      	str	r3, [r1, #4]
 8005e0e:	e01a      	b.n	8005e46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e10:	4b2b      	ldr	r3, [pc, #172]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a2a      	ldr	r2, [pc, #168]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005e16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e1c:	f7fc fcba 	bl	8002794 <HAL_GetTick>
 8005e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e22:	e008      	b.n	8005e36 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e24:	f7fc fcb6 	bl	8002794 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e216      	b.n	8006264 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e36:	4b22      	ldr	r3, [pc, #136]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1f0      	bne.n	8005e24 <HAL_RCC_OscConfig+0x1e0>
 8005e42:	e000      	b.n	8005e46 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0308 	and.w	r3, r3, #8
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d041      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d01c      	beq.n	8005e94 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e5a:	4b19      	ldr	r3, [pc, #100]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e60:	4a17      	ldr	r2, [pc, #92]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005e62:	f043 0301 	orr.w	r3, r3, #1
 8005e66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e6a:	f7fc fc93 	bl	8002794 <HAL_GetTick>
 8005e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e70:	e008      	b.n	8005e84 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e72:	f7fc fc8f 	bl	8002794 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d901      	bls.n	8005e84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e1ef      	b.n	8006264 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e84:	4b0e      	ldr	r3, [pc, #56]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0ef      	beq.n	8005e72 <HAL_RCC_OscConfig+0x22e>
 8005e92:	e020      	b.n	8005ed6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e94:	4b0a      	ldr	r3, [pc, #40]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e9a:	4a09      	ldr	r2, [pc, #36]	; (8005ec0 <HAL_RCC_OscConfig+0x27c>)
 8005e9c:	f023 0301 	bic.w	r3, r3, #1
 8005ea0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea4:	f7fc fc76 	bl	8002794 <HAL_GetTick>
 8005ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005eaa:	e00d      	b.n	8005ec8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005eac:	f7fc fc72 	bl	8002794 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d906      	bls.n	8005ec8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e1d2      	b.n	8006264 <HAL_RCC_OscConfig+0x620>
 8005ebe:	bf00      	nop
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ec8:	4b8c      	ldr	r3, [pc, #560]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1ea      	bne.n	8005eac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0304 	and.w	r3, r3, #4
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 80a6 	beq.w	8006030 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ee8:	4b84      	ldr	r3, [pc, #528]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x2b4>
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e000      	b.n	8005efa <HAL_RCC_OscConfig+0x2b6>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00d      	beq.n	8005f1a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005efe:	4b7f      	ldr	r3, [pc, #508]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f02:	4a7e      	ldr	r2, [pc, #504]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f08:	6593      	str	r3, [r2, #88]	; 0x58
 8005f0a:	4b7c      	ldr	r3, [pc, #496]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005f16:	2301      	movs	r3, #1
 8005f18:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f1a:	4b79      	ldr	r3, [pc, #484]	; (8006100 <HAL_RCC_OscConfig+0x4bc>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d118      	bne.n	8005f58 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f26:	4b76      	ldr	r3, [pc, #472]	; (8006100 <HAL_RCC_OscConfig+0x4bc>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a75      	ldr	r2, [pc, #468]	; (8006100 <HAL_RCC_OscConfig+0x4bc>)
 8005f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f32:	f7fc fc2f 	bl	8002794 <HAL_GetTick>
 8005f36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f38:	e008      	b.n	8005f4c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f3a:	f7fc fc2b 	bl	8002794 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d901      	bls.n	8005f4c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e18b      	b.n	8006264 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f4c:	4b6c      	ldr	r3, [pc, #432]	; (8006100 <HAL_RCC_OscConfig+0x4bc>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d0f0      	beq.n	8005f3a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d108      	bne.n	8005f72 <HAL_RCC_OscConfig+0x32e>
 8005f60:	4b66      	ldr	r3, [pc, #408]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f66:	4a65      	ldr	r2, [pc, #404]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005f68:	f043 0301 	orr.w	r3, r3, #1
 8005f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f70:	e024      	b.n	8005fbc <HAL_RCC_OscConfig+0x378>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	2b05      	cmp	r3, #5
 8005f78:	d110      	bne.n	8005f9c <HAL_RCC_OscConfig+0x358>
 8005f7a:	4b60      	ldr	r3, [pc, #384]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f80:	4a5e      	ldr	r2, [pc, #376]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005f82:	f043 0304 	orr.w	r3, r3, #4
 8005f86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f8a:	4b5c      	ldr	r3, [pc, #368]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f90:	4a5a      	ldr	r2, [pc, #360]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005f92:	f043 0301 	orr.w	r3, r3, #1
 8005f96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f9a:	e00f      	b.n	8005fbc <HAL_RCC_OscConfig+0x378>
 8005f9c:	4b57      	ldr	r3, [pc, #348]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa2:	4a56      	ldr	r2, [pc, #344]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005fa4:	f023 0301 	bic.w	r3, r3, #1
 8005fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005fac:	4b53      	ldr	r3, [pc, #332]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb2:	4a52      	ldr	r2, [pc, #328]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005fb4:	f023 0304 	bic.w	r3, r3, #4
 8005fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d016      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc4:	f7fc fbe6 	bl	8002794 <HAL_GetTick>
 8005fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fca:	e00a      	b.n	8005fe2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fcc:	f7fc fbe2 	bl	8002794 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e140      	b.n	8006264 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fe2:	4b46      	ldr	r3, [pc, #280]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8005fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d0ed      	beq.n	8005fcc <HAL_RCC_OscConfig+0x388>
 8005ff0:	e015      	b.n	800601e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff2:	f7fc fbcf 	bl	8002794 <HAL_GetTick>
 8005ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ff8:	e00a      	b.n	8006010 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ffa:	f7fc fbcb 	bl	8002794 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	f241 3288 	movw	r2, #5000	; 0x1388
 8006008:	4293      	cmp	r3, r2
 800600a:	d901      	bls.n	8006010 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e129      	b.n	8006264 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006010:	4b3a      	ldr	r3, [pc, #232]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8006012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1ed      	bne.n	8005ffa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800601e:	7ffb      	ldrb	r3, [r7, #31]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d105      	bne.n	8006030 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006024:	4b35      	ldr	r3, [pc, #212]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8006026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006028:	4a34      	ldr	r2, [pc, #208]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 800602a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800602e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0320 	and.w	r3, r3, #32
 8006038:	2b00      	cmp	r3, #0
 800603a:	d03c      	beq.n	80060b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d01c      	beq.n	800607e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006044:	4b2d      	ldr	r3, [pc, #180]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8006046:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800604a:	4a2c      	ldr	r2, [pc, #176]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 800604c:	f043 0301 	orr.w	r3, r3, #1
 8006050:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006054:	f7fc fb9e 	bl	8002794 <HAL_GetTick>
 8006058:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800605a:	e008      	b.n	800606e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800605c:	f7fc fb9a 	bl	8002794 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e0fa      	b.n	8006264 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800606e:	4b23      	ldr	r3, [pc, #140]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8006070:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d0ef      	beq.n	800605c <HAL_RCC_OscConfig+0x418>
 800607c:	e01b      	b.n	80060b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800607e:	4b1f      	ldr	r3, [pc, #124]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8006080:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006084:	4a1d      	ldr	r2, [pc, #116]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 8006086:	f023 0301 	bic.w	r3, r3, #1
 800608a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800608e:	f7fc fb81 	bl	8002794 <HAL_GetTick>
 8006092:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006094:	e008      	b.n	80060a8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006096:	f7fc fb7d 	bl	8002794 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d901      	bls.n	80060a8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e0dd      	b.n	8006264 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80060a8:	4b14      	ldr	r3, [pc, #80]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 80060aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1ef      	bne.n	8006096 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 80d1 	beq.w	8006262 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060c0:	4b0e      	ldr	r3, [pc, #56]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f003 030c 	and.w	r3, r3, #12
 80060c8:	2b0c      	cmp	r3, #12
 80060ca:	f000 808b 	beq.w	80061e4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d15e      	bne.n	8006194 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060d6:	4b09      	ldr	r3, [pc, #36]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a08      	ldr	r2, [pc, #32]	; (80060fc <HAL_RCC_OscConfig+0x4b8>)
 80060dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e2:	f7fc fb57 	bl	8002794 <HAL_GetTick>
 80060e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060e8:	e00c      	b.n	8006104 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060ea:	f7fc fb53 	bl	8002794 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d905      	bls.n	8006104 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e0b3      	b.n	8006264 <HAL_RCC_OscConfig+0x620>
 80060fc:	40021000 	.word	0x40021000
 8006100:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006104:	4b59      	ldr	r3, [pc, #356]	; (800626c <HAL_RCC_OscConfig+0x628>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1ec      	bne.n	80060ea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006110:	4b56      	ldr	r3, [pc, #344]	; (800626c <HAL_RCC_OscConfig+0x628>)
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	4b56      	ldr	r3, [pc, #344]	; (8006270 <HAL_RCC_OscConfig+0x62c>)
 8006116:	4013      	ands	r3, r2
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6a11      	ldr	r1, [r2, #32]
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006120:	3a01      	subs	r2, #1
 8006122:	0112      	lsls	r2, r2, #4
 8006124:	4311      	orrs	r1, r2
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800612a:	0212      	lsls	r2, r2, #8
 800612c:	4311      	orrs	r1, r2
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006132:	0852      	lsrs	r2, r2, #1
 8006134:	3a01      	subs	r2, #1
 8006136:	0552      	lsls	r2, r2, #21
 8006138:	4311      	orrs	r1, r2
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800613e:	0852      	lsrs	r2, r2, #1
 8006140:	3a01      	subs	r2, #1
 8006142:	0652      	lsls	r2, r2, #25
 8006144:	4311      	orrs	r1, r2
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800614a:	06d2      	lsls	r2, r2, #27
 800614c:	430a      	orrs	r2, r1
 800614e:	4947      	ldr	r1, [pc, #284]	; (800626c <HAL_RCC_OscConfig+0x628>)
 8006150:	4313      	orrs	r3, r2
 8006152:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006154:	4b45      	ldr	r3, [pc, #276]	; (800626c <HAL_RCC_OscConfig+0x628>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a44      	ldr	r2, [pc, #272]	; (800626c <HAL_RCC_OscConfig+0x628>)
 800615a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800615e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006160:	4b42      	ldr	r3, [pc, #264]	; (800626c <HAL_RCC_OscConfig+0x628>)
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	4a41      	ldr	r2, [pc, #260]	; (800626c <HAL_RCC_OscConfig+0x628>)
 8006166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800616a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800616c:	f7fc fb12 	bl	8002794 <HAL_GetTick>
 8006170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006172:	e008      	b.n	8006186 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006174:	f7fc fb0e 	bl	8002794 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	2b02      	cmp	r3, #2
 8006180:	d901      	bls.n	8006186 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e06e      	b.n	8006264 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006186:	4b39      	ldr	r3, [pc, #228]	; (800626c <HAL_RCC_OscConfig+0x628>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d0f0      	beq.n	8006174 <HAL_RCC_OscConfig+0x530>
 8006192:	e066      	b.n	8006262 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006194:	4b35      	ldr	r3, [pc, #212]	; (800626c <HAL_RCC_OscConfig+0x628>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a34      	ldr	r2, [pc, #208]	; (800626c <HAL_RCC_OscConfig+0x628>)
 800619a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800619e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80061a0:	4b32      	ldr	r3, [pc, #200]	; (800626c <HAL_RCC_OscConfig+0x628>)
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	4a31      	ldr	r2, [pc, #196]	; (800626c <HAL_RCC_OscConfig+0x628>)
 80061a6:	f023 0303 	bic.w	r3, r3, #3
 80061aa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80061ac:	4b2f      	ldr	r3, [pc, #188]	; (800626c <HAL_RCC_OscConfig+0x628>)
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	4a2e      	ldr	r2, [pc, #184]	; (800626c <HAL_RCC_OscConfig+0x628>)
 80061b2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80061b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061bc:	f7fc faea 	bl	8002794 <HAL_GetTick>
 80061c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061c2:	e008      	b.n	80061d6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061c4:	f7fc fae6 	bl	8002794 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d901      	bls.n	80061d6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e046      	b.n	8006264 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061d6:	4b25      	ldr	r3, [pc, #148]	; (800626c <HAL_RCC_OscConfig+0x628>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1f0      	bne.n	80061c4 <HAL_RCC_OscConfig+0x580>
 80061e2:	e03e      	b.n	8006262 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d101      	bne.n	80061f0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e039      	b.n	8006264 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80061f0:	4b1e      	ldr	r3, [pc, #120]	; (800626c <HAL_RCC_OscConfig+0x628>)
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	f003 0203 	and.w	r2, r3, #3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	429a      	cmp	r2, r3
 8006202:	d12c      	bne.n	800625e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620e:	3b01      	subs	r3, #1
 8006210:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006212:	429a      	cmp	r2, r3
 8006214:	d123      	bne.n	800625e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006220:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006222:	429a      	cmp	r2, r3
 8006224:	d11b      	bne.n	800625e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006230:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006232:	429a      	cmp	r2, r3
 8006234:	d113      	bne.n	800625e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006240:	085b      	lsrs	r3, r3, #1
 8006242:	3b01      	subs	r3, #1
 8006244:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006246:	429a      	cmp	r2, r3
 8006248:	d109      	bne.n	800625e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006254:	085b      	lsrs	r3, r3, #1
 8006256:	3b01      	subs	r3, #1
 8006258:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800625a:	429a      	cmp	r2, r3
 800625c:	d001      	beq.n	8006262 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e000      	b.n	8006264 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3720      	adds	r7, #32
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	40021000 	.word	0x40021000
 8006270:	019f800c 	.word	0x019f800c

08006274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800627e:	2300      	movs	r3, #0
 8006280:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e11e      	b.n	80064ca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800628c:	4b91      	ldr	r3, [pc, #580]	; (80064d4 <HAL_RCC_ClockConfig+0x260>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 030f 	and.w	r3, r3, #15
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	429a      	cmp	r2, r3
 8006298:	d910      	bls.n	80062bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800629a:	4b8e      	ldr	r3, [pc, #568]	; (80064d4 <HAL_RCC_ClockConfig+0x260>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f023 020f 	bic.w	r2, r3, #15
 80062a2:	498c      	ldr	r1, [pc, #560]	; (80064d4 <HAL_RCC_ClockConfig+0x260>)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062aa:	4b8a      	ldr	r3, [pc, #552]	; (80064d4 <HAL_RCC_ClockConfig+0x260>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 030f 	and.w	r3, r3, #15
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d001      	beq.n	80062bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e106      	b.n	80064ca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d073      	beq.n	80063b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	d129      	bne.n	8006324 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062d0:	4b81      	ldr	r3, [pc, #516]	; (80064d8 <HAL_RCC_ClockConfig+0x264>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e0f4      	b.n	80064ca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80062e0:	f000 f99e 	bl	8006620 <RCC_GetSysClockFreqFromPLLSource>
 80062e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	4a7c      	ldr	r2, [pc, #496]	; (80064dc <HAL_RCC_ClockConfig+0x268>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d93f      	bls.n	800636e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80062ee:	4b7a      	ldr	r3, [pc, #488]	; (80064d8 <HAL_RCC_ClockConfig+0x264>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d009      	beq.n	800630e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006302:	2b00      	cmp	r3, #0
 8006304:	d033      	beq.n	800636e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800630a:	2b00      	cmp	r3, #0
 800630c:	d12f      	bne.n	800636e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800630e:	4b72      	ldr	r3, [pc, #456]	; (80064d8 <HAL_RCC_ClockConfig+0x264>)
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006316:	4a70      	ldr	r2, [pc, #448]	; (80064d8 <HAL_RCC_ClockConfig+0x264>)
 8006318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800631c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800631e:	2380      	movs	r3, #128	; 0x80
 8006320:	617b      	str	r3, [r7, #20]
 8006322:	e024      	b.n	800636e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	2b02      	cmp	r3, #2
 800632a:	d107      	bne.n	800633c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800632c:	4b6a      	ldr	r3, [pc, #424]	; (80064d8 <HAL_RCC_ClockConfig+0x264>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d109      	bne.n	800634c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e0c6      	b.n	80064ca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800633c:	4b66      	ldr	r3, [pc, #408]	; (80064d8 <HAL_RCC_ClockConfig+0x264>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006344:	2b00      	cmp	r3, #0
 8006346:	d101      	bne.n	800634c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e0be      	b.n	80064ca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800634c:	f000 f8ce 	bl	80064ec <HAL_RCC_GetSysClockFreq>
 8006350:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	4a61      	ldr	r2, [pc, #388]	; (80064dc <HAL_RCC_ClockConfig+0x268>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d909      	bls.n	800636e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800635a:	4b5f      	ldr	r3, [pc, #380]	; (80064d8 <HAL_RCC_ClockConfig+0x264>)
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006362:	4a5d      	ldr	r2, [pc, #372]	; (80064d8 <HAL_RCC_ClockConfig+0x264>)
 8006364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006368:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800636a:	2380      	movs	r3, #128	; 0x80
 800636c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800636e:	4b5a      	ldr	r3, [pc, #360]	; (80064d8 <HAL_RCC_ClockConfig+0x264>)
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f023 0203 	bic.w	r2, r3, #3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	4957      	ldr	r1, [pc, #348]	; (80064d8 <HAL_RCC_ClockConfig+0x264>)
 800637c:	4313      	orrs	r3, r2
 800637e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006380:	f7fc fa08 	bl	8002794 <HAL_GetTick>
 8006384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006386:	e00a      	b.n	800639e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006388:	f7fc fa04 	bl	8002794 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	f241 3288 	movw	r2, #5000	; 0x1388
 8006396:	4293      	cmp	r3, r2
 8006398:	d901      	bls.n	800639e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e095      	b.n	80064ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800639e:	4b4e      	ldr	r3, [pc, #312]	; (80064d8 <HAL_RCC_ClockConfig+0x264>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f003 020c 	and.w	r2, r3, #12
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d1eb      	bne.n	8006388 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d023      	beq.n	8006404 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0304 	and.w	r3, r3, #4
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d005      	beq.n	80063d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063c8:	4b43      	ldr	r3, [pc, #268]	; (80064d8 <HAL_RCC_ClockConfig+0x264>)
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	4a42      	ldr	r2, [pc, #264]	; (80064d8 <HAL_RCC_ClockConfig+0x264>)
 80063ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80063d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0308 	and.w	r3, r3, #8
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d007      	beq.n	80063f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80063e0:	4b3d      	ldr	r3, [pc, #244]	; (80064d8 <HAL_RCC_ClockConfig+0x264>)
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80063e8:	4a3b      	ldr	r2, [pc, #236]	; (80064d8 <HAL_RCC_ClockConfig+0x264>)
 80063ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80063ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063f0:	4b39      	ldr	r3, [pc, #228]	; (80064d8 <HAL_RCC_ClockConfig+0x264>)
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	4936      	ldr	r1, [pc, #216]	; (80064d8 <HAL_RCC_ClockConfig+0x264>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	608b      	str	r3, [r1, #8]
 8006402:	e008      	b.n	8006416 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	2b80      	cmp	r3, #128	; 0x80
 8006408:	d105      	bne.n	8006416 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800640a:	4b33      	ldr	r3, [pc, #204]	; (80064d8 <HAL_RCC_ClockConfig+0x264>)
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	4a32      	ldr	r2, [pc, #200]	; (80064d8 <HAL_RCC_ClockConfig+0x264>)
 8006410:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006414:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006416:	4b2f      	ldr	r3, [pc, #188]	; (80064d4 <HAL_RCC_ClockConfig+0x260>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 030f 	and.w	r3, r3, #15
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	429a      	cmp	r2, r3
 8006422:	d21d      	bcs.n	8006460 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006424:	4b2b      	ldr	r3, [pc, #172]	; (80064d4 <HAL_RCC_ClockConfig+0x260>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f023 020f 	bic.w	r2, r3, #15
 800642c:	4929      	ldr	r1, [pc, #164]	; (80064d4 <HAL_RCC_ClockConfig+0x260>)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	4313      	orrs	r3, r2
 8006432:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006434:	f7fc f9ae 	bl	8002794 <HAL_GetTick>
 8006438:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800643a:	e00a      	b.n	8006452 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800643c:	f7fc f9aa 	bl	8002794 <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	f241 3288 	movw	r2, #5000	; 0x1388
 800644a:	4293      	cmp	r3, r2
 800644c:	d901      	bls.n	8006452 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e03b      	b.n	80064ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006452:	4b20      	ldr	r3, [pc, #128]	; (80064d4 <HAL_RCC_ClockConfig+0x260>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 030f 	and.w	r3, r3, #15
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	429a      	cmp	r2, r3
 800645e:	d1ed      	bne.n	800643c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0304 	and.w	r3, r3, #4
 8006468:	2b00      	cmp	r3, #0
 800646a:	d008      	beq.n	800647e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800646c:	4b1a      	ldr	r3, [pc, #104]	; (80064d8 <HAL_RCC_ClockConfig+0x264>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	4917      	ldr	r1, [pc, #92]	; (80064d8 <HAL_RCC_ClockConfig+0x264>)
 800647a:	4313      	orrs	r3, r2
 800647c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0308 	and.w	r3, r3, #8
 8006486:	2b00      	cmp	r3, #0
 8006488:	d009      	beq.n	800649e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800648a:	4b13      	ldr	r3, [pc, #76]	; (80064d8 <HAL_RCC_ClockConfig+0x264>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	00db      	lsls	r3, r3, #3
 8006498:	490f      	ldr	r1, [pc, #60]	; (80064d8 <HAL_RCC_ClockConfig+0x264>)
 800649a:	4313      	orrs	r3, r2
 800649c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800649e:	f000 f825 	bl	80064ec <HAL_RCC_GetSysClockFreq>
 80064a2:	4602      	mov	r2, r0
 80064a4:	4b0c      	ldr	r3, [pc, #48]	; (80064d8 <HAL_RCC_ClockConfig+0x264>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	091b      	lsrs	r3, r3, #4
 80064aa:	f003 030f 	and.w	r3, r3, #15
 80064ae:	490c      	ldr	r1, [pc, #48]	; (80064e0 <HAL_RCC_ClockConfig+0x26c>)
 80064b0:	5ccb      	ldrb	r3, [r1, r3]
 80064b2:	f003 031f 	and.w	r3, r3, #31
 80064b6:	fa22 f303 	lsr.w	r3, r2, r3
 80064ba:	4a0a      	ldr	r2, [pc, #40]	; (80064e4 <HAL_RCC_ClockConfig+0x270>)
 80064bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80064be:	4b0a      	ldr	r3, [pc, #40]	; (80064e8 <HAL_RCC_ClockConfig+0x274>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7fc f91a 	bl	80026fc <HAL_InitTick>
 80064c8:	4603      	mov	r3, r0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3718      	adds	r7, #24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	40022000 	.word	0x40022000
 80064d8:	40021000 	.word	0x40021000
 80064dc:	04c4b400 	.word	0x04c4b400
 80064e0:	08011a34 	.word	0x08011a34
 80064e4:	20000000 	.word	0x20000000
 80064e8:	20000004 	.word	0x20000004

080064ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80064f2:	4b2c      	ldr	r3, [pc, #176]	; (80065a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 030c 	and.w	r3, r3, #12
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	d102      	bne.n	8006504 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80064fe:	4b2a      	ldr	r3, [pc, #168]	; (80065a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006500:	613b      	str	r3, [r7, #16]
 8006502:	e047      	b.n	8006594 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006504:	4b27      	ldr	r3, [pc, #156]	; (80065a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f003 030c 	and.w	r3, r3, #12
 800650c:	2b08      	cmp	r3, #8
 800650e:	d102      	bne.n	8006516 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006510:	4b26      	ldr	r3, [pc, #152]	; (80065ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8006512:	613b      	str	r3, [r7, #16]
 8006514:	e03e      	b.n	8006594 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006516:	4b23      	ldr	r3, [pc, #140]	; (80065a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f003 030c 	and.w	r3, r3, #12
 800651e:	2b0c      	cmp	r3, #12
 8006520:	d136      	bne.n	8006590 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006522:	4b20      	ldr	r3, [pc, #128]	; (80065a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	f003 0303 	and.w	r3, r3, #3
 800652a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800652c:	4b1d      	ldr	r3, [pc, #116]	; (80065a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	091b      	lsrs	r3, r3, #4
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	3301      	adds	r3, #1
 8006538:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2b03      	cmp	r3, #3
 800653e:	d10c      	bne.n	800655a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006540:	4a1a      	ldr	r2, [pc, #104]	; (80065ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	fbb2 f3f3 	udiv	r3, r2, r3
 8006548:	4a16      	ldr	r2, [pc, #88]	; (80065a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800654a:	68d2      	ldr	r2, [r2, #12]
 800654c:	0a12      	lsrs	r2, r2, #8
 800654e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006552:	fb02 f303 	mul.w	r3, r2, r3
 8006556:	617b      	str	r3, [r7, #20]
      break;
 8006558:	e00c      	b.n	8006574 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800655a:	4a13      	ldr	r2, [pc, #76]	; (80065a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006562:	4a10      	ldr	r2, [pc, #64]	; (80065a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006564:	68d2      	ldr	r2, [r2, #12]
 8006566:	0a12      	lsrs	r2, r2, #8
 8006568:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800656c:	fb02 f303 	mul.w	r3, r2, r3
 8006570:	617b      	str	r3, [r7, #20]
      break;
 8006572:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006574:	4b0b      	ldr	r3, [pc, #44]	; (80065a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	0e5b      	lsrs	r3, r3, #25
 800657a:	f003 0303 	and.w	r3, r3, #3
 800657e:	3301      	adds	r3, #1
 8006580:	005b      	lsls	r3, r3, #1
 8006582:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	fbb2 f3f3 	udiv	r3, r2, r3
 800658c:	613b      	str	r3, [r7, #16]
 800658e:	e001      	b.n	8006594 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006590:	2300      	movs	r3, #0
 8006592:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006594:	693b      	ldr	r3, [r7, #16]
}
 8006596:	4618      	mov	r0, r3
 8006598:	371c      	adds	r7, #28
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	40021000 	.word	0x40021000
 80065a8:	00f42400 	.word	0x00f42400
 80065ac:	02dc6c00 	.word	0x02dc6c00

080065b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065b0:	b480      	push	{r7}
 80065b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065b4:	4b03      	ldr	r3, [pc, #12]	; (80065c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80065b6:	681b      	ldr	r3, [r3, #0]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	20000000 	.word	0x20000000

080065c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80065cc:	f7ff fff0 	bl	80065b0 <HAL_RCC_GetHCLKFreq>
 80065d0:	4602      	mov	r2, r0
 80065d2:	4b06      	ldr	r3, [pc, #24]	; (80065ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	0a1b      	lsrs	r3, r3, #8
 80065d8:	f003 0307 	and.w	r3, r3, #7
 80065dc:	4904      	ldr	r1, [pc, #16]	; (80065f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80065de:	5ccb      	ldrb	r3, [r1, r3]
 80065e0:	f003 031f 	and.w	r3, r3, #31
 80065e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	40021000 	.word	0x40021000
 80065f0:	08011a44 	.word	0x08011a44

080065f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80065f8:	f7ff ffda 	bl	80065b0 <HAL_RCC_GetHCLKFreq>
 80065fc:	4602      	mov	r2, r0
 80065fe:	4b06      	ldr	r3, [pc, #24]	; (8006618 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	0adb      	lsrs	r3, r3, #11
 8006604:	f003 0307 	and.w	r3, r3, #7
 8006608:	4904      	ldr	r1, [pc, #16]	; (800661c <HAL_RCC_GetPCLK2Freq+0x28>)
 800660a:	5ccb      	ldrb	r3, [r1, r3]
 800660c:	f003 031f 	and.w	r3, r3, #31
 8006610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006614:	4618      	mov	r0, r3
 8006616:	bd80      	pop	{r7, pc}
 8006618:	40021000 	.word	0x40021000
 800661c:	08011a44 	.word	0x08011a44

08006620 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006626:	4b1e      	ldr	r3, [pc, #120]	; (80066a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f003 0303 	and.w	r3, r3, #3
 800662e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006630:	4b1b      	ldr	r3, [pc, #108]	; (80066a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	091b      	lsrs	r3, r3, #4
 8006636:	f003 030f 	and.w	r3, r3, #15
 800663a:	3301      	adds	r3, #1
 800663c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	2b03      	cmp	r3, #3
 8006642:	d10c      	bne.n	800665e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006644:	4a17      	ldr	r2, [pc, #92]	; (80066a4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	fbb2 f3f3 	udiv	r3, r2, r3
 800664c:	4a14      	ldr	r2, [pc, #80]	; (80066a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800664e:	68d2      	ldr	r2, [r2, #12]
 8006650:	0a12      	lsrs	r2, r2, #8
 8006652:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006656:	fb02 f303 	mul.w	r3, r2, r3
 800665a:	617b      	str	r3, [r7, #20]
    break;
 800665c:	e00c      	b.n	8006678 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800665e:	4a12      	ldr	r2, [pc, #72]	; (80066a8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	fbb2 f3f3 	udiv	r3, r2, r3
 8006666:	4a0e      	ldr	r2, [pc, #56]	; (80066a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006668:	68d2      	ldr	r2, [r2, #12]
 800666a:	0a12      	lsrs	r2, r2, #8
 800666c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006670:	fb02 f303 	mul.w	r3, r2, r3
 8006674:	617b      	str	r3, [r7, #20]
    break;
 8006676:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006678:	4b09      	ldr	r3, [pc, #36]	; (80066a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	0e5b      	lsrs	r3, r3, #25
 800667e:	f003 0303 	and.w	r3, r3, #3
 8006682:	3301      	adds	r3, #1
 8006684:	005b      	lsls	r3, r3, #1
 8006686:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006690:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006692:	687b      	ldr	r3, [r7, #4]
}
 8006694:	4618      	mov	r0, r3
 8006696:	371c      	adds	r7, #28
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	40021000 	.word	0x40021000
 80066a4:	02dc6c00 	.word	0x02dc6c00
 80066a8:	00f42400 	.word	0x00f42400

080066ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066b4:	2300      	movs	r3, #0
 80066b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066b8:	2300      	movs	r3, #0
 80066ba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 8098 	beq.w	80067fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066ca:	2300      	movs	r3, #0
 80066cc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066ce:	4b43      	ldr	r3, [pc, #268]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10d      	bne.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066da:	4b40      	ldr	r3, [pc, #256]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066de:	4a3f      	ldr	r2, [pc, #252]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066e4:	6593      	str	r3, [r2, #88]	; 0x58
 80066e6:	4b3d      	ldr	r3, [pc, #244]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ee:	60bb      	str	r3, [r7, #8]
 80066f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066f2:	2301      	movs	r3, #1
 80066f4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066f6:	4b3a      	ldr	r3, [pc, #232]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a39      	ldr	r2, [pc, #228]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80066fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006700:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006702:	f7fc f847 	bl	8002794 <HAL_GetTick>
 8006706:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006708:	e009      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800670a:	f7fc f843 	bl	8002794 <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d902      	bls.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	74fb      	strb	r3, [r7, #19]
        break;
 800671c:	e005      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800671e:	4b30      	ldr	r3, [pc, #192]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006726:	2b00      	cmp	r3, #0
 8006728:	d0ef      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800672a:	7cfb      	ldrb	r3, [r7, #19]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d159      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006730:	4b2a      	ldr	r3, [pc, #168]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800673a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d01e      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	429a      	cmp	r2, r3
 800674a:	d019      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800674c:	4b23      	ldr	r3, [pc, #140]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800674e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006756:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006758:	4b20      	ldr	r3, [pc, #128]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800675a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800675e:	4a1f      	ldr	r2, [pc, #124]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006768:	4b1c      	ldr	r3, [pc, #112]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800676a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800676e:	4a1b      	ldr	r2, [pc, #108]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006774:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006778:	4a18      	ldr	r2, [pc, #96]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d016      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800678a:	f7fc f803 	bl	8002794 <HAL_GetTick>
 800678e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006790:	e00b      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006792:	f7fb ffff 	bl	8002794 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	f241 3288 	movw	r2, #5000	; 0x1388
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d902      	bls.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	74fb      	strb	r3, [r7, #19]
            break;
 80067a8:	e006      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067aa:	4b0c      	ldr	r3, [pc, #48]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d0ec      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80067b8:	7cfb      	ldrb	r3, [r7, #19]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10b      	bne.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067be:	4b07      	ldr	r3, [pc, #28]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067cc:	4903      	ldr	r1, [pc, #12]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80067d4:	e008      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067d6:	7cfb      	ldrb	r3, [r7, #19]
 80067d8:	74bb      	strb	r3, [r7, #18]
 80067da:	e005      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80067dc:	40021000 	.word	0x40021000
 80067e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e4:	7cfb      	ldrb	r3, [r7, #19]
 80067e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067e8:	7c7b      	ldrb	r3, [r7, #17]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d105      	bne.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067ee:	4ba7      	ldr	r3, [pc, #668]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f2:	4aa6      	ldr	r2, [pc, #664]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006806:	4ba1      	ldr	r3, [pc, #644]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680c:	f023 0203 	bic.w	r2, r3, #3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	499d      	ldr	r1, [pc, #628]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006816:	4313      	orrs	r3, r2
 8006818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00a      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006828:	4b98      	ldr	r3, [pc, #608]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800682a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800682e:	f023 020c 	bic.w	r2, r3, #12
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	4995      	ldr	r1, [pc, #596]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006838:	4313      	orrs	r3, r2
 800683a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0304 	and.w	r3, r3, #4
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800684a:	4b90      	ldr	r3, [pc, #576]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800684c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006850:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	498c      	ldr	r1, [pc, #560]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800685a:	4313      	orrs	r3, r2
 800685c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0308 	and.w	r3, r3, #8
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00a      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800686c:	4b87      	ldr	r3, [pc, #540]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800686e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006872:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	4984      	ldr	r1, [pc, #528]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800687c:	4313      	orrs	r3, r2
 800687e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0310 	and.w	r3, r3, #16
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800688e:	4b7f      	ldr	r3, [pc, #508]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006894:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	497b      	ldr	r1, [pc, #492]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0320 	and.w	r3, r3, #32
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00a      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068b0:	4b76      	ldr	r3, [pc, #472]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	4973      	ldr	r1, [pc, #460]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068c0:	4313      	orrs	r3, r2
 80068c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00a      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068d2:	4b6e      	ldr	r3, [pc, #440]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	69db      	ldr	r3, [r3, #28]
 80068e0:	496a      	ldr	r1, [pc, #424]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00a      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80068f4:	4b65      	ldr	r3, [pc, #404]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	4962      	ldr	r1, [pc, #392]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006904:	4313      	orrs	r3, r2
 8006906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00a      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006916:	4b5d      	ldr	r3, [pc, #372]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800691c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006924:	4959      	ldr	r1, [pc, #356]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006926:	4313      	orrs	r3, r2
 8006928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00a      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006938:	4b54      	ldr	r3, [pc, #336]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800693a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800693e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006946:	4951      	ldr	r1, [pc, #324]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006948:	4313      	orrs	r3, r2
 800694a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006956:	2b00      	cmp	r3, #0
 8006958:	d015      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800695a:	4b4c      	ldr	r3, [pc, #304]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800695c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006960:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006968:	4948      	ldr	r1, [pc, #288]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800696a:	4313      	orrs	r3, r2
 800696c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006974:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006978:	d105      	bne.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800697a:	4b44      	ldr	r3, [pc, #272]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	4a43      	ldr	r2, [pc, #268]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006980:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006984:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800698e:	2b00      	cmp	r3, #0
 8006990:	d015      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006992:	4b3e      	ldr	r3, [pc, #248]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006998:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a0:	493a      	ldr	r1, [pc, #232]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069b0:	d105      	bne.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069b2:	4b36      	ldr	r3, [pc, #216]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	4a35      	ldr	r2, [pc, #212]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069bc:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d015      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80069ca:	4b30      	ldr	r3, [pc, #192]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d8:	492c      	ldr	r1, [pc, #176]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069e8:	d105      	bne.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069ea:	4b28      	ldr	r3, [pc, #160]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	4a27      	ldr	r2, [pc, #156]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069f4:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d015      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a02:	4b22      	ldr	r3, [pc, #136]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a10:	491e      	ldr	r1, [pc, #120]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a20:	d105      	bne.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a22:	4b1a      	ldr	r3, [pc, #104]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	4a19      	ldr	r2, [pc, #100]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a2c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d015      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a3a:	4b14      	ldr	r3, [pc, #80]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a48:	4910      	ldr	r1, [pc, #64]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a58:	d105      	bne.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a5a:	4b0c      	ldr	r3, [pc, #48]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	4a0b      	ldr	r2, [pc, #44]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a64:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d018      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006a72:	4b06      	ldr	r3, [pc, #24]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a78:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a80:	4902      	ldr	r1, [pc, #8]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	e001      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006a8c:	40021000 	.word	0x40021000
 8006a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a96:	d105      	bne.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006a98:	4b21      	ldr	r3, [pc, #132]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	4a20      	ldr	r2, [pc, #128]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aa2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d015      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006ab0:	4b1b      	ldr	r3, [pc, #108]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006abe:	4918      	ldr	r1, [pc, #96]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ace:	d105      	bne.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006ad0:	4b13      	ldr	r3, [pc, #76]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	4a12      	ldr	r2, [pc, #72]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ada:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d015      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006ae8:	4b0d      	ldr	r3, [pc, #52]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006aea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006aee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af6:	490a      	ldr	r1, [pc, #40]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b06:	d105      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b08:	4b05      	ldr	r3, [pc, #20]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	4a04      	ldr	r2, [pc, #16]	; (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b12:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006b14:	7cbb      	ldrb	r3, [r7, #18]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3718      	adds	r7, #24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	40021000 	.word	0x40021000

08006b24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e09d      	b.n	8006c72 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d108      	bne.n	8006b50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b46:	d009      	beq.n	8006b5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	61da      	str	r2, [r3, #28]
 8006b4e:	e005      	b.n	8006b5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d106      	bne.n	8006b7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7fb f9a2 	bl	8001ec0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2202      	movs	r2, #2
 8006b80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b9c:	d902      	bls.n	8006ba4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60fb      	str	r3, [r7, #12]
 8006ba2:	e002      	b.n	8006baa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ba8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006bb2:	d007      	beq.n	8006bc4 <HAL_SPI_Init+0xa0>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bbc:	d002      	beq.n	8006bc4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006bd4:	431a      	orrs	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	431a      	orrs	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	695b      	ldr	r3, [r3, #20]
 8006be4:	f003 0301 	and.w	r3, r3, #1
 8006be8:	431a      	orrs	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c06:	ea42 0103 	orr.w	r1, r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	430a      	orrs	r2, r1
 8006c18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	0c1b      	lsrs	r3, r3, #16
 8006c20:	f003 0204 	and.w	r2, r3, #4
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c28:	f003 0310 	and.w	r3, r3, #16
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c32:	f003 0308 	and.w	r3, r3, #8
 8006c36:	431a      	orrs	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006c40:	ea42 0103 	orr.w	r1, r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	69da      	ldr	r2, [r3, #28]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b082      	sub	sp, #8
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e049      	b.n	8006d20 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d106      	bne.n	8006ca6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f7fb f951 	bl	8001f48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2202      	movs	r2, #2
 8006caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	4610      	mov	r0, r2
 8006cba:	f000 faf1 	bl	80072a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d109      	bne.n	8006d4c <HAL_TIM_PWM_Start+0x24>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	bf14      	ite	ne
 8006d44:	2301      	movne	r3, #1
 8006d46:	2300      	moveq	r3, #0
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	e03c      	b.n	8006dc6 <HAL_TIM_PWM_Start+0x9e>
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d109      	bne.n	8006d66 <HAL_TIM_PWM_Start+0x3e>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	bf14      	ite	ne
 8006d5e:	2301      	movne	r3, #1
 8006d60:	2300      	moveq	r3, #0
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	e02f      	b.n	8006dc6 <HAL_TIM_PWM_Start+0x9e>
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b08      	cmp	r3, #8
 8006d6a:	d109      	bne.n	8006d80 <HAL_TIM_PWM_Start+0x58>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	bf14      	ite	ne
 8006d78:	2301      	movne	r3, #1
 8006d7a:	2300      	moveq	r3, #0
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	e022      	b.n	8006dc6 <HAL_TIM_PWM_Start+0x9e>
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	2b0c      	cmp	r3, #12
 8006d84:	d109      	bne.n	8006d9a <HAL_TIM_PWM_Start+0x72>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	bf14      	ite	ne
 8006d92:	2301      	movne	r3, #1
 8006d94:	2300      	moveq	r3, #0
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	e015      	b.n	8006dc6 <HAL_TIM_PWM_Start+0x9e>
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	2b10      	cmp	r3, #16
 8006d9e:	d109      	bne.n	8006db4 <HAL_TIM_PWM_Start+0x8c>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	bf14      	ite	ne
 8006dac:	2301      	movne	r3, #1
 8006dae:	2300      	moveq	r3, #0
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	e008      	b.n	8006dc6 <HAL_TIM_PWM_Start+0x9e>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	bf14      	ite	ne
 8006dc0:	2301      	movne	r3, #1
 8006dc2:	2300      	moveq	r3, #0
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e0a1      	b.n	8006f12 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d104      	bne.n	8006dde <HAL_TIM_PWM_Start+0xb6>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ddc:	e023      	b.n	8006e26 <HAL_TIM_PWM_Start+0xfe>
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b04      	cmp	r3, #4
 8006de2:	d104      	bne.n	8006dee <HAL_TIM_PWM_Start+0xc6>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2202      	movs	r2, #2
 8006de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dec:	e01b      	b.n	8006e26 <HAL_TIM_PWM_Start+0xfe>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2b08      	cmp	r3, #8
 8006df2:	d104      	bne.n	8006dfe <HAL_TIM_PWM_Start+0xd6>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2202      	movs	r2, #2
 8006df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dfc:	e013      	b.n	8006e26 <HAL_TIM_PWM_Start+0xfe>
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b0c      	cmp	r3, #12
 8006e02:	d104      	bne.n	8006e0e <HAL_TIM_PWM_Start+0xe6>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e0c:	e00b      	b.n	8006e26 <HAL_TIM_PWM_Start+0xfe>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2b10      	cmp	r3, #16
 8006e12:	d104      	bne.n	8006e1e <HAL_TIM_PWM_Start+0xf6>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2202      	movs	r2, #2
 8006e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e1c:	e003      	b.n	8006e26 <HAL_TIM_PWM_Start+0xfe>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2202      	movs	r2, #2
 8006e22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	6839      	ldr	r1, [r7, #0]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 fdfe 	bl	8007a30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a38      	ldr	r2, [pc, #224]	; (8006f1c <HAL_TIM_PWM_Start+0x1f4>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d018      	beq.n	8006e70 <HAL_TIM_PWM_Start+0x148>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a37      	ldr	r2, [pc, #220]	; (8006f20 <HAL_TIM_PWM_Start+0x1f8>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d013      	beq.n	8006e70 <HAL_TIM_PWM_Start+0x148>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a35      	ldr	r2, [pc, #212]	; (8006f24 <HAL_TIM_PWM_Start+0x1fc>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d00e      	beq.n	8006e70 <HAL_TIM_PWM_Start+0x148>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a34      	ldr	r2, [pc, #208]	; (8006f28 <HAL_TIM_PWM_Start+0x200>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d009      	beq.n	8006e70 <HAL_TIM_PWM_Start+0x148>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a32      	ldr	r2, [pc, #200]	; (8006f2c <HAL_TIM_PWM_Start+0x204>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d004      	beq.n	8006e70 <HAL_TIM_PWM_Start+0x148>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a31      	ldr	r2, [pc, #196]	; (8006f30 <HAL_TIM_PWM_Start+0x208>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d101      	bne.n	8006e74 <HAL_TIM_PWM_Start+0x14c>
 8006e70:	2301      	movs	r3, #1
 8006e72:	e000      	b.n	8006e76 <HAL_TIM_PWM_Start+0x14e>
 8006e74:	2300      	movs	r3, #0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d007      	beq.n	8006e8a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a23      	ldr	r2, [pc, #140]	; (8006f1c <HAL_TIM_PWM_Start+0x1f4>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d01d      	beq.n	8006ed0 <HAL_TIM_PWM_Start+0x1a8>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e9c:	d018      	beq.n	8006ed0 <HAL_TIM_PWM_Start+0x1a8>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a24      	ldr	r2, [pc, #144]	; (8006f34 <HAL_TIM_PWM_Start+0x20c>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d013      	beq.n	8006ed0 <HAL_TIM_PWM_Start+0x1a8>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a22      	ldr	r2, [pc, #136]	; (8006f38 <HAL_TIM_PWM_Start+0x210>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d00e      	beq.n	8006ed0 <HAL_TIM_PWM_Start+0x1a8>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a1a      	ldr	r2, [pc, #104]	; (8006f20 <HAL_TIM_PWM_Start+0x1f8>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d009      	beq.n	8006ed0 <HAL_TIM_PWM_Start+0x1a8>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a18      	ldr	r2, [pc, #96]	; (8006f24 <HAL_TIM_PWM_Start+0x1fc>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d004      	beq.n	8006ed0 <HAL_TIM_PWM_Start+0x1a8>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a19      	ldr	r2, [pc, #100]	; (8006f30 <HAL_TIM_PWM_Start+0x208>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d115      	bne.n	8006efc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	689a      	ldr	r2, [r3, #8]
 8006ed6:	4b19      	ldr	r3, [pc, #100]	; (8006f3c <HAL_TIM_PWM_Start+0x214>)
 8006ed8:	4013      	ands	r3, r2
 8006eda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2b06      	cmp	r3, #6
 8006ee0:	d015      	beq.n	8006f0e <HAL_TIM_PWM_Start+0x1e6>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ee8:	d011      	beq.n	8006f0e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f042 0201 	orr.w	r2, r2, #1
 8006ef8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006efa:	e008      	b.n	8006f0e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f042 0201 	orr.w	r2, r2, #1
 8006f0a:	601a      	str	r2, [r3, #0]
 8006f0c:	e000      	b.n	8006f10 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	40012c00 	.word	0x40012c00
 8006f20:	40013400 	.word	0x40013400
 8006f24:	40014000 	.word	0x40014000
 8006f28:	40014400 	.word	0x40014400
 8006f2c:	40014800 	.word	0x40014800
 8006f30:	40015000 	.word	0x40015000
 8006f34:	40000400 	.word	0x40000400
 8006f38:	40000800 	.word	0x40000800
 8006f3c:	00010007 	.word	0x00010007

08006f40 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 fd6c 	bl	8007a30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a40      	ldr	r2, [pc, #256]	; (8007060 <HAL_TIM_PWM_Stop+0x120>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d018      	beq.n	8006f94 <HAL_TIM_PWM_Stop+0x54>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a3f      	ldr	r2, [pc, #252]	; (8007064 <HAL_TIM_PWM_Stop+0x124>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d013      	beq.n	8006f94 <HAL_TIM_PWM_Stop+0x54>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a3d      	ldr	r2, [pc, #244]	; (8007068 <HAL_TIM_PWM_Stop+0x128>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d00e      	beq.n	8006f94 <HAL_TIM_PWM_Stop+0x54>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a3c      	ldr	r2, [pc, #240]	; (800706c <HAL_TIM_PWM_Stop+0x12c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d009      	beq.n	8006f94 <HAL_TIM_PWM_Stop+0x54>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a3a      	ldr	r2, [pc, #232]	; (8007070 <HAL_TIM_PWM_Stop+0x130>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d004      	beq.n	8006f94 <HAL_TIM_PWM_Stop+0x54>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a39      	ldr	r2, [pc, #228]	; (8007074 <HAL_TIM_PWM_Stop+0x134>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d101      	bne.n	8006f98 <HAL_TIM_PWM_Stop+0x58>
 8006f94:	2301      	movs	r3, #1
 8006f96:	e000      	b.n	8006f9a <HAL_TIM_PWM_Stop+0x5a>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d017      	beq.n	8006fce <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	6a1a      	ldr	r2, [r3, #32]
 8006fa4:	f241 1311 	movw	r3, #4369	; 0x1111
 8006fa8:	4013      	ands	r3, r2
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10f      	bne.n	8006fce <HAL_TIM_PWM_Stop+0x8e>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	6a1a      	ldr	r2, [r3, #32]
 8006fb4:	f244 4344 	movw	r3, #17476	; 0x4444
 8006fb8:	4013      	ands	r3, r2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d107      	bne.n	8006fce <HAL_TIM_PWM_Stop+0x8e>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	6a1a      	ldr	r2, [r3, #32]
 8006fd4:	f241 1311 	movw	r3, #4369	; 0x1111
 8006fd8:	4013      	ands	r3, r2
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10f      	bne.n	8006ffe <HAL_TIM_PWM_Stop+0xbe>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	6a1a      	ldr	r2, [r3, #32]
 8006fe4:	f244 4344 	movw	r3, #17476	; 0x4444
 8006fe8:	4013      	ands	r3, r2
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d107      	bne.n	8006ffe <HAL_TIM_PWM_Stop+0xbe>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f022 0201 	bic.w	r2, r2, #1
 8006ffc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d104      	bne.n	800700e <HAL_TIM_PWM_Stop+0xce>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800700c:	e023      	b.n	8007056 <HAL_TIM_PWM_Stop+0x116>
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	2b04      	cmp	r3, #4
 8007012:	d104      	bne.n	800701e <HAL_TIM_PWM_Stop+0xde>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800701c:	e01b      	b.n	8007056 <HAL_TIM_PWM_Stop+0x116>
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	2b08      	cmp	r3, #8
 8007022:	d104      	bne.n	800702e <HAL_TIM_PWM_Stop+0xee>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800702c:	e013      	b.n	8007056 <HAL_TIM_PWM_Stop+0x116>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b0c      	cmp	r3, #12
 8007032:	d104      	bne.n	800703e <HAL_TIM_PWM_Stop+0xfe>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800703c:	e00b      	b.n	8007056 <HAL_TIM_PWM_Stop+0x116>
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2b10      	cmp	r3, #16
 8007042:	d104      	bne.n	800704e <HAL_TIM_PWM_Stop+0x10e>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800704c:	e003      	b.n	8007056 <HAL_TIM_PWM_Stop+0x116>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3708      	adds	r7, #8
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	40012c00 	.word	0x40012c00
 8007064:	40013400 	.word	0x40013400
 8007068:	40014000 	.word	0x40014000
 800706c:	40014400 	.word	0x40014400
 8007070:	40014800 	.word	0x40014800
 8007074:	40015000 	.word	0x40015000

08007078 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007084:	2300      	movs	r3, #0
 8007086:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800708e:	2b01      	cmp	r3, #1
 8007090:	d101      	bne.n	8007096 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007092:	2302      	movs	r3, #2
 8007094:	e0ff      	b.n	8007296 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2201      	movs	r2, #1
 800709a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2b14      	cmp	r3, #20
 80070a2:	f200 80f0 	bhi.w	8007286 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80070a6:	a201      	add	r2, pc, #4	; (adr r2, 80070ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80070a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ac:	08007101 	.word	0x08007101
 80070b0:	08007287 	.word	0x08007287
 80070b4:	08007287 	.word	0x08007287
 80070b8:	08007287 	.word	0x08007287
 80070bc:	08007141 	.word	0x08007141
 80070c0:	08007287 	.word	0x08007287
 80070c4:	08007287 	.word	0x08007287
 80070c8:	08007287 	.word	0x08007287
 80070cc:	08007183 	.word	0x08007183
 80070d0:	08007287 	.word	0x08007287
 80070d4:	08007287 	.word	0x08007287
 80070d8:	08007287 	.word	0x08007287
 80070dc:	080071c3 	.word	0x080071c3
 80070e0:	08007287 	.word	0x08007287
 80070e4:	08007287 	.word	0x08007287
 80070e8:	08007287 	.word	0x08007287
 80070ec:	08007205 	.word	0x08007205
 80070f0:	08007287 	.word	0x08007287
 80070f4:	08007287 	.word	0x08007287
 80070f8:	08007287 	.word	0x08007287
 80070fc:	08007245 	.word	0x08007245
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68b9      	ldr	r1, [r7, #8]
 8007106:	4618      	mov	r0, r3
 8007108:	f000 f968 	bl	80073dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	699a      	ldr	r2, [r3, #24]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f042 0208 	orr.w	r2, r2, #8
 800711a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	699a      	ldr	r2, [r3, #24]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f022 0204 	bic.w	r2, r2, #4
 800712a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6999      	ldr	r1, [r3, #24]
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	691a      	ldr	r2, [r3, #16]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	619a      	str	r2, [r3, #24]
      break;
 800713e:	e0a5      	b.n	800728c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68b9      	ldr	r1, [r7, #8]
 8007146:	4618      	mov	r0, r3
 8007148:	f000 f9e2 	bl	8007510 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	699a      	ldr	r2, [r3, #24]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800715a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	699a      	ldr	r2, [r3, #24]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800716a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6999      	ldr	r1, [r3, #24]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	021a      	lsls	r2, r3, #8
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	430a      	orrs	r2, r1
 800717e:	619a      	str	r2, [r3, #24]
      break;
 8007180:	e084      	b.n	800728c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68b9      	ldr	r1, [r7, #8]
 8007188:	4618      	mov	r0, r3
 800718a:	f000 fa55 	bl	8007638 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	69da      	ldr	r2, [r3, #28]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f042 0208 	orr.w	r2, r2, #8
 800719c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	69da      	ldr	r2, [r3, #28]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f022 0204 	bic.w	r2, r2, #4
 80071ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	69d9      	ldr	r1, [r3, #28]
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	691a      	ldr	r2, [r3, #16]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	430a      	orrs	r2, r1
 80071be:	61da      	str	r2, [r3, #28]
      break;
 80071c0:	e064      	b.n	800728c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68b9      	ldr	r1, [r7, #8]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f000 fac7 	bl	800775c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	69da      	ldr	r2, [r3, #28]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	69da      	ldr	r2, [r3, #28]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	69d9      	ldr	r1, [r3, #28]
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	021a      	lsls	r2, r3, #8
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	430a      	orrs	r2, r1
 8007200:	61da      	str	r2, [r3, #28]
      break;
 8007202:	e043      	b.n	800728c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68b9      	ldr	r1, [r7, #8]
 800720a:	4618      	mov	r0, r3
 800720c:	f000 fb3a 	bl	8007884 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f042 0208 	orr.w	r2, r2, #8
 800721e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f022 0204 	bic.w	r2, r2, #4
 800722e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	691a      	ldr	r2, [r3, #16]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007242:	e023      	b.n	800728c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68b9      	ldr	r1, [r7, #8]
 800724a:	4618      	mov	r0, r3
 800724c:	f000 fb84 	bl	8007958 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800725e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800726e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	021a      	lsls	r2, r3, #8
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	430a      	orrs	r2, r1
 8007282:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007284:	e002      	b.n	800728c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	75fb      	strb	r3, [r7, #23]
      break;
 800728a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007294:	7dfb      	ldrb	r3, [r7, #23]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3718      	adds	r7, #24
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop

080072a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a42      	ldr	r2, [pc, #264]	; (80073bc <TIM_Base_SetConfig+0x11c>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d013      	beq.n	80072e0 <TIM_Base_SetConfig+0x40>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072be:	d00f      	beq.n	80072e0 <TIM_Base_SetConfig+0x40>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a3f      	ldr	r2, [pc, #252]	; (80073c0 <TIM_Base_SetConfig+0x120>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d00b      	beq.n	80072e0 <TIM_Base_SetConfig+0x40>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a3e      	ldr	r2, [pc, #248]	; (80073c4 <TIM_Base_SetConfig+0x124>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d007      	beq.n	80072e0 <TIM_Base_SetConfig+0x40>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a3d      	ldr	r2, [pc, #244]	; (80073c8 <TIM_Base_SetConfig+0x128>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d003      	beq.n	80072e0 <TIM_Base_SetConfig+0x40>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a3c      	ldr	r2, [pc, #240]	; (80073cc <TIM_Base_SetConfig+0x12c>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d108      	bne.n	80072f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a31      	ldr	r2, [pc, #196]	; (80073bc <TIM_Base_SetConfig+0x11c>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d01f      	beq.n	800733a <TIM_Base_SetConfig+0x9a>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007300:	d01b      	beq.n	800733a <TIM_Base_SetConfig+0x9a>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a2e      	ldr	r2, [pc, #184]	; (80073c0 <TIM_Base_SetConfig+0x120>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d017      	beq.n	800733a <TIM_Base_SetConfig+0x9a>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a2d      	ldr	r2, [pc, #180]	; (80073c4 <TIM_Base_SetConfig+0x124>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d013      	beq.n	800733a <TIM_Base_SetConfig+0x9a>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a2c      	ldr	r2, [pc, #176]	; (80073c8 <TIM_Base_SetConfig+0x128>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d00f      	beq.n	800733a <TIM_Base_SetConfig+0x9a>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a2c      	ldr	r2, [pc, #176]	; (80073d0 <TIM_Base_SetConfig+0x130>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d00b      	beq.n	800733a <TIM_Base_SetConfig+0x9a>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a2b      	ldr	r2, [pc, #172]	; (80073d4 <TIM_Base_SetConfig+0x134>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d007      	beq.n	800733a <TIM_Base_SetConfig+0x9a>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a2a      	ldr	r2, [pc, #168]	; (80073d8 <TIM_Base_SetConfig+0x138>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d003      	beq.n	800733a <TIM_Base_SetConfig+0x9a>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a25      	ldr	r2, [pc, #148]	; (80073cc <TIM_Base_SetConfig+0x12c>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d108      	bne.n	800734c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	4313      	orrs	r3, r2
 800734a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	4313      	orrs	r3, r2
 8007358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	689a      	ldr	r2, [r3, #8]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a12      	ldr	r2, [pc, #72]	; (80073bc <TIM_Base_SetConfig+0x11c>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d013      	beq.n	80073a0 <TIM_Base_SetConfig+0x100>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a13      	ldr	r2, [pc, #76]	; (80073c8 <TIM_Base_SetConfig+0x128>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d00f      	beq.n	80073a0 <TIM_Base_SetConfig+0x100>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a13      	ldr	r2, [pc, #76]	; (80073d0 <TIM_Base_SetConfig+0x130>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d00b      	beq.n	80073a0 <TIM_Base_SetConfig+0x100>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a12      	ldr	r2, [pc, #72]	; (80073d4 <TIM_Base_SetConfig+0x134>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d007      	beq.n	80073a0 <TIM_Base_SetConfig+0x100>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a11      	ldr	r2, [pc, #68]	; (80073d8 <TIM_Base_SetConfig+0x138>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d003      	beq.n	80073a0 <TIM_Base_SetConfig+0x100>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a0c      	ldr	r2, [pc, #48]	; (80073cc <TIM_Base_SetConfig+0x12c>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d103      	bne.n	80073a8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	691a      	ldr	r2, [r3, #16]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	615a      	str	r2, [r3, #20]
}
 80073ae:	bf00      	nop
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	40012c00 	.word	0x40012c00
 80073c0:	40000400 	.word	0x40000400
 80073c4:	40000800 	.word	0x40000800
 80073c8:	40013400 	.word	0x40013400
 80073cc:	40015000 	.word	0x40015000
 80073d0:	40014000 	.word	0x40014000
 80073d4:	40014400 	.word	0x40014400
 80073d8:	40014800 	.word	0x40014800

080073dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073dc:	b480      	push	{r7}
 80073de:	b087      	sub	sp, #28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	f023 0201 	bic.w	r2, r3, #1
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800740a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800740e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f023 0303 	bic.w	r3, r3, #3
 8007416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	4313      	orrs	r3, r2
 8007420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f023 0302 	bic.w	r3, r3, #2
 8007428:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	697a      	ldr	r2, [r7, #20]
 8007430:	4313      	orrs	r3, r2
 8007432:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a30      	ldr	r2, [pc, #192]	; (80074f8 <TIM_OC1_SetConfig+0x11c>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d013      	beq.n	8007464 <TIM_OC1_SetConfig+0x88>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a2f      	ldr	r2, [pc, #188]	; (80074fc <TIM_OC1_SetConfig+0x120>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d00f      	beq.n	8007464 <TIM_OC1_SetConfig+0x88>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a2e      	ldr	r2, [pc, #184]	; (8007500 <TIM_OC1_SetConfig+0x124>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d00b      	beq.n	8007464 <TIM_OC1_SetConfig+0x88>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a2d      	ldr	r2, [pc, #180]	; (8007504 <TIM_OC1_SetConfig+0x128>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d007      	beq.n	8007464 <TIM_OC1_SetConfig+0x88>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a2c      	ldr	r2, [pc, #176]	; (8007508 <TIM_OC1_SetConfig+0x12c>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d003      	beq.n	8007464 <TIM_OC1_SetConfig+0x88>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a2b      	ldr	r2, [pc, #172]	; (800750c <TIM_OC1_SetConfig+0x130>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d10c      	bne.n	800747e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	f023 0308 	bic.w	r3, r3, #8
 800746a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	4313      	orrs	r3, r2
 8007474:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	f023 0304 	bic.w	r3, r3, #4
 800747c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a1d      	ldr	r2, [pc, #116]	; (80074f8 <TIM_OC1_SetConfig+0x11c>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d013      	beq.n	80074ae <TIM_OC1_SetConfig+0xd2>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a1c      	ldr	r2, [pc, #112]	; (80074fc <TIM_OC1_SetConfig+0x120>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d00f      	beq.n	80074ae <TIM_OC1_SetConfig+0xd2>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a1b      	ldr	r2, [pc, #108]	; (8007500 <TIM_OC1_SetConfig+0x124>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d00b      	beq.n	80074ae <TIM_OC1_SetConfig+0xd2>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a1a      	ldr	r2, [pc, #104]	; (8007504 <TIM_OC1_SetConfig+0x128>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d007      	beq.n	80074ae <TIM_OC1_SetConfig+0xd2>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a19      	ldr	r2, [pc, #100]	; (8007508 <TIM_OC1_SetConfig+0x12c>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d003      	beq.n	80074ae <TIM_OC1_SetConfig+0xd2>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a18      	ldr	r2, [pc, #96]	; (800750c <TIM_OC1_SetConfig+0x130>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d111      	bne.n	80074d2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	685a      	ldr	r2, [r3, #4]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	621a      	str	r2, [r3, #32]
}
 80074ec:	bf00      	nop
 80074ee:	371c      	adds	r7, #28
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr
 80074f8:	40012c00 	.word	0x40012c00
 80074fc:	40013400 	.word	0x40013400
 8007500:	40014000 	.word	0x40014000
 8007504:	40014400 	.word	0x40014400
 8007508:	40014800 	.word	0x40014800
 800750c:	40015000 	.word	0x40015000

08007510 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007510:	b480      	push	{r7}
 8007512:	b087      	sub	sp, #28
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a1b      	ldr	r3, [r3, #32]
 800751e:	f023 0210 	bic.w	r2, r3, #16
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800753e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800754a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	021b      	lsls	r3, r3, #8
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	4313      	orrs	r3, r2
 8007556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	f023 0320 	bic.w	r3, r3, #32
 800755e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	011b      	lsls	r3, r3, #4
 8007566:	697a      	ldr	r2, [r7, #20]
 8007568:	4313      	orrs	r3, r2
 800756a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a2c      	ldr	r2, [pc, #176]	; (8007620 <TIM_OC2_SetConfig+0x110>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d007      	beq.n	8007584 <TIM_OC2_SetConfig+0x74>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a2b      	ldr	r2, [pc, #172]	; (8007624 <TIM_OC2_SetConfig+0x114>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d003      	beq.n	8007584 <TIM_OC2_SetConfig+0x74>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a2a      	ldr	r2, [pc, #168]	; (8007628 <TIM_OC2_SetConfig+0x118>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d10d      	bne.n	80075a0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800758a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	011b      	lsls	r3, r3, #4
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	4313      	orrs	r3, r2
 8007596:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800759e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a1f      	ldr	r2, [pc, #124]	; (8007620 <TIM_OC2_SetConfig+0x110>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d013      	beq.n	80075d0 <TIM_OC2_SetConfig+0xc0>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a1e      	ldr	r2, [pc, #120]	; (8007624 <TIM_OC2_SetConfig+0x114>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d00f      	beq.n	80075d0 <TIM_OC2_SetConfig+0xc0>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a1e      	ldr	r2, [pc, #120]	; (800762c <TIM_OC2_SetConfig+0x11c>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d00b      	beq.n	80075d0 <TIM_OC2_SetConfig+0xc0>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a1d      	ldr	r2, [pc, #116]	; (8007630 <TIM_OC2_SetConfig+0x120>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d007      	beq.n	80075d0 <TIM_OC2_SetConfig+0xc0>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a1c      	ldr	r2, [pc, #112]	; (8007634 <TIM_OC2_SetConfig+0x124>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d003      	beq.n	80075d0 <TIM_OC2_SetConfig+0xc0>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a17      	ldr	r2, [pc, #92]	; (8007628 <TIM_OC2_SetConfig+0x118>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d113      	bne.n	80075f8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	695b      	ldr	r3, [r3, #20]
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	693a      	ldr	r2, [r7, #16]
 80075fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	685a      	ldr	r2, [r3, #4]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	621a      	str	r2, [r3, #32]
}
 8007612:	bf00      	nop
 8007614:	371c      	adds	r7, #28
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	40012c00 	.word	0x40012c00
 8007624:	40013400 	.word	0x40013400
 8007628:	40015000 	.word	0x40015000
 800762c:	40014000 	.word	0x40014000
 8007630:	40014400 	.word	0x40014400
 8007634:	40014800 	.word	0x40014800

08007638 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	69db      	ldr	r3, [r3, #28]
 800765e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800766a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f023 0303 	bic.w	r3, r3, #3
 8007672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	4313      	orrs	r3, r2
 800767c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	021b      	lsls	r3, r3, #8
 800768c:	697a      	ldr	r2, [r7, #20]
 800768e:	4313      	orrs	r3, r2
 8007690:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a2b      	ldr	r2, [pc, #172]	; (8007744 <TIM_OC3_SetConfig+0x10c>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d007      	beq.n	80076aa <TIM_OC3_SetConfig+0x72>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a2a      	ldr	r2, [pc, #168]	; (8007748 <TIM_OC3_SetConfig+0x110>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d003      	beq.n	80076aa <TIM_OC3_SetConfig+0x72>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a29      	ldr	r2, [pc, #164]	; (800774c <TIM_OC3_SetConfig+0x114>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d10d      	bne.n	80076c6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	021b      	lsls	r3, r3, #8
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a1e      	ldr	r2, [pc, #120]	; (8007744 <TIM_OC3_SetConfig+0x10c>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d013      	beq.n	80076f6 <TIM_OC3_SetConfig+0xbe>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a1d      	ldr	r2, [pc, #116]	; (8007748 <TIM_OC3_SetConfig+0x110>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d00f      	beq.n	80076f6 <TIM_OC3_SetConfig+0xbe>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a1d      	ldr	r2, [pc, #116]	; (8007750 <TIM_OC3_SetConfig+0x118>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d00b      	beq.n	80076f6 <TIM_OC3_SetConfig+0xbe>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a1c      	ldr	r2, [pc, #112]	; (8007754 <TIM_OC3_SetConfig+0x11c>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d007      	beq.n	80076f6 <TIM_OC3_SetConfig+0xbe>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a1b      	ldr	r2, [pc, #108]	; (8007758 <TIM_OC3_SetConfig+0x120>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d003      	beq.n	80076f6 <TIM_OC3_SetConfig+0xbe>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a16      	ldr	r2, [pc, #88]	; (800774c <TIM_OC3_SetConfig+0x114>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d113      	bne.n	800771e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	011b      	lsls	r3, r3, #4
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	4313      	orrs	r3, r2
 8007710:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	011b      	lsls	r3, r3, #4
 8007718:	693a      	ldr	r2, [r7, #16]
 800771a:	4313      	orrs	r3, r2
 800771c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	693a      	ldr	r2, [r7, #16]
 8007722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	621a      	str	r2, [r3, #32]
}
 8007738:	bf00      	nop
 800773a:	371c      	adds	r7, #28
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	40012c00 	.word	0x40012c00
 8007748:	40013400 	.word	0x40013400
 800774c:	40015000 	.word	0x40015000
 8007750:	40014000 	.word	0x40014000
 8007754:	40014400 	.word	0x40014400
 8007758:	40014800 	.word	0x40014800

0800775c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800775c:	b480      	push	{r7}
 800775e:	b087      	sub	sp, #28
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a1b      	ldr	r3, [r3, #32]
 800776a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800778a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800778e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	021b      	lsls	r3, r3, #8
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	031b      	lsls	r3, r3, #12
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a2c      	ldr	r2, [pc, #176]	; (800786c <TIM_OC4_SetConfig+0x110>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d007      	beq.n	80077d0 <TIM_OC4_SetConfig+0x74>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a2b      	ldr	r2, [pc, #172]	; (8007870 <TIM_OC4_SetConfig+0x114>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d003      	beq.n	80077d0 <TIM_OC4_SetConfig+0x74>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a2a      	ldr	r2, [pc, #168]	; (8007874 <TIM_OC4_SetConfig+0x118>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d10d      	bne.n	80077ec <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80077d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	031b      	lsls	r3, r3, #12
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a1f      	ldr	r2, [pc, #124]	; (800786c <TIM_OC4_SetConfig+0x110>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d013      	beq.n	800781c <TIM_OC4_SetConfig+0xc0>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a1e      	ldr	r2, [pc, #120]	; (8007870 <TIM_OC4_SetConfig+0x114>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d00f      	beq.n	800781c <TIM_OC4_SetConfig+0xc0>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a1e      	ldr	r2, [pc, #120]	; (8007878 <TIM_OC4_SetConfig+0x11c>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d00b      	beq.n	800781c <TIM_OC4_SetConfig+0xc0>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a1d      	ldr	r2, [pc, #116]	; (800787c <TIM_OC4_SetConfig+0x120>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d007      	beq.n	800781c <TIM_OC4_SetConfig+0xc0>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a1c      	ldr	r2, [pc, #112]	; (8007880 <TIM_OC4_SetConfig+0x124>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d003      	beq.n	800781c <TIM_OC4_SetConfig+0xc0>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a17      	ldr	r2, [pc, #92]	; (8007874 <TIM_OC4_SetConfig+0x118>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d113      	bne.n	8007844 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007822:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800782a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	019b      	lsls	r3, r3, #6
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	4313      	orrs	r3, r2
 8007836:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	019b      	lsls	r3, r3, #6
 800783e:	693a      	ldr	r2, [r7, #16]
 8007840:	4313      	orrs	r3, r2
 8007842:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	685a      	ldr	r2, [r3, #4]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	621a      	str	r2, [r3, #32]
}
 800785e:	bf00      	nop
 8007860:	371c      	adds	r7, #28
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	40012c00 	.word	0x40012c00
 8007870:	40013400 	.word	0x40013400
 8007874:	40015000 	.word	0x40015000
 8007878:	40014000 	.word	0x40014000
 800787c:	40014400 	.word	0x40014400
 8007880:	40014800 	.word	0x40014800

08007884 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007884:	b480      	push	{r7}
 8007886:	b087      	sub	sp, #28
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	4313      	orrs	r3, r2
 80078c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80078c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	041b      	lsls	r3, r3, #16
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a19      	ldr	r2, [pc, #100]	; (8007940 <TIM_OC5_SetConfig+0xbc>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d013      	beq.n	8007906 <TIM_OC5_SetConfig+0x82>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a18      	ldr	r2, [pc, #96]	; (8007944 <TIM_OC5_SetConfig+0xc0>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d00f      	beq.n	8007906 <TIM_OC5_SetConfig+0x82>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a17      	ldr	r2, [pc, #92]	; (8007948 <TIM_OC5_SetConfig+0xc4>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d00b      	beq.n	8007906 <TIM_OC5_SetConfig+0x82>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a16      	ldr	r2, [pc, #88]	; (800794c <TIM_OC5_SetConfig+0xc8>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d007      	beq.n	8007906 <TIM_OC5_SetConfig+0x82>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a15      	ldr	r2, [pc, #84]	; (8007950 <TIM_OC5_SetConfig+0xcc>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d003      	beq.n	8007906 <TIM_OC5_SetConfig+0x82>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a14      	ldr	r2, [pc, #80]	; (8007954 <TIM_OC5_SetConfig+0xd0>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d109      	bne.n	800791a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800790c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	021b      	lsls	r3, r3, #8
 8007914:	697a      	ldr	r2, [r7, #20]
 8007916:	4313      	orrs	r3, r2
 8007918:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	685a      	ldr	r2, [r3, #4]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	621a      	str	r2, [r3, #32]
}
 8007934:	bf00      	nop
 8007936:	371c      	adds	r7, #28
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	40012c00 	.word	0x40012c00
 8007944:	40013400 	.word	0x40013400
 8007948:	40014000 	.word	0x40014000
 800794c:	40014400 	.word	0x40014400
 8007950:	40014800 	.word	0x40014800
 8007954:	40015000 	.word	0x40015000

08007958 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007958:	b480      	push	{r7}
 800795a:	b087      	sub	sp, #28
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800797e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800798a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	021b      	lsls	r3, r3, #8
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	4313      	orrs	r3, r2
 8007996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800799e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	051b      	lsls	r3, r3, #20
 80079a6:	693a      	ldr	r2, [r7, #16]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a1a      	ldr	r2, [pc, #104]	; (8007a18 <TIM_OC6_SetConfig+0xc0>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d013      	beq.n	80079dc <TIM_OC6_SetConfig+0x84>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a19      	ldr	r2, [pc, #100]	; (8007a1c <TIM_OC6_SetConfig+0xc4>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d00f      	beq.n	80079dc <TIM_OC6_SetConfig+0x84>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a18      	ldr	r2, [pc, #96]	; (8007a20 <TIM_OC6_SetConfig+0xc8>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d00b      	beq.n	80079dc <TIM_OC6_SetConfig+0x84>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a17      	ldr	r2, [pc, #92]	; (8007a24 <TIM_OC6_SetConfig+0xcc>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d007      	beq.n	80079dc <TIM_OC6_SetConfig+0x84>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a16      	ldr	r2, [pc, #88]	; (8007a28 <TIM_OC6_SetConfig+0xd0>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d003      	beq.n	80079dc <TIM_OC6_SetConfig+0x84>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a15      	ldr	r2, [pc, #84]	; (8007a2c <TIM_OC6_SetConfig+0xd4>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d109      	bne.n	80079f0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	695b      	ldr	r3, [r3, #20]
 80079e8:	029b      	lsls	r3, r3, #10
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	621a      	str	r2, [r3, #32]
}
 8007a0a:	bf00      	nop
 8007a0c:	371c      	adds	r7, #28
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	40012c00 	.word	0x40012c00
 8007a1c:	40013400 	.word	0x40013400
 8007a20:	40014000 	.word	0x40014000
 8007a24:	40014400 	.word	0x40014400
 8007a28:	40014800 	.word	0x40014800
 8007a2c:	40015000 	.word	0x40015000

08007a30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	f003 031f 	and.w	r3, r3, #31
 8007a42:	2201      	movs	r2, #1
 8007a44:	fa02 f303 	lsl.w	r3, r2, r3
 8007a48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6a1a      	ldr	r2, [r3, #32]
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	43db      	mvns	r3, r3
 8007a52:	401a      	ands	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6a1a      	ldr	r2, [r3, #32]
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	f003 031f 	and.w	r3, r3, #31
 8007a62:	6879      	ldr	r1, [r7, #4]
 8007a64:	fa01 f303 	lsl.w	r3, r1, r3
 8007a68:	431a      	orrs	r2, r3
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	621a      	str	r2, [r3, #32]
}
 8007a6e:	bf00      	nop
 8007a70:	371c      	adds	r7, #28
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
	...

08007a7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d101      	bne.n	8007a94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a90:	2302      	movs	r3, #2
 8007a92:	e06f      	b.n	8007b74 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2202      	movs	r2, #2
 8007aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a31      	ldr	r2, [pc, #196]	; (8007b80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d009      	beq.n	8007ad2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a30      	ldr	r2, [pc, #192]	; (8007b84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d004      	beq.n	8007ad2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a2e      	ldr	r2, [pc, #184]	; (8007b88 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d108      	bne.n	8007ae4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007ad8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a1e      	ldr	r2, [pc, #120]	; (8007b80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d01d      	beq.n	8007b48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b14:	d018      	beq.n	8007b48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a1c      	ldr	r2, [pc, #112]	; (8007b8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d013      	beq.n	8007b48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a1a      	ldr	r2, [pc, #104]	; (8007b90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d00e      	beq.n	8007b48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a15      	ldr	r2, [pc, #84]	; (8007b84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d009      	beq.n	8007b48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a16      	ldr	r2, [pc, #88]	; (8007b94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d004      	beq.n	8007b48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a11      	ldr	r2, [pc, #68]	; (8007b88 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d10c      	bne.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2201      	movs	r2, #1
 8007b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr
 8007b80:	40012c00 	.word	0x40012c00
 8007b84:	40013400 	.word	0x40013400
 8007b88:	40015000 	.word	0x40015000
 8007b8c:	40000400 	.word	0x40000400
 8007b90:	40000800 	.word	0x40000800
 8007b94:	40014000 	.word	0x40014000

08007b98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d101      	bne.n	8007bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	e096      	b.n	8007ce2 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	695b      	ldr	r3, [r3, #20]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	041b      	lsls	r3, r3, #16
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a2f      	ldr	r2, [pc, #188]	; (8007cf0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d009      	beq.n	8007c4c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a2d      	ldr	r2, [pc, #180]	; (8007cf4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d004      	beq.n	8007c4c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a2c      	ldr	r2, [pc, #176]	; (8007cf8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d106      	bne.n	8007c5a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a24      	ldr	r2, [pc, #144]	; (8007cf0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d009      	beq.n	8007c78 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a22      	ldr	r2, [pc, #136]	; (8007cf4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d004      	beq.n	8007c78 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a21      	ldr	r2, [pc, #132]	; (8007cf8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d12b      	bne.n	8007cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c82:	051b      	lsls	r3, r3, #20
 8007c84:	4313      	orrs	r3, r2
 8007c86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	6a1b      	ldr	r3, [r3, #32]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a11      	ldr	r2, [pc, #68]	; (8007cf0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d009      	beq.n	8007cc2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a10      	ldr	r2, [pc, #64]	; (8007cf4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d004      	beq.n	8007cc2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a0e      	ldr	r2, [pc, #56]	; (8007cf8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d106      	bne.n	8007cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3714      	adds	r7, #20
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	40012c00 	.word	0x40012c00
 8007cf4:	40013400 	.word	0x40013400
 8007cf8:	40015000 	.word	0x40015000

08007cfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e042      	b.n	8007d94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d106      	bne.n	8007d26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7fa f9d9 	bl	80020d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2224      	movs	r2, #36	; 0x24
 8007d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f022 0201 	bic.w	r2, r2, #1
 8007d3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f8c2 	bl	8007ec8 <UART_SetConfig>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d101      	bne.n	8007d4e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e022      	b.n	8007d94 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d002      	beq.n	8007d5c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fbb2 	bl	80084c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685a      	ldr	r2, [r3, #4]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	689a      	ldr	r2, [r3, #8]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f042 0201 	orr.w	r2, r2, #1
 8007d8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 fc39 	bl	8008604 <UART_CheckIdleState>
 8007d92:	4603      	mov	r3, r0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b08a      	sub	sp, #40	; 0x28
 8007da0:	af02      	add	r7, sp, #8
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	603b      	str	r3, [r7, #0]
 8007da8:	4613      	mov	r3, r2
 8007daa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007db2:	2b20      	cmp	r3, #32
 8007db4:	f040 8083 	bne.w	8007ebe <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d002      	beq.n	8007dc4 <HAL_UART_Transmit+0x28>
 8007dbe:	88fb      	ldrh	r3, [r7, #6]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d101      	bne.n	8007dc8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e07b      	b.n	8007ec0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d101      	bne.n	8007dd6 <HAL_UART_Transmit+0x3a>
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	e074      	b.n	8007ec0 <HAL_UART_Transmit+0x124>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2221      	movs	r2, #33	; 0x21
 8007dea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007dee:	f7fa fcd1 	bl	8002794 <HAL_GetTick>
 8007df2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	88fa      	ldrh	r2, [r7, #6]
 8007df8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	88fa      	ldrh	r2, [r7, #6]
 8007e00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e0c:	d108      	bne.n	8007e20 <HAL_UART_Transmit+0x84>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d104      	bne.n	8007e20 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007e16:	2300      	movs	r3, #0
 8007e18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	61bb      	str	r3, [r7, #24]
 8007e1e:	e003      	b.n	8007e28 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e24:	2300      	movs	r3, #0
 8007e26:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007e30:	e02c      	b.n	8007e8c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	2180      	movs	r1, #128	; 0x80
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f000 fc2c 	bl	800869a <UART_WaitOnFlagUntilTimeout>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d001      	beq.n	8007e4c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e039      	b.n	8007ec0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10b      	bne.n	8007e6a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	881b      	ldrh	r3, [r3, #0]
 8007e56:	461a      	mov	r2, r3
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	3302      	adds	r3, #2
 8007e66:	61bb      	str	r3, [r7, #24]
 8007e68:	e007      	b.n	8007e7a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	781a      	ldrb	r2, [r3, #0]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	3301      	adds	r3, #1
 8007e78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	3b01      	subs	r3, #1
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1cc      	bne.n	8007e32 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	9300      	str	r3, [sp, #0]
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	2140      	movs	r1, #64	; 0x40
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f000 fbf9 	bl	800869a <UART_WaitOnFlagUntilTimeout>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e006      	b.n	8007ec0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2220      	movs	r2, #32
 8007eb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	e000      	b.n	8007ec0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007ebe:	2302      	movs	r3, #2
  }
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3720      	adds	r7, #32
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ecc:	b08c      	sub	sp, #48	; 0x30
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	689a      	ldr	r2, [r3, #8]
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	431a      	orrs	r2, r3
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	4baa      	ldr	r3, [pc, #680]	; (80081a0 <UART_SetConfig+0x2d8>)
 8007ef8:	4013      	ands	r3, r2
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	6812      	ldr	r2, [r2, #0]
 8007efe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f00:	430b      	orrs	r3, r1
 8007f02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	68da      	ldr	r2, [r3, #12]
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	430a      	orrs	r2, r1
 8007f18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	699b      	ldr	r3, [r3, #24]
 8007f1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a9f      	ldr	r2, [pc, #636]	; (80081a4 <UART_SetConfig+0x2dc>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d004      	beq.n	8007f34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	6a1b      	ldr	r3, [r3, #32]
 8007f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f30:	4313      	orrs	r3, r2
 8007f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007f3e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007f42:	697a      	ldr	r2, [r7, #20]
 8007f44:	6812      	ldr	r2, [r2, #0]
 8007f46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f48:	430b      	orrs	r3, r1
 8007f4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f52:	f023 010f 	bic.w	r1, r3, #15
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a90      	ldr	r2, [pc, #576]	; (80081a8 <UART_SetConfig+0x2e0>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d125      	bne.n	8007fb8 <UART_SetConfig+0xf0>
 8007f6c:	4b8f      	ldr	r3, [pc, #572]	; (80081ac <UART_SetConfig+0x2e4>)
 8007f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f72:	f003 0303 	and.w	r3, r3, #3
 8007f76:	2b03      	cmp	r3, #3
 8007f78:	d81a      	bhi.n	8007fb0 <UART_SetConfig+0xe8>
 8007f7a:	a201      	add	r2, pc, #4	; (adr r2, 8007f80 <UART_SetConfig+0xb8>)
 8007f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f80:	08007f91 	.word	0x08007f91
 8007f84:	08007fa1 	.word	0x08007fa1
 8007f88:	08007f99 	.word	0x08007f99
 8007f8c:	08007fa9 	.word	0x08007fa9
 8007f90:	2301      	movs	r3, #1
 8007f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f96:	e116      	b.n	80081c6 <UART_SetConfig+0x2fe>
 8007f98:	2302      	movs	r3, #2
 8007f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f9e:	e112      	b.n	80081c6 <UART_SetConfig+0x2fe>
 8007fa0:	2304      	movs	r3, #4
 8007fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fa6:	e10e      	b.n	80081c6 <UART_SetConfig+0x2fe>
 8007fa8:	2308      	movs	r3, #8
 8007faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fae:	e10a      	b.n	80081c6 <UART_SetConfig+0x2fe>
 8007fb0:	2310      	movs	r3, #16
 8007fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fb6:	e106      	b.n	80081c6 <UART_SetConfig+0x2fe>
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a7c      	ldr	r2, [pc, #496]	; (80081b0 <UART_SetConfig+0x2e8>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d138      	bne.n	8008034 <UART_SetConfig+0x16c>
 8007fc2:	4b7a      	ldr	r3, [pc, #488]	; (80081ac <UART_SetConfig+0x2e4>)
 8007fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fc8:	f003 030c 	and.w	r3, r3, #12
 8007fcc:	2b0c      	cmp	r3, #12
 8007fce:	d82d      	bhi.n	800802c <UART_SetConfig+0x164>
 8007fd0:	a201      	add	r2, pc, #4	; (adr r2, 8007fd8 <UART_SetConfig+0x110>)
 8007fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd6:	bf00      	nop
 8007fd8:	0800800d 	.word	0x0800800d
 8007fdc:	0800802d 	.word	0x0800802d
 8007fe0:	0800802d 	.word	0x0800802d
 8007fe4:	0800802d 	.word	0x0800802d
 8007fe8:	0800801d 	.word	0x0800801d
 8007fec:	0800802d 	.word	0x0800802d
 8007ff0:	0800802d 	.word	0x0800802d
 8007ff4:	0800802d 	.word	0x0800802d
 8007ff8:	08008015 	.word	0x08008015
 8007ffc:	0800802d 	.word	0x0800802d
 8008000:	0800802d 	.word	0x0800802d
 8008004:	0800802d 	.word	0x0800802d
 8008008:	08008025 	.word	0x08008025
 800800c:	2300      	movs	r3, #0
 800800e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008012:	e0d8      	b.n	80081c6 <UART_SetConfig+0x2fe>
 8008014:	2302      	movs	r3, #2
 8008016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800801a:	e0d4      	b.n	80081c6 <UART_SetConfig+0x2fe>
 800801c:	2304      	movs	r3, #4
 800801e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008022:	e0d0      	b.n	80081c6 <UART_SetConfig+0x2fe>
 8008024:	2308      	movs	r3, #8
 8008026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800802a:	e0cc      	b.n	80081c6 <UART_SetConfig+0x2fe>
 800802c:	2310      	movs	r3, #16
 800802e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008032:	e0c8      	b.n	80081c6 <UART_SetConfig+0x2fe>
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a5e      	ldr	r2, [pc, #376]	; (80081b4 <UART_SetConfig+0x2ec>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d125      	bne.n	800808a <UART_SetConfig+0x1c2>
 800803e:	4b5b      	ldr	r3, [pc, #364]	; (80081ac <UART_SetConfig+0x2e4>)
 8008040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008044:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008048:	2b30      	cmp	r3, #48	; 0x30
 800804a:	d016      	beq.n	800807a <UART_SetConfig+0x1b2>
 800804c:	2b30      	cmp	r3, #48	; 0x30
 800804e:	d818      	bhi.n	8008082 <UART_SetConfig+0x1ba>
 8008050:	2b20      	cmp	r3, #32
 8008052:	d00a      	beq.n	800806a <UART_SetConfig+0x1a2>
 8008054:	2b20      	cmp	r3, #32
 8008056:	d814      	bhi.n	8008082 <UART_SetConfig+0x1ba>
 8008058:	2b00      	cmp	r3, #0
 800805a:	d002      	beq.n	8008062 <UART_SetConfig+0x19a>
 800805c:	2b10      	cmp	r3, #16
 800805e:	d008      	beq.n	8008072 <UART_SetConfig+0x1aa>
 8008060:	e00f      	b.n	8008082 <UART_SetConfig+0x1ba>
 8008062:	2300      	movs	r3, #0
 8008064:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008068:	e0ad      	b.n	80081c6 <UART_SetConfig+0x2fe>
 800806a:	2302      	movs	r3, #2
 800806c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008070:	e0a9      	b.n	80081c6 <UART_SetConfig+0x2fe>
 8008072:	2304      	movs	r3, #4
 8008074:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008078:	e0a5      	b.n	80081c6 <UART_SetConfig+0x2fe>
 800807a:	2308      	movs	r3, #8
 800807c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008080:	e0a1      	b.n	80081c6 <UART_SetConfig+0x2fe>
 8008082:	2310      	movs	r3, #16
 8008084:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008088:	e09d      	b.n	80081c6 <UART_SetConfig+0x2fe>
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a4a      	ldr	r2, [pc, #296]	; (80081b8 <UART_SetConfig+0x2f0>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d125      	bne.n	80080e0 <UART_SetConfig+0x218>
 8008094:	4b45      	ldr	r3, [pc, #276]	; (80081ac <UART_SetConfig+0x2e4>)
 8008096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800809a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800809e:	2bc0      	cmp	r3, #192	; 0xc0
 80080a0:	d016      	beq.n	80080d0 <UART_SetConfig+0x208>
 80080a2:	2bc0      	cmp	r3, #192	; 0xc0
 80080a4:	d818      	bhi.n	80080d8 <UART_SetConfig+0x210>
 80080a6:	2b80      	cmp	r3, #128	; 0x80
 80080a8:	d00a      	beq.n	80080c0 <UART_SetConfig+0x1f8>
 80080aa:	2b80      	cmp	r3, #128	; 0x80
 80080ac:	d814      	bhi.n	80080d8 <UART_SetConfig+0x210>
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d002      	beq.n	80080b8 <UART_SetConfig+0x1f0>
 80080b2:	2b40      	cmp	r3, #64	; 0x40
 80080b4:	d008      	beq.n	80080c8 <UART_SetConfig+0x200>
 80080b6:	e00f      	b.n	80080d8 <UART_SetConfig+0x210>
 80080b8:	2300      	movs	r3, #0
 80080ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080be:	e082      	b.n	80081c6 <UART_SetConfig+0x2fe>
 80080c0:	2302      	movs	r3, #2
 80080c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080c6:	e07e      	b.n	80081c6 <UART_SetConfig+0x2fe>
 80080c8:	2304      	movs	r3, #4
 80080ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ce:	e07a      	b.n	80081c6 <UART_SetConfig+0x2fe>
 80080d0:	2308      	movs	r3, #8
 80080d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080d6:	e076      	b.n	80081c6 <UART_SetConfig+0x2fe>
 80080d8:	2310      	movs	r3, #16
 80080da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080de:	e072      	b.n	80081c6 <UART_SetConfig+0x2fe>
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a35      	ldr	r2, [pc, #212]	; (80081bc <UART_SetConfig+0x2f4>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d12a      	bne.n	8008140 <UART_SetConfig+0x278>
 80080ea:	4b30      	ldr	r3, [pc, #192]	; (80081ac <UART_SetConfig+0x2e4>)
 80080ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080f8:	d01a      	beq.n	8008130 <UART_SetConfig+0x268>
 80080fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080fe:	d81b      	bhi.n	8008138 <UART_SetConfig+0x270>
 8008100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008104:	d00c      	beq.n	8008120 <UART_SetConfig+0x258>
 8008106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800810a:	d815      	bhi.n	8008138 <UART_SetConfig+0x270>
 800810c:	2b00      	cmp	r3, #0
 800810e:	d003      	beq.n	8008118 <UART_SetConfig+0x250>
 8008110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008114:	d008      	beq.n	8008128 <UART_SetConfig+0x260>
 8008116:	e00f      	b.n	8008138 <UART_SetConfig+0x270>
 8008118:	2300      	movs	r3, #0
 800811a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800811e:	e052      	b.n	80081c6 <UART_SetConfig+0x2fe>
 8008120:	2302      	movs	r3, #2
 8008122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008126:	e04e      	b.n	80081c6 <UART_SetConfig+0x2fe>
 8008128:	2304      	movs	r3, #4
 800812a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800812e:	e04a      	b.n	80081c6 <UART_SetConfig+0x2fe>
 8008130:	2308      	movs	r3, #8
 8008132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008136:	e046      	b.n	80081c6 <UART_SetConfig+0x2fe>
 8008138:	2310      	movs	r3, #16
 800813a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800813e:	e042      	b.n	80081c6 <UART_SetConfig+0x2fe>
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a17      	ldr	r2, [pc, #92]	; (80081a4 <UART_SetConfig+0x2dc>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d13a      	bne.n	80081c0 <UART_SetConfig+0x2f8>
 800814a:	4b18      	ldr	r3, [pc, #96]	; (80081ac <UART_SetConfig+0x2e4>)
 800814c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008150:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008154:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008158:	d01a      	beq.n	8008190 <UART_SetConfig+0x2c8>
 800815a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800815e:	d81b      	bhi.n	8008198 <UART_SetConfig+0x2d0>
 8008160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008164:	d00c      	beq.n	8008180 <UART_SetConfig+0x2b8>
 8008166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800816a:	d815      	bhi.n	8008198 <UART_SetConfig+0x2d0>
 800816c:	2b00      	cmp	r3, #0
 800816e:	d003      	beq.n	8008178 <UART_SetConfig+0x2b0>
 8008170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008174:	d008      	beq.n	8008188 <UART_SetConfig+0x2c0>
 8008176:	e00f      	b.n	8008198 <UART_SetConfig+0x2d0>
 8008178:	2300      	movs	r3, #0
 800817a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800817e:	e022      	b.n	80081c6 <UART_SetConfig+0x2fe>
 8008180:	2302      	movs	r3, #2
 8008182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008186:	e01e      	b.n	80081c6 <UART_SetConfig+0x2fe>
 8008188:	2304      	movs	r3, #4
 800818a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800818e:	e01a      	b.n	80081c6 <UART_SetConfig+0x2fe>
 8008190:	2308      	movs	r3, #8
 8008192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008196:	e016      	b.n	80081c6 <UART_SetConfig+0x2fe>
 8008198:	2310      	movs	r3, #16
 800819a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800819e:	e012      	b.n	80081c6 <UART_SetConfig+0x2fe>
 80081a0:	cfff69f3 	.word	0xcfff69f3
 80081a4:	40008000 	.word	0x40008000
 80081a8:	40013800 	.word	0x40013800
 80081ac:	40021000 	.word	0x40021000
 80081b0:	40004400 	.word	0x40004400
 80081b4:	40004800 	.word	0x40004800
 80081b8:	40004c00 	.word	0x40004c00
 80081bc:	40005000 	.word	0x40005000
 80081c0:	2310      	movs	r3, #16
 80081c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4aae      	ldr	r2, [pc, #696]	; (8008484 <UART_SetConfig+0x5bc>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	f040 8097 	bne.w	8008300 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80081d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80081d6:	2b08      	cmp	r3, #8
 80081d8:	d823      	bhi.n	8008222 <UART_SetConfig+0x35a>
 80081da:	a201      	add	r2, pc, #4	; (adr r2, 80081e0 <UART_SetConfig+0x318>)
 80081dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e0:	08008205 	.word	0x08008205
 80081e4:	08008223 	.word	0x08008223
 80081e8:	0800820d 	.word	0x0800820d
 80081ec:	08008223 	.word	0x08008223
 80081f0:	08008213 	.word	0x08008213
 80081f4:	08008223 	.word	0x08008223
 80081f8:	08008223 	.word	0x08008223
 80081fc:	08008223 	.word	0x08008223
 8008200:	0800821b 	.word	0x0800821b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008204:	f7fe f9e0 	bl	80065c8 <HAL_RCC_GetPCLK1Freq>
 8008208:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800820a:	e010      	b.n	800822e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800820c:	4b9e      	ldr	r3, [pc, #632]	; (8008488 <UART_SetConfig+0x5c0>)
 800820e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008210:	e00d      	b.n	800822e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008212:	f7fe f96b 	bl	80064ec <HAL_RCC_GetSysClockFreq>
 8008216:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008218:	e009      	b.n	800822e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800821a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800821e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008220:	e005      	b.n	800822e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008222:	2300      	movs	r3, #0
 8008224:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800822c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	2b00      	cmp	r3, #0
 8008232:	f000 8130 	beq.w	8008496 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823a:	4a94      	ldr	r2, [pc, #592]	; (800848c <UART_SetConfig+0x5c4>)
 800823c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008240:	461a      	mov	r2, r3
 8008242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008244:	fbb3 f3f2 	udiv	r3, r3, r2
 8008248:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	685a      	ldr	r2, [r3, #4]
 800824e:	4613      	mov	r3, r2
 8008250:	005b      	lsls	r3, r3, #1
 8008252:	4413      	add	r3, r2
 8008254:	69ba      	ldr	r2, [r7, #24]
 8008256:	429a      	cmp	r2, r3
 8008258:	d305      	bcc.n	8008266 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008260:	69ba      	ldr	r2, [r7, #24]
 8008262:	429a      	cmp	r2, r3
 8008264:	d903      	bls.n	800826e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800826c:	e113      	b.n	8008496 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	2200      	movs	r2, #0
 8008272:	60bb      	str	r3, [r7, #8]
 8008274:	60fa      	str	r2, [r7, #12]
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827a:	4a84      	ldr	r2, [pc, #528]	; (800848c <UART_SetConfig+0x5c4>)
 800827c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008280:	b29b      	uxth	r3, r3
 8008282:	2200      	movs	r2, #0
 8008284:	603b      	str	r3, [r7, #0]
 8008286:	607a      	str	r2, [r7, #4]
 8008288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800828c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008290:	f7f8 fd22 	bl	8000cd8 <__aeabi_uldivmod>
 8008294:	4602      	mov	r2, r0
 8008296:	460b      	mov	r3, r1
 8008298:	4610      	mov	r0, r2
 800829a:	4619      	mov	r1, r3
 800829c:	f04f 0200 	mov.w	r2, #0
 80082a0:	f04f 0300 	mov.w	r3, #0
 80082a4:	020b      	lsls	r3, r1, #8
 80082a6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80082aa:	0202      	lsls	r2, r0, #8
 80082ac:	6979      	ldr	r1, [r7, #20]
 80082ae:	6849      	ldr	r1, [r1, #4]
 80082b0:	0849      	lsrs	r1, r1, #1
 80082b2:	2000      	movs	r0, #0
 80082b4:	460c      	mov	r4, r1
 80082b6:	4605      	mov	r5, r0
 80082b8:	eb12 0804 	adds.w	r8, r2, r4
 80082bc:	eb43 0905 	adc.w	r9, r3, r5
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	469a      	mov	sl, r3
 80082c8:	4693      	mov	fp, r2
 80082ca:	4652      	mov	r2, sl
 80082cc:	465b      	mov	r3, fp
 80082ce:	4640      	mov	r0, r8
 80082d0:	4649      	mov	r1, r9
 80082d2:	f7f8 fd01 	bl	8000cd8 <__aeabi_uldivmod>
 80082d6:	4602      	mov	r2, r0
 80082d8:	460b      	mov	r3, r1
 80082da:	4613      	mov	r3, r2
 80082dc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80082de:	6a3b      	ldr	r3, [r7, #32]
 80082e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082e4:	d308      	bcc.n	80082f8 <UART_SetConfig+0x430>
 80082e6:	6a3b      	ldr	r3, [r7, #32]
 80082e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082ec:	d204      	bcs.n	80082f8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	6a3a      	ldr	r2, [r7, #32]
 80082f4:	60da      	str	r2, [r3, #12]
 80082f6:	e0ce      	b.n	8008496 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80082fe:	e0ca      	b.n	8008496 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	69db      	ldr	r3, [r3, #28]
 8008304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008308:	d166      	bne.n	80083d8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800830a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800830e:	2b08      	cmp	r3, #8
 8008310:	d827      	bhi.n	8008362 <UART_SetConfig+0x49a>
 8008312:	a201      	add	r2, pc, #4	; (adr r2, 8008318 <UART_SetConfig+0x450>)
 8008314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008318:	0800833d 	.word	0x0800833d
 800831c:	08008345 	.word	0x08008345
 8008320:	0800834d 	.word	0x0800834d
 8008324:	08008363 	.word	0x08008363
 8008328:	08008353 	.word	0x08008353
 800832c:	08008363 	.word	0x08008363
 8008330:	08008363 	.word	0x08008363
 8008334:	08008363 	.word	0x08008363
 8008338:	0800835b 	.word	0x0800835b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800833c:	f7fe f944 	bl	80065c8 <HAL_RCC_GetPCLK1Freq>
 8008340:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008342:	e014      	b.n	800836e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008344:	f7fe f956 	bl	80065f4 <HAL_RCC_GetPCLK2Freq>
 8008348:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800834a:	e010      	b.n	800836e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800834c:	4b4e      	ldr	r3, [pc, #312]	; (8008488 <UART_SetConfig+0x5c0>)
 800834e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008350:	e00d      	b.n	800836e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008352:	f7fe f8cb 	bl	80064ec <HAL_RCC_GetSysClockFreq>
 8008356:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008358:	e009      	b.n	800836e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800835a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800835e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008360:	e005      	b.n	800836e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008362:	2300      	movs	r3, #0
 8008364:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800836c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800836e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008370:	2b00      	cmp	r3, #0
 8008372:	f000 8090 	beq.w	8008496 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837a:	4a44      	ldr	r2, [pc, #272]	; (800848c <UART_SetConfig+0x5c4>)
 800837c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008380:	461a      	mov	r2, r3
 8008382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008384:	fbb3 f3f2 	udiv	r3, r3, r2
 8008388:	005a      	lsls	r2, r3, #1
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	085b      	lsrs	r3, r3, #1
 8008390:	441a      	add	r2, r3
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	fbb2 f3f3 	udiv	r3, r2, r3
 800839a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800839c:	6a3b      	ldr	r3, [r7, #32]
 800839e:	2b0f      	cmp	r3, #15
 80083a0:	d916      	bls.n	80083d0 <UART_SetConfig+0x508>
 80083a2:	6a3b      	ldr	r3, [r7, #32]
 80083a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083a8:	d212      	bcs.n	80083d0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083aa:	6a3b      	ldr	r3, [r7, #32]
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	f023 030f 	bic.w	r3, r3, #15
 80083b2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083b4:	6a3b      	ldr	r3, [r7, #32]
 80083b6:	085b      	lsrs	r3, r3, #1
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	f003 0307 	and.w	r3, r3, #7
 80083be:	b29a      	uxth	r2, r3
 80083c0:	8bfb      	ldrh	r3, [r7, #30]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	8bfa      	ldrh	r2, [r7, #30]
 80083cc:	60da      	str	r2, [r3, #12]
 80083ce:	e062      	b.n	8008496 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80083d6:	e05e      	b.n	8008496 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083dc:	2b08      	cmp	r3, #8
 80083de:	d828      	bhi.n	8008432 <UART_SetConfig+0x56a>
 80083e0:	a201      	add	r2, pc, #4	; (adr r2, 80083e8 <UART_SetConfig+0x520>)
 80083e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e6:	bf00      	nop
 80083e8:	0800840d 	.word	0x0800840d
 80083ec:	08008415 	.word	0x08008415
 80083f0:	0800841d 	.word	0x0800841d
 80083f4:	08008433 	.word	0x08008433
 80083f8:	08008423 	.word	0x08008423
 80083fc:	08008433 	.word	0x08008433
 8008400:	08008433 	.word	0x08008433
 8008404:	08008433 	.word	0x08008433
 8008408:	0800842b 	.word	0x0800842b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800840c:	f7fe f8dc 	bl	80065c8 <HAL_RCC_GetPCLK1Freq>
 8008410:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008412:	e014      	b.n	800843e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008414:	f7fe f8ee 	bl	80065f4 <HAL_RCC_GetPCLK2Freq>
 8008418:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800841a:	e010      	b.n	800843e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800841c:	4b1a      	ldr	r3, [pc, #104]	; (8008488 <UART_SetConfig+0x5c0>)
 800841e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008420:	e00d      	b.n	800843e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008422:	f7fe f863 	bl	80064ec <HAL_RCC_GetSysClockFreq>
 8008426:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008428:	e009      	b.n	800843e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800842a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800842e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008430:	e005      	b.n	800843e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008432:	2300      	movs	r3, #0
 8008434:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800843c:	bf00      	nop
    }

    if (pclk != 0U)
 800843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008440:	2b00      	cmp	r3, #0
 8008442:	d028      	beq.n	8008496 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008448:	4a10      	ldr	r2, [pc, #64]	; (800848c <UART_SetConfig+0x5c4>)
 800844a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800844e:	461a      	mov	r2, r3
 8008450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008452:	fbb3 f2f2 	udiv	r2, r3, r2
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	085b      	lsrs	r3, r3, #1
 800845c:	441a      	add	r2, r3
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	fbb2 f3f3 	udiv	r3, r2, r3
 8008466:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008468:	6a3b      	ldr	r3, [r7, #32]
 800846a:	2b0f      	cmp	r3, #15
 800846c:	d910      	bls.n	8008490 <UART_SetConfig+0x5c8>
 800846e:	6a3b      	ldr	r3, [r7, #32]
 8008470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008474:	d20c      	bcs.n	8008490 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	b29a      	uxth	r2, r3
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	60da      	str	r2, [r3, #12]
 8008480:	e009      	b.n	8008496 <UART_SetConfig+0x5ce>
 8008482:	bf00      	nop
 8008484:	40008000 	.word	0x40008000
 8008488:	00f42400 	.word	0x00f42400
 800848c:	08011a4c 	.word	0x08011a4c
      }
      else
      {
        ret = HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	2201      	movs	r2, #1
 800849a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	2201      	movs	r2, #1
 80084a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	2200      	movs	r2, #0
 80084aa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	2200      	movs	r2, #0
 80084b0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80084b2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3730      	adds	r7, #48	; 0x30
 80084ba:	46bd      	mov	sp, r7
 80084bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080084c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084cc:	f003 0301 	and.w	r3, r3, #1
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00a      	beq.n	80084ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	430a      	orrs	r2, r1
 80084e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ee:	f003 0302 	and.w	r3, r3, #2
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00a      	beq.n	800850c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	430a      	orrs	r2, r1
 800850a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008510:	f003 0304 	and.w	r3, r3, #4
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00a      	beq.n	800852e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	430a      	orrs	r2, r1
 800852c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008532:	f003 0308 	and.w	r3, r3, #8
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00a      	beq.n	8008550 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	430a      	orrs	r2, r1
 800854e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008554:	f003 0310 	and.w	r3, r3, #16
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00a      	beq.n	8008572 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	430a      	orrs	r2, r1
 8008570:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008576:	f003 0320 	and.w	r3, r3, #32
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00a      	beq.n	8008594 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	430a      	orrs	r2, r1
 8008592:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800859c:	2b00      	cmp	r3, #0
 800859e:	d01a      	beq.n	80085d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	430a      	orrs	r2, r1
 80085b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085be:	d10a      	bne.n	80085d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	430a      	orrs	r2, r1
 80085d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00a      	beq.n	80085f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	430a      	orrs	r2, r1
 80085f6:	605a      	str	r2, [r3, #4]
  }
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b086      	sub	sp, #24
 8008608:	af02      	add	r7, sp, #8
 800860a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008614:	f7fa f8be 	bl	8002794 <HAL_GetTick>
 8008618:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 0308 	and.w	r3, r3, #8
 8008624:	2b08      	cmp	r3, #8
 8008626:	d10e      	bne.n	8008646 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008628:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800862c:	9300      	str	r3, [sp, #0]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f82f 	bl	800869a <UART_WaitOnFlagUntilTimeout>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d001      	beq.n	8008646 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	e025      	b.n	8008692 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 0304 	and.w	r3, r3, #4
 8008650:	2b04      	cmp	r3, #4
 8008652:	d10e      	bne.n	8008672 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008654:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 f819 	bl	800869a <UART_WaitOnFlagUntilTimeout>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d001      	beq.n	8008672 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800866e:	2303      	movs	r3, #3
 8008670:	e00f      	b.n	8008692 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2220      	movs	r2, #32
 8008676:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2220      	movs	r2, #32
 800867e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b09c      	sub	sp, #112	; 0x70
 800869e:	af00      	add	r7, sp, #0
 80086a0:	60f8      	str	r0, [r7, #12]
 80086a2:	60b9      	str	r1, [r7, #8]
 80086a4:	603b      	str	r3, [r7, #0]
 80086a6:	4613      	mov	r3, r2
 80086a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086aa:	e0a9      	b.n	8008800 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b2:	f000 80a5 	beq.w	8008800 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086b6:	f7fa f86d 	bl	8002794 <HAL_GetTick>
 80086ba:	4602      	mov	r2, r0
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d302      	bcc.n	80086cc <UART_WaitOnFlagUntilTimeout+0x32>
 80086c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d140      	bne.n	800874e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086d4:	e853 3f00 	ldrex	r3, [r3]
 80086d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80086da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086e0:	667b      	str	r3, [r7, #100]	; 0x64
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	461a      	mov	r2, r3
 80086e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086ec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80086f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80086f2:	e841 2300 	strex	r3, r2, [r1]
 80086f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80086f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1e6      	bne.n	80086cc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	3308      	adds	r3, #8
 8008704:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008708:	e853 3f00 	ldrex	r3, [r3]
 800870c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800870e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008710:	f023 0301 	bic.w	r3, r3, #1
 8008714:	663b      	str	r3, [r7, #96]	; 0x60
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3308      	adds	r3, #8
 800871c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800871e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008720:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008722:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008724:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008726:	e841 2300 	strex	r3, r2, [r1]
 800872a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800872c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1e5      	bne.n	80086fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2220      	movs	r2, #32
 8008736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2220      	movs	r2, #32
 800873e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800874a:	2303      	movs	r3, #3
 800874c:	e069      	b.n	8008822 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 0304 	and.w	r3, r3, #4
 8008758:	2b00      	cmp	r3, #0
 800875a:	d051      	beq.n	8008800 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800876a:	d149      	bne.n	8008800 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008774:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008786:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800878a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	461a      	mov	r2, r3
 8008792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008794:	637b      	str	r3, [r7, #52]	; 0x34
 8008796:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800879a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80087a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e6      	bne.n	8008776 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3308      	adds	r3, #8
 80087ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	e853 3f00 	ldrex	r3, [r3]
 80087b6:	613b      	str	r3, [r7, #16]
   return(result);
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	f023 0301 	bic.w	r3, r3, #1
 80087be:	66bb      	str	r3, [r7, #104]	; 0x68
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3308      	adds	r3, #8
 80087c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80087c8:	623a      	str	r2, [r7, #32]
 80087ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087cc:	69f9      	ldr	r1, [r7, #28]
 80087ce:	6a3a      	ldr	r2, [r7, #32]
 80087d0:	e841 2300 	strex	r3, r2, [r1]
 80087d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1e5      	bne.n	80087a8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2220      	movs	r2, #32
 80087e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2220      	movs	r2, #32
 80087e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2220      	movs	r2, #32
 80087f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80087fc:	2303      	movs	r3, #3
 80087fe:	e010      	b.n	8008822 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	69da      	ldr	r2, [r3, #28]
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	4013      	ands	r3, r2
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	429a      	cmp	r2, r3
 800880e:	bf0c      	ite	eq
 8008810:	2301      	moveq	r3, #1
 8008812:	2300      	movne	r3, #0
 8008814:	b2db      	uxtb	r3, r3
 8008816:	461a      	mov	r2, r3
 8008818:	79fb      	ldrb	r3, [r7, #7]
 800881a:	429a      	cmp	r2, r3
 800881c:	f43f af46 	beq.w	80086ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3770      	adds	r7, #112	; 0x70
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800882a:	b480      	push	{r7}
 800882c:	b085      	sub	sp, #20
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008838:	2b01      	cmp	r3, #1
 800883a:	d101      	bne.n	8008840 <HAL_UARTEx_DisableFifoMode+0x16>
 800883c:	2302      	movs	r3, #2
 800883e:	e027      	b.n	8008890 <HAL_UARTEx_DisableFifoMode+0x66>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2224      	movs	r2, #36	; 0x24
 800884c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f022 0201 	bic.w	r2, r2, #1
 8008866:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800886e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2220      	movs	r2, #32
 8008882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3714      	adds	r7, #20
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d101      	bne.n	80088b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80088b0:	2302      	movs	r3, #2
 80088b2:	e02d      	b.n	8008910 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2224      	movs	r2, #36	; 0x24
 80088c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f022 0201 	bic.w	r2, r2, #1
 80088da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	683a      	ldr	r2, [r7, #0]
 80088ec:	430a      	orrs	r2, r1
 80088ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 f84f 	bl	8008994 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2220      	movs	r2, #32
 8008902:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008928:	2b01      	cmp	r3, #1
 800892a:	d101      	bne.n	8008930 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800892c:	2302      	movs	r3, #2
 800892e:	e02d      	b.n	800898c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2224      	movs	r2, #36	; 0x24
 800893c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f022 0201 	bic.w	r2, r2, #1
 8008956:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	683a      	ldr	r2, [r7, #0]
 8008968:	430a      	orrs	r2, r1
 800896a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 f811 	bl	8008994 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2220      	movs	r2, #32
 800897e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008994:	b480      	push	{r7}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d108      	bne.n	80089b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80089b4:	e031      	b.n	8008a1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80089b6:	2308      	movs	r3, #8
 80089b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80089ba:	2308      	movs	r3, #8
 80089bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	0e5b      	lsrs	r3, r3, #25
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	f003 0307 	and.w	r3, r3, #7
 80089cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	0f5b      	lsrs	r3, r3, #29
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	f003 0307 	and.w	r3, r3, #7
 80089dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089de:	7bbb      	ldrb	r3, [r7, #14]
 80089e0:	7b3a      	ldrb	r2, [r7, #12]
 80089e2:	4911      	ldr	r1, [pc, #68]	; (8008a28 <UARTEx_SetNbDataToProcess+0x94>)
 80089e4:	5c8a      	ldrb	r2, [r1, r2]
 80089e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80089ea:	7b3a      	ldrb	r2, [r7, #12]
 80089ec:	490f      	ldr	r1, [pc, #60]	; (8008a2c <UARTEx_SetNbDataToProcess+0x98>)
 80089ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
 80089fe:	7b7a      	ldrb	r2, [r7, #13]
 8008a00:	4909      	ldr	r1, [pc, #36]	; (8008a28 <UARTEx_SetNbDataToProcess+0x94>)
 8008a02:	5c8a      	ldrb	r2, [r1, r2]
 8008a04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a08:	7b7a      	ldrb	r2, [r7, #13]
 8008a0a:	4908      	ldr	r1, [pc, #32]	; (8008a2c <UARTEx_SetNbDataToProcess+0x98>)
 8008a0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008a1a:	bf00      	nop
 8008a1c:	3714      	adds	r7, #20
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	08011a64 	.word	0x08011a64
 8008a2c:	08011a6c 	.word	0x08011a6c

08008a30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008a40:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008a44:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3714      	adds	r7, #20
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008a5e:	b480      	push	{r7}
 8008a60:	b085      	sub	sp, #20
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008a66:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008a6a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	43db      	mvns	r3, r3
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3714      	adds	r7, #20
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008a94:	b084      	sub	sp, #16
 8008a96:	b480      	push	{r7}
 8008a98:	b083      	sub	sp, #12
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	f107 0014 	add.w	r0, r7, #20
 8008aa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	b004      	add	sp, #16
 8008ad4:	4770      	bx	lr
	...

08008ad8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b09d      	sub	sp, #116	; 0x74
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	4413      	add	r3, r2
 8008af2:	881b      	ldrh	r3, [r3, #0]
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008afe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	78db      	ldrb	r3, [r3, #3]
 8008b06:	2b03      	cmp	r3, #3
 8008b08:	d81f      	bhi.n	8008b4a <USB_ActivateEndpoint+0x72>
 8008b0a:	a201      	add	r2, pc, #4	; (adr r2, 8008b10 <USB_ActivateEndpoint+0x38>)
 8008b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b10:	08008b21 	.word	0x08008b21
 8008b14:	08008b3d 	.word	0x08008b3d
 8008b18:	08008b53 	.word	0x08008b53
 8008b1c:	08008b2f 	.word	0x08008b2f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008b20:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008b24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b28:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008b2c:	e012      	b.n	8008b54 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008b2e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008b32:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008b36:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008b3a:	e00b      	b.n	8008b54 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008b3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008b40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b44:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008b48:	e004      	b.n	8008b54 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8008b50:	e000      	b.n	8008b54 <USB_ActivateEndpoint+0x7c>
      break;
 8008b52:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	441a      	add	r2, r3
 8008b5e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	4413      	add	r3, r2
 8008b80:	881b      	ldrh	r3, [r3, #0]
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	b21b      	sxth	r3, r3
 8008b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b8e:	b21a      	sxth	r2, r3
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	b21b      	sxth	r3, r3
 8008b96:	4313      	orrs	r3, r2
 8008b98:	b21b      	sxth	r3, r3
 8008b9a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	441a      	add	r2, r3
 8008ba8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008bac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	7b1b      	ldrb	r3, [r3, #12]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f040 8149 	bne.w	8008e5c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	785b      	ldrb	r3, [r3, #1]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	f000 8084 	beq.w	8008cdc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	61bb      	str	r3, [r7, #24]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	461a      	mov	r2, r3
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	4413      	add	r3, r2
 8008be6:	61bb      	str	r3, [r7, #24]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	00da      	lsls	r2, r3, #3
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bf6:	617b      	str	r3, [r7, #20]
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	88db      	ldrh	r3, [r3, #6]
 8008bfc:	085b      	lsrs	r3, r3, #1
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	005b      	lsls	r3, r3, #1
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4413      	add	r3, r2
 8008c12:	881b      	ldrh	r3, [r3, #0]
 8008c14:	827b      	strh	r3, [r7, #18]
 8008c16:	8a7b      	ldrh	r3, [r7, #18]
 8008c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d01b      	beq.n	8008c58 <USB_ActivateEndpoint+0x180>
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	4413      	add	r3, r2
 8008c2a:	881b      	ldrh	r3, [r3, #0]
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c36:	823b      	strh	r3, [r7, #16]
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	441a      	add	r2, r3
 8008c42:	8a3b      	ldrh	r3, [r7, #16]
 8008c44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	78db      	ldrb	r3, [r3, #3]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d020      	beq.n	8008ca2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	4413      	add	r3, r2
 8008c6a:	881b      	ldrh	r3, [r3, #0]
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c76:	81bb      	strh	r3, [r7, #12]
 8008c78:	89bb      	ldrh	r3, [r7, #12]
 8008c7a:	f083 0320 	eor.w	r3, r3, #32
 8008c7e:	81bb      	strh	r3, [r7, #12]
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	441a      	add	r2, r3
 8008c8a:	89bb      	ldrh	r3, [r7, #12]
 8008c8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	8013      	strh	r3, [r2, #0]
 8008ca0:	e2a6      	b.n	80091f0 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	4413      	add	r3, r2
 8008cac:	881b      	ldrh	r3, [r3, #0]
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cb8:	81fb      	strh	r3, [r7, #14]
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	441a      	add	r2, r3
 8008cc4:	89fb      	ldrh	r3, [r7, #14]
 8008cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	8013      	strh	r3, [r2, #0]
 8008cda:	e289      	b.n	80091f0 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	633b      	str	r3, [r7, #48]	; 0x30
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	461a      	mov	r2, r3
 8008cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cec:	4413      	add	r3, r2
 8008cee:	633b      	str	r3, [r7, #48]	; 0x30
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	00da      	lsls	r2, r3, #3
 8008cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf8:	4413      	add	r3, r2
 8008cfa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	88db      	ldrh	r3, [r3, #6]
 8008d04:	085b      	lsrs	r3, r3, #1
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	005b      	lsls	r3, r3, #1
 8008d0a:	b29a      	uxth	r2, r3
 8008d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d20:	4413      	add	r3, r2
 8008d22:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	00da      	lsls	r2, r3, #3
 8008d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2c:	4413      	add	r3, r2
 8008d2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008d32:	627b      	str	r3, [r7, #36]	; 0x24
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	2b3e      	cmp	r3, #62	; 0x3e
 8008d3a:	d918      	bls.n	8008d6e <USB_ActivateEndpoint+0x296>
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	095b      	lsrs	r3, r3, #5
 8008d42:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	f003 031f 	and.w	r3, r3, #31
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d102      	bne.n	8008d56 <USB_ActivateEndpoint+0x27e>
 8008d50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d52:	3b01      	subs	r3, #1
 8008d54:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	029b      	lsls	r3, r3, #10
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6a:	801a      	strh	r2, [r3, #0]
 8008d6c:	e029      	b.n	8008dc2 <USB_ActivateEndpoint+0x2ea>
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	691b      	ldr	r3, [r3, #16]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d112      	bne.n	8008d9c <USB_ActivateEndpoint+0x2c4>
 8008d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d78:	881b      	ldrh	r3, [r3, #0]
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d84:	801a      	strh	r2, [r3, #0]
 8008d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d88:	881b      	ldrh	r3, [r3, #0]
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d94:	b29a      	uxth	r2, r3
 8008d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d98:	801a      	strh	r2, [r3, #0]
 8008d9a:	e012      	b.n	8008dc2 <USB_ActivateEndpoint+0x2ea>
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	085b      	lsrs	r3, r3, #1
 8008da2:	66bb      	str	r3, [r7, #104]	; 0x68
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	f003 0301 	and.w	r3, r3, #1
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d002      	beq.n	8008db6 <USB_ActivateEndpoint+0x2de>
 8008db0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008db2:	3301      	adds	r3, #1
 8008db4:	66bb      	str	r3, [r7, #104]	; 0x68
 8008db6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	029b      	lsls	r3, r3, #10
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	4413      	add	r3, r2
 8008dcc:	881b      	ldrh	r3, [r3, #0]
 8008dce:	847b      	strh	r3, [r7, #34]	; 0x22
 8008dd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d01b      	beq.n	8008e12 <USB_ActivateEndpoint+0x33a>
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	4413      	add	r3, r2
 8008de4:	881b      	ldrh	r3, [r3, #0]
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df0:	843b      	strh	r3, [r7, #32]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	441a      	add	r2, r3
 8008dfc:	8c3b      	ldrh	r3, [r7, #32]
 8008dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	4413      	add	r3, r2
 8008e1c:	881b      	ldrh	r3, [r3, #0]
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e28:	83fb      	strh	r3, [r7, #30]
 8008e2a:	8bfb      	ldrh	r3, [r7, #30]
 8008e2c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008e30:	83fb      	strh	r3, [r7, #30]
 8008e32:	8bfb      	ldrh	r3, [r7, #30]
 8008e34:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008e38:	83fb      	strh	r3, [r7, #30]
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	441a      	add	r2, r3
 8008e44:	8bfb      	ldrh	r3, [r7, #30]
 8008e46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	8013      	strh	r3, [r2, #0]
 8008e5a:	e1c9      	b.n	80091f0 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	78db      	ldrb	r3, [r3, #3]
 8008e60:	2b02      	cmp	r3, #2
 8008e62:	d11e      	bne.n	8008ea2 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	4413      	add	r3, r2
 8008e6e:	881b      	ldrh	r3, [r3, #0]
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e7a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	441a      	add	r2, r3
 8008e88:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e94:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	8013      	strh	r3, [r2, #0]
 8008ea0:	e01d      	b.n	8008ede <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	4413      	add	r3, r2
 8008eac:	881b      	ldrh	r3, [r3, #0]
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eb8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	441a      	add	r2, r3
 8008ec6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	461a      	mov	r2, r3
 8008eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008eee:	4413      	add	r3, r2
 8008ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	00da      	lsls	r2, r3, #3
 8008ef8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008efa:	4413      	add	r3, r2
 8008efc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f00:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	891b      	ldrh	r3, [r3, #8]
 8008f06:	085b      	lsrs	r3, r3, #1
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	005b      	lsls	r3, r3, #1
 8008f0c:	b29a      	uxth	r2, r3
 8008f0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f10:	801a      	strh	r2, [r3, #0]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	657b      	str	r3, [r7, #84]	; 0x54
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	461a      	mov	r2, r3
 8008f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f22:	4413      	add	r3, r2
 8008f24:	657b      	str	r3, [r7, #84]	; 0x54
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	00da      	lsls	r2, r3, #3
 8008f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f2e:	4413      	add	r3, r2
 8008f30:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f34:	653b      	str	r3, [r7, #80]	; 0x50
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	895b      	ldrh	r3, [r3, #10]
 8008f3a:	085b      	lsrs	r3, r3, #1
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	005b      	lsls	r3, r3, #1
 8008f40:	b29a      	uxth	r2, r3
 8008f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f44:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	785b      	ldrb	r3, [r3, #1]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f040 8093 	bne.w	8009076 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	4413      	add	r3, r2
 8008f5a:	881b      	ldrh	r3, [r3, #0]
 8008f5c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008f60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d01b      	beq.n	8008fa4 <USB_ActivateEndpoint+0x4cc>
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	4413      	add	r3, r2
 8008f76:	881b      	ldrh	r3, [r3, #0]
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f82:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	441a      	add	r2, r3
 8008f8e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008f90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	4413      	add	r3, r2
 8008fae:	881b      	ldrh	r3, [r3, #0]
 8008fb0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008fb2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d01b      	beq.n	8008ff4 <USB_ActivateEndpoint+0x51c>
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	4413      	add	r3, r2
 8008fc6:	881b      	ldrh	r3, [r3, #0]
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fd2:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	441a      	add	r2, r3
 8008fde:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008fe0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fe4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	4413      	add	r3, r2
 8008ffe:	881b      	ldrh	r3, [r3, #0]
 8009000:	b29b      	uxth	r3, r3
 8009002:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800900a:	873b      	strh	r3, [r7, #56]	; 0x38
 800900c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800900e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009012:	873b      	strh	r3, [r7, #56]	; 0x38
 8009014:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009016:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800901a:	873b      	strh	r3, [r7, #56]	; 0x38
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	441a      	add	r2, r3
 8009026:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800902c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009038:	b29b      	uxth	r3, r3
 800903a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	4413      	add	r3, r2
 8009046:	881b      	ldrh	r3, [r3, #0]
 8009048:	b29b      	uxth	r3, r3
 800904a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800904e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009052:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	441a      	add	r2, r3
 800905e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800906c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009070:	b29b      	uxth	r3, r3
 8009072:	8013      	strh	r3, [r2, #0]
 8009074:	e0bc      	b.n	80091f0 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	4413      	add	r3, r2
 8009080:	881b      	ldrh	r3, [r3, #0]
 8009082:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009086:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800908a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800908e:	2b00      	cmp	r3, #0
 8009090:	d01d      	beq.n	80090ce <USB_ActivateEndpoint+0x5f6>
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	4413      	add	r3, r2
 800909c:	881b      	ldrh	r3, [r3, #0]
 800909e:	b29b      	uxth	r3, r3
 80090a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090a8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	441a      	add	r2, r3
 80090b6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80090ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80090c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4413      	add	r3, r2
 80090d8:	881b      	ldrh	r3, [r3, #0]
 80090da:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80090de:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80090e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d01d      	beq.n	8009126 <USB_ActivateEndpoint+0x64e>
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	4413      	add	r3, r2
 80090f4:	881b      	ldrh	r3, [r3, #0]
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009100:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	441a      	add	r2, r3
 800910e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800911a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800911e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009122:	b29b      	uxth	r3, r3
 8009124:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	78db      	ldrb	r3, [r3, #3]
 800912a:	2b01      	cmp	r3, #1
 800912c:	d024      	beq.n	8009178 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	4413      	add	r3, r2
 8009138:	881b      	ldrh	r3, [r3, #0]
 800913a:	b29b      	uxth	r3, r3
 800913c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009144:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009148:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800914c:	f083 0320 	eor.w	r3, r3, #32
 8009150:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	441a      	add	r2, r3
 800915e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009162:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009166:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800916a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800916e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009172:	b29b      	uxth	r3, r3
 8009174:	8013      	strh	r3, [r2, #0]
 8009176:	e01d      	b.n	80091b4 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	4413      	add	r3, r2
 8009182:	881b      	ldrh	r3, [r3, #0]
 8009184:	b29b      	uxth	r3, r3
 8009186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800918a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800918e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	441a      	add	r2, r3
 800919c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80091a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	4413      	add	r3, r2
 80091be:	881b      	ldrh	r3, [r3, #0]
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	441a      	add	r2, r3
 80091d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80091dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80091f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3774      	adds	r7, #116	; 0x74
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009200:	b480      	push	{r7}
 8009202:	b08d      	sub	sp, #52	; 0x34
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	7b1b      	ldrb	r3, [r3, #12]
 800920e:	2b00      	cmp	r3, #0
 8009210:	f040 808e 	bne.w	8009330 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	785b      	ldrb	r3, [r3, #1]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d044      	beq.n	80092a6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	4413      	add	r3, r2
 8009226:	881b      	ldrh	r3, [r3, #0]
 8009228:	81bb      	strh	r3, [r7, #12]
 800922a:	89bb      	ldrh	r3, [r7, #12]
 800922c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009230:	2b00      	cmp	r3, #0
 8009232:	d01b      	beq.n	800926c <USB_DeactivateEndpoint+0x6c>
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4413      	add	r3, r2
 800923e:	881b      	ldrh	r3, [r3, #0]
 8009240:	b29b      	uxth	r3, r3
 8009242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800924a:	817b      	strh	r3, [r7, #10]
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	441a      	add	r2, r3
 8009256:	897b      	ldrh	r3, [r7, #10]
 8009258:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800925c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009264:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009268:	b29b      	uxth	r3, r3
 800926a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	4413      	add	r3, r2
 8009276:	881b      	ldrh	r3, [r3, #0]
 8009278:	b29b      	uxth	r3, r3
 800927a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800927e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009282:	813b      	strh	r3, [r7, #8]
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	441a      	add	r2, r3
 800928e:	893b      	ldrh	r3, [r7, #8]
 8009290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800929c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	8013      	strh	r3, [r2, #0]
 80092a4:	e192      	b.n	80095cc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4413      	add	r3, r2
 80092b0:	881b      	ldrh	r3, [r3, #0]
 80092b2:	827b      	strh	r3, [r7, #18]
 80092b4:	8a7b      	ldrh	r3, [r7, #18]
 80092b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d01b      	beq.n	80092f6 <USB_DeactivateEndpoint+0xf6>
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	4413      	add	r3, r2
 80092c8:	881b      	ldrh	r3, [r3, #0]
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092d4:	823b      	strh	r3, [r7, #16]
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	441a      	add	r2, r3
 80092e0:	8a3b      	ldrh	r3, [r7, #16]
 80092e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80092ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	4413      	add	r3, r2
 8009300:	881b      	ldrh	r3, [r3, #0]
 8009302:	b29b      	uxth	r3, r3
 8009304:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800930c:	81fb      	strh	r3, [r7, #14]
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	441a      	add	r2, r3
 8009318:	89fb      	ldrh	r3, [r7, #14]
 800931a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800931e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800932a:	b29b      	uxth	r3, r3
 800932c:	8013      	strh	r3, [r2, #0]
 800932e:	e14d      	b.n	80095cc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	785b      	ldrb	r3, [r3, #1]
 8009334:	2b00      	cmp	r3, #0
 8009336:	f040 80a5 	bne.w	8009484 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	4413      	add	r3, r2
 8009344:	881b      	ldrh	r3, [r3, #0]
 8009346:	843b      	strh	r3, [r7, #32]
 8009348:	8c3b      	ldrh	r3, [r7, #32]
 800934a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800934e:	2b00      	cmp	r3, #0
 8009350:	d01b      	beq.n	800938a <USB_DeactivateEndpoint+0x18a>
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	4413      	add	r3, r2
 800935c:	881b      	ldrh	r3, [r3, #0]
 800935e:	b29b      	uxth	r3, r3
 8009360:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009368:	83fb      	strh	r3, [r7, #30]
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	441a      	add	r2, r3
 8009374:	8bfb      	ldrh	r3, [r7, #30]
 8009376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800937a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800937e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009386:	b29b      	uxth	r3, r3
 8009388:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	4413      	add	r3, r2
 8009394:	881b      	ldrh	r3, [r3, #0]
 8009396:	83bb      	strh	r3, [r7, #28]
 8009398:	8bbb      	ldrh	r3, [r7, #28]
 800939a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d01b      	beq.n	80093da <USB_DeactivateEndpoint+0x1da>
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	4413      	add	r3, r2
 80093ac:	881b      	ldrh	r3, [r3, #0]
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093b8:	837b      	strh	r3, [r7, #26]
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	441a      	add	r2, r3
 80093c4:	8b7b      	ldrh	r3, [r7, #26]
 80093c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	4413      	add	r3, r2
 80093e4:	881b      	ldrh	r3, [r3, #0]
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093f0:	833b      	strh	r3, [r7, #24]
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	441a      	add	r2, r3
 80093fc:	8b3b      	ldrh	r3, [r7, #24]
 80093fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800940a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800940e:	b29b      	uxth	r3, r3
 8009410:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	4413      	add	r3, r2
 800941c:	881b      	ldrh	r3, [r3, #0]
 800941e:	b29b      	uxth	r3, r3
 8009420:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009428:	82fb      	strh	r3, [r7, #22]
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	441a      	add	r2, r3
 8009434:	8afb      	ldrh	r3, [r7, #22]
 8009436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800943a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800943e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009446:	b29b      	uxth	r3, r3
 8009448:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	4413      	add	r3, r2
 8009454:	881b      	ldrh	r3, [r3, #0]
 8009456:	b29b      	uxth	r3, r3
 8009458:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800945c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009460:	82bb      	strh	r3, [r7, #20]
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	441a      	add	r2, r3
 800946c:	8abb      	ldrh	r3, [r7, #20]
 800946e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800947a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800947e:	b29b      	uxth	r3, r3
 8009480:	8013      	strh	r3, [r2, #0]
 8009482:	e0a3      	b.n	80095cc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	4413      	add	r3, r2
 800948e:	881b      	ldrh	r3, [r3, #0]
 8009490:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009492:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009498:	2b00      	cmp	r3, #0
 800949a:	d01b      	beq.n	80094d4 <USB_DeactivateEndpoint+0x2d4>
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	4413      	add	r3, r2
 80094a6:	881b      	ldrh	r3, [r3, #0]
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094b2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	441a      	add	r2, r3
 80094be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80094c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80094cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	4413      	add	r3, r2
 80094de:	881b      	ldrh	r3, [r3, #0]
 80094e0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80094e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80094e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d01b      	beq.n	8009524 <USB_DeactivateEndpoint+0x324>
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	881b      	ldrh	r3, [r3, #0]
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009502:	853b      	strh	r3, [r7, #40]	; 0x28
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	441a      	add	r2, r3
 800950e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800951c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009520:	b29b      	uxth	r3, r3
 8009522:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	4413      	add	r3, r2
 800952e:	881b      	ldrh	r3, [r3, #0]
 8009530:	b29b      	uxth	r3, r3
 8009532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800953a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	441a      	add	r2, r3
 8009546:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800954c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009550:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009558:	b29b      	uxth	r3, r3
 800955a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	4413      	add	r3, r2
 8009566:	881b      	ldrh	r3, [r3, #0]
 8009568:	b29b      	uxth	r3, r3
 800956a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800956e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009572:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	441a      	add	r2, r3
 800957e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800958c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009590:	b29b      	uxth	r3, r3
 8009592:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	4413      	add	r3, r2
 800959e:	881b      	ldrh	r3, [r3, #0]
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	441a      	add	r2, r3
 80095b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80095b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3734      	adds	r7, #52	; 0x34
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr

080095da <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b0c2      	sub	sp, #264	; 0x108
 80095de:	af00      	add	r7, sp, #0
 80095e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095e8:	6018      	str	r0, [r3, #0]
 80095ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095f2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80095f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	785b      	ldrb	r3, [r3, #1]
 8009600:	2b01      	cmp	r3, #1
 8009602:	f040 867b 	bne.w	800a2fc <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800960a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	699a      	ldr	r2, [r3, #24]
 8009612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	429a      	cmp	r2, r3
 8009620:	d908      	bls.n	8009634 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8009622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009626:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009632:	e007      	b.n	8009644 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	699b      	ldr	r3, [r3, #24]
 8009640:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	7b1b      	ldrb	r3, [r3, #12]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d13a      	bne.n	80096ca <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	6959      	ldr	r1, [r3, #20]
 8009660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	88da      	ldrh	r2, [r3, #6]
 800966c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009670:	b29b      	uxth	r3, r3
 8009672:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009676:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800967a:	6800      	ldr	r0, [r0, #0]
 800967c:	f001 fc1d 	bl	800aeba <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009684:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	613b      	str	r3, [r7, #16]
 800968c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009690:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800969a:	b29b      	uxth	r3, r3
 800969c:	461a      	mov	r2, r3
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	4413      	add	r3, r2
 80096a2:	613b      	str	r3, [r7, #16]
 80096a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	00da      	lsls	r2, r3, #3
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	4413      	add	r3, r2
 80096b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80096ba:	60fb      	str	r3, [r7, #12]
 80096bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096c0:	b29a      	uxth	r2, r3
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	801a      	strh	r2, [r3, #0]
 80096c6:	f000 bde3 	b.w	800a290 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80096ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	78db      	ldrb	r3, [r3, #3]
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	f040 843a 	bne.w	8009f50 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80096dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	6a1a      	ldr	r2, [r3, #32]
 80096e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	691b      	ldr	r3, [r3, #16]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	f240 83b7 	bls.w	8009e68 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80096fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	4413      	add	r3, r2
 8009714:	881b      	ldrh	r3, [r3, #0]
 8009716:	b29b      	uxth	r3, r3
 8009718:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800971c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009720:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8009724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009728:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	441a      	add	r2, r3
 800973e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009742:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009746:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800974a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800974e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009752:	b29b      	uxth	r3, r3
 8009754:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800975a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	6a1a      	ldr	r2, [r3, #32]
 8009762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009766:	1ad2      	subs	r2, r2, r3
 8009768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800976c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009778:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	4413      	add	r3, r2
 800978e:	881b      	ldrh	r3, [r3, #0]
 8009790:	b29b      	uxth	r3, r3
 8009792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009796:	2b00      	cmp	r3, #0
 8009798:	f000 81b3 	beq.w	8009b02 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800979c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	633b      	str	r3, [r7, #48]	; 0x30
 80097a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	785b      	ldrb	r3, [r3, #1]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d16d      	bne.n	8009894 <USB_EPStartXfer+0x2ba>
 80097b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80097c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	461a      	mov	r2, r3
 80097d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d8:	4413      	add	r3, r2
 80097da:	62bb      	str	r3, [r7, #40]	; 0x28
 80097dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	00da      	lsls	r2, r3, #3
 80097ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ec:	4413      	add	r3, r2
 80097ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80097f2:	627b      	str	r3, [r7, #36]	; 0x24
 80097f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097f8:	2b3e      	cmp	r3, #62	; 0x3e
 80097fa:	d91c      	bls.n	8009836 <USB_EPStartXfer+0x25c>
 80097fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009800:	095b      	lsrs	r3, r3, #5
 8009802:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009806:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800980a:	f003 031f 	and.w	r3, r3, #31
 800980e:	2b00      	cmp	r3, #0
 8009810:	d104      	bne.n	800981c <USB_EPStartXfer+0x242>
 8009812:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009816:	3b01      	subs	r3, #1
 8009818:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800981c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009820:	b29b      	uxth	r3, r3
 8009822:	029b      	lsls	r3, r3, #10
 8009824:	b29b      	uxth	r3, r3
 8009826:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800982a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800982e:	b29a      	uxth	r2, r3
 8009830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009832:	801a      	strh	r2, [r3, #0]
 8009834:	e053      	b.n	80098de <USB_EPStartXfer+0x304>
 8009836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800983a:	2b00      	cmp	r3, #0
 800983c:	d112      	bne.n	8009864 <USB_EPStartXfer+0x28a>
 800983e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009840:	881b      	ldrh	r3, [r3, #0]
 8009842:	b29b      	uxth	r3, r3
 8009844:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009848:	b29a      	uxth	r2, r3
 800984a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984c:	801a      	strh	r2, [r3, #0]
 800984e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009850:	881b      	ldrh	r3, [r3, #0]
 8009852:	b29b      	uxth	r3, r3
 8009854:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009858:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800985c:	b29a      	uxth	r2, r3
 800985e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009860:	801a      	strh	r2, [r3, #0]
 8009862:	e03c      	b.n	80098de <USB_EPStartXfer+0x304>
 8009864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009868:	085b      	lsrs	r3, r3, #1
 800986a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800986e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009872:	f003 0301 	and.w	r3, r3, #1
 8009876:	2b00      	cmp	r3, #0
 8009878:	d004      	beq.n	8009884 <USB_EPStartXfer+0x2aa>
 800987a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800987e:	3301      	adds	r3, #1
 8009880:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009884:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009888:	b29b      	uxth	r3, r3
 800988a:	029b      	lsls	r3, r3, #10
 800988c:	b29a      	uxth	r2, r3
 800988e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009890:	801a      	strh	r2, [r3, #0]
 8009892:	e024      	b.n	80098de <USB_EPStartXfer+0x304>
 8009894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009898:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	785b      	ldrb	r3, [r3, #1]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d11c      	bne.n	80098de <USB_EPStartXfer+0x304>
 80098a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	461a      	mov	r2, r3
 80098b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b8:	4413      	add	r3, r2
 80098ba:	633b      	str	r3, [r7, #48]	; 0x30
 80098bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	00da      	lsls	r2, r3, #3
 80098ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098cc:	4413      	add	r3, r2
 80098ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80098d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098d8:	b29a      	uxth	r2, r3
 80098da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80098de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	895b      	ldrh	r3, [r3, #10]
 80098ea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80098ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	6959      	ldr	r1, [r3, #20]
 80098fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098fe:	b29b      	uxth	r3, r3
 8009900:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009904:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009908:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800990c:	6800      	ldr	r0, [r0, #0]
 800990e:	f001 fad4 	bl	800aeba <USB_WritePMA>
            ep->xfer_buff += len;
 8009912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	695a      	ldr	r2, [r3, #20]
 800991e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009922:	441a      	add	r2, r3
 8009924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	6a1a      	ldr	r2, [r3, #32]
 800993c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	429a      	cmp	r2, r3
 800994a:	d90f      	bls.n	800996c <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800994c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	6a1a      	ldr	r2, [r3, #32]
 8009958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800995c:	1ad2      	subs	r2, r2, r3
 800995e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	621a      	str	r2, [r3, #32]
 800996a:	e00e      	b.n	800998a <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800996c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	6a1b      	ldr	r3, [r3, #32]
 8009978:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800997c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2200      	movs	r2, #0
 8009988:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800998a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800998e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	785b      	ldrb	r3, [r3, #1]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d16d      	bne.n	8009a76 <USB_EPStartXfer+0x49c>
 800999a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800999e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	61bb      	str	r3, [r7, #24]
 80099a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	461a      	mov	r2, r3
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	4413      	add	r3, r2
 80099bc:	61bb      	str	r3, [r7, #24]
 80099be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	00da      	lsls	r2, r3, #3
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	4413      	add	r3, r2
 80099d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80099d4:	617b      	str	r3, [r7, #20]
 80099d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099da:	2b3e      	cmp	r3, #62	; 0x3e
 80099dc:	d91c      	bls.n	8009a18 <USB_EPStartXfer+0x43e>
 80099de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099e2:	095b      	lsrs	r3, r3, #5
 80099e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80099e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099ec:	f003 031f 	and.w	r3, r3, #31
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d104      	bne.n	80099fe <USB_EPStartXfer+0x424>
 80099f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099f8:	3b01      	subs	r3, #1
 80099fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80099fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	029b      	lsls	r3, r3, #10
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	801a      	strh	r2, [r3, #0]
 8009a16:	e059      	b.n	8009acc <USB_EPStartXfer+0x4f2>
 8009a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d112      	bne.n	8009a46 <USB_EPStartXfer+0x46c>
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	881b      	ldrh	r3, [r3, #0]
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	801a      	strh	r2, [r3, #0]
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	881b      	ldrh	r3, [r3, #0]
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a3e:	b29a      	uxth	r2, r3
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	801a      	strh	r2, [r3, #0]
 8009a44:	e042      	b.n	8009acc <USB_EPStartXfer+0x4f2>
 8009a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a4a:	085b      	lsrs	r3, r3, #1
 8009a4c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a54:	f003 0301 	and.w	r3, r3, #1
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d004      	beq.n	8009a66 <USB_EPStartXfer+0x48c>
 8009a5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a60:	3301      	adds	r3, #1
 8009a62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	029b      	lsls	r3, r3, #10
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	801a      	strh	r2, [r3, #0]
 8009a74:	e02a      	b.n	8009acc <USB_EPStartXfer+0x4f2>
 8009a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	785b      	ldrb	r3, [r3, #1]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d122      	bne.n	8009acc <USB_EPStartXfer+0x4f2>
 8009a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	623b      	str	r3, [r7, #32]
 8009a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	6a3b      	ldr	r3, [r7, #32]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	623b      	str	r3, [r7, #32]
 8009aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	00da      	lsls	r2, r3, #3
 8009ab8:	6a3b      	ldr	r3, [r7, #32]
 8009aba:	4413      	add	r3, r2
 8009abc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009ac0:	61fb      	str	r3, [r7, #28]
 8009ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ad0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	891b      	ldrh	r3, [r3, #8]
 8009ad8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	6959      	ldr	r1, [r3, #20]
 8009ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009af2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009af6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009afa:	6800      	ldr	r0, [r0, #0]
 8009afc:	f001 f9dd 	bl	800aeba <USB_WritePMA>
 8009b00:	e3c6      	b.n	800a290 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	785b      	ldrb	r3, [r3, #1]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d16d      	bne.n	8009bee <USB_EPStartXfer+0x614>
 8009b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	461a      	mov	r2, r3
 8009b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b32:	4413      	add	r3, r2
 8009b34:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	00da      	lsls	r2, r3, #3
 8009b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b46:	4413      	add	r3, r2
 8009b48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009b4c:	647b      	str	r3, [r7, #68]	; 0x44
 8009b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b52:	2b3e      	cmp	r3, #62	; 0x3e
 8009b54:	d91c      	bls.n	8009b90 <USB_EPStartXfer+0x5b6>
 8009b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b5a:	095b      	lsrs	r3, r3, #5
 8009b5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b64:	f003 031f 	and.w	r3, r3, #31
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d104      	bne.n	8009b76 <USB_EPStartXfer+0x59c>
 8009b6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009b70:	3b01      	subs	r3, #1
 8009b72:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009b76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	029b      	lsls	r3, r3, #10
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b88:	b29a      	uxth	r2, r3
 8009b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b8c:	801a      	strh	r2, [r3, #0]
 8009b8e:	e059      	b.n	8009c44 <USB_EPStartXfer+0x66a>
 8009b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d112      	bne.n	8009bbe <USB_EPStartXfer+0x5e4>
 8009b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b9a:	881b      	ldrh	r3, [r3, #0]
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ba2:	b29a      	uxth	r2, r3
 8009ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ba6:	801a      	strh	r2, [r3, #0]
 8009ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009baa:	881b      	ldrh	r3, [r3, #0]
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bba:	801a      	strh	r2, [r3, #0]
 8009bbc:	e042      	b.n	8009c44 <USB_EPStartXfer+0x66a>
 8009bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bc2:	085b      	lsrs	r3, r3, #1
 8009bc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bcc:	f003 0301 	and.w	r3, r3, #1
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d004      	beq.n	8009bde <USB_EPStartXfer+0x604>
 8009bd4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009bd8:	3301      	adds	r3, #1
 8009bda:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009bde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	029b      	lsls	r3, r3, #10
 8009be6:	b29a      	uxth	r2, r3
 8009be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bea:	801a      	strh	r2, [r3, #0]
 8009bec:	e02a      	b.n	8009c44 <USB_EPStartXfer+0x66a>
 8009bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	785b      	ldrb	r3, [r3, #1]
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d122      	bne.n	8009c44 <USB_EPStartXfer+0x66a>
 8009bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	653b      	str	r3, [r7, #80]	; 0x50
 8009c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c1e:	4413      	add	r3, r2
 8009c20:	653b      	str	r3, [r7, #80]	; 0x50
 8009c22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	00da      	lsls	r2, r3, #3
 8009c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c32:	4413      	add	r3, r2
 8009c34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009c38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c42:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	891b      	ldrh	r3, [r3, #8]
 8009c50:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	6959      	ldr	r1, [r3, #20]
 8009c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009c6a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009c6e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009c72:	6800      	ldr	r0, [r0, #0]
 8009c74:	f001 f921 	bl	800aeba <USB_WritePMA>
            ep->xfer_buff += len;
 8009c78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	695a      	ldr	r2, [r3, #20]
 8009c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c88:	441a      	add	r2, r3
 8009c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	6a1a      	ldr	r2, [r3, #32]
 8009ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d90f      	bls.n	8009cd2 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8009cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	6a1a      	ldr	r2, [r3, #32]
 8009cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cc2:	1ad2      	subs	r2, r2, r3
 8009cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	621a      	str	r2, [r3, #32]
 8009cd0:	e00e      	b.n	8009cf0 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8009cd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	6a1b      	ldr	r3, [r3, #32]
 8009cde:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ce6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	2200      	movs	r2, #0
 8009cee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cf4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	643b      	str	r3, [r7, #64]	; 0x40
 8009cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	785b      	ldrb	r3, [r3, #1]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d16d      	bne.n	8009de8 <USB_EPStartXfer+0x80e>
 8009d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	461a      	mov	r2, r3
 8009d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d2c:	4413      	add	r3, r2
 8009d2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	00da      	lsls	r2, r3, #3
 8009d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d40:	4413      	add	r3, r2
 8009d42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009d46:	637b      	str	r3, [r7, #52]	; 0x34
 8009d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d4c:	2b3e      	cmp	r3, #62	; 0x3e
 8009d4e:	d91c      	bls.n	8009d8a <USB_EPStartXfer+0x7b0>
 8009d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d54:	095b      	lsrs	r3, r3, #5
 8009d56:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d5e:	f003 031f 	and.w	r3, r3, #31
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d104      	bne.n	8009d70 <USB_EPStartXfer+0x796>
 8009d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	029b      	lsls	r3, r3, #10
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d82:	b29a      	uxth	r2, r3
 8009d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d86:	801a      	strh	r2, [r3, #0]
 8009d88:	e053      	b.n	8009e32 <USB_EPStartXfer+0x858>
 8009d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d112      	bne.n	8009db8 <USB_EPStartXfer+0x7de>
 8009d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d94:	881b      	ldrh	r3, [r3, #0]
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009d9c:	b29a      	uxth	r2, r3
 8009d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009da0:	801a      	strh	r2, [r3, #0]
 8009da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009da4:	881b      	ldrh	r3, [r3, #0]
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009db0:	b29a      	uxth	r2, r3
 8009db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009db4:	801a      	strh	r2, [r3, #0]
 8009db6:	e03c      	b.n	8009e32 <USB_EPStartXfer+0x858>
 8009db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dbc:	085b      	lsrs	r3, r3, #1
 8009dbe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dc6:	f003 0301 	and.w	r3, r3, #1
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d004      	beq.n	8009dd8 <USB_EPStartXfer+0x7fe>
 8009dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	029b      	lsls	r3, r3, #10
 8009de0:	b29a      	uxth	r2, r3
 8009de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009de4:	801a      	strh	r2, [r3, #0]
 8009de6:	e024      	b.n	8009e32 <USB_EPStartXfer+0x858>
 8009de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	785b      	ldrb	r3, [r3, #1]
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d11c      	bne.n	8009e32 <USB_EPStartXfer+0x858>
 8009df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	461a      	mov	r2, r3
 8009e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e0c:	4413      	add	r3, r2
 8009e0e:	643b      	str	r3, [r7, #64]	; 0x40
 8009e10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	00da      	lsls	r2, r3, #3
 8009e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e20:	4413      	add	r3, r2
 8009e22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e2c:	b29a      	uxth	r2, r3
 8009e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e30:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	895b      	ldrh	r3, [r3, #10]
 8009e3e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	6959      	ldr	r1, [r3, #20]
 8009e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009e58:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009e5c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009e60:	6800      	ldr	r0, [r0, #0]
 8009e62:	f001 f82a 	bl	800aeba <USB_WritePMA>
 8009e66:	e213      	b.n	800a290 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	6a1b      	ldr	r3, [r3, #32]
 8009e74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	4413      	add	r3, r2
 8009e92:	881b      	ldrh	r3, [r3, #0]
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e9e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ea6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	441a      	add	r2, r3
 8009ebc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ed8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ee4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ef4:	4413      	add	r3, r2
 8009ef6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	00da      	lsls	r2, r3, #3
 8009f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f08:	4413      	add	r3, r2
 8009f0a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009f0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f14:	b29a      	uxth	r2, r3
 8009f16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f18:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	891b      	ldrh	r3, [r3, #8]
 8009f26:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	6959      	ldr	r1, [r3, #20]
 8009f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009f40:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009f44:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009f48:	6800      	ldr	r0, [r0, #0]
 8009f4a:	f000 ffb6 	bl	800aeba <USB_WritePMA>
 8009f4e:	e19f      	b.n	800a290 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	6a1a      	ldr	r2, [r3, #32]
 8009f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f60:	1ad2      	subs	r2, r2, r3
 8009f62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	4413      	add	r3, r2
 8009f88:	881b      	ldrh	r3, [r3, #0]
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	f000 80bc 	beq.w	800a10e <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	673b      	str	r3, [r7, #112]	; 0x70
 8009fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	785b      	ldrb	r3, [r3, #1]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d16d      	bne.n	800a08e <USB_EPStartXfer+0xab4>
 8009fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	461a      	mov	r2, r3
 8009fd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fd2:	4413      	add	r3, r2
 8009fd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	00da      	lsls	r2, r3, #3
 8009fe4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fe6:	4413      	add	r3, r2
 8009fe8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009fec:	667b      	str	r3, [r7, #100]	; 0x64
 8009fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ff2:	2b3e      	cmp	r3, #62	; 0x3e
 8009ff4:	d91c      	bls.n	800a030 <USB_EPStartXfer+0xa56>
 8009ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ffa:	095b      	lsrs	r3, r3, #5
 8009ffc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a004:	f003 031f 	and.w	r3, r3, #31
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d104      	bne.n	800a016 <USB_EPStartXfer+0xa3c>
 800a00c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a010:	3b01      	subs	r3, #1
 800a012:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a016:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	029b      	lsls	r3, r3, #10
 800a01e:	b29b      	uxth	r3, r3
 800a020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a028:	b29a      	uxth	r2, r3
 800a02a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a02c:	801a      	strh	r2, [r3, #0]
 800a02e:	e053      	b.n	800a0d8 <USB_EPStartXfer+0xafe>
 800a030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a034:	2b00      	cmp	r3, #0
 800a036:	d112      	bne.n	800a05e <USB_EPStartXfer+0xa84>
 800a038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a03a:	881b      	ldrh	r3, [r3, #0]
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a042:	b29a      	uxth	r2, r3
 800a044:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a046:	801a      	strh	r2, [r3, #0]
 800a048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a04a:	881b      	ldrh	r3, [r3, #0]
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a056:	b29a      	uxth	r2, r3
 800a058:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a05a:	801a      	strh	r2, [r3, #0]
 800a05c:	e03c      	b.n	800a0d8 <USB_EPStartXfer+0xafe>
 800a05e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a062:	085b      	lsrs	r3, r3, #1
 800a064:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a06c:	f003 0301 	and.w	r3, r3, #1
 800a070:	2b00      	cmp	r3, #0
 800a072:	d004      	beq.n	800a07e <USB_EPStartXfer+0xaa4>
 800a074:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a078:	3301      	adds	r3, #1
 800a07a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a07e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a082:	b29b      	uxth	r3, r3
 800a084:	029b      	lsls	r3, r3, #10
 800a086:	b29a      	uxth	r2, r3
 800a088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a08a:	801a      	strh	r2, [r3, #0]
 800a08c:	e024      	b.n	800a0d8 <USB_EPStartXfer+0xafe>
 800a08e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	785b      	ldrb	r3, [r3, #1]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d11c      	bne.n	800a0d8 <USB_EPStartXfer+0xafe>
 800a09e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0b2:	4413      	add	r3, r2
 800a0b4:	673b      	str	r3, [r7, #112]	; 0x70
 800a0b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	00da      	lsls	r2, r3, #3
 800a0c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0c6:	4413      	add	r3, r2
 800a0c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a0cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a0ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0d2:	b29a      	uxth	r2, r3
 800a0d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0d6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a0d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	895b      	ldrh	r3, [r3, #10]
 800a0e4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a0e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	6959      	ldr	r1, [r3, #20]
 800a0f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a0fe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a102:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a106:	6800      	ldr	r0, [r0, #0]
 800a108:	f000 fed7 	bl	800aeba <USB_WritePMA>
 800a10c:	e0c0      	b.n	800a290 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a10e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	785b      	ldrb	r3, [r3, #1]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d16d      	bne.n	800a1fa <USB_EPStartXfer+0xc20>
 800a11e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a122:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a12a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a12e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a138:	b29b      	uxth	r3, r3
 800a13a:	461a      	mov	r2, r3
 800a13c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a13e:	4413      	add	r3, r2
 800a140:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	00da      	lsls	r2, r3, #3
 800a150:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a152:	4413      	add	r3, r2
 800a154:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a158:	67bb      	str	r3, [r7, #120]	; 0x78
 800a15a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a15e:	2b3e      	cmp	r3, #62	; 0x3e
 800a160:	d91c      	bls.n	800a19c <USB_EPStartXfer+0xbc2>
 800a162:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a166:	095b      	lsrs	r3, r3, #5
 800a168:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a16c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a170:	f003 031f 	and.w	r3, r3, #31
 800a174:	2b00      	cmp	r3, #0
 800a176:	d104      	bne.n	800a182 <USB_EPStartXfer+0xba8>
 800a178:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a17c:	3b01      	subs	r3, #1
 800a17e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a182:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a186:	b29b      	uxth	r3, r3
 800a188:	029b      	lsls	r3, r3, #10
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a194:	b29a      	uxth	r2, r3
 800a196:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a198:	801a      	strh	r2, [r3, #0]
 800a19a:	e05f      	b.n	800a25c <USB_EPStartXfer+0xc82>
 800a19c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d112      	bne.n	800a1ca <USB_EPStartXfer+0xbf0>
 800a1a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1a6:	881b      	ldrh	r3, [r3, #0]
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a1ae:	b29a      	uxth	r2, r3
 800a1b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1b2:	801a      	strh	r2, [r3, #0]
 800a1b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1b6:	881b      	ldrh	r3, [r3, #0]
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1c2:	b29a      	uxth	r2, r3
 800a1c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1c6:	801a      	strh	r2, [r3, #0]
 800a1c8:	e048      	b.n	800a25c <USB_EPStartXfer+0xc82>
 800a1ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1ce:	085b      	lsrs	r3, r3, #1
 800a1d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a1d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1d8:	f003 0301 	and.w	r3, r3, #1
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d004      	beq.n	800a1ea <USB_EPStartXfer+0xc10>
 800a1e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a1ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	029b      	lsls	r3, r3, #10
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1f6:	801a      	strh	r2, [r3, #0]
 800a1f8:	e030      	b.n	800a25c <USB_EPStartXfer+0xc82>
 800a1fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	785b      	ldrb	r3, [r3, #1]
 800a206:	2b01      	cmp	r3, #1
 800a208:	d128      	bne.n	800a25c <USB_EPStartXfer+0xc82>
 800a20a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a20e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a21c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a226:	b29b      	uxth	r3, r3
 800a228:	461a      	mov	r2, r3
 800a22a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a22e:	4413      	add	r3, r2
 800a230:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	00da      	lsls	r2, r3, #3
 800a242:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a246:	4413      	add	r3, r2
 800a248:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a24c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a254:	b29a      	uxth	r2, r3
 800a256:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a25a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a25c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	891b      	ldrh	r3, [r3, #8]
 800a268:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a26c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	6959      	ldr	r1, [r3, #20]
 800a278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a282:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a286:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a28a:	6800      	ldr	r0, [r0, #0]
 800a28c:	f000 fe15 	bl	800aeba <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a294:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a29e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	4413      	add	r3, r2
 800a2aa:	881b      	ldrh	r3, [r3, #0]
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2b6:	817b      	strh	r3, [r7, #10]
 800a2b8:	897b      	ldrh	r3, [r7, #10]
 800a2ba:	f083 0310 	eor.w	r3, r3, #16
 800a2be:	817b      	strh	r3, [r7, #10]
 800a2c0:	897b      	ldrh	r3, [r7, #10]
 800a2c2:	f083 0320 	eor.w	r3, r3, #32
 800a2c6:	817b      	strh	r3, [r7, #10]
 800a2c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	441a      	add	r2, r3
 800a2e2:	897b      	ldrh	r3, [r7, #10]
 800a2e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	8013      	strh	r3, [r2, #0]
 800a2f8:	f000 bc9f 	b.w	800ac3a <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a2fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a300:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	7b1b      	ldrb	r3, [r3, #12]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f040 80ae 	bne.w	800a46a <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a30e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	699a      	ldr	r2, [r3, #24]
 800a31a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a31e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	429a      	cmp	r2, r3
 800a328:	d917      	bls.n	800a35a <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800a32a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a32e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	691b      	ldr	r3, [r3, #16]
 800a336:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800a33a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a33e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	699a      	ldr	r2, [r3, #24]
 800a346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a34a:	1ad2      	subs	r2, r2, r3
 800a34c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	619a      	str	r2, [r3, #24]
 800a358:	e00e      	b.n	800a378 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800a35a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a35e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	699b      	ldr	r3, [r3, #24]
 800a366:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800a36a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a36e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	2200      	movs	r2, #0
 800a376:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a37c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a38a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a394:	b29b      	uxth	r3, r3
 800a396:	461a      	mov	r2, r3
 800a398:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a39c:	4413      	add	r3, r2
 800a39e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a3a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	00da      	lsls	r2, r3, #3
 800a3b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a3b4:	4413      	add	r3, r2
 800a3b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a3ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a3be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3c2:	2b3e      	cmp	r3, #62	; 0x3e
 800a3c4:	d91d      	bls.n	800a402 <USB_EPStartXfer+0xe28>
 800a3c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ca:	095b      	lsrs	r3, r3, #5
 800a3cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a3d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3d4:	f003 031f 	and.w	r3, r3, #31
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d104      	bne.n	800a3e6 <USB_EPStartXfer+0xe0c>
 800a3dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a3e0:	3b01      	subs	r3, #1
 800a3e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a3e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	029b      	lsls	r3, r3, #10
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3f8:	b29a      	uxth	r2, r3
 800a3fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a3fe:	801a      	strh	r2, [r3, #0]
 800a400:	e3e1      	b.n	800abc6 <USB_EPStartXfer+0x15ec>
 800a402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a406:	2b00      	cmp	r3, #0
 800a408:	d116      	bne.n	800a438 <USB_EPStartXfer+0xe5e>
 800a40a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a40e:	881b      	ldrh	r3, [r3, #0]
 800a410:	b29b      	uxth	r3, r3
 800a412:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a416:	b29a      	uxth	r2, r3
 800a418:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a41c:	801a      	strh	r2, [r3, #0]
 800a41e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a422:	881b      	ldrh	r3, [r3, #0]
 800a424:	b29b      	uxth	r3, r3
 800a426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a42a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a42e:	b29a      	uxth	r2, r3
 800a430:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a434:	801a      	strh	r2, [r3, #0]
 800a436:	e3c6      	b.n	800abc6 <USB_EPStartXfer+0x15ec>
 800a438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a43c:	085b      	lsrs	r3, r3, #1
 800a43e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a446:	f003 0301 	and.w	r3, r3, #1
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d004      	beq.n	800a458 <USB_EPStartXfer+0xe7e>
 800a44e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a452:	3301      	adds	r3, #1
 800a454:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a458:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	029b      	lsls	r3, r3, #10
 800a460:	b29a      	uxth	r2, r3
 800a462:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a466:	801a      	strh	r2, [r3, #0]
 800a468:	e3ad      	b.n	800abc6 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a46a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a46e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	78db      	ldrb	r3, [r3, #3]
 800a476:	2b02      	cmp	r3, #2
 800a478:	f040 8200 	bne.w	800a87c <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a47c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	785b      	ldrb	r3, [r3, #1]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f040 8091 	bne.w	800a5b0 <USB_EPStartXfer+0xfd6>
 800a48e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a492:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a49c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a4b2:	4413      	add	r3, r2
 800a4b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a4b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	00da      	lsls	r2, r3, #3
 800a4c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a4ca:	4413      	add	r3, r2
 800a4cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a4d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a4d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	691b      	ldr	r3, [r3, #16]
 800a4e0:	2b3e      	cmp	r3, #62	; 0x3e
 800a4e2:	d925      	bls.n	800a530 <USB_EPStartXfer+0xf56>
 800a4e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	691b      	ldr	r3, [r3, #16]
 800a4f0:	095b      	lsrs	r3, r3, #5
 800a4f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a4f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	691b      	ldr	r3, [r3, #16]
 800a502:	f003 031f 	and.w	r3, r3, #31
 800a506:	2b00      	cmp	r3, #0
 800a508:	d104      	bne.n	800a514 <USB_EPStartXfer+0xf3a>
 800a50a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a50e:	3b01      	subs	r3, #1
 800a510:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a518:	b29b      	uxth	r3, r3
 800a51a:	029b      	lsls	r3, r3, #10
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a526:	b29a      	uxth	r2, r3
 800a528:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a52c:	801a      	strh	r2, [r3, #0]
 800a52e:	e074      	b.n	800a61a <USB_EPStartXfer+0x1040>
 800a530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d116      	bne.n	800a56e <USB_EPStartXfer+0xf94>
 800a540:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a544:	881b      	ldrh	r3, [r3, #0]
 800a546:	b29b      	uxth	r3, r3
 800a548:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a54c:	b29a      	uxth	r2, r3
 800a54e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a552:	801a      	strh	r2, [r3, #0]
 800a554:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a558:	881b      	ldrh	r3, [r3, #0]
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a564:	b29a      	uxth	r2, r3
 800a566:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a56a:	801a      	strh	r2, [r3, #0]
 800a56c:	e055      	b.n	800a61a <USB_EPStartXfer+0x1040>
 800a56e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	691b      	ldr	r3, [r3, #16]
 800a57a:	085b      	lsrs	r3, r3, #1
 800a57c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	691b      	ldr	r3, [r3, #16]
 800a58c:	f003 0301 	and.w	r3, r3, #1
 800a590:	2b00      	cmp	r3, #0
 800a592:	d004      	beq.n	800a59e <USB_EPStartXfer+0xfc4>
 800a594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a598:	3301      	adds	r3, #1
 800a59a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a59e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	029b      	lsls	r3, r3, #10
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a5ac:	801a      	strh	r2, [r3, #0]
 800a5ae:	e034      	b.n	800a61a <USB_EPStartXfer+0x1040>
 800a5b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	785b      	ldrb	r3, [r3, #1]
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d12c      	bne.n	800a61a <USB_EPStartXfer+0x1040>
 800a5c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a5ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	461a      	mov	r2, r3
 800a5e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a5e4:	4413      	add	r3, r2
 800a5e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a5ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	00da      	lsls	r2, r3, #3
 800a5f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a5fc:	4413      	add	r3, r2
 800a5fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a602:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a60a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	b29a      	uxth	r2, r3
 800a614:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a618:	801a      	strh	r2, [r3, #0]
 800a61a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a61e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a62c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	785b      	ldrb	r3, [r3, #1]
 800a634:	2b00      	cmp	r3, #0
 800a636:	f040 8091 	bne.w	800a75c <USB_EPStartXfer+0x1182>
 800a63a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a63e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a64c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a656:	b29b      	uxth	r3, r3
 800a658:	461a      	mov	r2, r3
 800a65a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a65e:	4413      	add	r3, r2
 800a660:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	00da      	lsls	r2, r3, #3
 800a672:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a676:	4413      	add	r3, r2
 800a678:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a67c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a684:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	691b      	ldr	r3, [r3, #16]
 800a68c:	2b3e      	cmp	r3, #62	; 0x3e
 800a68e:	d925      	bls.n	800a6dc <USB_EPStartXfer+0x1102>
 800a690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	691b      	ldr	r3, [r3, #16]
 800a69c:	095b      	lsrs	r3, r3, #5
 800a69e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a6a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	f003 031f 	and.w	r3, r3, #31
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d104      	bne.n	800a6c0 <USB_EPStartXfer+0x10e6>
 800a6b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a6c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	029b      	lsls	r3, r3, #10
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a6d8:	801a      	strh	r2, [r3, #0]
 800a6da:	e06d      	b.n	800a7b8 <USB_EPStartXfer+0x11de>
 800a6dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	691b      	ldr	r3, [r3, #16]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d116      	bne.n	800a71a <USB_EPStartXfer+0x1140>
 800a6ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a6f0:	881b      	ldrh	r3, [r3, #0]
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a6f8:	b29a      	uxth	r2, r3
 800a6fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a6fe:	801a      	strh	r2, [r3, #0]
 800a700:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a704:	881b      	ldrh	r3, [r3, #0]
 800a706:	b29b      	uxth	r3, r3
 800a708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a70c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a710:	b29a      	uxth	r2, r3
 800a712:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a716:	801a      	strh	r2, [r3, #0]
 800a718:	e04e      	b.n	800a7b8 <USB_EPStartXfer+0x11de>
 800a71a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a71e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	691b      	ldr	r3, [r3, #16]
 800a726:	085b      	lsrs	r3, r3, #1
 800a728:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a72c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	691b      	ldr	r3, [r3, #16]
 800a738:	f003 0301 	and.w	r3, r3, #1
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d004      	beq.n	800a74a <USB_EPStartXfer+0x1170>
 800a740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a744:	3301      	adds	r3, #1
 800a746:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a74a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a74e:	b29b      	uxth	r3, r3
 800a750:	029b      	lsls	r3, r3, #10
 800a752:	b29a      	uxth	r2, r3
 800a754:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a758:	801a      	strh	r2, [r3, #0]
 800a75a:	e02d      	b.n	800a7b8 <USB_EPStartXfer+0x11de>
 800a75c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	785b      	ldrb	r3, [r3, #1]
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d125      	bne.n	800a7b8 <USB_EPStartXfer+0x11de>
 800a76c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a770:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	461a      	mov	r2, r3
 800a77e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a782:	4413      	add	r3, r2
 800a784:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a78c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	00da      	lsls	r2, r3, #3
 800a796:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a79a:	4413      	add	r3, r2
 800a79c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a7a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a7a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	691b      	ldr	r3, [r3, #16]
 800a7b0:	b29a      	uxth	r2, r3
 800a7b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a7b6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a7b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	69db      	ldr	r3, [r3, #28]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	f000 81fe 	beq.w	800abc6 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a7ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	4413      	add	r3, r2
 800a7e4:	881b      	ldrh	r3, [r3, #0]
 800a7e6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a7ea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a7ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d005      	beq.n	800a802 <USB_EPStartXfer+0x1228>
 800a7f6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a7fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d10d      	bne.n	800a81e <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a802:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	f040 81db 	bne.w	800abc6 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a810:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a818:	2b00      	cmp	r3, #0
 800a81a:	f040 81d4 	bne.w	800abc6 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a81e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a822:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a82c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	4413      	add	r3, r2
 800a838:	881b      	ldrh	r3, [r3, #0]
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a844:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800a848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a84c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	441a      	add	r2, r3
 800a862:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800a866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a86a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a86e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a872:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a876:	b29b      	uxth	r3, r3
 800a878:	8013      	strh	r3, [r2, #0]
 800a87a:	e1a4      	b.n	800abc6 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a87c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a880:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	78db      	ldrb	r3, [r3, #3]
 800a888:	2b01      	cmp	r3, #1
 800a88a:	f040 819a 	bne.w	800abc2 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a88e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	699a      	ldr	r2, [r3, #24]
 800a89a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a89e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d917      	bls.n	800a8da <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800a8aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	691b      	ldr	r3, [r3, #16]
 800a8b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800a8ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	699a      	ldr	r2, [r3, #24]
 800a8c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ca:	1ad2      	subs	r2, r2, r3
 800a8cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	619a      	str	r2, [r3, #24]
 800a8d8:	e00e      	b.n	800a8f8 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800a8da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	699b      	ldr	r3, [r3, #24]
 800a8e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800a8ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a8f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	785b      	ldrb	r3, [r3, #1]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d178      	bne.n	800a9fa <USB_EPStartXfer+0x1420>
 800a908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a90c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a91a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a924:	b29b      	uxth	r3, r3
 800a926:	461a      	mov	r2, r3
 800a928:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a92c:	4413      	add	r3, r2
 800a92e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a936:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	00da      	lsls	r2, r3, #3
 800a940:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a944:	4413      	add	r3, r2
 800a946:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a94a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a94e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a952:	2b3e      	cmp	r3, #62	; 0x3e
 800a954:	d91d      	bls.n	800a992 <USB_EPStartXfer+0x13b8>
 800a956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a95a:	095b      	lsrs	r3, r3, #5
 800a95c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a964:	f003 031f 	and.w	r3, r3, #31
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d104      	bne.n	800a976 <USB_EPStartXfer+0x139c>
 800a96c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a970:	3b01      	subs	r3, #1
 800a972:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	029b      	lsls	r3, r3, #10
 800a97e:	b29b      	uxth	r3, r3
 800a980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a988:	b29a      	uxth	r2, r3
 800a98a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a98e:	801a      	strh	r2, [r3, #0]
 800a990:	e064      	b.n	800aa5c <USB_EPStartXfer+0x1482>
 800a992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a996:	2b00      	cmp	r3, #0
 800a998:	d116      	bne.n	800a9c8 <USB_EPStartXfer+0x13ee>
 800a99a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a99e:	881b      	ldrh	r3, [r3, #0]
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a9a6:	b29a      	uxth	r2, r3
 800a9a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a9ac:	801a      	strh	r2, [r3, #0]
 800a9ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a9b2:	881b      	ldrh	r3, [r3, #0]
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9be:	b29a      	uxth	r2, r3
 800a9c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a9c4:	801a      	strh	r2, [r3, #0]
 800a9c6:	e049      	b.n	800aa5c <USB_EPStartXfer+0x1482>
 800a9c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9cc:	085b      	lsrs	r3, r3, #1
 800a9ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a9d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9d6:	f003 0301 	and.w	r3, r3, #1
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d004      	beq.n	800a9e8 <USB_EPStartXfer+0x140e>
 800a9de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a9e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	029b      	lsls	r3, r3, #10
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a9f6:	801a      	strh	r2, [r3, #0]
 800a9f8:	e030      	b.n	800aa5c <USB_EPStartXfer+0x1482>
 800a9fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	785b      	ldrb	r3, [r3, #1]
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d128      	bne.n	800aa5c <USB_EPStartXfer+0x1482>
 800aa0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800aa18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	461a      	mov	r2, r3
 800aa2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa2e:	4413      	add	r3, r2
 800aa30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800aa34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	00da      	lsls	r2, r3, #3
 800aa42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa46:	4413      	add	r3, r2
 800aa48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aa50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa54:	b29a      	uxth	r2, r3
 800aa56:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800aa5a:	801a      	strh	r2, [r3, #0]
 800aa5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aa6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	785b      	ldrb	r3, [r3, #1]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d178      	bne.n	800ab6c <USB_EPStartXfer+0x1592>
 800aa7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800aa88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	461a      	mov	r2, r3
 800aa9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aa9e:	4413      	add	r3, r2
 800aaa0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800aaa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	00da      	lsls	r2, r3, #3
 800aab2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aab6:	4413      	add	r3, r2
 800aab8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aabc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aac4:	2b3e      	cmp	r3, #62	; 0x3e
 800aac6:	d91d      	bls.n	800ab04 <USB_EPStartXfer+0x152a>
 800aac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aacc:	095b      	lsrs	r3, r3, #5
 800aace:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aad6:	f003 031f 	and.w	r3, r3, #31
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d104      	bne.n	800aae8 <USB_EPStartXfer+0x150e>
 800aade:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aae2:	3b01      	subs	r3, #1
 800aae4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aae8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aaec:	b29b      	uxth	r3, r3
 800aaee:	029b      	lsls	r3, r3, #10
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aaf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aafa:	b29a      	uxth	r2, r3
 800aafc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ab00:	801a      	strh	r2, [r3, #0]
 800ab02:	e060      	b.n	800abc6 <USB_EPStartXfer+0x15ec>
 800ab04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d116      	bne.n	800ab3a <USB_EPStartXfer+0x1560>
 800ab0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ab10:	881b      	ldrh	r3, [r3, #0]
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ab18:	b29a      	uxth	r2, r3
 800ab1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ab1e:	801a      	strh	r2, [r3, #0]
 800ab20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ab24:	881b      	ldrh	r3, [r3, #0]
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab30:	b29a      	uxth	r2, r3
 800ab32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ab36:	801a      	strh	r2, [r3, #0]
 800ab38:	e045      	b.n	800abc6 <USB_EPStartXfer+0x15ec>
 800ab3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab3e:	085b      	lsrs	r3, r3, #1
 800ab40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ab44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab48:	f003 0301 	and.w	r3, r3, #1
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d004      	beq.n	800ab5a <USB_EPStartXfer+0x1580>
 800ab50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab54:	3301      	adds	r3, #1
 800ab56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ab5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	029b      	lsls	r3, r3, #10
 800ab62:	b29a      	uxth	r2, r3
 800ab64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ab68:	801a      	strh	r2, [r3, #0]
 800ab6a:	e02c      	b.n	800abc6 <USB_EPStartXfer+0x15ec>
 800ab6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	785b      	ldrb	r3, [r3, #1]
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d124      	bne.n	800abc6 <USB_EPStartXfer+0x15ec>
 800ab7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ab92:	4413      	add	r3, r2
 800ab94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ab98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	00da      	lsls	r2, r3, #3
 800aba6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800abaa:	4413      	add	r3, r2
 800abac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800abb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800abb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abb8:	b29a      	uxth	r2, r3
 800abba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800abbe:	801a      	strh	r2, [r3, #0]
 800abc0:	e001      	b.n	800abc6 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	e03a      	b.n	800ac3c <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800abc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	4413      	add	r3, r2
 800abe0:	881b      	ldrh	r3, [r3, #0]
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800abe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800abf0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800abf4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800abf8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800abfc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ac00:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ac04:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ac08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	441a      	add	r2, r3
 800ac22:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ac26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac36:	b29b      	uxth	r3, r3
 800ac38:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ac3a:	2300      	movs	r3, #0
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ac46:	b480      	push	{r7}
 800ac48:	b085      	sub	sp, #20
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
 800ac4e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	785b      	ldrb	r3, [r3, #1]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d020      	beq.n	800ac9a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	4413      	add	r3, r2
 800ac62:	881b      	ldrh	r3, [r3, #0]
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac6e:	81bb      	strh	r3, [r7, #12]
 800ac70:	89bb      	ldrh	r3, [r7, #12]
 800ac72:	f083 0310 	eor.w	r3, r3, #16
 800ac76:	81bb      	strh	r3, [r7, #12]
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	441a      	add	r2, r3
 800ac82:	89bb      	ldrh	r3, [r7, #12]
 800ac84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac94:	b29b      	uxth	r3, r3
 800ac96:	8013      	strh	r3, [r2, #0]
 800ac98:	e01f      	b.n	800acda <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	009b      	lsls	r3, r3, #2
 800aca2:	4413      	add	r3, r2
 800aca4:	881b      	ldrh	r3, [r3, #0]
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800acac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acb0:	81fb      	strh	r3, [r7, #14]
 800acb2:	89fb      	ldrh	r3, [r7, #14]
 800acb4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800acb8:	81fb      	strh	r3, [r7, #14]
 800acba:	687a      	ldr	r2, [r7, #4]
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	441a      	add	r2, r3
 800acc4:	89fb      	ldrh	r3, [r7, #14]
 800acc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800acda:	2300      	movs	r3, #0
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3714      	adds	r7, #20
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ace8:	b480      	push	{r7}
 800acea:	b087      	sub	sp, #28
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	7b1b      	ldrb	r3, [r3, #12]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f040 809d 	bne.w	800ae36 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	785b      	ldrb	r3, [r3, #1]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d04c      	beq.n	800ad9e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	4413      	add	r3, r2
 800ad0e:	881b      	ldrh	r3, [r3, #0]
 800ad10:	823b      	strh	r3, [r7, #16]
 800ad12:	8a3b      	ldrh	r3, [r7, #16]
 800ad14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d01b      	beq.n	800ad54 <USB_EPClearStall+0x6c>
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	4413      	add	r3, r2
 800ad26:	881b      	ldrh	r3, [r3, #0]
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad32:	81fb      	strh	r3, [r7, #14]
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	441a      	add	r2, r3
 800ad3e:	89fb      	ldrh	r3, [r7, #14]
 800ad40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	78db      	ldrb	r3, [r3, #3]
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d06c      	beq.n	800ae36 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	4413      	add	r3, r2
 800ad66:	881b      	ldrh	r3, [r3, #0]
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad72:	81bb      	strh	r3, [r7, #12]
 800ad74:	89bb      	ldrh	r3, [r7, #12]
 800ad76:	f083 0320 	eor.w	r3, r3, #32
 800ad7a:	81bb      	strh	r3, [r7, #12]
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	441a      	add	r2, r3
 800ad86:	89bb      	ldrh	r3, [r7, #12]
 800ad88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	8013      	strh	r3, [r2, #0]
 800ad9c:	e04b      	b.n	800ae36 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	4413      	add	r3, r2
 800ada8:	881b      	ldrh	r3, [r3, #0]
 800adaa:	82fb      	strh	r3, [r7, #22]
 800adac:	8afb      	ldrh	r3, [r7, #22]
 800adae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d01b      	beq.n	800adee <USB_EPClearStall+0x106>
 800adb6:	687a      	ldr	r2, [r7, #4]
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	4413      	add	r3, r2
 800adc0:	881b      	ldrh	r3, [r3, #0]
 800adc2:	b29b      	uxth	r3, r3
 800adc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adcc:	82bb      	strh	r3, [r7, #20]
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	441a      	add	r2, r3
 800add8:	8abb      	ldrh	r3, [r7, #20]
 800adda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ade2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ade6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adea:	b29b      	uxth	r3, r3
 800adec:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	4413      	add	r3, r2
 800adf8:	881b      	ldrh	r3, [r3, #0]
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae04:	827b      	strh	r3, [r7, #18]
 800ae06:	8a7b      	ldrh	r3, [r7, #18]
 800ae08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ae0c:	827b      	strh	r3, [r7, #18]
 800ae0e:	8a7b      	ldrh	r3, [r7, #18]
 800ae10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ae14:	827b      	strh	r3, [r7, #18]
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	441a      	add	r2, r3
 800ae20:	8a7b      	ldrh	r3, [r7, #18]
 800ae22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ae36:	2300      	movs	r3, #0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	371c      	adds	r7, #28
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ae50:	78fb      	ldrb	r3, [r7, #3]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d103      	bne.n	800ae5e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2280      	movs	r2, #128	; 0x80
 800ae5a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800ae5e:	2300      	movs	r3, #0
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	370c      	adds	r7, #12
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae84:	b29a      	uxth	r2, r3
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800ae8c:	2300      	movs	r3, #0
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	370c      	adds	r7, #12
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr

0800ae9a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800ae9a:	b480      	push	{r7}
 800ae9c:	b085      	sub	sp, #20
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800aeac:	68fb      	ldr	r3, [r7, #12]
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3714      	adds	r7, #20
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr

0800aeba <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800aeba:	b480      	push	{r7}
 800aebc:	b08d      	sub	sp, #52	; 0x34
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	60f8      	str	r0, [r7, #12]
 800aec2:	60b9      	str	r1, [r7, #8]
 800aec4:	4611      	mov	r1, r2
 800aec6:	461a      	mov	r2, r3
 800aec8:	460b      	mov	r3, r1
 800aeca:	80fb      	strh	r3, [r7, #6]
 800aecc:	4613      	mov	r3, r2
 800aece:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800aed0:	88bb      	ldrh	r3, [r7, #4]
 800aed2:	3301      	adds	r3, #1
 800aed4:	085b      	lsrs	r3, r3, #1
 800aed6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800aee0:	88fa      	ldrh	r2, [r7, #6]
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	4413      	add	r3, r2
 800aee6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aeea:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800aeec:	6a3b      	ldr	r3, [r7, #32]
 800aeee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aef0:	e01b      	b.n	800af2a <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800aef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800aef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefa:	3301      	adds	r3, #1
 800aefc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800aefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	b29b      	uxth	r3, r3
 800af04:	021b      	lsls	r3, r3, #8
 800af06:	b29b      	uxth	r3, r3
 800af08:	461a      	mov	r2, r3
 800af0a:	69bb      	ldr	r3, [r7, #24]
 800af0c:	4313      	orrs	r3, r2
 800af0e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	b29a      	uxth	r2, r3
 800af14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af16:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800af18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1a:	3302      	adds	r3, #2
 800af1c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800af1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af20:	3301      	adds	r3, #1
 800af22:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800af24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af26:	3b01      	subs	r3, #1
 800af28:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d1e0      	bne.n	800aef2 <USB_WritePMA+0x38>
  }
}
 800af30:	bf00      	nop
 800af32:	bf00      	nop
 800af34:	3734      	adds	r7, #52	; 0x34
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr

0800af3e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800af3e:	b480      	push	{r7}
 800af40:	b08b      	sub	sp, #44	; 0x2c
 800af42:	af00      	add	r7, sp, #0
 800af44:	60f8      	str	r0, [r7, #12]
 800af46:	60b9      	str	r1, [r7, #8]
 800af48:	4611      	mov	r1, r2
 800af4a:	461a      	mov	r2, r3
 800af4c:	460b      	mov	r3, r1
 800af4e:	80fb      	strh	r3, [r7, #6]
 800af50:	4613      	mov	r3, r2
 800af52:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800af54:	88bb      	ldrh	r3, [r7, #4]
 800af56:	085b      	lsrs	r3, r3, #1
 800af58:	b29b      	uxth	r3, r3
 800af5a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800af64:	88fa      	ldrh	r2, [r7, #6]
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	4413      	add	r3, r2
 800af6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af6e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800af70:	69bb      	ldr	r3, [r7, #24]
 800af72:	627b      	str	r3, [r7, #36]	; 0x24
 800af74:	e018      	b.n	800afa8 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800af76:	6a3b      	ldr	r3, [r7, #32]
 800af78:	881b      	ldrh	r3, [r3, #0]
 800af7a:	b29b      	uxth	r3, r3
 800af7c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800af7e:	6a3b      	ldr	r3, [r7, #32]
 800af80:	3302      	adds	r3, #2
 800af82:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	b2da      	uxtb	r2, r3
 800af88:	69fb      	ldr	r3, [r7, #28]
 800af8a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800af8c:	69fb      	ldr	r3, [r7, #28]
 800af8e:	3301      	adds	r3, #1
 800af90:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	0a1b      	lsrs	r3, r3, #8
 800af96:	b2da      	uxtb	r2, r3
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800af9c:	69fb      	ldr	r3, [r7, #28]
 800af9e:	3301      	adds	r3, #1
 800afa0:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800afa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa4:	3b01      	subs	r3, #1
 800afa6:	627b      	str	r3, [r7, #36]	; 0x24
 800afa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d1e3      	bne.n	800af76 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800afae:	88bb      	ldrh	r3, [r7, #4]
 800afb0:	f003 0301 	and.w	r3, r3, #1
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d007      	beq.n	800afca <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800afba:	6a3b      	ldr	r3, [r7, #32]
 800afbc:	881b      	ldrh	r3, [r3, #0]
 800afbe:	b29b      	uxth	r3, r3
 800afc0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	b2da      	uxtb	r2, r3
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	701a      	strb	r2, [r3, #0]
  }
}
 800afca:	bf00      	nop
 800afcc:	372c      	adds	r7, #44	; 0x2c
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr

0800afd6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800afd6:	b580      	push	{r7, lr}
 800afd8:	b084      	sub	sp, #16
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
 800afde:	460b      	mov	r3, r1
 800afe0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800afe2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800afe6:	f002 f8bb 	bl	800d160 <USBD_static_malloc>
 800afea:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d105      	bne.n	800affe <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800affa:	2302      	movs	r3, #2
 800affc:	e066      	b.n	800b0cc <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	68fa      	ldr	r2, [r7, #12]
 800b002:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	7c1b      	ldrb	r3, [r3, #16]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d119      	bne.n	800b042 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b00e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b012:	2202      	movs	r2, #2
 800b014:	2181      	movs	r1, #129	; 0x81
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f001 ff47 	bl	800ceaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2201      	movs	r2, #1
 800b020:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b022:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b026:	2202      	movs	r2, #2
 800b028:	2101      	movs	r1, #1
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f001 ff3d 	bl	800ceaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2201      	movs	r2, #1
 800b034:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2210      	movs	r2, #16
 800b03c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b040:	e016      	b.n	800b070 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b042:	2340      	movs	r3, #64	; 0x40
 800b044:	2202      	movs	r2, #2
 800b046:	2181      	movs	r1, #129	; 0x81
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f001 ff2e 	bl	800ceaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2201      	movs	r2, #1
 800b052:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b054:	2340      	movs	r3, #64	; 0x40
 800b056:	2202      	movs	r2, #2
 800b058:	2101      	movs	r1, #1
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f001 ff25 	bl	800ceaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2201      	movs	r2, #1
 800b064:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2210      	movs	r2, #16
 800b06c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b070:	2308      	movs	r3, #8
 800b072:	2203      	movs	r2, #3
 800b074:	2182      	movs	r1, #130	; 0x82
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f001 ff17 	bl	800ceaa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2201      	movs	r2, #1
 800b080:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2200      	movs	r2, #0
 800b092:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2200      	movs	r2, #0
 800b09a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	7c1b      	ldrb	r3, [r3, #16]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d109      	bne.n	800b0ba <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b0ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0b0:	2101      	movs	r1, #1
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f001 ffe9 	bl	800d08a <USBD_LL_PrepareReceive>
 800b0b8:	e007      	b.n	800b0ca <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b0c0:	2340      	movs	r3, #64	; 0x40
 800b0c2:	2101      	movs	r1, #1
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f001 ffe0 	bl	800d08a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3710      	adds	r7, #16
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	460b      	mov	r3, r1
 800b0de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b0e0:	2181      	movs	r1, #129	; 0x81
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f001 ff07 	bl	800cef6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b0ee:	2101      	movs	r1, #1
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f001 ff00 	bl	800cef6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b0fe:	2182      	movs	r1, #130	; 0x82
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f001 fef8 	bl	800cef6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2200      	movs	r2, #0
 800b10a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2200      	movs	r2, #0
 800b112:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d00e      	beq.n	800b13e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b130:	4618      	mov	r0, r3
 800b132:	f002 f823 	bl	800d17c <USBD_static_free>
    pdev->pClassData = NULL;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2200      	movs	r2, #0
 800b13a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b13e:	2300      	movs	r3, #0
}
 800b140:	4618      	mov	r0, r3
 800b142:	3708      	adds	r7, #8
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b086      	sub	sp, #24
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b158:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b15a:	2300      	movs	r3, #0
 800b15c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b15e:	2300      	movs	r3, #0
 800b160:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b162:	2300      	movs	r3, #0
 800b164:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d101      	bne.n	800b170 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b16c:	2303      	movs	r3, #3
 800b16e:	e0af      	b.n	800b2d0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d03f      	beq.n	800b1fc <USBD_CDC_Setup+0xb4>
 800b17c:	2b20      	cmp	r3, #32
 800b17e:	f040 809f 	bne.w	800b2c0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	88db      	ldrh	r3, [r3, #6]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d02e      	beq.n	800b1e8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	b25b      	sxtb	r3, r3
 800b190:	2b00      	cmp	r3, #0
 800b192:	da16      	bge.n	800b1c2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b19a:	689b      	ldr	r3, [r3, #8]
 800b19c:	683a      	ldr	r2, [r7, #0]
 800b19e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b1a0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b1a2:	683a      	ldr	r2, [r7, #0]
 800b1a4:	88d2      	ldrh	r2, [r2, #6]
 800b1a6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	88db      	ldrh	r3, [r3, #6]
 800b1ac:	2b07      	cmp	r3, #7
 800b1ae:	bf28      	it	cs
 800b1b0:	2307      	movcs	r3, #7
 800b1b2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	89fa      	ldrh	r2, [r7, #14]
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f001 fa9f 	bl	800c6fe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b1c0:	e085      	b.n	800b2ce <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	785a      	ldrb	r2, [r3, #1]
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	88db      	ldrh	r3, [r3, #6]
 800b1d0:	b2da      	uxtb	r2, r3
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b1d8:	6939      	ldr	r1, [r7, #16]
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	88db      	ldrh	r3, [r3, #6]
 800b1de:	461a      	mov	r2, r3
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f001 fab8 	bl	800c756 <USBD_CtlPrepareRx>
      break;
 800b1e6:	e072      	b.n	800b2ce <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b1ee:	689b      	ldr	r3, [r3, #8]
 800b1f0:	683a      	ldr	r2, [r7, #0]
 800b1f2:	7850      	ldrb	r0, [r2, #1]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	6839      	ldr	r1, [r7, #0]
 800b1f8:	4798      	blx	r3
      break;
 800b1fa:	e068      	b.n	800b2ce <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	785b      	ldrb	r3, [r3, #1]
 800b200:	2b0b      	cmp	r3, #11
 800b202:	d852      	bhi.n	800b2aa <USBD_CDC_Setup+0x162>
 800b204:	a201      	add	r2, pc, #4	; (adr r2, 800b20c <USBD_CDC_Setup+0xc4>)
 800b206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b20a:	bf00      	nop
 800b20c:	0800b23d 	.word	0x0800b23d
 800b210:	0800b2b9 	.word	0x0800b2b9
 800b214:	0800b2ab 	.word	0x0800b2ab
 800b218:	0800b2ab 	.word	0x0800b2ab
 800b21c:	0800b2ab 	.word	0x0800b2ab
 800b220:	0800b2ab 	.word	0x0800b2ab
 800b224:	0800b2ab 	.word	0x0800b2ab
 800b228:	0800b2ab 	.word	0x0800b2ab
 800b22c:	0800b2ab 	.word	0x0800b2ab
 800b230:	0800b2ab 	.word	0x0800b2ab
 800b234:	0800b267 	.word	0x0800b267
 800b238:	0800b291 	.word	0x0800b291
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b242:	b2db      	uxtb	r3, r3
 800b244:	2b03      	cmp	r3, #3
 800b246:	d107      	bne.n	800b258 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b248:	f107 030a 	add.w	r3, r7, #10
 800b24c:	2202      	movs	r2, #2
 800b24e:	4619      	mov	r1, r3
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f001 fa54 	bl	800c6fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b256:	e032      	b.n	800b2be <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b258:	6839      	ldr	r1, [r7, #0]
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f001 f9de 	bl	800c61c <USBD_CtlError>
            ret = USBD_FAIL;
 800b260:	2303      	movs	r3, #3
 800b262:	75fb      	strb	r3, [r7, #23]
          break;
 800b264:	e02b      	b.n	800b2be <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	2b03      	cmp	r3, #3
 800b270:	d107      	bne.n	800b282 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b272:	f107 030d 	add.w	r3, r7, #13
 800b276:	2201      	movs	r2, #1
 800b278:	4619      	mov	r1, r3
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f001 fa3f 	bl	800c6fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b280:	e01d      	b.n	800b2be <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b282:	6839      	ldr	r1, [r7, #0]
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f001 f9c9 	bl	800c61c <USBD_CtlError>
            ret = USBD_FAIL;
 800b28a:	2303      	movs	r3, #3
 800b28c:	75fb      	strb	r3, [r7, #23]
          break;
 800b28e:	e016      	b.n	800b2be <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b296:	b2db      	uxtb	r3, r3
 800b298:	2b03      	cmp	r3, #3
 800b29a:	d00f      	beq.n	800b2bc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b29c:	6839      	ldr	r1, [r7, #0]
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f001 f9bc 	bl	800c61c <USBD_CtlError>
            ret = USBD_FAIL;
 800b2a4:	2303      	movs	r3, #3
 800b2a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b2a8:	e008      	b.n	800b2bc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b2aa:	6839      	ldr	r1, [r7, #0]
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f001 f9b5 	bl	800c61c <USBD_CtlError>
          ret = USBD_FAIL;
 800b2b2:	2303      	movs	r3, #3
 800b2b4:	75fb      	strb	r3, [r7, #23]
          break;
 800b2b6:	e002      	b.n	800b2be <USBD_CDC_Setup+0x176>
          break;
 800b2b8:	bf00      	nop
 800b2ba:	e008      	b.n	800b2ce <USBD_CDC_Setup+0x186>
          break;
 800b2bc:	bf00      	nop
      }
      break;
 800b2be:	e006      	b.n	800b2ce <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b2c0:	6839      	ldr	r1, [r7, #0]
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f001 f9aa 	bl	800c61c <USBD_CtlError>
      ret = USBD_FAIL;
 800b2c8:	2303      	movs	r3, #3
 800b2ca:	75fb      	strb	r3, [r7, #23]
      break;
 800b2cc:	bf00      	nop
  }

  return (uint8_t)ret;
 800b2ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3718      	adds	r7, #24
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b2ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d101      	bne.n	800b2fa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b2f6:	2303      	movs	r3, #3
 800b2f8:	e04f      	b.n	800b39a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b300:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b302:	78fa      	ldrb	r2, [r7, #3]
 800b304:	6879      	ldr	r1, [r7, #4]
 800b306:	4613      	mov	r3, r2
 800b308:	009b      	lsls	r3, r3, #2
 800b30a:	4413      	add	r3, r2
 800b30c:	009b      	lsls	r3, r3, #2
 800b30e:	440b      	add	r3, r1
 800b310:	3318      	adds	r3, #24
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d029      	beq.n	800b36c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b318:	78fa      	ldrb	r2, [r7, #3]
 800b31a:	6879      	ldr	r1, [r7, #4]
 800b31c:	4613      	mov	r3, r2
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	4413      	add	r3, r2
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	440b      	add	r3, r1
 800b326:	3318      	adds	r3, #24
 800b328:	681a      	ldr	r2, [r3, #0]
 800b32a:	78f9      	ldrb	r1, [r7, #3]
 800b32c:	68f8      	ldr	r0, [r7, #12]
 800b32e:	460b      	mov	r3, r1
 800b330:	009b      	lsls	r3, r3, #2
 800b332:	440b      	add	r3, r1
 800b334:	00db      	lsls	r3, r3, #3
 800b336:	4403      	add	r3, r0
 800b338:	3338      	adds	r3, #56	; 0x38
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	fbb2 f1f3 	udiv	r1, r2, r3
 800b340:	fb01 f303 	mul.w	r3, r1, r3
 800b344:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b346:	2b00      	cmp	r3, #0
 800b348:	d110      	bne.n	800b36c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b34a:	78fa      	ldrb	r2, [r7, #3]
 800b34c:	6879      	ldr	r1, [r7, #4]
 800b34e:	4613      	mov	r3, r2
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	4413      	add	r3, r2
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	440b      	add	r3, r1
 800b358:	3318      	adds	r3, #24
 800b35a:	2200      	movs	r2, #0
 800b35c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b35e:	78f9      	ldrb	r1, [r7, #3]
 800b360:	2300      	movs	r3, #0
 800b362:	2200      	movs	r2, #0
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f001 fe6f 	bl	800d048 <USBD_LL_Transmit>
 800b36a:	e015      	b.n	800b398 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	2200      	movs	r2, #0
 800b370:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b37a:	691b      	ldr	r3, [r3, #16]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d00b      	beq.n	800b398 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b386:	691b      	ldr	r3, [r3, #16]
 800b388:	68ba      	ldr	r2, [r7, #8]
 800b38a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b38e:	68ba      	ldr	r2, [r7, #8]
 800b390:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b394:	78fa      	ldrb	r2, [r7, #3]
 800b396:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b398:	2300      	movs	r3, #0
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	b084      	sub	sp, #16
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3b4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d101      	bne.n	800b3c4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b3c0:	2303      	movs	r3, #3
 800b3c2:	e015      	b.n	800b3f0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b3c4:	78fb      	ldrb	r3, [r7, #3]
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f001 fe7f 	bl	800d0cc <USBD_LL_GetRxDataSize>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b3dc:	68db      	ldr	r3, [r3, #12]
 800b3de:	68fa      	ldr	r2, [r7, #12]
 800b3e0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b3ea:	4611      	mov	r1, r2
 800b3ec:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b3ee:	2300      	movs	r3, #0
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3710      	adds	r7, #16
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b406:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d101      	bne.n	800b412 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b40e:	2303      	movs	r3, #3
 800b410:	e01b      	b.n	800b44a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d015      	beq.n	800b448 <USBD_CDC_EP0_RxReady+0x50>
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b422:	2bff      	cmp	r3, #255	; 0xff
 800b424:	d010      	beq.n	800b448 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	68fa      	ldr	r2, [r7, #12]
 800b430:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b434:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b43c:	b292      	uxth	r2, r2
 800b43e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	22ff      	movs	r2, #255	; 0xff
 800b444:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b448:	2300      	movs	r3, #0
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3710      	adds	r7, #16
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
	...

0800b454 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b454:	b480      	push	{r7}
 800b456:	b083      	sub	sp, #12
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2243      	movs	r2, #67	; 0x43
 800b460:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b462:	4b03      	ldr	r3, [pc, #12]	; (800b470 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b464:	4618      	mov	r0, r3
 800b466:	370c      	adds	r7, #12
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr
 800b470:	20000094 	.word	0x20000094

0800b474 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b474:	b480      	push	{r7}
 800b476:	b083      	sub	sp, #12
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2243      	movs	r2, #67	; 0x43
 800b480:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b482:	4b03      	ldr	r3, [pc, #12]	; (800b490 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b484:	4618      	mov	r0, r3
 800b486:	370c      	adds	r7, #12
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr
 800b490:	20000050 	.word	0x20000050

0800b494 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2243      	movs	r2, #67	; 0x43
 800b4a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b4a2:	4b03      	ldr	r3, [pc, #12]	; (800b4b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	370c      	adds	r7, #12
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr
 800b4b0:	200000d8 	.word	0x200000d8

0800b4b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	220a      	movs	r2, #10
 800b4c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b4c2:	4b03      	ldr	r3, [pc, #12]	; (800b4d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	370c      	adds	r7, #12
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr
 800b4d0:	2000000c 	.word	0x2000000c

0800b4d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b083      	sub	sp, #12
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d101      	bne.n	800b4e8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b4e4:	2303      	movs	r3, #3
 800b4e6:	e004      	b.n	800b4f2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	683a      	ldr	r2, [r7, #0]
 800b4ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b4f0:	2300      	movs	r3, #0
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	370c      	adds	r7, #12
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr

0800b4fe <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b4fe:	b480      	push	{r7}
 800b500:	b087      	sub	sp, #28
 800b502:	af00      	add	r7, sp, #0
 800b504:	60f8      	str	r0, [r7, #12]
 800b506:	60b9      	str	r1, [r7, #8]
 800b508:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b510:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d101      	bne.n	800b51c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b518:	2303      	movs	r3, #3
 800b51a:	e008      	b.n	800b52e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	68ba      	ldr	r2, [r7, #8]
 800b520:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b52c:	2300      	movs	r3, #0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	371c      	adds	r7, #28
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr

0800b53a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b53a:	b480      	push	{r7}
 800b53c:	b085      	sub	sp, #20
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
 800b542:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b54a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d101      	bne.n	800b556 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b552:	2303      	movs	r3, #3
 800b554:	e004      	b.n	800b560 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	683a      	ldr	r2, [r7, #0]
 800b55a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b55e:	2300      	movs	r3, #0
}
 800b560:	4618      	mov	r0, r3
 800b562:	3714      	adds	r7, #20
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b57a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b582:	2b00      	cmp	r3, #0
 800b584:	d101      	bne.n	800b58a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b586:	2303      	movs	r3, #3
 800b588:	e016      	b.n	800b5b8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	7c1b      	ldrb	r3, [r3, #16]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d109      	bne.n	800b5a6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b598:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b59c:	2101      	movs	r1, #1
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f001 fd73 	bl	800d08a <USBD_LL_PrepareReceive>
 800b5a4:	e007      	b.n	800b5b6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b5ac:	2340      	movs	r3, #64	; 0x40
 800b5ae:	2101      	movs	r1, #1
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f001 fd6a 	bl	800d08a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b5b6:	2300      	movs	r3, #0
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3710      	adds	r7, #16
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b086      	sub	sp, #24
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	60b9      	str	r1, [r7, #8]
 800b5ca:	4613      	mov	r3, r2
 800b5cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d101      	bne.n	800b5d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b5d4:	2303      	movs	r3, #3
 800b5d6:	e01f      	b.n	800b618 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d003      	beq.n	800b5fe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	68ba      	ldr	r2, [r7, #8]
 800b5fa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2201      	movs	r2, #1
 800b602:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	79fa      	ldrb	r2, [r7, #7]
 800b60a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b60c:	68f8      	ldr	r0, [r7, #12]
 800b60e:	f001 fbd1 	bl	800cdb4 <USBD_LL_Init>
 800b612:	4603      	mov	r3, r0
 800b614:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b616:	7dfb      	ldrb	r3, [r7, #23]
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3718      	adds	r7, #24
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}

0800b620 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b62a:	2300      	movs	r3, #0
 800b62c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d101      	bne.n	800b638 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b634:	2303      	movs	r3, #3
 800b636:	e016      	b.n	800b666 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	683a      	ldr	r2, [r7, #0]
 800b63c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d00b      	beq.n	800b664 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b654:	f107 020e 	add.w	r2, r7, #14
 800b658:	4610      	mov	r0, r2
 800b65a:	4798      	blx	r3
 800b65c:	4602      	mov	r2, r0
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b664:	2300      	movs	r3, #0
}
 800b666:	4618      	mov	r0, r3
 800b668:	3710      	adds	r7, #16
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}

0800b66e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b66e:	b580      	push	{r7, lr}
 800b670:	b082      	sub	sp, #8
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f001 fbfc 	bl	800ce74 <USBD_LL_Start>
 800b67c:	4603      	mov	r3, r0
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3708      	adds	r7, #8
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}

0800b686 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b686:	b480      	push	{r7}
 800b688:	b083      	sub	sp, #12
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b68e:	2300      	movs	r3, #0
}
 800b690:	4618      	mov	r0, r3
 800b692:	370c      	adds	r7, #12
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr

0800b69c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	460b      	mov	r3, r1
 800b6a6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b6a8:	2303      	movs	r3, #3
 800b6aa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d009      	beq.n	800b6ca <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	78fa      	ldrb	r2, [r7, #3]
 800b6c0:	4611      	mov	r1, r2
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	4798      	blx	r3
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b6ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3710      	adds	r7, #16
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}

0800b6d4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	460b      	mov	r3, r1
 800b6de:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d007      	beq.n	800b6fa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	78fa      	ldrb	r2, [r7, #3]
 800b6f4:	4611      	mov	r1, r2
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	4798      	blx	r3
  }

  return USBD_OK;
 800b6fa:	2300      	movs	r3, #0
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3708      	adds	r7, #8
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}

0800b704 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b714:	6839      	ldr	r1, [r7, #0]
 800b716:	4618      	mov	r0, r3
 800b718:	f000 ff46 	bl	800c5a8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2201      	movs	r2, #1
 800b720:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b72a:	461a      	mov	r2, r3
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b738:	f003 031f 	and.w	r3, r3, #31
 800b73c:	2b02      	cmp	r3, #2
 800b73e:	d01a      	beq.n	800b776 <USBD_LL_SetupStage+0x72>
 800b740:	2b02      	cmp	r3, #2
 800b742:	d822      	bhi.n	800b78a <USBD_LL_SetupStage+0x86>
 800b744:	2b00      	cmp	r3, #0
 800b746:	d002      	beq.n	800b74e <USBD_LL_SetupStage+0x4a>
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d00a      	beq.n	800b762 <USBD_LL_SetupStage+0x5e>
 800b74c:	e01d      	b.n	800b78a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b754:	4619      	mov	r1, r3
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 f9ee 	bl	800bb38 <USBD_StdDevReq>
 800b75c:	4603      	mov	r3, r0
 800b75e:	73fb      	strb	r3, [r7, #15]
      break;
 800b760:	e020      	b.n	800b7a4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b768:	4619      	mov	r1, r3
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f000 fa52 	bl	800bc14 <USBD_StdItfReq>
 800b770:	4603      	mov	r3, r0
 800b772:	73fb      	strb	r3, [r7, #15]
      break;
 800b774:	e016      	b.n	800b7a4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b77c:	4619      	mov	r1, r3
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 fa91 	bl	800bca6 <USBD_StdEPReq>
 800b784:	4603      	mov	r3, r0
 800b786:	73fb      	strb	r3, [r7, #15]
      break;
 800b788:	e00c      	b.n	800b7a4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b790:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b794:	b2db      	uxtb	r3, r3
 800b796:	4619      	mov	r1, r3
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f001 fbcb 	bl	800cf34 <USBD_LL_StallEP>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	73fb      	strb	r3, [r7, #15]
      break;
 800b7a2:	bf00      	nop
  }

  return ret;
 800b7a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3710      	adds	r7, #16
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}

0800b7ae <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b7ae:	b580      	push	{r7, lr}
 800b7b0:	b086      	sub	sp, #24
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	60f8      	str	r0, [r7, #12]
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	607a      	str	r2, [r7, #4]
 800b7ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b7bc:	7afb      	ldrb	r3, [r7, #11]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d138      	bne.n	800b834 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b7c8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b7d0:	2b03      	cmp	r3, #3
 800b7d2:	d14a      	bne.n	800b86a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	689a      	ldr	r2, [r3, #8]
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	68db      	ldr	r3, [r3, #12]
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d913      	bls.n	800b808 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	689a      	ldr	r2, [r3, #8]
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	1ad2      	subs	r2, r2, r3
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	68da      	ldr	r2, [r3, #12]
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	bf28      	it	cs
 800b7fa:	4613      	movcs	r3, r2
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	6879      	ldr	r1, [r7, #4]
 800b800:	68f8      	ldr	r0, [r7, #12]
 800b802:	f000 ffc5 	bl	800c790 <USBD_CtlContinueRx>
 800b806:	e030      	b.n	800b86a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	2b03      	cmp	r3, #3
 800b812:	d10b      	bne.n	800b82c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b81a:	691b      	ldr	r3, [r3, #16]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d005      	beq.n	800b82c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b826:	691b      	ldr	r3, [r3, #16]
 800b828:	68f8      	ldr	r0, [r7, #12]
 800b82a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b82c:	68f8      	ldr	r0, [r7, #12]
 800b82e:	f000 ffc0 	bl	800c7b2 <USBD_CtlSendStatus>
 800b832:	e01a      	b.n	800b86a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b83a:	b2db      	uxtb	r3, r3
 800b83c:	2b03      	cmp	r3, #3
 800b83e:	d114      	bne.n	800b86a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b846:	699b      	ldr	r3, [r3, #24]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d00e      	beq.n	800b86a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b852:	699b      	ldr	r3, [r3, #24]
 800b854:	7afa      	ldrb	r2, [r7, #11]
 800b856:	4611      	mov	r1, r2
 800b858:	68f8      	ldr	r0, [r7, #12]
 800b85a:	4798      	blx	r3
 800b85c:	4603      	mov	r3, r0
 800b85e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b860:	7dfb      	ldrb	r3, [r7, #23]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d001      	beq.n	800b86a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b866:	7dfb      	ldrb	r3, [r7, #23]
 800b868:	e000      	b.n	800b86c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b86a:	2300      	movs	r3, #0
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3718      	adds	r7, #24
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b086      	sub	sp, #24
 800b878:	af00      	add	r7, sp, #0
 800b87a:	60f8      	str	r0, [r7, #12]
 800b87c:	460b      	mov	r3, r1
 800b87e:	607a      	str	r2, [r7, #4]
 800b880:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b882:	7afb      	ldrb	r3, [r7, #11]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d16b      	bne.n	800b960 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	3314      	adds	r3, #20
 800b88c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b894:	2b02      	cmp	r3, #2
 800b896:	d156      	bne.n	800b946 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	689a      	ldr	r2, [r3, #8]
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	68db      	ldr	r3, [r3, #12]
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d914      	bls.n	800b8ce <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	689a      	ldr	r2, [r3, #8]
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	68db      	ldr	r3, [r3, #12]
 800b8ac:	1ad2      	subs	r2, r2, r3
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	6879      	ldr	r1, [r7, #4]
 800b8ba:	68f8      	ldr	r0, [r7, #12]
 800b8bc:	f000 ff3a 	bl	800c734 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	2100      	movs	r1, #0
 800b8c6:	68f8      	ldr	r0, [r7, #12]
 800b8c8:	f001 fbdf 	bl	800d08a <USBD_LL_PrepareReceive>
 800b8cc:	e03b      	b.n	800b946 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	68da      	ldr	r2, [r3, #12]
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	689b      	ldr	r3, [r3, #8]
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d11c      	bne.n	800b914 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	685a      	ldr	r2, [r3, #4]
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d316      	bcc.n	800b914 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	685a      	ldr	r2, [r3, #4]
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d20f      	bcs.n	800b914 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	2100      	movs	r1, #0
 800b8f8:	68f8      	ldr	r0, [r7, #12]
 800b8fa:	f000 ff1b 	bl	800c734 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2200      	movs	r2, #0
 800b902:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b906:	2300      	movs	r3, #0
 800b908:	2200      	movs	r2, #0
 800b90a:	2100      	movs	r1, #0
 800b90c:	68f8      	ldr	r0, [r7, #12]
 800b90e:	f001 fbbc 	bl	800d08a <USBD_LL_PrepareReceive>
 800b912:	e018      	b.n	800b946 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	2b03      	cmp	r3, #3
 800b91e:	d10b      	bne.n	800b938 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b926:	68db      	ldr	r3, [r3, #12]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d005      	beq.n	800b938 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b932:	68db      	ldr	r3, [r3, #12]
 800b934:	68f8      	ldr	r0, [r7, #12]
 800b936:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b938:	2180      	movs	r1, #128	; 0x80
 800b93a:	68f8      	ldr	r0, [r7, #12]
 800b93c:	f001 fafa 	bl	800cf34 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	f000 ff49 	bl	800c7d8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d122      	bne.n	800b996 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b950:	68f8      	ldr	r0, [r7, #12]
 800b952:	f7ff fe98 	bl	800b686 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2200      	movs	r2, #0
 800b95a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b95e:	e01a      	b.n	800b996 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b966:	b2db      	uxtb	r3, r3
 800b968:	2b03      	cmp	r3, #3
 800b96a:	d114      	bne.n	800b996 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b972:	695b      	ldr	r3, [r3, #20]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d00e      	beq.n	800b996 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b97e:	695b      	ldr	r3, [r3, #20]
 800b980:	7afa      	ldrb	r2, [r7, #11]
 800b982:	4611      	mov	r1, r2
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	4798      	blx	r3
 800b988:	4603      	mov	r3, r0
 800b98a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b98c:	7dfb      	ldrb	r3, [r7, #23]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d001      	beq.n	800b996 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b992:	7dfb      	ldrb	r3, [r7, #23]
 800b994:	e000      	b.n	800b998 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b996:	2300      	movs	r3, #0
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3718      	adds	r7, #24
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d101      	bne.n	800b9d4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b9d0:	2303      	movs	r3, #3
 800b9d2:	e02f      	b.n	800ba34 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d00f      	beq.n	800b9fe <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9e4:	685b      	ldr	r3, [r3, #4]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d009      	beq.n	800b9fe <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	6852      	ldr	r2, [r2, #4]
 800b9f6:	b2d2      	uxtb	r2, r2
 800b9f8:	4611      	mov	r1, r2
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b9fe:	2340      	movs	r3, #64	; 0x40
 800ba00:	2200      	movs	r2, #0
 800ba02:	2100      	movs	r1, #0
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f001 fa50 	bl	800ceaa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2240      	movs	r2, #64	; 0x40
 800ba16:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba1a:	2340      	movs	r3, #64	; 0x40
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	2180      	movs	r1, #128	; 0x80
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f001 fa42 	bl	800ceaa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2240      	movs	r2, #64	; 0x40
 800ba30:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ba32:	2300      	movs	r3, #0
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3708      	adds	r7, #8
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b083      	sub	sp, #12
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	460b      	mov	r3, r1
 800ba46:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	78fa      	ldrb	r2, [r7, #3]
 800ba4c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ba4e:	2300      	movs	r3, #0
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	370c      	adds	r7, #12
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr

0800ba5c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b083      	sub	sp, #12
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba6a:	b2da      	uxtb	r2, r3
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2204      	movs	r2, #4
 800ba76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ba7a:	2300      	movs	r3, #0
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	370c      	adds	r7, #12
 800ba80:	46bd      	mov	sp, r7
 800ba82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba86:	4770      	bx	lr

0800ba88 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b083      	sub	sp, #12
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	2b04      	cmp	r3, #4
 800ba9a:	d106      	bne.n	800baaa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800baa2:	b2da      	uxtb	r2, r3
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800baaa:	2300      	movs	r3, #0
}
 800baac:	4618      	mov	r0, r3
 800baae:	370c      	adds	r7, #12
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr

0800bab8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d101      	bne.n	800bace <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800baca:	2303      	movs	r3, #3
 800bacc:	e012      	b.n	800baf4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	2b03      	cmp	r3, #3
 800bad8:	d10b      	bne.n	800baf2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bae0:	69db      	ldr	r3, [r3, #28]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d005      	beq.n	800baf2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baec:	69db      	ldr	r3, [r3, #28]
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800baf2:	2300      	movs	r3, #0
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3708      	adds	r7, #8
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b087      	sub	sp, #28
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	3301      	adds	r3, #1
 800bb12:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	781b      	ldrb	r3, [r3, #0]
 800bb18:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bb1a:	8a3b      	ldrh	r3, [r7, #16]
 800bb1c:	021b      	lsls	r3, r3, #8
 800bb1e:	b21a      	sxth	r2, r3
 800bb20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bb24:	4313      	orrs	r3, r2
 800bb26:	b21b      	sxth	r3, r3
 800bb28:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bb2a:	89fb      	ldrh	r3, [r7, #14]
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	371c      	adds	r7, #28
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr

0800bb38 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b084      	sub	sp, #16
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb42:	2300      	movs	r3, #0
 800bb44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	781b      	ldrb	r3, [r3, #0]
 800bb4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb4e:	2b40      	cmp	r3, #64	; 0x40
 800bb50:	d005      	beq.n	800bb5e <USBD_StdDevReq+0x26>
 800bb52:	2b40      	cmp	r3, #64	; 0x40
 800bb54:	d853      	bhi.n	800bbfe <USBD_StdDevReq+0xc6>
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d00b      	beq.n	800bb72 <USBD_StdDevReq+0x3a>
 800bb5a:	2b20      	cmp	r3, #32
 800bb5c:	d14f      	bne.n	800bbfe <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb64:	689b      	ldr	r3, [r3, #8]
 800bb66:	6839      	ldr	r1, [r7, #0]
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	4798      	blx	r3
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	73fb      	strb	r3, [r7, #15]
      break;
 800bb70:	e04a      	b.n	800bc08 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	785b      	ldrb	r3, [r3, #1]
 800bb76:	2b09      	cmp	r3, #9
 800bb78:	d83b      	bhi.n	800bbf2 <USBD_StdDevReq+0xba>
 800bb7a:	a201      	add	r2, pc, #4	; (adr r2, 800bb80 <USBD_StdDevReq+0x48>)
 800bb7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb80:	0800bbd5 	.word	0x0800bbd5
 800bb84:	0800bbe9 	.word	0x0800bbe9
 800bb88:	0800bbf3 	.word	0x0800bbf3
 800bb8c:	0800bbdf 	.word	0x0800bbdf
 800bb90:	0800bbf3 	.word	0x0800bbf3
 800bb94:	0800bbb3 	.word	0x0800bbb3
 800bb98:	0800bba9 	.word	0x0800bba9
 800bb9c:	0800bbf3 	.word	0x0800bbf3
 800bba0:	0800bbcb 	.word	0x0800bbcb
 800bba4:	0800bbbd 	.word	0x0800bbbd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bba8:	6839      	ldr	r1, [r7, #0]
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 f9de 	bl	800bf6c <USBD_GetDescriptor>
          break;
 800bbb0:	e024      	b.n	800bbfc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bbb2:	6839      	ldr	r1, [r7, #0]
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 fb6d 	bl	800c294 <USBD_SetAddress>
          break;
 800bbba:	e01f      	b.n	800bbfc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bbbc:	6839      	ldr	r1, [r7, #0]
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 fbac 	bl	800c31c <USBD_SetConfig>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	73fb      	strb	r3, [r7, #15]
          break;
 800bbc8:	e018      	b.n	800bbfc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bbca:	6839      	ldr	r1, [r7, #0]
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 fc4b 	bl	800c468 <USBD_GetConfig>
          break;
 800bbd2:	e013      	b.n	800bbfc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bbd4:	6839      	ldr	r1, [r7, #0]
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 fc7c 	bl	800c4d4 <USBD_GetStatus>
          break;
 800bbdc:	e00e      	b.n	800bbfc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bbde:	6839      	ldr	r1, [r7, #0]
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 fcab 	bl	800c53c <USBD_SetFeature>
          break;
 800bbe6:	e009      	b.n	800bbfc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bbe8:	6839      	ldr	r1, [r7, #0]
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 fcba 	bl	800c564 <USBD_ClrFeature>
          break;
 800bbf0:	e004      	b.n	800bbfc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800bbf2:	6839      	ldr	r1, [r7, #0]
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f000 fd11 	bl	800c61c <USBD_CtlError>
          break;
 800bbfa:	bf00      	nop
      }
      break;
 800bbfc:	e004      	b.n	800bc08 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800bbfe:	6839      	ldr	r1, [r7, #0]
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 fd0b 	bl	800c61c <USBD_CtlError>
      break;
 800bc06:	bf00      	nop
  }

  return ret;
 800bc08:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3710      	adds	r7, #16
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	bf00      	nop

0800bc14 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc2a:	2b40      	cmp	r3, #64	; 0x40
 800bc2c:	d005      	beq.n	800bc3a <USBD_StdItfReq+0x26>
 800bc2e:	2b40      	cmp	r3, #64	; 0x40
 800bc30:	d82f      	bhi.n	800bc92 <USBD_StdItfReq+0x7e>
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d001      	beq.n	800bc3a <USBD_StdItfReq+0x26>
 800bc36:	2b20      	cmp	r3, #32
 800bc38:	d12b      	bne.n	800bc92 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	3b01      	subs	r3, #1
 800bc44:	2b02      	cmp	r3, #2
 800bc46:	d81d      	bhi.n	800bc84 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	889b      	ldrh	r3, [r3, #4]
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d813      	bhi.n	800bc7a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc58:	689b      	ldr	r3, [r3, #8]
 800bc5a:	6839      	ldr	r1, [r7, #0]
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	4798      	blx	r3
 800bc60:	4603      	mov	r3, r0
 800bc62:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	88db      	ldrh	r3, [r3, #6]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d110      	bne.n	800bc8e <USBD_StdItfReq+0x7a>
 800bc6c:	7bfb      	ldrb	r3, [r7, #15]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d10d      	bne.n	800bc8e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 fd9d 	bl	800c7b2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bc78:	e009      	b.n	800bc8e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800bc7a:	6839      	ldr	r1, [r7, #0]
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f000 fccd 	bl	800c61c <USBD_CtlError>
          break;
 800bc82:	e004      	b.n	800bc8e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800bc84:	6839      	ldr	r1, [r7, #0]
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f000 fcc8 	bl	800c61c <USBD_CtlError>
          break;
 800bc8c:	e000      	b.n	800bc90 <USBD_StdItfReq+0x7c>
          break;
 800bc8e:	bf00      	nop
      }
      break;
 800bc90:	e004      	b.n	800bc9c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bc92:	6839      	ldr	r1, [r7, #0]
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 fcc1 	bl	800c61c <USBD_CtlError>
      break;
 800bc9a:	bf00      	nop
  }

  return ret;
 800bc9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3710      	adds	r7, #16
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}

0800bca6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b084      	sub	sp, #16
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
 800bcae:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	889b      	ldrh	r3, [r3, #4]
 800bcb8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bcc2:	2b40      	cmp	r3, #64	; 0x40
 800bcc4:	d007      	beq.n	800bcd6 <USBD_StdEPReq+0x30>
 800bcc6:	2b40      	cmp	r3, #64	; 0x40
 800bcc8:	f200 8145 	bhi.w	800bf56 <USBD_StdEPReq+0x2b0>
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d00c      	beq.n	800bcea <USBD_StdEPReq+0x44>
 800bcd0:	2b20      	cmp	r3, #32
 800bcd2:	f040 8140 	bne.w	800bf56 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcdc:	689b      	ldr	r3, [r3, #8]
 800bcde:	6839      	ldr	r1, [r7, #0]
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	4798      	blx	r3
 800bce4:	4603      	mov	r3, r0
 800bce6:	73fb      	strb	r3, [r7, #15]
      break;
 800bce8:	e13a      	b.n	800bf60 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	785b      	ldrb	r3, [r3, #1]
 800bcee:	2b03      	cmp	r3, #3
 800bcf0:	d007      	beq.n	800bd02 <USBD_StdEPReq+0x5c>
 800bcf2:	2b03      	cmp	r3, #3
 800bcf4:	f300 8129 	bgt.w	800bf4a <USBD_StdEPReq+0x2a4>
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d07f      	beq.n	800bdfc <USBD_StdEPReq+0x156>
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d03c      	beq.n	800bd7a <USBD_StdEPReq+0xd4>
 800bd00:	e123      	b.n	800bf4a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd08:	b2db      	uxtb	r3, r3
 800bd0a:	2b02      	cmp	r3, #2
 800bd0c:	d002      	beq.n	800bd14 <USBD_StdEPReq+0x6e>
 800bd0e:	2b03      	cmp	r3, #3
 800bd10:	d016      	beq.n	800bd40 <USBD_StdEPReq+0x9a>
 800bd12:	e02c      	b.n	800bd6e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd14:	7bbb      	ldrb	r3, [r7, #14]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d00d      	beq.n	800bd36 <USBD_StdEPReq+0x90>
 800bd1a:	7bbb      	ldrb	r3, [r7, #14]
 800bd1c:	2b80      	cmp	r3, #128	; 0x80
 800bd1e:	d00a      	beq.n	800bd36 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd20:	7bbb      	ldrb	r3, [r7, #14]
 800bd22:	4619      	mov	r1, r3
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f001 f905 	bl	800cf34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd2a:	2180      	movs	r1, #128	; 0x80
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f001 f901 	bl	800cf34 <USBD_LL_StallEP>
 800bd32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bd34:	e020      	b.n	800bd78 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bd36:	6839      	ldr	r1, [r7, #0]
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f000 fc6f 	bl	800c61c <USBD_CtlError>
              break;
 800bd3e:	e01b      	b.n	800bd78 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	885b      	ldrh	r3, [r3, #2]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d10e      	bne.n	800bd66 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bd48:	7bbb      	ldrb	r3, [r7, #14]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d00b      	beq.n	800bd66 <USBD_StdEPReq+0xc0>
 800bd4e:	7bbb      	ldrb	r3, [r7, #14]
 800bd50:	2b80      	cmp	r3, #128	; 0x80
 800bd52:	d008      	beq.n	800bd66 <USBD_StdEPReq+0xc0>
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	88db      	ldrh	r3, [r3, #6]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d104      	bne.n	800bd66 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd5c:	7bbb      	ldrb	r3, [r7, #14]
 800bd5e:	4619      	mov	r1, r3
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f001 f8e7 	bl	800cf34 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f000 fd23 	bl	800c7b2 <USBD_CtlSendStatus>

              break;
 800bd6c:	e004      	b.n	800bd78 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bd6e:	6839      	ldr	r1, [r7, #0]
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 fc53 	bl	800c61c <USBD_CtlError>
              break;
 800bd76:	bf00      	nop
          }
          break;
 800bd78:	e0ec      	b.n	800bf54 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd80:	b2db      	uxtb	r3, r3
 800bd82:	2b02      	cmp	r3, #2
 800bd84:	d002      	beq.n	800bd8c <USBD_StdEPReq+0xe6>
 800bd86:	2b03      	cmp	r3, #3
 800bd88:	d016      	beq.n	800bdb8 <USBD_StdEPReq+0x112>
 800bd8a:	e030      	b.n	800bdee <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd8c:	7bbb      	ldrb	r3, [r7, #14]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d00d      	beq.n	800bdae <USBD_StdEPReq+0x108>
 800bd92:	7bbb      	ldrb	r3, [r7, #14]
 800bd94:	2b80      	cmp	r3, #128	; 0x80
 800bd96:	d00a      	beq.n	800bdae <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd98:	7bbb      	ldrb	r3, [r7, #14]
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f001 f8c9 	bl	800cf34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bda2:	2180      	movs	r1, #128	; 0x80
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f001 f8c5 	bl	800cf34 <USBD_LL_StallEP>
 800bdaa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bdac:	e025      	b.n	800bdfa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800bdae:	6839      	ldr	r1, [r7, #0]
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 fc33 	bl	800c61c <USBD_CtlError>
              break;
 800bdb6:	e020      	b.n	800bdfa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	885b      	ldrh	r3, [r3, #2]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d11b      	bne.n	800bdf8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bdc0:	7bbb      	ldrb	r3, [r7, #14]
 800bdc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d004      	beq.n	800bdd4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bdca:	7bbb      	ldrb	r3, [r7, #14]
 800bdcc:	4619      	mov	r1, r3
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f001 f8cf 	bl	800cf72 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f000 fcec 	bl	800c7b2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bde0:	689b      	ldr	r3, [r3, #8]
 800bde2:	6839      	ldr	r1, [r7, #0]
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	4798      	blx	r3
 800bde8:	4603      	mov	r3, r0
 800bdea:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800bdec:	e004      	b.n	800bdf8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800bdee:	6839      	ldr	r1, [r7, #0]
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f000 fc13 	bl	800c61c <USBD_CtlError>
              break;
 800bdf6:	e000      	b.n	800bdfa <USBD_StdEPReq+0x154>
              break;
 800bdf8:	bf00      	nop
          }
          break;
 800bdfa:	e0ab      	b.n	800bf54 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be02:	b2db      	uxtb	r3, r3
 800be04:	2b02      	cmp	r3, #2
 800be06:	d002      	beq.n	800be0e <USBD_StdEPReq+0x168>
 800be08:	2b03      	cmp	r3, #3
 800be0a:	d032      	beq.n	800be72 <USBD_StdEPReq+0x1cc>
 800be0c:	e097      	b.n	800bf3e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be0e:	7bbb      	ldrb	r3, [r7, #14]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d007      	beq.n	800be24 <USBD_StdEPReq+0x17e>
 800be14:	7bbb      	ldrb	r3, [r7, #14]
 800be16:	2b80      	cmp	r3, #128	; 0x80
 800be18:	d004      	beq.n	800be24 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800be1a:	6839      	ldr	r1, [r7, #0]
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f000 fbfd 	bl	800c61c <USBD_CtlError>
                break;
 800be22:	e091      	b.n	800bf48 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	da0b      	bge.n	800be44 <USBD_StdEPReq+0x19e>
 800be2c:	7bbb      	ldrb	r3, [r7, #14]
 800be2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be32:	4613      	mov	r3, r2
 800be34:	009b      	lsls	r3, r3, #2
 800be36:	4413      	add	r3, r2
 800be38:	009b      	lsls	r3, r3, #2
 800be3a:	3310      	adds	r3, #16
 800be3c:	687a      	ldr	r2, [r7, #4]
 800be3e:	4413      	add	r3, r2
 800be40:	3304      	adds	r3, #4
 800be42:	e00b      	b.n	800be5c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800be44:	7bbb      	ldrb	r3, [r7, #14]
 800be46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be4a:	4613      	mov	r3, r2
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	4413      	add	r3, r2
 800be50:	009b      	lsls	r3, r3, #2
 800be52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800be56:	687a      	ldr	r2, [r7, #4]
 800be58:	4413      	add	r3, r2
 800be5a:	3304      	adds	r3, #4
 800be5c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	2200      	movs	r2, #0
 800be62:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	2202      	movs	r2, #2
 800be68:	4619      	mov	r1, r3
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 fc47 	bl	800c6fe <USBD_CtlSendData>
              break;
 800be70:	e06a      	b.n	800bf48 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800be72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be76:	2b00      	cmp	r3, #0
 800be78:	da11      	bge.n	800be9e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800be7a:	7bbb      	ldrb	r3, [r7, #14]
 800be7c:	f003 020f 	and.w	r2, r3, #15
 800be80:	6879      	ldr	r1, [r7, #4]
 800be82:	4613      	mov	r3, r2
 800be84:	009b      	lsls	r3, r3, #2
 800be86:	4413      	add	r3, r2
 800be88:	009b      	lsls	r3, r3, #2
 800be8a:	440b      	add	r3, r1
 800be8c:	3324      	adds	r3, #36	; 0x24
 800be8e:	881b      	ldrh	r3, [r3, #0]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d117      	bne.n	800bec4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800be94:	6839      	ldr	r1, [r7, #0]
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 fbc0 	bl	800c61c <USBD_CtlError>
                  break;
 800be9c:	e054      	b.n	800bf48 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800be9e:	7bbb      	ldrb	r3, [r7, #14]
 800bea0:	f003 020f 	and.w	r2, r3, #15
 800bea4:	6879      	ldr	r1, [r7, #4]
 800bea6:	4613      	mov	r3, r2
 800bea8:	009b      	lsls	r3, r3, #2
 800beaa:	4413      	add	r3, r2
 800beac:	009b      	lsls	r3, r3, #2
 800beae:	440b      	add	r3, r1
 800beb0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800beb4:	881b      	ldrh	r3, [r3, #0]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d104      	bne.n	800bec4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800beba:	6839      	ldr	r1, [r7, #0]
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 fbad 	bl	800c61c <USBD_CtlError>
                  break;
 800bec2:	e041      	b.n	800bf48 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bec4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	da0b      	bge.n	800bee4 <USBD_StdEPReq+0x23e>
 800becc:	7bbb      	ldrb	r3, [r7, #14]
 800bece:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bed2:	4613      	mov	r3, r2
 800bed4:	009b      	lsls	r3, r3, #2
 800bed6:	4413      	add	r3, r2
 800bed8:	009b      	lsls	r3, r3, #2
 800beda:	3310      	adds	r3, #16
 800bedc:	687a      	ldr	r2, [r7, #4]
 800bede:	4413      	add	r3, r2
 800bee0:	3304      	adds	r3, #4
 800bee2:	e00b      	b.n	800befc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bee4:	7bbb      	ldrb	r3, [r7, #14]
 800bee6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800beea:	4613      	mov	r3, r2
 800beec:	009b      	lsls	r3, r3, #2
 800beee:	4413      	add	r3, r2
 800bef0:	009b      	lsls	r3, r3, #2
 800bef2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bef6:	687a      	ldr	r2, [r7, #4]
 800bef8:	4413      	add	r3, r2
 800befa:	3304      	adds	r3, #4
 800befc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800befe:	7bbb      	ldrb	r3, [r7, #14]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d002      	beq.n	800bf0a <USBD_StdEPReq+0x264>
 800bf04:	7bbb      	ldrb	r3, [r7, #14]
 800bf06:	2b80      	cmp	r3, #128	; 0x80
 800bf08:	d103      	bne.n	800bf12 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	601a      	str	r2, [r3, #0]
 800bf10:	e00e      	b.n	800bf30 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bf12:	7bbb      	ldrb	r3, [r7, #14]
 800bf14:	4619      	mov	r1, r3
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f001 f84a 	bl	800cfb0 <USBD_LL_IsStallEP>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d003      	beq.n	800bf2a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	2201      	movs	r2, #1
 800bf26:	601a      	str	r2, [r3, #0]
 800bf28:	e002      	b.n	800bf30 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	2202      	movs	r2, #2
 800bf34:	4619      	mov	r1, r3
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f000 fbe1 	bl	800c6fe <USBD_CtlSendData>
              break;
 800bf3c:	e004      	b.n	800bf48 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800bf3e:	6839      	ldr	r1, [r7, #0]
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 fb6b 	bl	800c61c <USBD_CtlError>
              break;
 800bf46:	bf00      	nop
          }
          break;
 800bf48:	e004      	b.n	800bf54 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800bf4a:	6839      	ldr	r1, [r7, #0]
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f000 fb65 	bl	800c61c <USBD_CtlError>
          break;
 800bf52:	bf00      	nop
      }
      break;
 800bf54:	e004      	b.n	800bf60 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800bf56:	6839      	ldr	r1, [r7, #0]
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 fb5f 	bl	800c61c <USBD_CtlError>
      break;
 800bf5e:	bf00      	nop
  }

  return ret;
 800bf60:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3710      	adds	r7, #16
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
	...

0800bf6c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bf76:	2300      	movs	r3, #0
 800bf78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	885b      	ldrh	r3, [r3, #2]
 800bf86:	0a1b      	lsrs	r3, r3, #8
 800bf88:	b29b      	uxth	r3, r3
 800bf8a:	3b01      	subs	r3, #1
 800bf8c:	2b0e      	cmp	r3, #14
 800bf8e:	f200 8152 	bhi.w	800c236 <USBD_GetDescriptor+0x2ca>
 800bf92:	a201      	add	r2, pc, #4	; (adr r2, 800bf98 <USBD_GetDescriptor+0x2c>)
 800bf94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf98:	0800c009 	.word	0x0800c009
 800bf9c:	0800c021 	.word	0x0800c021
 800bfa0:	0800c061 	.word	0x0800c061
 800bfa4:	0800c237 	.word	0x0800c237
 800bfa8:	0800c237 	.word	0x0800c237
 800bfac:	0800c1d7 	.word	0x0800c1d7
 800bfb0:	0800c203 	.word	0x0800c203
 800bfb4:	0800c237 	.word	0x0800c237
 800bfb8:	0800c237 	.word	0x0800c237
 800bfbc:	0800c237 	.word	0x0800c237
 800bfc0:	0800c237 	.word	0x0800c237
 800bfc4:	0800c237 	.word	0x0800c237
 800bfc8:	0800c237 	.word	0x0800c237
 800bfcc:	0800c237 	.word	0x0800c237
 800bfd0:	0800bfd5 	.word	0x0800bfd5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfda:	69db      	ldr	r3, [r3, #28]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d00b      	beq.n	800bff8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfe6:	69db      	ldr	r3, [r3, #28]
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	7c12      	ldrb	r2, [r2, #16]
 800bfec:	f107 0108 	add.w	r1, r7, #8
 800bff0:	4610      	mov	r0, r2
 800bff2:	4798      	blx	r3
 800bff4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bff6:	e126      	b.n	800c246 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bff8:	6839      	ldr	r1, [r7, #0]
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f000 fb0e 	bl	800c61c <USBD_CtlError>
        err++;
 800c000:	7afb      	ldrb	r3, [r7, #11]
 800c002:	3301      	adds	r3, #1
 800c004:	72fb      	strb	r3, [r7, #11]
      break;
 800c006:	e11e      	b.n	800c246 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	7c12      	ldrb	r2, [r2, #16]
 800c014:	f107 0108 	add.w	r1, r7, #8
 800c018:	4610      	mov	r0, r2
 800c01a:	4798      	blx	r3
 800c01c:	60f8      	str	r0, [r7, #12]
      break;
 800c01e:	e112      	b.n	800c246 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	7c1b      	ldrb	r3, [r3, #16]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d10d      	bne.n	800c044 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c030:	f107 0208 	add.w	r2, r7, #8
 800c034:	4610      	mov	r0, r2
 800c036:	4798      	blx	r3
 800c038:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	3301      	adds	r3, #1
 800c03e:	2202      	movs	r2, #2
 800c040:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c042:	e100      	b.n	800c246 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c04c:	f107 0208 	add.w	r2, r7, #8
 800c050:	4610      	mov	r0, r2
 800c052:	4798      	blx	r3
 800c054:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	3301      	adds	r3, #1
 800c05a:	2202      	movs	r2, #2
 800c05c:	701a      	strb	r2, [r3, #0]
      break;
 800c05e:	e0f2      	b.n	800c246 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	885b      	ldrh	r3, [r3, #2]
 800c064:	b2db      	uxtb	r3, r3
 800c066:	2b05      	cmp	r3, #5
 800c068:	f200 80ac 	bhi.w	800c1c4 <USBD_GetDescriptor+0x258>
 800c06c:	a201      	add	r2, pc, #4	; (adr r2, 800c074 <USBD_GetDescriptor+0x108>)
 800c06e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c072:	bf00      	nop
 800c074:	0800c08d 	.word	0x0800c08d
 800c078:	0800c0c1 	.word	0x0800c0c1
 800c07c:	0800c0f5 	.word	0x0800c0f5
 800c080:	0800c129 	.word	0x0800c129
 800c084:	0800c15d 	.word	0x0800c15d
 800c088:	0800c191 	.word	0x0800c191
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c092:	685b      	ldr	r3, [r3, #4]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d00b      	beq.n	800c0b0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	687a      	ldr	r2, [r7, #4]
 800c0a2:	7c12      	ldrb	r2, [r2, #16]
 800c0a4:	f107 0108 	add.w	r1, r7, #8
 800c0a8:	4610      	mov	r0, r2
 800c0aa:	4798      	blx	r3
 800c0ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0ae:	e091      	b.n	800c1d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c0b0:	6839      	ldr	r1, [r7, #0]
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 fab2 	bl	800c61c <USBD_CtlError>
            err++;
 800c0b8:	7afb      	ldrb	r3, [r7, #11]
 800c0ba:	3301      	adds	r3, #1
 800c0bc:	72fb      	strb	r3, [r7, #11]
          break;
 800c0be:	e089      	b.n	800c1d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0c6:	689b      	ldr	r3, [r3, #8]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d00b      	beq.n	800c0e4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0d2:	689b      	ldr	r3, [r3, #8]
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	7c12      	ldrb	r2, [r2, #16]
 800c0d8:	f107 0108 	add.w	r1, r7, #8
 800c0dc:	4610      	mov	r0, r2
 800c0de:	4798      	blx	r3
 800c0e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0e2:	e077      	b.n	800c1d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c0e4:	6839      	ldr	r1, [r7, #0]
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 fa98 	bl	800c61c <USBD_CtlError>
            err++;
 800c0ec:	7afb      	ldrb	r3, [r7, #11]
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	72fb      	strb	r3, [r7, #11]
          break;
 800c0f2:	e06f      	b.n	800c1d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d00b      	beq.n	800c118 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c106:	68db      	ldr	r3, [r3, #12]
 800c108:	687a      	ldr	r2, [r7, #4]
 800c10a:	7c12      	ldrb	r2, [r2, #16]
 800c10c:	f107 0108 	add.w	r1, r7, #8
 800c110:	4610      	mov	r0, r2
 800c112:	4798      	blx	r3
 800c114:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c116:	e05d      	b.n	800c1d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c118:	6839      	ldr	r1, [r7, #0]
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f000 fa7e 	bl	800c61c <USBD_CtlError>
            err++;
 800c120:	7afb      	ldrb	r3, [r7, #11]
 800c122:	3301      	adds	r3, #1
 800c124:	72fb      	strb	r3, [r7, #11]
          break;
 800c126:	e055      	b.n	800c1d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c12e:	691b      	ldr	r3, [r3, #16]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d00b      	beq.n	800c14c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c13a:	691b      	ldr	r3, [r3, #16]
 800c13c:	687a      	ldr	r2, [r7, #4]
 800c13e:	7c12      	ldrb	r2, [r2, #16]
 800c140:	f107 0108 	add.w	r1, r7, #8
 800c144:	4610      	mov	r0, r2
 800c146:	4798      	blx	r3
 800c148:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c14a:	e043      	b.n	800c1d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c14c:	6839      	ldr	r1, [r7, #0]
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 fa64 	bl	800c61c <USBD_CtlError>
            err++;
 800c154:	7afb      	ldrb	r3, [r7, #11]
 800c156:	3301      	adds	r3, #1
 800c158:	72fb      	strb	r3, [r7, #11]
          break;
 800c15a:	e03b      	b.n	800c1d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c162:	695b      	ldr	r3, [r3, #20]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d00b      	beq.n	800c180 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c16e:	695b      	ldr	r3, [r3, #20]
 800c170:	687a      	ldr	r2, [r7, #4]
 800c172:	7c12      	ldrb	r2, [r2, #16]
 800c174:	f107 0108 	add.w	r1, r7, #8
 800c178:	4610      	mov	r0, r2
 800c17a:	4798      	blx	r3
 800c17c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c17e:	e029      	b.n	800c1d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c180:	6839      	ldr	r1, [r7, #0]
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 fa4a 	bl	800c61c <USBD_CtlError>
            err++;
 800c188:	7afb      	ldrb	r3, [r7, #11]
 800c18a:	3301      	adds	r3, #1
 800c18c:	72fb      	strb	r3, [r7, #11]
          break;
 800c18e:	e021      	b.n	800c1d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c196:	699b      	ldr	r3, [r3, #24]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d00b      	beq.n	800c1b4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1a2:	699b      	ldr	r3, [r3, #24]
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	7c12      	ldrb	r2, [r2, #16]
 800c1a8:	f107 0108 	add.w	r1, r7, #8
 800c1ac:	4610      	mov	r0, r2
 800c1ae:	4798      	blx	r3
 800c1b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1b2:	e00f      	b.n	800c1d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c1b4:	6839      	ldr	r1, [r7, #0]
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f000 fa30 	bl	800c61c <USBD_CtlError>
            err++;
 800c1bc:	7afb      	ldrb	r3, [r7, #11]
 800c1be:	3301      	adds	r3, #1
 800c1c0:	72fb      	strb	r3, [r7, #11]
          break;
 800c1c2:	e007      	b.n	800c1d4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c1c4:	6839      	ldr	r1, [r7, #0]
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f000 fa28 	bl	800c61c <USBD_CtlError>
          err++;
 800c1cc:	7afb      	ldrb	r3, [r7, #11]
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c1d2:	bf00      	nop
      }
      break;
 800c1d4:	e037      	b.n	800c246 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	7c1b      	ldrb	r3, [r3, #16]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d109      	bne.n	800c1f2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1e6:	f107 0208 	add.w	r2, r7, #8
 800c1ea:	4610      	mov	r0, r2
 800c1ec:	4798      	blx	r3
 800c1ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c1f0:	e029      	b.n	800c246 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c1f2:	6839      	ldr	r1, [r7, #0]
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f000 fa11 	bl	800c61c <USBD_CtlError>
        err++;
 800c1fa:	7afb      	ldrb	r3, [r7, #11]
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	72fb      	strb	r3, [r7, #11]
      break;
 800c200:	e021      	b.n	800c246 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	7c1b      	ldrb	r3, [r3, #16]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d10d      	bne.n	800c226 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c212:	f107 0208 	add.w	r2, r7, #8
 800c216:	4610      	mov	r0, r2
 800c218:	4798      	blx	r3
 800c21a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	3301      	adds	r3, #1
 800c220:	2207      	movs	r2, #7
 800c222:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c224:	e00f      	b.n	800c246 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c226:	6839      	ldr	r1, [r7, #0]
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 f9f7 	bl	800c61c <USBD_CtlError>
        err++;
 800c22e:	7afb      	ldrb	r3, [r7, #11]
 800c230:	3301      	adds	r3, #1
 800c232:	72fb      	strb	r3, [r7, #11]
      break;
 800c234:	e007      	b.n	800c246 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c236:	6839      	ldr	r1, [r7, #0]
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 f9ef 	bl	800c61c <USBD_CtlError>
      err++;
 800c23e:	7afb      	ldrb	r3, [r7, #11]
 800c240:	3301      	adds	r3, #1
 800c242:	72fb      	strb	r3, [r7, #11]
      break;
 800c244:	bf00      	nop
  }

  if (err != 0U)
 800c246:	7afb      	ldrb	r3, [r7, #11]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d11e      	bne.n	800c28a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	88db      	ldrh	r3, [r3, #6]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d016      	beq.n	800c282 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c254:	893b      	ldrh	r3, [r7, #8]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d00e      	beq.n	800c278 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	88da      	ldrh	r2, [r3, #6]
 800c25e:	893b      	ldrh	r3, [r7, #8]
 800c260:	4293      	cmp	r3, r2
 800c262:	bf28      	it	cs
 800c264:	4613      	movcs	r3, r2
 800c266:	b29b      	uxth	r3, r3
 800c268:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c26a:	893b      	ldrh	r3, [r7, #8]
 800c26c:	461a      	mov	r2, r3
 800c26e:	68f9      	ldr	r1, [r7, #12]
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f000 fa44 	bl	800c6fe <USBD_CtlSendData>
 800c276:	e009      	b.n	800c28c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c278:	6839      	ldr	r1, [r7, #0]
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 f9ce 	bl	800c61c <USBD_CtlError>
 800c280:	e004      	b.n	800c28c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 fa95 	bl	800c7b2 <USBD_CtlSendStatus>
 800c288:	e000      	b.n	800c28c <USBD_GetDescriptor+0x320>
    return;
 800c28a:	bf00      	nop
  }
}
 800c28c:	3710      	adds	r7, #16
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop

0800c294 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b084      	sub	sp, #16
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	889b      	ldrh	r3, [r3, #4]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d131      	bne.n	800c30a <USBD_SetAddress+0x76>
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	88db      	ldrh	r3, [r3, #6]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d12d      	bne.n	800c30a <USBD_SetAddress+0x76>
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	885b      	ldrh	r3, [r3, #2]
 800c2b2:	2b7f      	cmp	r3, #127	; 0x7f
 800c2b4:	d829      	bhi.n	800c30a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	885b      	ldrh	r3, [r3, #2]
 800c2ba:	b2db      	uxtb	r3, r3
 800c2bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2c8:	b2db      	uxtb	r3, r3
 800c2ca:	2b03      	cmp	r3, #3
 800c2cc:	d104      	bne.n	800c2d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c2ce:	6839      	ldr	r1, [r7, #0]
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 f9a3 	bl	800c61c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2d6:	e01d      	b.n	800c314 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	7bfa      	ldrb	r2, [r7, #15]
 800c2dc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c2e0:	7bfb      	ldrb	r3, [r7, #15]
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 fe90 	bl	800d00a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 fa61 	bl	800c7b2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c2f0:	7bfb      	ldrb	r3, [r7, #15]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d004      	beq.n	800c300 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2202      	movs	r2, #2
 800c2fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2fe:	e009      	b.n	800c314 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2201      	movs	r2, #1
 800c304:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c308:	e004      	b.n	800c314 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c30a:	6839      	ldr	r1, [r7, #0]
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 f985 	bl	800c61c <USBD_CtlError>
  }
}
 800c312:	bf00      	nop
 800c314:	bf00      	nop
 800c316:	3710      	adds	r7, #16
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c326:	2300      	movs	r3, #0
 800c328:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	885b      	ldrh	r3, [r3, #2]
 800c32e:	b2da      	uxtb	r2, r3
 800c330:	4b4c      	ldr	r3, [pc, #304]	; (800c464 <USBD_SetConfig+0x148>)
 800c332:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c334:	4b4b      	ldr	r3, [pc, #300]	; (800c464 <USBD_SetConfig+0x148>)
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d905      	bls.n	800c348 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c33c:	6839      	ldr	r1, [r7, #0]
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f000 f96c 	bl	800c61c <USBD_CtlError>
    return USBD_FAIL;
 800c344:	2303      	movs	r3, #3
 800c346:	e088      	b.n	800c45a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	2b02      	cmp	r3, #2
 800c352:	d002      	beq.n	800c35a <USBD_SetConfig+0x3e>
 800c354:	2b03      	cmp	r3, #3
 800c356:	d025      	beq.n	800c3a4 <USBD_SetConfig+0x88>
 800c358:	e071      	b.n	800c43e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c35a:	4b42      	ldr	r3, [pc, #264]	; (800c464 <USBD_SetConfig+0x148>)
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d01c      	beq.n	800c39c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c362:	4b40      	ldr	r3, [pc, #256]	; (800c464 <USBD_SetConfig+0x148>)
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	461a      	mov	r2, r3
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c36c:	4b3d      	ldr	r3, [pc, #244]	; (800c464 <USBD_SetConfig+0x148>)
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	4619      	mov	r1, r3
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f7ff f992 	bl	800b69c <USBD_SetClassConfig>
 800c378:	4603      	mov	r3, r0
 800c37a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c37c:	7bfb      	ldrb	r3, [r7, #15]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d004      	beq.n	800c38c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c382:	6839      	ldr	r1, [r7, #0]
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f000 f949 	bl	800c61c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c38a:	e065      	b.n	800c458 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f000 fa10 	bl	800c7b2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2203      	movs	r2, #3
 800c396:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c39a:	e05d      	b.n	800c458 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f000 fa08 	bl	800c7b2 <USBD_CtlSendStatus>
      break;
 800c3a2:	e059      	b.n	800c458 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c3a4:	4b2f      	ldr	r3, [pc, #188]	; (800c464 <USBD_SetConfig+0x148>)
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d112      	bne.n	800c3d2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2202      	movs	r2, #2
 800c3b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c3b4:	4b2b      	ldr	r3, [pc, #172]	; (800c464 <USBD_SetConfig+0x148>)
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c3be:	4b29      	ldr	r3, [pc, #164]	; (800c464 <USBD_SetConfig+0x148>)
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f7ff f985 	bl	800b6d4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 f9f1 	bl	800c7b2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c3d0:	e042      	b.n	800c458 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c3d2:	4b24      	ldr	r3, [pc, #144]	; (800c464 <USBD_SetConfig+0x148>)
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d02a      	beq.n	800c436 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f7ff f973 	bl	800b6d4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c3ee:	4b1d      	ldr	r3, [pc, #116]	; (800c464 <USBD_SetConfig+0x148>)
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c3f8:	4b1a      	ldr	r3, [pc, #104]	; (800c464 <USBD_SetConfig+0x148>)
 800c3fa:	781b      	ldrb	r3, [r3, #0]
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f7ff f94c 	bl	800b69c <USBD_SetClassConfig>
 800c404:	4603      	mov	r3, r0
 800c406:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c408:	7bfb      	ldrb	r3, [r7, #15]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d00f      	beq.n	800c42e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c40e:	6839      	ldr	r1, [r7, #0]
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 f903 	bl	800c61c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	4619      	mov	r1, r3
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f7ff f958 	bl	800b6d4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2202      	movs	r2, #2
 800c428:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c42c:	e014      	b.n	800c458 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 f9bf 	bl	800c7b2 <USBD_CtlSendStatus>
      break;
 800c434:	e010      	b.n	800c458 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 f9bb 	bl	800c7b2 <USBD_CtlSendStatus>
      break;
 800c43c:	e00c      	b.n	800c458 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c43e:	6839      	ldr	r1, [r7, #0]
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f000 f8eb 	bl	800c61c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c446:	4b07      	ldr	r3, [pc, #28]	; (800c464 <USBD_SetConfig+0x148>)
 800c448:	781b      	ldrb	r3, [r3, #0]
 800c44a:	4619      	mov	r1, r3
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f7ff f941 	bl	800b6d4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c452:	2303      	movs	r3, #3
 800c454:	73fb      	strb	r3, [r7, #15]
      break;
 800c456:	bf00      	nop
  }

  return ret;
 800c458:	7bfb      	ldrb	r3, [r7, #15]
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3710      	adds	r7, #16
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	20000710 	.word	0x20000710

0800c468 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b082      	sub	sp, #8
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	88db      	ldrh	r3, [r3, #6]
 800c476:	2b01      	cmp	r3, #1
 800c478:	d004      	beq.n	800c484 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c47a:	6839      	ldr	r1, [r7, #0]
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f000 f8cd 	bl	800c61c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c482:	e023      	b.n	800c4cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c48a:	b2db      	uxtb	r3, r3
 800c48c:	2b02      	cmp	r3, #2
 800c48e:	dc02      	bgt.n	800c496 <USBD_GetConfig+0x2e>
 800c490:	2b00      	cmp	r3, #0
 800c492:	dc03      	bgt.n	800c49c <USBD_GetConfig+0x34>
 800c494:	e015      	b.n	800c4c2 <USBD_GetConfig+0x5a>
 800c496:	2b03      	cmp	r3, #3
 800c498:	d00b      	beq.n	800c4b2 <USBD_GetConfig+0x4a>
 800c49a:	e012      	b.n	800c4c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	3308      	adds	r3, #8
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 f927 	bl	800c6fe <USBD_CtlSendData>
        break;
 800c4b0:	e00c      	b.n	800c4cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	3304      	adds	r3, #4
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 f91f 	bl	800c6fe <USBD_CtlSendData>
        break;
 800c4c0:	e004      	b.n	800c4cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c4c2:	6839      	ldr	r1, [r7, #0]
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f000 f8a9 	bl	800c61c <USBD_CtlError>
        break;
 800c4ca:	bf00      	nop
}
 800c4cc:	bf00      	nop
 800c4ce:	3708      	adds	r7, #8
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b082      	sub	sp, #8
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	3b01      	subs	r3, #1
 800c4e8:	2b02      	cmp	r3, #2
 800c4ea:	d81e      	bhi.n	800c52a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	88db      	ldrh	r3, [r3, #6]
 800c4f0:	2b02      	cmp	r3, #2
 800c4f2:	d004      	beq.n	800c4fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c4f4:	6839      	ldr	r1, [r7, #0]
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f000 f890 	bl	800c61c <USBD_CtlError>
        break;
 800c4fc:	e01a      	b.n	800c534 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2201      	movs	r2, #1
 800c502:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d005      	beq.n	800c51a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	68db      	ldr	r3, [r3, #12]
 800c512:	f043 0202 	orr.w	r2, r3, #2
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	330c      	adds	r3, #12
 800c51e:	2202      	movs	r2, #2
 800c520:	4619      	mov	r1, r3
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f000 f8eb 	bl	800c6fe <USBD_CtlSendData>
      break;
 800c528:	e004      	b.n	800c534 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c52a:	6839      	ldr	r1, [r7, #0]
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f000 f875 	bl	800c61c <USBD_CtlError>
      break;
 800c532:	bf00      	nop
  }
}
 800c534:	bf00      	nop
 800c536:	3708      	adds	r7, #8
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	885b      	ldrh	r3, [r3, #2]
 800c54a:	2b01      	cmp	r3, #1
 800c54c:	d106      	bne.n	800c55c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2201      	movs	r2, #1
 800c552:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f000 f92b 	bl	800c7b2 <USBD_CtlSendStatus>
  }
}
 800c55c:	bf00      	nop
 800c55e:	3708      	adds	r7, #8
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c574:	b2db      	uxtb	r3, r3
 800c576:	3b01      	subs	r3, #1
 800c578:	2b02      	cmp	r3, #2
 800c57a:	d80b      	bhi.n	800c594 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	885b      	ldrh	r3, [r3, #2]
 800c580:	2b01      	cmp	r3, #1
 800c582:	d10c      	bne.n	800c59e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2200      	movs	r2, #0
 800c588:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 f910 	bl	800c7b2 <USBD_CtlSendStatus>
      }
      break;
 800c592:	e004      	b.n	800c59e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c594:	6839      	ldr	r1, [r7, #0]
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 f840 	bl	800c61c <USBD_CtlError>
      break;
 800c59c:	e000      	b.n	800c5a0 <USBD_ClrFeature+0x3c>
      break;
 800c59e:	bf00      	nop
  }
}
 800c5a0:	bf00      	nop
 800c5a2:	3708      	adds	r7, #8
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}

0800c5a8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b084      	sub	sp, #16
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	781a      	ldrb	r2, [r3, #0]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	781a      	ldrb	r2, [r3, #0]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c5d2:	68f8      	ldr	r0, [r7, #12]
 800c5d4:	f7ff fa92 	bl	800bafc <SWAPBYTE>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	461a      	mov	r2, r3
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c5ec:	68f8      	ldr	r0, [r7, #12]
 800c5ee:	f7ff fa85 	bl	800bafc <SWAPBYTE>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	3301      	adds	r3, #1
 800c5fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	3301      	adds	r3, #1
 800c604:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c606:	68f8      	ldr	r0, [r7, #12]
 800c608:	f7ff fa78 	bl	800bafc <SWAPBYTE>
 800c60c:	4603      	mov	r3, r0
 800c60e:	461a      	mov	r2, r3
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	80da      	strh	r2, [r3, #6]
}
 800c614:	bf00      	nop
 800c616:	3710      	adds	r7, #16
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c626:	2180      	movs	r1, #128	; 0x80
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f000 fc83 	bl	800cf34 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c62e:	2100      	movs	r1, #0
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f000 fc7f 	bl	800cf34 <USBD_LL_StallEP>
}
 800c636:	bf00      	nop
 800c638:	3708      	adds	r7, #8
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}

0800c63e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c63e:	b580      	push	{r7, lr}
 800c640:	b086      	sub	sp, #24
 800c642:	af00      	add	r7, sp, #0
 800c644:	60f8      	str	r0, [r7, #12]
 800c646:	60b9      	str	r1, [r7, #8]
 800c648:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c64a:	2300      	movs	r3, #0
 800c64c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d036      	beq.n	800c6c2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c658:	6938      	ldr	r0, [r7, #16]
 800c65a:	f000 f836 	bl	800c6ca <USBD_GetLen>
 800c65e:	4603      	mov	r3, r0
 800c660:	3301      	adds	r3, #1
 800c662:	b29b      	uxth	r3, r3
 800c664:	005b      	lsls	r3, r3, #1
 800c666:	b29a      	uxth	r2, r3
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c66c:	7dfb      	ldrb	r3, [r7, #23]
 800c66e:	68ba      	ldr	r2, [r7, #8]
 800c670:	4413      	add	r3, r2
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	7812      	ldrb	r2, [r2, #0]
 800c676:	701a      	strb	r2, [r3, #0]
  idx++;
 800c678:	7dfb      	ldrb	r3, [r7, #23]
 800c67a:	3301      	adds	r3, #1
 800c67c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c67e:	7dfb      	ldrb	r3, [r7, #23]
 800c680:	68ba      	ldr	r2, [r7, #8]
 800c682:	4413      	add	r3, r2
 800c684:	2203      	movs	r2, #3
 800c686:	701a      	strb	r2, [r3, #0]
  idx++;
 800c688:	7dfb      	ldrb	r3, [r7, #23]
 800c68a:	3301      	adds	r3, #1
 800c68c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c68e:	e013      	b.n	800c6b8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c690:	7dfb      	ldrb	r3, [r7, #23]
 800c692:	68ba      	ldr	r2, [r7, #8]
 800c694:	4413      	add	r3, r2
 800c696:	693a      	ldr	r2, [r7, #16]
 800c698:	7812      	ldrb	r2, [r2, #0]
 800c69a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	3301      	adds	r3, #1
 800c6a0:	613b      	str	r3, [r7, #16]
    idx++;
 800c6a2:	7dfb      	ldrb	r3, [r7, #23]
 800c6a4:	3301      	adds	r3, #1
 800c6a6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c6a8:	7dfb      	ldrb	r3, [r7, #23]
 800c6aa:	68ba      	ldr	r2, [r7, #8]
 800c6ac:	4413      	add	r3, r2
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	701a      	strb	r2, [r3, #0]
    idx++;
 800c6b2:	7dfb      	ldrb	r3, [r7, #23]
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d1e7      	bne.n	800c690 <USBD_GetString+0x52>
 800c6c0:	e000      	b.n	800c6c4 <USBD_GetString+0x86>
    return;
 800c6c2:	bf00      	nop
  }
}
 800c6c4:	3718      	adds	r7, #24
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}

0800c6ca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c6ca:	b480      	push	{r7}
 800c6cc:	b085      	sub	sp, #20
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c6da:	e005      	b.n	800c6e8 <USBD_GetLen+0x1e>
  {
    len++;
 800c6dc:	7bfb      	ldrb	r3, [r7, #15]
 800c6de:	3301      	adds	r3, #1
 800c6e0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	781b      	ldrb	r3, [r3, #0]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d1f5      	bne.n	800c6dc <USBD_GetLen+0x12>
  }

  return len;
 800c6f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3714      	adds	r7, #20
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr

0800c6fe <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c6fe:	b580      	push	{r7, lr}
 800c700:	b084      	sub	sp, #16
 800c702:	af00      	add	r7, sp, #0
 800c704:	60f8      	str	r0, [r7, #12]
 800c706:	60b9      	str	r1, [r7, #8]
 800c708:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	2202      	movs	r2, #2
 800c70e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	687a      	ldr	r2, [r7, #4]
 800c716:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	68ba      	ldr	r2, [r7, #8]
 800c722:	2100      	movs	r1, #0
 800c724:	68f8      	ldr	r0, [r7, #12]
 800c726:	f000 fc8f 	bl	800d048 <USBD_LL_Transmit>

  return USBD_OK;
 800c72a:	2300      	movs	r3, #0
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3710      	adds	r7, #16
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	68ba      	ldr	r2, [r7, #8]
 800c744:	2100      	movs	r1, #0
 800c746:	68f8      	ldr	r0, [r7, #12]
 800c748:	f000 fc7e 	bl	800d048 <USBD_LL_Transmit>

  return USBD_OK;
 800c74c:	2300      	movs	r3, #0
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}

0800c756 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c756:	b580      	push	{r7, lr}
 800c758:	b084      	sub	sp, #16
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	60f8      	str	r0, [r7, #12]
 800c75e:	60b9      	str	r1, [r7, #8]
 800c760:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	2203      	movs	r2, #3
 800c766:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	687a      	ldr	r2, [r7, #4]
 800c776:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	68ba      	ldr	r2, [r7, #8]
 800c77e:	2100      	movs	r1, #0
 800c780:	68f8      	ldr	r0, [r7, #12]
 800c782:	f000 fc82 	bl	800d08a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c786:	2300      	movs	r3, #0
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3710      	adds	r7, #16
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b084      	sub	sp, #16
 800c794:	af00      	add	r7, sp, #0
 800c796:	60f8      	str	r0, [r7, #12]
 800c798:	60b9      	str	r1, [r7, #8]
 800c79a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	68ba      	ldr	r2, [r7, #8]
 800c7a0:	2100      	movs	r1, #0
 800c7a2:	68f8      	ldr	r0, [r7, #12]
 800c7a4:	f000 fc71 	bl	800d08a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c7a8:	2300      	movs	r3, #0
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3710      	adds	r7, #16
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}

0800c7b2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c7b2:	b580      	push	{r7, lr}
 800c7b4:	b082      	sub	sp, #8
 800c7b6:	af00      	add	r7, sp, #0
 800c7b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2204      	movs	r2, #4
 800c7be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	2100      	movs	r1, #0
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f000 fc3d 	bl	800d048 <USBD_LL_Transmit>

  return USBD_OK;
 800c7ce:	2300      	movs	r3, #0
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3708      	adds	r7, #8
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b082      	sub	sp, #8
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2205      	movs	r2, #5
 800c7e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	2100      	movs	r1, #0
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 fc4b 	bl	800d08a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c7f4:	2300      	movs	r3, #0
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3708      	adds	r7, #8
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}
	...

0800c800 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800c804:	2200      	movs	r2, #0
 800c806:	4912      	ldr	r1, [pc, #72]	; (800c850 <MX_USB_Device_Init+0x50>)
 800c808:	4812      	ldr	r0, [pc, #72]	; (800c854 <MX_USB_Device_Init+0x54>)
 800c80a:	f7fe fed9 	bl	800b5c0 <USBD_Init>
 800c80e:	4603      	mov	r3, r0
 800c810:	2b00      	cmp	r3, #0
 800c812:	d001      	beq.n	800c818 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800c814:	f7f5 f9a6 	bl	8001b64 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800c818:	490f      	ldr	r1, [pc, #60]	; (800c858 <MX_USB_Device_Init+0x58>)
 800c81a:	480e      	ldr	r0, [pc, #56]	; (800c854 <MX_USB_Device_Init+0x54>)
 800c81c:	f7fe ff00 	bl	800b620 <USBD_RegisterClass>
 800c820:	4603      	mov	r3, r0
 800c822:	2b00      	cmp	r3, #0
 800c824:	d001      	beq.n	800c82a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800c826:	f7f5 f99d 	bl	8001b64 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800c82a:	490c      	ldr	r1, [pc, #48]	; (800c85c <MX_USB_Device_Init+0x5c>)
 800c82c:	4809      	ldr	r0, [pc, #36]	; (800c854 <MX_USB_Device_Init+0x54>)
 800c82e:	f7fe fe51 	bl	800b4d4 <USBD_CDC_RegisterInterface>
 800c832:	4603      	mov	r3, r0
 800c834:	2b00      	cmp	r3, #0
 800c836:	d001      	beq.n	800c83c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800c838:	f7f5 f994 	bl	8001b64 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c83c:	4805      	ldr	r0, [pc, #20]	; (800c854 <MX_USB_Device_Init+0x54>)
 800c83e:	f7fe ff16 	bl	800b66e <USBD_Start>
 800c842:	4603      	mov	r3, r0
 800c844:	2b00      	cmp	r3, #0
 800c846:	d001      	beq.n	800c84c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800c848:	f7f5 f98c 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c84c:	bf00      	nop
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	20000130 	.word	0x20000130
 800c854:	20000714 	.word	0x20000714
 800c858:	20000018 	.word	0x20000018
 800c85c:	2000011c 	.word	0x2000011c

0800c860 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c864:	2200      	movs	r2, #0
 800c866:	4905      	ldr	r1, [pc, #20]	; (800c87c <CDC_Init_FS+0x1c>)
 800c868:	4805      	ldr	r0, [pc, #20]	; (800c880 <CDC_Init_FS+0x20>)
 800c86a:	f7fe fe48 	bl	800b4fe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c86e:	4905      	ldr	r1, [pc, #20]	; (800c884 <CDC_Init_FS+0x24>)
 800c870:	4803      	ldr	r0, [pc, #12]	; (800c880 <CDC_Init_FS+0x20>)
 800c872:	f7fe fe62 	bl	800b53a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c876:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c878:	4618      	mov	r0, r3
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	20001224 	.word	0x20001224
 800c880:	20000714 	.word	0x20000714
 800c884:	20000a24 	.word	0x20000a24

0800c888 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c888:	b480      	push	{r7}
 800c88a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c88c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c88e:	4618      	mov	r0, r3
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr

0800c898 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c898:	b480      	push	{r7}
 800c89a:	b083      	sub	sp, #12
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	4603      	mov	r3, r0
 800c8a0:	6039      	str	r1, [r7, #0]
 800c8a2:	71fb      	strb	r3, [r7, #7]
 800c8a4:	4613      	mov	r3, r2
 800c8a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c8a8:	79fb      	ldrb	r3, [r7, #7]
 800c8aa:	2b23      	cmp	r3, #35	; 0x23
 800c8ac:	d84a      	bhi.n	800c944 <CDC_Control_FS+0xac>
 800c8ae:	a201      	add	r2, pc, #4	; (adr r2, 800c8b4 <CDC_Control_FS+0x1c>)
 800c8b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8b4:	0800c945 	.word	0x0800c945
 800c8b8:	0800c945 	.word	0x0800c945
 800c8bc:	0800c945 	.word	0x0800c945
 800c8c0:	0800c945 	.word	0x0800c945
 800c8c4:	0800c945 	.word	0x0800c945
 800c8c8:	0800c945 	.word	0x0800c945
 800c8cc:	0800c945 	.word	0x0800c945
 800c8d0:	0800c945 	.word	0x0800c945
 800c8d4:	0800c945 	.word	0x0800c945
 800c8d8:	0800c945 	.word	0x0800c945
 800c8dc:	0800c945 	.word	0x0800c945
 800c8e0:	0800c945 	.word	0x0800c945
 800c8e4:	0800c945 	.word	0x0800c945
 800c8e8:	0800c945 	.word	0x0800c945
 800c8ec:	0800c945 	.word	0x0800c945
 800c8f0:	0800c945 	.word	0x0800c945
 800c8f4:	0800c945 	.word	0x0800c945
 800c8f8:	0800c945 	.word	0x0800c945
 800c8fc:	0800c945 	.word	0x0800c945
 800c900:	0800c945 	.word	0x0800c945
 800c904:	0800c945 	.word	0x0800c945
 800c908:	0800c945 	.word	0x0800c945
 800c90c:	0800c945 	.word	0x0800c945
 800c910:	0800c945 	.word	0x0800c945
 800c914:	0800c945 	.word	0x0800c945
 800c918:	0800c945 	.word	0x0800c945
 800c91c:	0800c945 	.word	0x0800c945
 800c920:	0800c945 	.word	0x0800c945
 800c924:	0800c945 	.word	0x0800c945
 800c928:	0800c945 	.word	0x0800c945
 800c92c:	0800c945 	.word	0x0800c945
 800c930:	0800c945 	.word	0x0800c945
 800c934:	0800c945 	.word	0x0800c945
 800c938:	0800c945 	.word	0x0800c945
 800c93c:	0800c945 	.word	0x0800c945
 800c940:	0800c945 	.word	0x0800c945
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c944:	bf00      	nop
  }

  return (USBD_OK);
 800c946:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c948:	4618      	mov	r0, r3
 800c94a:	370c      	adds	r7, #12
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr

0800c954 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c95e:	6879      	ldr	r1, [r7, #4]
 800c960:	480e      	ldr	r0, [pc, #56]	; (800c99c <CDC_Receive_FS+0x48>)
 800c962:	f7fe fdea 	bl	800b53a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c966:	480d      	ldr	r0, [pc, #52]	; (800c99c <CDC_Receive_FS+0x48>)
 800c968:	f7fe fe00 	bl	800b56c <USBD_CDC_ReceivePacket>

  size_t length = (size_t) *Len;
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	60fb      	str	r3, [r7, #12]
  memset(usbRxBuffer, '\0', USB_RX_BUFFER_SIZE); // Clear buffer before setting
 800c972:	2240      	movs	r2, #64	; 0x40
 800c974:	2100      	movs	r1, #0
 800c976:	480a      	ldr	r0, [pc, #40]	; (800c9a0 <CDC_Receive_FS+0x4c>)
 800c978:	f001 fbe9 	bl	800e14e <memset>
  memcpy(usbRxBuffer, Buf, length);
 800c97c:	68fa      	ldr	r2, [r7, #12]
 800c97e:	6879      	ldr	r1, [r7, #4]
 800c980:	4807      	ldr	r0, [pc, #28]	; (800c9a0 <CDC_Receive_FS+0x4c>)
 800c982:	f001 fc64 	bl	800e24e <memcpy>
  memset(Buf, '\0', length); // Clear Buf for next read
 800c986:	68fa      	ldr	r2, [r7, #12]
 800c988:	2100      	movs	r1, #0
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f001 fbdf 	bl	800e14e <memset>

//CDC_Transmit_FS(Buf,*Len); // Received characters are echoed to the terminal

  return (USBD_OK);
 800c990:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c992:	4618      	mov	r0, r3
 800c994:	3710      	adds	r7, #16
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}
 800c99a:	bf00      	nop
 800c99c:	20000714 	.word	0x20000714
 800c9a0:	200009e4 	.word	0x200009e4

0800c9a4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b087      	sub	sp, #28
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	60b9      	str	r1, [r7, #8]
 800c9ae:	4613      	mov	r3, r2
 800c9b0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c9b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	371c      	adds	r7, #28
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c4:	4770      	bx	lr
	...

0800c9c8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b083      	sub	sp, #12
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	6039      	str	r1, [r7, #0]
 800c9d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	2212      	movs	r2, #18
 800c9d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800c9da:	4b03      	ldr	r3, [pc, #12]	; (800c9e8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	370c      	adds	r7, #12
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr
 800c9e8:	20000150 	.word	0x20000150

0800c9ec <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	6039      	str	r1, [r7, #0]
 800c9f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	2204      	movs	r2, #4
 800c9fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c9fe:	4b03      	ldr	r3, [pc, #12]	; (800ca0c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	370c      	adds	r7, #12
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr
 800ca0c:	20000164 	.word	0x20000164

0800ca10 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	4603      	mov	r3, r0
 800ca18:	6039      	str	r1, [r7, #0]
 800ca1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ca1c:	79fb      	ldrb	r3, [r7, #7]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d105      	bne.n	800ca2e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ca22:	683a      	ldr	r2, [r7, #0]
 800ca24:	4907      	ldr	r1, [pc, #28]	; (800ca44 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ca26:	4808      	ldr	r0, [pc, #32]	; (800ca48 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ca28:	f7ff fe09 	bl	800c63e <USBD_GetString>
 800ca2c:	e004      	b.n	800ca38 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ca2e:	683a      	ldr	r2, [r7, #0]
 800ca30:	4904      	ldr	r1, [pc, #16]	; (800ca44 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ca32:	4805      	ldr	r0, [pc, #20]	; (800ca48 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ca34:	f7ff fe03 	bl	800c63e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca38:	4b02      	ldr	r3, [pc, #8]	; (800ca44 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3708      	adds	r7, #8
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop
 800ca44:	20001a24 	.word	0x20001a24
 800ca48:	080119f8 	.word	0x080119f8

0800ca4c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b082      	sub	sp, #8
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	4603      	mov	r3, r0
 800ca54:	6039      	str	r1, [r7, #0]
 800ca56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ca58:	683a      	ldr	r2, [r7, #0]
 800ca5a:	4904      	ldr	r1, [pc, #16]	; (800ca6c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ca5c:	4804      	ldr	r0, [pc, #16]	; (800ca70 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ca5e:	f7ff fdee 	bl	800c63e <USBD_GetString>
  return USBD_StrDesc;
 800ca62:	4b02      	ldr	r3, [pc, #8]	; (800ca6c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3708      	adds	r7, #8
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}
 800ca6c:	20001a24 	.word	0x20001a24
 800ca70:	08011a04 	.word	0x08011a04

0800ca74 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	6039      	str	r1, [r7, #0]
 800ca7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	221a      	movs	r2, #26
 800ca84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ca86:	f000 f843 	bl	800cb10 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ca8a:	4b02      	ldr	r3, [pc, #8]	; (800ca94 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3708      	adds	r7, #8
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}
 800ca94:	20000168 	.word	0x20000168

0800ca98 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	4603      	mov	r3, r0
 800caa0:	6039      	str	r1, [r7, #0]
 800caa2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800caa4:	79fb      	ldrb	r3, [r7, #7]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d105      	bne.n	800cab6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800caaa:	683a      	ldr	r2, [r7, #0]
 800caac:	4907      	ldr	r1, [pc, #28]	; (800cacc <USBD_CDC_ConfigStrDescriptor+0x34>)
 800caae:	4808      	ldr	r0, [pc, #32]	; (800cad0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800cab0:	f7ff fdc5 	bl	800c63e <USBD_GetString>
 800cab4:	e004      	b.n	800cac0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800cab6:	683a      	ldr	r2, [r7, #0]
 800cab8:	4904      	ldr	r1, [pc, #16]	; (800cacc <USBD_CDC_ConfigStrDescriptor+0x34>)
 800caba:	4805      	ldr	r0, [pc, #20]	; (800cad0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800cabc:	f7ff fdbf 	bl	800c63e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cac0:	4b02      	ldr	r3, [pc, #8]	; (800cacc <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3708      	adds	r7, #8
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	20001a24 	.word	0x20001a24
 800cad0:	08011a18 	.word	0x08011a18

0800cad4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	4603      	mov	r3, r0
 800cadc:	6039      	str	r1, [r7, #0]
 800cade:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cae0:	79fb      	ldrb	r3, [r7, #7]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d105      	bne.n	800caf2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800cae6:	683a      	ldr	r2, [r7, #0]
 800cae8:	4907      	ldr	r1, [pc, #28]	; (800cb08 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800caea:	4808      	ldr	r0, [pc, #32]	; (800cb0c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800caec:	f7ff fda7 	bl	800c63e <USBD_GetString>
 800caf0:	e004      	b.n	800cafc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800caf2:	683a      	ldr	r2, [r7, #0]
 800caf4:	4904      	ldr	r1, [pc, #16]	; (800cb08 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800caf6:	4805      	ldr	r0, [pc, #20]	; (800cb0c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800caf8:	f7ff fda1 	bl	800c63e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cafc:	4b02      	ldr	r3, [pc, #8]	; (800cb08 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3708      	adds	r7, #8
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
 800cb06:	bf00      	nop
 800cb08:	20001a24 	.word	0x20001a24
 800cb0c:	08011a24 	.word	0x08011a24

0800cb10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cb16:	4b0f      	ldr	r3, [pc, #60]	; (800cb54 <Get_SerialNum+0x44>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cb1c:	4b0e      	ldr	r3, [pc, #56]	; (800cb58 <Get_SerialNum+0x48>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cb22:	4b0e      	ldr	r3, [pc, #56]	; (800cb5c <Get_SerialNum+0x4c>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cb28:	68fa      	ldr	r2, [r7, #12]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	4413      	add	r3, r2
 800cb2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d009      	beq.n	800cb4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cb36:	2208      	movs	r2, #8
 800cb38:	4909      	ldr	r1, [pc, #36]	; (800cb60 <Get_SerialNum+0x50>)
 800cb3a:	68f8      	ldr	r0, [r7, #12]
 800cb3c:	f000 f814 	bl	800cb68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cb40:	2204      	movs	r2, #4
 800cb42:	4908      	ldr	r1, [pc, #32]	; (800cb64 <Get_SerialNum+0x54>)
 800cb44:	68b8      	ldr	r0, [r7, #8]
 800cb46:	f000 f80f 	bl	800cb68 <IntToUnicode>
  }
}
 800cb4a:	bf00      	nop
 800cb4c:	3710      	adds	r7, #16
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	1fff7590 	.word	0x1fff7590
 800cb58:	1fff7594 	.word	0x1fff7594
 800cb5c:	1fff7598 	.word	0x1fff7598
 800cb60:	2000016a 	.word	0x2000016a
 800cb64:	2000017a 	.word	0x2000017a

0800cb68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b087      	sub	sp, #28
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	60f8      	str	r0, [r7, #12]
 800cb70:	60b9      	str	r1, [r7, #8]
 800cb72:	4613      	mov	r3, r2
 800cb74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cb76:	2300      	movs	r3, #0
 800cb78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	75fb      	strb	r3, [r7, #23]
 800cb7e:	e027      	b.n	800cbd0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	0f1b      	lsrs	r3, r3, #28
 800cb84:	2b09      	cmp	r3, #9
 800cb86:	d80b      	bhi.n	800cba0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	0f1b      	lsrs	r3, r3, #28
 800cb8c:	b2da      	uxtb	r2, r3
 800cb8e:	7dfb      	ldrb	r3, [r7, #23]
 800cb90:	005b      	lsls	r3, r3, #1
 800cb92:	4619      	mov	r1, r3
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	440b      	add	r3, r1
 800cb98:	3230      	adds	r2, #48	; 0x30
 800cb9a:	b2d2      	uxtb	r2, r2
 800cb9c:	701a      	strb	r2, [r3, #0]
 800cb9e:	e00a      	b.n	800cbb6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	0f1b      	lsrs	r3, r3, #28
 800cba4:	b2da      	uxtb	r2, r3
 800cba6:	7dfb      	ldrb	r3, [r7, #23]
 800cba8:	005b      	lsls	r3, r3, #1
 800cbaa:	4619      	mov	r1, r3
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	440b      	add	r3, r1
 800cbb0:	3237      	adds	r2, #55	; 0x37
 800cbb2:	b2d2      	uxtb	r2, r2
 800cbb4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	011b      	lsls	r3, r3, #4
 800cbba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cbbc:	7dfb      	ldrb	r3, [r7, #23]
 800cbbe:	005b      	lsls	r3, r3, #1
 800cbc0:	3301      	adds	r3, #1
 800cbc2:	68ba      	ldr	r2, [r7, #8]
 800cbc4:	4413      	add	r3, r2
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cbca:	7dfb      	ldrb	r3, [r7, #23]
 800cbcc:	3301      	adds	r3, #1
 800cbce:	75fb      	strb	r3, [r7, #23]
 800cbd0:	7dfa      	ldrb	r2, [r7, #23]
 800cbd2:	79fb      	ldrb	r3, [r7, #7]
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d3d3      	bcc.n	800cb80 <IntToUnicode+0x18>
  }
}
 800cbd8:	bf00      	nop
 800cbda:	bf00      	nop
 800cbdc:	371c      	adds	r7, #28
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe4:	4770      	bx	lr
	...

0800cbe8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b098      	sub	sp, #96	; 0x60
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800cbf0:	f107 0310 	add.w	r3, r7, #16
 800cbf4:	2250      	movs	r2, #80	; 0x50
 800cbf6:	2100      	movs	r1, #0
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f001 faa8 	bl	800e14e <memset>
  if(pcdHandle->Instance==USB)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a15      	ldr	r2, [pc, #84]	; (800cc58 <HAL_PCD_MspInit+0x70>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d122      	bne.n	800cc4e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cc08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cc0c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800cc12:	f107 0310 	add.w	r3, r7, #16
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7f9 fd48 	bl	80066ac <HAL_RCCEx_PeriphCLKConfig>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d001      	beq.n	800cc26 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800cc22:	f7f4 ff9f 	bl	8001b64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cc26:	4b0d      	ldr	r3, [pc, #52]	; (800cc5c <HAL_PCD_MspInit+0x74>)
 800cc28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc2a:	4a0c      	ldr	r2, [pc, #48]	; (800cc5c <HAL_PCD_MspInit+0x74>)
 800cc2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cc30:	6593      	str	r3, [r2, #88]	; 0x58
 800cc32:	4b0a      	ldr	r3, [pc, #40]	; (800cc5c <HAL_PCD_MspInit+0x74>)
 800cc34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc3a:	60fb      	str	r3, [r7, #12]
 800cc3c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800cc3e:	2200      	movs	r2, #0
 800cc40:	2100      	movs	r1, #0
 800cc42:	2014      	movs	r0, #20
 800cc44:	f7f6 fe69 	bl	800391a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800cc48:	2014      	movs	r0, #20
 800cc4a:	f7f6 fe80 	bl	800394e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cc4e:	bf00      	nop
 800cc50:	3760      	adds	r7, #96	; 0x60
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
 800cc56:	bf00      	nop
 800cc58:	40005c00 	.word	0x40005c00
 800cc5c:	40021000 	.word	0x40021000

0800cc60 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b082      	sub	sp, #8
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800cc74:	4619      	mov	r1, r3
 800cc76:	4610      	mov	r0, r2
 800cc78:	f7fe fd44 	bl	800b704 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800cc7c:	bf00      	nop
 800cc7e:	3708      	adds	r7, #8
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b082      	sub	sp, #8
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	460b      	mov	r3, r1
 800cc8e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800cc96:	78fa      	ldrb	r2, [r7, #3]
 800cc98:	6879      	ldr	r1, [r7, #4]
 800cc9a:	4613      	mov	r3, r2
 800cc9c:	009b      	lsls	r3, r3, #2
 800cc9e:	4413      	add	r3, r2
 800cca0:	00db      	lsls	r3, r3, #3
 800cca2:	440b      	add	r3, r1
 800cca4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800cca8:	681a      	ldr	r2, [r3, #0]
 800ccaa:	78fb      	ldrb	r3, [r7, #3]
 800ccac:	4619      	mov	r1, r3
 800ccae:	f7fe fd7e 	bl	800b7ae <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ccb2:	bf00      	nop
 800ccb4:	3708      	adds	r7, #8
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}

0800ccba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccba:	b580      	push	{r7, lr}
 800ccbc:	b082      	sub	sp, #8
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	6078      	str	r0, [r7, #4]
 800ccc2:	460b      	mov	r3, r1
 800ccc4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800cccc:	78fa      	ldrb	r2, [r7, #3]
 800ccce:	6879      	ldr	r1, [r7, #4]
 800ccd0:	4613      	mov	r3, r2
 800ccd2:	009b      	lsls	r3, r3, #2
 800ccd4:	4413      	add	r3, r2
 800ccd6:	00db      	lsls	r3, r3, #3
 800ccd8:	440b      	add	r3, r1
 800ccda:	333c      	adds	r3, #60	; 0x3c
 800ccdc:	681a      	ldr	r2, [r3, #0]
 800ccde:	78fb      	ldrb	r3, [r7, #3]
 800cce0:	4619      	mov	r1, r3
 800cce2:	f7fe fdc7 	bl	800b874 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800cce6:	bf00      	nop
 800cce8:	3708      	adds	r7, #8
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}

0800ccee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccee:	b580      	push	{r7, lr}
 800ccf0:	b082      	sub	sp, #8
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f7fe fedb 	bl	800bab8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800cd02:	bf00      	nop
 800cd04:	3708      	adds	r7, #8
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}

0800cd0a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd0a:	b580      	push	{r7, lr}
 800cd0c:	b084      	sub	sp, #16
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cd12:	2301      	movs	r3, #1
 800cd14:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	689b      	ldr	r3, [r3, #8]
 800cd1a:	2b02      	cmp	r3, #2
 800cd1c:	d001      	beq.n	800cd22 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cd1e:	f7f4 ff21 	bl	8001b64 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800cd28:	7bfa      	ldrb	r2, [r7, #15]
 800cd2a:	4611      	mov	r1, r2
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7fe fe85 	bl	800ba3c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f7fe fe31 	bl	800b9a0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800cd3e:	bf00      	nop
 800cd40:	3710      	adds	r7, #16
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
	...

0800cd48 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7fe fe80 	bl	800ba5c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	699b      	ldr	r3, [r3, #24]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d005      	beq.n	800cd70 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cd64:	4b04      	ldr	r3, [pc, #16]	; (800cd78 <HAL_PCD_SuspendCallback+0x30>)
 800cd66:	691b      	ldr	r3, [r3, #16]
 800cd68:	4a03      	ldr	r2, [pc, #12]	; (800cd78 <HAL_PCD_SuspendCallback+0x30>)
 800cd6a:	f043 0306 	orr.w	r3, r3, #6
 800cd6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800cd70:	bf00      	nop
 800cd72:	3708      	adds	r7, #8
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}
 800cd78:	e000ed00 	.word	0xe000ed00

0800cd7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b082      	sub	sp, #8
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	699b      	ldr	r3, [r3, #24]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d007      	beq.n	800cd9c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cd8c:	4b08      	ldr	r3, [pc, #32]	; (800cdb0 <HAL_PCD_ResumeCallback+0x34>)
 800cd8e:	691b      	ldr	r3, [r3, #16]
 800cd90:	4a07      	ldr	r2, [pc, #28]	; (800cdb0 <HAL_PCD_ResumeCallback+0x34>)
 800cd92:	f023 0306 	bic.w	r3, r3, #6
 800cd96:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800cd98:	f000 f9fa 	bl	800d190 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800cda2:	4618      	mov	r0, r3
 800cda4:	f7fe fe70 	bl	800ba88 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800cda8:	bf00      	nop
 800cdaa:	3708      	adds	r7, #8
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}
 800cdb0:	e000ed00 	.word	0xe000ed00

0800cdb4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800cdbc:	4a2b      	ldr	r2, [pc, #172]	; (800ce6c <USBD_LL_Init+0xb8>)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	4a29      	ldr	r2, [pc, #164]	; (800ce6c <USBD_LL_Init+0xb8>)
 800cdc8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800cdcc:	4b27      	ldr	r3, [pc, #156]	; (800ce6c <USBD_LL_Init+0xb8>)
 800cdce:	4a28      	ldr	r2, [pc, #160]	; (800ce70 <USBD_LL_Init+0xbc>)
 800cdd0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cdd2:	4b26      	ldr	r3, [pc, #152]	; (800ce6c <USBD_LL_Init+0xb8>)
 800cdd4:	2208      	movs	r2, #8
 800cdd6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cdd8:	4b24      	ldr	r3, [pc, #144]	; (800ce6c <USBD_LL_Init+0xb8>)
 800cdda:	2202      	movs	r2, #2
 800cddc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cdde:	4b23      	ldr	r3, [pc, #140]	; (800ce6c <USBD_LL_Init+0xb8>)
 800cde0:	2202      	movs	r2, #2
 800cde2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = ENABLE;
 800cde4:	4b21      	ldr	r3, [pc, #132]	; (800ce6c <USBD_LL_Init+0xb8>)
 800cde6:	2201      	movs	r2, #1
 800cde8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cdea:	4b20      	ldr	r3, [pc, #128]	; (800ce6c <USBD_LL_Init+0xb8>)
 800cdec:	2200      	movs	r2, #0
 800cdee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cdf0:	4b1e      	ldr	r3, [pc, #120]	; (800ce6c <USBD_LL_Init+0xb8>)
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cdf6:	4b1d      	ldr	r3, [pc, #116]	; (800ce6c <USBD_LL_Init+0xb8>)
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cdfc:	481b      	ldr	r0, [pc, #108]	; (800ce6c <USBD_LL_Init+0xb8>)
 800cdfe:	f7f7 f949 	bl	8004094 <HAL_PCD_Init>
 800ce02:	4603      	mov	r3, r0
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d001      	beq.n	800ce0c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800ce08:	f7f4 feac 	bl	8001b64 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ce12:	2318      	movs	r3, #24
 800ce14:	2200      	movs	r2, #0
 800ce16:	2100      	movs	r1, #0
 800ce18:	f7f8 fe02 	bl	8005a20 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ce22:	2358      	movs	r3, #88	; 0x58
 800ce24:	2200      	movs	r2, #0
 800ce26:	2180      	movs	r1, #128	; 0x80
 800ce28:	f7f8 fdfa 	bl	8005a20 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ce32:	23c0      	movs	r3, #192	; 0xc0
 800ce34:	2200      	movs	r2, #0
 800ce36:	2181      	movs	r1, #129	; 0x81
 800ce38:	f7f8 fdf2 	bl	8005a20 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ce42:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ce46:	2200      	movs	r2, #0
 800ce48:	2101      	movs	r1, #1
 800ce4a:	f7f8 fde9 	bl	8005a20 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ce54:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce58:	2200      	movs	r2, #0
 800ce5a:	2182      	movs	r1, #130	; 0x82
 800ce5c:	f7f8 fde0 	bl	8005a20 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ce60:	2300      	movs	r3, #0
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3708      	adds	r7, #8
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
 800ce6a:	bf00      	nop
 800ce6c:	20001c24 	.word	0x20001c24
 800ce70:	40005c00 	.word	0x40005c00

0800ce74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b084      	sub	sp, #16
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce80:	2300      	movs	r3, #0
 800ce82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f7f7 f9e7 	bl	800425e <HAL_PCD_Start>
 800ce90:	4603      	mov	r3, r0
 800ce92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce94:	7bfb      	ldrb	r3, [r7, #15]
 800ce96:	4618      	mov	r0, r3
 800ce98:	f000 f980 	bl	800d19c <USBD_Get_USB_Status>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cea0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3710      	adds	r7, #16
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}

0800ceaa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ceaa:	b580      	push	{r7, lr}
 800ceac:	b084      	sub	sp, #16
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]
 800ceb2:	4608      	mov	r0, r1
 800ceb4:	4611      	mov	r1, r2
 800ceb6:	461a      	mov	r2, r3
 800ceb8:	4603      	mov	r3, r0
 800ceba:	70fb      	strb	r3, [r7, #3]
 800cebc:	460b      	mov	r3, r1
 800cebe:	70bb      	strb	r3, [r7, #2]
 800cec0:	4613      	mov	r3, r2
 800cec2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cec4:	2300      	movs	r3, #0
 800cec6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cec8:	2300      	movs	r3, #0
 800ceca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ced2:	78bb      	ldrb	r3, [r7, #2]
 800ced4:	883a      	ldrh	r2, [r7, #0]
 800ced6:	78f9      	ldrb	r1, [r7, #3]
 800ced8:	f7f7 fb2f 	bl	800453a <HAL_PCD_EP_Open>
 800cedc:	4603      	mov	r3, r0
 800cede:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cee0:	7bfb      	ldrb	r3, [r7, #15]
 800cee2:	4618      	mov	r0, r3
 800cee4:	f000 f95a 	bl	800d19c <USBD_Get_USB_Status>
 800cee8:	4603      	mov	r3, r0
 800ceea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ceec:	7bbb      	ldrb	r3, [r7, #14]
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3710      	adds	r7, #16
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cef6:	b580      	push	{r7, lr}
 800cef8:	b084      	sub	sp, #16
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
 800cefe:	460b      	mov	r3, r1
 800cf00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf02:	2300      	movs	r3, #0
 800cf04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf06:	2300      	movs	r3, #0
 800cf08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cf10:	78fa      	ldrb	r2, [r7, #3]
 800cf12:	4611      	mov	r1, r2
 800cf14:	4618      	mov	r0, r3
 800cf16:	f7f7 fb76 	bl	8004606 <HAL_PCD_EP_Close>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf1e:	7bfb      	ldrb	r3, [r7, #15]
 800cf20:	4618      	mov	r0, r3
 800cf22:	f000 f93b 	bl	800d19c <USBD_Get_USB_Status>
 800cf26:	4603      	mov	r3, r0
 800cf28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3710      	adds	r7, #16
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b084      	sub	sp, #16
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	460b      	mov	r3, r1
 800cf3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf40:	2300      	movs	r3, #0
 800cf42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf44:	2300      	movs	r3, #0
 800cf46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cf4e:	78fa      	ldrb	r2, [r7, #3]
 800cf50:	4611      	mov	r1, r2
 800cf52:	4618      	mov	r0, r3
 800cf54:	f7f7 fc37 	bl	80047c6 <HAL_PCD_EP_SetStall>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf5c:	7bfb      	ldrb	r3, [r7, #15]
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f000 f91c 	bl	800d19c <USBD_Get_USB_Status>
 800cf64:	4603      	mov	r3, r0
 800cf66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf68:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3710      	adds	r7, #16
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}

0800cf72 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf72:	b580      	push	{r7, lr}
 800cf74:	b084      	sub	sp, #16
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
 800cf7a:	460b      	mov	r3, r1
 800cf7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf82:	2300      	movs	r3, #0
 800cf84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cf8c:	78fa      	ldrb	r2, [r7, #3]
 800cf8e:	4611      	mov	r1, r2
 800cf90:	4618      	mov	r0, r3
 800cf92:	f7f7 fc6a 	bl	800486a <HAL_PCD_EP_ClrStall>
 800cf96:	4603      	mov	r3, r0
 800cf98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf9a:	7bfb      	ldrb	r3, [r7, #15]
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f000 f8fd 	bl	800d19c <USBD_Get_USB_Status>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfa6:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3710      	adds	r7, #16
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}

0800cfb0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b085      	sub	sp, #20
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	460b      	mov	r3, r1
 800cfba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cfc2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cfc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	da0c      	bge.n	800cfe6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cfcc:	78fb      	ldrb	r3, [r7, #3]
 800cfce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfd2:	68f9      	ldr	r1, [r7, #12]
 800cfd4:	1c5a      	adds	r2, r3, #1
 800cfd6:	4613      	mov	r3, r2
 800cfd8:	009b      	lsls	r3, r3, #2
 800cfda:	4413      	add	r3, r2
 800cfdc:	00db      	lsls	r3, r3, #3
 800cfde:	440b      	add	r3, r1
 800cfe0:	3302      	adds	r3, #2
 800cfe2:	781b      	ldrb	r3, [r3, #0]
 800cfe4:	e00b      	b.n	800cffe <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cfe6:	78fb      	ldrb	r3, [r7, #3]
 800cfe8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cfec:	68f9      	ldr	r1, [r7, #12]
 800cfee:	4613      	mov	r3, r2
 800cff0:	009b      	lsls	r3, r3, #2
 800cff2:	4413      	add	r3, r2
 800cff4:	00db      	lsls	r3, r3, #3
 800cff6:	440b      	add	r3, r1
 800cff8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800cffc:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3714      	adds	r7, #20
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr

0800d00a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d00a:	b580      	push	{r7, lr}
 800d00c:	b084      	sub	sp, #16
 800d00e:	af00      	add	r7, sp, #0
 800d010:	6078      	str	r0, [r7, #4]
 800d012:	460b      	mov	r3, r1
 800d014:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d016:	2300      	movs	r3, #0
 800d018:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d01a:	2300      	movs	r3, #0
 800d01c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d024:	78fa      	ldrb	r2, [r7, #3]
 800d026:	4611      	mov	r1, r2
 800d028:	4618      	mov	r0, r3
 800d02a:	f7f7 fa61 	bl	80044f0 <HAL_PCD_SetAddress>
 800d02e:	4603      	mov	r3, r0
 800d030:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d032:	7bfb      	ldrb	r3, [r7, #15]
 800d034:	4618      	mov	r0, r3
 800d036:	f000 f8b1 	bl	800d19c <USBD_Get_USB_Status>
 800d03a:	4603      	mov	r3, r0
 800d03c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d03e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d040:	4618      	mov	r0, r3
 800d042:	3710      	adds	r7, #16
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b086      	sub	sp, #24
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	60f8      	str	r0, [r7, #12]
 800d050:	607a      	str	r2, [r7, #4]
 800d052:	603b      	str	r3, [r7, #0]
 800d054:	460b      	mov	r3, r1
 800d056:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d058:	2300      	movs	r3, #0
 800d05a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d05c:	2300      	movs	r3, #0
 800d05e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d066:	7af9      	ldrb	r1, [r7, #11]
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	687a      	ldr	r2, [r7, #4]
 800d06c:	f7f7 fb68 	bl	8004740 <HAL_PCD_EP_Transmit>
 800d070:	4603      	mov	r3, r0
 800d072:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d074:	7dfb      	ldrb	r3, [r7, #23]
 800d076:	4618      	mov	r0, r3
 800d078:	f000 f890 	bl	800d19c <USBD_Get_USB_Status>
 800d07c:	4603      	mov	r3, r0
 800d07e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d080:	7dbb      	ldrb	r3, [r7, #22]
}
 800d082:	4618      	mov	r0, r3
 800d084:	3718      	adds	r7, #24
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}

0800d08a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d08a:	b580      	push	{r7, lr}
 800d08c:	b086      	sub	sp, #24
 800d08e:	af00      	add	r7, sp, #0
 800d090:	60f8      	str	r0, [r7, #12]
 800d092:	607a      	str	r2, [r7, #4]
 800d094:	603b      	str	r3, [r7, #0]
 800d096:	460b      	mov	r3, r1
 800d098:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d09a:	2300      	movs	r3, #0
 800d09c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d0a8:	7af9      	ldrb	r1, [r7, #11]
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	f7f7 faf2 	bl	8004696 <HAL_PCD_EP_Receive>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0b6:	7dfb      	ldrb	r3, [r7, #23]
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f000 f86f 	bl	800d19c <USBD_Get_USB_Status>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d0c2:	7dbb      	ldrb	r3, [r7, #22]
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3718      	adds	r7, #24
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b082      	sub	sp, #8
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	460b      	mov	r3, r1
 800d0d6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d0de:	78fa      	ldrb	r2, [r7, #3]
 800d0e0:	4611      	mov	r1, r2
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7f7 fb14 	bl	8004710 <HAL_PCD_EP_GetRxCount>
 800d0e8:	4603      	mov	r3, r0
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3708      	adds	r7, #8
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
	...

0800d0f4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b082      	sub	sp, #8
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	460b      	mov	r3, r1
 800d0fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800d100:	78fb      	ldrb	r3, [r7, #3]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d002      	beq.n	800d10c <HAL_PCDEx_LPM_Callback+0x18>
 800d106:	2b01      	cmp	r3, #1
 800d108:	d013      	beq.n	800d132 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800d10a:	e023      	b.n	800d154 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	699b      	ldr	r3, [r3, #24]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d007      	beq.n	800d124 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d114:	f000 f83c 	bl	800d190 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d118:	4b10      	ldr	r3, [pc, #64]	; (800d15c <HAL_PCDEx_LPM_Callback+0x68>)
 800d11a:	691b      	ldr	r3, [r3, #16]
 800d11c:	4a0f      	ldr	r2, [pc, #60]	; (800d15c <HAL_PCDEx_LPM_Callback+0x68>)
 800d11e:	f023 0306 	bic.w	r3, r3, #6
 800d122:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d12a:	4618      	mov	r0, r3
 800d12c:	f7fe fcac 	bl	800ba88 <USBD_LL_Resume>
    break;
 800d130:	e010      	b.n	800d154 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d138:	4618      	mov	r0, r3
 800d13a:	f7fe fc8f 	bl	800ba5c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	699b      	ldr	r3, [r3, #24]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d005      	beq.n	800d152 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d146:	4b05      	ldr	r3, [pc, #20]	; (800d15c <HAL_PCDEx_LPM_Callback+0x68>)
 800d148:	691b      	ldr	r3, [r3, #16]
 800d14a:	4a04      	ldr	r2, [pc, #16]	; (800d15c <HAL_PCDEx_LPM_Callback+0x68>)
 800d14c:	f043 0306 	orr.w	r3, r3, #6
 800d150:	6113      	str	r3, [r2, #16]
    break;
 800d152:	bf00      	nop
}
 800d154:	bf00      	nop
 800d156:	3708      	adds	r7, #8
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}
 800d15c:	e000ed00 	.word	0xe000ed00

0800d160 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d160:	b480      	push	{r7}
 800d162:	b083      	sub	sp, #12
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d168:	4b03      	ldr	r3, [pc, #12]	; (800d178 <USBD_static_malloc+0x18>)
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	370c      	adds	r7, #12
 800d16e:	46bd      	mov	sp, r7
 800d170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d174:	4770      	bx	lr
 800d176:	bf00      	nop
 800d178:	20001f18 	.word	0x20001f18

0800d17c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b083      	sub	sp, #12
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]

}
 800d184:	bf00      	nop
 800d186:	370c      	adds	r7, #12
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d194:	f7f4 f85e 	bl	8001254 <SystemClock_Config>
}
 800d198:	bf00      	nop
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b085      	sub	sp, #20
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d1aa:	79fb      	ldrb	r3, [r7, #7]
 800d1ac:	2b03      	cmp	r3, #3
 800d1ae:	d817      	bhi.n	800d1e0 <USBD_Get_USB_Status+0x44>
 800d1b0:	a201      	add	r2, pc, #4	; (adr r2, 800d1b8 <USBD_Get_USB_Status+0x1c>)
 800d1b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1b6:	bf00      	nop
 800d1b8:	0800d1c9 	.word	0x0800d1c9
 800d1bc:	0800d1cf 	.word	0x0800d1cf
 800d1c0:	0800d1d5 	.word	0x0800d1d5
 800d1c4:	0800d1db 	.word	0x0800d1db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	73fb      	strb	r3, [r7, #15]
    break;
 800d1cc:	e00b      	b.n	800d1e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d1ce:	2303      	movs	r3, #3
 800d1d0:	73fb      	strb	r3, [r7, #15]
    break;
 800d1d2:	e008      	b.n	800d1e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	73fb      	strb	r3, [r7, #15]
    break;
 800d1d8:	e005      	b.n	800d1e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d1da:	2303      	movs	r3, #3
 800d1dc:	73fb      	strb	r3, [r7, #15]
    break;
 800d1de:	e002      	b.n	800d1e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d1e0:	2303      	movs	r3, #3
 800d1e2:	73fb      	strb	r3, [r7, #15]
    break;
 800d1e4:	bf00      	nop
  }
  return usb_status;
 800d1e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3714      	adds	r7, #20
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f2:	4770      	bx	lr

0800d1f4 <__cvt>:
 800d1f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d1f8:	ec55 4b10 	vmov	r4, r5, d0
 800d1fc:	2d00      	cmp	r5, #0
 800d1fe:	460e      	mov	r6, r1
 800d200:	4619      	mov	r1, r3
 800d202:	462b      	mov	r3, r5
 800d204:	bfbb      	ittet	lt
 800d206:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d20a:	461d      	movlt	r5, r3
 800d20c:	2300      	movge	r3, #0
 800d20e:	232d      	movlt	r3, #45	; 0x2d
 800d210:	700b      	strb	r3, [r1, #0]
 800d212:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d214:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d218:	4691      	mov	r9, r2
 800d21a:	f023 0820 	bic.w	r8, r3, #32
 800d21e:	bfbc      	itt	lt
 800d220:	4622      	movlt	r2, r4
 800d222:	4614      	movlt	r4, r2
 800d224:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d228:	d005      	beq.n	800d236 <__cvt+0x42>
 800d22a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d22e:	d100      	bne.n	800d232 <__cvt+0x3e>
 800d230:	3601      	adds	r6, #1
 800d232:	2102      	movs	r1, #2
 800d234:	e000      	b.n	800d238 <__cvt+0x44>
 800d236:	2103      	movs	r1, #3
 800d238:	ab03      	add	r3, sp, #12
 800d23a:	9301      	str	r3, [sp, #4]
 800d23c:	ab02      	add	r3, sp, #8
 800d23e:	9300      	str	r3, [sp, #0]
 800d240:	ec45 4b10 	vmov	d0, r4, r5
 800d244:	4653      	mov	r3, sl
 800d246:	4632      	mov	r2, r6
 800d248:	f001 f89e 	bl	800e388 <_dtoa_r>
 800d24c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d250:	4607      	mov	r7, r0
 800d252:	d102      	bne.n	800d25a <__cvt+0x66>
 800d254:	f019 0f01 	tst.w	r9, #1
 800d258:	d022      	beq.n	800d2a0 <__cvt+0xac>
 800d25a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d25e:	eb07 0906 	add.w	r9, r7, r6
 800d262:	d110      	bne.n	800d286 <__cvt+0x92>
 800d264:	783b      	ldrb	r3, [r7, #0]
 800d266:	2b30      	cmp	r3, #48	; 0x30
 800d268:	d10a      	bne.n	800d280 <__cvt+0x8c>
 800d26a:	2200      	movs	r2, #0
 800d26c:	2300      	movs	r3, #0
 800d26e:	4620      	mov	r0, r4
 800d270:	4629      	mov	r1, r5
 800d272:	f7f3 fc51 	bl	8000b18 <__aeabi_dcmpeq>
 800d276:	b918      	cbnz	r0, 800d280 <__cvt+0x8c>
 800d278:	f1c6 0601 	rsb	r6, r6, #1
 800d27c:	f8ca 6000 	str.w	r6, [sl]
 800d280:	f8da 3000 	ldr.w	r3, [sl]
 800d284:	4499      	add	r9, r3
 800d286:	2200      	movs	r2, #0
 800d288:	2300      	movs	r3, #0
 800d28a:	4620      	mov	r0, r4
 800d28c:	4629      	mov	r1, r5
 800d28e:	f7f3 fc43 	bl	8000b18 <__aeabi_dcmpeq>
 800d292:	b108      	cbz	r0, 800d298 <__cvt+0xa4>
 800d294:	f8cd 900c 	str.w	r9, [sp, #12]
 800d298:	2230      	movs	r2, #48	; 0x30
 800d29a:	9b03      	ldr	r3, [sp, #12]
 800d29c:	454b      	cmp	r3, r9
 800d29e:	d307      	bcc.n	800d2b0 <__cvt+0xbc>
 800d2a0:	9b03      	ldr	r3, [sp, #12]
 800d2a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d2a4:	1bdb      	subs	r3, r3, r7
 800d2a6:	4638      	mov	r0, r7
 800d2a8:	6013      	str	r3, [r2, #0]
 800d2aa:	b004      	add	sp, #16
 800d2ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2b0:	1c59      	adds	r1, r3, #1
 800d2b2:	9103      	str	r1, [sp, #12]
 800d2b4:	701a      	strb	r2, [r3, #0]
 800d2b6:	e7f0      	b.n	800d29a <__cvt+0xa6>

0800d2b8 <__exponent>:
 800d2b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	2900      	cmp	r1, #0
 800d2be:	bfb8      	it	lt
 800d2c0:	4249      	neglt	r1, r1
 800d2c2:	f803 2b02 	strb.w	r2, [r3], #2
 800d2c6:	bfb4      	ite	lt
 800d2c8:	222d      	movlt	r2, #45	; 0x2d
 800d2ca:	222b      	movge	r2, #43	; 0x2b
 800d2cc:	2909      	cmp	r1, #9
 800d2ce:	7042      	strb	r2, [r0, #1]
 800d2d0:	dd2a      	ble.n	800d328 <__exponent+0x70>
 800d2d2:	f10d 0207 	add.w	r2, sp, #7
 800d2d6:	4617      	mov	r7, r2
 800d2d8:	260a      	movs	r6, #10
 800d2da:	4694      	mov	ip, r2
 800d2dc:	fb91 f5f6 	sdiv	r5, r1, r6
 800d2e0:	fb06 1415 	mls	r4, r6, r5, r1
 800d2e4:	3430      	adds	r4, #48	; 0x30
 800d2e6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d2ea:	460c      	mov	r4, r1
 800d2ec:	2c63      	cmp	r4, #99	; 0x63
 800d2ee:	f102 32ff 	add.w	r2, r2, #4294967295
 800d2f2:	4629      	mov	r1, r5
 800d2f4:	dcf1      	bgt.n	800d2da <__exponent+0x22>
 800d2f6:	3130      	adds	r1, #48	; 0x30
 800d2f8:	f1ac 0402 	sub.w	r4, ip, #2
 800d2fc:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d300:	1c41      	adds	r1, r0, #1
 800d302:	4622      	mov	r2, r4
 800d304:	42ba      	cmp	r2, r7
 800d306:	d30a      	bcc.n	800d31e <__exponent+0x66>
 800d308:	f10d 0209 	add.w	r2, sp, #9
 800d30c:	eba2 020c 	sub.w	r2, r2, ip
 800d310:	42bc      	cmp	r4, r7
 800d312:	bf88      	it	hi
 800d314:	2200      	movhi	r2, #0
 800d316:	4413      	add	r3, r2
 800d318:	1a18      	subs	r0, r3, r0
 800d31a:	b003      	add	sp, #12
 800d31c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d31e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d322:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d326:	e7ed      	b.n	800d304 <__exponent+0x4c>
 800d328:	2330      	movs	r3, #48	; 0x30
 800d32a:	3130      	adds	r1, #48	; 0x30
 800d32c:	7083      	strb	r3, [r0, #2]
 800d32e:	70c1      	strb	r1, [r0, #3]
 800d330:	1d03      	adds	r3, r0, #4
 800d332:	e7f1      	b.n	800d318 <__exponent+0x60>

0800d334 <_printf_float>:
 800d334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d338:	ed2d 8b02 	vpush	{d8}
 800d33c:	b08d      	sub	sp, #52	; 0x34
 800d33e:	460c      	mov	r4, r1
 800d340:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d344:	4616      	mov	r6, r2
 800d346:	461f      	mov	r7, r3
 800d348:	4605      	mov	r5, r0
 800d34a:	f000 ff09 	bl	800e160 <_localeconv_r>
 800d34e:	f8d0 a000 	ldr.w	sl, [r0]
 800d352:	4650      	mov	r0, sl
 800d354:	f7f2 ffb4 	bl	80002c0 <strlen>
 800d358:	2300      	movs	r3, #0
 800d35a:	930a      	str	r3, [sp, #40]	; 0x28
 800d35c:	6823      	ldr	r3, [r4, #0]
 800d35e:	9305      	str	r3, [sp, #20]
 800d360:	f8d8 3000 	ldr.w	r3, [r8]
 800d364:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d368:	3307      	adds	r3, #7
 800d36a:	f023 0307 	bic.w	r3, r3, #7
 800d36e:	f103 0208 	add.w	r2, r3, #8
 800d372:	f8c8 2000 	str.w	r2, [r8]
 800d376:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d37a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d37e:	9307      	str	r3, [sp, #28]
 800d380:	f8cd 8018 	str.w	r8, [sp, #24]
 800d384:	ee08 0a10 	vmov	s16, r0
 800d388:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d38c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d390:	4b9e      	ldr	r3, [pc, #632]	; (800d60c <_printf_float+0x2d8>)
 800d392:	f04f 32ff 	mov.w	r2, #4294967295
 800d396:	f7f3 fbf1 	bl	8000b7c <__aeabi_dcmpun>
 800d39a:	bb88      	cbnz	r0, 800d400 <_printf_float+0xcc>
 800d39c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d3a0:	4b9a      	ldr	r3, [pc, #616]	; (800d60c <_printf_float+0x2d8>)
 800d3a2:	f04f 32ff 	mov.w	r2, #4294967295
 800d3a6:	f7f3 fbcb 	bl	8000b40 <__aeabi_dcmple>
 800d3aa:	bb48      	cbnz	r0, 800d400 <_printf_float+0xcc>
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	4640      	mov	r0, r8
 800d3b2:	4649      	mov	r1, r9
 800d3b4:	f7f3 fbba 	bl	8000b2c <__aeabi_dcmplt>
 800d3b8:	b110      	cbz	r0, 800d3c0 <_printf_float+0x8c>
 800d3ba:	232d      	movs	r3, #45	; 0x2d
 800d3bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3c0:	4a93      	ldr	r2, [pc, #588]	; (800d610 <_printf_float+0x2dc>)
 800d3c2:	4b94      	ldr	r3, [pc, #592]	; (800d614 <_printf_float+0x2e0>)
 800d3c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d3c8:	bf94      	ite	ls
 800d3ca:	4690      	movls	r8, r2
 800d3cc:	4698      	movhi	r8, r3
 800d3ce:	2303      	movs	r3, #3
 800d3d0:	6123      	str	r3, [r4, #16]
 800d3d2:	9b05      	ldr	r3, [sp, #20]
 800d3d4:	f023 0304 	bic.w	r3, r3, #4
 800d3d8:	6023      	str	r3, [r4, #0]
 800d3da:	f04f 0900 	mov.w	r9, #0
 800d3de:	9700      	str	r7, [sp, #0]
 800d3e0:	4633      	mov	r3, r6
 800d3e2:	aa0b      	add	r2, sp, #44	; 0x2c
 800d3e4:	4621      	mov	r1, r4
 800d3e6:	4628      	mov	r0, r5
 800d3e8:	f000 f9da 	bl	800d7a0 <_printf_common>
 800d3ec:	3001      	adds	r0, #1
 800d3ee:	f040 8090 	bne.w	800d512 <_printf_float+0x1de>
 800d3f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f6:	b00d      	add	sp, #52	; 0x34
 800d3f8:	ecbd 8b02 	vpop	{d8}
 800d3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d400:	4642      	mov	r2, r8
 800d402:	464b      	mov	r3, r9
 800d404:	4640      	mov	r0, r8
 800d406:	4649      	mov	r1, r9
 800d408:	f7f3 fbb8 	bl	8000b7c <__aeabi_dcmpun>
 800d40c:	b140      	cbz	r0, 800d420 <_printf_float+0xec>
 800d40e:	464b      	mov	r3, r9
 800d410:	2b00      	cmp	r3, #0
 800d412:	bfbc      	itt	lt
 800d414:	232d      	movlt	r3, #45	; 0x2d
 800d416:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d41a:	4a7f      	ldr	r2, [pc, #508]	; (800d618 <_printf_float+0x2e4>)
 800d41c:	4b7f      	ldr	r3, [pc, #508]	; (800d61c <_printf_float+0x2e8>)
 800d41e:	e7d1      	b.n	800d3c4 <_printf_float+0x90>
 800d420:	6863      	ldr	r3, [r4, #4]
 800d422:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d426:	9206      	str	r2, [sp, #24]
 800d428:	1c5a      	adds	r2, r3, #1
 800d42a:	d13f      	bne.n	800d4ac <_printf_float+0x178>
 800d42c:	2306      	movs	r3, #6
 800d42e:	6063      	str	r3, [r4, #4]
 800d430:	9b05      	ldr	r3, [sp, #20]
 800d432:	6861      	ldr	r1, [r4, #4]
 800d434:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d438:	2300      	movs	r3, #0
 800d43a:	9303      	str	r3, [sp, #12]
 800d43c:	ab0a      	add	r3, sp, #40	; 0x28
 800d43e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d442:	ab09      	add	r3, sp, #36	; 0x24
 800d444:	ec49 8b10 	vmov	d0, r8, r9
 800d448:	9300      	str	r3, [sp, #0]
 800d44a:	6022      	str	r2, [r4, #0]
 800d44c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d450:	4628      	mov	r0, r5
 800d452:	f7ff fecf 	bl	800d1f4 <__cvt>
 800d456:	9b06      	ldr	r3, [sp, #24]
 800d458:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d45a:	2b47      	cmp	r3, #71	; 0x47
 800d45c:	4680      	mov	r8, r0
 800d45e:	d108      	bne.n	800d472 <_printf_float+0x13e>
 800d460:	1cc8      	adds	r0, r1, #3
 800d462:	db02      	blt.n	800d46a <_printf_float+0x136>
 800d464:	6863      	ldr	r3, [r4, #4]
 800d466:	4299      	cmp	r1, r3
 800d468:	dd41      	ble.n	800d4ee <_printf_float+0x1ba>
 800d46a:	f1ab 0302 	sub.w	r3, fp, #2
 800d46e:	fa5f fb83 	uxtb.w	fp, r3
 800d472:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d476:	d820      	bhi.n	800d4ba <_printf_float+0x186>
 800d478:	3901      	subs	r1, #1
 800d47a:	465a      	mov	r2, fp
 800d47c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d480:	9109      	str	r1, [sp, #36]	; 0x24
 800d482:	f7ff ff19 	bl	800d2b8 <__exponent>
 800d486:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d488:	1813      	adds	r3, r2, r0
 800d48a:	2a01      	cmp	r2, #1
 800d48c:	4681      	mov	r9, r0
 800d48e:	6123      	str	r3, [r4, #16]
 800d490:	dc02      	bgt.n	800d498 <_printf_float+0x164>
 800d492:	6822      	ldr	r2, [r4, #0]
 800d494:	07d2      	lsls	r2, r2, #31
 800d496:	d501      	bpl.n	800d49c <_printf_float+0x168>
 800d498:	3301      	adds	r3, #1
 800d49a:	6123      	str	r3, [r4, #16]
 800d49c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d09c      	beq.n	800d3de <_printf_float+0xaa>
 800d4a4:	232d      	movs	r3, #45	; 0x2d
 800d4a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4aa:	e798      	b.n	800d3de <_printf_float+0xaa>
 800d4ac:	9a06      	ldr	r2, [sp, #24]
 800d4ae:	2a47      	cmp	r2, #71	; 0x47
 800d4b0:	d1be      	bne.n	800d430 <_printf_float+0xfc>
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d1bc      	bne.n	800d430 <_printf_float+0xfc>
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	e7b9      	b.n	800d42e <_printf_float+0xfa>
 800d4ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d4be:	d118      	bne.n	800d4f2 <_printf_float+0x1be>
 800d4c0:	2900      	cmp	r1, #0
 800d4c2:	6863      	ldr	r3, [r4, #4]
 800d4c4:	dd0b      	ble.n	800d4de <_printf_float+0x1aa>
 800d4c6:	6121      	str	r1, [r4, #16]
 800d4c8:	b913      	cbnz	r3, 800d4d0 <_printf_float+0x19c>
 800d4ca:	6822      	ldr	r2, [r4, #0]
 800d4cc:	07d0      	lsls	r0, r2, #31
 800d4ce:	d502      	bpl.n	800d4d6 <_printf_float+0x1a2>
 800d4d0:	3301      	adds	r3, #1
 800d4d2:	440b      	add	r3, r1
 800d4d4:	6123      	str	r3, [r4, #16]
 800d4d6:	65a1      	str	r1, [r4, #88]	; 0x58
 800d4d8:	f04f 0900 	mov.w	r9, #0
 800d4dc:	e7de      	b.n	800d49c <_printf_float+0x168>
 800d4de:	b913      	cbnz	r3, 800d4e6 <_printf_float+0x1b2>
 800d4e0:	6822      	ldr	r2, [r4, #0]
 800d4e2:	07d2      	lsls	r2, r2, #31
 800d4e4:	d501      	bpl.n	800d4ea <_printf_float+0x1b6>
 800d4e6:	3302      	adds	r3, #2
 800d4e8:	e7f4      	b.n	800d4d4 <_printf_float+0x1a0>
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	e7f2      	b.n	800d4d4 <_printf_float+0x1a0>
 800d4ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d4f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4f4:	4299      	cmp	r1, r3
 800d4f6:	db05      	blt.n	800d504 <_printf_float+0x1d0>
 800d4f8:	6823      	ldr	r3, [r4, #0]
 800d4fa:	6121      	str	r1, [r4, #16]
 800d4fc:	07d8      	lsls	r0, r3, #31
 800d4fe:	d5ea      	bpl.n	800d4d6 <_printf_float+0x1a2>
 800d500:	1c4b      	adds	r3, r1, #1
 800d502:	e7e7      	b.n	800d4d4 <_printf_float+0x1a0>
 800d504:	2900      	cmp	r1, #0
 800d506:	bfd4      	ite	le
 800d508:	f1c1 0202 	rsble	r2, r1, #2
 800d50c:	2201      	movgt	r2, #1
 800d50e:	4413      	add	r3, r2
 800d510:	e7e0      	b.n	800d4d4 <_printf_float+0x1a0>
 800d512:	6823      	ldr	r3, [r4, #0]
 800d514:	055a      	lsls	r2, r3, #21
 800d516:	d407      	bmi.n	800d528 <_printf_float+0x1f4>
 800d518:	6923      	ldr	r3, [r4, #16]
 800d51a:	4642      	mov	r2, r8
 800d51c:	4631      	mov	r1, r6
 800d51e:	4628      	mov	r0, r5
 800d520:	47b8      	blx	r7
 800d522:	3001      	adds	r0, #1
 800d524:	d12c      	bne.n	800d580 <_printf_float+0x24c>
 800d526:	e764      	b.n	800d3f2 <_printf_float+0xbe>
 800d528:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d52c:	f240 80e0 	bls.w	800d6f0 <_printf_float+0x3bc>
 800d530:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d534:	2200      	movs	r2, #0
 800d536:	2300      	movs	r3, #0
 800d538:	f7f3 faee 	bl	8000b18 <__aeabi_dcmpeq>
 800d53c:	2800      	cmp	r0, #0
 800d53e:	d034      	beq.n	800d5aa <_printf_float+0x276>
 800d540:	4a37      	ldr	r2, [pc, #220]	; (800d620 <_printf_float+0x2ec>)
 800d542:	2301      	movs	r3, #1
 800d544:	4631      	mov	r1, r6
 800d546:	4628      	mov	r0, r5
 800d548:	47b8      	blx	r7
 800d54a:	3001      	adds	r0, #1
 800d54c:	f43f af51 	beq.w	800d3f2 <_printf_float+0xbe>
 800d550:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d554:	429a      	cmp	r2, r3
 800d556:	db02      	blt.n	800d55e <_printf_float+0x22a>
 800d558:	6823      	ldr	r3, [r4, #0]
 800d55a:	07d8      	lsls	r0, r3, #31
 800d55c:	d510      	bpl.n	800d580 <_printf_float+0x24c>
 800d55e:	ee18 3a10 	vmov	r3, s16
 800d562:	4652      	mov	r2, sl
 800d564:	4631      	mov	r1, r6
 800d566:	4628      	mov	r0, r5
 800d568:	47b8      	blx	r7
 800d56a:	3001      	adds	r0, #1
 800d56c:	f43f af41 	beq.w	800d3f2 <_printf_float+0xbe>
 800d570:	f04f 0800 	mov.w	r8, #0
 800d574:	f104 091a 	add.w	r9, r4, #26
 800d578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d57a:	3b01      	subs	r3, #1
 800d57c:	4543      	cmp	r3, r8
 800d57e:	dc09      	bgt.n	800d594 <_printf_float+0x260>
 800d580:	6823      	ldr	r3, [r4, #0]
 800d582:	079b      	lsls	r3, r3, #30
 800d584:	f100 8107 	bmi.w	800d796 <_printf_float+0x462>
 800d588:	68e0      	ldr	r0, [r4, #12]
 800d58a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d58c:	4298      	cmp	r0, r3
 800d58e:	bfb8      	it	lt
 800d590:	4618      	movlt	r0, r3
 800d592:	e730      	b.n	800d3f6 <_printf_float+0xc2>
 800d594:	2301      	movs	r3, #1
 800d596:	464a      	mov	r2, r9
 800d598:	4631      	mov	r1, r6
 800d59a:	4628      	mov	r0, r5
 800d59c:	47b8      	blx	r7
 800d59e:	3001      	adds	r0, #1
 800d5a0:	f43f af27 	beq.w	800d3f2 <_printf_float+0xbe>
 800d5a4:	f108 0801 	add.w	r8, r8, #1
 800d5a8:	e7e6      	b.n	800d578 <_printf_float+0x244>
 800d5aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	dc39      	bgt.n	800d624 <_printf_float+0x2f0>
 800d5b0:	4a1b      	ldr	r2, [pc, #108]	; (800d620 <_printf_float+0x2ec>)
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	4631      	mov	r1, r6
 800d5b6:	4628      	mov	r0, r5
 800d5b8:	47b8      	blx	r7
 800d5ba:	3001      	adds	r0, #1
 800d5bc:	f43f af19 	beq.w	800d3f2 <_printf_float+0xbe>
 800d5c0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d5c4:	4313      	orrs	r3, r2
 800d5c6:	d102      	bne.n	800d5ce <_printf_float+0x29a>
 800d5c8:	6823      	ldr	r3, [r4, #0]
 800d5ca:	07d9      	lsls	r1, r3, #31
 800d5cc:	d5d8      	bpl.n	800d580 <_printf_float+0x24c>
 800d5ce:	ee18 3a10 	vmov	r3, s16
 800d5d2:	4652      	mov	r2, sl
 800d5d4:	4631      	mov	r1, r6
 800d5d6:	4628      	mov	r0, r5
 800d5d8:	47b8      	blx	r7
 800d5da:	3001      	adds	r0, #1
 800d5dc:	f43f af09 	beq.w	800d3f2 <_printf_float+0xbe>
 800d5e0:	f04f 0900 	mov.w	r9, #0
 800d5e4:	f104 0a1a 	add.w	sl, r4, #26
 800d5e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5ea:	425b      	negs	r3, r3
 800d5ec:	454b      	cmp	r3, r9
 800d5ee:	dc01      	bgt.n	800d5f4 <_printf_float+0x2c0>
 800d5f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5f2:	e792      	b.n	800d51a <_printf_float+0x1e6>
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	4652      	mov	r2, sl
 800d5f8:	4631      	mov	r1, r6
 800d5fa:	4628      	mov	r0, r5
 800d5fc:	47b8      	blx	r7
 800d5fe:	3001      	adds	r0, #1
 800d600:	f43f aef7 	beq.w	800d3f2 <_printf_float+0xbe>
 800d604:	f109 0901 	add.w	r9, r9, #1
 800d608:	e7ee      	b.n	800d5e8 <_printf_float+0x2b4>
 800d60a:	bf00      	nop
 800d60c:	7fefffff 	.word	0x7fefffff
 800d610:	08011b75 	.word	0x08011b75
 800d614:	08011b79 	.word	0x08011b79
 800d618:	08011b7d 	.word	0x08011b7d
 800d61c:	08011b81 	.word	0x08011b81
 800d620:	08011b85 	.word	0x08011b85
 800d624:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d626:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d628:	429a      	cmp	r2, r3
 800d62a:	bfa8      	it	ge
 800d62c:	461a      	movge	r2, r3
 800d62e:	2a00      	cmp	r2, #0
 800d630:	4691      	mov	r9, r2
 800d632:	dc37      	bgt.n	800d6a4 <_printf_float+0x370>
 800d634:	f04f 0b00 	mov.w	fp, #0
 800d638:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d63c:	f104 021a 	add.w	r2, r4, #26
 800d640:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d642:	9305      	str	r3, [sp, #20]
 800d644:	eba3 0309 	sub.w	r3, r3, r9
 800d648:	455b      	cmp	r3, fp
 800d64a:	dc33      	bgt.n	800d6b4 <_printf_float+0x380>
 800d64c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d650:	429a      	cmp	r2, r3
 800d652:	db3b      	blt.n	800d6cc <_printf_float+0x398>
 800d654:	6823      	ldr	r3, [r4, #0]
 800d656:	07da      	lsls	r2, r3, #31
 800d658:	d438      	bmi.n	800d6cc <_printf_float+0x398>
 800d65a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d65e:	eba2 0903 	sub.w	r9, r2, r3
 800d662:	9b05      	ldr	r3, [sp, #20]
 800d664:	1ad2      	subs	r2, r2, r3
 800d666:	4591      	cmp	r9, r2
 800d668:	bfa8      	it	ge
 800d66a:	4691      	movge	r9, r2
 800d66c:	f1b9 0f00 	cmp.w	r9, #0
 800d670:	dc35      	bgt.n	800d6de <_printf_float+0x3aa>
 800d672:	f04f 0800 	mov.w	r8, #0
 800d676:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d67a:	f104 0a1a 	add.w	sl, r4, #26
 800d67e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d682:	1a9b      	subs	r3, r3, r2
 800d684:	eba3 0309 	sub.w	r3, r3, r9
 800d688:	4543      	cmp	r3, r8
 800d68a:	f77f af79 	ble.w	800d580 <_printf_float+0x24c>
 800d68e:	2301      	movs	r3, #1
 800d690:	4652      	mov	r2, sl
 800d692:	4631      	mov	r1, r6
 800d694:	4628      	mov	r0, r5
 800d696:	47b8      	blx	r7
 800d698:	3001      	adds	r0, #1
 800d69a:	f43f aeaa 	beq.w	800d3f2 <_printf_float+0xbe>
 800d69e:	f108 0801 	add.w	r8, r8, #1
 800d6a2:	e7ec      	b.n	800d67e <_printf_float+0x34a>
 800d6a4:	4613      	mov	r3, r2
 800d6a6:	4631      	mov	r1, r6
 800d6a8:	4642      	mov	r2, r8
 800d6aa:	4628      	mov	r0, r5
 800d6ac:	47b8      	blx	r7
 800d6ae:	3001      	adds	r0, #1
 800d6b0:	d1c0      	bne.n	800d634 <_printf_float+0x300>
 800d6b2:	e69e      	b.n	800d3f2 <_printf_float+0xbe>
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	4631      	mov	r1, r6
 800d6b8:	4628      	mov	r0, r5
 800d6ba:	9205      	str	r2, [sp, #20]
 800d6bc:	47b8      	blx	r7
 800d6be:	3001      	adds	r0, #1
 800d6c0:	f43f ae97 	beq.w	800d3f2 <_printf_float+0xbe>
 800d6c4:	9a05      	ldr	r2, [sp, #20]
 800d6c6:	f10b 0b01 	add.w	fp, fp, #1
 800d6ca:	e7b9      	b.n	800d640 <_printf_float+0x30c>
 800d6cc:	ee18 3a10 	vmov	r3, s16
 800d6d0:	4652      	mov	r2, sl
 800d6d2:	4631      	mov	r1, r6
 800d6d4:	4628      	mov	r0, r5
 800d6d6:	47b8      	blx	r7
 800d6d8:	3001      	adds	r0, #1
 800d6da:	d1be      	bne.n	800d65a <_printf_float+0x326>
 800d6dc:	e689      	b.n	800d3f2 <_printf_float+0xbe>
 800d6de:	9a05      	ldr	r2, [sp, #20]
 800d6e0:	464b      	mov	r3, r9
 800d6e2:	4442      	add	r2, r8
 800d6e4:	4631      	mov	r1, r6
 800d6e6:	4628      	mov	r0, r5
 800d6e8:	47b8      	blx	r7
 800d6ea:	3001      	adds	r0, #1
 800d6ec:	d1c1      	bne.n	800d672 <_printf_float+0x33e>
 800d6ee:	e680      	b.n	800d3f2 <_printf_float+0xbe>
 800d6f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6f2:	2a01      	cmp	r2, #1
 800d6f4:	dc01      	bgt.n	800d6fa <_printf_float+0x3c6>
 800d6f6:	07db      	lsls	r3, r3, #31
 800d6f8:	d53a      	bpl.n	800d770 <_printf_float+0x43c>
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	4642      	mov	r2, r8
 800d6fe:	4631      	mov	r1, r6
 800d700:	4628      	mov	r0, r5
 800d702:	47b8      	blx	r7
 800d704:	3001      	adds	r0, #1
 800d706:	f43f ae74 	beq.w	800d3f2 <_printf_float+0xbe>
 800d70a:	ee18 3a10 	vmov	r3, s16
 800d70e:	4652      	mov	r2, sl
 800d710:	4631      	mov	r1, r6
 800d712:	4628      	mov	r0, r5
 800d714:	47b8      	blx	r7
 800d716:	3001      	adds	r0, #1
 800d718:	f43f ae6b 	beq.w	800d3f2 <_printf_float+0xbe>
 800d71c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d720:	2200      	movs	r2, #0
 800d722:	2300      	movs	r3, #0
 800d724:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d728:	f7f3 f9f6 	bl	8000b18 <__aeabi_dcmpeq>
 800d72c:	b9d8      	cbnz	r0, 800d766 <_printf_float+0x432>
 800d72e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d732:	f108 0201 	add.w	r2, r8, #1
 800d736:	4631      	mov	r1, r6
 800d738:	4628      	mov	r0, r5
 800d73a:	47b8      	blx	r7
 800d73c:	3001      	adds	r0, #1
 800d73e:	d10e      	bne.n	800d75e <_printf_float+0x42a>
 800d740:	e657      	b.n	800d3f2 <_printf_float+0xbe>
 800d742:	2301      	movs	r3, #1
 800d744:	4652      	mov	r2, sl
 800d746:	4631      	mov	r1, r6
 800d748:	4628      	mov	r0, r5
 800d74a:	47b8      	blx	r7
 800d74c:	3001      	adds	r0, #1
 800d74e:	f43f ae50 	beq.w	800d3f2 <_printf_float+0xbe>
 800d752:	f108 0801 	add.w	r8, r8, #1
 800d756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d758:	3b01      	subs	r3, #1
 800d75a:	4543      	cmp	r3, r8
 800d75c:	dcf1      	bgt.n	800d742 <_printf_float+0x40e>
 800d75e:	464b      	mov	r3, r9
 800d760:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d764:	e6da      	b.n	800d51c <_printf_float+0x1e8>
 800d766:	f04f 0800 	mov.w	r8, #0
 800d76a:	f104 0a1a 	add.w	sl, r4, #26
 800d76e:	e7f2      	b.n	800d756 <_printf_float+0x422>
 800d770:	2301      	movs	r3, #1
 800d772:	4642      	mov	r2, r8
 800d774:	e7df      	b.n	800d736 <_printf_float+0x402>
 800d776:	2301      	movs	r3, #1
 800d778:	464a      	mov	r2, r9
 800d77a:	4631      	mov	r1, r6
 800d77c:	4628      	mov	r0, r5
 800d77e:	47b8      	blx	r7
 800d780:	3001      	adds	r0, #1
 800d782:	f43f ae36 	beq.w	800d3f2 <_printf_float+0xbe>
 800d786:	f108 0801 	add.w	r8, r8, #1
 800d78a:	68e3      	ldr	r3, [r4, #12]
 800d78c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d78e:	1a5b      	subs	r3, r3, r1
 800d790:	4543      	cmp	r3, r8
 800d792:	dcf0      	bgt.n	800d776 <_printf_float+0x442>
 800d794:	e6f8      	b.n	800d588 <_printf_float+0x254>
 800d796:	f04f 0800 	mov.w	r8, #0
 800d79a:	f104 0919 	add.w	r9, r4, #25
 800d79e:	e7f4      	b.n	800d78a <_printf_float+0x456>

0800d7a0 <_printf_common>:
 800d7a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7a4:	4616      	mov	r6, r2
 800d7a6:	4699      	mov	r9, r3
 800d7a8:	688a      	ldr	r2, [r1, #8]
 800d7aa:	690b      	ldr	r3, [r1, #16]
 800d7ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	bfb8      	it	lt
 800d7b4:	4613      	movlt	r3, r2
 800d7b6:	6033      	str	r3, [r6, #0]
 800d7b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d7bc:	4607      	mov	r7, r0
 800d7be:	460c      	mov	r4, r1
 800d7c0:	b10a      	cbz	r2, 800d7c6 <_printf_common+0x26>
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	6033      	str	r3, [r6, #0]
 800d7c6:	6823      	ldr	r3, [r4, #0]
 800d7c8:	0699      	lsls	r1, r3, #26
 800d7ca:	bf42      	ittt	mi
 800d7cc:	6833      	ldrmi	r3, [r6, #0]
 800d7ce:	3302      	addmi	r3, #2
 800d7d0:	6033      	strmi	r3, [r6, #0]
 800d7d2:	6825      	ldr	r5, [r4, #0]
 800d7d4:	f015 0506 	ands.w	r5, r5, #6
 800d7d8:	d106      	bne.n	800d7e8 <_printf_common+0x48>
 800d7da:	f104 0a19 	add.w	sl, r4, #25
 800d7de:	68e3      	ldr	r3, [r4, #12]
 800d7e0:	6832      	ldr	r2, [r6, #0]
 800d7e2:	1a9b      	subs	r3, r3, r2
 800d7e4:	42ab      	cmp	r3, r5
 800d7e6:	dc26      	bgt.n	800d836 <_printf_common+0x96>
 800d7e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d7ec:	1e13      	subs	r3, r2, #0
 800d7ee:	6822      	ldr	r2, [r4, #0]
 800d7f0:	bf18      	it	ne
 800d7f2:	2301      	movne	r3, #1
 800d7f4:	0692      	lsls	r2, r2, #26
 800d7f6:	d42b      	bmi.n	800d850 <_printf_common+0xb0>
 800d7f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d7fc:	4649      	mov	r1, r9
 800d7fe:	4638      	mov	r0, r7
 800d800:	47c0      	blx	r8
 800d802:	3001      	adds	r0, #1
 800d804:	d01e      	beq.n	800d844 <_printf_common+0xa4>
 800d806:	6823      	ldr	r3, [r4, #0]
 800d808:	6922      	ldr	r2, [r4, #16]
 800d80a:	f003 0306 	and.w	r3, r3, #6
 800d80e:	2b04      	cmp	r3, #4
 800d810:	bf02      	ittt	eq
 800d812:	68e5      	ldreq	r5, [r4, #12]
 800d814:	6833      	ldreq	r3, [r6, #0]
 800d816:	1aed      	subeq	r5, r5, r3
 800d818:	68a3      	ldr	r3, [r4, #8]
 800d81a:	bf0c      	ite	eq
 800d81c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d820:	2500      	movne	r5, #0
 800d822:	4293      	cmp	r3, r2
 800d824:	bfc4      	itt	gt
 800d826:	1a9b      	subgt	r3, r3, r2
 800d828:	18ed      	addgt	r5, r5, r3
 800d82a:	2600      	movs	r6, #0
 800d82c:	341a      	adds	r4, #26
 800d82e:	42b5      	cmp	r5, r6
 800d830:	d11a      	bne.n	800d868 <_printf_common+0xc8>
 800d832:	2000      	movs	r0, #0
 800d834:	e008      	b.n	800d848 <_printf_common+0xa8>
 800d836:	2301      	movs	r3, #1
 800d838:	4652      	mov	r2, sl
 800d83a:	4649      	mov	r1, r9
 800d83c:	4638      	mov	r0, r7
 800d83e:	47c0      	blx	r8
 800d840:	3001      	adds	r0, #1
 800d842:	d103      	bne.n	800d84c <_printf_common+0xac>
 800d844:	f04f 30ff 	mov.w	r0, #4294967295
 800d848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d84c:	3501      	adds	r5, #1
 800d84e:	e7c6      	b.n	800d7de <_printf_common+0x3e>
 800d850:	18e1      	adds	r1, r4, r3
 800d852:	1c5a      	adds	r2, r3, #1
 800d854:	2030      	movs	r0, #48	; 0x30
 800d856:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d85a:	4422      	add	r2, r4
 800d85c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d860:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d864:	3302      	adds	r3, #2
 800d866:	e7c7      	b.n	800d7f8 <_printf_common+0x58>
 800d868:	2301      	movs	r3, #1
 800d86a:	4622      	mov	r2, r4
 800d86c:	4649      	mov	r1, r9
 800d86e:	4638      	mov	r0, r7
 800d870:	47c0      	blx	r8
 800d872:	3001      	adds	r0, #1
 800d874:	d0e6      	beq.n	800d844 <_printf_common+0xa4>
 800d876:	3601      	adds	r6, #1
 800d878:	e7d9      	b.n	800d82e <_printf_common+0x8e>
	...

0800d87c <_printf_i>:
 800d87c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d880:	7e0f      	ldrb	r7, [r1, #24]
 800d882:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d884:	2f78      	cmp	r7, #120	; 0x78
 800d886:	4691      	mov	r9, r2
 800d888:	4680      	mov	r8, r0
 800d88a:	460c      	mov	r4, r1
 800d88c:	469a      	mov	sl, r3
 800d88e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d892:	d807      	bhi.n	800d8a4 <_printf_i+0x28>
 800d894:	2f62      	cmp	r7, #98	; 0x62
 800d896:	d80a      	bhi.n	800d8ae <_printf_i+0x32>
 800d898:	2f00      	cmp	r7, #0
 800d89a:	f000 80d4 	beq.w	800da46 <_printf_i+0x1ca>
 800d89e:	2f58      	cmp	r7, #88	; 0x58
 800d8a0:	f000 80c0 	beq.w	800da24 <_printf_i+0x1a8>
 800d8a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d8a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d8ac:	e03a      	b.n	800d924 <_printf_i+0xa8>
 800d8ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d8b2:	2b15      	cmp	r3, #21
 800d8b4:	d8f6      	bhi.n	800d8a4 <_printf_i+0x28>
 800d8b6:	a101      	add	r1, pc, #4	; (adr r1, 800d8bc <_printf_i+0x40>)
 800d8b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d8bc:	0800d915 	.word	0x0800d915
 800d8c0:	0800d929 	.word	0x0800d929
 800d8c4:	0800d8a5 	.word	0x0800d8a5
 800d8c8:	0800d8a5 	.word	0x0800d8a5
 800d8cc:	0800d8a5 	.word	0x0800d8a5
 800d8d0:	0800d8a5 	.word	0x0800d8a5
 800d8d4:	0800d929 	.word	0x0800d929
 800d8d8:	0800d8a5 	.word	0x0800d8a5
 800d8dc:	0800d8a5 	.word	0x0800d8a5
 800d8e0:	0800d8a5 	.word	0x0800d8a5
 800d8e4:	0800d8a5 	.word	0x0800d8a5
 800d8e8:	0800da2d 	.word	0x0800da2d
 800d8ec:	0800d955 	.word	0x0800d955
 800d8f0:	0800d9e7 	.word	0x0800d9e7
 800d8f4:	0800d8a5 	.word	0x0800d8a5
 800d8f8:	0800d8a5 	.word	0x0800d8a5
 800d8fc:	0800da4f 	.word	0x0800da4f
 800d900:	0800d8a5 	.word	0x0800d8a5
 800d904:	0800d955 	.word	0x0800d955
 800d908:	0800d8a5 	.word	0x0800d8a5
 800d90c:	0800d8a5 	.word	0x0800d8a5
 800d910:	0800d9ef 	.word	0x0800d9ef
 800d914:	682b      	ldr	r3, [r5, #0]
 800d916:	1d1a      	adds	r2, r3, #4
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	602a      	str	r2, [r5, #0]
 800d91c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d920:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d924:	2301      	movs	r3, #1
 800d926:	e09f      	b.n	800da68 <_printf_i+0x1ec>
 800d928:	6820      	ldr	r0, [r4, #0]
 800d92a:	682b      	ldr	r3, [r5, #0]
 800d92c:	0607      	lsls	r7, r0, #24
 800d92e:	f103 0104 	add.w	r1, r3, #4
 800d932:	6029      	str	r1, [r5, #0]
 800d934:	d501      	bpl.n	800d93a <_printf_i+0xbe>
 800d936:	681e      	ldr	r6, [r3, #0]
 800d938:	e003      	b.n	800d942 <_printf_i+0xc6>
 800d93a:	0646      	lsls	r6, r0, #25
 800d93c:	d5fb      	bpl.n	800d936 <_printf_i+0xba>
 800d93e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d942:	2e00      	cmp	r6, #0
 800d944:	da03      	bge.n	800d94e <_printf_i+0xd2>
 800d946:	232d      	movs	r3, #45	; 0x2d
 800d948:	4276      	negs	r6, r6
 800d94a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d94e:	485a      	ldr	r0, [pc, #360]	; (800dab8 <_printf_i+0x23c>)
 800d950:	230a      	movs	r3, #10
 800d952:	e012      	b.n	800d97a <_printf_i+0xfe>
 800d954:	682b      	ldr	r3, [r5, #0]
 800d956:	6820      	ldr	r0, [r4, #0]
 800d958:	1d19      	adds	r1, r3, #4
 800d95a:	6029      	str	r1, [r5, #0]
 800d95c:	0605      	lsls	r5, r0, #24
 800d95e:	d501      	bpl.n	800d964 <_printf_i+0xe8>
 800d960:	681e      	ldr	r6, [r3, #0]
 800d962:	e002      	b.n	800d96a <_printf_i+0xee>
 800d964:	0641      	lsls	r1, r0, #25
 800d966:	d5fb      	bpl.n	800d960 <_printf_i+0xe4>
 800d968:	881e      	ldrh	r6, [r3, #0]
 800d96a:	4853      	ldr	r0, [pc, #332]	; (800dab8 <_printf_i+0x23c>)
 800d96c:	2f6f      	cmp	r7, #111	; 0x6f
 800d96e:	bf0c      	ite	eq
 800d970:	2308      	moveq	r3, #8
 800d972:	230a      	movne	r3, #10
 800d974:	2100      	movs	r1, #0
 800d976:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d97a:	6865      	ldr	r5, [r4, #4]
 800d97c:	60a5      	str	r5, [r4, #8]
 800d97e:	2d00      	cmp	r5, #0
 800d980:	bfa2      	ittt	ge
 800d982:	6821      	ldrge	r1, [r4, #0]
 800d984:	f021 0104 	bicge.w	r1, r1, #4
 800d988:	6021      	strge	r1, [r4, #0]
 800d98a:	b90e      	cbnz	r6, 800d990 <_printf_i+0x114>
 800d98c:	2d00      	cmp	r5, #0
 800d98e:	d04b      	beq.n	800da28 <_printf_i+0x1ac>
 800d990:	4615      	mov	r5, r2
 800d992:	fbb6 f1f3 	udiv	r1, r6, r3
 800d996:	fb03 6711 	mls	r7, r3, r1, r6
 800d99a:	5dc7      	ldrb	r7, [r0, r7]
 800d99c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d9a0:	4637      	mov	r7, r6
 800d9a2:	42bb      	cmp	r3, r7
 800d9a4:	460e      	mov	r6, r1
 800d9a6:	d9f4      	bls.n	800d992 <_printf_i+0x116>
 800d9a8:	2b08      	cmp	r3, #8
 800d9aa:	d10b      	bne.n	800d9c4 <_printf_i+0x148>
 800d9ac:	6823      	ldr	r3, [r4, #0]
 800d9ae:	07de      	lsls	r6, r3, #31
 800d9b0:	d508      	bpl.n	800d9c4 <_printf_i+0x148>
 800d9b2:	6923      	ldr	r3, [r4, #16]
 800d9b4:	6861      	ldr	r1, [r4, #4]
 800d9b6:	4299      	cmp	r1, r3
 800d9b8:	bfde      	ittt	le
 800d9ba:	2330      	movle	r3, #48	; 0x30
 800d9bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d9c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d9c4:	1b52      	subs	r2, r2, r5
 800d9c6:	6122      	str	r2, [r4, #16]
 800d9c8:	f8cd a000 	str.w	sl, [sp]
 800d9cc:	464b      	mov	r3, r9
 800d9ce:	aa03      	add	r2, sp, #12
 800d9d0:	4621      	mov	r1, r4
 800d9d2:	4640      	mov	r0, r8
 800d9d4:	f7ff fee4 	bl	800d7a0 <_printf_common>
 800d9d8:	3001      	adds	r0, #1
 800d9da:	d14a      	bne.n	800da72 <_printf_i+0x1f6>
 800d9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d9e0:	b004      	add	sp, #16
 800d9e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9e6:	6823      	ldr	r3, [r4, #0]
 800d9e8:	f043 0320 	orr.w	r3, r3, #32
 800d9ec:	6023      	str	r3, [r4, #0]
 800d9ee:	4833      	ldr	r0, [pc, #204]	; (800dabc <_printf_i+0x240>)
 800d9f0:	2778      	movs	r7, #120	; 0x78
 800d9f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d9f6:	6823      	ldr	r3, [r4, #0]
 800d9f8:	6829      	ldr	r1, [r5, #0]
 800d9fa:	061f      	lsls	r7, r3, #24
 800d9fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800da00:	d402      	bmi.n	800da08 <_printf_i+0x18c>
 800da02:	065f      	lsls	r7, r3, #25
 800da04:	bf48      	it	mi
 800da06:	b2b6      	uxthmi	r6, r6
 800da08:	07df      	lsls	r7, r3, #31
 800da0a:	bf48      	it	mi
 800da0c:	f043 0320 	orrmi.w	r3, r3, #32
 800da10:	6029      	str	r1, [r5, #0]
 800da12:	bf48      	it	mi
 800da14:	6023      	strmi	r3, [r4, #0]
 800da16:	b91e      	cbnz	r6, 800da20 <_printf_i+0x1a4>
 800da18:	6823      	ldr	r3, [r4, #0]
 800da1a:	f023 0320 	bic.w	r3, r3, #32
 800da1e:	6023      	str	r3, [r4, #0]
 800da20:	2310      	movs	r3, #16
 800da22:	e7a7      	b.n	800d974 <_printf_i+0xf8>
 800da24:	4824      	ldr	r0, [pc, #144]	; (800dab8 <_printf_i+0x23c>)
 800da26:	e7e4      	b.n	800d9f2 <_printf_i+0x176>
 800da28:	4615      	mov	r5, r2
 800da2a:	e7bd      	b.n	800d9a8 <_printf_i+0x12c>
 800da2c:	682b      	ldr	r3, [r5, #0]
 800da2e:	6826      	ldr	r6, [r4, #0]
 800da30:	6961      	ldr	r1, [r4, #20]
 800da32:	1d18      	adds	r0, r3, #4
 800da34:	6028      	str	r0, [r5, #0]
 800da36:	0635      	lsls	r5, r6, #24
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	d501      	bpl.n	800da40 <_printf_i+0x1c4>
 800da3c:	6019      	str	r1, [r3, #0]
 800da3e:	e002      	b.n	800da46 <_printf_i+0x1ca>
 800da40:	0670      	lsls	r0, r6, #25
 800da42:	d5fb      	bpl.n	800da3c <_printf_i+0x1c0>
 800da44:	8019      	strh	r1, [r3, #0]
 800da46:	2300      	movs	r3, #0
 800da48:	6123      	str	r3, [r4, #16]
 800da4a:	4615      	mov	r5, r2
 800da4c:	e7bc      	b.n	800d9c8 <_printf_i+0x14c>
 800da4e:	682b      	ldr	r3, [r5, #0]
 800da50:	1d1a      	adds	r2, r3, #4
 800da52:	602a      	str	r2, [r5, #0]
 800da54:	681d      	ldr	r5, [r3, #0]
 800da56:	6862      	ldr	r2, [r4, #4]
 800da58:	2100      	movs	r1, #0
 800da5a:	4628      	mov	r0, r5
 800da5c:	f7f2 fbe0 	bl	8000220 <memchr>
 800da60:	b108      	cbz	r0, 800da66 <_printf_i+0x1ea>
 800da62:	1b40      	subs	r0, r0, r5
 800da64:	6060      	str	r0, [r4, #4]
 800da66:	6863      	ldr	r3, [r4, #4]
 800da68:	6123      	str	r3, [r4, #16]
 800da6a:	2300      	movs	r3, #0
 800da6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da70:	e7aa      	b.n	800d9c8 <_printf_i+0x14c>
 800da72:	6923      	ldr	r3, [r4, #16]
 800da74:	462a      	mov	r2, r5
 800da76:	4649      	mov	r1, r9
 800da78:	4640      	mov	r0, r8
 800da7a:	47d0      	blx	sl
 800da7c:	3001      	adds	r0, #1
 800da7e:	d0ad      	beq.n	800d9dc <_printf_i+0x160>
 800da80:	6823      	ldr	r3, [r4, #0]
 800da82:	079b      	lsls	r3, r3, #30
 800da84:	d413      	bmi.n	800daae <_printf_i+0x232>
 800da86:	68e0      	ldr	r0, [r4, #12]
 800da88:	9b03      	ldr	r3, [sp, #12]
 800da8a:	4298      	cmp	r0, r3
 800da8c:	bfb8      	it	lt
 800da8e:	4618      	movlt	r0, r3
 800da90:	e7a6      	b.n	800d9e0 <_printf_i+0x164>
 800da92:	2301      	movs	r3, #1
 800da94:	4632      	mov	r2, r6
 800da96:	4649      	mov	r1, r9
 800da98:	4640      	mov	r0, r8
 800da9a:	47d0      	blx	sl
 800da9c:	3001      	adds	r0, #1
 800da9e:	d09d      	beq.n	800d9dc <_printf_i+0x160>
 800daa0:	3501      	adds	r5, #1
 800daa2:	68e3      	ldr	r3, [r4, #12]
 800daa4:	9903      	ldr	r1, [sp, #12]
 800daa6:	1a5b      	subs	r3, r3, r1
 800daa8:	42ab      	cmp	r3, r5
 800daaa:	dcf2      	bgt.n	800da92 <_printf_i+0x216>
 800daac:	e7eb      	b.n	800da86 <_printf_i+0x20a>
 800daae:	2500      	movs	r5, #0
 800dab0:	f104 0619 	add.w	r6, r4, #25
 800dab4:	e7f5      	b.n	800daa2 <_printf_i+0x226>
 800dab6:	bf00      	nop
 800dab8:	08011b87 	.word	0x08011b87
 800dabc:	08011b98 	.word	0x08011b98

0800dac0 <_scanf_float>:
 800dac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dac4:	b087      	sub	sp, #28
 800dac6:	4617      	mov	r7, r2
 800dac8:	9303      	str	r3, [sp, #12]
 800daca:	688b      	ldr	r3, [r1, #8]
 800dacc:	1e5a      	subs	r2, r3, #1
 800dace:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800dad2:	bf83      	ittte	hi
 800dad4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800dad8:	195b      	addhi	r3, r3, r5
 800dada:	9302      	strhi	r3, [sp, #8]
 800dadc:	2300      	movls	r3, #0
 800dade:	bf86      	itte	hi
 800dae0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800dae4:	608b      	strhi	r3, [r1, #8]
 800dae6:	9302      	strls	r3, [sp, #8]
 800dae8:	680b      	ldr	r3, [r1, #0]
 800daea:	468b      	mov	fp, r1
 800daec:	2500      	movs	r5, #0
 800daee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800daf2:	f84b 3b1c 	str.w	r3, [fp], #28
 800daf6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800dafa:	4680      	mov	r8, r0
 800dafc:	460c      	mov	r4, r1
 800dafe:	465e      	mov	r6, fp
 800db00:	46aa      	mov	sl, r5
 800db02:	46a9      	mov	r9, r5
 800db04:	9501      	str	r5, [sp, #4]
 800db06:	68a2      	ldr	r2, [r4, #8]
 800db08:	b152      	cbz	r2, 800db20 <_scanf_float+0x60>
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	2b4e      	cmp	r3, #78	; 0x4e
 800db10:	d864      	bhi.n	800dbdc <_scanf_float+0x11c>
 800db12:	2b40      	cmp	r3, #64	; 0x40
 800db14:	d83c      	bhi.n	800db90 <_scanf_float+0xd0>
 800db16:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800db1a:	b2c8      	uxtb	r0, r1
 800db1c:	280e      	cmp	r0, #14
 800db1e:	d93a      	bls.n	800db96 <_scanf_float+0xd6>
 800db20:	f1b9 0f00 	cmp.w	r9, #0
 800db24:	d003      	beq.n	800db2e <_scanf_float+0x6e>
 800db26:	6823      	ldr	r3, [r4, #0]
 800db28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800db2c:	6023      	str	r3, [r4, #0]
 800db2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800db32:	f1ba 0f01 	cmp.w	sl, #1
 800db36:	f200 8113 	bhi.w	800dd60 <_scanf_float+0x2a0>
 800db3a:	455e      	cmp	r6, fp
 800db3c:	f200 8105 	bhi.w	800dd4a <_scanf_float+0x28a>
 800db40:	2501      	movs	r5, #1
 800db42:	4628      	mov	r0, r5
 800db44:	b007      	add	sp, #28
 800db46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db4a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800db4e:	2a0d      	cmp	r2, #13
 800db50:	d8e6      	bhi.n	800db20 <_scanf_float+0x60>
 800db52:	a101      	add	r1, pc, #4	; (adr r1, 800db58 <_scanf_float+0x98>)
 800db54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800db58:	0800dc97 	.word	0x0800dc97
 800db5c:	0800db21 	.word	0x0800db21
 800db60:	0800db21 	.word	0x0800db21
 800db64:	0800db21 	.word	0x0800db21
 800db68:	0800dcf7 	.word	0x0800dcf7
 800db6c:	0800dccf 	.word	0x0800dccf
 800db70:	0800db21 	.word	0x0800db21
 800db74:	0800db21 	.word	0x0800db21
 800db78:	0800dca5 	.word	0x0800dca5
 800db7c:	0800db21 	.word	0x0800db21
 800db80:	0800db21 	.word	0x0800db21
 800db84:	0800db21 	.word	0x0800db21
 800db88:	0800db21 	.word	0x0800db21
 800db8c:	0800dc5d 	.word	0x0800dc5d
 800db90:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800db94:	e7db      	b.n	800db4e <_scanf_float+0x8e>
 800db96:	290e      	cmp	r1, #14
 800db98:	d8c2      	bhi.n	800db20 <_scanf_float+0x60>
 800db9a:	a001      	add	r0, pc, #4	; (adr r0, 800dba0 <_scanf_float+0xe0>)
 800db9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800dba0:	0800dc4f 	.word	0x0800dc4f
 800dba4:	0800db21 	.word	0x0800db21
 800dba8:	0800dc4f 	.word	0x0800dc4f
 800dbac:	0800dce3 	.word	0x0800dce3
 800dbb0:	0800db21 	.word	0x0800db21
 800dbb4:	0800dbfd 	.word	0x0800dbfd
 800dbb8:	0800dc39 	.word	0x0800dc39
 800dbbc:	0800dc39 	.word	0x0800dc39
 800dbc0:	0800dc39 	.word	0x0800dc39
 800dbc4:	0800dc39 	.word	0x0800dc39
 800dbc8:	0800dc39 	.word	0x0800dc39
 800dbcc:	0800dc39 	.word	0x0800dc39
 800dbd0:	0800dc39 	.word	0x0800dc39
 800dbd4:	0800dc39 	.word	0x0800dc39
 800dbd8:	0800dc39 	.word	0x0800dc39
 800dbdc:	2b6e      	cmp	r3, #110	; 0x6e
 800dbde:	d809      	bhi.n	800dbf4 <_scanf_float+0x134>
 800dbe0:	2b60      	cmp	r3, #96	; 0x60
 800dbe2:	d8b2      	bhi.n	800db4a <_scanf_float+0x8a>
 800dbe4:	2b54      	cmp	r3, #84	; 0x54
 800dbe6:	d077      	beq.n	800dcd8 <_scanf_float+0x218>
 800dbe8:	2b59      	cmp	r3, #89	; 0x59
 800dbea:	d199      	bne.n	800db20 <_scanf_float+0x60>
 800dbec:	2d07      	cmp	r5, #7
 800dbee:	d197      	bne.n	800db20 <_scanf_float+0x60>
 800dbf0:	2508      	movs	r5, #8
 800dbf2:	e029      	b.n	800dc48 <_scanf_float+0x188>
 800dbf4:	2b74      	cmp	r3, #116	; 0x74
 800dbf6:	d06f      	beq.n	800dcd8 <_scanf_float+0x218>
 800dbf8:	2b79      	cmp	r3, #121	; 0x79
 800dbfa:	e7f6      	b.n	800dbea <_scanf_float+0x12a>
 800dbfc:	6821      	ldr	r1, [r4, #0]
 800dbfe:	05c8      	lsls	r0, r1, #23
 800dc00:	d51a      	bpl.n	800dc38 <_scanf_float+0x178>
 800dc02:	9b02      	ldr	r3, [sp, #8]
 800dc04:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800dc08:	6021      	str	r1, [r4, #0]
 800dc0a:	f109 0901 	add.w	r9, r9, #1
 800dc0e:	b11b      	cbz	r3, 800dc18 <_scanf_float+0x158>
 800dc10:	3b01      	subs	r3, #1
 800dc12:	3201      	adds	r2, #1
 800dc14:	9302      	str	r3, [sp, #8]
 800dc16:	60a2      	str	r2, [r4, #8]
 800dc18:	68a3      	ldr	r3, [r4, #8]
 800dc1a:	3b01      	subs	r3, #1
 800dc1c:	60a3      	str	r3, [r4, #8]
 800dc1e:	6923      	ldr	r3, [r4, #16]
 800dc20:	3301      	adds	r3, #1
 800dc22:	6123      	str	r3, [r4, #16]
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	3b01      	subs	r3, #1
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	607b      	str	r3, [r7, #4]
 800dc2c:	f340 8084 	ble.w	800dd38 <_scanf_float+0x278>
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	3301      	adds	r3, #1
 800dc34:	603b      	str	r3, [r7, #0]
 800dc36:	e766      	b.n	800db06 <_scanf_float+0x46>
 800dc38:	eb1a 0f05 	cmn.w	sl, r5
 800dc3c:	f47f af70 	bne.w	800db20 <_scanf_float+0x60>
 800dc40:	6822      	ldr	r2, [r4, #0]
 800dc42:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800dc46:	6022      	str	r2, [r4, #0]
 800dc48:	f806 3b01 	strb.w	r3, [r6], #1
 800dc4c:	e7e4      	b.n	800dc18 <_scanf_float+0x158>
 800dc4e:	6822      	ldr	r2, [r4, #0]
 800dc50:	0610      	lsls	r0, r2, #24
 800dc52:	f57f af65 	bpl.w	800db20 <_scanf_float+0x60>
 800dc56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dc5a:	e7f4      	b.n	800dc46 <_scanf_float+0x186>
 800dc5c:	f1ba 0f00 	cmp.w	sl, #0
 800dc60:	d10e      	bne.n	800dc80 <_scanf_float+0x1c0>
 800dc62:	f1b9 0f00 	cmp.w	r9, #0
 800dc66:	d10e      	bne.n	800dc86 <_scanf_float+0x1c6>
 800dc68:	6822      	ldr	r2, [r4, #0]
 800dc6a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800dc6e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800dc72:	d108      	bne.n	800dc86 <_scanf_float+0x1c6>
 800dc74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dc78:	6022      	str	r2, [r4, #0]
 800dc7a:	f04f 0a01 	mov.w	sl, #1
 800dc7e:	e7e3      	b.n	800dc48 <_scanf_float+0x188>
 800dc80:	f1ba 0f02 	cmp.w	sl, #2
 800dc84:	d055      	beq.n	800dd32 <_scanf_float+0x272>
 800dc86:	2d01      	cmp	r5, #1
 800dc88:	d002      	beq.n	800dc90 <_scanf_float+0x1d0>
 800dc8a:	2d04      	cmp	r5, #4
 800dc8c:	f47f af48 	bne.w	800db20 <_scanf_float+0x60>
 800dc90:	3501      	adds	r5, #1
 800dc92:	b2ed      	uxtb	r5, r5
 800dc94:	e7d8      	b.n	800dc48 <_scanf_float+0x188>
 800dc96:	f1ba 0f01 	cmp.w	sl, #1
 800dc9a:	f47f af41 	bne.w	800db20 <_scanf_float+0x60>
 800dc9e:	f04f 0a02 	mov.w	sl, #2
 800dca2:	e7d1      	b.n	800dc48 <_scanf_float+0x188>
 800dca4:	b97d      	cbnz	r5, 800dcc6 <_scanf_float+0x206>
 800dca6:	f1b9 0f00 	cmp.w	r9, #0
 800dcaa:	f47f af3c 	bne.w	800db26 <_scanf_float+0x66>
 800dcae:	6822      	ldr	r2, [r4, #0]
 800dcb0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800dcb4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800dcb8:	f47f af39 	bne.w	800db2e <_scanf_float+0x6e>
 800dcbc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dcc0:	6022      	str	r2, [r4, #0]
 800dcc2:	2501      	movs	r5, #1
 800dcc4:	e7c0      	b.n	800dc48 <_scanf_float+0x188>
 800dcc6:	2d03      	cmp	r5, #3
 800dcc8:	d0e2      	beq.n	800dc90 <_scanf_float+0x1d0>
 800dcca:	2d05      	cmp	r5, #5
 800dccc:	e7de      	b.n	800dc8c <_scanf_float+0x1cc>
 800dcce:	2d02      	cmp	r5, #2
 800dcd0:	f47f af26 	bne.w	800db20 <_scanf_float+0x60>
 800dcd4:	2503      	movs	r5, #3
 800dcd6:	e7b7      	b.n	800dc48 <_scanf_float+0x188>
 800dcd8:	2d06      	cmp	r5, #6
 800dcda:	f47f af21 	bne.w	800db20 <_scanf_float+0x60>
 800dcde:	2507      	movs	r5, #7
 800dce0:	e7b2      	b.n	800dc48 <_scanf_float+0x188>
 800dce2:	6822      	ldr	r2, [r4, #0]
 800dce4:	0591      	lsls	r1, r2, #22
 800dce6:	f57f af1b 	bpl.w	800db20 <_scanf_float+0x60>
 800dcea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800dcee:	6022      	str	r2, [r4, #0]
 800dcf0:	f8cd 9004 	str.w	r9, [sp, #4]
 800dcf4:	e7a8      	b.n	800dc48 <_scanf_float+0x188>
 800dcf6:	6822      	ldr	r2, [r4, #0]
 800dcf8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800dcfc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800dd00:	d006      	beq.n	800dd10 <_scanf_float+0x250>
 800dd02:	0550      	lsls	r0, r2, #21
 800dd04:	f57f af0c 	bpl.w	800db20 <_scanf_float+0x60>
 800dd08:	f1b9 0f00 	cmp.w	r9, #0
 800dd0c:	f43f af0f 	beq.w	800db2e <_scanf_float+0x6e>
 800dd10:	0591      	lsls	r1, r2, #22
 800dd12:	bf58      	it	pl
 800dd14:	9901      	ldrpl	r1, [sp, #4]
 800dd16:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dd1a:	bf58      	it	pl
 800dd1c:	eba9 0101 	subpl.w	r1, r9, r1
 800dd20:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800dd24:	bf58      	it	pl
 800dd26:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800dd2a:	6022      	str	r2, [r4, #0]
 800dd2c:	f04f 0900 	mov.w	r9, #0
 800dd30:	e78a      	b.n	800dc48 <_scanf_float+0x188>
 800dd32:	f04f 0a03 	mov.w	sl, #3
 800dd36:	e787      	b.n	800dc48 <_scanf_float+0x188>
 800dd38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dd3c:	4639      	mov	r1, r7
 800dd3e:	4640      	mov	r0, r8
 800dd40:	4798      	blx	r3
 800dd42:	2800      	cmp	r0, #0
 800dd44:	f43f aedf 	beq.w	800db06 <_scanf_float+0x46>
 800dd48:	e6ea      	b.n	800db20 <_scanf_float+0x60>
 800dd4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dd4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dd52:	463a      	mov	r2, r7
 800dd54:	4640      	mov	r0, r8
 800dd56:	4798      	blx	r3
 800dd58:	6923      	ldr	r3, [r4, #16]
 800dd5a:	3b01      	subs	r3, #1
 800dd5c:	6123      	str	r3, [r4, #16]
 800dd5e:	e6ec      	b.n	800db3a <_scanf_float+0x7a>
 800dd60:	1e6b      	subs	r3, r5, #1
 800dd62:	2b06      	cmp	r3, #6
 800dd64:	d825      	bhi.n	800ddb2 <_scanf_float+0x2f2>
 800dd66:	2d02      	cmp	r5, #2
 800dd68:	d836      	bhi.n	800ddd8 <_scanf_float+0x318>
 800dd6a:	455e      	cmp	r6, fp
 800dd6c:	f67f aee8 	bls.w	800db40 <_scanf_float+0x80>
 800dd70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dd74:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dd78:	463a      	mov	r2, r7
 800dd7a:	4640      	mov	r0, r8
 800dd7c:	4798      	blx	r3
 800dd7e:	6923      	ldr	r3, [r4, #16]
 800dd80:	3b01      	subs	r3, #1
 800dd82:	6123      	str	r3, [r4, #16]
 800dd84:	e7f1      	b.n	800dd6a <_scanf_float+0x2aa>
 800dd86:	9802      	ldr	r0, [sp, #8]
 800dd88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dd8c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800dd90:	9002      	str	r0, [sp, #8]
 800dd92:	463a      	mov	r2, r7
 800dd94:	4640      	mov	r0, r8
 800dd96:	4798      	blx	r3
 800dd98:	6923      	ldr	r3, [r4, #16]
 800dd9a:	3b01      	subs	r3, #1
 800dd9c:	6123      	str	r3, [r4, #16]
 800dd9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dda2:	fa5f fa8a 	uxtb.w	sl, sl
 800dda6:	f1ba 0f02 	cmp.w	sl, #2
 800ddaa:	d1ec      	bne.n	800dd86 <_scanf_float+0x2c6>
 800ddac:	3d03      	subs	r5, #3
 800ddae:	b2ed      	uxtb	r5, r5
 800ddb0:	1b76      	subs	r6, r6, r5
 800ddb2:	6823      	ldr	r3, [r4, #0]
 800ddb4:	05da      	lsls	r2, r3, #23
 800ddb6:	d52f      	bpl.n	800de18 <_scanf_float+0x358>
 800ddb8:	055b      	lsls	r3, r3, #21
 800ddba:	d510      	bpl.n	800ddde <_scanf_float+0x31e>
 800ddbc:	455e      	cmp	r6, fp
 800ddbe:	f67f aebf 	bls.w	800db40 <_scanf_float+0x80>
 800ddc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ddc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ddca:	463a      	mov	r2, r7
 800ddcc:	4640      	mov	r0, r8
 800ddce:	4798      	blx	r3
 800ddd0:	6923      	ldr	r3, [r4, #16]
 800ddd2:	3b01      	subs	r3, #1
 800ddd4:	6123      	str	r3, [r4, #16]
 800ddd6:	e7f1      	b.n	800ddbc <_scanf_float+0x2fc>
 800ddd8:	46aa      	mov	sl, r5
 800ddda:	9602      	str	r6, [sp, #8]
 800dddc:	e7df      	b.n	800dd9e <_scanf_float+0x2de>
 800ddde:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dde2:	6923      	ldr	r3, [r4, #16]
 800dde4:	2965      	cmp	r1, #101	; 0x65
 800dde6:	f103 33ff 	add.w	r3, r3, #4294967295
 800ddea:	f106 35ff 	add.w	r5, r6, #4294967295
 800ddee:	6123      	str	r3, [r4, #16]
 800ddf0:	d00c      	beq.n	800de0c <_scanf_float+0x34c>
 800ddf2:	2945      	cmp	r1, #69	; 0x45
 800ddf4:	d00a      	beq.n	800de0c <_scanf_float+0x34c>
 800ddf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ddfa:	463a      	mov	r2, r7
 800ddfc:	4640      	mov	r0, r8
 800ddfe:	4798      	blx	r3
 800de00:	6923      	ldr	r3, [r4, #16]
 800de02:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800de06:	3b01      	subs	r3, #1
 800de08:	1eb5      	subs	r5, r6, #2
 800de0a:	6123      	str	r3, [r4, #16]
 800de0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800de10:	463a      	mov	r2, r7
 800de12:	4640      	mov	r0, r8
 800de14:	4798      	blx	r3
 800de16:	462e      	mov	r6, r5
 800de18:	6825      	ldr	r5, [r4, #0]
 800de1a:	f015 0510 	ands.w	r5, r5, #16
 800de1e:	d158      	bne.n	800ded2 <_scanf_float+0x412>
 800de20:	7035      	strb	r5, [r6, #0]
 800de22:	6823      	ldr	r3, [r4, #0]
 800de24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800de28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de2c:	d11c      	bne.n	800de68 <_scanf_float+0x3a8>
 800de2e:	9b01      	ldr	r3, [sp, #4]
 800de30:	454b      	cmp	r3, r9
 800de32:	eba3 0209 	sub.w	r2, r3, r9
 800de36:	d124      	bne.n	800de82 <_scanf_float+0x3c2>
 800de38:	2200      	movs	r2, #0
 800de3a:	4659      	mov	r1, fp
 800de3c:	4640      	mov	r0, r8
 800de3e:	f002 fc4f 	bl	80106e0 <_strtod_r>
 800de42:	9b03      	ldr	r3, [sp, #12]
 800de44:	6821      	ldr	r1, [r4, #0]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f011 0f02 	tst.w	r1, #2
 800de4c:	ec57 6b10 	vmov	r6, r7, d0
 800de50:	f103 0204 	add.w	r2, r3, #4
 800de54:	d020      	beq.n	800de98 <_scanf_float+0x3d8>
 800de56:	9903      	ldr	r1, [sp, #12]
 800de58:	600a      	str	r2, [r1, #0]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	e9c3 6700 	strd	r6, r7, [r3]
 800de60:	68e3      	ldr	r3, [r4, #12]
 800de62:	3301      	adds	r3, #1
 800de64:	60e3      	str	r3, [r4, #12]
 800de66:	e66c      	b.n	800db42 <_scanf_float+0x82>
 800de68:	9b04      	ldr	r3, [sp, #16]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d0e4      	beq.n	800de38 <_scanf_float+0x378>
 800de6e:	9905      	ldr	r1, [sp, #20]
 800de70:	230a      	movs	r3, #10
 800de72:	462a      	mov	r2, r5
 800de74:	3101      	adds	r1, #1
 800de76:	4640      	mov	r0, r8
 800de78:	f002 fcba 	bl	80107f0 <_strtol_r>
 800de7c:	9b04      	ldr	r3, [sp, #16]
 800de7e:	9e05      	ldr	r6, [sp, #20]
 800de80:	1ac2      	subs	r2, r0, r3
 800de82:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800de86:	429e      	cmp	r6, r3
 800de88:	bf28      	it	cs
 800de8a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800de8e:	4912      	ldr	r1, [pc, #72]	; (800ded8 <_scanf_float+0x418>)
 800de90:	4630      	mov	r0, r6
 800de92:	f000 f8f9 	bl	800e088 <siprintf>
 800de96:	e7cf      	b.n	800de38 <_scanf_float+0x378>
 800de98:	f011 0f04 	tst.w	r1, #4
 800de9c:	9903      	ldr	r1, [sp, #12]
 800de9e:	600a      	str	r2, [r1, #0]
 800dea0:	d1db      	bne.n	800de5a <_scanf_float+0x39a>
 800dea2:	f8d3 8000 	ldr.w	r8, [r3]
 800dea6:	ee10 2a10 	vmov	r2, s0
 800deaa:	ee10 0a10 	vmov	r0, s0
 800deae:	463b      	mov	r3, r7
 800deb0:	4639      	mov	r1, r7
 800deb2:	f7f2 fe63 	bl	8000b7c <__aeabi_dcmpun>
 800deb6:	b128      	cbz	r0, 800dec4 <_scanf_float+0x404>
 800deb8:	4808      	ldr	r0, [pc, #32]	; (800dedc <_scanf_float+0x41c>)
 800deba:	f000 f9d7 	bl	800e26c <nanf>
 800debe:	ed88 0a00 	vstr	s0, [r8]
 800dec2:	e7cd      	b.n	800de60 <_scanf_float+0x3a0>
 800dec4:	4630      	mov	r0, r6
 800dec6:	4639      	mov	r1, r7
 800dec8:	f7f2 feb6 	bl	8000c38 <__aeabi_d2f>
 800decc:	f8c8 0000 	str.w	r0, [r8]
 800ded0:	e7c6      	b.n	800de60 <_scanf_float+0x3a0>
 800ded2:	2500      	movs	r5, #0
 800ded4:	e635      	b.n	800db42 <_scanf_float+0x82>
 800ded6:	bf00      	nop
 800ded8:	08011ba9 	.word	0x08011ba9
 800dedc:	08011e3c 	.word	0x08011e3c

0800dee0 <std>:
 800dee0:	2300      	movs	r3, #0
 800dee2:	b510      	push	{r4, lr}
 800dee4:	4604      	mov	r4, r0
 800dee6:	e9c0 3300 	strd	r3, r3, [r0]
 800deea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800deee:	6083      	str	r3, [r0, #8]
 800def0:	8181      	strh	r1, [r0, #12]
 800def2:	6643      	str	r3, [r0, #100]	; 0x64
 800def4:	81c2      	strh	r2, [r0, #14]
 800def6:	6183      	str	r3, [r0, #24]
 800def8:	4619      	mov	r1, r3
 800defa:	2208      	movs	r2, #8
 800defc:	305c      	adds	r0, #92	; 0x5c
 800defe:	f000 f926 	bl	800e14e <memset>
 800df02:	4b0d      	ldr	r3, [pc, #52]	; (800df38 <std+0x58>)
 800df04:	6263      	str	r3, [r4, #36]	; 0x24
 800df06:	4b0d      	ldr	r3, [pc, #52]	; (800df3c <std+0x5c>)
 800df08:	62a3      	str	r3, [r4, #40]	; 0x28
 800df0a:	4b0d      	ldr	r3, [pc, #52]	; (800df40 <std+0x60>)
 800df0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800df0e:	4b0d      	ldr	r3, [pc, #52]	; (800df44 <std+0x64>)
 800df10:	6323      	str	r3, [r4, #48]	; 0x30
 800df12:	4b0d      	ldr	r3, [pc, #52]	; (800df48 <std+0x68>)
 800df14:	6224      	str	r4, [r4, #32]
 800df16:	429c      	cmp	r4, r3
 800df18:	d006      	beq.n	800df28 <std+0x48>
 800df1a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800df1e:	4294      	cmp	r4, r2
 800df20:	d002      	beq.n	800df28 <std+0x48>
 800df22:	33d0      	adds	r3, #208	; 0xd0
 800df24:	429c      	cmp	r4, r3
 800df26:	d105      	bne.n	800df34 <std+0x54>
 800df28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800df2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df30:	f000 b98a 	b.w	800e248 <__retarget_lock_init_recursive>
 800df34:	bd10      	pop	{r4, pc}
 800df36:	bf00      	nop
 800df38:	0800e0c9 	.word	0x0800e0c9
 800df3c:	0800e0eb 	.word	0x0800e0eb
 800df40:	0800e123 	.word	0x0800e123
 800df44:	0800e147 	.word	0x0800e147
 800df48:	20002138 	.word	0x20002138

0800df4c <stdio_exit_handler>:
 800df4c:	4a02      	ldr	r2, [pc, #8]	; (800df58 <stdio_exit_handler+0xc>)
 800df4e:	4903      	ldr	r1, [pc, #12]	; (800df5c <stdio_exit_handler+0x10>)
 800df50:	4803      	ldr	r0, [pc, #12]	; (800df60 <stdio_exit_handler+0x14>)
 800df52:	f000 b87b 	b.w	800e04c <_fwalk_sglue>
 800df56:	bf00      	nop
 800df58:	20000184 	.word	0x20000184
 800df5c:	08010e39 	.word	0x08010e39
 800df60:	20000190 	.word	0x20000190

0800df64 <cleanup_stdio>:
 800df64:	6841      	ldr	r1, [r0, #4]
 800df66:	4b0c      	ldr	r3, [pc, #48]	; (800df98 <cleanup_stdio+0x34>)
 800df68:	4299      	cmp	r1, r3
 800df6a:	b510      	push	{r4, lr}
 800df6c:	4604      	mov	r4, r0
 800df6e:	d001      	beq.n	800df74 <cleanup_stdio+0x10>
 800df70:	f002 ff62 	bl	8010e38 <_fflush_r>
 800df74:	68a1      	ldr	r1, [r4, #8]
 800df76:	4b09      	ldr	r3, [pc, #36]	; (800df9c <cleanup_stdio+0x38>)
 800df78:	4299      	cmp	r1, r3
 800df7a:	d002      	beq.n	800df82 <cleanup_stdio+0x1e>
 800df7c:	4620      	mov	r0, r4
 800df7e:	f002 ff5b 	bl	8010e38 <_fflush_r>
 800df82:	68e1      	ldr	r1, [r4, #12]
 800df84:	4b06      	ldr	r3, [pc, #24]	; (800dfa0 <cleanup_stdio+0x3c>)
 800df86:	4299      	cmp	r1, r3
 800df88:	d004      	beq.n	800df94 <cleanup_stdio+0x30>
 800df8a:	4620      	mov	r0, r4
 800df8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df90:	f002 bf52 	b.w	8010e38 <_fflush_r>
 800df94:	bd10      	pop	{r4, pc}
 800df96:	bf00      	nop
 800df98:	20002138 	.word	0x20002138
 800df9c:	200021a0 	.word	0x200021a0
 800dfa0:	20002208 	.word	0x20002208

0800dfa4 <global_stdio_init.part.0>:
 800dfa4:	b510      	push	{r4, lr}
 800dfa6:	4b0b      	ldr	r3, [pc, #44]	; (800dfd4 <global_stdio_init.part.0+0x30>)
 800dfa8:	4c0b      	ldr	r4, [pc, #44]	; (800dfd8 <global_stdio_init.part.0+0x34>)
 800dfaa:	4a0c      	ldr	r2, [pc, #48]	; (800dfdc <global_stdio_init.part.0+0x38>)
 800dfac:	601a      	str	r2, [r3, #0]
 800dfae:	4620      	mov	r0, r4
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	2104      	movs	r1, #4
 800dfb4:	f7ff ff94 	bl	800dee0 <std>
 800dfb8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	2109      	movs	r1, #9
 800dfc0:	f7ff ff8e 	bl	800dee0 <std>
 800dfc4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800dfc8:	2202      	movs	r2, #2
 800dfca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfce:	2112      	movs	r1, #18
 800dfd0:	f7ff bf86 	b.w	800dee0 <std>
 800dfd4:	20002270 	.word	0x20002270
 800dfd8:	20002138 	.word	0x20002138
 800dfdc:	0800df4d 	.word	0x0800df4d

0800dfe0 <__sfp_lock_acquire>:
 800dfe0:	4801      	ldr	r0, [pc, #4]	; (800dfe8 <__sfp_lock_acquire+0x8>)
 800dfe2:	f000 b932 	b.w	800e24a <__retarget_lock_acquire_recursive>
 800dfe6:	bf00      	nop
 800dfe8:	20002279 	.word	0x20002279

0800dfec <__sfp_lock_release>:
 800dfec:	4801      	ldr	r0, [pc, #4]	; (800dff4 <__sfp_lock_release+0x8>)
 800dfee:	f000 b92d 	b.w	800e24c <__retarget_lock_release_recursive>
 800dff2:	bf00      	nop
 800dff4:	20002279 	.word	0x20002279

0800dff8 <__sinit>:
 800dff8:	b510      	push	{r4, lr}
 800dffa:	4604      	mov	r4, r0
 800dffc:	f7ff fff0 	bl	800dfe0 <__sfp_lock_acquire>
 800e000:	6a23      	ldr	r3, [r4, #32]
 800e002:	b11b      	cbz	r3, 800e00c <__sinit+0x14>
 800e004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e008:	f7ff bff0 	b.w	800dfec <__sfp_lock_release>
 800e00c:	4b04      	ldr	r3, [pc, #16]	; (800e020 <__sinit+0x28>)
 800e00e:	6223      	str	r3, [r4, #32]
 800e010:	4b04      	ldr	r3, [pc, #16]	; (800e024 <__sinit+0x2c>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d1f5      	bne.n	800e004 <__sinit+0xc>
 800e018:	f7ff ffc4 	bl	800dfa4 <global_stdio_init.part.0>
 800e01c:	e7f2      	b.n	800e004 <__sinit+0xc>
 800e01e:	bf00      	nop
 800e020:	0800df65 	.word	0x0800df65
 800e024:	20002270 	.word	0x20002270

0800e028 <fiprintf>:
 800e028:	b40e      	push	{r1, r2, r3}
 800e02a:	b503      	push	{r0, r1, lr}
 800e02c:	4601      	mov	r1, r0
 800e02e:	ab03      	add	r3, sp, #12
 800e030:	4805      	ldr	r0, [pc, #20]	; (800e048 <fiprintf+0x20>)
 800e032:	f853 2b04 	ldr.w	r2, [r3], #4
 800e036:	6800      	ldr	r0, [r0, #0]
 800e038:	9301      	str	r3, [sp, #4]
 800e03a:	f002 fd5d 	bl	8010af8 <_vfiprintf_r>
 800e03e:	b002      	add	sp, #8
 800e040:	f85d eb04 	ldr.w	lr, [sp], #4
 800e044:	b003      	add	sp, #12
 800e046:	4770      	bx	lr
 800e048:	200001dc 	.word	0x200001dc

0800e04c <_fwalk_sglue>:
 800e04c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e050:	4607      	mov	r7, r0
 800e052:	4688      	mov	r8, r1
 800e054:	4614      	mov	r4, r2
 800e056:	2600      	movs	r6, #0
 800e058:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e05c:	f1b9 0901 	subs.w	r9, r9, #1
 800e060:	d505      	bpl.n	800e06e <_fwalk_sglue+0x22>
 800e062:	6824      	ldr	r4, [r4, #0]
 800e064:	2c00      	cmp	r4, #0
 800e066:	d1f7      	bne.n	800e058 <_fwalk_sglue+0xc>
 800e068:	4630      	mov	r0, r6
 800e06a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e06e:	89ab      	ldrh	r3, [r5, #12]
 800e070:	2b01      	cmp	r3, #1
 800e072:	d907      	bls.n	800e084 <_fwalk_sglue+0x38>
 800e074:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e078:	3301      	adds	r3, #1
 800e07a:	d003      	beq.n	800e084 <_fwalk_sglue+0x38>
 800e07c:	4629      	mov	r1, r5
 800e07e:	4638      	mov	r0, r7
 800e080:	47c0      	blx	r8
 800e082:	4306      	orrs	r6, r0
 800e084:	3568      	adds	r5, #104	; 0x68
 800e086:	e7e9      	b.n	800e05c <_fwalk_sglue+0x10>

0800e088 <siprintf>:
 800e088:	b40e      	push	{r1, r2, r3}
 800e08a:	b500      	push	{lr}
 800e08c:	b09c      	sub	sp, #112	; 0x70
 800e08e:	ab1d      	add	r3, sp, #116	; 0x74
 800e090:	9002      	str	r0, [sp, #8]
 800e092:	9006      	str	r0, [sp, #24]
 800e094:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e098:	4809      	ldr	r0, [pc, #36]	; (800e0c0 <siprintf+0x38>)
 800e09a:	9107      	str	r1, [sp, #28]
 800e09c:	9104      	str	r1, [sp, #16]
 800e09e:	4909      	ldr	r1, [pc, #36]	; (800e0c4 <siprintf+0x3c>)
 800e0a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0a4:	9105      	str	r1, [sp, #20]
 800e0a6:	6800      	ldr	r0, [r0, #0]
 800e0a8:	9301      	str	r3, [sp, #4]
 800e0aa:	a902      	add	r1, sp, #8
 800e0ac:	f002 fbfc 	bl	80108a8 <_svfiprintf_r>
 800e0b0:	9b02      	ldr	r3, [sp, #8]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	701a      	strb	r2, [r3, #0]
 800e0b6:	b01c      	add	sp, #112	; 0x70
 800e0b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0bc:	b003      	add	sp, #12
 800e0be:	4770      	bx	lr
 800e0c0:	200001dc 	.word	0x200001dc
 800e0c4:	ffff0208 	.word	0xffff0208

0800e0c8 <__sread>:
 800e0c8:	b510      	push	{r4, lr}
 800e0ca:	460c      	mov	r4, r1
 800e0cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0d0:	f000 f86c 	bl	800e1ac <_read_r>
 800e0d4:	2800      	cmp	r0, #0
 800e0d6:	bfab      	itete	ge
 800e0d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e0da:	89a3      	ldrhlt	r3, [r4, #12]
 800e0dc:	181b      	addge	r3, r3, r0
 800e0de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e0e2:	bfac      	ite	ge
 800e0e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e0e6:	81a3      	strhlt	r3, [r4, #12]
 800e0e8:	bd10      	pop	{r4, pc}

0800e0ea <__swrite>:
 800e0ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ee:	461f      	mov	r7, r3
 800e0f0:	898b      	ldrh	r3, [r1, #12]
 800e0f2:	05db      	lsls	r3, r3, #23
 800e0f4:	4605      	mov	r5, r0
 800e0f6:	460c      	mov	r4, r1
 800e0f8:	4616      	mov	r6, r2
 800e0fa:	d505      	bpl.n	800e108 <__swrite+0x1e>
 800e0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e100:	2302      	movs	r3, #2
 800e102:	2200      	movs	r2, #0
 800e104:	f000 f840 	bl	800e188 <_lseek_r>
 800e108:	89a3      	ldrh	r3, [r4, #12]
 800e10a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e10e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e112:	81a3      	strh	r3, [r4, #12]
 800e114:	4632      	mov	r2, r6
 800e116:	463b      	mov	r3, r7
 800e118:	4628      	mov	r0, r5
 800e11a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e11e:	f000 b857 	b.w	800e1d0 <_write_r>

0800e122 <__sseek>:
 800e122:	b510      	push	{r4, lr}
 800e124:	460c      	mov	r4, r1
 800e126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e12a:	f000 f82d 	bl	800e188 <_lseek_r>
 800e12e:	1c43      	adds	r3, r0, #1
 800e130:	89a3      	ldrh	r3, [r4, #12]
 800e132:	bf15      	itete	ne
 800e134:	6560      	strne	r0, [r4, #84]	; 0x54
 800e136:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e13a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e13e:	81a3      	strheq	r3, [r4, #12]
 800e140:	bf18      	it	ne
 800e142:	81a3      	strhne	r3, [r4, #12]
 800e144:	bd10      	pop	{r4, pc}

0800e146 <__sclose>:
 800e146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e14a:	f000 b80d 	b.w	800e168 <_close_r>

0800e14e <memset>:
 800e14e:	4402      	add	r2, r0
 800e150:	4603      	mov	r3, r0
 800e152:	4293      	cmp	r3, r2
 800e154:	d100      	bne.n	800e158 <memset+0xa>
 800e156:	4770      	bx	lr
 800e158:	f803 1b01 	strb.w	r1, [r3], #1
 800e15c:	e7f9      	b.n	800e152 <memset+0x4>
	...

0800e160 <_localeconv_r>:
 800e160:	4800      	ldr	r0, [pc, #0]	; (800e164 <_localeconv_r+0x4>)
 800e162:	4770      	bx	lr
 800e164:	200002d0 	.word	0x200002d0

0800e168 <_close_r>:
 800e168:	b538      	push	{r3, r4, r5, lr}
 800e16a:	4d06      	ldr	r5, [pc, #24]	; (800e184 <_close_r+0x1c>)
 800e16c:	2300      	movs	r3, #0
 800e16e:	4604      	mov	r4, r0
 800e170:	4608      	mov	r0, r1
 800e172:	602b      	str	r3, [r5, #0]
 800e174:	f7f4 f8d7 	bl	8002326 <_close>
 800e178:	1c43      	adds	r3, r0, #1
 800e17a:	d102      	bne.n	800e182 <_close_r+0x1a>
 800e17c:	682b      	ldr	r3, [r5, #0]
 800e17e:	b103      	cbz	r3, 800e182 <_close_r+0x1a>
 800e180:	6023      	str	r3, [r4, #0]
 800e182:	bd38      	pop	{r3, r4, r5, pc}
 800e184:	20002274 	.word	0x20002274

0800e188 <_lseek_r>:
 800e188:	b538      	push	{r3, r4, r5, lr}
 800e18a:	4d07      	ldr	r5, [pc, #28]	; (800e1a8 <_lseek_r+0x20>)
 800e18c:	4604      	mov	r4, r0
 800e18e:	4608      	mov	r0, r1
 800e190:	4611      	mov	r1, r2
 800e192:	2200      	movs	r2, #0
 800e194:	602a      	str	r2, [r5, #0]
 800e196:	461a      	mov	r2, r3
 800e198:	f7f4 f8ec 	bl	8002374 <_lseek>
 800e19c:	1c43      	adds	r3, r0, #1
 800e19e:	d102      	bne.n	800e1a6 <_lseek_r+0x1e>
 800e1a0:	682b      	ldr	r3, [r5, #0]
 800e1a2:	b103      	cbz	r3, 800e1a6 <_lseek_r+0x1e>
 800e1a4:	6023      	str	r3, [r4, #0]
 800e1a6:	bd38      	pop	{r3, r4, r5, pc}
 800e1a8:	20002274 	.word	0x20002274

0800e1ac <_read_r>:
 800e1ac:	b538      	push	{r3, r4, r5, lr}
 800e1ae:	4d07      	ldr	r5, [pc, #28]	; (800e1cc <_read_r+0x20>)
 800e1b0:	4604      	mov	r4, r0
 800e1b2:	4608      	mov	r0, r1
 800e1b4:	4611      	mov	r1, r2
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	602a      	str	r2, [r5, #0]
 800e1ba:	461a      	mov	r2, r3
 800e1bc:	f7f4 f87a 	bl	80022b4 <_read>
 800e1c0:	1c43      	adds	r3, r0, #1
 800e1c2:	d102      	bne.n	800e1ca <_read_r+0x1e>
 800e1c4:	682b      	ldr	r3, [r5, #0]
 800e1c6:	b103      	cbz	r3, 800e1ca <_read_r+0x1e>
 800e1c8:	6023      	str	r3, [r4, #0]
 800e1ca:	bd38      	pop	{r3, r4, r5, pc}
 800e1cc:	20002274 	.word	0x20002274

0800e1d0 <_write_r>:
 800e1d0:	b538      	push	{r3, r4, r5, lr}
 800e1d2:	4d07      	ldr	r5, [pc, #28]	; (800e1f0 <_write_r+0x20>)
 800e1d4:	4604      	mov	r4, r0
 800e1d6:	4608      	mov	r0, r1
 800e1d8:	4611      	mov	r1, r2
 800e1da:	2200      	movs	r2, #0
 800e1dc:	602a      	str	r2, [r5, #0]
 800e1de:	461a      	mov	r2, r3
 800e1e0:	f7f4 f885 	bl	80022ee <_write>
 800e1e4:	1c43      	adds	r3, r0, #1
 800e1e6:	d102      	bne.n	800e1ee <_write_r+0x1e>
 800e1e8:	682b      	ldr	r3, [r5, #0]
 800e1ea:	b103      	cbz	r3, 800e1ee <_write_r+0x1e>
 800e1ec:	6023      	str	r3, [r4, #0]
 800e1ee:	bd38      	pop	{r3, r4, r5, pc}
 800e1f0:	20002274 	.word	0x20002274

0800e1f4 <__errno>:
 800e1f4:	4b01      	ldr	r3, [pc, #4]	; (800e1fc <__errno+0x8>)
 800e1f6:	6818      	ldr	r0, [r3, #0]
 800e1f8:	4770      	bx	lr
 800e1fa:	bf00      	nop
 800e1fc:	200001dc 	.word	0x200001dc

0800e200 <__libc_init_array>:
 800e200:	b570      	push	{r4, r5, r6, lr}
 800e202:	4d0d      	ldr	r5, [pc, #52]	; (800e238 <__libc_init_array+0x38>)
 800e204:	4c0d      	ldr	r4, [pc, #52]	; (800e23c <__libc_init_array+0x3c>)
 800e206:	1b64      	subs	r4, r4, r5
 800e208:	10a4      	asrs	r4, r4, #2
 800e20a:	2600      	movs	r6, #0
 800e20c:	42a6      	cmp	r6, r4
 800e20e:	d109      	bne.n	800e224 <__libc_init_array+0x24>
 800e210:	4d0b      	ldr	r5, [pc, #44]	; (800e240 <__libc_init_array+0x40>)
 800e212:	4c0c      	ldr	r4, [pc, #48]	; (800e244 <__libc_init_array+0x44>)
 800e214:	f003 fbc6 	bl	80119a4 <_init>
 800e218:	1b64      	subs	r4, r4, r5
 800e21a:	10a4      	asrs	r4, r4, #2
 800e21c:	2600      	movs	r6, #0
 800e21e:	42a6      	cmp	r6, r4
 800e220:	d105      	bne.n	800e22e <__libc_init_array+0x2e>
 800e222:	bd70      	pop	{r4, r5, r6, pc}
 800e224:	f855 3b04 	ldr.w	r3, [r5], #4
 800e228:	4798      	blx	r3
 800e22a:	3601      	adds	r6, #1
 800e22c:	e7ee      	b.n	800e20c <__libc_init_array+0xc>
 800e22e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e232:	4798      	blx	r3
 800e234:	3601      	adds	r6, #1
 800e236:	e7f2      	b.n	800e21e <__libc_init_array+0x1e>
 800e238:	08011ea8 	.word	0x08011ea8
 800e23c:	08011ea8 	.word	0x08011ea8
 800e240:	08011ea8 	.word	0x08011ea8
 800e244:	08011eac 	.word	0x08011eac

0800e248 <__retarget_lock_init_recursive>:
 800e248:	4770      	bx	lr

0800e24a <__retarget_lock_acquire_recursive>:
 800e24a:	4770      	bx	lr

0800e24c <__retarget_lock_release_recursive>:
 800e24c:	4770      	bx	lr

0800e24e <memcpy>:
 800e24e:	440a      	add	r2, r1
 800e250:	4291      	cmp	r1, r2
 800e252:	f100 33ff 	add.w	r3, r0, #4294967295
 800e256:	d100      	bne.n	800e25a <memcpy+0xc>
 800e258:	4770      	bx	lr
 800e25a:	b510      	push	{r4, lr}
 800e25c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e260:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e264:	4291      	cmp	r1, r2
 800e266:	d1f9      	bne.n	800e25c <memcpy+0xe>
 800e268:	bd10      	pop	{r4, pc}
	...

0800e26c <nanf>:
 800e26c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e274 <nanf+0x8>
 800e270:	4770      	bx	lr
 800e272:	bf00      	nop
 800e274:	7fc00000 	.word	0x7fc00000

0800e278 <quorem>:
 800e278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e27c:	6903      	ldr	r3, [r0, #16]
 800e27e:	690c      	ldr	r4, [r1, #16]
 800e280:	42a3      	cmp	r3, r4
 800e282:	4607      	mov	r7, r0
 800e284:	db7e      	blt.n	800e384 <quorem+0x10c>
 800e286:	3c01      	subs	r4, #1
 800e288:	f101 0814 	add.w	r8, r1, #20
 800e28c:	f100 0514 	add.w	r5, r0, #20
 800e290:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e294:	9301      	str	r3, [sp, #4]
 800e296:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e29a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e29e:	3301      	adds	r3, #1
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e2a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e2aa:	fbb2 f6f3 	udiv	r6, r2, r3
 800e2ae:	d331      	bcc.n	800e314 <quorem+0x9c>
 800e2b0:	f04f 0e00 	mov.w	lr, #0
 800e2b4:	4640      	mov	r0, r8
 800e2b6:	46ac      	mov	ip, r5
 800e2b8:	46f2      	mov	sl, lr
 800e2ba:	f850 2b04 	ldr.w	r2, [r0], #4
 800e2be:	b293      	uxth	r3, r2
 800e2c0:	fb06 e303 	mla	r3, r6, r3, lr
 800e2c4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e2c8:	0c1a      	lsrs	r2, r3, #16
 800e2ca:	b29b      	uxth	r3, r3
 800e2cc:	ebaa 0303 	sub.w	r3, sl, r3
 800e2d0:	f8dc a000 	ldr.w	sl, [ip]
 800e2d4:	fa13 f38a 	uxtah	r3, r3, sl
 800e2d8:	fb06 220e 	mla	r2, r6, lr, r2
 800e2dc:	9300      	str	r3, [sp, #0]
 800e2de:	9b00      	ldr	r3, [sp, #0]
 800e2e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e2e4:	b292      	uxth	r2, r2
 800e2e6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e2ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e2ee:	f8bd 3000 	ldrh.w	r3, [sp]
 800e2f2:	4581      	cmp	r9, r0
 800e2f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e2f8:	f84c 3b04 	str.w	r3, [ip], #4
 800e2fc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e300:	d2db      	bcs.n	800e2ba <quorem+0x42>
 800e302:	f855 300b 	ldr.w	r3, [r5, fp]
 800e306:	b92b      	cbnz	r3, 800e314 <quorem+0x9c>
 800e308:	9b01      	ldr	r3, [sp, #4]
 800e30a:	3b04      	subs	r3, #4
 800e30c:	429d      	cmp	r5, r3
 800e30e:	461a      	mov	r2, r3
 800e310:	d32c      	bcc.n	800e36c <quorem+0xf4>
 800e312:	613c      	str	r4, [r7, #16]
 800e314:	4638      	mov	r0, r7
 800e316:	f001 f9ef 	bl	800f6f8 <__mcmp>
 800e31a:	2800      	cmp	r0, #0
 800e31c:	db22      	blt.n	800e364 <quorem+0xec>
 800e31e:	3601      	adds	r6, #1
 800e320:	4629      	mov	r1, r5
 800e322:	2000      	movs	r0, #0
 800e324:	f858 2b04 	ldr.w	r2, [r8], #4
 800e328:	f8d1 c000 	ldr.w	ip, [r1]
 800e32c:	b293      	uxth	r3, r2
 800e32e:	1ac3      	subs	r3, r0, r3
 800e330:	0c12      	lsrs	r2, r2, #16
 800e332:	fa13 f38c 	uxtah	r3, r3, ip
 800e336:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e33a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e33e:	b29b      	uxth	r3, r3
 800e340:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e344:	45c1      	cmp	r9, r8
 800e346:	f841 3b04 	str.w	r3, [r1], #4
 800e34a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e34e:	d2e9      	bcs.n	800e324 <quorem+0xac>
 800e350:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e354:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e358:	b922      	cbnz	r2, 800e364 <quorem+0xec>
 800e35a:	3b04      	subs	r3, #4
 800e35c:	429d      	cmp	r5, r3
 800e35e:	461a      	mov	r2, r3
 800e360:	d30a      	bcc.n	800e378 <quorem+0x100>
 800e362:	613c      	str	r4, [r7, #16]
 800e364:	4630      	mov	r0, r6
 800e366:	b003      	add	sp, #12
 800e368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e36c:	6812      	ldr	r2, [r2, #0]
 800e36e:	3b04      	subs	r3, #4
 800e370:	2a00      	cmp	r2, #0
 800e372:	d1ce      	bne.n	800e312 <quorem+0x9a>
 800e374:	3c01      	subs	r4, #1
 800e376:	e7c9      	b.n	800e30c <quorem+0x94>
 800e378:	6812      	ldr	r2, [r2, #0]
 800e37a:	3b04      	subs	r3, #4
 800e37c:	2a00      	cmp	r2, #0
 800e37e:	d1f0      	bne.n	800e362 <quorem+0xea>
 800e380:	3c01      	subs	r4, #1
 800e382:	e7eb      	b.n	800e35c <quorem+0xe4>
 800e384:	2000      	movs	r0, #0
 800e386:	e7ee      	b.n	800e366 <quorem+0xee>

0800e388 <_dtoa_r>:
 800e388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e38c:	ed2d 8b04 	vpush	{d8-d9}
 800e390:	69c5      	ldr	r5, [r0, #28]
 800e392:	b093      	sub	sp, #76	; 0x4c
 800e394:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e398:	ec57 6b10 	vmov	r6, r7, d0
 800e39c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e3a0:	9107      	str	r1, [sp, #28]
 800e3a2:	4604      	mov	r4, r0
 800e3a4:	920a      	str	r2, [sp, #40]	; 0x28
 800e3a6:	930d      	str	r3, [sp, #52]	; 0x34
 800e3a8:	b975      	cbnz	r5, 800e3c8 <_dtoa_r+0x40>
 800e3aa:	2010      	movs	r0, #16
 800e3ac:	f000 fe2a 	bl	800f004 <malloc>
 800e3b0:	4602      	mov	r2, r0
 800e3b2:	61e0      	str	r0, [r4, #28]
 800e3b4:	b920      	cbnz	r0, 800e3c0 <_dtoa_r+0x38>
 800e3b6:	4bae      	ldr	r3, [pc, #696]	; (800e670 <_dtoa_r+0x2e8>)
 800e3b8:	21ef      	movs	r1, #239	; 0xef
 800e3ba:	48ae      	ldr	r0, [pc, #696]	; (800e674 <_dtoa_r+0x2ec>)
 800e3bc:	f002 fe40 	bl	8011040 <__assert_func>
 800e3c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e3c4:	6005      	str	r5, [r0, #0]
 800e3c6:	60c5      	str	r5, [r0, #12]
 800e3c8:	69e3      	ldr	r3, [r4, #28]
 800e3ca:	6819      	ldr	r1, [r3, #0]
 800e3cc:	b151      	cbz	r1, 800e3e4 <_dtoa_r+0x5c>
 800e3ce:	685a      	ldr	r2, [r3, #4]
 800e3d0:	604a      	str	r2, [r1, #4]
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	4093      	lsls	r3, r2
 800e3d6:	608b      	str	r3, [r1, #8]
 800e3d8:	4620      	mov	r0, r4
 800e3da:	f000 ff07 	bl	800f1ec <_Bfree>
 800e3de:	69e3      	ldr	r3, [r4, #28]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	601a      	str	r2, [r3, #0]
 800e3e4:	1e3b      	subs	r3, r7, #0
 800e3e6:	bfbb      	ittet	lt
 800e3e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e3ec:	9303      	strlt	r3, [sp, #12]
 800e3ee:	2300      	movge	r3, #0
 800e3f0:	2201      	movlt	r2, #1
 800e3f2:	bfac      	ite	ge
 800e3f4:	f8c8 3000 	strge.w	r3, [r8]
 800e3f8:	f8c8 2000 	strlt.w	r2, [r8]
 800e3fc:	4b9e      	ldr	r3, [pc, #632]	; (800e678 <_dtoa_r+0x2f0>)
 800e3fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e402:	ea33 0308 	bics.w	r3, r3, r8
 800e406:	d11b      	bne.n	800e440 <_dtoa_r+0xb8>
 800e408:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e40a:	f242 730f 	movw	r3, #9999	; 0x270f
 800e40e:	6013      	str	r3, [r2, #0]
 800e410:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e414:	4333      	orrs	r3, r6
 800e416:	f000 8593 	beq.w	800ef40 <_dtoa_r+0xbb8>
 800e41a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e41c:	b963      	cbnz	r3, 800e438 <_dtoa_r+0xb0>
 800e41e:	4b97      	ldr	r3, [pc, #604]	; (800e67c <_dtoa_r+0x2f4>)
 800e420:	e027      	b.n	800e472 <_dtoa_r+0xea>
 800e422:	4b97      	ldr	r3, [pc, #604]	; (800e680 <_dtoa_r+0x2f8>)
 800e424:	9300      	str	r3, [sp, #0]
 800e426:	3308      	adds	r3, #8
 800e428:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e42a:	6013      	str	r3, [r2, #0]
 800e42c:	9800      	ldr	r0, [sp, #0]
 800e42e:	b013      	add	sp, #76	; 0x4c
 800e430:	ecbd 8b04 	vpop	{d8-d9}
 800e434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e438:	4b90      	ldr	r3, [pc, #576]	; (800e67c <_dtoa_r+0x2f4>)
 800e43a:	9300      	str	r3, [sp, #0]
 800e43c:	3303      	adds	r3, #3
 800e43e:	e7f3      	b.n	800e428 <_dtoa_r+0xa0>
 800e440:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e444:	2200      	movs	r2, #0
 800e446:	ec51 0b17 	vmov	r0, r1, d7
 800e44a:	eeb0 8a47 	vmov.f32	s16, s14
 800e44e:	eef0 8a67 	vmov.f32	s17, s15
 800e452:	2300      	movs	r3, #0
 800e454:	f7f2 fb60 	bl	8000b18 <__aeabi_dcmpeq>
 800e458:	4681      	mov	r9, r0
 800e45a:	b160      	cbz	r0, 800e476 <_dtoa_r+0xee>
 800e45c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e45e:	2301      	movs	r3, #1
 800e460:	6013      	str	r3, [r2, #0]
 800e462:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e464:	2b00      	cmp	r3, #0
 800e466:	f000 8568 	beq.w	800ef3a <_dtoa_r+0xbb2>
 800e46a:	4b86      	ldr	r3, [pc, #536]	; (800e684 <_dtoa_r+0x2fc>)
 800e46c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e46e:	6013      	str	r3, [r2, #0]
 800e470:	3b01      	subs	r3, #1
 800e472:	9300      	str	r3, [sp, #0]
 800e474:	e7da      	b.n	800e42c <_dtoa_r+0xa4>
 800e476:	aa10      	add	r2, sp, #64	; 0x40
 800e478:	a911      	add	r1, sp, #68	; 0x44
 800e47a:	4620      	mov	r0, r4
 800e47c:	eeb0 0a48 	vmov.f32	s0, s16
 800e480:	eef0 0a68 	vmov.f32	s1, s17
 800e484:	f001 fa4e 	bl	800f924 <__d2b>
 800e488:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e48c:	4682      	mov	sl, r0
 800e48e:	2d00      	cmp	r5, #0
 800e490:	d07f      	beq.n	800e592 <_dtoa_r+0x20a>
 800e492:	ee18 3a90 	vmov	r3, s17
 800e496:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e49a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e49e:	ec51 0b18 	vmov	r0, r1, d8
 800e4a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e4a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e4aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	4b75      	ldr	r3, [pc, #468]	; (800e688 <_dtoa_r+0x300>)
 800e4b4:	f7f1 ff10 	bl	80002d8 <__aeabi_dsub>
 800e4b8:	a367      	add	r3, pc, #412	; (adr r3, 800e658 <_dtoa_r+0x2d0>)
 800e4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4be:	f7f2 f8c3 	bl	8000648 <__aeabi_dmul>
 800e4c2:	a367      	add	r3, pc, #412	; (adr r3, 800e660 <_dtoa_r+0x2d8>)
 800e4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c8:	f7f1 ff08 	bl	80002dc <__adddf3>
 800e4cc:	4606      	mov	r6, r0
 800e4ce:	4628      	mov	r0, r5
 800e4d0:	460f      	mov	r7, r1
 800e4d2:	f7f2 f84f 	bl	8000574 <__aeabi_i2d>
 800e4d6:	a364      	add	r3, pc, #400	; (adr r3, 800e668 <_dtoa_r+0x2e0>)
 800e4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4dc:	f7f2 f8b4 	bl	8000648 <__aeabi_dmul>
 800e4e0:	4602      	mov	r2, r0
 800e4e2:	460b      	mov	r3, r1
 800e4e4:	4630      	mov	r0, r6
 800e4e6:	4639      	mov	r1, r7
 800e4e8:	f7f1 fef8 	bl	80002dc <__adddf3>
 800e4ec:	4606      	mov	r6, r0
 800e4ee:	460f      	mov	r7, r1
 800e4f0:	f7f2 fb5a 	bl	8000ba8 <__aeabi_d2iz>
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	4683      	mov	fp, r0
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	4630      	mov	r0, r6
 800e4fc:	4639      	mov	r1, r7
 800e4fe:	f7f2 fb15 	bl	8000b2c <__aeabi_dcmplt>
 800e502:	b148      	cbz	r0, 800e518 <_dtoa_r+0x190>
 800e504:	4658      	mov	r0, fp
 800e506:	f7f2 f835 	bl	8000574 <__aeabi_i2d>
 800e50a:	4632      	mov	r2, r6
 800e50c:	463b      	mov	r3, r7
 800e50e:	f7f2 fb03 	bl	8000b18 <__aeabi_dcmpeq>
 800e512:	b908      	cbnz	r0, 800e518 <_dtoa_r+0x190>
 800e514:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e518:	f1bb 0f16 	cmp.w	fp, #22
 800e51c:	d857      	bhi.n	800e5ce <_dtoa_r+0x246>
 800e51e:	4b5b      	ldr	r3, [pc, #364]	; (800e68c <_dtoa_r+0x304>)
 800e520:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e528:	ec51 0b18 	vmov	r0, r1, d8
 800e52c:	f7f2 fafe 	bl	8000b2c <__aeabi_dcmplt>
 800e530:	2800      	cmp	r0, #0
 800e532:	d04e      	beq.n	800e5d2 <_dtoa_r+0x24a>
 800e534:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e538:	2300      	movs	r3, #0
 800e53a:	930c      	str	r3, [sp, #48]	; 0x30
 800e53c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e53e:	1b5b      	subs	r3, r3, r5
 800e540:	1e5a      	subs	r2, r3, #1
 800e542:	bf45      	ittet	mi
 800e544:	f1c3 0301 	rsbmi	r3, r3, #1
 800e548:	9305      	strmi	r3, [sp, #20]
 800e54a:	2300      	movpl	r3, #0
 800e54c:	2300      	movmi	r3, #0
 800e54e:	9206      	str	r2, [sp, #24]
 800e550:	bf54      	ite	pl
 800e552:	9305      	strpl	r3, [sp, #20]
 800e554:	9306      	strmi	r3, [sp, #24]
 800e556:	f1bb 0f00 	cmp.w	fp, #0
 800e55a:	db3c      	blt.n	800e5d6 <_dtoa_r+0x24e>
 800e55c:	9b06      	ldr	r3, [sp, #24]
 800e55e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e562:	445b      	add	r3, fp
 800e564:	9306      	str	r3, [sp, #24]
 800e566:	2300      	movs	r3, #0
 800e568:	9308      	str	r3, [sp, #32]
 800e56a:	9b07      	ldr	r3, [sp, #28]
 800e56c:	2b09      	cmp	r3, #9
 800e56e:	d868      	bhi.n	800e642 <_dtoa_r+0x2ba>
 800e570:	2b05      	cmp	r3, #5
 800e572:	bfc4      	itt	gt
 800e574:	3b04      	subgt	r3, #4
 800e576:	9307      	strgt	r3, [sp, #28]
 800e578:	9b07      	ldr	r3, [sp, #28]
 800e57a:	f1a3 0302 	sub.w	r3, r3, #2
 800e57e:	bfcc      	ite	gt
 800e580:	2500      	movgt	r5, #0
 800e582:	2501      	movle	r5, #1
 800e584:	2b03      	cmp	r3, #3
 800e586:	f200 8085 	bhi.w	800e694 <_dtoa_r+0x30c>
 800e58a:	e8df f003 	tbb	[pc, r3]
 800e58e:	3b2e      	.short	0x3b2e
 800e590:	5839      	.short	0x5839
 800e592:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e596:	441d      	add	r5, r3
 800e598:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e59c:	2b20      	cmp	r3, #32
 800e59e:	bfc1      	itttt	gt
 800e5a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e5a4:	fa08 f803 	lslgt.w	r8, r8, r3
 800e5a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e5ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e5b0:	bfd6      	itet	le
 800e5b2:	f1c3 0320 	rsble	r3, r3, #32
 800e5b6:	ea48 0003 	orrgt.w	r0, r8, r3
 800e5ba:	fa06 f003 	lslle.w	r0, r6, r3
 800e5be:	f7f1 ffc9 	bl	8000554 <__aeabi_ui2d>
 800e5c2:	2201      	movs	r2, #1
 800e5c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e5c8:	3d01      	subs	r5, #1
 800e5ca:	920e      	str	r2, [sp, #56]	; 0x38
 800e5cc:	e76f      	b.n	800e4ae <_dtoa_r+0x126>
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	e7b3      	b.n	800e53a <_dtoa_r+0x1b2>
 800e5d2:	900c      	str	r0, [sp, #48]	; 0x30
 800e5d4:	e7b2      	b.n	800e53c <_dtoa_r+0x1b4>
 800e5d6:	9b05      	ldr	r3, [sp, #20]
 800e5d8:	eba3 030b 	sub.w	r3, r3, fp
 800e5dc:	9305      	str	r3, [sp, #20]
 800e5de:	f1cb 0300 	rsb	r3, fp, #0
 800e5e2:	9308      	str	r3, [sp, #32]
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800e5e8:	e7bf      	b.n	800e56a <_dtoa_r+0x1e2>
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	9309      	str	r3, [sp, #36]	; 0x24
 800e5ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	dc52      	bgt.n	800e69a <_dtoa_r+0x312>
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	9301      	str	r3, [sp, #4]
 800e5f8:	9304      	str	r3, [sp, #16]
 800e5fa:	461a      	mov	r2, r3
 800e5fc:	920a      	str	r2, [sp, #40]	; 0x28
 800e5fe:	e00b      	b.n	800e618 <_dtoa_r+0x290>
 800e600:	2301      	movs	r3, #1
 800e602:	e7f3      	b.n	800e5ec <_dtoa_r+0x264>
 800e604:	2300      	movs	r3, #0
 800e606:	9309      	str	r3, [sp, #36]	; 0x24
 800e608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e60a:	445b      	add	r3, fp
 800e60c:	9301      	str	r3, [sp, #4]
 800e60e:	3301      	adds	r3, #1
 800e610:	2b01      	cmp	r3, #1
 800e612:	9304      	str	r3, [sp, #16]
 800e614:	bfb8      	it	lt
 800e616:	2301      	movlt	r3, #1
 800e618:	69e0      	ldr	r0, [r4, #28]
 800e61a:	2100      	movs	r1, #0
 800e61c:	2204      	movs	r2, #4
 800e61e:	f102 0614 	add.w	r6, r2, #20
 800e622:	429e      	cmp	r6, r3
 800e624:	d93d      	bls.n	800e6a2 <_dtoa_r+0x31a>
 800e626:	6041      	str	r1, [r0, #4]
 800e628:	4620      	mov	r0, r4
 800e62a:	f000 fd9f 	bl	800f16c <_Balloc>
 800e62e:	9000      	str	r0, [sp, #0]
 800e630:	2800      	cmp	r0, #0
 800e632:	d139      	bne.n	800e6a8 <_dtoa_r+0x320>
 800e634:	4b16      	ldr	r3, [pc, #88]	; (800e690 <_dtoa_r+0x308>)
 800e636:	4602      	mov	r2, r0
 800e638:	f240 11af 	movw	r1, #431	; 0x1af
 800e63c:	e6bd      	b.n	800e3ba <_dtoa_r+0x32>
 800e63e:	2301      	movs	r3, #1
 800e640:	e7e1      	b.n	800e606 <_dtoa_r+0x27e>
 800e642:	2501      	movs	r5, #1
 800e644:	2300      	movs	r3, #0
 800e646:	9307      	str	r3, [sp, #28]
 800e648:	9509      	str	r5, [sp, #36]	; 0x24
 800e64a:	f04f 33ff 	mov.w	r3, #4294967295
 800e64e:	9301      	str	r3, [sp, #4]
 800e650:	9304      	str	r3, [sp, #16]
 800e652:	2200      	movs	r2, #0
 800e654:	2312      	movs	r3, #18
 800e656:	e7d1      	b.n	800e5fc <_dtoa_r+0x274>
 800e658:	636f4361 	.word	0x636f4361
 800e65c:	3fd287a7 	.word	0x3fd287a7
 800e660:	8b60c8b3 	.word	0x8b60c8b3
 800e664:	3fc68a28 	.word	0x3fc68a28
 800e668:	509f79fb 	.word	0x509f79fb
 800e66c:	3fd34413 	.word	0x3fd34413
 800e670:	08011bbb 	.word	0x08011bbb
 800e674:	08011bd2 	.word	0x08011bd2
 800e678:	7ff00000 	.word	0x7ff00000
 800e67c:	08011bb7 	.word	0x08011bb7
 800e680:	08011bae 	.word	0x08011bae
 800e684:	08011b86 	.word	0x08011b86
 800e688:	3ff80000 	.word	0x3ff80000
 800e68c:	08011cc0 	.word	0x08011cc0
 800e690:	08011c2a 	.word	0x08011c2a
 800e694:	2301      	movs	r3, #1
 800e696:	9309      	str	r3, [sp, #36]	; 0x24
 800e698:	e7d7      	b.n	800e64a <_dtoa_r+0x2c2>
 800e69a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e69c:	9301      	str	r3, [sp, #4]
 800e69e:	9304      	str	r3, [sp, #16]
 800e6a0:	e7ba      	b.n	800e618 <_dtoa_r+0x290>
 800e6a2:	3101      	adds	r1, #1
 800e6a4:	0052      	lsls	r2, r2, #1
 800e6a6:	e7ba      	b.n	800e61e <_dtoa_r+0x296>
 800e6a8:	69e3      	ldr	r3, [r4, #28]
 800e6aa:	9a00      	ldr	r2, [sp, #0]
 800e6ac:	601a      	str	r2, [r3, #0]
 800e6ae:	9b04      	ldr	r3, [sp, #16]
 800e6b0:	2b0e      	cmp	r3, #14
 800e6b2:	f200 80a8 	bhi.w	800e806 <_dtoa_r+0x47e>
 800e6b6:	2d00      	cmp	r5, #0
 800e6b8:	f000 80a5 	beq.w	800e806 <_dtoa_r+0x47e>
 800e6bc:	f1bb 0f00 	cmp.w	fp, #0
 800e6c0:	dd38      	ble.n	800e734 <_dtoa_r+0x3ac>
 800e6c2:	4bc0      	ldr	r3, [pc, #768]	; (800e9c4 <_dtoa_r+0x63c>)
 800e6c4:	f00b 020f 	and.w	r2, fp, #15
 800e6c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e6cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e6d0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e6d4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e6d8:	d019      	beq.n	800e70e <_dtoa_r+0x386>
 800e6da:	4bbb      	ldr	r3, [pc, #748]	; (800e9c8 <_dtoa_r+0x640>)
 800e6dc:	ec51 0b18 	vmov	r0, r1, d8
 800e6e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e6e4:	f7f2 f8da 	bl	800089c <__aeabi_ddiv>
 800e6e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e6ec:	f008 080f 	and.w	r8, r8, #15
 800e6f0:	2503      	movs	r5, #3
 800e6f2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e9c8 <_dtoa_r+0x640>
 800e6f6:	f1b8 0f00 	cmp.w	r8, #0
 800e6fa:	d10a      	bne.n	800e712 <_dtoa_r+0x38a>
 800e6fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e700:	4632      	mov	r2, r6
 800e702:	463b      	mov	r3, r7
 800e704:	f7f2 f8ca 	bl	800089c <__aeabi_ddiv>
 800e708:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e70c:	e02b      	b.n	800e766 <_dtoa_r+0x3de>
 800e70e:	2502      	movs	r5, #2
 800e710:	e7ef      	b.n	800e6f2 <_dtoa_r+0x36a>
 800e712:	f018 0f01 	tst.w	r8, #1
 800e716:	d008      	beq.n	800e72a <_dtoa_r+0x3a2>
 800e718:	4630      	mov	r0, r6
 800e71a:	4639      	mov	r1, r7
 800e71c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e720:	f7f1 ff92 	bl	8000648 <__aeabi_dmul>
 800e724:	3501      	adds	r5, #1
 800e726:	4606      	mov	r6, r0
 800e728:	460f      	mov	r7, r1
 800e72a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e72e:	f109 0908 	add.w	r9, r9, #8
 800e732:	e7e0      	b.n	800e6f6 <_dtoa_r+0x36e>
 800e734:	f000 809f 	beq.w	800e876 <_dtoa_r+0x4ee>
 800e738:	f1cb 0600 	rsb	r6, fp, #0
 800e73c:	4ba1      	ldr	r3, [pc, #644]	; (800e9c4 <_dtoa_r+0x63c>)
 800e73e:	4fa2      	ldr	r7, [pc, #648]	; (800e9c8 <_dtoa_r+0x640>)
 800e740:	f006 020f 	and.w	r2, r6, #15
 800e744:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e74c:	ec51 0b18 	vmov	r0, r1, d8
 800e750:	f7f1 ff7a 	bl	8000648 <__aeabi_dmul>
 800e754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e758:	1136      	asrs	r6, r6, #4
 800e75a:	2300      	movs	r3, #0
 800e75c:	2502      	movs	r5, #2
 800e75e:	2e00      	cmp	r6, #0
 800e760:	d17e      	bne.n	800e860 <_dtoa_r+0x4d8>
 800e762:	2b00      	cmp	r3, #0
 800e764:	d1d0      	bne.n	800e708 <_dtoa_r+0x380>
 800e766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e768:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	f000 8084 	beq.w	800e87a <_dtoa_r+0x4f2>
 800e772:	4b96      	ldr	r3, [pc, #600]	; (800e9cc <_dtoa_r+0x644>)
 800e774:	2200      	movs	r2, #0
 800e776:	4640      	mov	r0, r8
 800e778:	4649      	mov	r1, r9
 800e77a:	f7f2 f9d7 	bl	8000b2c <__aeabi_dcmplt>
 800e77e:	2800      	cmp	r0, #0
 800e780:	d07b      	beq.n	800e87a <_dtoa_r+0x4f2>
 800e782:	9b04      	ldr	r3, [sp, #16]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d078      	beq.n	800e87a <_dtoa_r+0x4f2>
 800e788:	9b01      	ldr	r3, [sp, #4]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	dd39      	ble.n	800e802 <_dtoa_r+0x47a>
 800e78e:	4b90      	ldr	r3, [pc, #576]	; (800e9d0 <_dtoa_r+0x648>)
 800e790:	2200      	movs	r2, #0
 800e792:	4640      	mov	r0, r8
 800e794:	4649      	mov	r1, r9
 800e796:	f7f1 ff57 	bl	8000648 <__aeabi_dmul>
 800e79a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e79e:	9e01      	ldr	r6, [sp, #4]
 800e7a0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e7a4:	3501      	adds	r5, #1
 800e7a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e7aa:	4628      	mov	r0, r5
 800e7ac:	f7f1 fee2 	bl	8000574 <__aeabi_i2d>
 800e7b0:	4642      	mov	r2, r8
 800e7b2:	464b      	mov	r3, r9
 800e7b4:	f7f1 ff48 	bl	8000648 <__aeabi_dmul>
 800e7b8:	4b86      	ldr	r3, [pc, #536]	; (800e9d4 <_dtoa_r+0x64c>)
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	f7f1 fd8e 	bl	80002dc <__adddf3>
 800e7c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e7c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7c8:	9303      	str	r3, [sp, #12]
 800e7ca:	2e00      	cmp	r6, #0
 800e7cc:	d158      	bne.n	800e880 <_dtoa_r+0x4f8>
 800e7ce:	4b82      	ldr	r3, [pc, #520]	; (800e9d8 <_dtoa_r+0x650>)
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	4640      	mov	r0, r8
 800e7d4:	4649      	mov	r1, r9
 800e7d6:	f7f1 fd7f 	bl	80002d8 <__aeabi_dsub>
 800e7da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e7de:	4680      	mov	r8, r0
 800e7e0:	4689      	mov	r9, r1
 800e7e2:	f7f2 f9c1 	bl	8000b68 <__aeabi_dcmpgt>
 800e7e6:	2800      	cmp	r0, #0
 800e7e8:	f040 8296 	bne.w	800ed18 <_dtoa_r+0x990>
 800e7ec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e7f0:	4640      	mov	r0, r8
 800e7f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e7f6:	4649      	mov	r1, r9
 800e7f8:	f7f2 f998 	bl	8000b2c <__aeabi_dcmplt>
 800e7fc:	2800      	cmp	r0, #0
 800e7fe:	f040 8289 	bne.w	800ed14 <_dtoa_r+0x98c>
 800e802:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e806:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e808:	2b00      	cmp	r3, #0
 800e80a:	f2c0 814e 	blt.w	800eaaa <_dtoa_r+0x722>
 800e80e:	f1bb 0f0e 	cmp.w	fp, #14
 800e812:	f300 814a 	bgt.w	800eaaa <_dtoa_r+0x722>
 800e816:	4b6b      	ldr	r3, [pc, #428]	; (800e9c4 <_dtoa_r+0x63c>)
 800e818:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e81c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e822:	2b00      	cmp	r3, #0
 800e824:	f280 80dc 	bge.w	800e9e0 <_dtoa_r+0x658>
 800e828:	9b04      	ldr	r3, [sp, #16]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	f300 80d8 	bgt.w	800e9e0 <_dtoa_r+0x658>
 800e830:	f040 826f 	bne.w	800ed12 <_dtoa_r+0x98a>
 800e834:	4b68      	ldr	r3, [pc, #416]	; (800e9d8 <_dtoa_r+0x650>)
 800e836:	2200      	movs	r2, #0
 800e838:	4640      	mov	r0, r8
 800e83a:	4649      	mov	r1, r9
 800e83c:	f7f1 ff04 	bl	8000648 <__aeabi_dmul>
 800e840:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e844:	f7f2 f986 	bl	8000b54 <__aeabi_dcmpge>
 800e848:	9e04      	ldr	r6, [sp, #16]
 800e84a:	4637      	mov	r7, r6
 800e84c:	2800      	cmp	r0, #0
 800e84e:	f040 8245 	bne.w	800ecdc <_dtoa_r+0x954>
 800e852:	9d00      	ldr	r5, [sp, #0]
 800e854:	2331      	movs	r3, #49	; 0x31
 800e856:	f805 3b01 	strb.w	r3, [r5], #1
 800e85a:	f10b 0b01 	add.w	fp, fp, #1
 800e85e:	e241      	b.n	800ece4 <_dtoa_r+0x95c>
 800e860:	07f2      	lsls	r2, r6, #31
 800e862:	d505      	bpl.n	800e870 <_dtoa_r+0x4e8>
 800e864:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e868:	f7f1 feee 	bl	8000648 <__aeabi_dmul>
 800e86c:	3501      	adds	r5, #1
 800e86e:	2301      	movs	r3, #1
 800e870:	1076      	asrs	r6, r6, #1
 800e872:	3708      	adds	r7, #8
 800e874:	e773      	b.n	800e75e <_dtoa_r+0x3d6>
 800e876:	2502      	movs	r5, #2
 800e878:	e775      	b.n	800e766 <_dtoa_r+0x3de>
 800e87a:	9e04      	ldr	r6, [sp, #16]
 800e87c:	465f      	mov	r7, fp
 800e87e:	e792      	b.n	800e7a6 <_dtoa_r+0x41e>
 800e880:	9900      	ldr	r1, [sp, #0]
 800e882:	4b50      	ldr	r3, [pc, #320]	; (800e9c4 <_dtoa_r+0x63c>)
 800e884:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e888:	4431      	add	r1, r6
 800e88a:	9102      	str	r1, [sp, #8]
 800e88c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e88e:	eeb0 9a47 	vmov.f32	s18, s14
 800e892:	eef0 9a67 	vmov.f32	s19, s15
 800e896:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e89a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e89e:	2900      	cmp	r1, #0
 800e8a0:	d044      	beq.n	800e92c <_dtoa_r+0x5a4>
 800e8a2:	494e      	ldr	r1, [pc, #312]	; (800e9dc <_dtoa_r+0x654>)
 800e8a4:	2000      	movs	r0, #0
 800e8a6:	f7f1 fff9 	bl	800089c <__aeabi_ddiv>
 800e8aa:	ec53 2b19 	vmov	r2, r3, d9
 800e8ae:	f7f1 fd13 	bl	80002d8 <__aeabi_dsub>
 800e8b2:	9d00      	ldr	r5, [sp, #0]
 800e8b4:	ec41 0b19 	vmov	d9, r0, r1
 800e8b8:	4649      	mov	r1, r9
 800e8ba:	4640      	mov	r0, r8
 800e8bc:	f7f2 f974 	bl	8000ba8 <__aeabi_d2iz>
 800e8c0:	4606      	mov	r6, r0
 800e8c2:	f7f1 fe57 	bl	8000574 <__aeabi_i2d>
 800e8c6:	4602      	mov	r2, r0
 800e8c8:	460b      	mov	r3, r1
 800e8ca:	4640      	mov	r0, r8
 800e8cc:	4649      	mov	r1, r9
 800e8ce:	f7f1 fd03 	bl	80002d8 <__aeabi_dsub>
 800e8d2:	3630      	adds	r6, #48	; 0x30
 800e8d4:	f805 6b01 	strb.w	r6, [r5], #1
 800e8d8:	ec53 2b19 	vmov	r2, r3, d9
 800e8dc:	4680      	mov	r8, r0
 800e8de:	4689      	mov	r9, r1
 800e8e0:	f7f2 f924 	bl	8000b2c <__aeabi_dcmplt>
 800e8e4:	2800      	cmp	r0, #0
 800e8e6:	d164      	bne.n	800e9b2 <_dtoa_r+0x62a>
 800e8e8:	4642      	mov	r2, r8
 800e8ea:	464b      	mov	r3, r9
 800e8ec:	4937      	ldr	r1, [pc, #220]	; (800e9cc <_dtoa_r+0x644>)
 800e8ee:	2000      	movs	r0, #0
 800e8f0:	f7f1 fcf2 	bl	80002d8 <__aeabi_dsub>
 800e8f4:	ec53 2b19 	vmov	r2, r3, d9
 800e8f8:	f7f2 f918 	bl	8000b2c <__aeabi_dcmplt>
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	f040 80b6 	bne.w	800ea6e <_dtoa_r+0x6e6>
 800e902:	9b02      	ldr	r3, [sp, #8]
 800e904:	429d      	cmp	r5, r3
 800e906:	f43f af7c 	beq.w	800e802 <_dtoa_r+0x47a>
 800e90a:	4b31      	ldr	r3, [pc, #196]	; (800e9d0 <_dtoa_r+0x648>)
 800e90c:	ec51 0b19 	vmov	r0, r1, d9
 800e910:	2200      	movs	r2, #0
 800e912:	f7f1 fe99 	bl	8000648 <__aeabi_dmul>
 800e916:	4b2e      	ldr	r3, [pc, #184]	; (800e9d0 <_dtoa_r+0x648>)
 800e918:	ec41 0b19 	vmov	d9, r0, r1
 800e91c:	2200      	movs	r2, #0
 800e91e:	4640      	mov	r0, r8
 800e920:	4649      	mov	r1, r9
 800e922:	f7f1 fe91 	bl	8000648 <__aeabi_dmul>
 800e926:	4680      	mov	r8, r0
 800e928:	4689      	mov	r9, r1
 800e92a:	e7c5      	b.n	800e8b8 <_dtoa_r+0x530>
 800e92c:	ec51 0b17 	vmov	r0, r1, d7
 800e930:	f7f1 fe8a 	bl	8000648 <__aeabi_dmul>
 800e934:	9b02      	ldr	r3, [sp, #8]
 800e936:	9d00      	ldr	r5, [sp, #0]
 800e938:	930f      	str	r3, [sp, #60]	; 0x3c
 800e93a:	ec41 0b19 	vmov	d9, r0, r1
 800e93e:	4649      	mov	r1, r9
 800e940:	4640      	mov	r0, r8
 800e942:	f7f2 f931 	bl	8000ba8 <__aeabi_d2iz>
 800e946:	4606      	mov	r6, r0
 800e948:	f7f1 fe14 	bl	8000574 <__aeabi_i2d>
 800e94c:	3630      	adds	r6, #48	; 0x30
 800e94e:	4602      	mov	r2, r0
 800e950:	460b      	mov	r3, r1
 800e952:	4640      	mov	r0, r8
 800e954:	4649      	mov	r1, r9
 800e956:	f7f1 fcbf 	bl	80002d8 <__aeabi_dsub>
 800e95a:	f805 6b01 	strb.w	r6, [r5], #1
 800e95e:	9b02      	ldr	r3, [sp, #8]
 800e960:	429d      	cmp	r5, r3
 800e962:	4680      	mov	r8, r0
 800e964:	4689      	mov	r9, r1
 800e966:	f04f 0200 	mov.w	r2, #0
 800e96a:	d124      	bne.n	800e9b6 <_dtoa_r+0x62e>
 800e96c:	4b1b      	ldr	r3, [pc, #108]	; (800e9dc <_dtoa_r+0x654>)
 800e96e:	ec51 0b19 	vmov	r0, r1, d9
 800e972:	f7f1 fcb3 	bl	80002dc <__adddf3>
 800e976:	4602      	mov	r2, r0
 800e978:	460b      	mov	r3, r1
 800e97a:	4640      	mov	r0, r8
 800e97c:	4649      	mov	r1, r9
 800e97e:	f7f2 f8f3 	bl	8000b68 <__aeabi_dcmpgt>
 800e982:	2800      	cmp	r0, #0
 800e984:	d173      	bne.n	800ea6e <_dtoa_r+0x6e6>
 800e986:	ec53 2b19 	vmov	r2, r3, d9
 800e98a:	4914      	ldr	r1, [pc, #80]	; (800e9dc <_dtoa_r+0x654>)
 800e98c:	2000      	movs	r0, #0
 800e98e:	f7f1 fca3 	bl	80002d8 <__aeabi_dsub>
 800e992:	4602      	mov	r2, r0
 800e994:	460b      	mov	r3, r1
 800e996:	4640      	mov	r0, r8
 800e998:	4649      	mov	r1, r9
 800e99a:	f7f2 f8c7 	bl	8000b2c <__aeabi_dcmplt>
 800e99e:	2800      	cmp	r0, #0
 800e9a0:	f43f af2f 	beq.w	800e802 <_dtoa_r+0x47a>
 800e9a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e9a6:	1e6b      	subs	r3, r5, #1
 800e9a8:	930f      	str	r3, [sp, #60]	; 0x3c
 800e9aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e9ae:	2b30      	cmp	r3, #48	; 0x30
 800e9b0:	d0f8      	beq.n	800e9a4 <_dtoa_r+0x61c>
 800e9b2:	46bb      	mov	fp, r7
 800e9b4:	e04a      	b.n	800ea4c <_dtoa_r+0x6c4>
 800e9b6:	4b06      	ldr	r3, [pc, #24]	; (800e9d0 <_dtoa_r+0x648>)
 800e9b8:	f7f1 fe46 	bl	8000648 <__aeabi_dmul>
 800e9bc:	4680      	mov	r8, r0
 800e9be:	4689      	mov	r9, r1
 800e9c0:	e7bd      	b.n	800e93e <_dtoa_r+0x5b6>
 800e9c2:	bf00      	nop
 800e9c4:	08011cc0 	.word	0x08011cc0
 800e9c8:	08011c98 	.word	0x08011c98
 800e9cc:	3ff00000 	.word	0x3ff00000
 800e9d0:	40240000 	.word	0x40240000
 800e9d4:	401c0000 	.word	0x401c0000
 800e9d8:	40140000 	.word	0x40140000
 800e9dc:	3fe00000 	.word	0x3fe00000
 800e9e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e9e4:	9d00      	ldr	r5, [sp, #0]
 800e9e6:	4642      	mov	r2, r8
 800e9e8:	464b      	mov	r3, r9
 800e9ea:	4630      	mov	r0, r6
 800e9ec:	4639      	mov	r1, r7
 800e9ee:	f7f1 ff55 	bl	800089c <__aeabi_ddiv>
 800e9f2:	f7f2 f8d9 	bl	8000ba8 <__aeabi_d2iz>
 800e9f6:	9001      	str	r0, [sp, #4]
 800e9f8:	f7f1 fdbc 	bl	8000574 <__aeabi_i2d>
 800e9fc:	4642      	mov	r2, r8
 800e9fe:	464b      	mov	r3, r9
 800ea00:	f7f1 fe22 	bl	8000648 <__aeabi_dmul>
 800ea04:	4602      	mov	r2, r0
 800ea06:	460b      	mov	r3, r1
 800ea08:	4630      	mov	r0, r6
 800ea0a:	4639      	mov	r1, r7
 800ea0c:	f7f1 fc64 	bl	80002d8 <__aeabi_dsub>
 800ea10:	9e01      	ldr	r6, [sp, #4]
 800ea12:	9f04      	ldr	r7, [sp, #16]
 800ea14:	3630      	adds	r6, #48	; 0x30
 800ea16:	f805 6b01 	strb.w	r6, [r5], #1
 800ea1a:	9e00      	ldr	r6, [sp, #0]
 800ea1c:	1bae      	subs	r6, r5, r6
 800ea1e:	42b7      	cmp	r7, r6
 800ea20:	4602      	mov	r2, r0
 800ea22:	460b      	mov	r3, r1
 800ea24:	d134      	bne.n	800ea90 <_dtoa_r+0x708>
 800ea26:	f7f1 fc59 	bl	80002dc <__adddf3>
 800ea2a:	4642      	mov	r2, r8
 800ea2c:	464b      	mov	r3, r9
 800ea2e:	4606      	mov	r6, r0
 800ea30:	460f      	mov	r7, r1
 800ea32:	f7f2 f899 	bl	8000b68 <__aeabi_dcmpgt>
 800ea36:	b9c8      	cbnz	r0, 800ea6c <_dtoa_r+0x6e4>
 800ea38:	4642      	mov	r2, r8
 800ea3a:	464b      	mov	r3, r9
 800ea3c:	4630      	mov	r0, r6
 800ea3e:	4639      	mov	r1, r7
 800ea40:	f7f2 f86a 	bl	8000b18 <__aeabi_dcmpeq>
 800ea44:	b110      	cbz	r0, 800ea4c <_dtoa_r+0x6c4>
 800ea46:	9b01      	ldr	r3, [sp, #4]
 800ea48:	07db      	lsls	r3, r3, #31
 800ea4a:	d40f      	bmi.n	800ea6c <_dtoa_r+0x6e4>
 800ea4c:	4651      	mov	r1, sl
 800ea4e:	4620      	mov	r0, r4
 800ea50:	f000 fbcc 	bl	800f1ec <_Bfree>
 800ea54:	2300      	movs	r3, #0
 800ea56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ea58:	702b      	strb	r3, [r5, #0]
 800ea5a:	f10b 0301 	add.w	r3, fp, #1
 800ea5e:	6013      	str	r3, [r2, #0]
 800ea60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	f43f ace2 	beq.w	800e42c <_dtoa_r+0xa4>
 800ea68:	601d      	str	r5, [r3, #0]
 800ea6a:	e4df      	b.n	800e42c <_dtoa_r+0xa4>
 800ea6c:	465f      	mov	r7, fp
 800ea6e:	462b      	mov	r3, r5
 800ea70:	461d      	mov	r5, r3
 800ea72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ea76:	2a39      	cmp	r2, #57	; 0x39
 800ea78:	d106      	bne.n	800ea88 <_dtoa_r+0x700>
 800ea7a:	9a00      	ldr	r2, [sp, #0]
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d1f7      	bne.n	800ea70 <_dtoa_r+0x6e8>
 800ea80:	9900      	ldr	r1, [sp, #0]
 800ea82:	2230      	movs	r2, #48	; 0x30
 800ea84:	3701      	adds	r7, #1
 800ea86:	700a      	strb	r2, [r1, #0]
 800ea88:	781a      	ldrb	r2, [r3, #0]
 800ea8a:	3201      	adds	r2, #1
 800ea8c:	701a      	strb	r2, [r3, #0]
 800ea8e:	e790      	b.n	800e9b2 <_dtoa_r+0x62a>
 800ea90:	4ba3      	ldr	r3, [pc, #652]	; (800ed20 <_dtoa_r+0x998>)
 800ea92:	2200      	movs	r2, #0
 800ea94:	f7f1 fdd8 	bl	8000648 <__aeabi_dmul>
 800ea98:	2200      	movs	r2, #0
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	4606      	mov	r6, r0
 800ea9e:	460f      	mov	r7, r1
 800eaa0:	f7f2 f83a 	bl	8000b18 <__aeabi_dcmpeq>
 800eaa4:	2800      	cmp	r0, #0
 800eaa6:	d09e      	beq.n	800e9e6 <_dtoa_r+0x65e>
 800eaa8:	e7d0      	b.n	800ea4c <_dtoa_r+0x6c4>
 800eaaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eaac:	2a00      	cmp	r2, #0
 800eaae:	f000 80ca 	beq.w	800ec46 <_dtoa_r+0x8be>
 800eab2:	9a07      	ldr	r2, [sp, #28]
 800eab4:	2a01      	cmp	r2, #1
 800eab6:	f300 80ad 	bgt.w	800ec14 <_dtoa_r+0x88c>
 800eaba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eabc:	2a00      	cmp	r2, #0
 800eabe:	f000 80a5 	beq.w	800ec0c <_dtoa_r+0x884>
 800eac2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800eac6:	9e08      	ldr	r6, [sp, #32]
 800eac8:	9d05      	ldr	r5, [sp, #20]
 800eaca:	9a05      	ldr	r2, [sp, #20]
 800eacc:	441a      	add	r2, r3
 800eace:	9205      	str	r2, [sp, #20]
 800ead0:	9a06      	ldr	r2, [sp, #24]
 800ead2:	2101      	movs	r1, #1
 800ead4:	441a      	add	r2, r3
 800ead6:	4620      	mov	r0, r4
 800ead8:	9206      	str	r2, [sp, #24]
 800eada:	f000 fc87 	bl	800f3ec <__i2b>
 800eade:	4607      	mov	r7, r0
 800eae0:	b165      	cbz	r5, 800eafc <_dtoa_r+0x774>
 800eae2:	9b06      	ldr	r3, [sp, #24]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	dd09      	ble.n	800eafc <_dtoa_r+0x774>
 800eae8:	42ab      	cmp	r3, r5
 800eaea:	9a05      	ldr	r2, [sp, #20]
 800eaec:	bfa8      	it	ge
 800eaee:	462b      	movge	r3, r5
 800eaf0:	1ad2      	subs	r2, r2, r3
 800eaf2:	9205      	str	r2, [sp, #20]
 800eaf4:	9a06      	ldr	r2, [sp, #24]
 800eaf6:	1aed      	subs	r5, r5, r3
 800eaf8:	1ad3      	subs	r3, r2, r3
 800eafa:	9306      	str	r3, [sp, #24]
 800eafc:	9b08      	ldr	r3, [sp, #32]
 800eafe:	b1f3      	cbz	r3, 800eb3e <_dtoa_r+0x7b6>
 800eb00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	f000 80a3 	beq.w	800ec4e <_dtoa_r+0x8c6>
 800eb08:	2e00      	cmp	r6, #0
 800eb0a:	dd10      	ble.n	800eb2e <_dtoa_r+0x7a6>
 800eb0c:	4639      	mov	r1, r7
 800eb0e:	4632      	mov	r2, r6
 800eb10:	4620      	mov	r0, r4
 800eb12:	f000 fd2b 	bl	800f56c <__pow5mult>
 800eb16:	4652      	mov	r2, sl
 800eb18:	4601      	mov	r1, r0
 800eb1a:	4607      	mov	r7, r0
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	f000 fc7b 	bl	800f418 <__multiply>
 800eb22:	4651      	mov	r1, sl
 800eb24:	4680      	mov	r8, r0
 800eb26:	4620      	mov	r0, r4
 800eb28:	f000 fb60 	bl	800f1ec <_Bfree>
 800eb2c:	46c2      	mov	sl, r8
 800eb2e:	9b08      	ldr	r3, [sp, #32]
 800eb30:	1b9a      	subs	r2, r3, r6
 800eb32:	d004      	beq.n	800eb3e <_dtoa_r+0x7b6>
 800eb34:	4651      	mov	r1, sl
 800eb36:	4620      	mov	r0, r4
 800eb38:	f000 fd18 	bl	800f56c <__pow5mult>
 800eb3c:	4682      	mov	sl, r0
 800eb3e:	2101      	movs	r1, #1
 800eb40:	4620      	mov	r0, r4
 800eb42:	f000 fc53 	bl	800f3ec <__i2b>
 800eb46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	4606      	mov	r6, r0
 800eb4c:	f340 8081 	ble.w	800ec52 <_dtoa_r+0x8ca>
 800eb50:	461a      	mov	r2, r3
 800eb52:	4601      	mov	r1, r0
 800eb54:	4620      	mov	r0, r4
 800eb56:	f000 fd09 	bl	800f56c <__pow5mult>
 800eb5a:	9b07      	ldr	r3, [sp, #28]
 800eb5c:	2b01      	cmp	r3, #1
 800eb5e:	4606      	mov	r6, r0
 800eb60:	dd7a      	ble.n	800ec58 <_dtoa_r+0x8d0>
 800eb62:	f04f 0800 	mov.w	r8, #0
 800eb66:	6933      	ldr	r3, [r6, #16]
 800eb68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800eb6c:	6918      	ldr	r0, [r3, #16]
 800eb6e:	f000 fbef 	bl	800f350 <__hi0bits>
 800eb72:	f1c0 0020 	rsb	r0, r0, #32
 800eb76:	9b06      	ldr	r3, [sp, #24]
 800eb78:	4418      	add	r0, r3
 800eb7a:	f010 001f 	ands.w	r0, r0, #31
 800eb7e:	f000 8094 	beq.w	800ecaa <_dtoa_r+0x922>
 800eb82:	f1c0 0320 	rsb	r3, r0, #32
 800eb86:	2b04      	cmp	r3, #4
 800eb88:	f340 8085 	ble.w	800ec96 <_dtoa_r+0x90e>
 800eb8c:	9b05      	ldr	r3, [sp, #20]
 800eb8e:	f1c0 001c 	rsb	r0, r0, #28
 800eb92:	4403      	add	r3, r0
 800eb94:	9305      	str	r3, [sp, #20]
 800eb96:	9b06      	ldr	r3, [sp, #24]
 800eb98:	4403      	add	r3, r0
 800eb9a:	4405      	add	r5, r0
 800eb9c:	9306      	str	r3, [sp, #24]
 800eb9e:	9b05      	ldr	r3, [sp, #20]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	dd05      	ble.n	800ebb0 <_dtoa_r+0x828>
 800eba4:	4651      	mov	r1, sl
 800eba6:	461a      	mov	r2, r3
 800eba8:	4620      	mov	r0, r4
 800ebaa:	f000 fd39 	bl	800f620 <__lshift>
 800ebae:	4682      	mov	sl, r0
 800ebb0:	9b06      	ldr	r3, [sp, #24]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	dd05      	ble.n	800ebc2 <_dtoa_r+0x83a>
 800ebb6:	4631      	mov	r1, r6
 800ebb8:	461a      	mov	r2, r3
 800ebba:	4620      	mov	r0, r4
 800ebbc:	f000 fd30 	bl	800f620 <__lshift>
 800ebc0:	4606      	mov	r6, r0
 800ebc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d072      	beq.n	800ecae <_dtoa_r+0x926>
 800ebc8:	4631      	mov	r1, r6
 800ebca:	4650      	mov	r0, sl
 800ebcc:	f000 fd94 	bl	800f6f8 <__mcmp>
 800ebd0:	2800      	cmp	r0, #0
 800ebd2:	da6c      	bge.n	800ecae <_dtoa_r+0x926>
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	4651      	mov	r1, sl
 800ebd8:	220a      	movs	r2, #10
 800ebda:	4620      	mov	r0, r4
 800ebdc:	f000 fb28 	bl	800f230 <__multadd>
 800ebe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebe2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ebe6:	4682      	mov	sl, r0
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	f000 81b0 	beq.w	800ef4e <_dtoa_r+0xbc6>
 800ebee:	2300      	movs	r3, #0
 800ebf0:	4639      	mov	r1, r7
 800ebf2:	220a      	movs	r2, #10
 800ebf4:	4620      	mov	r0, r4
 800ebf6:	f000 fb1b 	bl	800f230 <__multadd>
 800ebfa:	9b01      	ldr	r3, [sp, #4]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	4607      	mov	r7, r0
 800ec00:	f300 8096 	bgt.w	800ed30 <_dtoa_r+0x9a8>
 800ec04:	9b07      	ldr	r3, [sp, #28]
 800ec06:	2b02      	cmp	r3, #2
 800ec08:	dc59      	bgt.n	800ecbe <_dtoa_r+0x936>
 800ec0a:	e091      	b.n	800ed30 <_dtoa_r+0x9a8>
 800ec0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ec0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ec12:	e758      	b.n	800eac6 <_dtoa_r+0x73e>
 800ec14:	9b04      	ldr	r3, [sp, #16]
 800ec16:	1e5e      	subs	r6, r3, #1
 800ec18:	9b08      	ldr	r3, [sp, #32]
 800ec1a:	42b3      	cmp	r3, r6
 800ec1c:	bfbf      	itttt	lt
 800ec1e:	9b08      	ldrlt	r3, [sp, #32]
 800ec20:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ec22:	9608      	strlt	r6, [sp, #32]
 800ec24:	1af3      	sublt	r3, r6, r3
 800ec26:	bfb4      	ite	lt
 800ec28:	18d2      	addlt	r2, r2, r3
 800ec2a:	1b9e      	subge	r6, r3, r6
 800ec2c:	9b04      	ldr	r3, [sp, #16]
 800ec2e:	bfbc      	itt	lt
 800ec30:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ec32:	2600      	movlt	r6, #0
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	bfb7      	itett	lt
 800ec38:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ec3c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ec40:	1a9d      	sublt	r5, r3, r2
 800ec42:	2300      	movlt	r3, #0
 800ec44:	e741      	b.n	800eaca <_dtoa_r+0x742>
 800ec46:	9e08      	ldr	r6, [sp, #32]
 800ec48:	9d05      	ldr	r5, [sp, #20]
 800ec4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ec4c:	e748      	b.n	800eae0 <_dtoa_r+0x758>
 800ec4e:	9a08      	ldr	r2, [sp, #32]
 800ec50:	e770      	b.n	800eb34 <_dtoa_r+0x7ac>
 800ec52:	9b07      	ldr	r3, [sp, #28]
 800ec54:	2b01      	cmp	r3, #1
 800ec56:	dc19      	bgt.n	800ec8c <_dtoa_r+0x904>
 800ec58:	9b02      	ldr	r3, [sp, #8]
 800ec5a:	b9bb      	cbnz	r3, 800ec8c <_dtoa_r+0x904>
 800ec5c:	9b03      	ldr	r3, [sp, #12]
 800ec5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ec62:	b99b      	cbnz	r3, 800ec8c <_dtoa_r+0x904>
 800ec64:	9b03      	ldr	r3, [sp, #12]
 800ec66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ec6a:	0d1b      	lsrs	r3, r3, #20
 800ec6c:	051b      	lsls	r3, r3, #20
 800ec6e:	b183      	cbz	r3, 800ec92 <_dtoa_r+0x90a>
 800ec70:	9b05      	ldr	r3, [sp, #20]
 800ec72:	3301      	adds	r3, #1
 800ec74:	9305      	str	r3, [sp, #20]
 800ec76:	9b06      	ldr	r3, [sp, #24]
 800ec78:	3301      	adds	r3, #1
 800ec7a:	9306      	str	r3, [sp, #24]
 800ec7c:	f04f 0801 	mov.w	r8, #1
 800ec80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	f47f af6f 	bne.w	800eb66 <_dtoa_r+0x7de>
 800ec88:	2001      	movs	r0, #1
 800ec8a:	e774      	b.n	800eb76 <_dtoa_r+0x7ee>
 800ec8c:	f04f 0800 	mov.w	r8, #0
 800ec90:	e7f6      	b.n	800ec80 <_dtoa_r+0x8f8>
 800ec92:	4698      	mov	r8, r3
 800ec94:	e7f4      	b.n	800ec80 <_dtoa_r+0x8f8>
 800ec96:	d082      	beq.n	800eb9e <_dtoa_r+0x816>
 800ec98:	9a05      	ldr	r2, [sp, #20]
 800ec9a:	331c      	adds	r3, #28
 800ec9c:	441a      	add	r2, r3
 800ec9e:	9205      	str	r2, [sp, #20]
 800eca0:	9a06      	ldr	r2, [sp, #24]
 800eca2:	441a      	add	r2, r3
 800eca4:	441d      	add	r5, r3
 800eca6:	9206      	str	r2, [sp, #24]
 800eca8:	e779      	b.n	800eb9e <_dtoa_r+0x816>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	e7f4      	b.n	800ec98 <_dtoa_r+0x910>
 800ecae:	9b04      	ldr	r3, [sp, #16]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	dc37      	bgt.n	800ed24 <_dtoa_r+0x99c>
 800ecb4:	9b07      	ldr	r3, [sp, #28]
 800ecb6:	2b02      	cmp	r3, #2
 800ecb8:	dd34      	ble.n	800ed24 <_dtoa_r+0x99c>
 800ecba:	9b04      	ldr	r3, [sp, #16]
 800ecbc:	9301      	str	r3, [sp, #4]
 800ecbe:	9b01      	ldr	r3, [sp, #4]
 800ecc0:	b963      	cbnz	r3, 800ecdc <_dtoa_r+0x954>
 800ecc2:	4631      	mov	r1, r6
 800ecc4:	2205      	movs	r2, #5
 800ecc6:	4620      	mov	r0, r4
 800ecc8:	f000 fab2 	bl	800f230 <__multadd>
 800eccc:	4601      	mov	r1, r0
 800ecce:	4606      	mov	r6, r0
 800ecd0:	4650      	mov	r0, sl
 800ecd2:	f000 fd11 	bl	800f6f8 <__mcmp>
 800ecd6:	2800      	cmp	r0, #0
 800ecd8:	f73f adbb 	bgt.w	800e852 <_dtoa_r+0x4ca>
 800ecdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecde:	9d00      	ldr	r5, [sp, #0]
 800ece0:	ea6f 0b03 	mvn.w	fp, r3
 800ece4:	f04f 0800 	mov.w	r8, #0
 800ece8:	4631      	mov	r1, r6
 800ecea:	4620      	mov	r0, r4
 800ecec:	f000 fa7e 	bl	800f1ec <_Bfree>
 800ecf0:	2f00      	cmp	r7, #0
 800ecf2:	f43f aeab 	beq.w	800ea4c <_dtoa_r+0x6c4>
 800ecf6:	f1b8 0f00 	cmp.w	r8, #0
 800ecfa:	d005      	beq.n	800ed08 <_dtoa_r+0x980>
 800ecfc:	45b8      	cmp	r8, r7
 800ecfe:	d003      	beq.n	800ed08 <_dtoa_r+0x980>
 800ed00:	4641      	mov	r1, r8
 800ed02:	4620      	mov	r0, r4
 800ed04:	f000 fa72 	bl	800f1ec <_Bfree>
 800ed08:	4639      	mov	r1, r7
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	f000 fa6e 	bl	800f1ec <_Bfree>
 800ed10:	e69c      	b.n	800ea4c <_dtoa_r+0x6c4>
 800ed12:	2600      	movs	r6, #0
 800ed14:	4637      	mov	r7, r6
 800ed16:	e7e1      	b.n	800ecdc <_dtoa_r+0x954>
 800ed18:	46bb      	mov	fp, r7
 800ed1a:	4637      	mov	r7, r6
 800ed1c:	e599      	b.n	800e852 <_dtoa_r+0x4ca>
 800ed1e:	bf00      	nop
 800ed20:	40240000 	.word	0x40240000
 800ed24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	f000 80c8 	beq.w	800eebc <_dtoa_r+0xb34>
 800ed2c:	9b04      	ldr	r3, [sp, #16]
 800ed2e:	9301      	str	r3, [sp, #4]
 800ed30:	2d00      	cmp	r5, #0
 800ed32:	dd05      	ble.n	800ed40 <_dtoa_r+0x9b8>
 800ed34:	4639      	mov	r1, r7
 800ed36:	462a      	mov	r2, r5
 800ed38:	4620      	mov	r0, r4
 800ed3a:	f000 fc71 	bl	800f620 <__lshift>
 800ed3e:	4607      	mov	r7, r0
 800ed40:	f1b8 0f00 	cmp.w	r8, #0
 800ed44:	d05b      	beq.n	800edfe <_dtoa_r+0xa76>
 800ed46:	6879      	ldr	r1, [r7, #4]
 800ed48:	4620      	mov	r0, r4
 800ed4a:	f000 fa0f 	bl	800f16c <_Balloc>
 800ed4e:	4605      	mov	r5, r0
 800ed50:	b928      	cbnz	r0, 800ed5e <_dtoa_r+0x9d6>
 800ed52:	4b83      	ldr	r3, [pc, #524]	; (800ef60 <_dtoa_r+0xbd8>)
 800ed54:	4602      	mov	r2, r0
 800ed56:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ed5a:	f7ff bb2e 	b.w	800e3ba <_dtoa_r+0x32>
 800ed5e:	693a      	ldr	r2, [r7, #16]
 800ed60:	3202      	adds	r2, #2
 800ed62:	0092      	lsls	r2, r2, #2
 800ed64:	f107 010c 	add.w	r1, r7, #12
 800ed68:	300c      	adds	r0, #12
 800ed6a:	f7ff fa70 	bl	800e24e <memcpy>
 800ed6e:	2201      	movs	r2, #1
 800ed70:	4629      	mov	r1, r5
 800ed72:	4620      	mov	r0, r4
 800ed74:	f000 fc54 	bl	800f620 <__lshift>
 800ed78:	9b00      	ldr	r3, [sp, #0]
 800ed7a:	3301      	adds	r3, #1
 800ed7c:	9304      	str	r3, [sp, #16]
 800ed7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed82:	4413      	add	r3, r2
 800ed84:	9308      	str	r3, [sp, #32]
 800ed86:	9b02      	ldr	r3, [sp, #8]
 800ed88:	f003 0301 	and.w	r3, r3, #1
 800ed8c:	46b8      	mov	r8, r7
 800ed8e:	9306      	str	r3, [sp, #24]
 800ed90:	4607      	mov	r7, r0
 800ed92:	9b04      	ldr	r3, [sp, #16]
 800ed94:	4631      	mov	r1, r6
 800ed96:	3b01      	subs	r3, #1
 800ed98:	4650      	mov	r0, sl
 800ed9a:	9301      	str	r3, [sp, #4]
 800ed9c:	f7ff fa6c 	bl	800e278 <quorem>
 800eda0:	4641      	mov	r1, r8
 800eda2:	9002      	str	r0, [sp, #8]
 800eda4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800eda8:	4650      	mov	r0, sl
 800edaa:	f000 fca5 	bl	800f6f8 <__mcmp>
 800edae:	463a      	mov	r2, r7
 800edb0:	9005      	str	r0, [sp, #20]
 800edb2:	4631      	mov	r1, r6
 800edb4:	4620      	mov	r0, r4
 800edb6:	f000 fcbb 	bl	800f730 <__mdiff>
 800edba:	68c2      	ldr	r2, [r0, #12]
 800edbc:	4605      	mov	r5, r0
 800edbe:	bb02      	cbnz	r2, 800ee02 <_dtoa_r+0xa7a>
 800edc0:	4601      	mov	r1, r0
 800edc2:	4650      	mov	r0, sl
 800edc4:	f000 fc98 	bl	800f6f8 <__mcmp>
 800edc8:	4602      	mov	r2, r0
 800edca:	4629      	mov	r1, r5
 800edcc:	4620      	mov	r0, r4
 800edce:	9209      	str	r2, [sp, #36]	; 0x24
 800edd0:	f000 fa0c 	bl	800f1ec <_Bfree>
 800edd4:	9b07      	ldr	r3, [sp, #28]
 800edd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edd8:	9d04      	ldr	r5, [sp, #16]
 800edda:	ea43 0102 	orr.w	r1, r3, r2
 800edde:	9b06      	ldr	r3, [sp, #24]
 800ede0:	4319      	orrs	r1, r3
 800ede2:	d110      	bne.n	800ee06 <_dtoa_r+0xa7e>
 800ede4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ede8:	d029      	beq.n	800ee3e <_dtoa_r+0xab6>
 800edea:	9b05      	ldr	r3, [sp, #20]
 800edec:	2b00      	cmp	r3, #0
 800edee:	dd02      	ble.n	800edf6 <_dtoa_r+0xa6e>
 800edf0:	9b02      	ldr	r3, [sp, #8]
 800edf2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800edf6:	9b01      	ldr	r3, [sp, #4]
 800edf8:	f883 9000 	strb.w	r9, [r3]
 800edfc:	e774      	b.n	800ece8 <_dtoa_r+0x960>
 800edfe:	4638      	mov	r0, r7
 800ee00:	e7ba      	b.n	800ed78 <_dtoa_r+0x9f0>
 800ee02:	2201      	movs	r2, #1
 800ee04:	e7e1      	b.n	800edca <_dtoa_r+0xa42>
 800ee06:	9b05      	ldr	r3, [sp, #20]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	db04      	blt.n	800ee16 <_dtoa_r+0xa8e>
 800ee0c:	9907      	ldr	r1, [sp, #28]
 800ee0e:	430b      	orrs	r3, r1
 800ee10:	9906      	ldr	r1, [sp, #24]
 800ee12:	430b      	orrs	r3, r1
 800ee14:	d120      	bne.n	800ee58 <_dtoa_r+0xad0>
 800ee16:	2a00      	cmp	r2, #0
 800ee18:	dded      	ble.n	800edf6 <_dtoa_r+0xa6e>
 800ee1a:	4651      	mov	r1, sl
 800ee1c:	2201      	movs	r2, #1
 800ee1e:	4620      	mov	r0, r4
 800ee20:	f000 fbfe 	bl	800f620 <__lshift>
 800ee24:	4631      	mov	r1, r6
 800ee26:	4682      	mov	sl, r0
 800ee28:	f000 fc66 	bl	800f6f8 <__mcmp>
 800ee2c:	2800      	cmp	r0, #0
 800ee2e:	dc03      	bgt.n	800ee38 <_dtoa_r+0xab0>
 800ee30:	d1e1      	bne.n	800edf6 <_dtoa_r+0xa6e>
 800ee32:	f019 0f01 	tst.w	r9, #1
 800ee36:	d0de      	beq.n	800edf6 <_dtoa_r+0xa6e>
 800ee38:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ee3c:	d1d8      	bne.n	800edf0 <_dtoa_r+0xa68>
 800ee3e:	9a01      	ldr	r2, [sp, #4]
 800ee40:	2339      	movs	r3, #57	; 0x39
 800ee42:	7013      	strb	r3, [r2, #0]
 800ee44:	462b      	mov	r3, r5
 800ee46:	461d      	mov	r5, r3
 800ee48:	3b01      	subs	r3, #1
 800ee4a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ee4e:	2a39      	cmp	r2, #57	; 0x39
 800ee50:	d06c      	beq.n	800ef2c <_dtoa_r+0xba4>
 800ee52:	3201      	adds	r2, #1
 800ee54:	701a      	strb	r2, [r3, #0]
 800ee56:	e747      	b.n	800ece8 <_dtoa_r+0x960>
 800ee58:	2a00      	cmp	r2, #0
 800ee5a:	dd07      	ble.n	800ee6c <_dtoa_r+0xae4>
 800ee5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ee60:	d0ed      	beq.n	800ee3e <_dtoa_r+0xab6>
 800ee62:	9a01      	ldr	r2, [sp, #4]
 800ee64:	f109 0301 	add.w	r3, r9, #1
 800ee68:	7013      	strb	r3, [r2, #0]
 800ee6a:	e73d      	b.n	800ece8 <_dtoa_r+0x960>
 800ee6c:	9b04      	ldr	r3, [sp, #16]
 800ee6e:	9a08      	ldr	r2, [sp, #32]
 800ee70:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ee74:	4293      	cmp	r3, r2
 800ee76:	d043      	beq.n	800ef00 <_dtoa_r+0xb78>
 800ee78:	4651      	mov	r1, sl
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	220a      	movs	r2, #10
 800ee7e:	4620      	mov	r0, r4
 800ee80:	f000 f9d6 	bl	800f230 <__multadd>
 800ee84:	45b8      	cmp	r8, r7
 800ee86:	4682      	mov	sl, r0
 800ee88:	f04f 0300 	mov.w	r3, #0
 800ee8c:	f04f 020a 	mov.w	r2, #10
 800ee90:	4641      	mov	r1, r8
 800ee92:	4620      	mov	r0, r4
 800ee94:	d107      	bne.n	800eea6 <_dtoa_r+0xb1e>
 800ee96:	f000 f9cb 	bl	800f230 <__multadd>
 800ee9a:	4680      	mov	r8, r0
 800ee9c:	4607      	mov	r7, r0
 800ee9e:	9b04      	ldr	r3, [sp, #16]
 800eea0:	3301      	adds	r3, #1
 800eea2:	9304      	str	r3, [sp, #16]
 800eea4:	e775      	b.n	800ed92 <_dtoa_r+0xa0a>
 800eea6:	f000 f9c3 	bl	800f230 <__multadd>
 800eeaa:	4639      	mov	r1, r7
 800eeac:	4680      	mov	r8, r0
 800eeae:	2300      	movs	r3, #0
 800eeb0:	220a      	movs	r2, #10
 800eeb2:	4620      	mov	r0, r4
 800eeb4:	f000 f9bc 	bl	800f230 <__multadd>
 800eeb8:	4607      	mov	r7, r0
 800eeba:	e7f0      	b.n	800ee9e <_dtoa_r+0xb16>
 800eebc:	9b04      	ldr	r3, [sp, #16]
 800eebe:	9301      	str	r3, [sp, #4]
 800eec0:	9d00      	ldr	r5, [sp, #0]
 800eec2:	4631      	mov	r1, r6
 800eec4:	4650      	mov	r0, sl
 800eec6:	f7ff f9d7 	bl	800e278 <quorem>
 800eeca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800eece:	9b00      	ldr	r3, [sp, #0]
 800eed0:	f805 9b01 	strb.w	r9, [r5], #1
 800eed4:	1aea      	subs	r2, r5, r3
 800eed6:	9b01      	ldr	r3, [sp, #4]
 800eed8:	4293      	cmp	r3, r2
 800eeda:	dd07      	ble.n	800eeec <_dtoa_r+0xb64>
 800eedc:	4651      	mov	r1, sl
 800eede:	2300      	movs	r3, #0
 800eee0:	220a      	movs	r2, #10
 800eee2:	4620      	mov	r0, r4
 800eee4:	f000 f9a4 	bl	800f230 <__multadd>
 800eee8:	4682      	mov	sl, r0
 800eeea:	e7ea      	b.n	800eec2 <_dtoa_r+0xb3a>
 800eeec:	9b01      	ldr	r3, [sp, #4]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	bfc8      	it	gt
 800eef2:	461d      	movgt	r5, r3
 800eef4:	9b00      	ldr	r3, [sp, #0]
 800eef6:	bfd8      	it	le
 800eef8:	2501      	movle	r5, #1
 800eefa:	441d      	add	r5, r3
 800eefc:	f04f 0800 	mov.w	r8, #0
 800ef00:	4651      	mov	r1, sl
 800ef02:	2201      	movs	r2, #1
 800ef04:	4620      	mov	r0, r4
 800ef06:	f000 fb8b 	bl	800f620 <__lshift>
 800ef0a:	4631      	mov	r1, r6
 800ef0c:	4682      	mov	sl, r0
 800ef0e:	f000 fbf3 	bl	800f6f8 <__mcmp>
 800ef12:	2800      	cmp	r0, #0
 800ef14:	dc96      	bgt.n	800ee44 <_dtoa_r+0xabc>
 800ef16:	d102      	bne.n	800ef1e <_dtoa_r+0xb96>
 800ef18:	f019 0f01 	tst.w	r9, #1
 800ef1c:	d192      	bne.n	800ee44 <_dtoa_r+0xabc>
 800ef1e:	462b      	mov	r3, r5
 800ef20:	461d      	mov	r5, r3
 800ef22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef26:	2a30      	cmp	r2, #48	; 0x30
 800ef28:	d0fa      	beq.n	800ef20 <_dtoa_r+0xb98>
 800ef2a:	e6dd      	b.n	800ece8 <_dtoa_r+0x960>
 800ef2c:	9a00      	ldr	r2, [sp, #0]
 800ef2e:	429a      	cmp	r2, r3
 800ef30:	d189      	bne.n	800ee46 <_dtoa_r+0xabe>
 800ef32:	f10b 0b01 	add.w	fp, fp, #1
 800ef36:	2331      	movs	r3, #49	; 0x31
 800ef38:	e796      	b.n	800ee68 <_dtoa_r+0xae0>
 800ef3a:	4b0a      	ldr	r3, [pc, #40]	; (800ef64 <_dtoa_r+0xbdc>)
 800ef3c:	f7ff ba99 	b.w	800e472 <_dtoa_r+0xea>
 800ef40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	f47f aa6d 	bne.w	800e422 <_dtoa_r+0x9a>
 800ef48:	4b07      	ldr	r3, [pc, #28]	; (800ef68 <_dtoa_r+0xbe0>)
 800ef4a:	f7ff ba92 	b.w	800e472 <_dtoa_r+0xea>
 800ef4e:	9b01      	ldr	r3, [sp, #4]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	dcb5      	bgt.n	800eec0 <_dtoa_r+0xb38>
 800ef54:	9b07      	ldr	r3, [sp, #28]
 800ef56:	2b02      	cmp	r3, #2
 800ef58:	f73f aeb1 	bgt.w	800ecbe <_dtoa_r+0x936>
 800ef5c:	e7b0      	b.n	800eec0 <_dtoa_r+0xb38>
 800ef5e:	bf00      	nop
 800ef60:	08011c2a 	.word	0x08011c2a
 800ef64:	08011b85 	.word	0x08011b85
 800ef68:	08011bae 	.word	0x08011bae

0800ef6c <_free_r>:
 800ef6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef6e:	2900      	cmp	r1, #0
 800ef70:	d044      	beq.n	800effc <_free_r+0x90>
 800ef72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef76:	9001      	str	r0, [sp, #4]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	f1a1 0404 	sub.w	r4, r1, #4
 800ef7e:	bfb8      	it	lt
 800ef80:	18e4      	addlt	r4, r4, r3
 800ef82:	f000 f8e7 	bl	800f154 <__malloc_lock>
 800ef86:	4a1e      	ldr	r2, [pc, #120]	; (800f000 <_free_r+0x94>)
 800ef88:	9801      	ldr	r0, [sp, #4]
 800ef8a:	6813      	ldr	r3, [r2, #0]
 800ef8c:	b933      	cbnz	r3, 800ef9c <_free_r+0x30>
 800ef8e:	6063      	str	r3, [r4, #4]
 800ef90:	6014      	str	r4, [r2, #0]
 800ef92:	b003      	add	sp, #12
 800ef94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef98:	f000 b8e2 	b.w	800f160 <__malloc_unlock>
 800ef9c:	42a3      	cmp	r3, r4
 800ef9e:	d908      	bls.n	800efb2 <_free_r+0x46>
 800efa0:	6825      	ldr	r5, [r4, #0]
 800efa2:	1961      	adds	r1, r4, r5
 800efa4:	428b      	cmp	r3, r1
 800efa6:	bf01      	itttt	eq
 800efa8:	6819      	ldreq	r1, [r3, #0]
 800efaa:	685b      	ldreq	r3, [r3, #4]
 800efac:	1949      	addeq	r1, r1, r5
 800efae:	6021      	streq	r1, [r4, #0]
 800efb0:	e7ed      	b.n	800ef8e <_free_r+0x22>
 800efb2:	461a      	mov	r2, r3
 800efb4:	685b      	ldr	r3, [r3, #4]
 800efb6:	b10b      	cbz	r3, 800efbc <_free_r+0x50>
 800efb8:	42a3      	cmp	r3, r4
 800efba:	d9fa      	bls.n	800efb2 <_free_r+0x46>
 800efbc:	6811      	ldr	r1, [r2, #0]
 800efbe:	1855      	adds	r5, r2, r1
 800efc0:	42a5      	cmp	r5, r4
 800efc2:	d10b      	bne.n	800efdc <_free_r+0x70>
 800efc4:	6824      	ldr	r4, [r4, #0]
 800efc6:	4421      	add	r1, r4
 800efc8:	1854      	adds	r4, r2, r1
 800efca:	42a3      	cmp	r3, r4
 800efcc:	6011      	str	r1, [r2, #0]
 800efce:	d1e0      	bne.n	800ef92 <_free_r+0x26>
 800efd0:	681c      	ldr	r4, [r3, #0]
 800efd2:	685b      	ldr	r3, [r3, #4]
 800efd4:	6053      	str	r3, [r2, #4]
 800efd6:	440c      	add	r4, r1
 800efd8:	6014      	str	r4, [r2, #0]
 800efda:	e7da      	b.n	800ef92 <_free_r+0x26>
 800efdc:	d902      	bls.n	800efe4 <_free_r+0x78>
 800efde:	230c      	movs	r3, #12
 800efe0:	6003      	str	r3, [r0, #0]
 800efe2:	e7d6      	b.n	800ef92 <_free_r+0x26>
 800efe4:	6825      	ldr	r5, [r4, #0]
 800efe6:	1961      	adds	r1, r4, r5
 800efe8:	428b      	cmp	r3, r1
 800efea:	bf04      	itt	eq
 800efec:	6819      	ldreq	r1, [r3, #0]
 800efee:	685b      	ldreq	r3, [r3, #4]
 800eff0:	6063      	str	r3, [r4, #4]
 800eff2:	bf04      	itt	eq
 800eff4:	1949      	addeq	r1, r1, r5
 800eff6:	6021      	streq	r1, [r4, #0]
 800eff8:	6054      	str	r4, [r2, #4]
 800effa:	e7ca      	b.n	800ef92 <_free_r+0x26>
 800effc:	b003      	add	sp, #12
 800effe:	bd30      	pop	{r4, r5, pc}
 800f000:	2000227c 	.word	0x2000227c

0800f004 <malloc>:
 800f004:	4b02      	ldr	r3, [pc, #8]	; (800f010 <malloc+0xc>)
 800f006:	4601      	mov	r1, r0
 800f008:	6818      	ldr	r0, [r3, #0]
 800f00a:	f000 b823 	b.w	800f054 <_malloc_r>
 800f00e:	bf00      	nop
 800f010:	200001dc 	.word	0x200001dc

0800f014 <sbrk_aligned>:
 800f014:	b570      	push	{r4, r5, r6, lr}
 800f016:	4e0e      	ldr	r6, [pc, #56]	; (800f050 <sbrk_aligned+0x3c>)
 800f018:	460c      	mov	r4, r1
 800f01a:	6831      	ldr	r1, [r6, #0]
 800f01c:	4605      	mov	r5, r0
 800f01e:	b911      	cbnz	r1, 800f026 <sbrk_aligned+0x12>
 800f020:	f001 fff4 	bl	801100c <_sbrk_r>
 800f024:	6030      	str	r0, [r6, #0]
 800f026:	4621      	mov	r1, r4
 800f028:	4628      	mov	r0, r5
 800f02a:	f001 ffef 	bl	801100c <_sbrk_r>
 800f02e:	1c43      	adds	r3, r0, #1
 800f030:	d00a      	beq.n	800f048 <sbrk_aligned+0x34>
 800f032:	1cc4      	adds	r4, r0, #3
 800f034:	f024 0403 	bic.w	r4, r4, #3
 800f038:	42a0      	cmp	r0, r4
 800f03a:	d007      	beq.n	800f04c <sbrk_aligned+0x38>
 800f03c:	1a21      	subs	r1, r4, r0
 800f03e:	4628      	mov	r0, r5
 800f040:	f001 ffe4 	bl	801100c <_sbrk_r>
 800f044:	3001      	adds	r0, #1
 800f046:	d101      	bne.n	800f04c <sbrk_aligned+0x38>
 800f048:	f04f 34ff 	mov.w	r4, #4294967295
 800f04c:	4620      	mov	r0, r4
 800f04e:	bd70      	pop	{r4, r5, r6, pc}
 800f050:	20002280 	.word	0x20002280

0800f054 <_malloc_r>:
 800f054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f058:	1ccd      	adds	r5, r1, #3
 800f05a:	f025 0503 	bic.w	r5, r5, #3
 800f05e:	3508      	adds	r5, #8
 800f060:	2d0c      	cmp	r5, #12
 800f062:	bf38      	it	cc
 800f064:	250c      	movcc	r5, #12
 800f066:	2d00      	cmp	r5, #0
 800f068:	4607      	mov	r7, r0
 800f06a:	db01      	blt.n	800f070 <_malloc_r+0x1c>
 800f06c:	42a9      	cmp	r1, r5
 800f06e:	d905      	bls.n	800f07c <_malloc_r+0x28>
 800f070:	230c      	movs	r3, #12
 800f072:	603b      	str	r3, [r7, #0]
 800f074:	2600      	movs	r6, #0
 800f076:	4630      	mov	r0, r6
 800f078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f07c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f150 <_malloc_r+0xfc>
 800f080:	f000 f868 	bl	800f154 <__malloc_lock>
 800f084:	f8d8 3000 	ldr.w	r3, [r8]
 800f088:	461c      	mov	r4, r3
 800f08a:	bb5c      	cbnz	r4, 800f0e4 <_malloc_r+0x90>
 800f08c:	4629      	mov	r1, r5
 800f08e:	4638      	mov	r0, r7
 800f090:	f7ff ffc0 	bl	800f014 <sbrk_aligned>
 800f094:	1c43      	adds	r3, r0, #1
 800f096:	4604      	mov	r4, r0
 800f098:	d155      	bne.n	800f146 <_malloc_r+0xf2>
 800f09a:	f8d8 4000 	ldr.w	r4, [r8]
 800f09e:	4626      	mov	r6, r4
 800f0a0:	2e00      	cmp	r6, #0
 800f0a2:	d145      	bne.n	800f130 <_malloc_r+0xdc>
 800f0a4:	2c00      	cmp	r4, #0
 800f0a6:	d048      	beq.n	800f13a <_malloc_r+0xe6>
 800f0a8:	6823      	ldr	r3, [r4, #0]
 800f0aa:	4631      	mov	r1, r6
 800f0ac:	4638      	mov	r0, r7
 800f0ae:	eb04 0903 	add.w	r9, r4, r3
 800f0b2:	f001 ffab 	bl	801100c <_sbrk_r>
 800f0b6:	4581      	cmp	r9, r0
 800f0b8:	d13f      	bne.n	800f13a <_malloc_r+0xe6>
 800f0ba:	6821      	ldr	r1, [r4, #0]
 800f0bc:	1a6d      	subs	r5, r5, r1
 800f0be:	4629      	mov	r1, r5
 800f0c0:	4638      	mov	r0, r7
 800f0c2:	f7ff ffa7 	bl	800f014 <sbrk_aligned>
 800f0c6:	3001      	adds	r0, #1
 800f0c8:	d037      	beq.n	800f13a <_malloc_r+0xe6>
 800f0ca:	6823      	ldr	r3, [r4, #0]
 800f0cc:	442b      	add	r3, r5
 800f0ce:	6023      	str	r3, [r4, #0]
 800f0d0:	f8d8 3000 	ldr.w	r3, [r8]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d038      	beq.n	800f14a <_malloc_r+0xf6>
 800f0d8:	685a      	ldr	r2, [r3, #4]
 800f0da:	42a2      	cmp	r2, r4
 800f0dc:	d12b      	bne.n	800f136 <_malloc_r+0xe2>
 800f0de:	2200      	movs	r2, #0
 800f0e0:	605a      	str	r2, [r3, #4]
 800f0e2:	e00f      	b.n	800f104 <_malloc_r+0xb0>
 800f0e4:	6822      	ldr	r2, [r4, #0]
 800f0e6:	1b52      	subs	r2, r2, r5
 800f0e8:	d41f      	bmi.n	800f12a <_malloc_r+0xd6>
 800f0ea:	2a0b      	cmp	r2, #11
 800f0ec:	d917      	bls.n	800f11e <_malloc_r+0xca>
 800f0ee:	1961      	adds	r1, r4, r5
 800f0f0:	42a3      	cmp	r3, r4
 800f0f2:	6025      	str	r5, [r4, #0]
 800f0f4:	bf18      	it	ne
 800f0f6:	6059      	strne	r1, [r3, #4]
 800f0f8:	6863      	ldr	r3, [r4, #4]
 800f0fa:	bf08      	it	eq
 800f0fc:	f8c8 1000 	streq.w	r1, [r8]
 800f100:	5162      	str	r2, [r4, r5]
 800f102:	604b      	str	r3, [r1, #4]
 800f104:	4638      	mov	r0, r7
 800f106:	f104 060b 	add.w	r6, r4, #11
 800f10a:	f000 f829 	bl	800f160 <__malloc_unlock>
 800f10e:	f026 0607 	bic.w	r6, r6, #7
 800f112:	1d23      	adds	r3, r4, #4
 800f114:	1af2      	subs	r2, r6, r3
 800f116:	d0ae      	beq.n	800f076 <_malloc_r+0x22>
 800f118:	1b9b      	subs	r3, r3, r6
 800f11a:	50a3      	str	r3, [r4, r2]
 800f11c:	e7ab      	b.n	800f076 <_malloc_r+0x22>
 800f11e:	42a3      	cmp	r3, r4
 800f120:	6862      	ldr	r2, [r4, #4]
 800f122:	d1dd      	bne.n	800f0e0 <_malloc_r+0x8c>
 800f124:	f8c8 2000 	str.w	r2, [r8]
 800f128:	e7ec      	b.n	800f104 <_malloc_r+0xb0>
 800f12a:	4623      	mov	r3, r4
 800f12c:	6864      	ldr	r4, [r4, #4]
 800f12e:	e7ac      	b.n	800f08a <_malloc_r+0x36>
 800f130:	4634      	mov	r4, r6
 800f132:	6876      	ldr	r6, [r6, #4]
 800f134:	e7b4      	b.n	800f0a0 <_malloc_r+0x4c>
 800f136:	4613      	mov	r3, r2
 800f138:	e7cc      	b.n	800f0d4 <_malloc_r+0x80>
 800f13a:	230c      	movs	r3, #12
 800f13c:	603b      	str	r3, [r7, #0]
 800f13e:	4638      	mov	r0, r7
 800f140:	f000 f80e 	bl	800f160 <__malloc_unlock>
 800f144:	e797      	b.n	800f076 <_malloc_r+0x22>
 800f146:	6025      	str	r5, [r4, #0]
 800f148:	e7dc      	b.n	800f104 <_malloc_r+0xb0>
 800f14a:	605b      	str	r3, [r3, #4]
 800f14c:	deff      	udf	#255	; 0xff
 800f14e:	bf00      	nop
 800f150:	2000227c 	.word	0x2000227c

0800f154 <__malloc_lock>:
 800f154:	4801      	ldr	r0, [pc, #4]	; (800f15c <__malloc_lock+0x8>)
 800f156:	f7ff b878 	b.w	800e24a <__retarget_lock_acquire_recursive>
 800f15a:	bf00      	nop
 800f15c:	20002278 	.word	0x20002278

0800f160 <__malloc_unlock>:
 800f160:	4801      	ldr	r0, [pc, #4]	; (800f168 <__malloc_unlock+0x8>)
 800f162:	f7ff b873 	b.w	800e24c <__retarget_lock_release_recursive>
 800f166:	bf00      	nop
 800f168:	20002278 	.word	0x20002278

0800f16c <_Balloc>:
 800f16c:	b570      	push	{r4, r5, r6, lr}
 800f16e:	69c6      	ldr	r6, [r0, #28]
 800f170:	4604      	mov	r4, r0
 800f172:	460d      	mov	r5, r1
 800f174:	b976      	cbnz	r6, 800f194 <_Balloc+0x28>
 800f176:	2010      	movs	r0, #16
 800f178:	f7ff ff44 	bl	800f004 <malloc>
 800f17c:	4602      	mov	r2, r0
 800f17e:	61e0      	str	r0, [r4, #28]
 800f180:	b920      	cbnz	r0, 800f18c <_Balloc+0x20>
 800f182:	4b18      	ldr	r3, [pc, #96]	; (800f1e4 <_Balloc+0x78>)
 800f184:	4818      	ldr	r0, [pc, #96]	; (800f1e8 <_Balloc+0x7c>)
 800f186:	216b      	movs	r1, #107	; 0x6b
 800f188:	f001 ff5a 	bl	8011040 <__assert_func>
 800f18c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f190:	6006      	str	r6, [r0, #0]
 800f192:	60c6      	str	r6, [r0, #12]
 800f194:	69e6      	ldr	r6, [r4, #28]
 800f196:	68f3      	ldr	r3, [r6, #12]
 800f198:	b183      	cbz	r3, 800f1bc <_Balloc+0x50>
 800f19a:	69e3      	ldr	r3, [r4, #28]
 800f19c:	68db      	ldr	r3, [r3, #12]
 800f19e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f1a2:	b9b8      	cbnz	r0, 800f1d4 <_Balloc+0x68>
 800f1a4:	2101      	movs	r1, #1
 800f1a6:	fa01 f605 	lsl.w	r6, r1, r5
 800f1aa:	1d72      	adds	r2, r6, #5
 800f1ac:	0092      	lsls	r2, r2, #2
 800f1ae:	4620      	mov	r0, r4
 800f1b0:	f001 ff64 	bl	801107c <_calloc_r>
 800f1b4:	b160      	cbz	r0, 800f1d0 <_Balloc+0x64>
 800f1b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f1ba:	e00e      	b.n	800f1da <_Balloc+0x6e>
 800f1bc:	2221      	movs	r2, #33	; 0x21
 800f1be:	2104      	movs	r1, #4
 800f1c0:	4620      	mov	r0, r4
 800f1c2:	f001 ff5b 	bl	801107c <_calloc_r>
 800f1c6:	69e3      	ldr	r3, [r4, #28]
 800f1c8:	60f0      	str	r0, [r6, #12]
 800f1ca:	68db      	ldr	r3, [r3, #12]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d1e4      	bne.n	800f19a <_Balloc+0x2e>
 800f1d0:	2000      	movs	r0, #0
 800f1d2:	bd70      	pop	{r4, r5, r6, pc}
 800f1d4:	6802      	ldr	r2, [r0, #0]
 800f1d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f1da:	2300      	movs	r3, #0
 800f1dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f1e0:	e7f7      	b.n	800f1d2 <_Balloc+0x66>
 800f1e2:	bf00      	nop
 800f1e4:	08011bbb 	.word	0x08011bbb
 800f1e8:	08011c3b 	.word	0x08011c3b

0800f1ec <_Bfree>:
 800f1ec:	b570      	push	{r4, r5, r6, lr}
 800f1ee:	69c6      	ldr	r6, [r0, #28]
 800f1f0:	4605      	mov	r5, r0
 800f1f2:	460c      	mov	r4, r1
 800f1f4:	b976      	cbnz	r6, 800f214 <_Bfree+0x28>
 800f1f6:	2010      	movs	r0, #16
 800f1f8:	f7ff ff04 	bl	800f004 <malloc>
 800f1fc:	4602      	mov	r2, r0
 800f1fe:	61e8      	str	r0, [r5, #28]
 800f200:	b920      	cbnz	r0, 800f20c <_Bfree+0x20>
 800f202:	4b09      	ldr	r3, [pc, #36]	; (800f228 <_Bfree+0x3c>)
 800f204:	4809      	ldr	r0, [pc, #36]	; (800f22c <_Bfree+0x40>)
 800f206:	218f      	movs	r1, #143	; 0x8f
 800f208:	f001 ff1a 	bl	8011040 <__assert_func>
 800f20c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f210:	6006      	str	r6, [r0, #0]
 800f212:	60c6      	str	r6, [r0, #12]
 800f214:	b13c      	cbz	r4, 800f226 <_Bfree+0x3a>
 800f216:	69eb      	ldr	r3, [r5, #28]
 800f218:	6862      	ldr	r2, [r4, #4]
 800f21a:	68db      	ldr	r3, [r3, #12]
 800f21c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f220:	6021      	str	r1, [r4, #0]
 800f222:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f226:	bd70      	pop	{r4, r5, r6, pc}
 800f228:	08011bbb 	.word	0x08011bbb
 800f22c:	08011c3b 	.word	0x08011c3b

0800f230 <__multadd>:
 800f230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f234:	690d      	ldr	r5, [r1, #16]
 800f236:	4607      	mov	r7, r0
 800f238:	460c      	mov	r4, r1
 800f23a:	461e      	mov	r6, r3
 800f23c:	f101 0c14 	add.w	ip, r1, #20
 800f240:	2000      	movs	r0, #0
 800f242:	f8dc 3000 	ldr.w	r3, [ip]
 800f246:	b299      	uxth	r1, r3
 800f248:	fb02 6101 	mla	r1, r2, r1, r6
 800f24c:	0c1e      	lsrs	r6, r3, #16
 800f24e:	0c0b      	lsrs	r3, r1, #16
 800f250:	fb02 3306 	mla	r3, r2, r6, r3
 800f254:	b289      	uxth	r1, r1
 800f256:	3001      	adds	r0, #1
 800f258:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f25c:	4285      	cmp	r5, r0
 800f25e:	f84c 1b04 	str.w	r1, [ip], #4
 800f262:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f266:	dcec      	bgt.n	800f242 <__multadd+0x12>
 800f268:	b30e      	cbz	r6, 800f2ae <__multadd+0x7e>
 800f26a:	68a3      	ldr	r3, [r4, #8]
 800f26c:	42ab      	cmp	r3, r5
 800f26e:	dc19      	bgt.n	800f2a4 <__multadd+0x74>
 800f270:	6861      	ldr	r1, [r4, #4]
 800f272:	4638      	mov	r0, r7
 800f274:	3101      	adds	r1, #1
 800f276:	f7ff ff79 	bl	800f16c <_Balloc>
 800f27a:	4680      	mov	r8, r0
 800f27c:	b928      	cbnz	r0, 800f28a <__multadd+0x5a>
 800f27e:	4602      	mov	r2, r0
 800f280:	4b0c      	ldr	r3, [pc, #48]	; (800f2b4 <__multadd+0x84>)
 800f282:	480d      	ldr	r0, [pc, #52]	; (800f2b8 <__multadd+0x88>)
 800f284:	21ba      	movs	r1, #186	; 0xba
 800f286:	f001 fedb 	bl	8011040 <__assert_func>
 800f28a:	6922      	ldr	r2, [r4, #16]
 800f28c:	3202      	adds	r2, #2
 800f28e:	f104 010c 	add.w	r1, r4, #12
 800f292:	0092      	lsls	r2, r2, #2
 800f294:	300c      	adds	r0, #12
 800f296:	f7fe ffda 	bl	800e24e <memcpy>
 800f29a:	4621      	mov	r1, r4
 800f29c:	4638      	mov	r0, r7
 800f29e:	f7ff ffa5 	bl	800f1ec <_Bfree>
 800f2a2:	4644      	mov	r4, r8
 800f2a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f2a8:	3501      	adds	r5, #1
 800f2aa:	615e      	str	r6, [r3, #20]
 800f2ac:	6125      	str	r5, [r4, #16]
 800f2ae:	4620      	mov	r0, r4
 800f2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2b4:	08011c2a 	.word	0x08011c2a
 800f2b8:	08011c3b 	.word	0x08011c3b

0800f2bc <__s2b>:
 800f2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2c0:	460c      	mov	r4, r1
 800f2c2:	4615      	mov	r5, r2
 800f2c4:	461f      	mov	r7, r3
 800f2c6:	2209      	movs	r2, #9
 800f2c8:	3308      	adds	r3, #8
 800f2ca:	4606      	mov	r6, r0
 800f2cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800f2d0:	2100      	movs	r1, #0
 800f2d2:	2201      	movs	r2, #1
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	db09      	blt.n	800f2ec <__s2b+0x30>
 800f2d8:	4630      	mov	r0, r6
 800f2da:	f7ff ff47 	bl	800f16c <_Balloc>
 800f2de:	b940      	cbnz	r0, 800f2f2 <__s2b+0x36>
 800f2e0:	4602      	mov	r2, r0
 800f2e2:	4b19      	ldr	r3, [pc, #100]	; (800f348 <__s2b+0x8c>)
 800f2e4:	4819      	ldr	r0, [pc, #100]	; (800f34c <__s2b+0x90>)
 800f2e6:	21d3      	movs	r1, #211	; 0xd3
 800f2e8:	f001 feaa 	bl	8011040 <__assert_func>
 800f2ec:	0052      	lsls	r2, r2, #1
 800f2ee:	3101      	adds	r1, #1
 800f2f0:	e7f0      	b.n	800f2d4 <__s2b+0x18>
 800f2f2:	9b08      	ldr	r3, [sp, #32]
 800f2f4:	6143      	str	r3, [r0, #20]
 800f2f6:	2d09      	cmp	r5, #9
 800f2f8:	f04f 0301 	mov.w	r3, #1
 800f2fc:	6103      	str	r3, [r0, #16]
 800f2fe:	dd16      	ble.n	800f32e <__s2b+0x72>
 800f300:	f104 0909 	add.w	r9, r4, #9
 800f304:	46c8      	mov	r8, r9
 800f306:	442c      	add	r4, r5
 800f308:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f30c:	4601      	mov	r1, r0
 800f30e:	3b30      	subs	r3, #48	; 0x30
 800f310:	220a      	movs	r2, #10
 800f312:	4630      	mov	r0, r6
 800f314:	f7ff ff8c 	bl	800f230 <__multadd>
 800f318:	45a0      	cmp	r8, r4
 800f31a:	d1f5      	bne.n	800f308 <__s2b+0x4c>
 800f31c:	f1a5 0408 	sub.w	r4, r5, #8
 800f320:	444c      	add	r4, r9
 800f322:	1b2d      	subs	r5, r5, r4
 800f324:	1963      	adds	r3, r4, r5
 800f326:	42bb      	cmp	r3, r7
 800f328:	db04      	blt.n	800f334 <__s2b+0x78>
 800f32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f32e:	340a      	adds	r4, #10
 800f330:	2509      	movs	r5, #9
 800f332:	e7f6      	b.n	800f322 <__s2b+0x66>
 800f334:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f338:	4601      	mov	r1, r0
 800f33a:	3b30      	subs	r3, #48	; 0x30
 800f33c:	220a      	movs	r2, #10
 800f33e:	4630      	mov	r0, r6
 800f340:	f7ff ff76 	bl	800f230 <__multadd>
 800f344:	e7ee      	b.n	800f324 <__s2b+0x68>
 800f346:	bf00      	nop
 800f348:	08011c2a 	.word	0x08011c2a
 800f34c:	08011c3b 	.word	0x08011c3b

0800f350 <__hi0bits>:
 800f350:	0c03      	lsrs	r3, r0, #16
 800f352:	041b      	lsls	r3, r3, #16
 800f354:	b9d3      	cbnz	r3, 800f38c <__hi0bits+0x3c>
 800f356:	0400      	lsls	r0, r0, #16
 800f358:	2310      	movs	r3, #16
 800f35a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f35e:	bf04      	itt	eq
 800f360:	0200      	lsleq	r0, r0, #8
 800f362:	3308      	addeq	r3, #8
 800f364:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f368:	bf04      	itt	eq
 800f36a:	0100      	lsleq	r0, r0, #4
 800f36c:	3304      	addeq	r3, #4
 800f36e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f372:	bf04      	itt	eq
 800f374:	0080      	lsleq	r0, r0, #2
 800f376:	3302      	addeq	r3, #2
 800f378:	2800      	cmp	r0, #0
 800f37a:	db05      	blt.n	800f388 <__hi0bits+0x38>
 800f37c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f380:	f103 0301 	add.w	r3, r3, #1
 800f384:	bf08      	it	eq
 800f386:	2320      	moveq	r3, #32
 800f388:	4618      	mov	r0, r3
 800f38a:	4770      	bx	lr
 800f38c:	2300      	movs	r3, #0
 800f38e:	e7e4      	b.n	800f35a <__hi0bits+0xa>

0800f390 <__lo0bits>:
 800f390:	6803      	ldr	r3, [r0, #0]
 800f392:	f013 0207 	ands.w	r2, r3, #7
 800f396:	d00c      	beq.n	800f3b2 <__lo0bits+0x22>
 800f398:	07d9      	lsls	r1, r3, #31
 800f39a:	d422      	bmi.n	800f3e2 <__lo0bits+0x52>
 800f39c:	079a      	lsls	r2, r3, #30
 800f39e:	bf49      	itett	mi
 800f3a0:	085b      	lsrmi	r3, r3, #1
 800f3a2:	089b      	lsrpl	r3, r3, #2
 800f3a4:	6003      	strmi	r3, [r0, #0]
 800f3a6:	2201      	movmi	r2, #1
 800f3a8:	bf5c      	itt	pl
 800f3aa:	6003      	strpl	r3, [r0, #0]
 800f3ac:	2202      	movpl	r2, #2
 800f3ae:	4610      	mov	r0, r2
 800f3b0:	4770      	bx	lr
 800f3b2:	b299      	uxth	r1, r3
 800f3b4:	b909      	cbnz	r1, 800f3ba <__lo0bits+0x2a>
 800f3b6:	0c1b      	lsrs	r3, r3, #16
 800f3b8:	2210      	movs	r2, #16
 800f3ba:	b2d9      	uxtb	r1, r3
 800f3bc:	b909      	cbnz	r1, 800f3c2 <__lo0bits+0x32>
 800f3be:	3208      	adds	r2, #8
 800f3c0:	0a1b      	lsrs	r3, r3, #8
 800f3c2:	0719      	lsls	r1, r3, #28
 800f3c4:	bf04      	itt	eq
 800f3c6:	091b      	lsreq	r3, r3, #4
 800f3c8:	3204      	addeq	r2, #4
 800f3ca:	0799      	lsls	r1, r3, #30
 800f3cc:	bf04      	itt	eq
 800f3ce:	089b      	lsreq	r3, r3, #2
 800f3d0:	3202      	addeq	r2, #2
 800f3d2:	07d9      	lsls	r1, r3, #31
 800f3d4:	d403      	bmi.n	800f3de <__lo0bits+0x4e>
 800f3d6:	085b      	lsrs	r3, r3, #1
 800f3d8:	f102 0201 	add.w	r2, r2, #1
 800f3dc:	d003      	beq.n	800f3e6 <__lo0bits+0x56>
 800f3de:	6003      	str	r3, [r0, #0]
 800f3e0:	e7e5      	b.n	800f3ae <__lo0bits+0x1e>
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	e7e3      	b.n	800f3ae <__lo0bits+0x1e>
 800f3e6:	2220      	movs	r2, #32
 800f3e8:	e7e1      	b.n	800f3ae <__lo0bits+0x1e>
	...

0800f3ec <__i2b>:
 800f3ec:	b510      	push	{r4, lr}
 800f3ee:	460c      	mov	r4, r1
 800f3f0:	2101      	movs	r1, #1
 800f3f2:	f7ff febb 	bl	800f16c <_Balloc>
 800f3f6:	4602      	mov	r2, r0
 800f3f8:	b928      	cbnz	r0, 800f406 <__i2b+0x1a>
 800f3fa:	4b05      	ldr	r3, [pc, #20]	; (800f410 <__i2b+0x24>)
 800f3fc:	4805      	ldr	r0, [pc, #20]	; (800f414 <__i2b+0x28>)
 800f3fe:	f240 1145 	movw	r1, #325	; 0x145
 800f402:	f001 fe1d 	bl	8011040 <__assert_func>
 800f406:	2301      	movs	r3, #1
 800f408:	6144      	str	r4, [r0, #20]
 800f40a:	6103      	str	r3, [r0, #16]
 800f40c:	bd10      	pop	{r4, pc}
 800f40e:	bf00      	nop
 800f410:	08011c2a 	.word	0x08011c2a
 800f414:	08011c3b 	.word	0x08011c3b

0800f418 <__multiply>:
 800f418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f41c:	4691      	mov	r9, r2
 800f41e:	690a      	ldr	r2, [r1, #16]
 800f420:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f424:	429a      	cmp	r2, r3
 800f426:	bfb8      	it	lt
 800f428:	460b      	movlt	r3, r1
 800f42a:	460c      	mov	r4, r1
 800f42c:	bfbc      	itt	lt
 800f42e:	464c      	movlt	r4, r9
 800f430:	4699      	movlt	r9, r3
 800f432:	6927      	ldr	r7, [r4, #16]
 800f434:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f438:	68a3      	ldr	r3, [r4, #8]
 800f43a:	6861      	ldr	r1, [r4, #4]
 800f43c:	eb07 060a 	add.w	r6, r7, sl
 800f440:	42b3      	cmp	r3, r6
 800f442:	b085      	sub	sp, #20
 800f444:	bfb8      	it	lt
 800f446:	3101      	addlt	r1, #1
 800f448:	f7ff fe90 	bl	800f16c <_Balloc>
 800f44c:	b930      	cbnz	r0, 800f45c <__multiply+0x44>
 800f44e:	4602      	mov	r2, r0
 800f450:	4b44      	ldr	r3, [pc, #272]	; (800f564 <__multiply+0x14c>)
 800f452:	4845      	ldr	r0, [pc, #276]	; (800f568 <__multiply+0x150>)
 800f454:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f458:	f001 fdf2 	bl	8011040 <__assert_func>
 800f45c:	f100 0514 	add.w	r5, r0, #20
 800f460:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f464:	462b      	mov	r3, r5
 800f466:	2200      	movs	r2, #0
 800f468:	4543      	cmp	r3, r8
 800f46a:	d321      	bcc.n	800f4b0 <__multiply+0x98>
 800f46c:	f104 0314 	add.w	r3, r4, #20
 800f470:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f474:	f109 0314 	add.w	r3, r9, #20
 800f478:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f47c:	9202      	str	r2, [sp, #8]
 800f47e:	1b3a      	subs	r2, r7, r4
 800f480:	3a15      	subs	r2, #21
 800f482:	f022 0203 	bic.w	r2, r2, #3
 800f486:	3204      	adds	r2, #4
 800f488:	f104 0115 	add.w	r1, r4, #21
 800f48c:	428f      	cmp	r7, r1
 800f48e:	bf38      	it	cc
 800f490:	2204      	movcc	r2, #4
 800f492:	9201      	str	r2, [sp, #4]
 800f494:	9a02      	ldr	r2, [sp, #8]
 800f496:	9303      	str	r3, [sp, #12]
 800f498:	429a      	cmp	r2, r3
 800f49a:	d80c      	bhi.n	800f4b6 <__multiply+0x9e>
 800f49c:	2e00      	cmp	r6, #0
 800f49e:	dd03      	ble.n	800f4a8 <__multiply+0x90>
 800f4a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d05b      	beq.n	800f560 <__multiply+0x148>
 800f4a8:	6106      	str	r6, [r0, #16]
 800f4aa:	b005      	add	sp, #20
 800f4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4b0:	f843 2b04 	str.w	r2, [r3], #4
 800f4b4:	e7d8      	b.n	800f468 <__multiply+0x50>
 800f4b6:	f8b3 a000 	ldrh.w	sl, [r3]
 800f4ba:	f1ba 0f00 	cmp.w	sl, #0
 800f4be:	d024      	beq.n	800f50a <__multiply+0xf2>
 800f4c0:	f104 0e14 	add.w	lr, r4, #20
 800f4c4:	46a9      	mov	r9, r5
 800f4c6:	f04f 0c00 	mov.w	ip, #0
 800f4ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f4ce:	f8d9 1000 	ldr.w	r1, [r9]
 800f4d2:	fa1f fb82 	uxth.w	fp, r2
 800f4d6:	b289      	uxth	r1, r1
 800f4d8:	fb0a 110b 	mla	r1, sl, fp, r1
 800f4dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f4e0:	f8d9 2000 	ldr.w	r2, [r9]
 800f4e4:	4461      	add	r1, ip
 800f4e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f4ea:	fb0a c20b 	mla	r2, sl, fp, ip
 800f4ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f4f2:	b289      	uxth	r1, r1
 800f4f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f4f8:	4577      	cmp	r7, lr
 800f4fa:	f849 1b04 	str.w	r1, [r9], #4
 800f4fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f502:	d8e2      	bhi.n	800f4ca <__multiply+0xb2>
 800f504:	9a01      	ldr	r2, [sp, #4]
 800f506:	f845 c002 	str.w	ip, [r5, r2]
 800f50a:	9a03      	ldr	r2, [sp, #12]
 800f50c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f510:	3304      	adds	r3, #4
 800f512:	f1b9 0f00 	cmp.w	r9, #0
 800f516:	d021      	beq.n	800f55c <__multiply+0x144>
 800f518:	6829      	ldr	r1, [r5, #0]
 800f51a:	f104 0c14 	add.w	ip, r4, #20
 800f51e:	46ae      	mov	lr, r5
 800f520:	f04f 0a00 	mov.w	sl, #0
 800f524:	f8bc b000 	ldrh.w	fp, [ip]
 800f528:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f52c:	fb09 220b 	mla	r2, r9, fp, r2
 800f530:	4452      	add	r2, sl
 800f532:	b289      	uxth	r1, r1
 800f534:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f538:	f84e 1b04 	str.w	r1, [lr], #4
 800f53c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f540:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f544:	f8be 1000 	ldrh.w	r1, [lr]
 800f548:	fb09 110a 	mla	r1, r9, sl, r1
 800f54c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f550:	4567      	cmp	r7, ip
 800f552:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f556:	d8e5      	bhi.n	800f524 <__multiply+0x10c>
 800f558:	9a01      	ldr	r2, [sp, #4]
 800f55a:	50a9      	str	r1, [r5, r2]
 800f55c:	3504      	adds	r5, #4
 800f55e:	e799      	b.n	800f494 <__multiply+0x7c>
 800f560:	3e01      	subs	r6, #1
 800f562:	e79b      	b.n	800f49c <__multiply+0x84>
 800f564:	08011c2a 	.word	0x08011c2a
 800f568:	08011c3b 	.word	0x08011c3b

0800f56c <__pow5mult>:
 800f56c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f570:	4615      	mov	r5, r2
 800f572:	f012 0203 	ands.w	r2, r2, #3
 800f576:	4606      	mov	r6, r0
 800f578:	460f      	mov	r7, r1
 800f57a:	d007      	beq.n	800f58c <__pow5mult+0x20>
 800f57c:	4c25      	ldr	r4, [pc, #148]	; (800f614 <__pow5mult+0xa8>)
 800f57e:	3a01      	subs	r2, #1
 800f580:	2300      	movs	r3, #0
 800f582:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f586:	f7ff fe53 	bl	800f230 <__multadd>
 800f58a:	4607      	mov	r7, r0
 800f58c:	10ad      	asrs	r5, r5, #2
 800f58e:	d03d      	beq.n	800f60c <__pow5mult+0xa0>
 800f590:	69f4      	ldr	r4, [r6, #28]
 800f592:	b97c      	cbnz	r4, 800f5b4 <__pow5mult+0x48>
 800f594:	2010      	movs	r0, #16
 800f596:	f7ff fd35 	bl	800f004 <malloc>
 800f59a:	4602      	mov	r2, r0
 800f59c:	61f0      	str	r0, [r6, #28]
 800f59e:	b928      	cbnz	r0, 800f5ac <__pow5mult+0x40>
 800f5a0:	4b1d      	ldr	r3, [pc, #116]	; (800f618 <__pow5mult+0xac>)
 800f5a2:	481e      	ldr	r0, [pc, #120]	; (800f61c <__pow5mult+0xb0>)
 800f5a4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f5a8:	f001 fd4a 	bl	8011040 <__assert_func>
 800f5ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f5b0:	6004      	str	r4, [r0, #0]
 800f5b2:	60c4      	str	r4, [r0, #12]
 800f5b4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f5b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f5bc:	b94c      	cbnz	r4, 800f5d2 <__pow5mult+0x66>
 800f5be:	f240 2171 	movw	r1, #625	; 0x271
 800f5c2:	4630      	mov	r0, r6
 800f5c4:	f7ff ff12 	bl	800f3ec <__i2b>
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800f5ce:	4604      	mov	r4, r0
 800f5d0:	6003      	str	r3, [r0, #0]
 800f5d2:	f04f 0900 	mov.w	r9, #0
 800f5d6:	07eb      	lsls	r3, r5, #31
 800f5d8:	d50a      	bpl.n	800f5f0 <__pow5mult+0x84>
 800f5da:	4639      	mov	r1, r7
 800f5dc:	4622      	mov	r2, r4
 800f5de:	4630      	mov	r0, r6
 800f5e0:	f7ff ff1a 	bl	800f418 <__multiply>
 800f5e4:	4639      	mov	r1, r7
 800f5e6:	4680      	mov	r8, r0
 800f5e8:	4630      	mov	r0, r6
 800f5ea:	f7ff fdff 	bl	800f1ec <_Bfree>
 800f5ee:	4647      	mov	r7, r8
 800f5f0:	106d      	asrs	r5, r5, #1
 800f5f2:	d00b      	beq.n	800f60c <__pow5mult+0xa0>
 800f5f4:	6820      	ldr	r0, [r4, #0]
 800f5f6:	b938      	cbnz	r0, 800f608 <__pow5mult+0x9c>
 800f5f8:	4622      	mov	r2, r4
 800f5fa:	4621      	mov	r1, r4
 800f5fc:	4630      	mov	r0, r6
 800f5fe:	f7ff ff0b 	bl	800f418 <__multiply>
 800f602:	6020      	str	r0, [r4, #0]
 800f604:	f8c0 9000 	str.w	r9, [r0]
 800f608:	4604      	mov	r4, r0
 800f60a:	e7e4      	b.n	800f5d6 <__pow5mult+0x6a>
 800f60c:	4638      	mov	r0, r7
 800f60e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f612:	bf00      	nop
 800f614:	08011d88 	.word	0x08011d88
 800f618:	08011bbb 	.word	0x08011bbb
 800f61c:	08011c3b 	.word	0x08011c3b

0800f620 <__lshift>:
 800f620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f624:	460c      	mov	r4, r1
 800f626:	6849      	ldr	r1, [r1, #4]
 800f628:	6923      	ldr	r3, [r4, #16]
 800f62a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f62e:	68a3      	ldr	r3, [r4, #8]
 800f630:	4607      	mov	r7, r0
 800f632:	4691      	mov	r9, r2
 800f634:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f638:	f108 0601 	add.w	r6, r8, #1
 800f63c:	42b3      	cmp	r3, r6
 800f63e:	db0b      	blt.n	800f658 <__lshift+0x38>
 800f640:	4638      	mov	r0, r7
 800f642:	f7ff fd93 	bl	800f16c <_Balloc>
 800f646:	4605      	mov	r5, r0
 800f648:	b948      	cbnz	r0, 800f65e <__lshift+0x3e>
 800f64a:	4602      	mov	r2, r0
 800f64c:	4b28      	ldr	r3, [pc, #160]	; (800f6f0 <__lshift+0xd0>)
 800f64e:	4829      	ldr	r0, [pc, #164]	; (800f6f4 <__lshift+0xd4>)
 800f650:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f654:	f001 fcf4 	bl	8011040 <__assert_func>
 800f658:	3101      	adds	r1, #1
 800f65a:	005b      	lsls	r3, r3, #1
 800f65c:	e7ee      	b.n	800f63c <__lshift+0x1c>
 800f65e:	2300      	movs	r3, #0
 800f660:	f100 0114 	add.w	r1, r0, #20
 800f664:	f100 0210 	add.w	r2, r0, #16
 800f668:	4618      	mov	r0, r3
 800f66a:	4553      	cmp	r3, sl
 800f66c:	db33      	blt.n	800f6d6 <__lshift+0xb6>
 800f66e:	6920      	ldr	r0, [r4, #16]
 800f670:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f674:	f104 0314 	add.w	r3, r4, #20
 800f678:	f019 091f 	ands.w	r9, r9, #31
 800f67c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f680:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f684:	d02b      	beq.n	800f6de <__lshift+0xbe>
 800f686:	f1c9 0e20 	rsb	lr, r9, #32
 800f68a:	468a      	mov	sl, r1
 800f68c:	2200      	movs	r2, #0
 800f68e:	6818      	ldr	r0, [r3, #0]
 800f690:	fa00 f009 	lsl.w	r0, r0, r9
 800f694:	4310      	orrs	r0, r2
 800f696:	f84a 0b04 	str.w	r0, [sl], #4
 800f69a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f69e:	459c      	cmp	ip, r3
 800f6a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800f6a4:	d8f3      	bhi.n	800f68e <__lshift+0x6e>
 800f6a6:	ebac 0304 	sub.w	r3, ip, r4
 800f6aa:	3b15      	subs	r3, #21
 800f6ac:	f023 0303 	bic.w	r3, r3, #3
 800f6b0:	3304      	adds	r3, #4
 800f6b2:	f104 0015 	add.w	r0, r4, #21
 800f6b6:	4584      	cmp	ip, r0
 800f6b8:	bf38      	it	cc
 800f6ba:	2304      	movcc	r3, #4
 800f6bc:	50ca      	str	r2, [r1, r3]
 800f6be:	b10a      	cbz	r2, 800f6c4 <__lshift+0xa4>
 800f6c0:	f108 0602 	add.w	r6, r8, #2
 800f6c4:	3e01      	subs	r6, #1
 800f6c6:	4638      	mov	r0, r7
 800f6c8:	612e      	str	r6, [r5, #16]
 800f6ca:	4621      	mov	r1, r4
 800f6cc:	f7ff fd8e 	bl	800f1ec <_Bfree>
 800f6d0:	4628      	mov	r0, r5
 800f6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800f6da:	3301      	adds	r3, #1
 800f6dc:	e7c5      	b.n	800f66a <__lshift+0x4a>
 800f6de:	3904      	subs	r1, #4
 800f6e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800f6e8:	459c      	cmp	ip, r3
 800f6ea:	d8f9      	bhi.n	800f6e0 <__lshift+0xc0>
 800f6ec:	e7ea      	b.n	800f6c4 <__lshift+0xa4>
 800f6ee:	bf00      	nop
 800f6f0:	08011c2a 	.word	0x08011c2a
 800f6f4:	08011c3b 	.word	0x08011c3b

0800f6f8 <__mcmp>:
 800f6f8:	b530      	push	{r4, r5, lr}
 800f6fa:	6902      	ldr	r2, [r0, #16]
 800f6fc:	690c      	ldr	r4, [r1, #16]
 800f6fe:	1b12      	subs	r2, r2, r4
 800f700:	d10e      	bne.n	800f720 <__mcmp+0x28>
 800f702:	f100 0314 	add.w	r3, r0, #20
 800f706:	3114      	adds	r1, #20
 800f708:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f70c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f710:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f714:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f718:	42a5      	cmp	r5, r4
 800f71a:	d003      	beq.n	800f724 <__mcmp+0x2c>
 800f71c:	d305      	bcc.n	800f72a <__mcmp+0x32>
 800f71e:	2201      	movs	r2, #1
 800f720:	4610      	mov	r0, r2
 800f722:	bd30      	pop	{r4, r5, pc}
 800f724:	4283      	cmp	r3, r0
 800f726:	d3f3      	bcc.n	800f710 <__mcmp+0x18>
 800f728:	e7fa      	b.n	800f720 <__mcmp+0x28>
 800f72a:	f04f 32ff 	mov.w	r2, #4294967295
 800f72e:	e7f7      	b.n	800f720 <__mcmp+0x28>

0800f730 <__mdiff>:
 800f730:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f734:	460c      	mov	r4, r1
 800f736:	4606      	mov	r6, r0
 800f738:	4611      	mov	r1, r2
 800f73a:	4620      	mov	r0, r4
 800f73c:	4690      	mov	r8, r2
 800f73e:	f7ff ffdb 	bl	800f6f8 <__mcmp>
 800f742:	1e05      	subs	r5, r0, #0
 800f744:	d110      	bne.n	800f768 <__mdiff+0x38>
 800f746:	4629      	mov	r1, r5
 800f748:	4630      	mov	r0, r6
 800f74a:	f7ff fd0f 	bl	800f16c <_Balloc>
 800f74e:	b930      	cbnz	r0, 800f75e <__mdiff+0x2e>
 800f750:	4b3a      	ldr	r3, [pc, #232]	; (800f83c <__mdiff+0x10c>)
 800f752:	4602      	mov	r2, r0
 800f754:	f240 2137 	movw	r1, #567	; 0x237
 800f758:	4839      	ldr	r0, [pc, #228]	; (800f840 <__mdiff+0x110>)
 800f75a:	f001 fc71 	bl	8011040 <__assert_func>
 800f75e:	2301      	movs	r3, #1
 800f760:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f764:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f768:	bfa4      	itt	ge
 800f76a:	4643      	movge	r3, r8
 800f76c:	46a0      	movge	r8, r4
 800f76e:	4630      	mov	r0, r6
 800f770:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f774:	bfa6      	itte	ge
 800f776:	461c      	movge	r4, r3
 800f778:	2500      	movge	r5, #0
 800f77a:	2501      	movlt	r5, #1
 800f77c:	f7ff fcf6 	bl	800f16c <_Balloc>
 800f780:	b920      	cbnz	r0, 800f78c <__mdiff+0x5c>
 800f782:	4b2e      	ldr	r3, [pc, #184]	; (800f83c <__mdiff+0x10c>)
 800f784:	4602      	mov	r2, r0
 800f786:	f240 2145 	movw	r1, #581	; 0x245
 800f78a:	e7e5      	b.n	800f758 <__mdiff+0x28>
 800f78c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f790:	6926      	ldr	r6, [r4, #16]
 800f792:	60c5      	str	r5, [r0, #12]
 800f794:	f104 0914 	add.w	r9, r4, #20
 800f798:	f108 0514 	add.w	r5, r8, #20
 800f79c:	f100 0e14 	add.w	lr, r0, #20
 800f7a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f7a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f7a8:	f108 0210 	add.w	r2, r8, #16
 800f7ac:	46f2      	mov	sl, lr
 800f7ae:	2100      	movs	r1, #0
 800f7b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800f7b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f7b8:	fa11 f88b 	uxtah	r8, r1, fp
 800f7bc:	b299      	uxth	r1, r3
 800f7be:	0c1b      	lsrs	r3, r3, #16
 800f7c0:	eba8 0801 	sub.w	r8, r8, r1
 800f7c4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f7c8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f7cc:	fa1f f888 	uxth.w	r8, r8
 800f7d0:	1419      	asrs	r1, r3, #16
 800f7d2:	454e      	cmp	r6, r9
 800f7d4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f7d8:	f84a 3b04 	str.w	r3, [sl], #4
 800f7dc:	d8e8      	bhi.n	800f7b0 <__mdiff+0x80>
 800f7de:	1b33      	subs	r3, r6, r4
 800f7e0:	3b15      	subs	r3, #21
 800f7e2:	f023 0303 	bic.w	r3, r3, #3
 800f7e6:	3304      	adds	r3, #4
 800f7e8:	3415      	adds	r4, #21
 800f7ea:	42a6      	cmp	r6, r4
 800f7ec:	bf38      	it	cc
 800f7ee:	2304      	movcc	r3, #4
 800f7f0:	441d      	add	r5, r3
 800f7f2:	4473      	add	r3, lr
 800f7f4:	469e      	mov	lr, r3
 800f7f6:	462e      	mov	r6, r5
 800f7f8:	4566      	cmp	r6, ip
 800f7fa:	d30e      	bcc.n	800f81a <__mdiff+0xea>
 800f7fc:	f10c 0203 	add.w	r2, ip, #3
 800f800:	1b52      	subs	r2, r2, r5
 800f802:	f022 0203 	bic.w	r2, r2, #3
 800f806:	3d03      	subs	r5, #3
 800f808:	45ac      	cmp	ip, r5
 800f80a:	bf38      	it	cc
 800f80c:	2200      	movcc	r2, #0
 800f80e:	4413      	add	r3, r2
 800f810:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f814:	b17a      	cbz	r2, 800f836 <__mdiff+0x106>
 800f816:	6107      	str	r7, [r0, #16]
 800f818:	e7a4      	b.n	800f764 <__mdiff+0x34>
 800f81a:	f856 8b04 	ldr.w	r8, [r6], #4
 800f81e:	fa11 f288 	uxtah	r2, r1, r8
 800f822:	1414      	asrs	r4, r2, #16
 800f824:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f828:	b292      	uxth	r2, r2
 800f82a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f82e:	f84e 2b04 	str.w	r2, [lr], #4
 800f832:	1421      	asrs	r1, r4, #16
 800f834:	e7e0      	b.n	800f7f8 <__mdiff+0xc8>
 800f836:	3f01      	subs	r7, #1
 800f838:	e7ea      	b.n	800f810 <__mdiff+0xe0>
 800f83a:	bf00      	nop
 800f83c:	08011c2a 	.word	0x08011c2a
 800f840:	08011c3b 	.word	0x08011c3b

0800f844 <__ulp>:
 800f844:	b082      	sub	sp, #8
 800f846:	ed8d 0b00 	vstr	d0, [sp]
 800f84a:	9a01      	ldr	r2, [sp, #4]
 800f84c:	4b0f      	ldr	r3, [pc, #60]	; (800f88c <__ulp+0x48>)
 800f84e:	4013      	ands	r3, r2
 800f850:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800f854:	2b00      	cmp	r3, #0
 800f856:	dc08      	bgt.n	800f86a <__ulp+0x26>
 800f858:	425b      	negs	r3, r3
 800f85a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800f85e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f862:	da04      	bge.n	800f86e <__ulp+0x2a>
 800f864:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f868:	4113      	asrs	r3, r2
 800f86a:	2200      	movs	r2, #0
 800f86c:	e008      	b.n	800f880 <__ulp+0x3c>
 800f86e:	f1a2 0314 	sub.w	r3, r2, #20
 800f872:	2b1e      	cmp	r3, #30
 800f874:	bfda      	itte	le
 800f876:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800f87a:	40da      	lsrle	r2, r3
 800f87c:	2201      	movgt	r2, #1
 800f87e:	2300      	movs	r3, #0
 800f880:	4619      	mov	r1, r3
 800f882:	4610      	mov	r0, r2
 800f884:	ec41 0b10 	vmov	d0, r0, r1
 800f888:	b002      	add	sp, #8
 800f88a:	4770      	bx	lr
 800f88c:	7ff00000 	.word	0x7ff00000

0800f890 <__b2d>:
 800f890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f894:	6906      	ldr	r6, [r0, #16]
 800f896:	f100 0814 	add.w	r8, r0, #20
 800f89a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f89e:	1f37      	subs	r7, r6, #4
 800f8a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f8a4:	4610      	mov	r0, r2
 800f8a6:	f7ff fd53 	bl	800f350 <__hi0bits>
 800f8aa:	f1c0 0320 	rsb	r3, r0, #32
 800f8ae:	280a      	cmp	r0, #10
 800f8b0:	600b      	str	r3, [r1, #0]
 800f8b2:	491b      	ldr	r1, [pc, #108]	; (800f920 <__b2d+0x90>)
 800f8b4:	dc15      	bgt.n	800f8e2 <__b2d+0x52>
 800f8b6:	f1c0 0c0b 	rsb	ip, r0, #11
 800f8ba:	fa22 f30c 	lsr.w	r3, r2, ip
 800f8be:	45b8      	cmp	r8, r7
 800f8c0:	ea43 0501 	orr.w	r5, r3, r1
 800f8c4:	bf34      	ite	cc
 800f8c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f8ca:	2300      	movcs	r3, #0
 800f8cc:	3015      	adds	r0, #21
 800f8ce:	fa02 f000 	lsl.w	r0, r2, r0
 800f8d2:	fa23 f30c 	lsr.w	r3, r3, ip
 800f8d6:	4303      	orrs	r3, r0
 800f8d8:	461c      	mov	r4, r3
 800f8da:	ec45 4b10 	vmov	d0, r4, r5
 800f8de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8e2:	45b8      	cmp	r8, r7
 800f8e4:	bf3a      	itte	cc
 800f8e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f8ea:	f1a6 0708 	subcc.w	r7, r6, #8
 800f8ee:	2300      	movcs	r3, #0
 800f8f0:	380b      	subs	r0, #11
 800f8f2:	d012      	beq.n	800f91a <__b2d+0x8a>
 800f8f4:	f1c0 0120 	rsb	r1, r0, #32
 800f8f8:	fa23 f401 	lsr.w	r4, r3, r1
 800f8fc:	4082      	lsls	r2, r0
 800f8fe:	4322      	orrs	r2, r4
 800f900:	4547      	cmp	r7, r8
 800f902:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800f906:	bf8c      	ite	hi
 800f908:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f90c:	2200      	movls	r2, #0
 800f90e:	4083      	lsls	r3, r0
 800f910:	40ca      	lsrs	r2, r1
 800f912:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f916:	4313      	orrs	r3, r2
 800f918:	e7de      	b.n	800f8d8 <__b2d+0x48>
 800f91a:	ea42 0501 	orr.w	r5, r2, r1
 800f91e:	e7db      	b.n	800f8d8 <__b2d+0x48>
 800f920:	3ff00000 	.word	0x3ff00000

0800f924 <__d2b>:
 800f924:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f928:	460f      	mov	r7, r1
 800f92a:	2101      	movs	r1, #1
 800f92c:	ec59 8b10 	vmov	r8, r9, d0
 800f930:	4616      	mov	r6, r2
 800f932:	f7ff fc1b 	bl	800f16c <_Balloc>
 800f936:	4604      	mov	r4, r0
 800f938:	b930      	cbnz	r0, 800f948 <__d2b+0x24>
 800f93a:	4602      	mov	r2, r0
 800f93c:	4b24      	ldr	r3, [pc, #144]	; (800f9d0 <__d2b+0xac>)
 800f93e:	4825      	ldr	r0, [pc, #148]	; (800f9d4 <__d2b+0xb0>)
 800f940:	f240 310f 	movw	r1, #783	; 0x30f
 800f944:	f001 fb7c 	bl	8011040 <__assert_func>
 800f948:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f94c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f950:	bb2d      	cbnz	r5, 800f99e <__d2b+0x7a>
 800f952:	9301      	str	r3, [sp, #4]
 800f954:	f1b8 0300 	subs.w	r3, r8, #0
 800f958:	d026      	beq.n	800f9a8 <__d2b+0x84>
 800f95a:	4668      	mov	r0, sp
 800f95c:	9300      	str	r3, [sp, #0]
 800f95e:	f7ff fd17 	bl	800f390 <__lo0bits>
 800f962:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f966:	b1e8      	cbz	r0, 800f9a4 <__d2b+0x80>
 800f968:	f1c0 0320 	rsb	r3, r0, #32
 800f96c:	fa02 f303 	lsl.w	r3, r2, r3
 800f970:	430b      	orrs	r3, r1
 800f972:	40c2      	lsrs	r2, r0
 800f974:	6163      	str	r3, [r4, #20]
 800f976:	9201      	str	r2, [sp, #4]
 800f978:	9b01      	ldr	r3, [sp, #4]
 800f97a:	61a3      	str	r3, [r4, #24]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	bf14      	ite	ne
 800f980:	2202      	movne	r2, #2
 800f982:	2201      	moveq	r2, #1
 800f984:	6122      	str	r2, [r4, #16]
 800f986:	b1bd      	cbz	r5, 800f9b8 <__d2b+0x94>
 800f988:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f98c:	4405      	add	r5, r0
 800f98e:	603d      	str	r5, [r7, #0]
 800f990:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f994:	6030      	str	r0, [r6, #0]
 800f996:	4620      	mov	r0, r4
 800f998:	b003      	add	sp, #12
 800f99a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f99e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f9a2:	e7d6      	b.n	800f952 <__d2b+0x2e>
 800f9a4:	6161      	str	r1, [r4, #20]
 800f9a6:	e7e7      	b.n	800f978 <__d2b+0x54>
 800f9a8:	a801      	add	r0, sp, #4
 800f9aa:	f7ff fcf1 	bl	800f390 <__lo0bits>
 800f9ae:	9b01      	ldr	r3, [sp, #4]
 800f9b0:	6163      	str	r3, [r4, #20]
 800f9b2:	3020      	adds	r0, #32
 800f9b4:	2201      	movs	r2, #1
 800f9b6:	e7e5      	b.n	800f984 <__d2b+0x60>
 800f9b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f9bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f9c0:	6038      	str	r0, [r7, #0]
 800f9c2:	6918      	ldr	r0, [r3, #16]
 800f9c4:	f7ff fcc4 	bl	800f350 <__hi0bits>
 800f9c8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f9cc:	e7e2      	b.n	800f994 <__d2b+0x70>
 800f9ce:	bf00      	nop
 800f9d0:	08011c2a 	.word	0x08011c2a
 800f9d4:	08011c3b 	.word	0x08011c3b

0800f9d8 <__ratio>:
 800f9d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9dc:	4688      	mov	r8, r1
 800f9de:	4669      	mov	r1, sp
 800f9e0:	4681      	mov	r9, r0
 800f9e2:	f7ff ff55 	bl	800f890 <__b2d>
 800f9e6:	a901      	add	r1, sp, #4
 800f9e8:	4640      	mov	r0, r8
 800f9ea:	ec55 4b10 	vmov	r4, r5, d0
 800f9ee:	f7ff ff4f 	bl	800f890 <__b2d>
 800f9f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f9f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f9fa:	eba3 0c02 	sub.w	ip, r3, r2
 800f9fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fa02:	1a9b      	subs	r3, r3, r2
 800fa04:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fa08:	ec51 0b10 	vmov	r0, r1, d0
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	bfd6      	itet	le
 800fa10:	460a      	movle	r2, r1
 800fa12:	462a      	movgt	r2, r5
 800fa14:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fa18:	468b      	mov	fp, r1
 800fa1a:	462f      	mov	r7, r5
 800fa1c:	bfd4      	ite	le
 800fa1e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fa22:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fa26:	4620      	mov	r0, r4
 800fa28:	ee10 2a10 	vmov	r2, s0
 800fa2c:	465b      	mov	r3, fp
 800fa2e:	4639      	mov	r1, r7
 800fa30:	f7f0 ff34 	bl	800089c <__aeabi_ddiv>
 800fa34:	ec41 0b10 	vmov	d0, r0, r1
 800fa38:	b003      	add	sp, #12
 800fa3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fa3e <__copybits>:
 800fa3e:	3901      	subs	r1, #1
 800fa40:	b570      	push	{r4, r5, r6, lr}
 800fa42:	1149      	asrs	r1, r1, #5
 800fa44:	6914      	ldr	r4, [r2, #16]
 800fa46:	3101      	adds	r1, #1
 800fa48:	f102 0314 	add.w	r3, r2, #20
 800fa4c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fa50:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fa54:	1f05      	subs	r5, r0, #4
 800fa56:	42a3      	cmp	r3, r4
 800fa58:	d30c      	bcc.n	800fa74 <__copybits+0x36>
 800fa5a:	1aa3      	subs	r3, r4, r2
 800fa5c:	3b11      	subs	r3, #17
 800fa5e:	f023 0303 	bic.w	r3, r3, #3
 800fa62:	3211      	adds	r2, #17
 800fa64:	42a2      	cmp	r2, r4
 800fa66:	bf88      	it	hi
 800fa68:	2300      	movhi	r3, #0
 800fa6a:	4418      	add	r0, r3
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	4288      	cmp	r0, r1
 800fa70:	d305      	bcc.n	800fa7e <__copybits+0x40>
 800fa72:	bd70      	pop	{r4, r5, r6, pc}
 800fa74:	f853 6b04 	ldr.w	r6, [r3], #4
 800fa78:	f845 6f04 	str.w	r6, [r5, #4]!
 800fa7c:	e7eb      	b.n	800fa56 <__copybits+0x18>
 800fa7e:	f840 3b04 	str.w	r3, [r0], #4
 800fa82:	e7f4      	b.n	800fa6e <__copybits+0x30>

0800fa84 <__any_on>:
 800fa84:	f100 0214 	add.w	r2, r0, #20
 800fa88:	6900      	ldr	r0, [r0, #16]
 800fa8a:	114b      	asrs	r3, r1, #5
 800fa8c:	4298      	cmp	r0, r3
 800fa8e:	b510      	push	{r4, lr}
 800fa90:	db11      	blt.n	800fab6 <__any_on+0x32>
 800fa92:	dd0a      	ble.n	800faaa <__any_on+0x26>
 800fa94:	f011 011f 	ands.w	r1, r1, #31
 800fa98:	d007      	beq.n	800faaa <__any_on+0x26>
 800fa9a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fa9e:	fa24 f001 	lsr.w	r0, r4, r1
 800faa2:	fa00 f101 	lsl.w	r1, r0, r1
 800faa6:	428c      	cmp	r4, r1
 800faa8:	d10b      	bne.n	800fac2 <__any_on+0x3e>
 800faaa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800faae:	4293      	cmp	r3, r2
 800fab0:	d803      	bhi.n	800faba <__any_on+0x36>
 800fab2:	2000      	movs	r0, #0
 800fab4:	bd10      	pop	{r4, pc}
 800fab6:	4603      	mov	r3, r0
 800fab8:	e7f7      	b.n	800faaa <__any_on+0x26>
 800faba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fabe:	2900      	cmp	r1, #0
 800fac0:	d0f5      	beq.n	800faae <__any_on+0x2a>
 800fac2:	2001      	movs	r0, #1
 800fac4:	e7f6      	b.n	800fab4 <__any_on+0x30>

0800fac6 <sulp>:
 800fac6:	b570      	push	{r4, r5, r6, lr}
 800fac8:	4604      	mov	r4, r0
 800faca:	460d      	mov	r5, r1
 800facc:	ec45 4b10 	vmov	d0, r4, r5
 800fad0:	4616      	mov	r6, r2
 800fad2:	f7ff feb7 	bl	800f844 <__ulp>
 800fad6:	ec51 0b10 	vmov	r0, r1, d0
 800fada:	b17e      	cbz	r6, 800fafc <sulp+0x36>
 800fadc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fae0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	dd09      	ble.n	800fafc <sulp+0x36>
 800fae8:	051b      	lsls	r3, r3, #20
 800faea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800faee:	2400      	movs	r4, #0
 800faf0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800faf4:	4622      	mov	r2, r4
 800faf6:	462b      	mov	r3, r5
 800faf8:	f7f0 fda6 	bl	8000648 <__aeabi_dmul>
 800fafc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fb00 <_strtod_l>:
 800fb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb04:	ed2d 8b02 	vpush	{d8}
 800fb08:	b09b      	sub	sp, #108	; 0x6c
 800fb0a:	4604      	mov	r4, r0
 800fb0c:	9213      	str	r2, [sp, #76]	; 0x4c
 800fb0e:	2200      	movs	r2, #0
 800fb10:	9216      	str	r2, [sp, #88]	; 0x58
 800fb12:	460d      	mov	r5, r1
 800fb14:	f04f 0800 	mov.w	r8, #0
 800fb18:	f04f 0900 	mov.w	r9, #0
 800fb1c:	460a      	mov	r2, r1
 800fb1e:	9215      	str	r2, [sp, #84]	; 0x54
 800fb20:	7811      	ldrb	r1, [r2, #0]
 800fb22:	292b      	cmp	r1, #43	; 0x2b
 800fb24:	d04c      	beq.n	800fbc0 <_strtod_l+0xc0>
 800fb26:	d83a      	bhi.n	800fb9e <_strtod_l+0x9e>
 800fb28:	290d      	cmp	r1, #13
 800fb2a:	d834      	bhi.n	800fb96 <_strtod_l+0x96>
 800fb2c:	2908      	cmp	r1, #8
 800fb2e:	d834      	bhi.n	800fb9a <_strtod_l+0x9a>
 800fb30:	2900      	cmp	r1, #0
 800fb32:	d03d      	beq.n	800fbb0 <_strtod_l+0xb0>
 800fb34:	2200      	movs	r2, #0
 800fb36:	920a      	str	r2, [sp, #40]	; 0x28
 800fb38:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800fb3a:	7832      	ldrb	r2, [r6, #0]
 800fb3c:	2a30      	cmp	r2, #48	; 0x30
 800fb3e:	f040 80b4 	bne.w	800fcaa <_strtod_l+0x1aa>
 800fb42:	7872      	ldrb	r2, [r6, #1]
 800fb44:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800fb48:	2a58      	cmp	r2, #88	; 0x58
 800fb4a:	d170      	bne.n	800fc2e <_strtod_l+0x12e>
 800fb4c:	9302      	str	r3, [sp, #8]
 800fb4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb50:	9301      	str	r3, [sp, #4]
 800fb52:	ab16      	add	r3, sp, #88	; 0x58
 800fb54:	9300      	str	r3, [sp, #0]
 800fb56:	4a8e      	ldr	r2, [pc, #568]	; (800fd90 <_strtod_l+0x290>)
 800fb58:	ab17      	add	r3, sp, #92	; 0x5c
 800fb5a:	a915      	add	r1, sp, #84	; 0x54
 800fb5c:	4620      	mov	r0, r4
 800fb5e:	f001 fb0b 	bl	8011178 <__gethex>
 800fb62:	f010 070f 	ands.w	r7, r0, #15
 800fb66:	4605      	mov	r5, r0
 800fb68:	d005      	beq.n	800fb76 <_strtod_l+0x76>
 800fb6a:	2f06      	cmp	r7, #6
 800fb6c:	d12a      	bne.n	800fbc4 <_strtod_l+0xc4>
 800fb6e:	3601      	adds	r6, #1
 800fb70:	2300      	movs	r3, #0
 800fb72:	9615      	str	r6, [sp, #84]	; 0x54
 800fb74:	930a      	str	r3, [sp, #40]	; 0x28
 800fb76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	f040 857f 	bne.w	801067c <_strtod_l+0xb7c>
 800fb7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb80:	b1db      	cbz	r3, 800fbba <_strtod_l+0xba>
 800fb82:	4642      	mov	r2, r8
 800fb84:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fb88:	ec43 2b10 	vmov	d0, r2, r3
 800fb8c:	b01b      	add	sp, #108	; 0x6c
 800fb8e:	ecbd 8b02 	vpop	{d8}
 800fb92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb96:	2920      	cmp	r1, #32
 800fb98:	d1cc      	bne.n	800fb34 <_strtod_l+0x34>
 800fb9a:	3201      	adds	r2, #1
 800fb9c:	e7bf      	b.n	800fb1e <_strtod_l+0x1e>
 800fb9e:	292d      	cmp	r1, #45	; 0x2d
 800fba0:	d1c8      	bne.n	800fb34 <_strtod_l+0x34>
 800fba2:	2101      	movs	r1, #1
 800fba4:	910a      	str	r1, [sp, #40]	; 0x28
 800fba6:	1c51      	adds	r1, r2, #1
 800fba8:	9115      	str	r1, [sp, #84]	; 0x54
 800fbaa:	7852      	ldrb	r2, [r2, #1]
 800fbac:	2a00      	cmp	r2, #0
 800fbae:	d1c3      	bne.n	800fb38 <_strtod_l+0x38>
 800fbb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fbb2:	9515      	str	r5, [sp, #84]	; 0x54
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	f040 855f 	bne.w	8010678 <_strtod_l+0xb78>
 800fbba:	4642      	mov	r2, r8
 800fbbc:	464b      	mov	r3, r9
 800fbbe:	e7e3      	b.n	800fb88 <_strtod_l+0x88>
 800fbc0:	2100      	movs	r1, #0
 800fbc2:	e7ef      	b.n	800fba4 <_strtod_l+0xa4>
 800fbc4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fbc6:	b13a      	cbz	r2, 800fbd8 <_strtod_l+0xd8>
 800fbc8:	2135      	movs	r1, #53	; 0x35
 800fbca:	a818      	add	r0, sp, #96	; 0x60
 800fbcc:	f7ff ff37 	bl	800fa3e <__copybits>
 800fbd0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fbd2:	4620      	mov	r0, r4
 800fbd4:	f7ff fb0a 	bl	800f1ec <_Bfree>
 800fbd8:	3f01      	subs	r7, #1
 800fbda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fbdc:	2f04      	cmp	r7, #4
 800fbde:	d806      	bhi.n	800fbee <_strtod_l+0xee>
 800fbe0:	e8df f007 	tbb	[pc, r7]
 800fbe4:	201d0314 	.word	0x201d0314
 800fbe8:	14          	.byte	0x14
 800fbe9:	00          	.byte	0x00
 800fbea:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800fbee:	05e9      	lsls	r1, r5, #23
 800fbf0:	bf48      	it	mi
 800fbf2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800fbf6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fbfa:	0d1b      	lsrs	r3, r3, #20
 800fbfc:	051b      	lsls	r3, r3, #20
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d1b9      	bne.n	800fb76 <_strtod_l+0x76>
 800fc02:	f7fe faf7 	bl	800e1f4 <__errno>
 800fc06:	2322      	movs	r3, #34	; 0x22
 800fc08:	6003      	str	r3, [r0, #0]
 800fc0a:	e7b4      	b.n	800fb76 <_strtod_l+0x76>
 800fc0c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800fc10:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fc14:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fc18:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800fc1c:	e7e7      	b.n	800fbee <_strtod_l+0xee>
 800fc1e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800fd98 <_strtod_l+0x298>
 800fc22:	e7e4      	b.n	800fbee <_strtod_l+0xee>
 800fc24:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800fc28:	f04f 38ff 	mov.w	r8, #4294967295
 800fc2c:	e7df      	b.n	800fbee <_strtod_l+0xee>
 800fc2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fc30:	1c5a      	adds	r2, r3, #1
 800fc32:	9215      	str	r2, [sp, #84]	; 0x54
 800fc34:	785b      	ldrb	r3, [r3, #1]
 800fc36:	2b30      	cmp	r3, #48	; 0x30
 800fc38:	d0f9      	beq.n	800fc2e <_strtod_l+0x12e>
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d09b      	beq.n	800fb76 <_strtod_l+0x76>
 800fc3e:	2301      	movs	r3, #1
 800fc40:	f04f 0a00 	mov.w	sl, #0
 800fc44:	9304      	str	r3, [sp, #16]
 800fc46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fc48:	930b      	str	r3, [sp, #44]	; 0x2c
 800fc4a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800fc4e:	46d3      	mov	fp, sl
 800fc50:	220a      	movs	r2, #10
 800fc52:	9815      	ldr	r0, [sp, #84]	; 0x54
 800fc54:	7806      	ldrb	r6, [r0, #0]
 800fc56:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800fc5a:	b2d9      	uxtb	r1, r3
 800fc5c:	2909      	cmp	r1, #9
 800fc5e:	d926      	bls.n	800fcae <_strtod_l+0x1ae>
 800fc60:	494c      	ldr	r1, [pc, #304]	; (800fd94 <_strtod_l+0x294>)
 800fc62:	2201      	movs	r2, #1
 800fc64:	f001 f9c0 	bl	8010fe8 <strncmp>
 800fc68:	2800      	cmp	r0, #0
 800fc6a:	d030      	beq.n	800fcce <_strtod_l+0x1ce>
 800fc6c:	2000      	movs	r0, #0
 800fc6e:	4632      	mov	r2, r6
 800fc70:	9005      	str	r0, [sp, #20]
 800fc72:	465e      	mov	r6, fp
 800fc74:	4603      	mov	r3, r0
 800fc76:	2a65      	cmp	r2, #101	; 0x65
 800fc78:	d001      	beq.n	800fc7e <_strtod_l+0x17e>
 800fc7a:	2a45      	cmp	r2, #69	; 0x45
 800fc7c:	d113      	bne.n	800fca6 <_strtod_l+0x1a6>
 800fc7e:	b91e      	cbnz	r6, 800fc88 <_strtod_l+0x188>
 800fc80:	9a04      	ldr	r2, [sp, #16]
 800fc82:	4302      	orrs	r2, r0
 800fc84:	d094      	beq.n	800fbb0 <_strtod_l+0xb0>
 800fc86:	2600      	movs	r6, #0
 800fc88:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800fc8a:	1c6a      	adds	r2, r5, #1
 800fc8c:	9215      	str	r2, [sp, #84]	; 0x54
 800fc8e:	786a      	ldrb	r2, [r5, #1]
 800fc90:	2a2b      	cmp	r2, #43	; 0x2b
 800fc92:	d074      	beq.n	800fd7e <_strtod_l+0x27e>
 800fc94:	2a2d      	cmp	r2, #45	; 0x2d
 800fc96:	d078      	beq.n	800fd8a <_strtod_l+0x28a>
 800fc98:	f04f 0c00 	mov.w	ip, #0
 800fc9c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800fca0:	2909      	cmp	r1, #9
 800fca2:	d97f      	bls.n	800fda4 <_strtod_l+0x2a4>
 800fca4:	9515      	str	r5, [sp, #84]	; 0x54
 800fca6:	2700      	movs	r7, #0
 800fca8:	e09e      	b.n	800fde8 <_strtod_l+0x2e8>
 800fcaa:	2300      	movs	r3, #0
 800fcac:	e7c8      	b.n	800fc40 <_strtod_l+0x140>
 800fcae:	f1bb 0f08 	cmp.w	fp, #8
 800fcb2:	bfd8      	it	le
 800fcb4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800fcb6:	f100 0001 	add.w	r0, r0, #1
 800fcba:	bfda      	itte	le
 800fcbc:	fb02 3301 	mlale	r3, r2, r1, r3
 800fcc0:	9309      	strle	r3, [sp, #36]	; 0x24
 800fcc2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800fcc6:	f10b 0b01 	add.w	fp, fp, #1
 800fcca:	9015      	str	r0, [sp, #84]	; 0x54
 800fccc:	e7c1      	b.n	800fc52 <_strtod_l+0x152>
 800fcce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fcd0:	1c5a      	adds	r2, r3, #1
 800fcd2:	9215      	str	r2, [sp, #84]	; 0x54
 800fcd4:	785a      	ldrb	r2, [r3, #1]
 800fcd6:	f1bb 0f00 	cmp.w	fp, #0
 800fcda:	d037      	beq.n	800fd4c <_strtod_l+0x24c>
 800fcdc:	9005      	str	r0, [sp, #20]
 800fcde:	465e      	mov	r6, fp
 800fce0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800fce4:	2b09      	cmp	r3, #9
 800fce6:	d912      	bls.n	800fd0e <_strtod_l+0x20e>
 800fce8:	2301      	movs	r3, #1
 800fcea:	e7c4      	b.n	800fc76 <_strtod_l+0x176>
 800fcec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fcee:	1c5a      	adds	r2, r3, #1
 800fcf0:	9215      	str	r2, [sp, #84]	; 0x54
 800fcf2:	785a      	ldrb	r2, [r3, #1]
 800fcf4:	3001      	adds	r0, #1
 800fcf6:	2a30      	cmp	r2, #48	; 0x30
 800fcf8:	d0f8      	beq.n	800fcec <_strtod_l+0x1ec>
 800fcfa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800fcfe:	2b08      	cmp	r3, #8
 800fd00:	f200 84c1 	bhi.w	8010686 <_strtod_l+0xb86>
 800fd04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd06:	9005      	str	r0, [sp, #20]
 800fd08:	2000      	movs	r0, #0
 800fd0a:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd0c:	4606      	mov	r6, r0
 800fd0e:	3a30      	subs	r2, #48	; 0x30
 800fd10:	f100 0301 	add.w	r3, r0, #1
 800fd14:	d014      	beq.n	800fd40 <_strtod_l+0x240>
 800fd16:	9905      	ldr	r1, [sp, #20]
 800fd18:	4419      	add	r1, r3
 800fd1a:	9105      	str	r1, [sp, #20]
 800fd1c:	4633      	mov	r3, r6
 800fd1e:	eb00 0c06 	add.w	ip, r0, r6
 800fd22:	210a      	movs	r1, #10
 800fd24:	4563      	cmp	r3, ip
 800fd26:	d113      	bne.n	800fd50 <_strtod_l+0x250>
 800fd28:	1833      	adds	r3, r6, r0
 800fd2a:	2b08      	cmp	r3, #8
 800fd2c:	f106 0601 	add.w	r6, r6, #1
 800fd30:	4406      	add	r6, r0
 800fd32:	dc1a      	bgt.n	800fd6a <_strtod_l+0x26a>
 800fd34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fd36:	230a      	movs	r3, #10
 800fd38:	fb03 2301 	mla	r3, r3, r1, r2
 800fd3c:	9309      	str	r3, [sp, #36]	; 0x24
 800fd3e:	2300      	movs	r3, #0
 800fd40:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fd42:	1c51      	adds	r1, r2, #1
 800fd44:	9115      	str	r1, [sp, #84]	; 0x54
 800fd46:	7852      	ldrb	r2, [r2, #1]
 800fd48:	4618      	mov	r0, r3
 800fd4a:	e7c9      	b.n	800fce0 <_strtod_l+0x1e0>
 800fd4c:	4658      	mov	r0, fp
 800fd4e:	e7d2      	b.n	800fcf6 <_strtod_l+0x1f6>
 800fd50:	2b08      	cmp	r3, #8
 800fd52:	f103 0301 	add.w	r3, r3, #1
 800fd56:	dc03      	bgt.n	800fd60 <_strtod_l+0x260>
 800fd58:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fd5a:	434f      	muls	r7, r1
 800fd5c:	9709      	str	r7, [sp, #36]	; 0x24
 800fd5e:	e7e1      	b.n	800fd24 <_strtod_l+0x224>
 800fd60:	2b10      	cmp	r3, #16
 800fd62:	bfd8      	it	le
 800fd64:	fb01 fa0a 	mulle.w	sl, r1, sl
 800fd68:	e7dc      	b.n	800fd24 <_strtod_l+0x224>
 800fd6a:	2e10      	cmp	r6, #16
 800fd6c:	bfdc      	itt	le
 800fd6e:	230a      	movle	r3, #10
 800fd70:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800fd74:	e7e3      	b.n	800fd3e <_strtod_l+0x23e>
 800fd76:	2300      	movs	r3, #0
 800fd78:	9305      	str	r3, [sp, #20]
 800fd7a:	2301      	movs	r3, #1
 800fd7c:	e780      	b.n	800fc80 <_strtod_l+0x180>
 800fd7e:	f04f 0c00 	mov.w	ip, #0
 800fd82:	1caa      	adds	r2, r5, #2
 800fd84:	9215      	str	r2, [sp, #84]	; 0x54
 800fd86:	78aa      	ldrb	r2, [r5, #2]
 800fd88:	e788      	b.n	800fc9c <_strtod_l+0x19c>
 800fd8a:	f04f 0c01 	mov.w	ip, #1
 800fd8e:	e7f8      	b.n	800fd82 <_strtod_l+0x282>
 800fd90:	08011d98 	.word	0x08011d98
 800fd94:	08011d94 	.word	0x08011d94
 800fd98:	7ff00000 	.word	0x7ff00000
 800fd9c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fd9e:	1c51      	adds	r1, r2, #1
 800fda0:	9115      	str	r1, [sp, #84]	; 0x54
 800fda2:	7852      	ldrb	r2, [r2, #1]
 800fda4:	2a30      	cmp	r2, #48	; 0x30
 800fda6:	d0f9      	beq.n	800fd9c <_strtod_l+0x29c>
 800fda8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800fdac:	2908      	cmp	r1, #8
 800fdae:	f63f af7a 	bhi.w	800fca6 <_strtod_l+0x1a6>
 800fdb2:	3a30      	subs	r2, #48	; 0x30
 800fdb4:	9208      	str	r2, [sp, #32]
 800fdb6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fdb8:	920c      	str	r2, [sp, #48]	; 0x30
 800fdba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fdbc:	1c57      	adds	r7, r2, #1
 800fdbe:	9715      	str	r7, [sp, #84]	; 0x54
 800fdc0:	7852      	ldrb	r2, [r2, #1]
 800fdc2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800fdc6:	f1be 0f09 	cmp.w	lr, #9
 800fdca:	d938      	bls.n	800fe3e <_strtod_l+0x33e>
 800fdcc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fdce:	1a7f      	subs	r7, r7, r1
 800fdd0:	2f08      	cmp	r7, #8
 800fdd2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800fdd6:	dc03      	bgt.n	800fde0 <_strtod_l+0x2e0>
 800fdd8:	9908      	ldr	r1, [sp, #32]
 800fdda:	428f      	cmp	r7, r1
 800fddc:	bfa8      	it	ge
 800fdde:	460f      	movge	r7, r1
 800fde0:	f1bc 0f00 	cmp.w	ip, #0
 800fde4:	d000      	beq.n	800fde8 <_strtod_l+0x2e8>
 800fde6:	427f      	negs	r7, r7
 800fde8:	2e00      	cmp	r6, #0
 800fdea:	d14f      	bne.n	800fe8c <_strtod_l+0x38c>
 800fdec:	9904      	ldr	r1, [sp, #16]
 800fdee:	4301      	orrs	r1, r0
 800fdf0:	f47f aec1 	bne.w	800fb76 <_strtod_l+0x76>
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	f47f aedb 	bne.w	800fbb0 <_strtod_l+0xb0>
 800fdfa:	2a69      	cmp	r2, #105	; 0x69
 800fdfc:	d029      	beq.n	800fe52 <_strtod_l+0x352>
 800fdfe:	dc26      	bgt.n	800fe4e <_strtod_l+0x34e>
 800fe00:	2a49      	cmp	r2, #73	; 0x49
 800fe02:	d026      	beq.n	800fe52 <_strtod_l+0x352>
 800fe04:	2a4e      	cmp	r2, #78	; 0x4e
 800fe06:	f47f aed3 	bne.w	800fbb0 <_strtod_l+0xb0>
 800fe0a:	499b      	ldr	r1, [pc, #620]	; (8010078 <_strtod_l+0x578>)
 800fe0c:	a815      	add	r0, sp, #84	; 0x54
 800fe0e:	f001 fbf3 	bl	80115f8 <__match>
 800fe12:	2800      	cmp	r0, #0
 800fe14:	f43f aecc 	beq.w	800fbb0 <_strtod_l+0xb0>
 800fe18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe1a:	781b      	ldrb	r3, [r3, #0]
 800fe1c:	2b28      	cmp	r3, #40	; 0x28
 800fe1e:	d12f      	bne.n	800fe80 <_strtod_l+0x380>
 800fe20:	4996      	ldr	r1, [pc, #600]	; (801007c <_strtod_l+0x57c>)
 800fe22:	aa18      	add	r2, sp, #96	; 0x60
 800fe24:	a815      	add	r0, sp, #84	; 0x54
 800fe26:	f001 fbfb 	bl	8011620 <__hexnan>
 800fe2a:	2805      	cmp	r0, #5
 800fe2c:	d128      	bne.n	800fe80 <_strtod_l+0x380>
 800fe2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fe30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fe34:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800fe38:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800fe3c:	e69b      	b.n	800fb76 <_strtod_l+0x76>
 800fe3e:	9f08      	ldr	r7, [sp, #32]
 800fe40:	210a      	movs	r1, #10
 800fe42:	fb01 2107 	mla	r1, r1, r7, r2
 800fe46:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800fe4a:	9208      	str	r2, [sp, #32]
 800fe4c:	e7b5      	b.n	800fdba <_strtod_l+0x2ba>
 800fe4e:	2a6e      	cmp	r2, #110	; 0x6e
 800fe50:	e7d9      	b.n	800fe06 <_strtod_l+0x306>
 800fe52:	498b      	ldr	r1, [pc, #556]	; (8010080 <_strtod_l+0x580>)
 800fe54:	a815      	add	r0, sp, #84	; 0x54
 800fe56:	f001 fbcf 	bl	80115f8 <__match>
 800fe5a:	2800      	cmp	r0, #0
 800fe5c:	f43f aea8 	beq.w	800fbb0 <_strtod_l+0xb0>
 800fe60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe62:	4988      	ldr	r1, [pc, #544]	; (8010084 <_strtod_l+0x584>)
 800fe64:	3b01      	subs	r3, #1
 800fe66:	a815      	add	r0, sp, #84	; 0x54
 800fe68:	9315      	str	r3, [sp, #84]	; 0x54
 800fe6a:	f001 fbc5 	bl	80115f8 <__match>
 800fe6e:	b910      	cbnz	r0, 800fe76 <_strtod_l+0x376>
 800fe70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe72:	3301      	adds	r3, #1
 800fe74:	9315      	str	r3, [sp, #84]	; 0x54
 800fe76:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8010094 <_strtod_l+0x594>
 800fe7a:	f04f 0800 	mov.w	r8, #0
 800fe7e:	e67a      	b.n	800fb76 <_strtod_l+0x76>
 800fe80:	4881      	ldr	r0, [pc, #516]	; (8010088 <_strtod_l+0x588>)
 800fe82:	f001 f8d5 	bl	8011030 <nan>
 800fe86:	ec59 8b10 	vmov	r8, r9, d0
 800fe8a:	e674      	b.n	800fb76 <_strtod_l+0x76>
 800fe8c:	9b05      	ldr	r3, [sp, #20]
 800fe8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe90:	1afb      	subs	r3, r7, r3
 800fe92:	f1bb 0f00 	cmp.w	fp, #0
 800fe96:	bf08      	it	eq
 800fe98:	46b3      	moveq	fp, r6
 800fe9a:	2e10      	cmp	r6, #16
 800fe9c:	9308      	str	r3, [sp, #32]
 800fe9e:	4635      	mov	r5, r6
 800fea0:	bfa8      	it	ge
 800fea2:	2510      	movge	r5, #16
 800fea4:	f7f0 fb56 	bl	8000554 <__aeabi_ui2d>
 800fea8:	2e09      	cmp	r6, #9
 800feaa:	4680      	mov	r8, r0
 800feac:	4689      	mov	r9, r1
 800feae:	dd13      	ble.n	800fed8 <_strtod_l+0x3d8>
 800feb0:	4b76      	ldr	r3, [pc, #472]	; (801008c <_strtod_l+0x58c>)
 800feb2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800feb6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800feba:	f7f0 fbc5 	bl	8000648 <__aeabi_dmul>
 800febe:	4680      	mov	r8, r0
 800fec0:	4650      	mov	r0, sl
 800fec2:	4689      	mov	r9, r1
 800fec4:	f7f0 fb46 	bl	8000554 <__aeabi_ui2d>
 800fec8:	4602      	mov	r2, r0
 800feca:	460b      	mov	r3, r1
 800fecc:	4640      	mov	r0, r8
 800fece:	4649      	mov	r1, r9
 800fed0:	f7f0 fa04 	bl	80002dc <__adddf3>
 800fed4:	4680      	mov	r8, r0
 800fed6:	4689      	mov	r9, r1
 800fed8:	2e0f      	cmp	r6, #15
 800feda:	dc38      	bgt.n	800ff4e <_strtod_l+0x44e>
 800fedc:	9b08      	ldr	r3, [sp, #32]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	f43f ae49 	beq.w	800fb76 <_strtod_l+0x76>
 800fee4:	dd24      	ble.n	800ff30 <_strtod_l+0x430>
 800fee6:	2b16      	cmp	r3, #22
 800fee8:	dc0b      	bgt.n	800ff02 <_strtod_l+0x402>
 800feea:	4968      	ldr	r1, [pc, #416]	; (801008c <_strtod_l+0x58c>)
 800feec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fef4:	4642      	mov	r2, r8
 800fef6:	464b      	mov	r3, r9
 800fef8:	f7f0 fba6 	bl	8000648 <__aeabi_dmul>
 800fefc:	4680      	mov	r8, r0
 800fefe:	4689      	mov	r9, r1
 800ff00:	e639      	b.n	800fb76 <_strtod_l+0x76>
 800ff02:	9a08      	ldr	r2, [sp, #32]
 800ff04:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800ff08:	4293      	cmp	r3, r2
 800ff0a:	db20      	blt.n	800ff4e <_strtod_l+0x44e>
 800ff0c:	4c5f      	ldr	r4, [pc, #380]	; (801008c <_strtod_l+0x58c>)
 800ff0e:	f1c6 060f 	rsb	r6, r6, #15
 800ff12:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800ff16:	4642      	mov	r2, r8
 800ff18:	464b      	mov	r3, r9
 800ff1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff1e:	f7f0 fb93 	bl	8000648 <__aeabi_dmul>
 800ff22:	9b08      	ldr	r3, [sp, #32]
 800ff24:	1b9e      	subs	r6, r3, r6
 800ff26:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800ff2a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ff2e:	e7e3      	b.n	800fef8 <_strtod_l+0x3f8>
 800ff30:	9b08      	ldr	r3, [sp, #32]
 800ff32:	3316      	adds	r3, #22
 800ff34:	db0b      	blt.n	800ff4e <_strtod_l+0x44e>
 800ff36:	9b05      	ldr	r3, [sp, #20]
 800ff38:	1bdf      	subs	r7, r3, r7
 800ff3a:	4b54      	ldr	r3, [pc, #336]	; (801008c <_strtod_l+0x58c>)
 800ff3c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ff40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff44:	4640      	mov	r0, r8
 800ff46:	4649      	mov	r1, r9
 800ff48:	f7f0 fca8 	bl	800089c <__aeabi_ddiv>
 800ff4c:	e7d6      	b.n	800fefc <_strtod_l+0x3fc>
 800ff4e:	9b08      	ldr	r3, [sp, #32]
 800ff50:	1b75      	subs	r5, r6, r5
 800ff52:	441d      	add	r5, r3
 800ff54:	2d00      	cmp	r5, #0
 800ff56:	dd70      	ble.n	801003a <_strtod_l+0x53a>
 800ff58:	f015 030f 	ands.w	r3, r5, #15
 800ff5c:	d00a      	beq.n	800ff74 <_strtod_l+0x474>
 800ff5e:	494b      	ldr	r1, [pc, #300]	; (801008c <_strtod_l+0x58c>)
 800ff60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ff64:	4642      	mov	r2, r8
 800ff66:	464b      	mov	r3, r9
 800ff68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff6c:	f7f0 fb6c 	bl	8000648 <__aeabi_dmul>
 800ff70:	4680      	mov	r8, r0
 800ff72:	4689      	mov	r9, r1
 800ff74:	f035 050f 	bics.w	r5, r5, #15
 800ff78:	d04d      	beq.n	8010016 <_strtod_l+0x516>
 800ff7a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800ff7e:	dd22      	ble.n	800ffc6 <_strtod_l+0x4c6>
 800ff80:	2500      	movs	r5, #0
 800ff82:	46ab      	mov	fp, r5
 800ff84:	9509      	str	r5, [sp, #36]	; 0x24
 800ff86:	9505      	str	r5, [sp, #20]
 800ff88:	2322      	movs	r3, #34	; 0x22
 800ff8a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8010094 <_strtod_l+0x594>
 800ff8e:	6023      	str	r3, [r4, #0]
 800ff90:	f04f 0800 	mov.w	r8, #0
 800ff94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	f43f aded 	beq.w	800fb76 <_strtod_l+0x76>
 800ff9c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ff9e:	4620      	mov	r0, r4
 800ffa0:	f7ff f924 	bl	800f1ec <_Bfree>
 800ffa4:	9905      	ldr	r1, [sp, #20]
 800ffa6:	4620      	mov	r0, r4
 800ffa8:	f7ff f920 	bl	800f1ec <_Bfree>
 800ffac:	4659      	mov	r1, fp
 800ffae:	4620      	mov	r0, r4
 800ffb0:	f7ff f91c 	bl	800f1ec <_Bfree>
 800ffb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ffb6:	4620      	mov	r0, r4
 800ffb8:	f7ff f918 	bl	800f1ec <_Bfree>
 800ffbc:	4629      	mov	r1, r5
 800ffbe:	4620      	mov	r0, r4
 800ffc0:	f7ff f914 	bl	800f1ec <_Bfree>
 800ffc4:	e5d7      	b.n	800fb76 <_strtod_l+0x76>
 800ffc6:	4b32      	ldr	r3, [pc, #200]	; (8010090 <_strtod_l+0x590>)
 800ffc8:	9304      	str	r3, [sp, #16]
 800ffca:	2300      	movs	r3, #0
 800ffcc:	112d      	asrs	r5, r5, #4
 800ffce:	4640      	mov	r0, r8
 800ffd0:	4649      	mov	r1, r9
 800ffd2:	469a      	mov	sl, r3
 800ffd4:	2d01      	cmp	r5, #1
 800ffd6:	dc21      	bgt.n	801001c <_strtod_l+0x51c>
 800ffd8:	b10b      	cbz	r3, 800ffde <_strtod_l+0x4de>
 800ffda:	4680      	mov	r8, r0
 800ffdc:	4689      	mov	r9, r1
 800ffde:	492c      	ldr	r1, [pc, #176]	; (8010090 <_strtod_l+0x590>)
 800ffe0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800ffe4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ffe8:	4642      	mov	r2, r8
 800ffea:	464b      	mov	r3, r9
 800ffec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fff0:	f7f0 fb2a 	bl	8000648 <__aeabi_dmul>
 800fff4:	4b27      	ldr	r3, [pc, #156]	; (8010094 <_strtod_l+0x594>)
 800fff6:	460a      	mov	r2, r1
 800fff8:	400b      	ands	r3, r1
 800fffa:	4927      	ldr	r1, [pc, #156]	; (8010098 <_strtod_l+0x598>)
 800fffc:	428b      	cmp	r3, r1
 800fffe:	4680      	mov	r8, r0
 8010000:	d8be      	bhi.n	800ff80 <_strtod_l+0x480>
 8010002:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010006:	428b      	cmp	r3, r1
 8010008:	bf86      	itte	hi
 801000a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801009c <_strtod_l+0x59c>
 801000e:	f04f 38ff 	movhi.w	r8, #4294967295
 8010012:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8010016:	2300      	movs	r3, #0
 8010018:	9304      	str	r3, [sp, #16]
 801001a:	e07b      	b.n	8010114 <_strtod_l+0x614>
 801001c:	07ea      	lsls	r2, r5, #31
 801001e:	d505      	bpl.n	801002c <_strtod_l+0x52c>
 8010020:	9b04      	ldr	r3, [sp, #16]
 8010022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010026:	f7f0 fb0f 	bl	8000648 <__aeabi_dmul>
 801002a:	2301      	movs	r3, #1
 801002c:	9a04      	ldr	r2, [sp, #16]
 801002e:	3208      	adds	r2, #8
 8010030:	f10a 0a01 	add.w	sl, sl, #1
 8010034:	106d      	asrs	r5, r5, #1
 8010036:	9204      	str	r2, [sp, #16]
 8010038:	e7cc      	b.n	800ffd4 <_strtod_l+0x4d4>
 801003a:	d0ec      	beq.n	8010016 <_strtod_l+0x516>
 801003c:	426d      	negs	r5, r5
 801003e:	f015 020f 	ands.w	r2, r5, #15
 8010042:	d00a      	beq.n	801005a <_strtod_l+0x55a>
 8010044:	4b11      	ldr	r3, [pc, #68]	; (801008c <_strtod_l+0x58c>)
 8010046:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801004a:	4640      	mov	r0, r8
 801004c:	4649      	mov	r1, r9
 801004e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010052:	f7f0 fc23 	bl	800089c <__aeabi_ddiv>
 8010056:	4680      	mov	r8, r0
 8010058:	4689      	mov	r9, r1
 801005a:	112d      	asrs	r5, r5, #4
 801005c:	d0db      	beq.n	8010016 <_strtod_l+0x516>
 801005e:	2d1f      	cmp	r5, #31
 8010060:	dd1e      	ble.n	80100a0 <_strtod_l+0x5a0>
 8010062:	2500      	movs	r5, #0
 8010064:	46ab      	mov	fp, r5
 8010066:	9509      	str	r5, [sp, #36]	; 0x24
 8010068:	9505      	str	r5, [sp, #20]
 801006a:	2322      	movs	r3, #34	; 0x22
 801006c:	f04f 0800 	mov.w	r8, #0
 8010070:	f04f 0900 	mov.w	r9, #0
 8010074:	6023      	str	r3, [r4, #0]
 8010076:	e78d      	b.n	800ff94 <_strtod_l+0x494>
 8010078:	08011b82 	.word	0x08011b82
 801007c:	08011dac 	.word	0x08011dac
 8010080:	08011b7a 	.word	0x08011b7a
 8010084:	08011bb1 	.word	0x08011bb1
 8010088:	08011e3c 	.word	0x08011e3c
 801008c:	08011cc0 	.word	0x08011cc0
 8010090:	08011c98 	.word	0x08011c98
 8010094:	7ff00000 	.word	0x7ff00000
 8010098:	7ca00000 	.word	0x7ca00000
 801009c:	7fefffff 	.word	0x7fefffff
 80100a0:	f015 0310 	ands.w	r3, r5, #16
 80100a4:	bf18      	it	ne
 80100a6:	236a      	movne	r3, #106	; 0x6a
 80100a8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801044c <_strtod_l+0x94c>
 80100ac:	9304      	str	r3, [sp, #16]
 80100ae:	4640      	mov	r0, r8
 80100b0:	4649      	mov	r1, r9
 80100b2:	2300      	movs	r3, #0
 80100b4:	07ea      	lsls	r2, r5, #31
 80100b6:	d504      	bpl.n	80100c2 <_strtod_l+0x5c2>
 80100b8:	e9da 2300 	ldrd	r2, r3, [sl]
 80100bc:	f7f0 fac4 	bl	8000648 <__aeabi_dmul>
 80100c0:	2301      	movs	r3, #1
 80100c2:	106d      	asrs	r5, r5, #1
 80100c4:	f10a 0a08 	add.w	sl, sl, #8
 80100c8:	d1f4      	bne.n	80100b4 <_strtod_l+0x5b4>
 80100ca:	b10b      	cbz	r3, 80100d0 <_strtod_l+0x5d0>
 80100cc:	4680      	mov	r8, r0
 80100ce:	4689      	mov	r9, r1
 80100d0:	9b04      	ldr	r3, [sp, #16]
 80100d2:	b1bb      	cbz	r3, 8010104 <_strtod_l+0x604>
 80100d4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80100d8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80100dc:	2b00      	cmp	r3, #0
 80100de:	4649      	mov	r1, r9
 80100e0:	dd10      	ble.n	8010104 <_strtod_l+0x604>
 80100e2:	2b1f      	cmp	r3, #31
 80100e4:	f340 811e 	ble.w	8010324 <_strtod_l+0x824>
 80100e8:	2b34      	cmp	r3, #52	; 0x34
 80100ea:	bfde      	ittt	le
 80100ec:	f04f 33ff 	movle.w	r3, #4294967295
 80100f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80100f4:	4093      	lslle	r3, r2
 80100f6:	f04f 0800 	mov.w	r8, #0
 80100fa:	bfcc      	ite	gt
 80100fc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8010100:	ea03 0901 	andle.w	r9, r3, r1
 8010104:	2200      	movs	r2, #0
 8010106:	2300      	movs	r3, #0
 8010108:	4640      	mov	r0, r8
 801010a:	4649      	mov	r1, r9
 801010c:	f7f0 fd04 	bl	8000b18 <__aeabi_dcmpeq>
 8010110:	2800      	cmp	r0, #0
 8010112:	d1a6      	bne.n	8010062 <_strtod_l+0x562>
 8010114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010116:	9300      	str	r3, [sp, #0]
 8010118:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801011a:	4633      	mov	r3, r6
 801011c:	465a      	mov	r2, fp
 801011e:	4620      	mov	r0, r4
 8010120:	f7ff f8cc 	bl	800f2bc <__s2b>
 8010124:	9009      	str	r0, [sp, #36]	; 0x24
 8010126:	2800      	cmp	r0, #0
 8010128:	f43f af2a 	beq.w	800ff80 <_strtod_l+0x480>
 801012c:	9a08      	ldr	r2, [sp, #32]
 801012e:	9b05      	ldr	r3, [sp, #20]
 8010130:	2a00      	cmp	r2, #0
 8010132:	eba3 0307 	sub.w	r3, r3, r7
 8010136:	bfa8      	it	ge
 8010138:	2300      	movge	r3, #0
 801013a:	930c      	str	r3, [sp, #48]	; 0x30
 801013c:	2500      	movs	r5, #0
 801013e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010142:	9312      	str	r3, [sp, #72]	; 0x48
 8010144:	46ab      	mov	fp, r5
 8010146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010148:	4620      	mov	r0, r4
 801014a:	6859      	ldr	r1, [r3, #4]
 801014c:	f7ff f80e 	bl	800f16c <_Balloc>
 8010150:	9005      	str	r0, [sp, #20]
 8010152:	2800      	cmp	r0, #0
 8010154:	f43f af18 	beq.w	800ff88 <_strtod_l+0x488>
 8010158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801015a:	691a      	ldr	r2, [r3, #16]
 801015c:	3202      	adds	r2, #2
 801015e:	f103 010c 	add.w	r1, r3, #12
 8010162:	0092      	lsls	r2, r2, #2
 8010164:	300c      	adds	r0, #12
 8010166:	f7fe f872 	bl	800e24e <memcpy>
 801016a:	ec49 8b10 	vmov	d0, r8, r9
 801016e:	aa18      	add	r2, sp, #96	; 0x60
 8010170:	a917      	add	r1, sp, #92	; 0x5c
 8010172:	4620      	mov	r0, r4
 8010174:	f7ff fbd6 	bl	800f924 <__d2b>
 8010178:	ec49 8b18 	vmov	d8, r8, r9
 801017c:	9016      	str	r0, [sp, #88]	; 0x58
 801017e:	2800      	cmp	r0, #0
 8010180:	f43f af02 	beq.w	800ff88 <_strtod_l+0x488>
 8010184:	2101      	movs	r1, #1
 8010186:	4620      	mov	r0, r4
 8010188:	f7ff f930 	bl	800f3ec <__i2b>
 801018c:	4683      	mov	fp, r0
 801018e:	2800      	cmp	r0, #0
 8010190:	f43f aefa 	beq.w	800ff88 <_strtod_l+0x488>
 8010194:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010196:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010198:	2e00      	cmp	r6, #0
 801019a:	bfab      	itete	ge
 801019c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801019e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80101a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80101a2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80101a6:	bfac      	ite	ge
 80101a8:	eb06 0a03 	addge.w	sl, r6, r3
 80101ac:	1b9f      	sublt	r7, r3, r6
 80101ae:	9b04      	ldr	r3, [sp, #16]
 80101b0:	1af6      	subs	r6, r6, r3
 80101b2:	4416      	add	r6, r2
 80101b4:	4ba0      	ldr	r3, [pc, #640]	; (8010438 <_strtod_l+0x938>)
 80101b6:	3e01      	subs	r6, #1
 80101b8:	429e      	cmp	r6, r3
 80101ba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80101be:	f280 80c4 	bge.w	801034a <_strtod_l+0x84a>
 80101c2:	1b9b      	subs	r3, r3, r6
 80101c4:	2b1f      	cmp	r3, #31
 80101c6:	eba2 0203 	sub.w	r2, r2, r3
 80101ca:	f04f 0101 	mov.w	r1, #1
 80101ce:	f300 80b0 	bgt.w	8010332 <_strtod_l+0x832>
 80101d2:	fa01 f303 	lsl.w	r3, r1, r3
 80101d6:	930e      	str	r3, [sp, #56]	; 0x38
 80101d8:	2300      	movs	r3, #0
 80101da:	930d      	str	r3, [sp, #52]	; 0x34
 80101dc:	eb0a 0602 	add.w	r6, sl, r2
 80101e0:	9b04      	ldr	r3, [sp, #16]
 80101e2:	45b2      	cmp	sl, r6
 80101e4:	4417      	add	r7, r2
 80101e6:	441f      	add	r7, r3
 80101e8:	4653      	mov	r3, sl
 80101ea:	bfa8      	it	ge
 80101ec:	4633      	movge	r3, r6
 80101ee:	42bb      	cmp	r3, r7
 80101f0:	bfa8      	it	ge
 80101f2:	463b      	movge	r3, r7
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	bfc2      	ittt	gt
 80101f8:	1af6      	subgt	r6, r6, r3
 80101fa:	1aff      	subgt	r7, r7, r3
 80101fc:	ebaa 0a03 	subgt.w	sl, sl, r3
 8010200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010202:	2b00      	cmp	r3, #0
 8010204:	dd17      	ble.n	8010236 <_strtod_l+0x736>
 8010206:	4659      	mov	r1, fp
 8010208:	461a      	mov	r2, r3
 801020a:	4620      	mov	r0, r4
 801020c:	f7ff f9ae 	bl	800f56c <__pow5mult>
 8010210:	4683      	mov	fp, r0
 8010212:	2800      	cmp	r0, #0
 8010214:	f43f aeb8 	beq.w	800ff88 <_strtod_l+0x488>
 8010218:	4601      	mov	r1, r0
 801021a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801021c:	4620      	mov	r0, r4
 801021e:	f7ff f8fb 	bl	800f418 <__multiply>
 8010222:	900b      	str	r0, [sp, #44]	; 0x2c
 8010224:	2800      	cmp	r0, #0
 8010226:	f43f aeaf 	beq.w	800ff88 <_strtod_l+0x488>
 801022a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801022c:	4620      	mov	r0, r4
 801022e:	f7fe ffdd 	bl	800f1ec <_Bfree>
 8010232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010234:	9316      	str	r3, [sp, #88]	; 0x58
 8010236:	2e00      	cmp	r6, #0
 8010238:	f300 808c 	bgt.w	8010354 <_strtod_l+0x854>
 801023c:	9b08      	ldr	r3, [sp, #32]
 801023e:	2b00      	cmp	r3, #0
 8010240:	dd08      	ble.n	8010254 <_strtod_l+0x754>
 8010242:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010244:	9905      	ldr	r1, [sp, #20]
 8010246:	4620      	mov	r0, r4
 8010248:	f7ff f990 	bl	800f56c <__pow5mult>
 801024c:	9005      	str	r0, [sp, #20]
 801024e:	2800      	cmp	r0, #0
 8010250:	f43f ae9a 	beq.w	800ff88 <_strtod_l+0x488>
 8010254:	2f00      	cmp	r7, #0
 8010256:	dd08      	ble.n	801026a <_strtod_l+0x76a>
 8010258:	9905      	ldr	r1, [sp, #20]
 801025a:	463a      	mov	r2, r7
 801025c:	4620      	mov	r0, r4
 801025e:	f7ff f9df 	bl	800f620 <__lshift>
 8010262:	9005      	str	r0, [sp, #20]
 8010264:	2800      	cmp	r0, #0
 8010266:	f43f ae8f 	beq.w	800ff88 <_strtod_l+0x488>
 801026a:	f1ba 0f00 	cmp.w	sl, #0
 801026e:	dd08      	ble.n	8010282 <_strtod_l+0x782>
 8010270:	4659      	mov	r1, fp
 8010272:	4652      	mov	r2, sl
 8010274:	4620      	mov	r0, r4
 8010276:	f7ff f9d3 	bl	800f620 <__lshift>
 801027a:	4683      	mov	fp, r0
 801027c:	2800      	cmp	r0, #0
 801027e:	f43f ae83 	beq.w	800ff88 <_strtod_l+0x488>
 8010282:	9a05      	ldr	r2, [sp, #20]
 8010284:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010286:	4620      	mov	r0, r4
 8010288:	f7ff fa52 	bl	800f730 <__mdiff>
 801028c:	4605      	mov	r5, r0
 801028e:	2800      	cmp	r0, #0
 8010290:	f43f ae7a 	beq.w	800ff88 <_strtod_l+0x488>
 8010294:	68c3      	ldr	r3, [r0, #12]
 8010296:	930b      	str	r3, [sp, #44]	; 0x2c
 8010298:	2300      	movs	r3, #0
 801029a:	60c3      	str	r3, [r0, #12]
 801029c:	4659      	mov	r1, fp
 801029e:	f7ff fa2b 	bl	800f6f8 <__mcmp>
 80102a2:	2800      	cmp	r0, #0
 80102a4:	da60      	bge.n	8010368 <_strtod_l+0x868>
 80102a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102a8:	ea53 0308 	orrs.w	r3, r3, r8
 80102ac:	f040 8084 	bne.w	80103b8 <_strtod_l+0x8b8>
 80102b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d17f      	bne.n	80103b8 <_strtod_l+0x8b8>
 80102b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80102bc:	0d1b      	lsrs	r3, r3, #20
 80102be:	051b      	lsls	r3, r3, #20
 80102c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80102c4:	d978      	bls.n	80103b8 <_strtod_l+0x8b8>
 80102c6:	696b      	ldr	r3, [r5, #20]
 80102c8:	b913      	cbnz	r3, 80102d0 <_strtod_l+0x7d0>
 80102ca:	692b      	ldr	r3, [r5, #16]
 80102cc:	2b01      	cmp	r3, #1
 80102ce:	dd73      	ble.n	80103b8 <_strtod_l+0x8b8>
 80102d0:	4629      	mov	r1, r5
 80102d2:	2201      	movs	r2, #1
 80102d4:	4620      	mov	r0, r4
 80102d6:	f7ff f9a3 	bl	800f620 <__lshift>
 80102da:	4659      	mov	r1, fp
 80102dc:	4605      	mov	r5, r0
 80102de:	f7ff fa0b 	bl	800f6f8 <__mcmp>
 80102e2:	2800      	cmp	r0, #0
 80102e4:	dd68      	ble.n	80103b8 <_strtod_l+0x8b8>
 80102e6:	9904      	ldr	r1, [sp, #16]
 80102e8:	4a54      	ldr	r2, [pc, #336]	; (801043c <_strtod_l+0x93c>)
 80102ea:	464b      	mov	r3, r9
 80102ec:	2900      	cmp	r1, #0
 80102ee:	f000 8084 	beq.w	80103fa <_strtod_l+0x8fa>
 80102f2:	ea02 0109 	and.w	r1, r2, r9
 80102f6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80102fa:	dc7e      	bgt.n	80103fa <_strtod_l+0x8fa>
 80102fc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010300:	f77f aeb3 	ble.w	801006a <_strtod_l+0x56a>
 8010304:	4b4e      	ldr	r3, [pc, #312]	; (8010440 <_strtod_l+0x940>)
 8010306:	4640      	mov	r0, r8
 8010308:	4649      	mov	r1, r9
 801030a:	2200      	movs	r2, #0
 801030c:	f7f0 f99c 	bl	8000648 <__aeabi_dmul>
 8010310:	4b4a      	ldr	r3, [pc, #296]	; (801043c <_strtod_l+0x93c>)
 8010312:	400b      	ands	r3, r1
 8010314:	4680      	mov	r8, r0
 8010316:	4689      	mov	r9, r1
 8010318:	2b00      	cmp	r3, #0
 801031a:	f47f ae3f 	bne.w	800ff9c <_strtod_l+0x49c>
 801031e:	2322      	movs	r3, #34	; 0x22
 8010320:	6023      	str	r3, [r4, #0]
 8010322:	e63b      	b.n	800ff9c <_strtod_l+0x49c>
 8010324:	f04f 32ff 	mov.w	r2, #4294967295
 8010328:	fa02 f303 	lsl.w	r3, r2, r3
 801032c:	ea03 0808 	and.w	r8, r3, r8
 8010330:	e6e8      	b.n	8010104 <_strtod_l+0x604>
 8010332:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8010336:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801033a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801033e:	36e2      	adds	r6, #226	; 0xe2
 8010340:	fa01 f306 	lsl.w	r3, r1, r6
 8010344:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8010348:	e748      	b.n	80101dc <_strtod_l+0x6dc>
 801034a:	2100      	movs	r1, #0
 801034c:	2301      	movs	r3, #1
 801034e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8010352:	e743      	b.n	80101dc <_strtod_l+0x6dc>
 8010354:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010356:	4632      	mov	r2, r6
 8010358:	4620      	mov	r0, r4
 801035a:	f7ff f961 	bl	800f620 <__lshift>
 801035e:	9016      	str	r0, [sp, #88]	; 0x58
 8010360:	2800      	cmp	r0, #0
 8010362:	f47f af6b 	bne.w	801023c <_strtod_l+0x73c>
 8010366:	e60f      	b.n	800ff88 <_strtod_l+0x488>
 8010368:	46ca      	mov	sl, r9
 801036a:	d171      	bne.n	8010450 <_strtod_l+0x950>
 801036c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801036e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010372:	b352      	cbz	r2, 80103ca <_strtod_l+0x8ca>
 8010374:	4a33      	ldr	r2, [pc, #204]	; (8010444 <_strtod_l+0x944>)
 8010376:	4293      	cmp	r3, r2
 8010378:	d12a      	bne.n	80103d0 <_strtod_l+0x8d0>
 801037a:	9b04      	ldr	r3, [sp, #16]
 801037c:	4641      	mov	r1, r8
 801037e:	b1fb      	cbz	r3, 80103c0 <_strtod_l+0x8c0>
 8010380:	4b2e      	ldr	r3, [pc, #184]	; (801043c <_strtod_l+0x93c>)
 8010382:	ea09 0303 	and.w	r3, r9, r3
 8010386:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801038a:	f04f 32ff 	mov.w	r2, #4294967295
 801038e:	d81a      	bhi.n	80103c6 <_strtod_l+0x8c6>
 8010390:	0d1b      	lsrs	r3, r3, #20
 8010392:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010396:	fa02 f303 	lsl.w	r3, r2, r3
 801039a:	4299      	cmp	r1, r3
 801039c:	d118      	bne.n	80103d0 <_strtod_l+0x8d0>
 801039e:	4b2a      	ldr	r3, [pc, #168]	; (8010448 <_strtod_l+0x948>)
 80103a0:	459a      	cmp	sl, r3
 80103a2:	d102      	bne.n	80103aa <_strtod_l+0x8aa>
 80103a4:	3101      	adds	r1, #1
 80103a6:	f43f adef 	beq.w	800ff88 <_strtod_l+0x488>
 80103aa:	4b24      	ldr	r3, [pc, #144]	; (801043c <_strtod_l+0x93c>)
 80103ac:	ea0a 0303 	and.w	r3, sl, r3
 80103b0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80103b4:	f04f 0800 	mov.w	r8, #0
 80103b8:	9b04      	ldr	r3, [sp, #16]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d1a2      	bne.n	8010304 <_strtod_l+0x804>
 80103be:	e5ed      	b.n	800ff9c <_strtod_l+0x49c>
 80103c0:	f04f 33ff 	mov.w	r3, #4294967295
 80103c4:	e7e9      	b.n	801039a <_strtod_l+0x89a>
 80103c6:	4613      	mov	r3, r2
 80103c8:	e7e7      	b.n	801039a <_strtod_l+0x89a>
 80103ca:	ea53 0308 	orrs.w	r3, r3, r8
 80103ce:	d08a      	beq.n	80102e6 <_strtod_l+0x7e6>
 80103d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103d2:	b1e3      	cbz	r3, 801040e <_strtod_l+0x90e>
 80103d4:	ea13 0f0a 	tst.w	r3, sl
 80103d8:	d0ee      	beq.n	80103b8 <_strtod_l+0x8b8>
 80103da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103dc:	9a04      	ldr	r2, [sp, #16]
 80103de:	4640      	mov	r0, r8
 80103e0:	4649      	mov	r1, r9
 80103e2:	b1c3      	cbz	r3, 8010416 <_strtod_l+0x916>
 80103e4:	f7ff fb6f 	bl	800fac6 <sulp>
 80103e8:	4602      	mov	r2, r0
 80103ea:	460b      	mov	r3, r1
 80103ec:	ec51 0b18 	vmov	r0, r1, d8
 80103f0:	f7ef ff74 	bl	80002dc <__adddf3>
 80103f4:	4680      	mov	r8, r0
 80103f6:	4689      	mov	r9, r1
 80103f8:	e7de      	b.n	80103b8 <_strtod_l+0x8b8>
 80103fa:	4013      	ands	r3, r2
 80103fc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010400:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8010404:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8010408:	f04f 38ff 	mov.w	r8, #4294967295
 801040c:	e7d4      	b.n	80103b8 <_strtod_l+0x8b8>
 801040e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010410:	ea13 0f08 	tst.w	r3, r8
 8010414:	e7e0      	b.n	80103d8 <_strtod_l+0x8d8>
 8010416:	f7ff fb56 	bl	800fac6 <sulp>
 801041a:	4602      	mov	r2, r0
 801041c:	460b      	mov	r3, r1
 801041e:	ec51 0b18 	vmov	r0, r1, d8
 8010422:	f7ef ff59 	bl	80002d8 <__aeabi_dsub>
 8010426:	2200      	movs	r2, #0
 8010428:	2300      	movs	r3, #0
 801042a:	4680      	mov	r8, r0
 801042c:	4689      	mov	r9, r1
 801042e:	f7f0 fb73 	bl	8000b18 <__aeabi_dcmpeq>
 8010432:	2800      	cmp	r0, #0
 8010434:	d0c0      	beq.n	80103b8 <_strtod_l+0x8b8>
 8010436:	e618      	b.n	801006a <_strtod_l+0x56a>
 8010438:	fffffc02 	.word	0xfffffc02
 801043c:	7ff00000 	.word	0x7ff00000
 8010440:	39500000 	.word	0x39500000
 8010444:	000fffff 	.word	0x000fffff
 8010448:	7fefffff 	.word	0x7fefffff
 801044c:	08011dc0 	.word	0x08011dc0
 8010450:	4659      	mov	r1, fp
 8010452:	4628      	mov	r0, r5
 8010454:	f7ff fac0 	bl	800f9d8 <__ratio>
 8010458:	ec57 6b10 	vmov	r6, r7, d0
 801045c:	ee10 0a10 	vmov	r0, s0
 8010460:	2200      	movs	r2, #0
 8010462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010466:	4639      	mov	r1, r7
 8010468:	f7f0 fb6a 	bl	8000b40 <__aeabi_dcmple>
 801046c:	2800      	cmp	r0, #0
 801046e:	d071      	beq.n	8010554 <_strtod_l+0xa54>
 8010470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010472:	2b00      	cmp	r3, #0
 8010474:	d17c      	bne.n	8010570 <_strtod_l+0xa70>
 8010476:	f1b8 0f00 	cmp.w	r8, #0
 801047a:	d15a      	bne.n	8010532 <_strtod_l+0xa32>
 801047c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010480:	2b00      	cmp	r3, #0
 8010482:	d15d      	bne.n	8010540 <_strtod_l+0xa40>
 8010484:	4b90      	ldr	r3, [pc, #576]	; (80106c8 <_strtod_l+0xbc8>)
 8010486:	2200      	movs	r2, #0
 8010488:	4630      	mov	r0, r6
 801048a:	4639      	mov	r1, r7
 801048c:	f7f0 fb4e 	bl	8000b2c <__aeabi_dcmplt>
 8010490:	2800      	cmp	r0, #0
 8010492:	d15c      	bne.n	801054e <_strtod_l+0xa4e>
 8010494:	4630      	mov	r0, r6
 8010496:	4639      	mov	r1, r7
 8010498:	4b8c      	ldr	r3, [pc, #560]	; (80106cc <_strtod_l+0xbcc>)
 801049a:	2200      	movs	r2, #0
 801049c:	f7f0 f8d4 	bl	8000648 <__aeabi_dmul>
 80104a0:	4606      	mov	r6, r0
 80104a2:	460f      	mov	r7, r1
 80104a4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80104a8:	9606      	str	r6, [sp, #24]
 80104aa:	9307      	str	r3, [sp, #28]
 80104ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80104b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80104b4:	4b86      	ldr	r3, [pc, #536]	; (80106d0 <_strtod_l+0xbd0>)
 80104b6:	ea0a 0303 	and.w	r3, sl, r3
 80104ba:	930d      	str	r3, [sp, #52]	; 0x34
 80104bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80104be:	4b85      	ldr	r3, [pc, #532]	; (80106d4 <_strtod_l+0xbd4>)
 80104c0:	429a      	cmp	r2, r3
 80104c2:	f040 8090 	bne.w	80105e6 <_strtod_l+0xae6>
 80104c6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80104ca:	ec49 8b10 	vmov	d0, r8, r9
 80104ce:	f7ff f9b9 	bl	800f844 <__ulp>
 80104d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80104d6:	ec51 0b10 	vmov	r0, r1, d0
 80104da:	f7f0 f8b5 	bl	8000648 <__aeabi_dmul>
 80104de:	4642      	mov	r2, r8
 80104e0:	464b      	mov	r3, r9
 80104e2:	f7ef fefb 	bl	80002dc <__adddf3>
 80104e6:	460b      	mov	r3, r1
 80104e8:	4979      	ldr	r1, [pc, #484]	; (80106d0 <_strtod_l+0xbd0>)
 80104ea:	4a7b      	ldr	r2, [pc, #492]	; (80106d8 <_strtod_l+0xbd8>)
 80104ec:	4019      	ands	r1, r3
 80104ee:	4291      	cmp	r1, r2
 80104f0:	4680      	mov	r8, r0
 80104f2:	d944      	bls.n	801057e <_strtod_l+0xa7e>
 80104f4:	ee18 2a90 	vmov	r2, s17
 80104f8:	4b78      	ldr	r3, [pc, #480]	; (80106dc <_strtod_l+0xbdc>)
 80104fa:	429a      	cmp	r2, r3
 80104fc:	d104      	bne.n	8010508 <_strtod_l+0xa08>
 80104fe:	ee18 3a10 	vmov	r3, s16
 8010502:	3301      	adds	r3, #1
 8010504:	f43f ad40 	beq.w	800ff88 <_strtod_l+0x488>
 8010508:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80106dc <_strtod_l+0xbdc>
 801050c:	f04f 38ff 	mov.w	r8, #4294967295
 8010510:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010512:	4620      	mov	r0, r4
 8010514:	f7fe fe6a 	bl	800f1ec <_Bfree>
 8010518:	9905      	ldr	r1, [sp, #20]
 801051a:	4620      	mov	r0, r4
 801051c:	f7fe fe66 	bl	800f1ec <_Bfree>
 8010520:	4659      	mov	r1, fp
 8010522:	4620      	mov	r0, r4
 8010524:	f7fe fe62 	bl	800f1ec <_Bfree>
 8010528:	4629      	mov	r1, r5
 801052a:	4620      	mov	r0, r4
 801052c:	f7fe fe5e 	bl	800f1ec <_Bfree>
 8010530:	e609      	b.n	8010146 <_strtod_l+0x646>
 8010532:	f1b8 0f01 	cmp.w	r8, #1
 8010536:	d103      	bne.n	8010540 <_strtod_l+0xa40>
 8010538:	f1b9 0f00 	cmp.w	r9, #0
 801053c:	f43f ad95 	beq.w	801006a <_strtod_l+0x56a>
 8010540:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8010698 <_strtod_l+0xb98>
 8010544:	4f60      	ldr	r7, [pc, #384]	; (80106c8 <_strtod_l+0xbc8>)
 8010546:	ed8d 7b06 	vstr	d7, [sp, #24]
 801054a:	2600      	movs	r6, #0
 801054c:	e7ae      	b.n	80104ac <_strtod_l+0x9ac>
 801054e:	4f5f      	ldr	r7, [pc, #380]	; (80106cc <_strtod_l+0xbcc>)
 8010550:	2600      	movs	r6, #0
 8010552:	e7a7      	b.n	80104a4 <_strtod_l+0x9a4>
 8010554:	4b5d      	ldr	r3, [pc, #372]	; (80106cc <_strtod_l+0xbcc>)
 8010556:	4630      	mov	r0, r6
 8010558:	4639      	mov	r1, r7
 801055a:	2200      	movs	r2, #0
 801055c:	f7f0 f874 	bl	8000648 <__aeabi_dmul>
 8010560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010562:	4606      	mov	r6, r0
 8010564:	460f      	mov	r7, r1
 8010566:	2b00      	cmp	r3, #0
 8010568:	d09c      	beq.n	80104a4 <_strtod_l+0x9a4>
 801056a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801056e:	e79d      	b.n	80104ac <_strtod_l+0x9ac>
 8010570:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80106a0 <_strtod_l+0xba0>
 8010574:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010578:	ec57 6b17 	vmov	r6, r7, d7
 801057c:	e796      	b.n	80104ac <_strtod_l+0x9ac>
 801057e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8010582:	9b04      	ldr	r3, [sp, #16]
 8010584:	46ca      	mov	sl, r9
 8010586:	2b00      	cmp	r3, #0
 8010588:	d1c2      	bne.n	8010510 <_strtod_l+0xa10>
 801058a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801058e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010590:	0d1b      	lsrs	r3, r3, #20
 8010592:	051b      	lsls	r3, r3, #20
 8010594:	429a      	cmp	r2, r3
 8010596:	d1bb      	bne.n	8010510 <_strtod_l+0xa10>
 8010598:	4630      	mov	r0, r6
 801059a:	4639      	mov	r1, r7
 801059c:	f7f0 fbb4 	bl	8000d08 <__aeabi_d2lz>
 80105a0:	f7f0 f824 	bl	80005ec <__aeabi_l2d>
 80105a4:	4602      	mov	r2, r0
 80105a6:	460b      	mov	r3, r1
 80105a8:	4630      	mov	r0, r6
 80105aa:	4639      	mov	r1, r7
 80105ac:	f7ef fe94 	bl	80002d8 <__aeabi_dsub>
 80105b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80105b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80105b6:	ea43 0308 	orr.w	r3, r3, r8
 80105ba:	4313      	orrs	r3, r2
 80105bc:	4606      	mov	r6, r0
 80105be:	460f      	mov	r7, r1
 80105c0:	d054      	beq.n	801066c <_strtod_l+0xb6c>
 80105c2:	a339      	add	r3, pc, #228	; (adr r3, 80106a8 <_strtod_l+0xba8>)
 80105c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c8:	f7f0 fab0 	bl	8000b2c <__aeabi_dcmplt>
 80105cc:	2800      	cmp	r0, #0
 80105ce:	f47f ace5 	bne.w	800ff9c <_strtod_l+0x49c>
 80105d2:	a337      	add	r3, pc, #220	; (adr r3, 80106b0 <_strtod_l+0xbb0>)
 80105d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d8:	4630      	mov	r0, r6
 80105da:	4639      	mov	r1, r7
 80105dc:	f7f0 fac4 	bl	8000b68 <__aeabi_dcmpgt>
 80105e0:	2800      	cmp	r0, #0
 80105e2:	d095      	beq.n	8010510 <_strtod_l+0xa10>
 80105e4:	e4da      	b.n	800ff9c <_strtod_l+0x49c>
 80105e6:	9b04      	ldr	r3, [sp, #16]
 80105e8:	b333      	cbz	r3, 8010638 <_strtod_l+0xb38>
 80105ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80105ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80105f0:	d822      	bhi.n	8010638 <_strtod_l+0xb38>
 80105f2:	a331      	add	r3, pc, #196	; (adr r3, 80106b8 <_strtod_l+0xbb8>)
 80105f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105f8:	4630      	mov	r0, r6
 80105fa:	4639      	mov	r1, r7
 80105fc:	f7f0 faa0 	bl	8000b40 <__aeabi_dcmple>
 8010600:	b1a0      	cbz	r0, 801062c <_strtod_l+0xb2c>
 8010602:	4639      	mov	r1, r7
 8010604:	4630      	mov	r0, r6
 8010606:	f7f0 faf7 	bl	8000bf8 <__aeabi_d2uiz>
 801060a:	2801      	cmp	r0, #1
 801060c:	bf38      	it	cc
 801060e:	2001      	movcc	r0, #1
 8010610:	f7ef ffa0 	bl	8000554 <__aeabi_ui2d>
 8010614:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010616:	4606      	mov	r6, r0
 8010618:	460f      	mov	r7, r1
 801061a:	bb23      	cbnz	r3, 8010666 <_strtod_l+0xb66>
 801061c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010620:	9010      	str	r0, [sp, #64]	; 0x40
 8010622:	9311      	str	r3, [sp, #68]	; 0x44
 8010624:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010628:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801062c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801062e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010630:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010634:	1a9b      	subs	r3, r3, r2
 8010636:	930f      	str	r3, [sp, #60]	; 0x3c
 8010638:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801063c:	eeb0 0a48 	vmov.f32	s0, s16
 8010640:	eef0 0a68 	vmov.f32	s1, s17
 8010644:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8010648:	f7ff f8fc 	bl	800f844 <__ulp>
 801064c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010650:	ec53 2b10 	vmov	r2, r3, d0
 8010654:	f7ef fff8 	bl	8000648 <__aeabi_dmul>
 8010658:	ec53 2b18 	vmov	r2, r3, d8
 801065c:	f7ef fe3e 	bl	80002dc <__adddf3>
 8010660:	4680      	mov	r8, r0
 8010662:	4689      	mov	r9, r1
 8010664:	e78d      	b.n	8010582 <_strtod_l+0xa82>
 8010666:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801066a:	e7db      	b.n	8010624 <_strtod_l+0xb24>
 801066c:	a314      	add	r3, pc, #80	; (adr r3, 80106c0 <_strtod_l+0xbc0>)
 801066e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010672:	f7f0 fa5b 	bl	8000b2c <__aeabi_dcmplt>
 8010676:	e7b3      	b.n	80105e0 <_strtod_l+0xae0>
 8010678:	2300      	movs	r3, #0
 801067a:	930a      	str	r3, [sp, #40]	; 0x28
 801067c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801067e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010680:	6013      	str	r3, [r2, #0]
 8010682:	f7ff ba7c 	b.w	800fb7e <_strtod_l+0x7e>
 8010686:	2a65      	cmp	r2, #101	; 0x65
 8010688:	f43f ab75 	beq.w	800fd76 <_strtod_l+0x276>
 801068c:	2a45      	cmp	r2, #69	; 0x45
 801068e:	f43f ab72 	beq.w	800fd76 <_strtod_l+0x276>
 8010692:	2301      	movs	r3, #1
 8010694:	f7ff bbaa 	b.w	800fdec <_strtod_l+0x2ec>
 8010698:	00000000 	.word	0x00000000
 801069c:	bff00000 	.word	0xbff00000
 80106a0:	00000000 	.word	0x00000000
 80106a4:	3ff00000 	.word	0x3ff00000
 80106a8:	94a03595 	.word	0x94a03595
 80106ac:	3fdfffff 	.word	0x3fdfffff
 80106b0:	35afe535 	.word	0x35afe535
 80106b4:	3fe00000 	.word	0x3fe00000
 80106b8:	ffc00000 	.word	0xffc00000
 80106bc:	41dfffff 	.word	0x41dfffff
 80106c0:	94a03595 	.word	0x94a03595
 80106c4:	3fcfffff 	.word	0x3fcfffff
 80106c8:	3ff00000 	.word	0x3ff00000
 80106cc:	3fe00000 	.word	0x3fe00000
 80106d0:	7ff00000 	.word	0x7ff00000
 80106d4:	7fe00000 	.word	0x7fe00000
 80106d8:	7c9fffff 	.word	0x7c9fffff
 80106dc:	7fefffff 	.word	0x7fefffff

080106e0 <_strtod_r>:
 80106e0:	4b01      	ldr	r3, [pc, #4]	; (80106e8 <_strtod_r+0x8>)
 80106e2:	f7ff ba0d 	b.w	800fb00 <_strtod_l>
 80106e6:	bf00      	nop
 80106e8:	200001e0 	.word	0x200001e0

080106ec <_strtol_l.constprop.0>:
 80106ec:	2b01      	cmp	r3, #1
 80106ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106f2:	d001      	beq.n	80106f8 <_strtol_l.constprop.0+0xc>
 80106f4:	2b24      	cmp	r3, #36	; 0x24
 80106f6:	d906      	bls.n	8010706 <_strtol_l.constprop.0+0x1a>
 80106f8:	f7fd fd7c 	bl	800e1f4 <__errno>
 80106fc:	2316      	movs	r3, #22
 80106fe:	6003      	str	r3, [r0, #0]
 8010700:	2000      	movs	r0, #0
 8010702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010706:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80107ec <_strtol_l.constprop.0+0x100>
 801070a:	460d      	mov	r5, r1
 801070c:	462e      	mov	r6, r5
 801070e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010712:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8010716:	f017 0708 	ands.w	r7, r7, #8
 801071a:	d1f7      	bne.n	801070c <_strtol_l.constprop.0+0x20>
 801071c:	2c2d      	cmp	r4, #45	; 0x2d
 801071e:	d132      	bne.n	8010786 <_strtol_l.constprop.0+0x9a>
 8010720:	782c      	ldrb	r4, [r5, #0]
 8010722:	2701      	movs	r7, #1
 8010724:	1cb5      	adds	r5, r6, #2
 8010726:	2b00      	cmp	r3, #0
 8010728:	d05b      	beq.n	80107e2 <_strtol_l.constprop.0+0xf6>
 801072a:	2b10      	cmp	r3, #16
 801072c:	d109      	bne.n	8010742 <_strtol_l.constprop.0+0x56>
 801072e:	2c30      	cmp	r4, #48	; 0x30
 8010730:	d107      	bne.n	8010742 <_strtol_l.constprop.0+0x56>
 8010732:	782c      	ldrb	r4, [r5, #0]
 8010734:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010738:	2c58      	cmp	r4, #88	; 0x58
 801073a:	d14d      	bne.n	80107d8 <_strtol_l.constprop.0+0xec>
 801073c:	786c      	ldrb	r4, [r5, #1]
 801073e:	2310      	movs	r3, #16
 8010740:	3502      	adds	r5, #2
 8010742:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010746:	f108 38ff 	add.w	r8, r8, #4294967295
 801074a:	f04f 0e00 	mov.w	lr, #0
 801074e:	fbb8 f9f3 	udiv	r9, r8, r3
 8010752:	4676      	mov	r6, lr
 8010754:	fb03 8a19 	mls	sl, r3, r9, r8
 8010758:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801075c:	f1bc 0f09 	cmp.w	ip, #9
 8010760:	d816      	bhi.n	8010790 <_strtol_l.constprop.0+0xa4>
 8010762:	4664      	mov	r4, ip
 8010764:	42a3      	cmp	r3, r4
 8010766:	dd24      	ble.n	80107b2 <_strtol_l.constprop.0+0xc6>
 8010768:	f1be 3fff 	cmp.w	lr, #4294967295
 801076c:	d008      	beq.n	8010780 <_strtol_l.constprop.0+0x94>
 801076e:	45b1      	cmp	r9, r6
 8010770:	d31c      	bcc.n	80107ac <_strtol_l.constprop.0+0xc0>
 8010772:	d101      	bne.n	8010778 <_strtol_l.constprop.0+0x8c>
 8010774:	45a2      	cmp	sl, r4
 8010776:	db19      	blt.n	80107ac <_strtol_l.constprop.0+0xc0>
 8010778:	fb06 4603 	mla	r6, r6, r3, r4
 801077c:	f04f 0e01 	mov.w	lr, #1
 8010780:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010784:	e7e8      	b.n	8010758 <_strtol_l.constprop.0+0x6c>
 8010786:	2c2b      	cmp	r4, #43	; 0x2b
 8010788:	bf04      	itt	eq
 801078a:	782c      	ldrbeq	r4, [r5, #0]
 801078c:	1cb5      	addeq	r5, r6, #2
 801078e:	e7ca      	b.n	8010726 <_strtol_l.constprop.0+0x3a>
 8010790:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010794:	f1bc 0f19 	cmp.w	ip, #25
 8010798:	d801      	bhi.n	801079e <_strtol_l.constprop.0+0xb2>
 801079a:	3c37      	subs	r4, #55	; 0x37
 801079c:	e7e2      	b.n	8010764 <_strtol_l.constprop.0+0x78>
 801079e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80107a2:	f1bc 0f19 	cmp.w	ip, #25
 80107a6:	d804      	bhi.n	80107b2 <_strtol_l.constprop.0+0xc6>
 80107a8:	3c57      	subs	r4, #87	; 0x57
 80107aa:	e7db      	b.n	8010764 <_strtol_l.constprop.0+0x78>
 80107ac:	f04f 3eff 	mov.w	lr, #4294967295
 80107b0:	e7e6      	b.n	8010780 <_strtol_l.constprop.0+0x94>
 80107b2:	f1be 3fff 	cmp.w	lr, #4294967295
 80107b6:	d105      	bne.n	80107c4 <_strtol_l.constprop.0+0xd8>
 80107b8:	2322      	movs	r3, #34	; 0x22
 80107ba:	6003      	str	r3, [r0, #0]
 80107bc:	4646      	mov	r6, r8
 80107be:	b942      	cbnz	r2, 80107d2 <_strtol_l.constprop.0+0xe6>
 80107c0:	4630      	mov	r0, r6
 80107c2:	e79e      	b.n	8010702 <_strtol_l.constprop.0+0x16>
 80107c4:	b107      	cbz	r7, 80107c8 <_strtol_l.constprop.0+0xdc>
 80107c6:	4276      	negs	r6, r6
 80107c8:	2a00      	cmp	r2, #0
 80107ca:	d0f9      	beq.n	80107c0 <_strtol_l.constprop.0+0xd4>
 80107cc:	f1be 0f00 	cmp.w	lr, #0
 80107d0:	d000      	beq.n	80107d4 <_strtol_l.constprop.0+0xe8>
 80107d2:	1e69      	subs	r1, r5, #1
 80107d4:	6011      	str	r1, [r2, #0]
 80107d6:	e7f3      	b.n	80107c0 <_strtol_l.constprop.0+0xd4>
 80107d8:	2430      	movs	r4, #48	; 0x30
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d1b1      	bne.n	8010742 <_strtol_l.constprop.0+0x56>
 80107de:	2308      	movs	r3, #8
 80107e0:	e7af      	b.n	8010742 <_strtol_l.constprop.0+0x56>
 80107e2:	2c30      	cmp	r4, #48	; 0x30
 80107e4:	d0a5      	beq.n	8010732 <_strtol_l.constprop.0+0x46>
 80107e6:	230a      	movs	r3, #10
 80107e8:	e7ab      	b.n	8010742 <_strtol_l.constprop.0+0x56>
 80107ea:	bf00      	nop
 80107ec:	08011a75 	.word	0x08011a75

080107f0 <_strtol_r>:
 80107f0:	f7ff bf7c 	b.w	80106ec <_strtol_l.constprop.0>

080107f4 <__ssputs_r>:
 80107f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107f8:	688e      	ldr	r6, [r1, #8]
 80107fa:	461f      	mov	r7, r3
 80107fc:	42be      	cmp	r6, r7
 80107fe:	680b      	ldr	r3, [r1, #0]
 8010800:	4682      	mov	sl, r0
 8010802:	460c      	mov	r4, r1
 8010804:	4690      	mov	r8, r2
 8010806:	d82c      	bhi.n	8010862 <__ssputs_r+0x6e>
 8010808:	898a      	ldrh	r2, [r1, #12]
 801080a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801080e:	d026      	beq.n	801085e <__ssputs_r+0x6a>
 8010810:	6965      	ldr	r5, [r4, #20]
 8010812:	6909      	ldr	r1, [r1, #16]
 8010814:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010818:	eba3 0901 	sub.w	r9, r3, r1
 801081c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010820:	1c7b      	adds	r3, r7, #1
 8010822:	444b      	add	r3, r9
 8010824:	106d      	asrs	r5, r5, #1
 8010826:	429d      	cmp	r5, r3
 8010828:	bf38      	it	cc
 801082a:	461d      	movcc	r5, r3
 801082c:	0553      	lsls	r3, r2, #21
 801082e:	d527      	bpl.n	8010880 <__ssputs_r+0x8c>
 8010830:	4629      	mov	r1, r5
 8010832:	f7fe fc0f 	bl	800f054 <_malloc_r>
 8010836:	4606      	mov	r6, r0
 8010838:	b360      	cbz	r0, 8010894 <__ssputs_r+0xa0>
 801083a:	6921      	ldr	r1, [r4, #16]
 801083c:	464a      	mov	r2, r9
 801083e:	f7fd fd06 	bl	800e24e <memcpy>
 8010842:	89a3      	ldrh	r3, [r4, #12]
 8010844:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801084c:	81a3      	strh	r3, [r4, #12]
 801084e:	6126      	str	r6, [r4, #16]
 8010850:	6165      	str	r5, [r4, #20]
 8010852:	444e      	add	r6, r9
 8010854:	eba5 0509 	sub.w	r5, r5, r9
 8010858:	6026      	str	r6, [r4, #0]
 801085a:	60a5      	str	r5, [r4, #8]
 801085c:	463e      	mov	r6, r7
 801085e:	42be      	cmp	r6, r7
 8010860:	d900      	bls.n	8010864 <__ssputs_r+0x70>
 8010862:	463e      	mov	r6, r7
 8010864:	6820      	ldr	r0, [r4, #0]
 8010866:	4632      	mov	r2, r6
 8010868:	4641      	mov	r1, r8
 801086a:	f000 fba3 	bl	8010fb4 <memmove>
 801086e:	68a3      	ldr	r3, [r4, #8]
 8010870:	1b9b      	subs	r3, r3, r6
 8010872:	60a3      	str	r3, [r4, #8]
 8010874:	6823      	ldr	r3, [r4, #0]
 8010876:	4433      	add	r3, r6
 8010878:	6023      	str	r3, [r4, #0]
 801087a:	2000      	movs	r0, #0
 801087c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010880:	462a      	mov	r2, r5
 8010882:	f000 ff7a 	bl	801177a <_realloc_r>
 8010886:	4606      	mov	r6, r0
 8010888:	2800      	cmp	r0, #0
 801088a:	d1e0      	bne.n	801084e <__ssputs_r+0x5a>
 801088c:	6921      	ldr	r1, [r4, #16]
 801088e:	4650      	mov	r0, sl
 8010890:	f7fe fb6c 	bl	800ef6c <_free_r>
 8010894:	230c      	movs	r3, #12
 8010896:	f8ca 3000 	str.w	r3, [sl]
 801089a:	89a3      	ldrh	r3, [r4, #12]
 801089c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108a0:	81a3      	strh	r3, [r4, #12]
 80108a2:	f04f 30ff 	mov.w	r0, #4294967295
 80108a6:	e7e9      	b.n	801087c <__ssputs_r+0x88>

080108a8 <_svfiprintf_r>:
 80108a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108ac:	4698      	mov	r8, r3
 80108ae:	898b      	ldrh	r3, [r1, #12]
 80108b0:	061b      	lsls	r3, r3, #24
 80108b2:	b09d      	sub	sp, #116	; 0x74
 80108b4:	4607      	mov	r7, r0
 80108b6:	460d      	mov	r5, r1
 80108b8:	4614      	mov	r4, r2
 80108ba:	d50e      	bpl.n	80108da <_svfiprintf_r+0x32>
 80108bc:	690b      	ldr	r3, [r1, #16]
 80108be:	b963      	cbnz	r3, 80108da <_svfiprintf_r+0x32>
 80108c0:	2140      	movs	r1, #64	; 0x40
 80108c2:	f7fe fbc7 	bl	800f054 <_malloc_r>
 80108c6:	6028      	str	r0, [r5, #0]
 80108c8:	6128      	str	r0, [r5, #16]
 80108ca:	b920      	cbnz	r0, 80108d6 <_svfiprintf_r+0x2e>
 80108cc:	230c      	movs	r3, #12
 80108ce:	603b      	str	r3, [r7, #0]
 80108d0:	f04f 30ff 	mov.w	r0, #4294967295
 80108d4:	e0d0      	b.n	8010a78 <_svfiprintf_r+0x1d0>
 80108d6:	2340      	movs	r3, #64	; 0x40
 80108d8:	616b      	str	r3, [r5, #20]
 80108da:	2300      	movs	r3, #0
 80108dc:	9309      	str	r3, [sp, #36]	; 0x24
 80108de:	2320      	movs	r3, #32
 80108e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80108e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80108e8:	2330      	movs	r3, #48	; 0x30
 80108ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010a90 <_svfiprintf_r+0x1e8>
 80108ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80108f2:	f04f 0901 	mov.w	r9, #1
 80108f6:	4623      	mov	r3, r4
 80108f8:	469a      	mov	sl, r3
 80108fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80108fe:	b10a      	cbz	r2, 8010904 <_svfiprintf_r+0x5c>
 8010900:	2a25      	cmp	r2, #37	; 0x25
 8010902:	d1f9      	bne.n	80108f8 <_svfiprintf_r+0x50>
 8010904:	ebba 0b04 	subs.w	fp, sl, r4
 8010908:	d00b      	beq.n	8010922 <_svfiprintf_r+0x7a>
 801090a:	465b      	mov	r3, fp
 801090c:	4622      	mov	r2, r4
 801090e:	4629      	mov	r1, r5
 8010910:	4638      	mov	r0, r7
 8010912:	f7ff ff6f 	bl	80107f4 <__ssputs_r>
 8010916:	3001      	adds	r0, #1
 8010918:	f000 80a9 	beq.w	8010a6e <_svfiprintf_r+0x1c6>
 801091c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801091e:	445a      	add	r2, fp
 8010920:	9209      	str	r2, [sp, #36]	; 0x24
 8010922:	f89a 3000 	ldrb.w	r3, [sl]
 8010926:	2b00      	cmp	r3, #0
 8010928:	f000 80a1 	beq.w	8010a6e <_svfiprintf_r+0x1c6>
 801092c:	2300      	movs	r3, #0
 801092e:	f04f 32ff 	mov.w	r2, #4294967295
 8010932:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010936:	f10a 0a01 	add.w	sl, sl, #1
 801093a:	9304      	str	r3, [sp, #16]
 801093c:	9307      	str	r3, [sp, #28]
 801093e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010942:	931a      	str	r3, [sp, #104]	; 0x68
 8010944:	4654      	mov	r4, sl
 8010946:	2205      	movs	r2, #5
 8010948:	f814 1b01 	ldrb.w	r1, [r4], #1
 801094c:	4850      	ldr	r0, [pc, #320]	; (8010a90 <_svfiprintf_r+0x1e8>)
 801094e:	f7ef fc67 	bl	8000220 <memchr>
 8010952:	9a04      	ldr	r2, [sp, #16]
 8010954:	b9d8      	cbnz	r0, 801098e <_svfiprintf_r+0xe6>
 8010956:	06d0      	lsls	r0, r2, #27
 8010958:	bf44      	itt	mi
 801095a:	2320      	movmi	r3, #32
 801095c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010960:	0711      	lsls	r1, r2, #28
 8010962:	bf44      	itt	mi
 8010964:	232b      	movmi	r3, #43	; 0x2b
 8010966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801096a:	f89a 3000 	ldrb.w	r3, [sl]
 801096e:	2b2a      	cmp	r3, #42	; 0x2a
 8010970:	d015      	beq.n	801099e <_svfiprintf_r+0xf6>
 8010972:	9a07      	ldr	r2, [sp, #28]
 8010974:	4654      	mov	r4, sl
 8010976:	2000      	movs	r0, #0
 8010978:	f04f 0c0a 	mov.w	ip, #10
 801097c:	4621      	mov	r1, r4
 801097e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010982:	3b30      	subs	r3, #48	; 0x30
 8010984:	2b09      	cmp	r3, #9
 8010986:	d94d      	bls.n	8010a24 <_svfiprintf_r+0x17c>
 8010988:	b1b0      	cbz	r0, 80109b8 <_svfiprintf_r+0x110>
 801098a:	9207      	str	r2, [sp, #28]
 801098c:	e014      	b.n	80109b8 <_svfiprintf_r+0x110>
 801098e:	eba0 0308 	sub.w	r3, r0, r8
 8010992:	fa09 f303 	lsl.w	r3, r9, r3
 8010996:	4313      	orrs	r3, r2
 8010998:	9304      	str	r3, [sp, #16]
 801099a:	46a2      	mov	sl, r4
 801099c:	e7d2      	b.n	8010944 <_svfiprintf_r+0x9c>
 801099e:	9b03      	ldr	r3, [sp, #12]
 80109a0:	1d19      	adds	r1, r3, #4
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	9103      	str	r1, [sp, #12]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	bfbb      	ittet	lt
 80109aa:	425b      	neglt	r3, r3
 80109ac:	f042 0202 	orrlt.w	r2, r2, #2
 80109b0:	9307      	strge	r3, [sp, #28]
 80109b2:	9307      	strlt	r3, [sp, #28]
 80109b4:	bfb8      	it	lt
 80109b6:	9204      	strlt	r2, [sp, #16]
 80109b8:	7823      	ldrb	r3, [r4, #0]
 80109ba:	2b2e      	cmp	r3, #46	; 0x2e
 80109bc:	d10c      	bne.n	80109d8 <_svfiprintf_r+0x130>
 80109be:	7863      	ldrb	r3, [r4, #1]
 80109c0:	2b2a      	cmp	r3, #42	; 0x2a
 80109c2:	d134      	bne.n	8010a2e <_svfiprintf_r+0x186>
 80109c4:	9b03      	ldr	r3, [sp, #12]
 80109c6:	1d1a      	adds	r2, r3, #4
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	9203      	str	r2, [sp, #12]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	bfb8      	it	lt
 80109d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80109d4:	3402      	adds	r4, #2
 80109d6:	9305      	str	r3, [sp, #20]
 80109d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010aa0 <_svfiprintf_r+0x1f8>
 80109dc:	7821      	ldrb	r1, [r4, #0]
 80109de:	2203      	movs	r2, #3
 80109e0:	4650      	mov	r0, sl
 80109e2:	f7ef fc1d 	bl	8000220 <memchr>
 80109e6:	b138      	cbz	r0, 80109f8 <_svfiprintf_r+0x150>
 80109e8:	9b04      	ldr	r3, [sp, #16]
 80109ea:	eba0 000a 	sub.w	r0, r0, sl
 80109ee:	2240      	movs	r2, #64	; 0x40
 80109f0:	4082      	lsls	r2, r0
 80109f2:	4313      	orrs	r3, r2
 80109f4:	3401      	adds	r4, #1
 80109f6:	9304      	str	r3, [sp, #16]
 80109f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109fc:	4825      	ldr	r0, [pc, #148]	; (8010a94 <_svfiprintf_r+0x1ec>)
 80109fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010a02:	2206      	movs	r2, #6
 8010a04:	f7ef fc0c 	bl	8000220 <memchr>
 8010a08:	2800      	cmp	r0, #0
 8010a0a:	d038      	beq.n	8010a7e <_svfiprintf_r+0x1d6>
 8010a0c:	4b22      	ldr	r3, [pc, #136]	; (8010a98 <_svfiprintf_r+0x1f0>)
 8010a0e:	bb1b      	cbnz	r3, 8010a58 <_svfiprintf_r+0x1b0>
 8010a10:	9b03      	ldr	r3, [sp, #12]
 8010a12:	3307      	adds	r3, #7
 8010a14:	f023 0307 	bic.w	r3, r3, #7
 8010a18:	3308      	adds	r3, #8
 8010a1a:	9303      	str	r3, [sp, #12]
 8010a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a1e:	4433      	add	r3, r6
 8010a20:	9309      	str	r3, [sp, #36]	; 0x24
 8010a22:	e768      	b.n	80108f6 <_svfiprintf_r+0x4e>
 8010a24:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a28:	460c      	mov	r4, r1
 8010a2a:	2001      	movs	r0, #1
 8010a2c:	e7a6      	b.n	801097c <_svfiprintf_r+0xd4>
 8010a2e:	2300      	movs	r3, #0
 8010a30:	3401      	adds	r4, #1
 8010a32:	9305      	str	r3, [sp, #20]
 8010a34:	4619      	mov	r1, r3
 8010a36:	f04f 0c0a 	mov.w	ip, #10
 8010a3a:	4620      	mov	r0, r4
 8010a3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a40:	3a30      	subs	r2, #48	; 0x30
 8010a42:	2a09      	cmp	r2, #9
 8010a44:	d903      	bls.n	8010a4e <_svfiprintf_r+0x1a6>
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d0c6      	beq.n	80109d8 <_svfiprintf_r+0x130>
 8010a4a:	9105      	str	r1, [sp, #20]
 8010a4c:	e7c4      	b.n	80109d8 <_svfiprintf_r+0x130>
 8010a4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a52:	4604      	mov	r4, r0
 8010a54:	2301      	movs	r3, #1
 8010a56:	e7f0      	b.n	8010a3a <_svfiprintf_r+0x192>
 8010a58:	ab03      	add	r3, sp, #12
 8010a5a:	9300      	str	r3, [sp, #0]
 8010a5c:	462a      	mov	r2, r5
 8010a5e:	4b0f      	ldr	r3, [pc, #60]	; (8010a9c <_svfiprintf_r+0x1f4>)
 8010a60:	a904      	add	r1, sp, #16
 8010a62:	4638      	mov	r0, r7
 8010a64:	f7fc fc66 	bl	800d334 <_printf_float>
 8010a68:	1c42      	adds	r2, r0, #1
 8010a6a:	4606      	mov	r6, r0
 8010a6c:	d1d6      	bne.n	8010a1c <_svfiprintf_r+0x174>
 8010a6e:	89ab      	ldrh	r3, [r5, #12]
 8010a70:	065b      	lsls	r3, r3, #25
 8010a72:	f53f af2d 	bmi.w	80108d0 <_svfiprintf_r+0x28>
 8010a76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a78:	b01d      	add	sp, #116	; 0x74
 8010a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a7e:	ab03      	add	r3, sp, #12
 8010a80:	9300      	str	r3, [sp, #0]
 8010a82:	462a      	mov	r2, r5
 8010a84:	4b05      	ldr	r3, [pc, #20]	; (8010a9c <_svfiprintf_r+0x1f4>)
 8010a86:	a904      	add	r1, sp, #16
 8010a88:	4638      	mov	r0, r7
 8010a8a:	f7fc fef7 	bl	800d87c <_printf_i>
 8010a8e:	e7eb      	b.n	8010a68 <_svfiprintf_r+0x1c0>
 8010a90:	08011de8 	.word	0x08011de8
 8010a94:	08011df2 	.word	0x08011df2
 8010a98:	0800d335 	.word	0x0800d335
 8010a9c:	080107f5 	.word	0x080107f5
 8010aa0:	08011dee 	.word	0x08011dee

08010aa4 <__sfputc_r>:
 8010aa4:	6893      	ldr	r3, [r2, #8]
 8010aa6:	3b01      	subs	r3, #1
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	b410      	push	{r4}
 8010aac:	6093      	str	r3, [r2, #8]
 8010aae:	da08      	bge.n	8010ac2 <__sfputc_r+0x1e>
 8010ab0:	6994      	ldr	r4, [r2, #24]
 8010ab2:	42a3      	cmp	r3, r4
 8010ab4:	db01      	blt.n	8010aba <__sfputc_r+0x16>
 8010ab6:	290a      	cmp	r1, #10
 8010ab8:	d103      	bne.n	8010ac2 <__sfputc_r+0x1e>
 8010aba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010abe:	f000 b9e3 	b.w	8010e88 <__swbuf_r>
 8010ac2:	6813      	ldr	r3, [r2, #0]
 8010ac4:	1c58      	adds	r0, r3, #1
 8010ac6:	6010      	str	r0, [r2, #0]
 8010ac8:	7019      	strb	r1, [r3, #0]
 8010aca:	4608      	mov	r0, r1
 8010acc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ad0:	4770      	bx	lr

08010ad2 <__sfputs_r>:
 8010ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ad4:	4606      	mov	r6, r0
 8010ad6:	460f      	mov	r7, r1
 8010ad8:	4614      	mov	r4, r2
 8010ada:	18d5      	adds	r5, r2, r3
 8010adc:	42ac      	cmp	r4, r5
 8010ade:	d101      	bne.n	8010ae4 <__sfputs_r+0x12>
 8010ae0:	2000      	movs	r0, #0
 8010ae2:	e007      	b.n	8010af4 <__sfputs_r+0x22>
 8010ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ae8:	463a      	mov	r2, r7
 8010aea:	4630      	mov	r0, r6
 8010aec:	f7ff ffda 	bl	8010aa4 <__sfputc_r>
 8010af0:	1c43      	adds	r3, r0, #1
 8010af2:	d1f3      	bne.n	8010adc <__sfputs_r+0xa>
 8010af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010af8 <_vfiprintf_r>:
 8010af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010afc:	460d      	mov	r5, r1
 8010afe:	b09d      	sub	sp, #116	; 0x74
 8010b00:	4614      	mov	r4, r2
 8010b02:	4698      	mov	r8, r3
 8010b04:	4606      	mov	r6, r0
 8010b06:	b118      	cbz	r0, 8010b10 <_vfiprintf_r+0x18>
 8010b08:	6a03      	ldr	r3, [r0, #32]
 8010b0a:	b90b      	cbnz	r3, 8010b10 <_vfiprintf_r+0x18>
 8010b0c:	f7fd fa74 	bl	800dff8 <__sinit>
 8010b10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010b12:	07d9      	lsls	r1, r3, #31
 8010b14:	d405      	bmi.n	8010b22 <_vfiprintf_r+0x2a>
 8010b16:	89ab      	ldrh	r3, [r5, #12]
 8010b18:	059a      	lsls	r2, r3, #22
 8010b1a:	d402      	bmi.n	8010b22 <_vfiprintf_r+0x2a>
 8010b1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010b1e:	f7fd fb94 	bl	800e24a <__retarget_lock_acquire_recursive>
 8010b22:	89ab      	ldrh	r3, [r5, #12]
 8010b24:	071b      	lsls	r3, r3, #28
 8010b26:	d501      	bpl.n	8010b2c <_vfiprintf_r+0x34>
 8010b28:	692b      	ldr	r3, [r5, #16]
 8010b2a:	b99b      	cbnz	r3, 8010b54 <_vfiprintf_r+0x5c>
 8010b2c:	4629      	mov	r1, r5
 8010b2e:	4630      	mov	r0, r6
 8010b30:	f000 f9e8 	bl	8010f04 <__swsetup_r>
 8010b34:	b170      	cbz	r0, 8010b54 <_vfiprintf_r+0x5c>
 8010b36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010b38:	07dc      	lsls	r4, r3, #31
 8010b3a:	d504      	bpl.n	8010b46 <_vfiprintf_r+0x4e>
 8010b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8010b40:	b01d      	add	sp, #116	; 0x74
 8010b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b46:	89ab      	ldrh	r3, [r5, #12]
 8010b48:	0598      	lsls	r0, r3, #22
 8010b4a:	d4f7      	bmi.n	8010b3c <_vfiprintf_r+0x44>
 8010b4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010b4e:	f7fd fb7d 	bl	800e24c <__retarget_lock_release_recursive>
 8010b52:	e7f3      	b.n	8010b3c <_vfiprintf_r+0x44>
 8010b54:	2300      	movs	r3, #0
 8010b56:	9309      	str	r3, [sp, #36]	; 0x24
 8010b58:	2320      	movs	r3, #32
 8010b5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010b5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b62:	2330      	movs	r3, #48	; 0x30
 8010b64:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010d18 <_vfiprintf_r+0x220>
 8010b68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010b6c:	f04f 0901 	mov.w	r9, #1
 8010b70:	4623      	mov	r3, r4
 8010b72:	469a      	mov	sl, r3
 8010b74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b78:	b10a      	cbz	r2, 8010b7e <_vfiprintf_r+0x86>
 8010b7a:	2a25      	cmp	r2, #37	; 0x25
 8010b7c:	d1f9      	bne.n	8010b72 <_vfiprintf_r+0x7a>
 8010b7e:	ebba 0b04 	subs.w	fp, sl, r4
 8010b82:	d00b      	beq.n	8010b9c <_vfiprintf_r+0xa4>
 8010b84:	465b      	mov	r3, fp
 8010b86:	4622      	mov	r2, r4
 8010b88:	4629      	mov	r1, r5
 8010b8a:	4630      	mov	r0, r6
 8010b8c:	f7ff ffa1 	bl	8010ad2 <__sfputs_r>
 8010b90:	3001      	adds	r0, #1
 8010b92:	f000 80a9 	beq.w	8010ce8 <_vfiprintf_r+0x1f0>
 8010b96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b98:	445a      	add	r2, fp
 8010b9a:	9209      	str	r2, [sp, #36]	; 0x24
 8010b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	f000 80a1 	beq.w	8010ce8 <_vfiprintf_r+0x1f0>
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8010bac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010bb0:	f10a 0a01 	add.w	sl, sl, #1
 8010bb4:	9304      	str	r3, [sp, #16]
 8010bb6:	9307      	str	r3, [sp, #28]
 8010bb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010bbc:	931a      	str	r3, [sp, #104]	; 0x68
 8010bbe:	4654      	mov	r4, sl
 8010bc0:	2205      	movs	r2, #5
 8010bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bc6:	4854      	ldr	r0, [pc, #336]	; (8010d18 <_vfiprintf_r+0x220>)
 8010bc8:	f7ef fb2a 	bl	8000220 <memchr>
 8010bcc:	9a04      	ldr	r2, [sp, #16]
 8010bce:	b9d8      	cbnz	r0, 8010c08 <_vfiprintf_r+0x110>
 8010bd0:	06d1      	lsls	r1, r2, #27
 8010bd2:	bf44      	itt	mi
 8010bd4:	2320      	movmi	r3, #32
 8010bd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010bda:	0713      	lsls	r3, r2, #28
 8010bdc:	bf44      	itt	mi
 8010bde:	232b      	movmi	r3, #43	; 0x2b
 8010be0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010be4:	f89a 3000 	ldrb.w	r3, [sl]
 8010be8:	2b2a      	cmp	r3, #42	; 0x2a
 8010bea:	d015      	beq.n	8010c18 <_vfiprintf_r+0x120>
 8010bec:	9a07      	ldr	r2, [sp, #28]
 8010bee:	4654      	mov	r4, sl
 8010bf0:	2000      	movs	r0, #0
 8010bf2:	f04f 0c0a 	mov.w	ip, #10
 8010bf6:	4621      	mov	r1, r4
 8010bf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010bfc:	3b30      	subs	r3, #48	; 0x30
 8010bfe:	2b09      	cmp	r3, #9
 8010c00:	d94d      	bls.n	8010c9e <_vfiprintf_r+0x1a6>
 8010c02:	b1b0      	cbz	r0, 8010c32 <_vfiprintf_r+0x13a>
 8010c04:	9207      	str	r2, [sp, #28]
 8010c06:	e014      	b.n	8010c32 <_vfiprintf_r+0x13a>
 8010c08:	eba0 0308 	sub.w	r3, r0, r8
 8010c0c:	fa09 f303 	lsl.w	r3, r9, r3
 8010c10:	4313      	orrs	r3, r2
 8010c12:	9304      	str	r3, [sp, #16]
 8010c14:	46a2      	mov	sl, r4
 8010c16:	e7d2      	b.n	8010bbe <_vfiprintf_r+0xc6>
 8010c18:	9b03      	ldr	r3, [sp, #12]
 8010c1a:	1d19      	adds	r1, r3, #4
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	9103      	str	r1, [sp, #12]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	bfbb      	ittet	lt
 8010c24:	425b      	neglt	r3, r3
 8010c26:	f042 0202 	orrlt.w	r2, r2, #2
 8010c2a:	9307      	strge	r3, [sp, #28]
 8010c2c:	9307      	strlt	r3, [sp, #28]
 8010c2e:	bfb8      	it	lt
 8010c30:	9204      	strlt	r2, [sp, #16]
 8010c32:	7823      	ldrb	r3, [r4, #0]
 8010c34:	2b2e      	cmp	r3, #46	; 0x2e
 8010c36:	d10c      	bne.n	8010c52 <_vfiprintf_r+0x15a>
 8010c38:	7863      	ldrb	r3, [r4, #1]
 8010c3a:	2b2a      	cmp	r3, #42	; 0x2a
 8010c3c:	d134      	bne.n	8010ca8 <_vfiprintf_r+0x1b0>
 8010c3e:	9b03      	ldr	r3, [sp, #12]
 8010c40:	1d1a      	adds	r2, r3, #4
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	9203      	str	r2, [sp, #12]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	bfb8      	it	lt
 8010c4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8010c4e:	3402      	adds	r4, #2
 8010c50:	9305      	str	r3, [sp, #20]
 8010c52:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010d28 <_vfiprintf_r+0x230>
 8010c56:	7821      	ldrb	r1, [r4, #0]
 8010c58:	2203      	movs	r2, #3
 8010c5a:	4650      	mov	r0, sl
 8010c5c:	f7ef fae0 	bl	8000220 <memchr>
 8010c60:	b138      	cbz	r0, 8010c72 <_vfiprintf_r+0x17a>
 8010c62:	9b04      	ldr	r3, [sp, #16]
 8010c64:	eba0 000a 	sub.w	r0, r0, sl
 8010c68:	2240      	movs	r2, #64	; 0x40
 8010c6a:	4082      	lsls	r2, r0
 8010c6c:	4313      	orrs	r3, r2
 8010c6e:	3401      	adds	r4, #1
 8010c70:	9304      	str	r3, [sp, #16]
 8010c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c76:	4829      	ldr	r0, [pc, #164]	; (8010d1c <_vfiprintf_r+0x224>)
 8010c78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010c7c:	2206      	movs	r2, #6
 8010c7e:	f7ef facf 	bl	8000220 <memchr>
 8010c82:	2800      	cmp	r0, #0
 8010c84:	d03f      	beq.n	8010d06 <_vfiprintf_r+0x20e>
 8010c86:	4b26      	ldr	r3, [pc, #152]	; (8010d20 <_vfiprintf_r+0x228>)
 8010c88:	bb1b      	cbnz	r3, 8010cd2 <_vfiprintf_r+0x1da>
 8010c8a:	9b03      	ldr	r3, [sp, #12]
 8010c8c:	3307      	adds	r3, #7
 8010c8e:	f023 0307 	bic.w	r3, r3, #7
 8010c92:	3308      	adds	r3, #8
 8010c94:	9303      	str	r3, [sp, #12]
 8010c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c98:	443b      	add	r3, r7
 8010c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8010c9c:	e768      	b.n	8010b70 <_vfiprintf_r+0x78>
 8010c9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ca2:	460c      	mov	r4, r1
 8010ca4:	2001      	movs	r0, #1
 8010ca6:	e7a6      	b.n	8010bf6 <_vfiprintf_r+0xfe>
 8010ca8:	2300      	movs	r3, #0
 8010caa:	3401      	adds	r4, #1
 8010cac:	9305      	str	r3, [sp, #20]
 8010cae:	4619      	mov	r1, r3
 8010cb0:	f04f 0c0a 	mov.w	ip, #10
 8010cb4:	4620      	mov	r0, r4
 8010cb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010cba:	3a30      	subs	r2, #48	; 0x30
 8010cbc:	2a09      	cmp	r2, #9
 8010cbe:	d903      	bls.n	8010cc8 <_vfiprintf_r+0x1d0>
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d0c6      	beq.n	8010c52 <_vfiprintf_r+0x15a>
 8010cc4:	9105      	str	r1, [sp, #20]
 8010cc6:	e7c4      	b.n	8010c52 <_vfiprintf_r+0x15a>
 8010cc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ccc:	4604      	mov	r4, r0
 8010cce:	2301      	movs	r3, #1
 8010cd0:	e7f0      	b.n	8010cb4 <_vfiprintf_r+0x1bc>
 8010cd2:	ab03      	add	r3, sp, #12
 8010cd4:	9300      	str	r3, [sp, #0]
 8010cd6:	462a      	mov	r2, r5
 8010cd8:	4b12      	ldr	r3, [pc, #72]	; (8010d24 <_vfiprintf_r+0x22c>)
 8010cda:	a904      	add	r1, sp, #16
 8010cdc:	4630      	mov	r0, r6
 8010cde:	f7fc fb29 	bl	800d334 <_printf_float>
 8010ce2:	4607      	mov	r7, r0
 8010ce4:	1c78      	adds	r0, r7, #1
 8010ce6:	d1d6      	bne.n	8010c96 <_vfiprintf_r+0x19e>
 8010ce8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010cea:	07d9      	lsls	r1, r3, #31
 8010cec:	d405      	bmi.n	8010cfa <_vfiprintf_r+0x202>
 8010cee:	89ab      	ldrh	r3, [r5, #12]
 8010cf0:	059a      	lsls	r2, r3, #22
 8010cf2:	d402      	bmi.n	8010cfa <_vfiprintf_r+0x202>
 8010cf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010cf6:	f7fd faa9 	bl	800e24c <__retarget_lock_release_recursive>
 8010cfa:	89ab      	ldrh	r3, [r5, #12]
 8010cfc:	065b      	lsls	r3, r3, #25
 8010cfe:	f53f af1d 	bmi.w	8010b3c <_vfiprintf_r+0x44>
 8010d02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010d04:	e71c      	b.n	8010b40 <_vfiprintf_r+0x48>
 8010d06:	ab03      	add	r3, sp, #12
 8010d08:	9300      	str	r3, [sp, #0]
 8010d0a:	462a      	mov	r2, r5
 8010d0c:	4b05      	ldr	r3, [pc, #20]	; (8010d24 <_vfiprintf_r+0x22c>)
 8010d0e:	a904      	add	r1, sp, #16
 8010d10:	4630      	mov	r0, r6
 8010d12:	f7fc fdb3 	bl	800d87c <_printf_i>
 8010d16:	e7e4      	b.n	8010ce2 <_vfiprintf_r+0x1ea>
 8010d18:	08011de8 	.word	0x08011de8
 8010d1c:	08011df2 	.word	0x08011df2
 8010d20:	0800d335 	.word	0x0800d335
 8010d24:	08010ad3 	.word	0x08010ad3
 8010d28:	08011dee 	.word	0x08011dee

08010d2c <__sflush_r>:
 8010d2c:	898a      	ldrh	r2, [r1, #12]
 8010d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d32:	4605      	mov	r5, r0
 8010d34:	0710      	lsls	r0, r2, #28
 8010d36:	460c      	mov	r4, r1
 8010d38:	d458      	bmi.n	8010dec <__sflush_r+0xc0>
 8010d3a:	684b      	ldr	r3, [r1, #4]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	dc05      	bgt.n	8010d4c <__sflush_r+0x20>
 8010d40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	dc02      	bgt.n	8010d4c <__sflush_r+0x20>
 8010d46:	2000      	movs	r0, #0
 8010d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010d4e:	2e00      	cmp	r6, #0
 8010d50:	d0f9      	beq.n	8010d46 <__sflush_r+0x1a>
 8010d52:	2300      	movs	r3, #0
 8010d54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010d58:	682f      	ldr	r7, [r5, #0]
 8010d5a:	6a21      	ldr	r1, [r4, #32]
 8010d5c:	602b      	str	r3, [r5, #0]
 8010d5e:	d032      	beq.n	8010dc6 <__sflush_r+0x9a>
 8010d60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010d62:	89a3      	ldrh	r3, [r4, #12]
 8010d64:	075a      	lsls	r2, r3, #29
 8010d66:	d505      	bpl.n	8010d74 <__sflush_r+0x48>
 8010d68:	6863      	ldr	r3, [r4, #4]
 8010d6a:	1ac0      	subs	r0, r0, r3
 8010d6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010d6e:	b10b      	cbz	r3, 8010d74 <__sflush_r+0x48>
 8010d70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010d72:	1ac0      	subs	r0, r0, r3
 8010d74:	2300      	movs	r3, #0
 8010d76:	4602      	mov	r2, r0
 8010d78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010d7a:	6a21      	ldr	r1, [r4, #32]
 8010d7c:	4628      	mov	r0, r5
 8010d7e:	47b0      	blx	r6
 8010d80:	1c43      	adds	r3, r0, #1
 8010d82:	89a3      	ldrh	r3, [r4, #12]
 8010d84:	d106      	bne.n	8010d94 <__sflush_r+0x68>
 8010d86:	6829      	ldr	r1, [r5, #0]
 8010d88:	291d      	cmp	r1, #29
 8010d8a:	d82b      	bhi.n	8010de4 <__sflush_r+0xb8>
 8010d8c:	4a29      	ldr	r2, [pc, #164]	; (8010e34 <__sflush_r+0x108>)
 8010d8e:	410a      	asrs	r2, r1
 8010d90:	07d6      	lsls	r6, r2, #31
 8010d92:	d427      	bmi.n	8010de4 <__sflush_r+0xb8>
 8010d94:	2200      	movs	r2, #0
 8010d96:	6062      	str	r2, [r4, #4]
 8010d98:	04d9      	lsls	r1, r3, #19
 8010d9a:	6922      	ldr	r2, [r4, #16]
 8010d9c:	6022      	str	r2, [r4, #0]
 8010d9e:	d504      	bpl.n	8010daa <__sflush_r+0x7e>
 8010da0:	1c42      	adds	r2, r0, #1
 8010da2:	d101      	bne.n	8010da8 <__sflush_r+0x7c>
 8010da4:	682b      	ldr	r3, [r5, #0]
 8010da6:	b903      	cbnz	r3, 8010daa <__sflush_r+0x7e>
 8010da8:	6560      	str	r0, [r4, #84]	; 0x54
 8010daa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010dac:	602f      	str	r7, [r5, #0]
 8010dae:	2900      	cmp	r1, #0
 8010db0:	d0c9      	beq.n	8010d46 <__sflush_r+0x1a>
 8010db2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010db6:	4299      	cmp	r1, r3
 8010db8:	d002      	beq.n	8010dc0 <__sflush_r+0x94>
 8010dba:	4628      	mov	r0, r5
 8010dbc:	f7fe f8d6 	bl	800ef6c <_free_r>
 8010dc0:	2000      	movs	r0, #0
 8010dc2:	6360      	str	r0, [r4, #52]	; 0x34
 8010dc4:	e7c0      	b.n	8010d48 <__sflush_r+0x1c>
 8010dc6:	2301      	movs	r3, #1
 8010dc8:	4628      	mov	r0, r5
 8010dca:	47b0      	blx	r6
 8010dcc:	1c41      	adds	r1, r0, #1
 8010dce:	d1c8      	bne.n	8010d62 <__sflush_r+0x36>
 8010dd0:	682b      	ldr	r3, [r5, #0]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d0c5      	beq.n	8010d62 <__sflush_r+0x36>
 8010dd6:	2b1d      	cmp	r3, #29
 8010dd8:	d001      	beq.n	8010dde <__sflush_r+0xb2>
 8010dda:	2b16      	cmp	r3, #22
 8010ddc:	d101      	bne.n	8010de2 <__sflush_r+0xb6>
 8010dde:	602f      	str	r7, [r5, #0]
 8010de0:	e7b1      	b.n	8010d46 <__sflush_r+0x1a>
 8010de2:	89a3      	ldrh	r3, [r4, #12]
 8010de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010de8:	81a3      	strh	r3, [r4, #12]
 8010dea:	e7ad      	b.n	8010d48 <__sflush_r+0x1c>
 8010dec:	690f      	ldr	r7, [r1, #16]
 8010dee:	2f00      	cmp	r7, #0
 8010df0:	d0a9      	beq.n	8010d46 <__sflush_r+0x1a>
 8010df2:	0793      	lsls	r3, r2, #30
 8010df4:	680e      	ldr	r6, [r1, #0]
 8010df6:	bf08      	it	eq
 8010df8:	694b      	ldreq	r3, [r1, #20]
 8010dfa:	600f      	str	r7, [r1, #0]
 8010dfc:	bf18      	it	ne
 8010dfe:	2300      	movne	r3, #0
 8010e00:	eba6 0807 	sub.w	r8, r6, r7
 8010e04:	608b      	str	r3, [r1, #8]
 8010e06:	f1b8 0f00 	cmp.w	r8, #0
 8010e0a:	dd9c      	ble.n	8010d46 <__sflush_r+0x1a>
 8010e0c:	6a21      	ldr	r1, [r4, #32]
 8010e0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010e10:	4643      	mov	r3, r8
 8010e12:	463a      	mov	r2, r7
 8010e14:	4628      	mov	r0, r5
 8010e16:	47b0      	blx	r6
 8010e18:	2800      	cmp	r0, #0
 8010e1a:	dc06      	bgt.n	8010e2a <__sflush_r+0xfe>
 8010e1c:	89a3      	ldrh	r3, [r4, #12]
 8010e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e22:	81a3      	strh	r3, [r4, #12]
 8010e24:	f04f 30ff 	mov.w	r0, #4294967295
 8010e28:	e78e      	b.n	8010d48 <__sflush_r+0x1c>
 8010e2a:	4407      	add	r7, r0
 8010e2c:	eba8 0800 	sub.w	r8, r8, r0
 8010e30:	e7e9      	b.n	8010e06 <__sflush_r+0xda>
 8010e32:	bf00      	nop
 8010e34:	dfbffffe 	.word	0xdfbffffe

08010e38 <_fflush_r>:
 8010e38:	b538      	push	{r3, r4, r5, lr}
 8010e3a:	690b      	ldr	r3, [r1, #16]
 8010e3c:	4605      	mov	r5, r0
 8010e3e:	460c      	mov	r4, r1
 8010e40:	b913      	cbnz	r3, 8010e48 <_fflush_r+0x10>
 8010e42:	2500      	movs	r5, #0
 8010e44:	4628      	mov	r0, r5
 8010e46:	bd38      	pop	{r3, r4, r5, pc}
 8010e48:	b118      	cbz	r0, 8010e52 <_fflush_r+0x1a>
 8010e4a:	6a03      	ldr	r3, [r0, #32]
 8010e4c:	b90b      	cbnz	r3, 8010e52 <_fflush_r+0x1a>
 8010e4e:	f7fd f8d3 	bl	800dff8 <__sinit>
 8010e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d0f3      	beq.n	8010e42 <_fflush_r+0xa>
 8010e5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010e5c:	07d0      	lsls	r0, r2, #31
 8010e5e:	d404      	bmi.n	8010e6a <_fflush_r+0x32>
 8010e60:	0599      	lsls	r1, r3, #22
 8010e62:	d402      	bmi.n	8010e6a <_fflush_r+0x32>
 8010e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e66:	f7fd f9f0 	bl	800e24a <__retarget_lock_acquire_recursive>
 8010e6a:	4628      	mov	r0, r5
 8010e6c:	4621      	mov	r1, r4
 8010e6e:	f7ff ff5d 	bl	8010d2c <__sflush_r>
 8010e72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010e74:	07da      	lsls	r2, r3, #31
 8010e76:	4605      	mov	r5, r0
 8010e78:	d4e4      	bmi.n	8010e44 <_fflush_r+0xc>
 8010e7a:	89a3      	ldrh	r3, [r4, #12]
 8010e7c:	059b      	lsls	r3, r3, #22
 8010e7e:	d4e1      	bmi.n	8010e44 <_fflush_r+0xc>
 8010e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e82:	f7fd f9e3 	bl	800e24c <__retarget_lock_release_recursive>
 8010e86:	e7dd      	b.n	8010e44 <_fflush_r+0xc>

08010e88 <__swbuf_r>:
 8010e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e8a:	460e      	mov	r6, r1
 8010e8c:	4614      	mov	r4, r2
 8010e8e:	4605      	mov	r5, r0
 8010e90:	b118      	cbz	r0, 8010e9a <__swbuf_r+0x12>
 8010e92:	6a03      	ldr	r3, [r0, #32]
 8010e94:	b90b      	cbnz	r3, 8010e9a <__swbuf_r+0x12>
 8010e96:	f7fd f8af 	bl	800dff8 <__sinit>
 8010e9a:	69a3      	ldr	r3, [r4, #24]
 8010e9c:	60a3      	str	r3, [r4, #8]
 8010e9e:	89a3      	ldrh	r3, [r4, #12]
 8010ea0:	071a      	lsls	r2, r3, #28
 8010ea2:	d525      	bpl.n	8010ef0 <__swbuf_r+0x68>
 8010ea4:	6923      	ldr	r3, [r4, #16]
 8010ea6:	b31b      	cbz	r3, 8010ef0 <__swbuf_r+0x68>
 8010ea8:	6823      	ldr	r3, [r4, #0]
 8010eaa:	6922      	ldr	r2, [r4, #16]
 8010eac:	1a98      	subs	r0, r3, r2
 8010eae:	6963      	ldr	r3, [r4, #20]
 8010eb0:	b2f6      	uxtb	r6, r6
 8010eb2:	4283      	cmp	r3, r0
 8010eb4:	4637      	mov	r7, r6
 8010eb6:	dc04      	bgt.n	8010ec2 <__swbuf_r+0x3a>
 8010eb8:	4621      	mov	r1, r4
 8010eba:	4628      	mov	r0, r5
 8010ebc:	f7ff ffbc 	bl	8010e38 <_fflush_r>
 8010ec0:	b9e0      	cbnz	r0, 8010efc <__swbuf_r+0x74>
 8010ec2:	68a3      	ldr	r3, [r4, #8]
 8010ec4:	3b01      	subs	r3, #1
 8010ec6:	60a3      	str	r3, [r4, #8]
 8010ec8:	6823      	ldr	r3, [r4, #0]
 8010eca:	1c5a      	adds	r2, r3, #1
 8010ecc:	6022      	str	r2, [r4, #0]
 8010ece:	701e      	strb	r6, [r3, #0]
 8010ed0:	6962      	ldr	r2, [r4, #20]
 8010ed2:	1c43      	adds	r3, r0, #1
 8010ed4:	429a      	cmp	r2, r3
 8010ed6:	d004      	beq.n	8010ee2 <__swbuf_r+0x5a>
 8010ed8:	89a3      	ldrh	r3, [r4, #12]
 8010eda:	07db      	lsls	r3, r3, #31
 8010edc:	d506      	bpl.n	8010eec <__swbuf_r+0x64>
 8010ede:	2e0a      	cmp	r6, #10
 8010ee0:	d104      	bne.n	8010eec <__swbuf_r+0x64>
 8010ee2:	4621      	mov	r1, r4
 8010ee4:	4628      	mov	r0, r5
 8010ee6:	f7ff ffa7 	bl	8010e38 <_fflush_r>
 8010eea:	b938      	cbnz	r0, 8010efc <__swbuf_r+0x74>
 8010eec:	4638      	mov	r0, r7
 8010eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ef0:	4621      	mov	r1, r4
 8010ef2:	4628      	mov	r0, r5
 8010ef4:	f000 f806 	bl	8010f04 <__swsetup_r>
 8010ef8:	2800      	cmp	r0, #0
 8010efa:	d0d5      	beq.n	8010ea8 <__swbuf_r+0x20>
 8010efc:	f04f 37ff 	mov.w	r7, #4294967295
 8010f00:	e7f4      	b.n	8010eec <__swbuf_r+0x64>
	...

08010f04 <__swsetup_r>:
 8010f04:	b538      	push	{r3, r4, r5, lr}
 8010f06:	4b2a      	ldr	r3, [pc, #168]	; (8010fb0 <__swsetup_r+0xac>)
 8010f08:	4605      	mov	r5, r0
 8010f0a:	6818      	ldr	r0, [r3, #0]
 8010f0c:	460c      	mov	r4, r1
 8010f0e:	b118      	cbz	r0, 8010f18 <__swsetup_r+0x14>
 8010f10:	6a03      	ldr	r3, [r0, #32]
 8010f12:	b90b      	cbnz	r3, 8010f18 <__swsetup_r+0x14>
 8010f14:	f7fd f870 	bl	800dff8 <__sinit>
 8010f18:	89a3      	ldrh	r3, [r4, #12]
 8010f1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010f1e:	0718      	lsls	r0, r3, #28
 8010f20:	d422      	bmi.n	8010f68 <__swsetup_r+0x64>
 8010f22:	06d9      	lsls	r1, r3, #27
 8010f24:	d407      	bmi.n	8010f36 <__swsetup_r+0x32>
 8010f26:	2309      	movs	r3, #9
 8010f28:	602b      	str	r3, [r5, #0]
 8010f2a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010f2e:	81a3      	strh	r3, [r4, #12]
 8010f30:	f04f 30ff 	mov.w	r0, #4294967295
 8010f34:	e034      	b.n	8010fa0 <__swsetup_r+0x9c>
 8010f36:	0758      	lsls	r0, r3, #29
 8010f38:	d512      	bpl.n	8010f60 <__swsetup_r+0x5c>
 8010f3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f3c:	b141      	cbz	r1, 8010f50 <__swsetup_r+0x4c>
 8010f3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f42:	4299      	cmp	r1, r3
 8010f44:	d002      	beq.n	8010f4c <__swsetup_r+0x48>
 8010f46:	4628      	mov	r0, r5
 8010f48:	f7fe f810 	bl	800ef6c <_free_r>
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	6363      	str	r3, [r4, #52]	; 0x34
 8010f50:	89a3      	ldrh	r3, [r4, #12]
 8010f52:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010f56:	81a3      	strh	r3, [r4, #12]
 8010f58:	2300      	movs	r3, #0
 8010f5a:	6063      	str	r3, [r4, #4]
 8010f5c:	6923      	ldr	r3, [r4, #16]
 8010f5e:	6023      	str	r3, [r4, #0]
 8010f60:	89a3      	ldrh	r3, [r4, #12]
 8010f62:	f043 0308 	orr.w	r3, r3, #8
 8010f66:	81a3      	strh	r3, [r4, #12]
 8010f68:	6923      	ldr	r3, [r4, #16]
 8010f6a:	b94b      	cbnz	r3, 8010f80 <__swsetup_r+0x7c>
 8010f6c:	89a3      	ldrh	r3, [r4, #12]
 8010f6e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f76:	d003      	beq.n	8010f80 <__swsetup_r+0x7c>
 8010f78:	4621      	mov	r1, r4
 8010f7a:	4628      	mov	r0, r5
 8010f7c:	f000 fc5f 	bl	801183e <__smakebuf_r>
 8010f80:	89a0      	ldrh	r0, [r4, #12]
 8010f82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010f86:	f010 0301 	ands.w	r3, r0, #1
 8010f8a:	d00a      	beq.n	8010fa2 <__swsetup_r+0x9e>
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	60a3      	str	r3, [r4, #8]
 8010f90:	6963      	ldr	r3, [r4, #20]
 8010f92:	425b      	negs	r3, r3
 8010f94:	61a3      	str	r3, [r4, #24]
 8010f96:	6923      	ldr	r3, [r4, #16]
 8010f98:	b943      	cbnz	r3, 8010fac <__swsetup_r+0xa8>
 8010f9a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010f9e:	d1c4      	bne.n	8010f2a <__swsetup_r+0x26>
 8010fa0:	bd38      	pop	{r3, r4, r5, pc}
 8010fa2:	0781      	lsls	r1, r0, #30
 8010fa4:	bf58      	it	pl
 8010fa6:	6963      	ldrpl	r3, [r4, #20]
 8010fa8:	60a3      	str	r3, [r4, #8]
 8010faa:	e7f4      	b.n	8010f96 <__swsetup_r+0x92>
 8010fac:	2000      	movs	r0, #0
 8010fae:	e7f7      	b.n	8010fa0 <__swsetup_r+0x9c>
 8010fb0:	200001dc 	.word	0x200001dc

08010fb4 <memmove>:
 8010fb4:	4288      	cmp	r0, r1
 8010fb6:	b510      	push	{r4, lr}
 8010fb8:	eb01 0402 	add.w	r4, r1, r2
 8010fbc:	d902      	bls.n	8010fc4 <memmove+0x10>
 8010fbe:	4284      	cmp	r4, r0
 8010fc0:	4623      	mov	r3, r4
 8010fc2:	d807      	bhi.n	8010fd4 <memmove+0x20>
 8010fc4:	1e43      	subs	r3, r0, #1
 8010fc6:	42a1      	cmp	r1, r4
 8010fc8:	d008      	beq.n	8010fdc <memmove+0x28>
 8010fca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010fce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010fd2:	e7f8      	b.n	8010fc6 <memmove+0x12>
 8010fd4:	4402      	add	r2, r0
 8010fd6:	4601      	mov	r1, r0
 8010fd8:	428a      	cmp	r2, r1
 8010fda:	d100      	bne.n	8010fde <memmove+0x2a>
 8010fdc:	bd10      	pop	{r4, pc}
 8010fde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010fe2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010fe6:	e7f7      	b.n	8010fd8 <memmove+0x24>

08010fe8 <strncmp>:
 8010fe8:	b510      	push	{r4, lr}
 8010fea:	b16a      	cbz	r2, 8011008 <strncmp+0x20>
 8010fec:	3901      	subs	r1, #1
 8010fee:	1884      	adds	r4, r0, r2
 8010ff0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ff4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	d103      	bne.n	8011004 <strncmp+0x1c>
 8010ffc:	42a0      	cmp	r0, r4
 8010ffe:	d001      	beq.n	8011004 <strncmp+0x1c>
 8011000:	2a00      	cmp	r2, #0
 8011002:	d1f5      	bne.n	8010ff0 <strncmp+0x8>
 8011004:	1ad0      	subs	r0, r2, r3
 8011006:	bd10      	pop	{r4, pc}
 8011008:	4610      	mov	r0, r2
 801100a:	e7fc      	b.n	8011006 <strncmp+0x1e>

0801100c <_sbrk_r>:
 801100c:	b538      	push	{r3, r4, r5, lr}
 801100e:	4d06      	ldr	r5, [pc, #24]	; (8011028 <_sbrk_r+0x1c>)
 8011010:	2300      	movs	r3, #0
 8011012:	4604      	mov	r4, r0
 8011014:	4608      	mov	r0, r1
 8011016:	602b      	str	r3, [r5, #0]
 8011018:	f7f1 f9ba 	bl	8002390 <_sbrk>
 801101c:	1c43      	adds	r3, r0, #1
 801101e:	d102      	bne.n	8011026 <_sbrk_r+0x1a>
 8011020:	682b      	ldr	r3, [r5, #0]
 8011022:	b103      	cbz	r3, 8011026 <_sbrk_r+0x1a>
 8011024:	6023      	str	r3, [r4, #0]
 8011026:	bd38      	pop	{r3, r4, r5, pc}
 8011028:	20002274 	.word	0x20002274
 801102c:	00000000 	.word	0x00000000

08011030 <nan>:
 8011030:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011038 <nan+0x8>
 8011034:	4770      	bx	lr
 8011036:	bf00      	nop
 8011038:	00000000 	.word	0x00000000
 801103c:	7ff80000 	.word	0x7ff80000

08011040 <__assert_func>:
 8011040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011042:	4614      	mov	r4, r2
 8011044:	461a      	mov	r2, r3
 8011046:	4b09      	ldr	r3, [pc, #36]	; (801106c <__assert_func+0x2c>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	4605      	mov	r5, r0
 801104c:	68d8      	ldr	r0, [r3, #12]
 801104e:	b14c      	cbz	r4, 8011064 <__assert_func+0x24>
 8011050:	4b07      	ldr	r3, [pc, #28]	; (8011070 <__assert_func+0x30>)
 8011052:	9100      	str	r1, [sp, #0]
 8011054:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011058:	4906      	ldr	r1, [pc, #24]	; (8011074 <__assert_func+0x34>)
 801105a:	462b      	mov	r3, r5
 801105c:	f7fc ffe4 	bl	800e028 <fiprintf>
 8011060:	f000 fc4c 	bl	80118fc <abort>
 8011064:	4b04      	ldr	r3, [pc, #16]	; (8011078 <__assert_func+0x38>)
 8011066:	461c      	mov	r4, r3
 8011068:	e7f3      	b.n	8011052 <__assert_func+0x12>
 801106a:	bf00      	nop
 801106c:	200001dc 	.word	0x200001dc
 8011070:	08011e01 	.word	0x08011e01
 8011074:	08011e0e 	.word	0x08011e0e
 8011078:	08011e3c 	.word	0x08011e3c

0801107c <_calloc_r>:
 801107c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801107e:	fba1 2402 	umull	r2, r4, r1, r2
 8011082:	b94c      	cbnz	r4, 8011098 <_calloc_r+0x1c>
 8011084:	4611      	mov	r1, r2
 8011086:	9201      	str	r2, [sp, #4]
 8011088:	f7fd ffe4 	bl	800f054 <_malloc_r>
 801108c:	9a01      	ldr	r2, [sp, #4]
 801108e:	4605      	mov	r5, r0
 8011090:	b930      	cbnz	r0, 80110a0 <_calloc_r+0x24>
 8011092:	4628      	mov	r0, r5
 8011094:	b003      	add	sp, #12
 8011096:	bd30      	pop	{r4, r5, pc}
 8011098:	220c      	movs	r2, #12
 801109a:	6002      	str	r2, [r0, #0]
 801109c:	2500      	movs	r5, #0
 801109e:	e7f8      	b.n	8011092 <_calloc_r+0x16>
 80110a0:	4621      	mov	r1, r4
 80110a2:	f7fd f854 	bl	800e14e <memset>
 80110a6:	e7f4      	b.n	8011092 <_calloc_r+0x16>

080110a8 <rshift>:
 80110a8:	6903      	ldr	r3, [r0, #16]
 80110aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80110ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80110b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80110b6:	f100 0414 	add.w	r4, r0, #20
 80110ba:	dd45      	ble.n	8011148 <rshift+0xa0>
 80110bc:	f011 011f 	ands.w	r1, r1, #31
 80110c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80110c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80110c8:	d10c      	bne.n	80110e4 <rshift+0x3c>
 80110ca:	f100 0710 	add.w	r7, r0, #16
 80110ce:	4629      	mov	r1, r5
 80110d0:	42b1      	cmp	r1, r6
 80110d2:	d334      	bcc.n	801113e <rshift+0x96>
 80110d4:	1a9b      	subs	r3, r3, r2
 80110d6:	009b      	lsls	r3, r3, #2
 80110d8:	1eea      	subs	r2, r5, #3
 80110da:	4296      	cmp	r6, r2
 80110dc:	bf38      	it	cc
 80110de:	2300      	movcc	r3, #0
 80110e0:	4423      	add	r3, r4
 80110e2:	e015      	b.n	8011110 <rshift+0x68>
 80110e4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80110e8:	f1c1 0820 	rsb	r8, r1, #32
 80110ec:	40cf      	lsrs	r7, r1
 80110ee:	f105 0e04 	add.w	lr, r5, #4
 80110f2:	46a1      	mov	r9, r4
 80110f4:	4576      	cmp	r6, lr
 80110f6:	46f4      	mov	ip, lr
 80110f8:	d815      	bhi.n	8011126 <rshift+0x7e>
 80110fa:	1a9a      	subs	r2, r3, r2
 80110fc:	0092      	lsls	r2, r2, #2
 80110fe:	3a04      	subs	r2, #4
 8011100:	3501      	adds	r5, #1
 8011102:	42ae      	cmp	r6, r5
 8011104:	bf38      	it	cc
 8011106:	2200      	movcc	r2, #0
 8011108:	18a3      	adds	r3, r4, r2
 801110a:	50a7      	str	r7, [r4, r2]
 801110c:	b107      	cbz	r7, 8011110 <rshift+0x68>
 801110e:	3304      	adds	r3, #4
 8011110:	1b1a      	subs	r2, r3, r4
 8011112:	42a3      	cmp	r3, r4
 8011114:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011118:	bf08      	it	eq
 801111a:	2300      	moveq	r3, #0
 801111c:	6102      	str	r2, [r0, #16]
 801111e:	bf08      	it	eq
 8011120:	6143      	streq	r3, [r0, #20]
 8011122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011126:	f8dc c000 	ldr.w	ip, [ip]
 801112a:	fa0c fc08 	lsl.w	ip, ip, r8
 801112e:	ea4c 0707 	orr.w	r7, ip, r7
 8011132:	f849 7b04 	str.w	r7, [r9], #4
 8011136:	f85e 7b04 	ldr.w	r7, [lr], #4
 801113a:	40cf      	lsrs	r7, r1
 801113c:	e7da      	b.n	80110f4 <rshift+0x4c>
 801113e:	f851 cb04 	ldr.w	ip, [r1], #4
 8011142:	f847 cf04 	str.w	ip, [r7, #4]!
 8011146:	e7c3      	b.n	80110d0 <rshift+0x28>
 8011148:	4623      	mov	r3, r4
 801114a:	e7e1      	b.n	8011110 <rshift+0x68>

0801114c <__hexdig_fun>:
 801114c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011150:	2b09      	cmp	r3, #9
 8011152:	d802      	bhi.n	801115a <__hexdig_fun+0xe>
 8011154:	3820      	subs	r0, #32
 8011156:	b2c0      	uxtb	r0, r0
 8011158:	4770      	bx	lr
 801115a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801115e:	2b05      	cmp	r3, #5
 8011160:	d801      	bhi.n	8011166 <__hexdig_fun+0x1a>
 8011162:	3847      	subs	r0, #71	; 0x47
 8011164:	e7f7      	b.n	8011156 <__hexdig_fun+0xa>
 8011166:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801116a:	2b05      	cmp	r3, #5
 801116c:	d801      	bhi.n	8011172 <__hexdig_fun+0x26>
 801116e:	3827      	subs	r0, #39	; 0x27
 8011170:	e7f1      	b.n	8011156 <__hexdig_fun+0xa>
 8011172:	2000      	movs	r0, #0
 8011174:	4770      	bx	lr
	...

08011178 <__gethex>:
 8011178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801117c:	4617      	mov	r7, r2
 801117e:	680a      	ldr	r2, [r1, #0]
 8011180:	b085      	sub	sp, #20
 8011182:	f102 0b02 	add.w	fp, r2, #2
 8011186:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801118a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801118e:	4681      	mov	r9, r0
 8011190:	468a      	mov	sl, r1
 8011192:	9302      	str	r3, [sp, #8]
 8011194:	32fe      	adds	r2, #254	; 0xfe
 8011196:	eb02 030b 	add.w	r3, r2, fp
 801119a:	46d8      	mov	r8, fp
 801119c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80111a0:	9301      	str	r3, [sp, #4]
 80111a2:	2830      	cmp	r0, #48	; 0x30
 80111a4:	d0f7      	beq.n	8011196 <__gethex+0x1e>
 80111a6:	f7ff ffd1 	bl	801114c <__hexdig_fun>
 80111aa:	4604      	mov	r4, r0
 80111ac:	2800      	cmp	r0, #0
 80111ae:	d138      	bne.n	8011222 <__gethex+0xaa>
 80111b0:	49a7      	ldr	r1, [pc, #668]	; (8011450 <__gethex+0x2d8>)
 80111b2:	2201      	movs	r2, #1
 80111b4:	4640      	mov	r0, r8
 80111b6:	f7ff ff17 	bl	8010fe8 <strncmp>
 80111ba:	4606      	mov	r6, r0
 80111bc:	2800      	cmp	r0, #0
 80111be:	d169      	bne.n	8011294 <__gethex+0x11c>
 80111c0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80111c4:	465d      	mov	r5, fp
 80111c6:	f7ff ffc1 	bl	801114c <__hexdig_fun>
 80111ca:	2800      	cmp	r0, #0
 80111cc:	d064      	beq.n	8011298 <__gethex+0x120>
 80111ce:	465a      	mov	r2, fp
 80111d0:	7810      	ldrb	r0, [r2, #0]
 80111d2:	2830      	cmp	r0, #48	; 0x30
 80111d4:	4690      	mov	r8, r2
 80111d6:	f102 0201 	add.w	r2, r2, #1
 80111da:	d0f9      	beq.n	80111d0 <__gethex+0x58>
 80111dc:	f7ff ffb6 	bl	801114c <__hexdig_fun>
 80111e0:	2301      	movs	r3, #1
 80111e2:	fab0 f480 	clz	r4, r0
 80111e6:	0964      	lsrs	r4, r4, #5
 80111e8:	465e      	mov	r6, fp
 80111ea:	9301      	str	r3, [sp, #4]
 80111ec:	4642      	mov	r2, r8
 80111ee:	4615      	mov	r5, r2
 80111f0:	3201      	adds	r2, #1
 80111f2:	7828      	ldrb	r0, [r5, #0]
 80111f4:	f7ff ffaa 	bl	801114c <__hexdig_fun>
 80111f8:	2800      	cmp	r0, #0
 80111fa:	d1f8      	bne.n	80111ee <__gethex+0x76>
 80111fc:	4994      	ldr	r1, [pc, #592]	; (8011450 <__gethex+0x2d8>)
 80111fe:	2201      	movs	r2, #1
 8011200:	4628      	mov	r0, r5
 8011202:	f7ff fef1 	bl	8010fe8 <strncmp>
 8011206:	b978      	cbnz	r0, 8011228 <__gethex+0xb0>
 8011208:	b946      	cbnz	r6, 801121c <__gethex+0xa4>
 801120a:	1c6e      	adds	r6, r5, #1
 801120c:	4632      	mov	r2, r6
 801120e:	4615      	mov	r5, r2
 8011210:	3201      	adds	r2, #1
 8011212:	7828      	ldrb	r0, [r5, #0]
 8011214:	f7ff ff9a 	bl	801114c <__hexdig_fun>
 8011218:	2800      	cmp	r0, #0
 801121a:	d1f8      	bne.n	801120e <__gethex+0x96>
 801121c:	1b73      	subs	r3, r6, r5
 801121e:	009e      	lsls	r6, r3, #2
 8011220:	e004      	b.n	801122c <__gethex+0xb4>
 8011222:	2400      	movs	r4, #0
 8011224:	4626      	mov	r6, r4
 8011226:	e7e1      	b.n	80111ec <__gethex+0x74>
 8011228:	2e00      	cmp	r6, #0
 801122a:	d1f7      	bne.n	801121c <__gethex+0xa4>
 801122c:	782b      	ldrb	r3, [r5, #0]
 801122e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011232:	2b50      	cmp	r3, #80	; 0x50
 8011234:	d13d      	bne.n	80112b2 <__gethex+0x13a>
 8011236:	786b      	ldrb	r3, [r5, #1]
 8011238:	2b2b      	cmp	r3, #43	; 0x2b
 801123a:	d02f      	beq.n	801129c <__gethex+0x124>
 801123c:	2b2d      	cmp	r3, #45	; 0x2d
 801123e:	d031      	beq.n	80112a4 <__gethex+0x12c>
 8011240:	1c69      	adds	r1, r5, #1
 8011242:	f04f 0b00 	mov.w	fp, #0
 8011246:	7808      	ldrb	r0, [r1, #0]
 8011248:	f7ff ff80 	bl	801114c <__hexdig_fun>
 801124c:	1e42      	subs	r2, r0, #1
 801124e:	b2d2      	uxtb	r2, r2
 8011250:	2a18      	cmp	r2, #24
 8011252:	d82e      	bhi.n	80112b2 <__gethex+0x13a>
 8011254:	f1a0 0210 	sub.w	r2, r0, #16
 8011258:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801125c:	f7ff ff76 	bl	801114c <__hexdig_fun>
 8011260:	f100 3cff 	add.w	ip, r0, #4294967295
 8011264:	fa5f fc8c 	uxtb.w	ip, ip
 8011268:	f1bc 0f18 	cmp.w	ip, #24
 801126c:	d91d      	bls.n	80112aa <__gethex+0x132>
 801126e:	f1bb 0f00 	cmp.w	fp, #0
 8011272:	d000      	beq.n	8011276 <__gethex+0xfe>
 8011274:	4252      	negs	r2, r2
 8011276:	4416      	add	r6, r2
 8011278:	f8ca 1000 	str.w	r1, [sl]
 801127c:	b1dc      	cbz	r4, 80112b6 <__gethex+0x13e>
 801127e:	9b01      	ldr	r3, [sp, #4]
 8011280:	2b00      	cmp	r3, #0
 8011282:	bf14      	ite	ne
 8011284:	f04f 0800 	movne.w	r8, #0
 8011288:	f04f 0806 	moveq.w	r8, #6
 801128c:	4640      	mov	r0, r8
 801128e:	b005      	add	sp, #20
 8011290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011294:	4645      	mov	r5, r8
 8011296:	4626      	mov	r6, r4
 8011298:	2401      	movs	r4, #1
 801129a:	e7c7      	b.n	801122c <__gethex+0xb4>
 801129c:	f04f 0b00 	mov.w	fp, #0
 80112a0:	1ca9      	adds	r1, r5, #2
 80112a2:	e7d0      	b.n	8011246 <__gethex+0xce>
 80112a4:	f04f 0b01 	mov.w	fp, #1
 80112a8:	e7fa      	b.n	80112a0 <__gethex+0x128>
 80112aa:	230a      	movs	r3, #10
 80112ac:	fb03 0002 	mla	r0, r3, r2, r0
 80112b0:	e7d0      	b.n	8011254 <__gethex+0xdc>
 80112b2:	4629      	mov	r1, r5
 80112b4:	e7e0      	b.n	8011278 <__gethex+0x100>
 80112b6:	eba5 0308 	sub.w	r3, r5, r8
 80112ba:	3b01      	subs	r3, #1
 80112bc:	4621      	mov	r1, r4
 80112be:	2b07      	cmp	r3, #7
 80112c0:	dc0a      	bgt.n	80112d8 <__gethex+0x160>
 80112c2:	4648      	mov	r0, r9
 80112c4:	f7fd ff52 	bl	800f16c <_Balloc>
 80112c8:	4604      	mov	r4, r0
 80112ca:	b940      	cbnz	r0, 80112de <__gethex+0x166>
 80112cc:	4b61      	ldr	r3, [pc, #388]	; (8011454 <__gethex+0x2dc>)
 80112ce:	4602      	mov	r2, r0
 80112d0:	21e4      	movs	r1, #228	; 0xe4
 80112d2:	4861      	ldr	r0, [pc, #388]	; (8011458 <__gethex+0x2e0>)
 80112d4:	f7ff feb4 	bl	8011040 <__assert_func>
 80112d8:	3101      	adds	r1, #1
 80112da:	105b      	asrs	r3, r3, #1
 80112dc:	e7ef      	b.n	80112be <__gethex+0x146>
 80112de:	f100 0a14 	add.w	sl, r0, #20
 80112e2:	2300      	movs	r3, #0
 80112e4:	495a      	ldr	r1, [pc, #360]	; (8011450 <__gethex+0x2d8>)
 80112e6:	f8cd a004 	str.w	sl, [sp, #4]
 80112ea:	469b      	mov	fp, r3
 80112ec:	45a8      	cmp	r8, r5
 80112ee:	d342      	bcc.n	8011376 <__gethex+0x1fe>
 80112f0:	9801      	ldr	r0, [sp, #4]
 80112f2:	f840 bb04 	str.w	fp, [r0], #4
 80112f6:	eba0 000a 	sub.w	r0, r0, sl
 80112fa:	1080      	asrs	r0, r0, #2
 80112fc:	6120      	str	r0, [r4, #16]
 80112fe:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8011302:	4658      	mov	r0, fp
 8011304:	f7fe f824 	bl	800f350 <__hi0bits>
 8011308:	683d      	ldr	r5, [r7, #0]
 801130a:	eba8 0000 	sub.w	r0, r8, r0
 801130e:	42a8      	cmp	r0, r5
 8011310:	dd59      	ble.n	80113c6 <__gethex+0x24e>
 8011312:	eba0 0805 	sub.w	r8, r0, r5
 8011316:	4641      	mov	r1, r8
 8011318:	4620      	mov	r0, r4
 801131a:	f7fe fbb3 	bl	800fa84 <__any_on>
 801131e:	4683      	mov	fp, r0
 8011320:	b1b8      	cbz	r0, 8011352 <__gethex+0x1da>
 8011322:	f108 33ff 	add.w	r3, r8, #4294967295
 8011326:	1159      	asrs	r1, r3, #5
 8011328:	f003 021f 	and.w	r2, r3, #31
 801132c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011330:	f04f 0b01 	mov.w	fp, #1
 8011334:	fa0b f202 	lsl.w	r2, fp, r2
 8011338:	420a      	tst	r2, r1
 801133a:	d00a      	beq.n	8011352 <__gethex+0x1da>
 801133c:	455b      	cmp	r3, fp
 801133e:	dd06      	ble.n	801134e <__gethex+0x1d6>
 8011340:	f1a8 0102 	sub.w	r1, r8, #2
 8011344:	4620      	mov	r0, r4
 8011346:	f7fe fb9d 	bl	800fa84 <__any_on>
 801134a:	2800      	cmp	r0, #0
 801134c:	d138      	bne.n	80113c0 <__gethex+0x248>
 801134e:	f04f 0b02 	mov.w	fp, #2
 8011352:	4641      	mov	r1, r8
 8011354:	4620      	mov	r0, r4
 8011356:	f7ff fea7 	bl	80110a8 <rshift>
 801135a:	4446      	add	r6, r8
 801135c:	68bb      	ldr	r3, [r7, #8]
 801135e:	42b3      	cmp	r3, r6
 8011360:	da41      	bge.n	80113e6 <__gethex+0x26e>
 8011362:	4621      	mov	r1, r4
 8011364:	4648      	mov	r0, r9
 8011366:	f7fd ff41 	bl	800f1ec <_Bfree>
 801136a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801136c:	2300      	movs	r3, #0
 801136e:	6013      	str	r3, [r2, #0]
 8011370:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8011374:	e78a      	b.n	801128c <__gethex+0x114>
 8011376:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801137a:	2a2e      	cmp	r2, #46	; 0x2e
 801137c:	d014      	beq.n	80113a8 <__gethex+0x230>
 801137e:	2b20      	cmp	r3, #32
 8011380:	d106      	bne.n	8011390 <__gethex+0x218>
 8011382:	9b01      	ldr	r3, [sp, #4]
 8011384:	f843 bb04 	str.w	fp, [r3], #4
 8011388:	f04f 0b00 	mov.w	fp, #0
 801138c:	9301      	str	r3, [sp, #4]
 801138e:	465b      	mov	r3, fp
 8011390:	7828      	ldrb	r0, [r5, #0]
 8011392:	9303      	str	r3, [sp, #12]
 8011394:	f7ff feda 	bl	801114c <__hexdig_fun>
 8011398:	9b03      	ldr	r3, [sp, #12]
 801139a:	f000 000f 	and.w	r0, r0, #15
 801139e:	4098      	lsls	r0, r3
 80113a0:	ea4b 0b00 	orr.w	fp, fp, r0
 80113a4:	3304      	adds	r3, #4
 80113a6:	e7a1      	b.n	80112ec <__gethex+0x174>
 80113a8:	45a8      	cmp	r8, r5
 80113aa:	d8e8      	bhi.n	801137e <__gethex+0x206>
 80113ac:	2201      	movs	r2, #1
 80113ae:	4628      	mov	r0, r5
 80113b0:	9303      	str	r3, [sp, #12]
 80113b2:	f7ff fe19 	bl	8010fe8 <strncmp>
 80113b6:	4926      	ldr	r1, [pc, #152]	; (8011450 <__gethex+0x2d8>)
 80113b8:	9b03      	ldr	r3, [sp, #12]
 80113ba:	2800      	cmp	r0, #0
 80113bc:	d1df      	bne.n	801137e <__gethex+0x206>
 80113be:	e795      	b.n	80112ec <__gethex+0x174>
 80113c0:	f04f 0b03 	mov.w	fp, #3
 80113c4:	e7c5      	b.n	8011352 <__gethex+0x1da>
 80113c6:	da0b      	bge.n	80113e0 <__gethex+0x268>
 80113c8:	eba5 0800 	sub.w	r8, r5, r0
 80113cc:	4621      	mov	r1, r4
 80113ce:	4642      	mov	r2, r8
 80113d0:	4648      	mov	r0, r9
 80113d2:	f7fe f925 	bl	800f620 <__lshift>
 80113d6:	eba6 0608 	sub.w	r6, r6, r8
 80113da:	4604      	mov	r4, r0
 80113dc:	f100 0a14 	add.w	sl, r0, #20
 80113e0:	f04f 0b00 	mov.w	fp, #0
 80113e4:	e7ba      	b.n	801135c <__gethex+0x1e4>
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	42b3      	cmp	r3, r6
 80113ea:	dd73      	ble.n	80114d4 <__gethex+0x35c>
 80113ec:	1b9e      	subs	r6, r3, r6
 80113ee:	42b5      	cmp	r5, r6
 80113f0:	dc34      	bgt.n	801145c <__gethex+0x2e4>
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	2b02      	cmp	r3, #2
 80113f6:	d023      	beq.n	8011440 <__gethex+0x2c8>
 80113f8:	2b03      	cmp	r3, #3
 80113fa:	d025      	beq.n	8011448 <__gethex+0x2d0>
 80113fc:	2b01      	cmp	r3, #1
 80113fe:	d115      	bne.n	801142c <__gethex+0x2b4>
 8011400:	42b5      	cmp	r5, r6
 8011402:	d113      	bne.n	801142c <__gethex+0x2b4>
 8011404:	2d01      	cmp	r5, #1
 8011406:	d10b      	bne.n	8011420 <__gethex+0x2a8>
 8011408:	9a02      	ldr	r2, [sp, #8]
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	6013      	str	r3, [r2, #0]
 801140e:	2301      	movs	r3, #1
 8011410:	6123      	str	r3, [r4, #16]
 8011412:	f8ca 3000 	str.w	r3, [sl]
 8011416:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011418:	f04f 0862 	mov.w	r8, #98	; 0x62
 801141c:	601c      	str	r4, [r3, #0]
 801141e:	e735      	b.n	801128c <__gethex+0x114>
 8011420:	1e69      	subs	r1, r5, #1
 8011422:	4620      	mov	r0, r4
 8011424:	f7fe fb2e 	bl	800fa84 <__any_on>
 8011428:	2800      	cmp	r0, #0
 801142a:	d1ed      	bne.n	8011408 <__gethex+0x290>
 801142c:	4621      	mov	r1, r4
 801142e:	4648      	mov	r0, r9
 8011430:	f7fd fedc 	bl	800f1ec <_Bfree>
 8011434:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011436:	2300      	movs	r3, #0
 8011438:	6013      	str	r3, [r2, #0]
 801143a:	f04f 0850 	mov.w	r8, #80	; 0x50
 801143e:	e725      	b.n	801128c <__gethex+0x114>
 8011440:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011442:	2b00      	cmp	r3, #0
 8011444:	d1f2      	bne.n	801142c <__gethex+0x2b4>
 8011446:	e7df      	b.n	8011408 <__gethex+0x290>
 8011448:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801144a:	2b00      	cmp	r3, #0
 801144c:	d1dc      	bne.n	8011408 <__gethex+0x290>
 801144e:	e7ed      	b.n	801142c <__gethex+0x2b4>
 8011450:	08011d94 	.word	0x08011d94
 8011454:	08011c2a 	.word	0x08011c2a
 8011458:	08011e3d 	.word	0x08011e3d
 801145c:	f106 38ff 	add.w	r8, r6, #4294967295
 8011460:	f1bb 0f00 	cmp.w	fp, #0
 8011464:	d133      	bne.n	80114ce <__gethex+0x356>
 8011466:	f1b8 0f00 	cmp.w	r8, #0
 801146a:	d004      	beq.n	8011476 <__gethex+0x2fe>
 801146c:	4641      	mov	r1, r8
 801146e:	4620      	mov	r0, r4
 8011470:	f7fe fb08 	bl	800fa84 <__any_on>
 8011474:	4683      	mov	fp, r0
 8011476:	ea4f 1268 	mov.w	r2, r8, asr #5
 801147a:	2301      	movs	r3, #1
 801147c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011480:	f008 081f 	and.w	r8, r8, #31
 8011484:	fa03 f308 	lsl.w	r3, r3, r8
 8011488:	4213      	tst	r3, r2
 801148a:	4631      	mov	r1, r6
 801148c:	4620      	mov	r0, r4
 801148e:	bf18      	it	ne
 8011490:	f04b 0b02 	orrne.w	fp, fp, #2
 8011494:	1bad      	subs	r5, r5, r6
 8011496:	f7ff fe07 	bl	80110a8 <rshift>
 801149a:	687e      	ldr	r6, [r7, #4]
 801149c:	f04f 0802 	mov.w	r8, #2
 80114a0:	f1bb 0f00 	cmp.w	fp, #0
 80114a4:	d04a      	beq.n	801153c <__gethex+0x3c4>
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	2b02      	cmp	r3, #2
 80114aa:	d016      	beq.n	80114da <__gethex+0x362>
 80114ac:	2b03      	cmp	r3, #3
 80114ae:	d018      	beq.n	80114e2 <__gethex+0x36a>
 80114b0:	2b01      	cmp	r3, #1
 80114b2:	d109      	bne.n	80114c8 <__gethex+0x350>
 80114b4:	f01b 0f02 	tst.w	fp, #2
 80114b8:	d006      	beq.n	80114c8 <__gethex+0x350>
 80114ba:	f8da 3000 	ldr.w	r3, [sl]
 80114be:	ea4b 0b03 	orr.w	fp, fp, r3
 80114c2:	f01b 0f01 	tst.w	fp, #1
 80114c6:	d10f      	bne.n	80114e8 <__gethex+0x370>
 80114c8:	f048 0810 	orr.w	r8, r8, #16
 80114cc:	e036      	b.n	801153c <__gethex+0x3c4>
 80114ce:	f04f 0b01 	mov.w	fp, #1
 80114d2:	e7d0      	b.n	8011476 <__gethex+0x2fe>
 80114d4:	f04f 0801 	mov.w	r8, #1
 80114d8:	e7e2      	b.n	80114a0 <__gethex+0x328>
 80114da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80114dc:	f1c3 0301 	rsb	r3, r3, #1
 80114e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80114e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d0ef      	beq.n	80114c8 <__gethex+0x350>
 80114e8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80114ec:	f104 0214 	add.w	r2, r4, #20
 80114f0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80114f4:	9301      	str	r3, [sp, #4]
 80114f6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80114fa:	2300      	movs	r3, #0
 80114fc:	4694      	mov	ip, r2
 80114fe:	f852 1b04 	ldr.w	r1, [r2], #4
 8011502:	f1b1 3fff 	cmp.w	r1, #4294967295
 8011506:	d01e      	beq.n	8011546 <__gethex+0x3ce>
 8011508:	3101      	adds	r1, #1
 801150a:	f8cc 1000 	str.w	r1, [ip]
 801150e:	f1b8 0f02 	cmp.w	r8, #2
 8011512:	f104 0214 	add.w	r2, r4, #20
 8011516:	d13d      	bne.n	8011594 <__gethex+0x41c>
 8011518:	683b      	ldr	r3, [r7, #0]
 801151a:	3b01      	subs	r3, #1
 801151c:	42ab      	cmp	r3, r5
 801151e:	d10b      	bne.n	8011538 <__gethex+0x3c0>
 8011520:	1169      	asrs	r1, r5, #5
 8011522:	2301      	movs	r3, #1
 8011524:	f005 051f 	and.w	r5, r5, #31
 8011528:	fa03 f505 	lsl.w	r5, r3, r5
 801152c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011530:	421d      	tst	r5, r3
 8011532:	bf18      	it	ne
 8011534:	f04f 0801 	movne.w	r8, #1
 8011538:	f048 0820 	orr.w	r8, r8, #32
 801153c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801153e:	601c      	str	r4, [r3, #0]
 8011540:	9b02      	ldr	r3, [sp, #8]
 8011542:	601e      	str	r6, [r3, #0]
 8011544:	e6a2      	b.n	801128c <__gethex+0x114>
 8011546:	4290      	cmp	r0, r2
 8011548:	f842 3c04 	str.w	r3, [r2, #-4]
 801154c:	d8d6      	bhi.n	80114fc <__gethex+0x384>
 801154e:	68a2      	ldr	r2, [r4, #8]
 8011550:	4593      	cmp	fp, r2
 8011552:	db17      	blt.n	8011584 <__gethex+0x40c>
 8011554:	6861      	ldr	r1, [r4, #4]
 8011556:	4648      	mov	r0, r9
 8011558:	3101      	adds	r1, #1
 801155a:	f7fd fe07 	bl	800f16c <_Balloc>
 801155e:	4682      	mov	sl, r0
 8011560:	b918      	cbnz	r0, 801156a <__gethex+0x3f2>
 8011562:	4b1b      	ldr	r3, [pc, #108]	; (80115d0 <__gethex+0x458>)
 8011564:	4602      	mov	r2, r0
 8011566:	2184      	movs	r1, #132	; 0x84
 8011568:	e6b3      	b.n	80112d2 <__gethex+0x15a>
 801156a:	6922      	ldr	r2, [r4, #16]
 801156c:	3202      	adds	r2, #2
 801156e:	f104 010c 	add.w	r1, r4, #12
 8011572:	0092      	lsls	r2, r2, #2
 8011574:	300c      	adds	r0, #12
 8011576:	f7fc fe6a 	bl	800e24e <memcpy>
 801157a:	4621      	mov	r1, r4
 801157c:	4648      	mov	r0, r9
 801157e:	f7fd fe35 	bl	800f1ec <_Bfree>
 8011582:	4654      	mov	r4, sl
 8011584:	6922      	ldr	r2, [r4, #16]
 8011586:	1c51      	adds	r1, r2, #1
 8011588:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801158c:	6121      	str	r1, [r4, #16]
 801158e:	2101      	movs	r1, #1
 8011590:	6151      	str	r1, [r2, #20]
 8011592:	e7bc      	b.n	801150e <__gethex+0x396>
 8011594:	6921      	ldr	r1, [r4, #16]
 8011596:	4559      	cmp	r1, fp
 8011598:	dd0b      	ble.n	80115b2 <__gethex+0x43a>
 801159a:	2101      	movs	r1, #1
 801159c:	4620      	mov	r0, r4
 801159e:	f7ff fd83 	bl	80110a8 <rshift>
 80115a2:	68bb      	ldr	r3, [r7, #8]
 80115a4:	3601      	adds	r6, #1
 80115a6:	42b3      	cmp	r3, r6
 80115a8:	f6ff aedb 	blt.w	8011362 <__gethex+0x1ea>
 80115ac:	f04f 0801 	mov.w	r8, #1
 80115b0:	e7c2      	b.n	8011538 <__gethex+0x3c0>
 80115b2:	f015 051f 	ands.w	r5, r5, #31
 80115b6:	d0f9      	beq.n	80115ac <__gethex+0x434>
 80115b8:	9b01      	ldr	r3, [sp, #4]
 80115ba:	441a      	add	r2, r3
 80115bc:	f1c5 0520 	rsb	r5, r5, #32
 80115c0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80115c4:	f7fd fec4 	bl	800f350 <__hi0bits>
 80115c8:	42a8      	cmp	r0, r5
 80115ca:	dbe6      	blt.n	801159a <__gethex+0x422>
 80115cc:	e7ee      	b.n	80115ac <__gethex+0x434>
 80115ce:	bf00      	nop
 80115d0:	08011c2a 	.word	0x08011c2a

080115d4 <L_shift>:
 80115d4:	f1c2 0208 	rsb	r2, r2, #8
 80115d8:	0092      	lsls	r2, r2, #2
 80115da:	b570      	push	{r4, r5, r6, lr}
 80115dc:	f1c2 0620 	rsb	r6, r2, #32
 80115e0:	6843      	ldr	r3, [r0, #4]
 80115e2:	6804      	ldr	r4, [r0, #0]
 80115e4:	fa03 f506 	lsl.w	r5, r3, r6
 80115e8:	432c      	orrs	r4, r5
 80115ea:	40d3      	lsrs	r3, r2
 80115ec:	6004      	str	r4, [r0, #0]
 80115ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80115f2:	4288      	cmp	r0, r1
 80115f4:	d3f4      	bcc.n	80115e0 <L_shift+0xc>
 80115f6:	bd70      	pop	{r4, r5, r6, pc}

080115f8 <__match>:
 80115f8:	b530      	push	{r4, r5, lr}
 80115fa:	6803      	ldr	r3, [r0, #0]
 80115fc:	3301      	adds	r3, #1
 80115fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011602:	b914      	cbnz	r4, 801160a <__match+0x12>
 8011604:	6003      	str	r3, [r0, #0]
 8011606:	2001      	movs	r0, #1
 8011608:	bd30      	pop	{r4, r5, pc}
 801160a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801160e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011612:	2d19      	cmp	r5, #25
 8011614:	bf98      	it	ls
 8011616:	3220      	addls	r2, #32
 8011618:	42a2      	cmp	r2, r4
 801161a:	d0f0      	beq.n	80115fe <__match+0x6>
 801161c:	2000      	movs	r0, #0
 801161e:	e7f3      	b.n	8011608 <__match+0x10>

08011620 <__hexnan>:
 8011620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011624:	680b      	ldr	r3, [r1, #0]
 8011626:	6801      	ldr	r1, [r0, #0]
 8011628:	115e      	asrs	r6, r3, #5
 801162a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801162e:	f013 031f 	ands.w	r3, r3, #31
 8011632:	b087      	sub	sp, #28
 8011634:	bf18      	it	ne
 8011636:	3604      	addne	r6, #4
 8011638:	2500      	movs	r5, #0
 801163a:	1f37      	subs	r7, r6, #4
 801163c:	4682      	mov	sl, r0
 801163e:	4690      	mov	r8, r2
 8011640:	9301      	str	r3, [sp, #4]
 8011642:	f846 5c04 	str.w	r5, [r6, #-4]
 8011646:	46b9      	mov	r9, r7
 8011648:	463c      	mov	r4, r7
 801164a:	9502      	str	r5, [sp, #8]
 801164c:	46ab      	mov	fp, r5
 801164e:	784a      	ldrb	r2, [r1, #1]
 8011650:	1c4b      	adds	r3, r1, #1
 8011652:	9303      	str	r3, [sp, #12]
 8011654:	b342      	cbz	r2, 80116a8 <__hexnan+0x88>
 8011656:	4610      	mov	r0, r2
 8011658:	9105      	str	r1, [sp, #20]
 801165a:	9204      	str	r2, [sp, #16]
 801165c:	f7ff fd76 	bl	801114c <__hexdig_fun>
 8011660:	2800      	cmp	r0, #0
 8011662:	d14f      	bne.n	8011704 <__hexnan+0xe4>
 8011664:	9a04      	ldr	r2, [sp, #16]
 8011666:	9905      	ldr	r1, [sp, #20]
 8011668:	2a20      	cmp	r2, #32
 801166a:	d818      	bhi.n	801169e <__hexnan+0x7e>
 801166c:	9b02      	ldr	r3, [sp, #8]
 801166e:	459b      	cmp	fp, r3
 8011670:	dd13      	ble.n	801169a <__hexnan+0x7a>
 8011672:	454c      	cmp	r4, r9
 8011674:	d206      	bcs.n	8011684 <__hexnan+0x64>
 8011676:	2d07      	cmp	r5, #7
 8011678:	dc04      	bgt.n	8011684 <__hexnan+0x64>
 801167a:	462a      	mov	r2, r5
 801167c:	4649      	mov	r1, r9
 801167e:	4620      	mov	r0, r4
 8011680:	f7ff ffa8 	bl	80115d4 <L_shift>
 8011684:	4544      	cmp	r4, r8
 8011686:	d950      	bls.n	801172a <__hexnan+0x10a>
 8011688:	2300      	movs	r3, #0
 801168a:	f1a4 0904 	sub.w	r9, r4, #4
 801168e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011692:	f8cd b008 	str.w	fp, [sp, #8]
 8011696:	464c      	mov	r4, r9
 8011698:	461d      	mov	r5, r3
 801169a:	9903      	ldr	r1, [sp, #12]
 801169c:	e7d7      	b.n	801164e <__hexnan+0x2e>
 801169e:	2a29      	cmp	r2, #41	; 0x29
 80116a0:	d155      	bne.n	801174e <__hexnan+0x12e>
 80116a2:	3102      	adds	r1, #2
 80116a4:	f8ca 1000 	str.w	r1, [sl]
 80116a8:	f1bb 0f00 	cmp.w	fp, #0
 80116ac:	d04f      	beq.n	801174e <__hexnan+0x12e>
 80116ae:	454c      	cmp	r4, r9
 80116b0:	d206      	bcs.n	80116c0 <__hexnan+0xa0>
 80116b2:	2d07      	cmp	r5, #7
 80116b4:	dc04      	bgt.n	80116c0 <__hexnan+0xa0>
 80116b6:	462a      	mov	r2, r5
 80116b8:	4649      	mov	r1, r9
 80116ba:	4620      	mov	r0, r4
 80116bc:	f7ff ff8a 	bl	80115d4 <L_shift>
 80116c0:	4544      	cmp	r4, r8
 80116c2:	d934      	bls.n	801172e <__hexnan+0x10e>
 80116c4:	f1a8 0204 	sub.w	r2, r8, #4
 80116c8:	4623      	mov	r3, r4
 80116ca:	f853 1b04 	ldr.w	r1, [r3], #4
 80116ce:	f842 1f04 	str.w	r1, [r2, #4]!
 80116d2:	429f      	cmp	r7, r3
 80116d4:	d2f9      	bcs.n	80116ca <__hexnan+0xaa>
 80116d6:	1b3b      	subs	r3, r7, r4
 80116d8:	f023 0303 	bic.w	r3, r3, #3
 80116dc:	3304      	adds	r3, #4
 80116de:	3e03      	subs	r6, #3
 80116e0:	3401      	adds	r4, #1
 80116e2:	42a6      	cmp	r6, r4
 80116e4:	bf38      	it	cc
 80116e6:	2304      	movcc	r3, #4
 80116e8:	4443      	add	r3, r8
 80116ea:	2200      	movs	r2, #0
 80116ec:	f843 2b04 	str.w	r2, [r3], #4
 80116f0:	429f      	cmp	r7, r3
 80116f2:	d2fb      	bcs.n	80116ec <__hexnan+0xcc>
 80116f4:	683b      	ldr	r3, [r7, #0]
 80116f6:	b91b      	cbnz	r3, 8011700 <__hexnan+0xe0>
 80116f8:	4547      	cmp	r7, r8
 80116fa:	d126      	bne.n	801174a <__hexnan+0x12a>
 80116fc:	2301      	movs	r3, #1
 80116fe:	603b      	str	r3, [r7, #0]
 8011700:	2005      	movs	r0, #5
 8011702:	e025      	b.n	8011750 <__hexnan+0x130>
 8011704:	3501      	adds	r5, #1
 8011706:	2d08      	cmp	r5, #8
 8011708:	f10b 0b01 	add.w	fp, fp, #1
 801170c:	dd06      	ble.n	801171c <__hexnan+0xfc>
 801170e:	4544      	cmp	r4, r8
 8011710:	d9c3      	bls.n	801169a <__hexnan+0x7a>
 8011712:	2300      	movs	r3, #0
 8011714:	f844 3c04 	str.w	r3, [r4, #-4]
 8011718:	2501      	movs	r5, #1
 801171a:	3c04      	subs	r4, #4
 801171c:	6822      	ldr	r2, [r4, #0]
 801171e:	f000 000f 	and.w	r0, r0, #15
 8011722:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011726:	6020      	str	r0, [r4, #0]
 8011728:	e7b7      	b.n	801169a <__hexnan+0x7a>
 801172a:	2508      	movs	r5, #8
 801172c:	e7b5      	b.n	801169a <__hexnan+0x7a>
 801172e:	9b01      	ldr	r3, [sp, #4]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d0df      	beq.n	80116f4 <__hexnan+0xd4>
 8011734:	f1c3 0320 	rsb	r3, r3, #32
 8011738:	f04f 32ff 	mov.w	r2, #4294967295
 801173c:	40da      	lsrs	r2, r3
 801173e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011742:	4013      	ands	r3, r2
 8011744:	f846 3c04 	str.w	r3, [r6, #-4]
 8011748:	e7d4      	b.n	80116f4 <__hexnan+0xd4>
 801174a:	3f04      	subs	r7, #4
 801174c:	e7d2      	b.n	80116f4 <__hexnan+0xd4>
 801174e:	2004      	movs	r0, #4
 8011750:	b007      	add	sp, #28
 8011752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011756 <__ascii_mbtowc>:
 8011756:	b082      	sub	sp, #8
 8011758:	b901      	cbnz	r1, 801175c <__ascii_mbtowc+0x6>
 801175a:	a901      	add	r1, sp, #4
 801175c:	b142      	cbz	r2, 8011770 <__ascii_mbtowc+0x1a>
 801175e:	b14b      	cbz	r3, 8011774 <__ascii_mbtowc+0x1e>
 8011760:	7813      	ldrb	r3, [r2, #0]
 8011762:	600b      	str	r3, [r1, #0]
 8011764:	7812      	ldrb	r2, [r2, #0]
 8011766:	1e10      	subs	r0, r2, #0
 8011768:	bf18      	it	ne
 801176a:	2001      	movne	r0, #1
 801176c:	b002      	add	sp, #8
 801176e:	4770      	bx	lr
 8011770:	4610      	mov	r0, r2
 8011772:	e7fb      	b.n	801176c <__ascii_mbtowc+0x16>
 8011774:	f06f 0001 	mvn.w	r0, #1
 8011778:	e7f8      	b.n	801176c <__ascii_mbtowc+0x16>

0801177a <_realloc_r>:
 801177a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801177e:	4680      	mov	r8, r0
 8011780:	4614      	mov	r4, r2
 8011782:	460e      	mov	r6, r1
 8011784:	b921      	cbnz	r1, 8011790 <_realloc_r+0x16>
 8011786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801178a:	4611      	mov	r1, r2
 801178c:	f7fd bc62 	b.w	800f054 <_malloc_r>
 8011790:	b92a      	cbnz	r2, 801179e <_realloc_r+0x24>
 8011792:	f7fd fbeb 	bl	800ef6c <_free_r>
 8011796:	4625      	mov	r5, r4
 8011798:	4628      	mov	r0, r5
 801179a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801179e:	f000 f8b4 	bl	801190a <_malloc_usable_size_r>
 80117a2:	4284      	cmp	r4, r0
 80117a4:	4607      	mov	r7, r0
 80117a6:	d802      	bhi.n	80117ae <_realloc_r+0x34>
 80117a8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80117ac:	d812      	bhi.n	80117d4 <_realloc_r+0x5a>
 80117ae:	4621      	mov	r1, r4
 80117b0:	4640      	mov	r0, r8
 80117b2:	f7fd fc4f 	bl	800f054 <_malloc_r>
 80117b6:	4605      	mov	r5, r0
 80117b8:	2800      	cmp	r0, #0
 80117ba:	d0ed      	beq.n	8011798 <_realloc_r+0x1e>
 80117bc:	42bc      	cmp	r4, r7
 80117be:	4622      	mov	r2, r4
 80117c0:	4631      	mov	r1, r6
 80117c2:	bf28      	it	cs
 80117c4:	463a      	movcs	r2, r7
 80117c6:	f7fc fd42 	bl	800e24e <memcpy>
 80117ca:	4631      	mov	r1, r6
 80117cc:	4640      	mov	r0, r8
 80117ce:	f7fd fbcd 	bl	800ef6c <_free_r>
 80117d2:	e7e1      	b.n	8011798 <_realloc_r+0x1e>
 80117d4:	4635      	mov	r5, r6
 80117d6:	e7df      	b.n	8011798 <_realloc_r+0x1e>

080117d8 <__ascii_wctomb>:
 80117d8:	b149      	cbz	r1, 80117ee <__ascii_wctomb+0x16>
 80117da:	2aff      	cmp	r2, #255	; 0xff
 80117dc:	bf85      	ittet	hi
 80117de:	238a      	movhi	r3, #138	; 0x8a
 80117e0:	6003      	strhi	r3, [r0, #0]
 80117e2:	700a      	strbls	r2, [r1, #0]
 80117e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80117e8:	bf98      	it	ls
 80117ea:	2001      	movls	r0, #1
 80117ec:	4770      	bx	lr
 80117ee:	4608      	mov	r0, r1
 80117f0:	4770      	bx	lr

080117f2 <__swhatbuf_r>:
 80117f2:	b570      	push	{r4, r5, r6, lr}
 80117f4:	460c      	mov	r4, r1
 80117f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117fa:	2900      	cmp	r1, #0
 80117fc:	b096      	sub	sp, #88	; 0x58
 80117fe:	4615      	mov	r5, r2
 8011800:	461e      	mov	r6, r3
 8011802:	da0d      	bge.n	8011820 <__swhatbuf_r+0x2e>
 8011804:	89a3      	ldrh	r3, [r4, #12]
 8011806:	f013 0f80 	tst.w	r3, #128	; 0x80
 801180a:	f04f 0100 	mov.w	r1, #0
 801180e:	bf0c      	ite	eq
 8011810:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011814:	2340      	movne	r3, #64	; 0x40
 8011816:	2000      	movs	r0, #0
 8011818:	6031      	str	r1, [r6, #0]
 801181a:	602b      	str	r3, [r5, #0]
 801181c:	b016      	add	sp, #88	; 0x58
 801181e:	bd70      	pop	{r4, r5, r6, pc}
 8011820:	466a      	mov	r2, sp
 8011822:	f000 f849 	bl	80118b8 <_fstat_r>
 8011826:	2800      	cmp	r0, #0
 8011828:	dbec      	blt.n	8011804 <__swhatbuf_r+0x12>
 801182a:	9901      	ldr	r1, [sp, #4]
 801182c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011830:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011834:	4259      	negs	r1, r3
 8011836:	4159      	adcs	r1, r3
 8011838:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801183c:	e7eb      	b.n	8011816 <__swhatbuf_r+0x24>

0801183e <__smakebuf_r>:
 801183e:	898b      	ldrh	r3, [r1, #12]
 8011840:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011842:	079d      	lsls	r5, r3, #30
 8011844:	4606      	mov	r6, r0
 8011846:	460c      	mov	r4, r1
 8011848:	d507      	bpl.n	801185a <__smakebuf_r+0x1c>
 801184a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801184e:	6023      	str	r3, [r4, #0]
 8011850:	6123      	str	r3, [r4, #16]
 8011852:	2301      	movs	r3, #1
 8011854:	6163      	str	r3, [r4, #20]
 8011856:	b002      	add	sp, #8
 8011858:	bd70      	pop	{r4, r5, r6, pc}
 801185a:	ab01      	add	r3, sp, #4
 801185c:	466a      	mov	r2, sp
 801185e:	f7ff ffc8 	bl	80117f2 <__swhatbuf_r>
 8011862:	9900      	ldr	r1, [sp, #0]
 8011864:	4605      	mov	r5, r0
 8011866:	4630      	mov	r0, r6
 8011868:	f7fd fbf4 	bl	800f054 <_malloc_r>
 801186c:	b948      	cbnz	r0, 8011882 <__smakebuf_r+0x44>
 801186e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011872:	059a      	lsls	r2, r3, #22
 8011874:	d4ef      	bmi.n	8011856 <__smakebuf_r+0x18>
 8011876:	f023 0303 	bic.w	r3, r3, #3
 801187a:	f043 0302 	orr.w	r3, r3, #2
 801187e:	81a3      	strh	r3, [r4, #12]
 8011880:	e7e3      	b.n	801184a <__smakebuf_r+0xc>
 8011882:	89a3      	ldrh	r3, [r4, #12]
 8011884:	6020      	str	r0, [r4, #0]
 8011886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801188a:	81a3      	strh	r3, [r4, #12]
 801188c:	9b00      	ldr	r3, [sp, #0]
 801188e:	6163      	str	r3, [r4, #20]
 8011890:	9b01      	ldr	r3, [sp, #4]
 8011892:	6120      	str	r0, [r4, #16]
 8011894:	b15b      	cbz	r3, 80118ae <__smakebuf_r+0x70>
 8011896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801189a:	4630      	mov	r0, r6
 801189c:	f000 f81e 	bl	80118dc <_isatty_r>
 80118a0:	b128      	cbz	r0, 80118ae <__smakebuf_r+0x70>
 80118a2:	89a3      	ldrh	r3, [r4, #12]
 80118a4:	f023 0303 	bic.w	r3, r3, #3
 80118a8:	f043 0301 	orr.w	r3, r3, #1
 80118ac:	81a3      	strh	r3, [r4, #12]
 80118ae:	89a3      	ldrh	r3, [r4, #12]
 80118b0:	431d      	orrs	r5, r3
 80118b2:	81a5      	strh	r5, [r4, #12]
 80118b4:	e7cf      	b.n	8011856 <__smakebuf_r+0x18>
	...

080118b8 <_fstat_r>:
 80118b8:	b538      	push	{r3, r4, r5, lr}
 80118ba:	4d07      	ldr	r5, [pc, #28]	; (80118d8 <_fstat_r+0x20>)
 80118bc:	2300      	movs	r3, #0
 80118be:	4604      	mov	r4, r0
 80118c0:	4608      	mov	r0, r1
 80118c2:	4611      	mov	r1, r2
 80118c4:	602b      	str	r3, [r5, #0]
 80118c6:	f7f0 fd3a 	bl	800233e <_fstat>
 80118ca:	1c43      	adds	r3, r0, #1
 80118cc:	d102      	bne.n	80118d4 <_fstat_r+0x1c>
 80118ce:	682b      	ldr	r3, [r5, #0]
 80118d0:	b103      	cbz	r3, 80118d4 <_fstat_r+0x1c>
 80118d2:	6023      	str	r3, [r4, #0]
 80118d4:	bd38      	pop	{r3, r4, r5, pc}
 80118d6:	bf00      	nop
 80118d8:	20002274 	.word	0x20002274

080118dc <_isatty_r>:
 80118dc:	b538      	push	{r3, r4, r5, lr}
 80118de:	4d06      	ldr	r5, [pc, #24]	; (80118f8 <_isatty_r+0x1c>)
 80118e0:	2300      	movs	r3, #0
 80118e2:	4604      	mov	r4, r0
 80118e4:	4608      	mov	r0, r1
 80118e6:	602b      	str	r3, [r5, #0]
 80118e8:	f7f0 fd39 	bl	800235e <_isatty>
 80118ec:	1c43      	adds	r3, r0, #1
 80118ee:	d102      	bne.n	80118f6 <_isatty_r+0x1a>
 80118f0:	682b      	ldr	r3, [r5, #0]
 80118f2:	b103      	cbz	r3, 80118f6 <_isatty_r+0x1a>
 80118f4:	6023      	str	r3, [r4, #0]
 80118f6:	bd38      	pop	{r3, r4, r5, pc}
 80118f8:	20002274 	.word	0x20002274

080118fc <abort>:
 80118fc:	b508      	push	{r3, lr}
 80118fe:	2006      	movs	r0, #6
 8011900:	f000 f834 	bl	801196c <raise>
 8011904:	2001      	movs	r0, #1
 8011906:	f7f0 fccb 	bl	80022a0 <_exit>

0801190a <_malloc_usable_size_r>:
 801190a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801190e:	1f18      	subs	r0, r3, #4
 8011910:	2b00      	cmp	r3, #0
 8011912:	bfbc      	itt	lt
 8011914:	580b      	ldrlt	r3, [r1, r0]
 8011916:	18c0      	addlt	r0, r0, r3
 8011918:	4770      	bx	lr

0801191a <_raise_r>:
 801191a:	291f      	cmp	r1, #31
 801191c:	b538      	push	{r3, r4, r5, lr}
 801191e:	4604      	mov	r4, r0
 8011920:	460d      	mov	r5, r1
 8011922:	d904      	bls.n	801192e <_raise_r+0x14>
 8011924:	2316      	movs	r3, #22
 8011926:	6003      	str	r3, [r0, #0]
 8011928:	f04f 30ff 	mov.w	r0, #4294967295
 801192c:	bd38      	pop	{r3, r4, r5, pc}
 801192e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011930:	b112      	cbz	r2, 8011938 <_raise_r+0x1e>
 8011932:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011936:	b94b      	cbnz	r3, 801194c <_raise_r+0x32>
 8011938:	4620      	mov	r0, r4
 801193a:	f000 f831 	bl	80119a0 <_getpid_r>
 801193e:	462a      	mov	r2, r5
 8011940:	4601      	mov	r1, r0
 8011942:	4620      	mov	r0, r4
 8011944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011948:	f000 b818 	b.w	801197c <_kill_r>
 801194c:	2b01      	cmp	r3, #1
 801194e:	d00a      	beq.n	8011966 <_raise_r+0x4c>
 8011950:	1c59      	adds	r1, r3, #1
 8011952:	d103      	bne.n	801195c <_raise_r+0x42>
 8011954:	2316      	movs	r3, #22
 8011956:	6003      	str	r3, [r0, #0]
 8011958:	2001      	movs	r0, #1
 801195a:	e7e7      	b.n	801192c <_raise_r+0x12>
 801195c:	2400      	movs	r4, #0
 801195e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011962:	4628      	mov	r0, r5
 8011964:	4798      	blx	r3
 8011966:	2000      	movs	r0, #0
 8011968:	e7e0      	b.n	801192c <_raise_r+0x12>
	...

0801196c <raise>:
 801196c:	4b02      	ldr	r3, [pc, #8]	; (8011978 <raise+0xc>)
 801196e:	4601      	mov	r1, r0
 8011970:	6818      	ldr	r0, [r3, #0]
 8011972:	f7ff bfd2 	b.w	801191a <_raise_r>
 8011976:	bf00      	nop
 8011978:	200001dc 	.word	0x200001dc

0801197c <_kill_r>:
 801197c:	b538      	push	{r3, r4, r5, lr}
 801197e:	4d07      	ldr	r5, [pc, #28]	; (801199c <_kill_r+0x20>)
 8011980:	2300      	movs	r3, #0
 8011982:	4604      	mov	r4, r0
 8011984:	4608      	mov	r0, r1
 8011986:	4611      	mov	r1, r2
 8011988:	602b      	str	r3, [r5, #0]
 801198a:	f7f0 fc79 	bl	8002280 <_kill>
 801198e:	1c43      	adds	r3, r0, #1
 8011990:	d102      	bne.n	8011998 <_kill_r+0x1c>
 8011992:	682b      	ldr	r3, [r5, #0]
 8011994:	b103      	cbz	r3, 8011998 <_kill_r+0x1c>
 8011996:	6023      	str	r3, [r4, #0]
 8011998:	bd38      	pop	{r3, r4, r5, pc}
 801199a:	bf00      	nop
 801199c:	20002274 	.word	0x20002274

080119a0 <_getpid_r>:
 80119a0:	f7f0 bc66 	b.w	8002270 <_getpid>

080119a4 <_init>:
 80119a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119a6:	bf00      	nop
 80119a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119aa:	bc08      	pop	{r3}
 80119ac:	469e      	mov	lr, r3
 80119ae:	4770      	bx	lr

080119b0 <_fini>:
 80119b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119b2:	bf00      	nop
 80119b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119b6:	bc08      	pop	{r3}
 80119b8:	469e      	mov	lr, r3
 80119ba:	4770      	bx	lr
