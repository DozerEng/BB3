/**
 * tmc2209.h
 *
 *  Author: Michael Pillon
 *
 *      UART control of TMC2209 stepper motor drivers
 *
 *	References:
 *		https://mm.digikey.com/Volume0/opasdata/d220001/medias/docus/696/TMC2209_Rev.1.08.pdf
 *
 */


#ifndef INC_TMC2209_H_
#define INC_TMC2209_H_

#include "stm32g4xx_hal.h"
#include "usbd_cdc_if.h"

#include "stdint.h"
//#include "stdbool.h"
//#include "ctype.h"
//#include "string.h"


/**
 * 64-bit Write Access Datagram Structure
 * - Each byte is LSB..MSB
 * - Read is an identical 32-bit datagram with no data bits
 * - The read response is identical to the write datagram addressed to master address 0xFF
 *
 *  0xA_   _ _   _ _   _ _ _ _ _ _ _ _   _ _
 *
 * 	Sync + reserved 1 0 1 0 X X X X
 * 	8 bit slave address 0..3
 * 	7 bit register address + RW bit
 * 	32 bit data
 * 	8 bit CRC
 */

#define TMC2209_SYNC_BYTE	0b00000101

#define TMC2209_ADDR_0 		0b00000000
#define TMC2209_ADDR_1 		0b00000001
#define TMC2209_ADDR_2 		0b00000010
#define TMC2209_ADDR_3 		0b00000011

#define TMC2209_RW_READ 	0b00000000
#define TMC2209_RW_WRITE    0b10000000


/**
 * General Configuration Registers
 * 0x00..0x0F
 */
// GCONF
#define TMC2209_GCONF_ADDR			0x00
#define TMC2209_I_scale_analog 		0x00000001 // 0: internal reference from 5VOUT 1: VREF
#define TMC2209_internal_rsense 	0x00000002 // 0: external sense resistors 1: internal
#define TMC2209_en_SpreadCycle 		0x00000004 // 0: Stealthchop	1: SpreadCycle
#define TMC2209_shaft				0x00000008 // 1: Inverse motor direction
#define TMC2209_index_otpw 			0x00000010 // 0: INDEX shows the first microstep position of sequencer
#define TMC2209_index_step 			0x00000020 // 1: INDEX output shows pulse each step
#define TMC2209_pdn_disable 		0x00000040 // 1: Disable PDN function, use this for UART
#define TMC2209_mstep_reg_select	0x00000080 // 0: Ms1, Ms2	1: MRES register
#define TMC2209_multistep_filt		0x00000100 // Filtering > 750Hz
#define TMC2209_test_mode			0x00000200 // 0 for normal operation, don't be a hero

//GSTAT
#define TMC2209_GSTAT_ADDR			0x01
#define TMC2209_GSTAT_RESET			0x00000007	// Write to reset status registers
#define TMC2209_GSTAT_reset			0x00000001	// Reset indicator register
#define TMC2209_GSTAT_drv_err		0x00000002	// Overtemperature and short circuit detection
#define TMC2209_GSTAT_uv_cp			0x00000004	// Undervolta

// IFCNT
#define TMC2209_IFCNT_ADDR			0x02	// 0 - 255 Counts UART write accesses
#define TMC2209_IFCNT_DATA			0b00000000000000000000000011111111

// SLAVECONF
#define TMC2209_SLAVECONF_ADDR		0x03	// delay for read access, time until reply is sent
#define TMC2209_SENDDELAY_8			0b00000000000000000000000000000011 	// 8 bit times
#define TMC2209_SENDDELAY_3x8		0b00000000000000000000000000001100	// 3x8 bit times
#define TMC2209_SENDDELAY_5x8		0b00000000000000000000000000110000	// 5x8 bit times
#define TMC2209_SENDDELAY_7x8		0b00000000000000000000000011000000	// 7x8 bit times
#define TMC2209_SENDDELAY_9x8		0b00000000000000000000001100000000	// 9x8 bit times
#define TMC2209_SENDDELAY_11x8		0b00000000000000000000110000000000	// 11x8 bit times
#define TMC2209_SENDDELAY_13x8		0b00000000000000000011000000000000	// 13x8 bit times
#define TMC2209_SENDDELAY_15x8		0b00000000000000001100000000000000	// 15x8 bit times

// OTP_PROG
#define TMC2209_OTP_PROG_ADDR		0x04
#define TMC2209_OTPBIT				0b00000000000000000000000000000111
#define TMC2209_OTPBYTE				0b00000000000000000000000000110000
#define TMC2209_OTPMAGIC			0b00000000000000001111111100000000

// OTP_READ
#define TMC2209_OTP_READ_ADDR		0x05

#define TMC2209_OTP_READ_OTP0		0b00000000000000000000000011111111
#define TMC2209_OTP_READ_OTP1		0b00000000000000001111111100000000
#define TMC2209_OTP_READ_OTP2		0b00000000111111110000000000000000

#define TMC2209_OTP_READ_otp2_7		0b00000000100000000000000000000000	// otp_en_spreadcycle
#define TMC2209_OTP_READ_otp2_6		0b00000000010000000000000000000000	// OTP_IHOLD
#define TMC2209_OTP_READ_otp2_5		0b00000000001000000000000000000000	// OTP_IHOLD
#define TMC2209_OTP_READ_otp2_4		0b00000000000100000000000000000000	// OTP_IHOLDELAY
#define TMC2209_OTP_READ_otp2_3		0b00000000000010000000000000000000	// OTP_IHOLDELAY
#define TMC2209_OTP_READ_otp2_2		0b00000000000001000000000000000000	// otp_PWM_FREQ
#define TMC2209_OTP_READ_otp2_1		0b00000000000000100000000000000000	// otp_PWM_REG
#define TMC2209_OTP_READ_otp2_0		0b00000000000000010000000000000000	// otp_PWM_OFS / OTP_CHOPCONF.8
#define TMC2209_OTP_READ_otp1_7		0b00000000000000001000000000000000	// otp_TPWMTHRS / OTP_CHOPCONF.7
#define TMC2209_OTP_READ_otp1_6		0b00000000000000000100000000000000	// OTP_CHOPCONF.6
#define TMC2209_OTP_READ_otp1_5		0b00000000000000000010000000000000	// OTP_CHOPCONF.5
#define TMC2209_OTP_READ_otp1_4		0b00000000000000000001000000000000	// otp_pwm_autograd / OTP_CHOPCONF.4
#define TMC2209_OTP_READ_otp1_3		0b00000000000000000000100000000000	// OTP_PWM_GRAD.3
#define TMC2209_OTP_READ_otp1_2		0b00000000000000000000010000000000	// OTP_PWM_GRAD.2
#define TMC2209_OTP_READ_otp1_1		0b00000000000000000000001000000000	// OTP_PWM_GRAD.1
#define TMC2209_OTP_READ_otp1_0		0b00000000000000000000000100000000	// OTP_PWM_GRAD.0
#define TMC2209_OTP_READ_otp0_7		0b00000000000000000000000010000000	// otp_TBL
#define TMC2209_OTP_READ_otp0_6		0b00000000000000000000000001000000	// otp_internalRsense
#define TMC2209_OTP_READ_otp0_5		0b00000000000000000000000000100000	// otp_OTTRIM
#define TMC2209_OTP_READ_otp0_4		0b00000000000000000000000000010000	// OTP_FCLKTRIM.4
#define TMC2209_OTP_READ_otp0_3		0b00000000000000000000000000001000	// OTP_FCLKTRIM.3
#define TMC2209_OTP_READ_otp0_2		0b00000000000000000000000000000100	// OTP_FCLKTRIM.2
#define TMC2209_OTP_READ_otp0_1		0b00000000000000000000000000000010	// OTP_FCLKTRIM.1
#define TMC2209_OTP_READ_otp0_0		0b00000000000000000000000000000001	// OTP_FCLKTRIM.0



// IOIN
#define TMC2209_IOIN_ADDR			0x06	// Read the state of all input pins
#define TMC2209_IOIN_ENN			0b00000000000000000000000000000001
#define TMC2209_IOIN_MS1			0b00000000000000000000000000000100
#define TMC2209_IOIN_MS2			0b00000000000000000000000000001000
#define TMC2209_IOIN_DIAG			0b00000000000000000000000000010000
#define TMC2209_IOIN_PDN_UART		0b00000000000000000000000001000000
#define TMC2209_IOIN_STEP			0b00000000000000000000000010000000
#define TMC2209_IOIN_SPREAD_EN		0b00000000000000000000000100000000
#define TMC2209_IOIN_DIR			0b00000000000000000000001000000000
#define TMC2209_IOIN_VERSION		0b11111111000000000000000000000000

// FACTORY_CONF
#define TMC2209_FACTORY_CONF_ADDR	0x07
#define TMC2209_FCLKTRIM			0b00000000000000000000000000011111 // 0..31 ~ 0..12MHz
#define TMC2209_OTTRIM				0b00000000000000000000001100000000

/**
 * Velocity Dependent Driver Feature Control Register Set
 * 0x10..0x1F
 */
// IHOLD_IRUN
#define TMC2209_IHOLD_IRUN_ADDR		0x10 	// Driver current control
#define TMC2209_IHOLD				0b00000000000000000000000000011111 // 0=1/32 .. 31=32/32 , 0 = Free wheel / passive braking
#define TMC2209_IRUN				0b00000000000000000001111100000000 // 0=1/32 .. 31=32/32 , 16/32 is ideal for microstep performance
#define TMC2209_IHOLDDELAY			0b00000000000011110000000000000000 // 0=Instant power down, 1..15 delay in multiple of 2^18 clocks

// TPOWERDOWN
#define TMC2209_TPOWERDOWN_ADDR		0x11	// Delay from standstill to current power down
#define TMC2209_TPOWERDOWN			0b00000000000000000000000011111111	// 0…((2^8)-1) * 2^18 tCLK ~ 0 to 5.6 seconds

/*
 *  TMC2209_TPWMTHRS_TIME > TMC2209_TSTEP_TIME = SpreadCycle
 * 	TMC2209_TPWMTHRS_TIME =< TMC2209_TSTEP_TIME = StealthChop
 */
#define TMC2209_TSTEP_ADDR			0x12 	// Read actual measured time between two 1/256 microsteps
#define TMC2209_TSTEP				0b00000000000111111111111111111111	// 0..(2^20)-1

// TPWMTHRS
#define TMC2209_TPWMTHRS_ADDR		0x13	// Set upper velocity for StealthChop voltage PWM mode
#define TMC2209_TPWMTHRS			0b00000000000111111111111111111111	// 0..(2^20)-1

// VACTUAL
#define TMC2209_VACTUAL_ADDR		0x22	// 0: Respond to step input, else use VACTUAL for speed control
#define TMC2209_VACTUAL				0b00000001111111111111111111111111	// +/- (2^23)-1 [usteps/t]
//#define TMC2209_VACTUAL				0x01FFFFFF
#define TMC2209_VACTUAL_MAX_P		33554431 // in decimal
#define TMC2209_VACTUAL_ZERO		0
#define TMC2209_VACTUAL_MAX_N		0

/**
 * Stallguard control registers
 * 0x14, 0x40…0x42
 */
// TCOOLTHRS
#define TMC2209_TCOOLTHRS_ADDR		0x14
#define TMC2209_TCOOLTHRS			0b00000000000011111111111111111111

// SGTHRS
#define TMC2209_SGTHRS_ADDR			0x40
#define TMC2209_SGTHRS				0b00000000000000000000000011111111

// SG_RESULT
#define TMC2209_SG_RESULT_ADDR		0x41
#define TMC2209_SG_RESULT			0b00000000000000000000001111111111

// COOLCONF
#define TMC2209_COOLCONF_ADDR		0x42
#define TMC2209_COOLCONF			0b00000000000000001111111111111111

#define TMC2209_COOLCONF_seimin		0b00000000000000001000000000000000 	// minimum current for smart current control
#define TMC2209_COOLCONF_sedn1		0b00000000000000000100000000000000	// current down step speed
#define TMC2209_COOLCONF_sedn0		0b00000000000000000010000000000000	// current down step speed
#define TMC2209_COOLCONF_semax3		0b00000000000000000000100000000000	// StallGuard hysteresis value for smart current control
#define TMC2209_COOLCONF_semax2		0b00000000000000000000010000000000	// StallGuard hysteresis value for smart current control
#define TMC2209_COOLCONF_semax1		0b00000000000000000000001000000000	// StallGuard hysteresis value for smart current control
#define TMC2209_COOLCONF_semax0		0b00000000000000000000000100000000	// StallGuard hysteresis value for smart current control
#define TMC2209_COOLCONF_seup1		0b00000000000000000000000001000000	// current up step width
#define TMC2209_COOLCONF_seup0		0b00000000000000000000000000100000	// current up step width
#define TMC2209_COOLCONF_semin3		0b00000000000000000000000000001000	// minimum StallGuard value for smart current control and smart current enable
#define TMC2209_COOLCONF_semin2		0b00000000000000000000000000000100	// minimum StallGuard value for smart current control and smart current enable
#define TMC2209_COOLCONF_semin1		0b00000000000000000000000000000010	// minimum StallGuard value for smart current control and smart current enable
#define TMC2209_COOLCONF_semin0		0b00000000000000000000000000000001	// minimum StallGuard value for smart current control and smart current enable

/**
 * Sequencer Registers
 * 0x60...0x6B
 */
#define TMC2209_MSNCNT_ADDR			0x
#define TMC2209_MSNCNT				0b00000000000000000000000000000001

#define TMC2209_MSCURACT_ADDR		0x6B
#define TMC2209_MSCURACT_CUR_B		0b00000000000000000000000011111111
#define TMC2209_MSCURACT_CUR_A		0b00000000111111110000000000000000

/**
 * Chopper Control Registers
 * 0x6C...0x7F
 */
// CHOPCONF
#define TMC2209_CHOPCONF_ADDR		0x6C
#define TMC2209_CHOPCONF_diss2vs	0b10000000000000000000000000000000	// Low side short protection disable
#define TMC2209_CHOPCONF_diss2g		0b01000000000000000000000000000000	// short to GND protection disable
#define TMC2209_CHOPCONF_dedge		0b00100000000000000000000000000000	// enable double edge step pulses
#define TMC2209_CHOPCONF_intpol		0b00010000000000000000000000000000	// interpolation to 256 micro-steps
#define TMC2209_CHOPCONF_mres3		0b00001000000000000000000000000000	// Micro-step resolution
#define TMC2209_CHOPCONF_mres2		0b00000100000000000000000000000000	// Micro-step resolution
#define TMC2209_CHOPCONF_mres1		0b00000010000000000000000000000000	// Micro-step resolution
#define TMC2209_CHOPCONF_mres0		0b00000001000000000000000000000000	// Micro-step resolution
#define TMC2209_CHOPCONF_vsense		0b00000000000000100000000000000000
#define TMC2209_CHOPCONF_tbl1		0b00000000000000010000000000000000
#define TMC2209_CHOPCONF_tbl0		0b00000000000000001000000000000000
#define TMC2209_CHOPCONF_hend3		0b00000000000000000000010000000000
#define TMC2209_CHOPCONF_hend2		0b00000000000000000000001000000000
#define TMC2209_CHOPCONF_hend1		0b00000000000000000000000100000000
#define TMC2209_CHOPCONF_hend0		0b00000000000000000000000010000000
#define TMC2209_CHOPCONF_hstrt2		0b00000000000000000000000001000000
#define TMC2209_CHOPCONF_hstrt1		0b00000000000000000000000000100000
#define TMC2209_CHOPCONF_hstrt0		0b00000000000000000000000000010000
#define TMC2209_CHOPCONF_toff3		0b00000000000000000000000000001000
#define TMC2209_CHOPCONF_toff2		0b00000000000000000000000000000100
#define TMC2209_CHOPCONF_toff1		0b00000000000000000000000000000010
#define TMC2209_CHOPCONF_toff0		0b00000000000000000000000000000001

#define TMC2209_CHOPCONF_MRES			0b00001111000000000000000000000000	// Micro-steps
#define TMC2209_CHOPCONF_MRES_256		0b00000000000000000000000000000000	// 0b0000
#define	TMC2209_CHOPCONF_MRES_128		0b00000001000000000000000000000000	// 0b0001
#define	TMC2209_CHOPCONF_MRES_64		0b00000010000000000000000000000000	// 0b0010
#define	TMC2209_CHOPCONF_MRES_32		0b00000011000000000000000000000000	// 0b0011
#define	TMC2209_CHOPCONF_MRES_16		0b00000100000000000000000000000000	// 0b0100
#define	TMC2209_CHOPCONF_MRES_8			0b00000101000000000000000000000000	// 0b0101
#define	TMC2209_CHOPCONF_MRES_4			0b00000110000000000000000000000000	// 0b0110
#define	TMC2209_CHOPCONF_MRES_2			0b00000111000000000000000000000000	// 0b0111
#define	TMC2209_CHOPCONF_MRES_1			0b00001000000000000000000000000000	// 0b1000	Full step

#define TMC2209_CHOPCONF_TBL			0b00000000000000011000000000000000	// Blank time, in clock cycles
#define TMC2209_CHOPCONF_TBL_16			0b00000000000000000000000000000000	// 16 clock pulses
#define TMC2209_CHOPCONF_TBL_24			0b00000000000000011000000000000000	// 24 clock pulses
#define TMC2209_CHOPCONF_TBL_32			0b00000000000000011000000000000000	// 32 clock pulses
#define TMC2209_CHOPCONF_TBL_40			0b00000000000000011000000000000000	// 40 clock pulses

#define TMC2209_CHOPCONF_HEND			0b00000000000000000000011110000000	// Hysteresis low value
#define TMC2209_CHOPCONF_HEND_n3		0b00000000000000000000000000000000	// -3
#define TMC2209_CHOPCONF_HEND_n2		0b00000000000000000000000010000000	// -2
#define TMC2209_CHOPCONF_HEND_n1		0b00000000000000000000000100000000	// -1
#define TMC2209_CHOPCONF_HEND_0			0b00000000000000000000000110000000	//  0
#define TMC2209_CHOPCONF_HEND_1			0b00000000000000000000001000000000	//  1
#define TMC2209_CHOPCONF_HEND_2			0b00000000000000000000001010000000  //  2
#define TMC2209_CHOPCONF_HEND_3			0b00000000000000000000001100000000  //  3
#define TMC2209_CHOPCONF_HEND_4			0b00000000000000000000001110000000  //  4
#define TMC2209_CHOPCONF_HEND_5			0b00000000000000000000010000000000  //  5
#define TMC2209_CHOPCONF_HEND_6			0b00000000000000000000010010000000  //  6
#define TMC2209_CHOPCONF_HEND_7			0b00000000000000000000010100000000  //  7
#define TMC2209_CHOPCONF_HEND_8			0b00000000000000000000010110000000  //  8
#define TMC2209_CHOPCONF_HEND_9			0b00000000000000000000011010000000  //  9
#define TMC2209_CHOPCONF_HEND_10		0b00000000000000000000011010000000  // 10
#define TMC2209_CHOPCONF_HEND_11		0b00000000000000000000011100000000  // 11
#define TMC2209_CHOPCONF_HEND_12		0b00000000000000000000011110000000  // 12

#define TMC2209_CHOPCONF_HSTRT			0b00000000000000000000000001110000	// Hysteresis start value added to HEND
#define TMC2209_CHOPCONF_HSTRT_1		0b00000000000000000000000000000000	// 1
#define TMC2209_CHOPCONF_HSTRT_2		0b00000000000000000000000000010000	// 2
#define TMC2209_CHOPCONF_HSTRT_3		0b00000000000000000000000000100000	// 3
#define TMC2209_CHOPCONF_HSTRT_4		0b00000000000000000000000000110000	// 4
#define TMC2209_CHOPCONF_HSTRT_5		0b00000000000000000000000001000000	// 5
#define TMC2209_CHOPCONF_HSTRT_6		0b00000000000000000000000001010000	// 6
#define TMC2209_CHOPCONF_HSTRT_7		0b00000000000000000000000001100000	// 7
#define TMC2209_CHOPCONF_HSTRT_8		0b00000000000000000000000001110000	// 8


#define TMC2209_CHOPCONF_TOFF			0b00000000000000000000000000001111	// Off time Nclk = 24 + 32 * TOFF
#define TMC2209_CHOPCONF_TOFF_0			0b00000000000000000000000000000000	// Driver disable, all bridges off
#define TMC2209_CHOPCONF_TOFF_1			0b00000000000000000000000000000001	// 1 - use only with TBL >= 2
#define TMC2209_CHOPCONF_TOFF_2			0b00000000000000000000000000000010	// 2
#define TMC2209_CHOPCONF_TOFF_3			0b00000000000000000000000000000011	// 3
#define TMC2209_CHOPCONF_TOFF_4			0b00000000000000000000000000000100	// 4
#define TMC2209_CHOPCONF_TOFF_5			0b00000000000000000000000000000101	// 5
#define TMC2209_CHOPCONF_TOFF_6			0b00000000000000000000000000000110	// 6
#define TMC2209_CHOPCONF_TOFF_7			0b00000000000000000000000000000111	// 7
#define TMC2209_CHOPCONF_TOFF_8			0b00000000000000000000000000001000	// 8
#define TMC2209_CHOPCONF_TOFF_9			0b00000000000000000000000000001001	// 9
#define TMC2209_CHOPCONF_TOFF_10		0b00000000000000000000000000001010	// 10
#define TMC2209_CHOPCONF_TOFF_11		0b00000000000000000000000000001011	// 11
#define TMC2209_CHOPCONF_TOFF_12		0b00000000000000000000000000001100	// 12
#define TMC2209_CHOPCONF_TOFF_13		0b00000000000000000000000000001101	// 13
#define TMC2209_CHOPCONF_TOFF_14		0b00000000000000000000000000001110	// 14
#define TMC2209_CHOPCONF_TOFF_15		0b00000000000000000000000000001111	// 15



// DRV_STATUS
#define TMC2209_DRV_STATUS_ADDR			0x6f
#define TMC2209_DRV_STATUS_stst			0b10000000000000000000000000000000
#define TMC2209_DRV_STATUS_stealth		0b01000000000000000000000000000000
#define TMC2209_DRV_STATUS_CS_ACTUAL	0b00000000000111110000000000000000
#define TMC2209_DRV_STATUS_t157			0b00000000000000000000100000000000
#define TMC2209_DRV_STATUS_t150			0b00000000000000000000010000000000
#define TMC2209_DRV_STATUS_t143			0b00000000000000000000001000000000
#define TMC2209_DRV_STATUS_t120			0b00000000000000000000000100000000
#define TMC2209_DRV_STATUS_olb			0b00000000000000000000000010000000
#define TMC2209_DRV_STATUS_ola			0b00000000000000000000000001000000
#define TMC2209_DRV_STATUS_sv2vsb		0b00000000000000000000000000100000
#define TMC2209_DRV_STATUS_sv2vsa		0b00000000000000000000000000010000
#define TMC2209_DRV_STATUS_s2gb			0b00000000000000000000000000001000
#define TMC2209_DRV_STATUS_s2ga			0b00000000000000000000000000000100
#define TMC2209_DRV_STATUS_ot			0b00000000000000000000000000000010
#define TMC2209_DRV_STATUS_otpw			0b00000000000000000000000000000001
/*
 * ToDo: add better DRV_STATUS references for these read-only registers
 */

// PWMCONF
#define TMC2209_PWMCONF_ADDR			0x70
#define TMC2209_PWMCONF_PWM_LIM			0b11110000000000000000000000000000
#define TMC2209_PWMCONF_PWM_REG			0b00001111000000000000000000000000
#define TMC2209_PWMCONF_freewheel1		0b00000000001000000000000000000000
#define TMC2209_PWMCONF_freewheel0		0b00000000000100000000000000000000
#define TMC2209_PWMCONF_pwm_autograd 	0b00000000000010000000000000000000
#define TMC2209_PWMCONF_pwm_autoscale	0b00000000000001000000000000000000
#define TMC2209_PWMCONF_pwm_freq1		0b00000000000000100000000000000000
#define TMC2209_PWMCONF_pwm_freq0		0b00000000000000010000000000000000
#define TMC2209_PWMCONF_PWM_GRAD		0b00000000000000001111111100000000
#define TMC2209_PWMCONF_PWM_OFS			0b00000000000000000000000011111111

#define TMC2209_PWMCONF_PWM_LIM_shift	28 // Required bit shift

#define TMC2209_PWMCONF_PWM_REG_shift	24 // Required bit shift

#define TMC2209_PWMCONF_freewheel				0b00000000001100000000000000000000
#define TMC2209_PWMCONF_freewheel_normal		0b00000000000000000000000000000000
#define TMC2209_PWMCONF_freewheel_freewheeling	0b00000000000100000000000000000000
#define TMC2209_PWMCONF_freewheel_LS_short		0b00000000001000000000000000000000
#define TMC2209_PWMCONF_freewheel_HS_short		0b00000000001100000000000000000000

#define TMC2209_PWMCONF_pwm_freq			0b00000000000000110000000000000000
#define TMC2209_PWMCONF_pwm_freq_2_1024		0b00000000000000000000000000000000
#define TMC2209_PWMCONF_pwm_freq_2_683		0b00000000000000010000000000000000
#define TMC2209_PWMCONF_pwm_freq_2_512		0b00000000000000100000000000000000
#define TMC2209_PWMCONF_pwm_freq_2_410		0b00000000000000110000000000000000

#define TMC2209_PWMCONF_PWM_GRAD_shift	8 // Required bit shifts

#define TMC2209_PWMCONF_PWM_OFS_shift	0 // Required bit shifts







// PWM_SCALE
#define TMC2209_PWM_SCALE_ADDR				0x71
#define TMC2209_PWM_SCALE					0b00000001111111110000000011111111
#define TMC2209_PWM_SCALE_PWM_SCALE_SUM 	0b00000000000000000000000011111111
#define TMC2209_PWM_SCALE_PWM_SCALE_AUTO	0b00000001111111110000000000000000

// PWM_AUTO
#define TMC2209_PWM_AUTO_ADDR				0x72
#define TMC2209_PWM_AUTO					0b00000000111111110000000011111111
#define TMC2209_PWM_AUTO_PWM_OFS_AUTO		0b00000000000000000000000011111111
#define TMC2209_PWM_AUTO_PWM_GRAD_AUTO		0b00000000111111110000000000000001







/**
 * Data types and enums
 */






typedef struct {
	// HW Interface
//	uint16_t stepPin;		// THESE NEEDC TO BE TIMER NOT GPIO
//	GPIO_TypeDef *stepPort;
	TIM_HandleTypeDef *stepTimer; /** Pointer to timer channel */
	uint32_t stepTimerChannel;

	uint16_t dirPin;
	GPIO_TypeDef *dirPort;

	UART_HandleTypeDef *uart;
	uint8_t uartAddr; // 0x00 to 0x03, set with hardware jumpers

	/*
	 * 32-bit register data
	 */
	// General registers
	uint32_t gconf;
	uint32_t gstat;
	uint32_t ifcnt;
	uint32_t slaveconf;
	uint32_t otp_prog;
	uint32_t otp_read;
	uint32_t ioin;
	uint32_t factory_conf;
	// Velocity dependent registers
	uint32_t ihold_irun;
	uint32_t tpowerdown;
	uint32_t tstep;
	uint32_t tpwmthrs;
	uint32_t vactual;
	// CoolStep and StallGuard control registers
	uint32_t tcoolthrs;
	uint32_t sgthrs;
	uint32_t sg_result;
	uint32_t coolconf;
	// Sequencer registers
	uint32_t mscnt;
	uint32_t mscuract;
	// Chopper control registers
	uint32_t chopconf;
	uint32_t drv_status;
	uint32_t pwmconf;
	uint32_t pwm_scale;
	uint32_t pwm_auto;

} tmc2209_t;

/**
 * UART Message Structs
 */
#define TMC2209_UART_TIMEOUT	100// in ms
#define TMC2209_WRITE_DATAGRAM_LENGTH 8 // in Bytes
#define TMC2209_READ_REQUEST_DATAGRAM_LENGTH 4 // in Bytes
#define TMC2209_READ_RESPONSE_DATAGRAM_LENGTH 8 // in Bytes


typedef struct {
	uint8_t slaveAddress;
	uint8_t registerAddress;
	uint32_t data;
}tmc2209_write_t;

typedef struct {
	uint8_t slaveAddress;
	uint8_t registerAddress;
}tmc2209_read_request_t;

typedef struct {
	uint8_t slaveAddress;
	uint8_t registerAddress;
	uint32_t data;
}tmc2209_read_response_t;


/**
 * Exported functions
 */


tmc2209_t tmc2209_new(
		TIM_HandleTypeDef *stepTimer,
		uint32_t stepTimerChannel,
		uint16_t dirPin,
		GPIO_TypeDef *dirPort,
		UART_HandleTypeDef *uart,
		uint8_t uartAddr);
/**
 * UART
 */
uint32_t tmc2209_read(tmc2209_t *tmc, tmc2209_read_request_t readDatagram);
void tmc2209_write(tmc2209_t *tmc, tmc2209_write_t writeDatagram);

/**
 * Read and write registers
 */

// General registers
void tmc2209_set_GCONF(tmc2209_t *tmc);
void tmc2209_get_GCONF(tmc2209_t *tmc);

void tmc2209_get_GSTAT(tmc2209_t *tmc);
void tmc2209_reset_GSTAT(tmc2209_t *tmc);

void tmc2209_get_IFCNT(tmc2209_t *tmc);

void tmc2209_set_SLAVECONF(tmc2209_t *tmc);

void tmc2209_set_OTP_PROG(tmc2209_t *tmc);

void tmc2209_get_OTP_READ(tmc2209_t *tmc);

void tmc2209_get_IOIN(tmc2209_t *tmc);

void tmc2209_set_FACTORY_CONF(tmc2209_t *tmc);
void tmc2209_get_FACTORY_CONF(tmc2209_t *tmc);

// Velocity dependent registers
void tmc2209_set_IHOLD_IRUN(tmc2209_t *tmc);

void tmc2209_set_TPOWERDOWN(tmc2209_t *tmc);

void tmc2209_get_TSTEP(tmc2209_t *tmc);

void tmc2209_set_TPWMTHRS(tmc2209_t *tmc);

void tmc2209_set_VACTUAL(tmc2209_t *tmc);

// CoolStep and StallGuard control registers
void tmc2209_set_TCOOLTHRS(tmc2209_t *tmc);

void tmc2209_set_SGTHRS(tmc2209_t *tmc);

void tmc2209_get_SG_RESULT(tmc2209_t *tmc);

void tmc2209_set_COOLCONF(tmc2209_t *tmc);

// Sequencer registers
void tmc2209_get_MSCNT(tmc2209_t *tmc);

void tmc2209_get_MSCURACT(tmc2209_t *tmc);

// Chopper control registers
void tmc2209_set_CHOPCONF(tmc2209_t *tmc);
void tmc2209_get_CHOPCONF(tmc2209_t *tmc);

void tmc2209_get_DRV_STATUS(tmc2209_t *tmc);

void tmc2209_set_PWMCONF(tmc2209_t *tmc);
void tmc2209_get_PWMCONF(tmc2209_t *tmc);

void tmc2209_get_PWM_SCALE(tmc2209_t *tmc);

void tmc2209_get_PWM_AUTO(tmc2209_t *tmc);

// Calculate CRC value
void tmc2209_calculateCRC(uint8_t* datagram, uint8_t datagramLength);

/**
 * Speed and control
 */

void tmc2209_step(tmc2209_t *tmc);

// STEP DIR control
void tmc2209_on(tmc2209_t *tmc);
void tmc2209_off(tmc2209_t *tmc);

// UART control
//void tmc2209_set_speed(tmc2209_t *tmc, );



#endif /* INC_TMC2209_H_ */
